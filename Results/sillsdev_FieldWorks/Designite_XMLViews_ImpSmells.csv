Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,ContructorSurrogate,The method has 176 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,MakeItem,The method has 106 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,InitializeComponent,The method has 420 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceSetupButton_Click,The method has 104 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,MorphTypeChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The method has 138 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,AddWritingSystemsToCombo,The method has 173 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,InitializeComponent,The method has 195 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The method has 103 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,MakeCombo,The method has 111 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,SimpleDateMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleDateMatchDlg.cs,InitializeComponent,The method has 110 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,LoadTree,The method has 100 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitializeComponent,The method has 232 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,SimpleMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleMatchDlg.cs,InitializeComponent,The method has 106 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,XmlBrowseRDEView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseRDEView.cs,CanAdvanceToNewRow,The method has 115 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,XmlBrowseRDEView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseRDEView.cs,OnDeleteRecord,The method has 160 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,XmlBrowseView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseView.cs,OnMouseUp,The method has 102 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableRow,The method has 102 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableCell,The method has 137 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessFrag,The method has 675 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,DetermineNeededFieldsFor,The method has 313 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessProperty,The method has 220 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,XmlVcDisplayVec,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVcDisplayVec.cs,Display,The method has 193 lines of code.
Long Method,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,StringsFor,The method has 206 lines of code.
Complex Method,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,ContructorSurrogate,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,BulkEditTargetComboSelectedIndexChanged,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,InitSorter,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,Dispose,Cyclomatic complexity of the method is 20
Complex Method,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,FilterFromLink,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,AllowDeleteItem,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceSetupButton_Click,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,xbv_ClickCopy,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Controls,FieldReadWriter,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,Create,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,GetDuplicateColumns,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,GetLeadChar,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,OutputItemNumber,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,BeginCssClassIfNeeded,Cyclomatic complexity of the method is 13
Complex Method,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,Dispose,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,MakeCombo,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Controls,LabelNode,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LabelNode.cs,AddChildren,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Controls,LabelNode,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LabelNode.cs,AddChildrenAndLookForSelected,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Controls,LayoutCache,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutCache.cs,GetNode,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Common.Controls,PartGenerator,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\PartGenerator.cs,GeneratePartsFromLayouts,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Common.Controls,PartGenerator,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\PartGenerator.cs,GetGeneratedChildren,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitializeExtras,Cyclomatic complexity of the method is 14
Complex Method,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,GenerateChooserInfoForCustomNode,Cyclomatic complexity of the method is 12
Complex Method,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ScanToolsAndClerks,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,m_webBrowser_Navigated,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,NavigateToSelectedTopic,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Controls,XmlBrowseRDEView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseRDEView.cs,ProcessRDEKeyPress,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Controls,XmlBrowseView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseView.cs,OnMouseUp,Cyclomatic complexity of the method is 13
Complex Method,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableRow,Cyclomatic complexity of the method is 15
Complex Method,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableCell,Cyclomatic complexity of the method is 14
Complex Method,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetBestWsForNode,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Controls,XmlSeqSelectionRestorer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlSeqView.cs,Dispose,Cyclomatic complexity of the method is 14
Complex Method,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,FilterAndSortListByComplexFormType,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,AddMultipleAlternatives,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,InsertLiteralString,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,AddObject,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,AddObjectVector,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ValueEqualityConditionsPass,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetFlid,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,LoadCustomFieldMapsIfNeeded,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Controls,MainCallerDisplayCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,PerformDisplay,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Common.Controls,CmObjectComparer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,Compare,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Controls,XmlVcDisplayVec,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVcDisplayVec.cs,Display,Cyclomatic complexity of the method is 21
Complex Method,SIL.FieldWorks.Common.Controls,XMLViewsDataCache,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XMLViewsDataCache.cs,get_StringProp,Cyclomatic complexity of the method is 8
Long Parameter List,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,BrowseViewer,The method has 8 parameters. Parameters: nodeSpec' hvoRoot' fakeFlid' cache' mediator' propertyTable' sortItemProvider' sda
Long Parameter List,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,ContructorSurrogate,The method has 8 parameters. Parameters: nodeSpec' hvoRoot' fakeFlid' cache' mediator' propertyTable' sortItemProvider' sda
Long Parameter List,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,CreateBulkEditBar,The method has 5 parameters. Parameters: bv' spec' mediator' propertyTable' cache
Long Parameter List,SIL.FieldWorks.Common.Controls,OneColumnXmlBrowseView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,OneColumnXmlBrowseView,The method has 9 parameters. Parameters: nodeSpec' hvoRoot' mainTag' cache' mediator' propertyTable' styleSheet' bv' icolLvHeaderToAdd
Long Parameter List,SIL.FieldWorks.Common.Controls,BrowseActiveViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,BrowseActiveViewer,The method has 8 parameters. Parameters: nodeSpec' hvoRoot' fakeFlid' cache' mediator' propertyTable' sortItemProvider' sda
Long Parameter List,SIL.FieldWorks.Common.Controls,BrowseActiveViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,BulkEditBar,The method has 5 parameters. Parameters: bv' spec' mediator' propertyTable' cache
Long Parameter List,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,GetPathInfoFromColumnSpec,The method has 5 parameters. Parameters: node' attrName' defaultOwningClass' owningClass' property
Long Parameter List,SIL.FieldWorks.Common.Controls,BulkCopyMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,BulkCopyMethod,The method has 7 parameters. Parameters: cache' sda' dstAccessor' spec' srcAccessor' tssSep' options
Long Parameter List,SIL.FieldWorks.Common.Controls,TransduceMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,TransduceMethod,The method has 8 parameters. Parameters: cache' sda' dstAccessor' spec' srcAccessor' converter' tssSep' options
Long Parameter List,SIL.FieldWorks.Common.Controls,ReplaceWithMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,ReplaceWithMethod,The method has 6 parameters. Parameters: cache' sda' accessor' spec' pattern' replacement
Long Parameter List,SIL.FieldWorks.Common.Controls,ComplexListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,ComplexListChooserBEditControl,The method has 6 parameters. Parameters: flid' hvoList' displayNameProperty' fieldName' displayWs' gph
Long Parameter List,SIL.FieldWorks.Common.Controls,SemanticDomainChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,SemanticDomainChooserBEditControl,The method has 5 parameters. Parameters: cache' mediator' propertyTable' bar' colSpec
Long Parameter List,SIL.FieldWorks.Common.Controls,MorphTypeChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,MorphTypeChooserBEditControl,The method has 5 parameters. Parameters: flid' subflid' hvoList' ws' viewer
Long Parameter List,SIL.FieldWorks.Common.Controls,MorphTypeChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,SwapFormValues,The method has 5 parameters. Parameters: entry' origForm' newForm' typeHvo' idsToDel
Long Parameter List,SIL.FieldWorks.Common.Controls,OwnAtomicStringPropReadWriter,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,OwnAtomicStringPropReadWriter,The method has 5 parameters. Parameters: cache' flidString' ws' flidObj' clid
Long Parameter List,SIL.FieldWorks.Common.Controls,OwnSeqStringPropReadWriter,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,OwnSeqStringPropReadWriter,The method has 5 parameters. Parameters: cache' flidString' ws' flidObj' clid
Long Parameter List,SIL.FieldWorks.Common.Controls,OwnAtomicMlPropReadWriter,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,OwnAtomicMlPropReadWriter,The method has 5 parameters. Parameters: cache' flidString' ws' flidObj' clid
Long Parameter List,SIL.FieldWorks.Common.Controls,OwnSeqMlPropReadWriter,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,OwnSeqMlPropReadWriter,The method has 5 parameters. Parameters: cache' flidString' ws' flidObj' clid
Long Parameter List,SIL.FieldWorks.Common.Controls,ChooserCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ChooserCommandBase.cs,ChooserCommand,The method has 5 parameters. Parameters: cache' fCloseBeforeExecuting' sLabel' mediator' propertyTable
Long Parameter List,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,AddWritingSystemsToCombo,The method has 5 parameters. Parameters: cache' items' contentToAdd' skipDefaults' allowMultiple
Long Parameter List,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,Initialize,The method has 7 parameters. Parameters: cache' propertyTable' w' sDataType' sFormat' sOutPath' sBodyClass
Long Parameter List,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,GetLeadChar,The method has 6 parameters. Parameters: sEntryNFD' sWs' wsDigraphMap' wsCharEquivalentMap' wsIgnorableCharMap' cache
Long Parameter List,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,GetDigraphs,The method has 7 parameters. Parameters: sWs' wsDigraphMap' wsCharEquivalentMap' wsIgnorableCharMap' cache' mapChars' chIgnoreSet
Long Parameter List,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,MakeListChoiceFilterItem,The method has 5 parameters. Parameters: item' combo' beSpec' mediator' propertyTable
Long Parameter List,SIL.FieldWorks.Common.Controls,ListChoiceComboItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,ListChoiceComboItem,The method has 8 parameters. Parameters: tssName' fsi' cache' mediator' propertyTable' combo' fAtomic' filterType
Long Parameter List,SIL.FieldWorks.Common.Controls,RestrictDateComboItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,RestrictDateComboItem,The method has 6 parameters. Parameters: tssName' helpTopicProvider' fsi' ws' fGenDate' combo
Long Parameter List,SIL.FieldWorks.Common.Controls,RestrictComboItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,RestrictComboItem,The method has 5 parameters. Parameters: tssName' helpTopicProvider' fsi' ws' combo
Long Parameter List,SIL.FieldWorks.Common.Controls,FindComboItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,FindComboItem,The method has 5 parameters. Parameters: tssName' fsi' ws' combo' bv
Long Parameter List,SIL.FieldWorks.Common.Controls,FilterSdaDecorator,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterSdaDecorator.cs,VecProp,The method has 5 parameters. Parameters: hvo' tag' chvoMax' chvo' rghvo
Long Parameter List,SIL.FieldWorks.Common.Controls,FlatListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FlatListView.cs,Initialize,The method has 6 parameters. Parameters: cache' stylesheet' mediator' propertyTable' xnConfig' objs
Long Parameter List,SIL.FieldWorks.Common.Controls,LabelNode,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LabelNode.cs,AddSecondaryNodesAndLookForSelected,The method has 6 parameters. Parameters: node' nodes' nodeRepresentingCurrentChoice' objToSelect' ownershipStack' chosenObjs
Long Parameter List,SIL.FieldWorks.Common.Controls,MatchingObjectsBrowser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\MatchingObjectsBrowser.cs,Initialize,The method has 6 parameters. Parameters: cache' stylesheet' mediator' propertyTable' configNode' searchEngine
Long Parameter List,SIL.FieldWorks.Common.Controls,MatchingObjectsBrowser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\MatchingObjectsBrowser.cs,Initialize,The method has 7 parameters. Parameters: cache' stylesheet' mediator' propertyTable' configNode' searchEngine' reversalWs
Long Parameter List,SIL.FieldWorks.Common.Controls,ObjectLabel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ObjectLabels.cs,CreateObjectLabels,The method has 5 parameters. Parameters: cache' objs' displayNameProperty' displayWs' fIncludeNone
Long Parameter List,SIL.FieldWorks.Common.Controls,ObjectListPublisher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ObjectListPublisher.cs,Replace,The method has 6 parameters. Parameters: hvoObj' tag' ihvoMin' ihvoLim' _rghvo' chvo
Long Parameter List,SIL.FieldWorks.Common.Controls,SearchEngine,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SearchEngine.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.Common.Controls,SortMethodFinder,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutFinder.cs,SortMethodFinder,The method has 5 parameters. Parameters: cache' methodName' layoutName' colSpec' app
Long Parameter List,SIL.FieldWorks.Common.Controls,SortMethodFinder,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutFinder.cs,GetKey,The method has 5 parameters. Parameters: layout' cmo' item' pathIndex' sortedFromEnd
Long Parameter List,SIL.FieldWorks.Common.Controls,SortMethodFinder,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutFinder.cs,GetChildObjKey,The method has 5 parameters. Parameters: layout' hvo' item' pathIndex' sortedFromEnd
Long Parameter List,SIL.FieldWorks.Common.Controls,PartGenerator,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\PartGenerator.cs,ReplaceParamsInAttributes,The method has 5 parameters. Parameters: output' labelName' fieldName' customFieldId' className
Long Parameter List,SIL.FieldWorks.Common.Controls,PartGenerator,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\PartGenerator.cs,GetGeneratedChildren,The method has 5 parameters. Parameters: root' cache' keyAttrNames' vc' rootClassId
Long Parameter List,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ReallySimpleListChooser,The method has 5 parameters. Parameters: persistProvider' helpTopicProvider' labels' currentObj' fieldName
Long Parameter List,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ReallySimpleListChooser,The method has 8 parameters. Parameters: cache' helpTopicProvider' persistProvider' labels' currentObj' fieldName' nullLabel' stylesheet
Long Parameter List,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ReallySimpleListChooser,The method has 7 parameters. Parameters: cache' helpTopicProvider' persistProvider' labels' currentObj' fieldName' nullLabel
Long Parameter List,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ReallySimpleListChooser,The method has 6 parameters. Parameters: cache' helpTopicProvider' persistProvider' labels' currentObj' fieldName
Long Parameter List,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,Init,The method has 8 parameters. Parameters: cache' helpTopicProvider' persistProvider' fieldName' labels' currentObj' nullLabel' stylesheet
Long Parameter List,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ReallySimpleListChooser,The method has 5 parameters. Parameters: persistProvider' labels' fieldName' stylesheet' helpTopicProvider
Long Parameter List,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ReallySimpleListChooser,The method has 6 parameters. Parameters: persistProvider' labels' fieldName' cache' chosenObjs' helpTopicProvider
Long Parameter List,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ReallySimpleListChooser,The method has 7 parameters. Parameters: persistProvider' labels' fieldName' cache' chosenObjs' fSortLabels' helpTopicProvider
Long Parameter List,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ReallySimpleListChooser,The method has 5 parameters. Parameters: persistProvider' fieldName' cache' chosenObjs' helpTopicProvider
Long Parameter List,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitializeRaw,The method has 7 parameters. Parameters: mediator' propertyTable' sTitle' sText' sGotoLabel' sTool' sWs
Long Parameter List,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ChooseNaturalClass,The method has 5 parameters. Parameters: rootb' cache' persistenceProvider' mediator' propertyTable
Long Parameter List,SIL.FieldWorks.Common.Controls,LeafChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,LeafChooser,The method has 7 parameters. Parameters: persistProvider' labels' fieldName' cache' chosenObjs' leafFlid' helpTopicProvider
Long Parameter List,SIL.FieldWorks.Common.Controls,LeafLabelNode,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,AddSecondaryNodesAndLookForSelected,The method has 6 parameters. Parameters: node' nodes' nodeRepresentingCurrentChoice' objToSelect' ownershipStack' chosenObjs
Long Parameter List,SIL.FieldWorks.Common.Controls,SimpleMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleMatchDlg.cs,SimpleMatchDlg,The method has 5 parameters. Parameters: wsf' helpTopicProvider' ws' ss' cache
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlBrowseRDEView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseRDEView.cs,Init,The method has 6 parameters. Parameters: nodeSpec' hvoRoot' fakeFlid' cache' mediator' bv
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,GetCurrentTableCellInfo,The method has 9 parameters. Parameters: vwsel' iLevel' iBox' iTableBox' cTableBoxes' iTableLevel' iCellBox' cCellBoxes' iCellLevel
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,Init,The method has 6 parameters. Parameters: nodeSpec' hvoRoot' fakeFlid' cache' mediator' bv
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,ChangeAttrValue,The method has 5 parameters. Parameters: savedCols' layoutName' attrName' attrValue' replaceWith
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AppendAttrValue,The method has 5 parameters. Parameters: savedCols' layoutName' customField' attrName' attrValue
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableCell,The method has 7 parameters. Parameters: vwenv' hvo' index' hvoRoot' icolActive' cAdjCol' icol
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,SetCellProperties,The method has 6 parameters. Parameters: rowIndex' icol' node' hvo' vwenv' fIsCellActive
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,ProcessFrag,The method has 5 parameters. Parameters: frag' vwenv' hvo' fEditable' caller
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,DisplayPicture,The method has 5 parameters. Parameters: vwenv' hvo' tag' val' frag
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,LoadDataFor,The method has 7 parameters. Parameters: vwenv' rghvo' chvo' hvoParent' tag' frag' ihvoMin
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlRDEBrowseViewVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlRDEBrowseViewVc.cs,SetCellProperties,The method has 6 parameters. Parameters: rowIndex' icol' node' hvo' vwenv' fIsCellActive
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlRDEBrowseViewVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlRDEBrowseViewVc.cs,ProcessFrag,The method has 5 parameters. Parameters: frag' vwenv' hvo' fEditable' caller
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlSeqView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlSeqView.cs,XmlSeqView,The method has 7 parameters. Parameters: cache' hvoRoot' flid' xnSpec' sda' app' publication
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,XmlVc,The method has 5 parameters. Parameters: rootLayoutName' fEditable' rootSite' app' sda
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,XmlVc,The method has 6 parameters. Parameters: rootLayoutName' fEditable' rootSite' app' condition' sda
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetNodeForPart,The method has 5 parameters. Parameters: hvo' layoutName' fIncludeLayouts' sda' layouts
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,DisplayPicture,The method has 5 parameters. Parameters: vwenv' hvo' tag' val' frag
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,AddMultipleAlternatives,The method has 6 parameters. Parameters: wsIds' vwenv' hvo' flid' caller' fCurrentHvo
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessFrag,The method has 5 parameters. Parameters: frag' vwenv' hvo' fEditable' caller
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,DisplayOtherObjStringAlt,The method has 5 parameters. Parameters: flid' ws' vwenv' hvoTarget' caller
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,PartRefSetupToProcessChildren,The method has 6 parameters. Parameters: frag' node' hvo' vwenv' fSingleGramInfoFirst' flowType
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,InsertLiteralString,The method has 5 parameters. Parameters: frag' vwenv' attrName' flowType' defaultStyle
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,AddObject,The method has 6 parameters. Parameters: frag' vwenv' flid' fragId' caller' hvo
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,AddObjectVector,The method has 5 parameters. Parameters: frag' vwenv' flid' fragId' caller
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ConditionPasses,The method has 5 parameters. Parameters: frag' hvo' cache' sda' caller
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ConditionPasses,The method has 6 parameters. Parameters: vwenv' frag' hvo' cache' sda' caller
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ValueEqualityConditionsPass,The method has 6 parameters. Parameters: vwenv' frag' hvo' cache' sda' caller
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,StringAltEquals,The method has 5 parameters. Parameters: sValue' hvo' flid' ws' sda
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,StringAltEqualsConditionPasses,The method has 6 parameters. Parameters: vwenv' frag' hvo' cache' sda' caller
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,NoteStringValDependency,The method has 5 parameters. Parameters: vwenv' hvo' flid' ws' val
Long Parameter List,SIL.FieldWorks.Common.Controls,DisplayCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessChildren,The method has 5 parameters. Parameters: fragId' vc' vwenv' node' hvo
Long Parameter List,SIL.FieldWorks.Common.Controls,DisplayCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessChildren,The method has 6 parameters. Parameters: fragId' vc' vwenv' node' hvo' caller
Long Parameter List,SIL.FieldWorks.Common.Controls,MainCallerDisplayCommandSeq,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,MainCallerDisplayCommandSeq,The method has 5 parameters. Parameters: mainNode' caller' fUserMainAsFrag' wsForce' stackPartRef
Long Parameter List,SIL.FieldWorks.Common.Controls,RootDisplayCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessChildren,The method has 5 parameters. Parameters: fragId' vc' vwenv' node' hvo
Long Parameter List,SIL.FieldWorks.Common.Controls,ReadOnlyRootDisplayCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessChildren,The method has 5 parameters. Parameters: fragId' vc' vwenv' node' hvo
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVcDisplayVec,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVcDisplayVec.cs,XmlVcDisplayVec,The method has 5 parameters. Parameters: vc' vwenv' hvo' flid' frag
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlVcDisplayVec,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVcDisplayVec.cs,AddItemEmbellishments,The method has 8 parameters. Parameters: listDelimitNode' fNumber' hvo' ihvo' xaNum' ttpNum' fDelayNumber' tssDelayedNumber
Long Parameter List,SIL.FieldWorks.Common.Controls,WrapParagraphDisplayCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVcDisplayVec.cs,WrapParagraphDisplayCommand,The method has 9 parameters. Parameters: wrappedFragId' creator' paraStyle' before' listDelimitNode' number' delayNumber' xaNum' ttpNum
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,CollectBrowseItems,The method has 6 parameters. Parameters: hvo' colSpec' collector' mdc' sda' layouts
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,CollectBrowseItems,The method has 9 parameters. Parameters: hvo' node' collector' mdc' sda' layouts' caller' hvos' flids
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,GetNodeForRelatedObject,The method has 5 parameters. Parameters: hvoDst' caller' node' layouts' sda
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,ChildKeys,The method has 7 parameters. Parameters: fdoCache' sda' layout' hvo' layoutCache' caller' wsForce
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,AssembleChildKeys,The method has 7 parameters. Parameters: fdoCache' sda' layout' hvo' layoutCache' caller' wsForce
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,AddMultipleAlternatives,The method has 6 parameters. Parameters: cache' sda' wsIds' hvo' flid' frag
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,StringsFor,The method has 7 parameters. Parameters: fdoCache' sda' layout' hvo' layoutCache' caller' wsForce
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,ProcessMultiLingualChildren,The method has 7 parameters. Parameters: fdoCache' sda' frag' hvo' layoutCache' caller' wsForce
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,GetLayoutNodeForChild,The method has 6 parameters. Parameters: sda' hvoTarget' flid' targetLayoutName' layout' layoutCache
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,GetNodeToUseForColumn,The method has 7 parameters. Parameters: bvi' colSpec' mdc' sda' layouts' hvo' collectOuterStructParts
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,GetDisplayCommandForColumn,The method has 7 parameters. Parameters: bvi' colSpec' mdc' sda' layouts' hvo' collectOuterStructParts
Long Parameter List,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,GetDisplayCommandForColumn1,The method has 8 parameters. Parameters: bvi' node' mdc' sda' layouts' depth' hvo' collectOuterStructParts
Long Identifier,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,,The length of the parameter m_fFilterInitializationComplete is 31.
Long Identifier,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,,The length of the parameter m_lastChangedSelectionListItemsClass is 36.
Long Identifier,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,,The length of the parameter m_fSavedSelectionsDuringFilterChange is 36.
Long Identifier,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,,The length of the parameter m_setupOrRestoredBulkEditBarTab is 31.
Long Identifier,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,,The length of the parameter m_bulkEditListItemsGhostFields is 30.
Long Identifier,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,WriteCssFile,The length of the parameter allowDictionaryParagraphIndent is 30.
Long Identifier,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The length of the parameter currentDisplayPositionOfColumn is 30.
Long Identifier,SIL.FieldWorks.Common.Controls,PartGenerator,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\PartGenerator.cs,GetGeneratedChildren,The length of the parameter m_fGenerateChildPartsForParentLayouts is 37.
Long Identifier,SIL.FieldWorks.Common.Controls,ObjectValuePartGenerator,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\PartGenerator.cs,,The length of the parameter m_collectionToGeneratePartsFrom is 31.
Long Identifier,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,,The length of the parameter m_iTopOfScreenObjectForScrollPosition is 37.
Long Identifier,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,,The length of the parameter s_haveShownDefaultColumnMessage is 31.
Long Identifier,SIL.FieldWorks.Common.Controls,XMLViewsDataCache,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XMLViewsDataCache.cs,,The length of the parameter ktagAlternateValueMultiBaseLim is 30.
Long Statement,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,ContructorSurrogate,The length of the statement  "				// an Invalidate()' Refresh()' or Update(). Until we find a solution to that problem' the parent of DhListView (e.g. BrowseViewer) " is 130.
Long Statement,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,LayoutScrollControls,The length of the statement  "			if (m_xbv == null || m_lvHeader == null || m_lvHeader.Columns.Count == 0 || m_scrollContainer.Width < DhListView.kgapForScrollBar) " is 130.
Long Statement,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,LayoutScrollControls,The length of the statement  "			int widthTotal = Math.Max(SetSavedOrDefaultColWidths(m_scrollContainer.Width)' m_scrollContainer.ClientRectangle.Width); " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,IsColumnShowing,The length of the statement  "			//Be as non-specific about the column as we can' writing system options and width and other things may give false negatives " is 123.
Long Statement,SIL.FieldWorks.Common.Controls,BrowseViewScroller,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,Dispose,The length of the statement  "			Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,ReconstructPreservingBVScrollPosition,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,Dispose,The length of the statement  "			Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,ReconstructPreservingBVScrollPosition,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,CheckDisposed,The length of the statement  "				throw new ObjectDisposedException(ToString()' "This object is being used after it has been disposed: this is an Error."); " is 121.
Long Statement,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(BulkEditBar)); " is 131.
Long Statement,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,InitializeComponent,The length of the statement  "			this.m_imageList16x16.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("m_imageList16x16.ImageStream"))); " is 132.
Long Statement,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,InitializeComponent,The length of the statement  "			this.m_clickCopyTargetCombo.SelectedIndexChanged += new System.EventHandler(this.m_clickCopyTargetCombo_SelectedIndexChanged); " is 126.
Long Statement,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,InitializeComponent,The length of the statement  "			this.m_findReplaceTargetCombo.SelectedIndexChanged += new System.EventHandler(this.m_findReplaceTargetCombo_SelectedIndexChanged); " is 130.
Long Statement,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,InitializeComponent,The length of the statement  "			this.m_imageList16x14.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("m_imageList16x14.ImageStream"))); " is 132.
Long Statement,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,ItemsToChange,The length of the statement  "			return (from obj in objects select obj.Hvo).ToList(); // probably counted at least twice and enumerated' so collection is likely more efficient. " is 144.
Long Statement,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_ApplyButton_Click,The length of the statement  "			//we don't want the RecordList to call ReloadList() on an apply' that would prevent the user from seeing the results if the items " is 129.
Long Statement,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_ApplyButton_Click,The length of the statement  "			//which the filter might now exclude. So apply any pending row changes and suspend any other row replacement until further notice " is 129.
Long Statement,SIL.FieldWorks.Common.Controls,BulkEditTabPageSettings,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,SaveSettings,The length of the statement  "				bulkEditBar.m_propertyTable.SetProperty(currentTabSettingsKey' settingsXml' PropertyTable.SettingsGroup.LocalSettings' false); " is 126.
Long Statement,SIL.FieldWorks.Common.Controls,BulkEditTabPageSettings,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,SaveSettings,The length of the statement  "				bulkEditBar.m_propertyTable.SetProperty(lastTabSettingsKey' currentTabSettingsKey' PropertyTable.SettingsGroup.LocalSettings' false); " is 133.
Long Statement,SIL.FieldWorks.Common.Controls,BulkEditTabPageSettings,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DeserializeLastTabPageSettings,The length of the statement  "				string tabSettingsKey = bulkEditBar.m_propertyTable.GetStringProperty(lastTabSettingsKey' ""' PropertyTable.SettingsGroup.LocalSettings); " is 137.
Long Statement,SIL.FieldWorks.Common.Controls,BulkEditTabPageSettings,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DeserializeTabPageSettings,The length of the statement  "					settingsXml = bulkEditBar.m_propertyTable.GetStringProperty(tabSettingsKey' ""' PropertyTable.SettingsGroup.LocalSettings); " is 123.
Long Statement,SIL.FieldWorks.Common.Controls,BulkEditItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,Dispose,The length of the statement  "			Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,FlatListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FillComboBox,The length of the statement  "				m_combo.Items.Add(new HvoTssComboItem(0' TsStringUtils.MakeString(XMLViewsStrings.ksNotSure' m_cache.WritingSystemFactory.UserWs))); " is 132.
Long Statement,SIL.FieldWorks.Common.Controls,MorphTypeChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The length of the statement  "			UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkEdit' XMLViewsStrings.ksRedoBulkEdit' m_cache.ActionHandlerAccessor' " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,InitWsComboForReversalIndex,The length of the statement  "			foreach (CoreWritingSystemDefinition ws in WritingSystemServices.GetReversalIndexWritingSystems(m_cache' ri.Hvo' false)) " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,InitCurrentList,The length of the statement  "				var leadingUnsortedColumns = XmlUtils.GetOptionalIntegerValue(m_possibleColumns[0].ParentNode' "leadingUnsortedColumns"' 0); " is 124.
Long Statement,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,Dispose,The length of the statement  "			Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ColumnConfigureDialog)); " is 141.
Long Statement,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,InitializeComponent,The length of the statement  "			this.imageList2.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageList2.ImageStream"))); " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,InitializeComponent,The length of the statement  "			this.imageList1.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageList1.ImageStream"))); " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,InitializeComponent,The length of the statement  "			this.helpProvider.SetHelpNavigator(this' ((System.Windows.Forms.HelpNavigator)(resources.GetObject("$this.HelpNavigator")))); " is 125.
Long Statement,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,GetDuplicateColumns,The length of the statement  "				// This tries to interpret the ws paramter into an int.  Sometimes the parameter cannot be interpreted without an object' " is 121.
Long Statement,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,WriteTsString,The length of the statement  "			string xml = TsStringSerializer.SerializeTsStringToXml(tss' m_cache.WritingSystemFactory' writeObjData: false' indent: true); " is 125.
Long Statement,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,WriteEntryLetterHeadIfNeeded,The length of the statement  "			string sEntry = StringServices.ShortName1Static(m_cache.ServiceLocator.GetInstance<ILexEntryRepository>().GetObject(hvoItem)); " is 126.
Long Statement,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,GetLeadChar,The length of the statement  "			ISet<string> sortChars = GetDigraphs(sWs' wsDigraphMap' wsCharEquivalentMap' wsIgnorableCharMap' cache' out mapChars' out chIgnoreList); " is 136.
Long Statement,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,WriteDelayedItemNumber,The length of the statement  "			WriteStringBody("ItemNumber"' " class=\"" + m_xhtml.GetValidCssClassName(m_delayedItemNumberClass) + "\""' m_delayedItemNumberValue); " is 133.
Long Statement,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,HandleColumnReordered,The length of the statement  "			// columnDisplayOrder[i] is the position that element i in the old (previous' not original) order will have in the new order. " is 125.
Long Statement,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,Dispose,The length of the statement  "			Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The length of the statement  "					e.Graphics.FillRectangle(brush' new Rectangle(e.Bounds.Left' e.Bounds.Top + topHeight' e.Bounds.Width' e.Bounds.Height - topHeight)); " is 133.
Long Statement,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The length of the statement  "			else if (e.Bounds.Contains(PointToClient(Cursor.Position))) // seems to be no state that indicates mouse is in it...Hot should but doesn't. " is 139.
Long Statement,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The length of the statement  "					e.Graphics.FillRectangle(brush' new Rectangle(e.Bounds.Left' e.Bounds.Top + topHeight' e.Bounds.Width' e.Bounds.Height - topHeight)); " is 133.
Long Statement,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The length of the statement  "				//    drawRect = new Rectangle(drawRect.X' drawRect.Top + drawRect.Height - (int)realSize.Height - 2' drawRect.Width' (int)realSize.Height + 2); " is 144.
Long Statement,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The length of the statement  "				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2); " is 127.
Long Statement,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The length of the statement  "					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)' " is 134.
Long Statement,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The length of the statement  "					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)}; " is 160.
Long Statement,SIL.FieldWorks.Common.Controls,FilterSortItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,Dispose,The length of the statement  "			Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,Dispose,The length of the statement  "			Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,MakeCombo,The length of the statement  "				ws = m_cache.ServiceLocator.WritingSystems.DefaultVernacularWritingSystem.Handle; // some sort of fall-back in case we can't determine a WS from the spec. " is 154.
Long Statement,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,MakeListChoiceFilterItem,The length of the statement  "					combo.Items.Add(new ListChoiceComboItem(MakeLabel(XMLViewsStrings.ksChoose_)' item' m_cache' mediator' propertyTable' combo' false' null)); " is 139.
Long Statement,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,MakeListChoiceFilterItem,The length of the statement  "						ListChoiceComboItem comboItem = new ListChoiceComboItem(MakeLabel(XMLViewsStrings.ksChoose_)' item' m_cache' mediator' propertyTable' combo' " is 140.
Long Statement,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,MakeListChoiceFilterItem,The length of the statement  "					// Make any arbitrary special filter combo item we may want. The Spec has a <dynamicloaderinfo> child that specifies what. " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,MakeListChoiceFilterItem,The length of the statement  "					combo.Items.Add(new ListChoiceComboItem(MakeLabel(XMLViewsStrings.ksChoose_)' item' m_cache' mediator' propertyTable' combo' true' null)); " is 138.
Long Statement,SIL.FieldWorks.Common.Controls,FilterComboItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,Dispose,The length of the statement  "			Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,ListChoiceComboItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,GetObjectLabelsForList,The length of the statement  "			return ObjectLabel.CreateObjectLabels(m_cache' list.PossibilitiesOS.Cast<ICmObject>()' GetDisplayPropertyName' m_bestWS' " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,FlatListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FlatListView.cs,Initialize,The length of the statement  "			m_bvList = new BrowseViewer(m_configNode' m_cache.LanguageProject.Hvo' ObjectListFlid' m_cache' m_mediator' m_propertyTable' " is 124.
Long Statement,SIL.FieldWorks.Common.Controls,FlatListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FlatListView.cs,Dispose,The length of the statement  "			System.Diagnostics.Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 141.
Long Statement,SIL.FieldWorks.Common.Controls,LayoutMerger,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutMerger.cs,BuildOldConfiguredPartsDicts,The length of the statement  "				// Due to an old bug some configurations have bad data with indistinguishable duplicate nodes. Just drop the extra ones. " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,LayoutMerger,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutMerger.cs,CopySafeAttrs,The length of the statement  "						xa.Value.Substring(0' xa.Value.IndexOf("_AsPara"' StringComparison.Ordinal) + "_AsPara".Length)); // truncate after _AsPara " is 123.
Long Statement,SIL.FieldWorks.Common.Controls,LayoutMerger,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutMerger.cs,NeedsAsParaParamSet,The length of the statement  "				&& copy.Attributes != null && copy.Attributes[ParamAttr] != null && !copy.Attributes[ParamAttr].Value.Contains("_AsPara"); " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,MatchingObjectsBrowser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\MatchingObjectsBrowser.cs,Dispose,The length of the statement  "			System.Diagnostics.Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 141.
Long Statement,SIL.FieldWorks.Common.Controls,ObjectListPublisher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ObjectListPublisher.cs,Replace,The length of the statement  "			Array.Copy(oldHvos' ivMin + cvDel' newHvos' ivMin + insertions.Length' oldHvos.Length - ivMin - cvDel); // copy remaining undeleted ones. " is 137.
Long Statement,SIL.FieldWorks.Common.Controls,SearchEngine,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SearchEngine.cs,PerformSearch,The length of the statement  "					Tuple<int' int> key = IsFieldMultiString(field) ? Tuple.Create(field.Flid' field.String.get_WritingSystemAt(0)) : Tuple.Create(field.Flid' 0); " is 142.
Long Statement,SIL.FieldWorks.Common.Controls,SimpleDateMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleDateMatchDlg.cs,Dispose,The length of the statement  "			System.Diagnostics.Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 141.
Long Statement,SIL.FieldWorks.Common.Controls,SimpleDateMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleDateMatchDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SimpleDateMatchDlg)); " is 138.
Long Statement,SIL.FieldWorks.Common.Controls,PartOwnershipTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutCache.cs,GetDescendents,The length of the statement  "				string.Format("You are experiencing a rare and difficult-to-reproduce error (LT- 11443 and linked issues). If you can add any information to the issue or fix it please do. If JohnT is available please call him over. Expected to find part ({0}) in ParentClassPathsToChildren"' xpathToPart)); " is 290.
Long Statement,SIL.FieldWorks.Common.Controls,PartOwnershipTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutCache.cs,GetDescendents,The length of the statement  "				return new HashSet<int>(); // This just means we don't find a related object. Better than crashing' but not what we intend. " is 123.
Long Statement,SIL.FieldWorks.Common.Controls,PartOwnershipTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutCache.cs,FindTreeRelationship,The length of the statement  "			if (DomainObjectServices.IsSameOrSubclassOf(Cache.DomainDataByFlid.MetaDataCache' prevListItemsClass' newListItemsClass)) " is 121.
Long Statement,SIL.FieldWorks.Common.Controls,PartOwnershipTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutCache.cs,GetHvoCommonAncestor,The length of the statement  "			int classOfHvoBeforeListChange = Cache.ServiceLocator.GetInstance<ICmObjectRepository>().GetObject(hvoBeforeListChange).ClassID; " is 128.
Long Statement,SIL.FieldWorks.Common.Controls,PartOwnershipTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutCache.cs,GetHvoCommonAncestor,The length of the statement  "					if (DomainObjectServices.IsSameOrSubclassOf(Cache.DomainDataByFlid.MetaDataCache' classOfHvoBeforeListChange' classCommonAncestor)) " is 131.
Long Statement,SIL.FieldWorks.Common.Controls,NonEmptyTargetControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\NonEmptyTargetControl.cs,Dispose,The length of the statement  "			System.Diagnostics.Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 141.
Long Statement,SIL.FieldWorks.Common.Controls,NonEmptyTargetControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\NonEmptyTargetControl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(NonEmptyTargetControl)); " is 141.
Long Statement,SIL.FieldWorks.Common.Controls,PartGenerator,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\PartGenerator.cs,SetupWsParams,The length of the statement  "				// We've got the ws of the field' but there's a good chance it's for a multistring and is "plural"  However' the column can " is 123.
Long Statement,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,Init,The length of the statement  "			Text = (fieldName == XMLViewsStrings.ksPublishIn) || (fieldName == XMLViewsStrings.ksShowAsHeadwordIn) ? fieldName : String.Format(XMLViewsStrings.ksChooseX' fieldName); " is 169.
Long Statement,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,Dispose,The length of the statement  "			Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ReallySimpleListChooser)); " is 143.
Long Statement,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitializeComponent,The length of the statement  "			this.m_imageList.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("m_imageList.ImageStream"))); " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,SimpleIntegerMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleIntegerMatchDlg.cs,Dispose,The length of the statement  "			System.Diagnostics.Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 141.
Long Statement,SIL.FieldWorks.Common.Controls,SimpleIntegerMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleIntegerMatchDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SimpleIntegerMatchDlg)); " is 141.
Long Statement,SIL.FieldWorks.Common.Controls,SimpleMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleMatchDlg.cs,Dispose,The length of the statement  "			System.Diagnostics.Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 141.
Long Statement,SIL.FieldWorks.Common.Controls,SimpleMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleMatchDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SimpleMatchDlg)); " is 134.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseView.cs,HandleSelectionChange,The length of the statement  "					//	Debug.Write(String.Format("XmlBrowseView.SelectionChanged(): rgvsli[{0}].hvo={1}' ivho={2}' tag={3}' cpropPrevious={4}' ich={5}' ws={6}"' " is 140.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,FireSelectionChanged,The length of the statement  "				return true; // presumably we've been disposed; this happens (at least) in tests where a later test may simulate idle events. " is 125.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,Init,The length of the statement  "			Debug.Assert(m_nodeSpec == null || m_nodeSpec == nodeSpec' "XmlBrowseViewBase.Init: Mismatched configuration parameters."); " is 123.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,OnSaveScrollPosition,The length of the statement  "					sel.Location(m_graphicsManager.VwGraphics' rcSrcRoot' rcDstRoot' out rcPrimary' out rcSec' out fSplit' out fEndBeforeAnchor); " is 125.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,RestoreScrollPosition,The length of the statement  "					sel.Location(m_graphicsManager.VwGraphics' rcSrcRoot' rcDstRoot' out rcPrimary' out rcSec' out fSplit' out fEndBeforeAnchor); " is 125.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,LocationOfSelectedRow,The length of the statement  "				return new Rectangle(rcPrimary.left' rcPrimary.top' rcPrimary.right - rcPrimary.left' rcPrimary.bottom - rcPrimary.top); " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,SetDefaultInsertionPointInRow,The length of the statement  "					Debug.WriteLine("XmlBrowseViewBase::SetDefaultInsertionPointInRow: Caught exception while trying to scroll a non-editable object into view."); " is 142.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,Init,The length of the statement  "			Debug.Assert(m_nodeSpec == configurationParameters' "XmlBrowseViewBase.Init (XCore version): Mis-matched configuration parameters."); " is 133.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,UpdateSelectedRow,The length of the statement  "				return true; // presumably we've been disposed; this happens (at least) in tests where a later test may simulate idle events. " is 125.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The length of the statement  "							target = "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\" /></properties><string field=\"MLHeadWord\" ws=\"vernacular\" /></span></column>"; " is 247.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The length of the statement  "								savedCols = savedCols.Replace(target' "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\" layout=\"EntryHeadwordForFindEntry\" />"); " is 192.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The length of the statement  "							target = "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><obj field=\"LexemeForm\" layout=\"empty\"><string field=\"Form\" ws=\"$ws=vernacular\"/></obj></span></column>"; " is 316.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The length of the statement  "								savedCols = savedCols.Replace(target' "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"LexemeFormForFindEntry\"/>"); " is 212.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The length of the statement  "							target = "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><string field=\"CitationForm\" ws=\"$ws=vernacular\"/></span></column>"; " is 268.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The length of the statement  "								savedCols = savedCols.Replace(target' "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"CitationFormForFindEntry\"/>"); " is 207.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The length of the statement  "							target = "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\"/></properties><seq field=\"AlternateForms\" layout=\"empty\" sep=\"' \"><string field=\"Form\" ws=\"$ws=vernacular\"/></seq></span></column>"; " is 260.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The length of the statement  "								savedCols = savedCols.Replace(target' "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\" ws=\"$ws=vernacular\" layout=\"AllomorphsForFindEntry\"/>"); " is 163.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The length of the statement  "							target = "<column label=\"Glosses\" multipara=\"true\" editable=\"false\" width=\"96000\"><seq field=\"Senses\" layout=\"empty\"><para><properties><editable value=\"false\"/></properties><string field=\"Gloss\" ws=\"$ws=analysis\"/></para></seq></column>"; " is 256.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The length of the statement  "								savedCols = savedCols.Replace(target' "<column label=\"Glosses\" editable=\"false\" width=\"96000\" ws=\"$ws=analysis\" layout=\"GlossesForFindEntry\"/>"); " is 155.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,FixVersion18Columns,The length of the statement  "			savedCols = ChangeAttrValue(savedCols' "ExtNoteType"' "ghostListField"' "LexDb.AllPossibleExtendedNotes"' "LexDb.AllExtendedNoteTargets"); " is 138.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,FixVersion18Columns,The length of the statement  "			savedCols = ChangeAttrValue(savedCols' "ExtNoteDiscussion"' "ghostListField"' "LexDb.AllPossibleExtendedNotes"' "LexDb.AllExtendedNoteTargets"); " is 144.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,FixVersion17Columns,The length of the statement  "			savedCols = ChangeAttrValue(savedCols' "EtymologyGloss"' "transduce"' "LexEntry.Etymology.Gloss"' "LexEtymology.Gloss"); " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,FixVersion17Columns,The length of the statement  "			savedCols = ChangeAttrValue(savedCols' "EtymologySource"' "transduce"' "LexEntry.Etymology.Source"' "LexEtymology.Source"); " is 123.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,FixVersion17Columns,The length of the statement  "			savedCols = ChangeAttrValue(savedCols' "EtymologyComment"' "transduce"' "LexEntry.Etymology.Comment"' "LexEtymology.Comment"); " is 126.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,FixVersion15Columns,The length of the statement  "				"bulkEdit=\"complexListMultiple\" field=\"LexEntry.ShowMainEntryIn\" list=\"LexDb.PublicationTypes\" displayNameProperty=\"ShortNameTSS\" " + " is 141.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,FixVersion15Columns,The length of the statement  "			savedCols = AppendAttrValue(savedCols' "ComplexEntryTypesBrowse"' "ghostListField"' "LexDb.AllComplexEntryRefPropertyTargets"); " is 127.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,FixVersion15Columns,The length of the statement  "			savedCols = AppendAttrValue(savedCols' "VariantEntryTypesBrowse"' "ghostListField"' "LexDb.AllVariantEntryRefPropertyTargets"); " is 127.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,FixCustomFields,The length of the statement  "			savedCols = AppendAttrValue(savedCols' "CustomPossVectorFor" + layoutNameFragment' true' "bulkEdit"' "complexListMultiple"); " is 124.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,FixCustomFields,The length of the statement  "			savedCols = AppendAttrValue(savedCols' "CustomPossVectorFor" + layoutNameFragment' true' "field"' className + ".$fieldName"); " is 125.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,FixCustomFields,The length of the statement  "			savedCols = AppendAttrValue(savedCols' "CustomPossVectorFor" + layoutNameFragment' true' "displayNameProperty"' "ShortNameTSS"); " is 128.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,FixCustomFields,The length of the statement  "			savedCols = AppendAttrValue(savedCols' "CustomPossAtomFor" + layoutNameFragment' true' "bulkEdit"' "atomicFlatListItem"); " is 121.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,FixCustomFields,The length of the statement  "			savedCols = AppendAttrValue(savedCols' "CustomPossAtomFor" + layoutNameFragment' true' "field"' className + ".$fieldName"); " is 123.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,ChangeAttrValue,The length of the statement  "			var pattern = new Regex("<column [^>]*layout *= *\"" + layoutName + "\"[^>]*" + attrName + " *= *\"(" + attrValue + ")\""); " is 123.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AppendAttrValue,The length of the statement  "			// If it is a custom field' any layout name that starts with the expected string...typically generated from something like " is 122.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetActiveColumn,The length of the statement  "			if (vwenv.DataAccess.get_IsPropInCache(hvoRoot' XMLViewsDataCache.ktagActiveColumn' (int)CellarPropertyType.Integer' 0)) " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableCell,The length of the statement  "				vwenv.NoteDependency(new int[] { hvoRoot' hvo' hvo }' new int[] { XMLViewsDataCache.ktagActiveColumn' XMLViewsDataCache.ktagItemSelected' XMLViewsDataCache.ktagItemEnabled }' 3); " is 178.
Long Statement,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,ProcessFrag,The length of the statement  "				vwenv.NoteDependency(new int[] { hvo' hvo }' new int[] { XMLViewsDataCache.ktagItemSelected' XMLViewsDataCache.ktagItemEnabled }' 2); " is 133.
Long Statement,SIL.FieldWorks.Common.Controls,XmlRDEBrowseViewVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlRDEBrowseViewVc.cs,ProcessFrag,The length of the statement  "					// Special keyword for rapid data entry: may have different content in edit row (or if a particular column is displayed) " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,XmlSeqSelectionRestorer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlSeqView.cs,Dispose,The length of the statement  "				var componentsEntryRef = subentry.EntryRefsOS.Where(se => se.RefType == LexEntryRefTags.krtComplexForm).FirstOrDefault(); " is 121.
Long Statement,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,AddCommandIcon,The length of the statement  "					throw new ConfigurationException("visibility of commandIcon must be 'objectSelected' or 'focused' but was " + condition); " is 121.
Long Statement,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,AddMultipleAlternatives,The length of the statement  "			bool fLabel = XmlUtils.GetOptionalBooleanAttributeValue(caller' "showLabels"' false); // true to 'separate' using multistring labels. " is 133.
Long Statement,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,PartRefWrapupAfterProcessChildren,The length of the statement  "			InsertLiteralString(frag' vwenv' "after"' flowType' null); // don't need default style here' we're inside the main span for the property. " is 137.
Long Statement,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,DisplayFirstChildPos,The length of the statement  "						// This is the cleanup that invoking the part ref would normally do after displaying the effect of the part referred to. " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,NodeIdentifier,The length of the statement  "			Debug.Assert(m_stackPartRef.Count == 0 || partRef == m_stackPartRef[0]' "PartRef " + XmlUtils.GetOptionalAttributeValue(partRef'"ref"'"NoRefFound") + " is not the first in the stack"); " is 184.
Long Statement,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,BoolEqualsConditionPasses,The length of the statement  "			string boolValue = XmlUtils.GetOptionalAttributeValue(frag' "boolequals"' "notFound");	// must be either 'true' or 'false'. " is 123.
Long Statement,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetFlid,The length of the statement  "					+ "{1}Try starting the program while holding down the Shift key to clear all saved settings"' hvo' Environment.NewLine)' frag); " is 127.
Long Statement,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetSubFragIdSeq,The length of the statement  "			return GetId(new MainCallerDisplayCommandSeq(frag' caller' false' WsForce' m_stackPartRef)' m_idToDisplayCommand' m_displayCommandToId); " is 136.
Long Statement,SIL.FieldWorks.Common.Controls,MainCallerDisplayCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,PrintNodeTreeStep,The length of the statement  "			//                                                 node.Attributes["ref"] != null ? node.Attributes["ref"].Value : "" : ""' " is 123.
Long Statement,SIL.FieldWorks.Common.Controls,XmlVcDisplayVec,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVcDisplayVec.cs,Display,The length of the statement  "			//bool fGramInfoBeforeNumber = XmlUtils.GetOptionalBooleanAttributeValue(listDelimitNode' "graminfobeforenumber"' false); " is 121.
Long Statement,SIL.FieldWorks.Common.Controls,XmlVcDisplayVec,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVcDisplayVec.cs,Display,The length of the statement  "			var fShowAsParagraphsInDivInPara = XmlUtils.GetOptionalAttributeValue(listDelimitNode' "flowType"' null) == "divInPara"; " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,WrapParagraphDisplayCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVcDisplayVec.cs,PerformDisplay,The length of the statement  "				m_creator.AddItemEmbellishments(m_listDelimitNode' m_numberItems' hvo' ihvo' m_xaNum' m_ttpNum' m_delayNumber' ref DelayedNumber); " is 130.
Long Statement,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,AddMultipleAlternatives,The length of the statement  "			bool fLabel = XmlUtils.GetOptionalBooleanAttributeValue(frag' "showLabels"' false); // true to 'separate' using multistring labels. " is 131.
Long Statement,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,StringsFor,The length of the statement  "					string targetLayoutName = XmlVc.GetLayoutName(layout' caller); // also allows for finding "param" attr in caller' if not null " is 125.
Long Statement,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,GetWsFromString,The length of the statement  "					return WritingSystemServices.InterpretWsLabel(cache' wsParam' wsContainer.DefaultAnalysisWritingSystem' 0' 0' null' out wsmagic); " is 129.
Complex Conditional,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,RemoveInvalidOldSelectedItems,The conditional expression  "fExpectToBeSelected && !fActuallySelected ||  					!fExpectToBeSelected && fActuallySelected"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,Dispose,The conditional expression  "m_nodeSpec != null && m_specialCache != null && m_xbv != null && RootObjectHvo != 0"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,LayoutScrollControls,The conditional expression  "m_xbv == null || m_lvHeader == null || m_lvHeader.Columns.Count == 0 || m_scrollContainer.Width < DhListView.kgapForScrollBar"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,UpdateCheckedItems,The conditional expression  "m_xbv != null && m_xbv.Vc != null && m_xbv.Vc.HasSelectColumn && BulkEditBar != null"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,CanFindReplace,The conditional expression  "(tssPattern == null || tssPattern.Length == 0) &&  				(m_tssReplace == null || m_tssReplace.Length == 0)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,EnablePreviewApplyForListChoice,The conditional expression  "m_beItems == null ||  				m_itemIndex < 0 || m_itemIndex >= m_beItems.Length ||  				m_listChoiceControl == null"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,CommitChanges,The conditional expression  "commitChanges != null && commitChanges != "" &&  				cache.ActionHandlerAccessor != null && !cache.ActionHandlerAccessor.IsUndoOrRedoInProgress"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,BulkCopyMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,OkToChange,The conditional expression  "(sOld == null || sOld.Length == 0) &&  				(sNew == null || sNew.Length == 0)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,addButton_Click,The conditional expression  "(ColumnHasWsParam(columnBeingAdded) && ColumnHasAsDuplicate(columnBeingAdded))  				&& (wsCombo.SelectedIndex < wsCombo.Items.Count) && wsCombo.Items.Count > 0"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,BeginCssClassIfNeeded,The conditional expression  "cssClass == null && frag.ParentNode != null && frag.ParentNode.Name == "layout" &&  					(XmlUtils.GetOptionalAttributeValue(frag' "before") != null ||  					 XmlUtils.GetOptionalAttributeValue(frag' "after") != null ||  					 XmlUtils.GetOptionalAttributeValue(frag' "sep") != null ||  					 XmlUtils.GetOptionalAttributeValue(frag' "number") != null ||  					 XmlUtils.GetOptionalAttributeValue(frag' "style") != null)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,SortMethodFinder,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutFinder.cs,GetKey,The conditional expression  "pathIndex != -1  								&& (pathIndex < item.PathLength - 1 && objHvo == item.PathObject(pathIndex + 1))  								 || (pathIndex == item.PathLength - 1 && objHvo == item.KeyObject)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,SortMethodFinder,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutFinder.cs,GetKey,The conditional expression  "pathIndex != -1  								&& (pathIndex < item.PathLength - 1 && objHvo == item.PathObject(pathIndex + 1))  								|| (pathIndex == item.PathLength - 1 && objHvo == item.KeyObject)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,OnOKClick,The conditional expression  "m_labelsTreeView != null &&  				m_labelsTreeView.SelectedNode != null &&  				m_labelsTreeView.SelectedNode.Tag != null &&  				m_labelsTreeView.SelectedNode.Tag is ChooserCommand"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,XmlBrowseRDEView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseRDEView.cs,OnDeleteRecord,The conditional expression  "ls.SemanticDomainsRC.Count == 0 &&  					ls.AnthroCodesRC.Count == 0 &&  					ls.AppendixesRC.Count == 0 &&  					ls.DomainTypesRC.Count == 0 &&  					ls.ThesaurusItemsRC.Count == 0 &&  					ls.UsageTypesRC.Count == 0"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,XmlBrowseView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseView.cs,OnHandleCreated,The conditional expression  "oldIndex >= 0 && oldIndex != m_selectedIndex &&  				m_hvoRoot > 0 && oldHvoRoot == m_hvoRoot"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,SelectContentsOfCell,The conditional expression  "iLevel2 == iLevel && iBox2 == iBox && iTableBox2 == iTableBox  				&& iCellBox2 == iCellBox"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,XmlSeqSelectionRestorer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlSeqView.cs,Dispose,The conditional expression  "!fDisposing || IsDisposed || m_savedSelection == null || m_rootSite.RootBox.Height <= 0"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,DetermineNeededFlid,The conditional expression  "stFieldName == "OwnOrd" ||  						stFieldName == "Guid" ||  						stFieldName == "Owner" ||  						stFieldName == "Self""  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,AddObject,The conditional expression  "!fOk && entryref.ComplexEntryTypesRS.Any(  											type => validTypes.Contains(type.Guid)) ||  											(entryref.ComplexEntryTypesRS.Count == 0 && validTypes.Contains(m_unspecComplexFormType))"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,AddObject,The conditional expression  "!fOk && entryref.VariantEntryTypesRS.Any(  											type => validTypes.Contains(type.Guid)) ||  											(entryref.VariantEntryTypesRS.Count == 0 && validTypes.Contains(m_unspecVariantType))"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,AddObjectVector,The conditional expression  "fNumber || fSep || exclude != null || fFirstOnly || sort != null ||  				m_mapGuidToReferenceInfo != null || m_mapGuidToComplexRefInfo != null ||  				m_mapGuidToVariantRefInfo != null || isDivInPara"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,LengthConditionsPass,The conditional expression  "fldType == (int)CellarPropertyType.OwningSequence  					|| fldType == (int)CellarPropertyType.ReferenceCollection  					|| fldType == (int)CellarPropertyType.OwningCollection  					|| fldType == (int)CellarPropertyType.ReferenceSequence"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,AddSeparator,The conditional expression  "item == null || ichInsert < 0 || ichInsert > item.Length || fCheckForEmptyItems && item.Length == 0"  is complex.
Virtual Method Call from Constructor,SIL.FieldWorks.Common.Controls,OneColumnXmlBrowseView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,OneColumnXmlBrowseView,The constructor "OneColumnXmlBrowseView" calls a virtual method "Init".
Virtual Method Call from Constructor,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,XmlBrowseViewBaseVc,The constructor "XmlBrowseViewBaseVc" calls a virtual method "SetupSelectColumn".
Empty Catch Block,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,GetNamedList,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceSetupButton_Click,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceSetupButton_Click,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,BulkEditTabPageSettings,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,InitializeSelectedTab,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,GetDuplicateColumns,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,AddMissingObjectLink,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitializeExtras,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,XmlBrowseView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseView.cs,OnMouseUp,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,GetRowIndexFromSelection,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,GetRowSelection,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,DoHotLinkAction,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetParagraphStyleIfPara,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,DetermineNeededFieldsFor,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,DetermineNeededFlid,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,IntMemberOfConditionPasses,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,TryCustomField,The method has an empty catch block.
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,BrowseViewMouseUp,The following statement contains a magic number: int selColWidth = m_xbv.Vc.SelectColumnWidth * dpiX / 72000;
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,ContructorSurrogate,The following statement contains a magic number: m_lvHeader.Size = new Size(4000' 22);
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,ContructorSurrogate,The following statement contains a magic number: m_lvHeader.Size = new Size(4000' 22);
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,ContructorSurrogate,The following statement contains a magic number: Size = new Size(400' 304);
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,ContructorSurrogate,The following statement contains a magic number: Size = new Size(400' 304);
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,ContructorSurrogate,The following statement contains a magic number: if (m_xbv.Vc.HasSelectColumn)  			{  				// Do our own setup for checkmark header' since it doesn't display reliably when implemented in DhListView (LT-4473).  				// In DhListView' an implementation of  checkmark header was not reliably receiving system Paint messages after  				// an Invalidate()' Refresh()' or Update(). Until we find a solution to that problem' the parent of DhListView (e.g. BrowseViewer)  				// will have to be responsible for setting up this button.    				m_checkMarkButton = new Button();  				m_checkMarkButton.Click += m_checkMarkButton_Click;  				m_checkMarkButton.Image = ResourceHelper.CheckMarkHeader;  				m_checkMarkButton.Width = m_checkMarkButton.Image.Width + 5;  				m_checkMarkButton.Height = m_lvHeader.Height - 6;  				m_checkMarkButton.FlatStyle = FlatStyle.Flat;  				m_checkMarkButton.BackColor = Color.Transparent;  				m_checkMarkButton.ForeColor = Color.Transparent;  				m_checkMarkButton.Top = 2;  				m_checkMarkButton.Left = 1;  				ToolTip ttip = new ToolTip();  				ttip.SetToolTip(m_checkMarkButton' XMLViewsStrings.ksTipCheck);  				m_scrollContainer.Controls.Add(m_checkMarkButton);  				m_checkMarkButton.BringToFront();  			}
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,ContructorSurrogate,The following statement contains a magic number: if (m_xbv.Vc.HasSelectColumn)  			{  				// Do our own setup for checkmark header' since it doesn't display reliably when implemented in DhListView (LT-4473).  				// In DhListView' an implementation of  checkmark header was not reliably receiving system Paint messages after  				// an Invalidate()' Refresh()' or Update(). Until we find a solution to that problem' the parent of DhListView (e.g. BrowseViewer)  				// will have to be responsible for setting up this button.    				m_checkMarkButton = new Button();  				m_checkMarkButton.Click += m_checkMarkButton_Click;  				m_checkMarkButton.Image = ResourceHelper.CheckMarkHeader;  				m_checkMarkButton.Width = m_checkMarkButton.Image.Width + 5;  				m_checkMarkButton.Height = m_lvHeader.Height - 6;  				m_checkMarkButton.FlatStyle = FlatStyle.Flat;  				m_checkMarkButton.BackColor = Color.Transparent;  				m_checkMarkButton.ForeColor = Color.Transparent;  				m_checkMarkButton.Top = 2;  				m_checkMarkButton.Left = 1;  				ToolTip ttip = new ToolTip();  				ttip.SetToolTip(m_checkMarkButton' XMLViewsStrings.ksTipCheck);  				m_scrollContainer.Controls.Add(m_checkMarkButton);  				m_checkMarkButton.BringToFront();  			}
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,ContructorSurrogate,The following statement contains a magic number: if (m_xbv.Vc.HasSelectColumn)  			{  				// Do our own setup for checkmark header' since it doesn't display reliably when implemented in DhListView (LT-4473).  				// In DhListView' an implementation of  checkmark header was not reliably receiving system Paint messages after  				// an Invalidate()' Refresh()' or Update(). Until we find a solution to that problem' the parent of DhListView (e.g. BrowseViewer)  				// will have to be responsible for setting up this button.    				m_checkMarkButton = new Button();  				m_checkMarkButton.Click += m_checkMarkButton_Click;  				m_checkMarkButton.Image = ResourceHelper.CheckMarkHeader;  				m_checkMarkButton.Width = m_checkMarkButton.Image.Width + 5;  				m_checkMarkButton.Height = m_lvHeader.Height - 6;  				m_checkMarkButton.FlatStyle = FlatStyle.Flat;  				m_checkMarkButton.BackColor = Color.Transparent;  				m_checkMarkButton.ForeColor = Color.Transparent;  				m_checkMarkButton.Top = 2;  				m_checkMarkButton.Left = 1;  				ToolTip ttip = new ToolTip();  				ttip.SetToolTip(m_checkMarkButton' XMLViewsStrings.ksTipCheck);  				m_scrollContainer.Controls.Add(m_checkMarkButton);  				m_checkMarkButton.BringToFront();  			}
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,ContructorSurrogate,The following statement contains a magic number: m_configureButton.Width = DhListView.kgapForScrollBar - 5;
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,LayoutScrollControls,The following statement contains a magic number: if (m_scrollContainer.Width < widthTotal)  				bottom -= 22;
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,SetSavedOrDefaultColWidths,The following statement contains a magic number: try  			{  				m_lvHeader.AdjustingWidth = true;  				// The width available for columns is less than the total width of the browse view by an amount that appears  				// a little wider than the scroll bar. 23 seems to be the smallest value that suppresses scrolling within  				// the header control...hopefully we can get some sound basis for it eventually.  				int widthAvail = idealWidth;  				List<XmlNode> columns = ColumnSpecs;  				int count = columns.Count;  				int dpiX = GetDpiX();  				if (ColumnIndexOffset() > 0)  				{  					int selColWidth = m_xbv.Vc.SelectColumnWidth * dpiX / 72000;  					m_lvHeader.ColumnsInDisplayOrder[0].Width = selColWidth;  					widthAvail -= selColWidth;  					widthExtra += selColWidth;  				}  				for (int i = 0; i < count; i++)  				{  					// If the user previously altered the column width' it will be available  					// in the Property table' as an absolute value. If not' use node.Attributes  					// to get a percentage value.  					int width = GetPersistedWidthForColumn(columns' i);  					if (width < 0)  					{  						width = GetInitialColumnWidth(columns[i]' widthAvail' dpiX);  					}  					widthTotal += width;  					if (widthTotal + widthExtra + 1 > m_lvHeader.Width)  						m_lvHeader.Width = widthTotal + widthExtra + 1; // otherwise it may truncate the width we set.  					ColumnHeader ch = m_lvHeader.ColumnsInDisplayOrder[ColumnHeaderIndex(i)];  					ch.Width = width;  					// If the header isn't wide enough for the column to be the width we're setting' fix it.  					while (ch.Width != width)  					{  						m_lvHeader.Width += width - ch.Width;  						ch.Width = width;  					}  				}  			}  			finally  			{  				m_lvHeader.AdjustingWidth = false;  			}
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,GetInitialColumnWidth,The following statement contains a magic number: if (strWidth.Length > 1 && strWidth[strWidth.Length - 1] == '%')  			{  				int widthPercent = Convert.ToInt32(strWidth.Substring(0' strWidth.Length - 1)); // strip percent sign (assumed).  				width = widthPercent * widthAvail / 100;  			}  			else  			{  				// Convert to pixels from millipoints.  				width = Convert.ToInt32(strWidth) * dpiX / 72000;  			}
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,GetInitialColumnWidth,The following statement contains a magic number: if (strWidth.Length > 1 && strWidth[strWidth.Length - 1] == '%')  			{  				int widthPercent = Convert.ToInt32(strWidth.Substring(0' strWidth.Length - 1)); // strip percent sign (assumed).  				width = widthPercent * widthAvail / 100;  			}  			else  			{  				// Convert to pixels from millipoints.  				width = Convert.ToInt32(strWidth) * dpiX / 72000;  			}
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,AdjustColumnWidthToMatchContents,The following statement contains a magic number: if (maxStringWidth > 0)  			{  				// update the column according to the maxStringWidth.  				// add in a little margin to prevent wrapping in some cases.  				m_lvHeader.ColumnsInDisplayOrder[icolLvHeaderToAdjust].Width = maxStringWidth + 10;    				// force browse view to match header columns.  				AdjustColumnWidths(true);  			}
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,GetColWidthInfo,The following statement contains a magic number: for (int i = 0; i < count; i++)  			{  				rglength[i].unit = VwUnit.kunPoint1000;  				int width = columns[i].Width;  				rglength[i].nVal = width * 72000 / dpiX;  				widths[i] = width;  			}
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,MaximizeColumnWidths,The following statement contains a magic number: if (wSum + 40 < wTotal)  			{  				var columns = m_lvHeader.ColumnsInDisplayOrder;  				for (int i = 0; i < count; ++i)  					columns[i].Width = (rgw[i] * wTotal) / wSum;  				AdjustColumnWidths(false);  			}
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,SnapSplitPosition,The following statement contains a magic number: if (m_lvHeader.Columns.Count == 1 && snapPos >= width - 2)  				return false;
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,SnapSplitPosition,The following statement contains a magic number: if (width < snapPos + 10 && width > snapPos / 2)  			{  				width = snapPos;  				return true;  			}
Magic Number,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,SnapSplitPosition,The following statement contains a magic number: if (width < snapPos + 10 && width > snapPos / 2)  			{  				width = snapPos;  				return true;  			}
Magic Number,SIL.FieldWorks.Common.Controls,OneColumnXmlBrowseView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,GetAvailWidth,The following statement contains a magic number: return 1000000;
Magic Number,SIL.FieldWorks.Common.Controls,OneColumnXmlBrowseView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,GetColWidthInfo,The following statement contains a magic number: rglength[0].nVal = 10000;
Magic Number,SIL.FieldWorks.Common.Controls,ReconstructPreservingBVScrollPosition,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,Dispose,The following statement contains a magic number: if (disposing)  			{  				// Dispose managed resources here.  				// Do this in the context of Scenario 2'  				// since in #1 the m_bv may have been finalized already.  				// Restore scroll position here  				if (m_bv != null && m_bv.BrowseView != null && m_bv.BrowseView.RootBox != null)  					m_bv.BrowseView.RootBox.Reconstruct(); // Otherwise every cell redraws individually!    				m_bv.BrowseView.OnRestoreScrollPosition(null);    				if (m_fHiliteWasVisible && m_irow >= 0 && m_irow < m_bv.AllItems.Count)  				{  					// If there WAS a highlighted row visible and it is no longer visible' scroll to make it so.  					IVwSelection newSel = MakeTestRowSelection(m_irow);  					if (newSel != null && !m_bv.BrowseView.IsSelectionVisible(newSel)) // Need to scroll newSel into view  						m_bv.BrowseView.RestoreScrollPosition(Math.Max(0' m_irow - 2));  				}    				m_bv = null;  			}
Magic Number,SIL.FieldWorks.Common.Controls,BrowseActiveViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,BrowseViewMouseUp,The following statement contains a magic number: int selColWidth = m_xbv.Vc.SelectColumnWidth * dpiX / 72000;
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,BulkEditBar,The following statement contains a magic number: m_bcNonEmptyTargetControl.Location = new Point(170' 50);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,BulkEditBar,The following statement contains a magic number: m_bcNonEmptyTargetControl.Location = new Point(170' 50);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,BulkEditBar,The following statement contains a magic number: m_trdNonEmptyTargetControl.Location = new Point(170' 50);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,BulkEditBar,The following statement contains a magic number: m_trdNonEmptyTargetControl.Location = new Point(170' 50);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,BulkEditBar,The following statement contains a magic number: m_findReplaceSummaryLabel.Location = new Point(275' 72);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,BulkEditBar,The following statement contains a magic number: m_findReplaceSummaryLabel.Location = new Point(275' 72);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,BulkEditBar,The following statement contains a magic number: m_findReplaceSummaryLabel.Size = new Size(215' 56);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,BulkEditBar,The following statement contains a magic number: m_findReplaceSummaryLabel.Size = new Size(215' 56);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,BulkEditBar,The following statement contains a magic number: m_findReplaceSummaryLabel.TabIndex = 17;
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,GetFlidFromClassDotName,The following statement contains a magic number: if (parts.Length != 2)  				throw new ConfigurationException("atomicFlatListItem field must be class.field");
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,GetPathInfoFromColumnSpec,The following statement contains a magic number: if (parts.Length > 1)  			{  				if (parts.Length != 2)  					throw new ConfigurationException("List id must not have more than two parts " + listpath);  				owningClass = parts[0];  				property = parts[1];  			}  			else  			{  				owningClass = defaultOwningClass;  				property = parts[0];  			}
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,RequiresDialogChooser,The following statement contains a magic number: if (list.PossibilitiesOS.Count > 25)  				return true;
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DeleteSelectedObjects,The following statement contains a magic number: try  			{  				state.PercentDone = 10;  				state.Breath();  				m_bv.SetListModificationInProgress(true);  				int total = idsToDelete.Count;  				int interval = Math.Min(100' Math.Max(idsToDelete.Count / 90' 1));  				int i = 0;  				UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkDelete' XMLViewsStrings.ksRedoBulkDelete'  											m_cache.ActionHandlerAccessor'  											() =>  												{  													foreach (int hvo in idsToDelete)  													{  														if ((i + 1) % interval == 0)  														{  															state.PercentDone = i * 90 / idsToDelete.Count + 10;  															state.Breath();  														}  														i++;  														ICmObject obj;  														if (m_cache.ServiceLocator.ObjectRepository.TryGetObject(hvo' out obj))  															m_bv.SpecialCache.DeleteObj(hvo);  													}  													if (m_expectedListItemsClassId == LexEntryTags.kClassId ||  														m_expectedListItemsClassId == LexSenseTags.kClassId)  													{  #if WANTPPORT  														CmObject.DeleteOrphanedObjects(m_cache' fUndo' state);  #endif  													}  												});  				m_bv.SetListModificationInProgress(false);  				ResumeRecordListRowChanges(); // need to show the updated list of rows!  				state.PercentDone = 100;  				state.Breath();  			}  			finally  			{  				// need to recompute what needs to be enabled after the deletion.  				m_items.Clear();  			}
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DeleteSelectedObjects,The following statement contains a magic number: try  			{  				state.PercentDone = 10;  				state.Breath();  				m_bv.SetListModificationInProgress(true);  				int total = idsToDelete.Count;  				int interval = Math.Min(100' Math.Max(idsToDelete.Count / 90' 1));  				int i = 0;  				UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkDelete' XMLViewsStrings.ksRedoBulkDelete'  											m_cache.ActionHandlerAccessor'  											() =>  												{  													foreach (int hvo in idsToDelete)  													{  														if ((i + 1) % interval == 0)  														{  															state.PercentDone = i * 90 / idsToDelete.Count + 10;  															state.Breath();  														}  														i++;  														ICmObject obj;  														if (m_cache.ServiceLocator.ObjectRepository.TryGetObject(hvo' out obj))  															m_bv.SpecialCache.DeleteObj(hvo);  													}  													if (m_expectedListItemsClassId == LexEntryTags.kClassId ||  														m_expectedListItemsClassId == LexSenseTags.kClassId)  													{  #if WANTPPORT  														CmObject.DeleteOrphanedObjects(m_cache' fUndo' state);  #endif  													}  												});  				m_bv.SetListModificationInProgress(false);  				ResumeRecordListRowChanges(); // need to show the updated list of rows!  				state.PercentDone = 100;  				state.Breath();  			}  			finally  			{  				// need to recompute what needs to be enabled after the deletion.  				m_items.Clear();  			}
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DeleteSelectedObjects,The following statement contains a magic number: try  			{  				state.PercentDone = 10;  				state.Breath();  				m_bv.SetListModificationInProgress(true);  				int total = idsToDelete.Count;  				int interval = Math.Min(100' Math.Max(idsToDelete.Count / 90' 1));  				int i = 0;  				UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkDelete' XMLViewsStrings.ksRedoBulkDelete'  											m_cache.ActionHandlerAccessor'  											() =>  												{  													foreach (int hvo in idsToDelete)  													{  														if ((i + 1) % interval == 0)  														{  															state.PercentDone = i * 90 / idsToDelete.Count + 10;  															state.Breath();  														}  														i++;  														ICmObject obj;  														if (m_cache.ServiceLocator.ObjectRepository.TryGetObject(hvo' out obj))  															m_bv.SpecialCache.DeleteObj(hvo);  													}  													if (m_expectedListItemsClassId == LexEntryTags.kClassId ||  														m_expectedListItemsClassId == LexSenseTags.kClassId)  													{  #if WANTPPORT  														CmObject.DeleteOrphanedObjects(m_cache' fUndo' state);  #endif  													}  												});  				m_bv.SetListModificationInProgress(false);  				ResumeRecordListRowChanges(); // need to show the updated list of rows!  				state.PercentDone = 100;  				state.Breath();  			}  			finally  			{  				// need to recompute what needs to be enabled after the deletion.  				m_items.Clear();  			}
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DeleteSelectedObjects,The following statement contains a magic number: try  			{  				state.PercentDone = 10;  				state.Breath();  				m_bv.SetListModificationInProgress(true);  				int total = idsToDelete.Count;  				int interval = Math.Min(100' Math.Max(idsToDelete.Count / 90' 1));  				int i = 0;  				UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkDelete' XMLViewsStrings.ksRedoBulkDelete'  											m_cache.ActionHandlerAccessor'  											() =>  												{  													foreach (int hvo in idsToDelete)  													{  														if ((i + 1) % interval == 0)  														{  															state.PercentDone = i * 90 / idsToDelete.Count + 10;  															state.Breath();  														}  														i++;  														ICmObject obj;  														if (m_cache.ServiceLocator.ObjectRepository.TryGetObject(hvo' out obj))  															m_bv.SpecialCache.DeleteObj(hvo);  													}  													if (m_expectedListItemsClassId == LexEntryTags.kClassId ||  														m_expectedListItemsClassId == LexSenseTags.kClassId)  													{  #if WANTPPORT  														CmObject.DeleteOrphanedObjects(m_cache' fUndo' state);  #endif  													}  												});  				m_bv.SetListModificationInProgress(false);  				ResumeRecordListRowChanges(); // need to show the updated list of rows!  				state.PercentDone = 100;  				state.Breath();  			}  			finally  			{  				// need to recompute what needs to be enabled after the deletion.  				m_items.Clear();  			}
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DeleteSelectedObjects,The following statement contains a magic number: try  			{  				state.PercentDone = 10;  				state.Breath();  				m_bv.SetListModificationInProgress(true);  				int total = idsToDelete.Count;  				int interval = Math.Min(100' Math.Max(idsToDelete.Count / 90' 1));  				int i = 0;  				UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkDelete' XMLViewsStrings.ksRedoBulkDelete'  											m_cache.ActionHandlerAccessor'  											() =>  												{  													foreach (int hvo in idsToDelete)  													{  														if ((i + 1) % interval == 0)  														{  															state.PercentDone = i * 90 / idsToDelete.Count + 10;  															state.Breath();  														}  														i++;  														ICmObject obj;  														if (m_cache.ServiceLocator.ObjectRepository.TryGetObject(hvo' out obj))  															m_bv.SpecialCache.DeleteObj(hvo);  													}  													if (m_expectedListItemsClassId == LexEntryTags.kClassId ||  														m_expectedListItemsClassId == LexSenseTags.kClassId)  													{  #if WANTPPORT  														CmObject.DeleteOrphanedObjects(m_cache' fUndo' state);  #endif  													}  												});  				m_bv.SetListModificationInProgress(false);  				ResumeRecordListRowChanges(); // need to show the updated list of rows!  				state.PercentDone = 100;  				state.Breath();  			}  			finally  			{  				// need to recompute what needs to be enabled after the deletion.  				m_items.Clear();  			}
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DeleteSelectedObjects,The following statement contains a magic number: try  			{  				state.PercentDone = 10;  				state.Breath();  				m_bv.SetListModificationInProgress(true);  				int total = idsToDelete.Count;  				int interval = Math.Min(100' Math.Max(idsToDelete.Count / 90' 1));  				int i = 0;  				UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkDelete' XMLViewsStrings.ksRedoBulkDelete'  											m_cache.ActionHandlerAccessor'  											() =>  												{  													foreach (int hvo in idsToDelete)  													{  														if ((i + 1) % interval == 0)  														{  															state.PercentDone = i * 90 / idsToDelete.Count + 10;  															state.Breath();  														}  														i++;  														ICmObject obj;  														if (m_cache.ServiceLocator.ObjectRepository.TryGetObject(hvo' out obj))  															m_bv.SpecialCache.DeleteObj(hvo);  													}  													if (m_expectedListItemsClassId == LexEntryTags.kClassId ||  														m_expectedListItemsClassId == LexSenseTags.kClassId)  													{  #if WANTPPORT  														CmObject.DeleteOrphanedObjects(m_cache' fUndo' state);  #endif  													}  												});  				m_bv.SetListModificationInProgress(false);  				ResumeRecordListRowChanges(); // need to show the updated list of rows!  				state.PercentDone = 100;  				state.Breath();  			}  			finally  			{  				// need to recompute what needs to be enabled after the deletion.  				m_items.Clear();  			}
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceSetupButton_Click,The following statement contains a magic number: int ws = -50;
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceSetupButton_Click,The following statement contains a magic number: try  			{  				// Find the writing system for the selected column (see LT-5491).  				FieldComboItem fci = m_findReplaceTargetCombo.SelectedItem as FieldComboItem;  				if (fci == null)  				{  					MessageBox.Show(XMLViewsStrings.ksChooseEditTarget);  					return;  				}  				XmlNode xnField = m_bv.ColumnSpecs[fci.ColumnIndex];  				string sWs = XmlViewsUtils.FindWsParam(xnField);  				if (String.IsNullOrEmpty(sWs))  				{  					// It's likely a custom field with a ws selector in the field metadata.  					string sTransduce = XmlUtils.GetOptionalAttributeValue(xnField' "transduce");  					if (!String.IsNullOrEmpty(sTransduce))  					{  						string[] parts = sTransduce.Split('.');  						if (parts.Length == 2)  						{  							string className = parts[0];  							string fieldName = parts[1];  							IFwMetaDataCache mdc = m_cache.DomainDataByFlid.MetaDataCache;  							try  							{  								int clid = mdc.GetClassId(className);  								int flid = mdc.GetFieldId2(clid' fieldName' true);  								ws = FieldReadWriter.GetWsFromMetaData(0' flid' m_cache);  								if (ws == 0)  									ws = m_cache.ServiceLocator.WritingSystems.DefaultVernacularWritingSystem.Handle;  							}  							catch  							{  							}  						}  					}  				}  				else if (!XmlViewsUtils.GetWsRequiresObject(sWs))  				{  					// Try to convert the ws parameter into an int.  Sometimes the parameter  					// cannot be interpreted without an object' such as when the ws is a magic  					// string that will change the actual ws depending on the contents of the  					// object.  In these cases' we give -50 as a known constant to check for.  					// This can possibly throw an exception' so we'll enclose it in a try block.  					ws = WritingSystemServices.InterpretWsLabel(m_cache' sWs' null' 0' 0' null);  				}  			}  			catch  			{  			}
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceSetupButton_Click,The following statement contains a magic number: if (ws == -50)  				ws = m_cache.ServiceLocator.WritingSystems.DefaultVernacularWritingSystem.Handle;
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,UpdateFindReplaceSummary,The following statement contains a magic number: if (m_pattern != null && m_pattern.Pattern != null && m_pattern.Pattern.Length > 0)  			{  				if (m_findReplaceSummaryLabel.StyleSheet == null)  					return;  				if (m_findReplaceSummaryLabel.WritingSystemFactory == null)  					return;  				m_findReplaceSummaryLabel.BackColor = SystemColors.Control;  				var wsArgs = TsStringUtils.GetWsAtOffset(m_tssReplace' 0);  				ITsIncStrBldr bldr = TsStringUtils.MakeIncStrBldr();  				bldr.SetIntPropValues((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint' 16000);  				bldr.SetIntPropValues((int)FwTextPropType.ktptBold' (int)FwTextPropVar.ktpvEnum' (int)FwTextToggleVal.kttvForceOn);    				// Simulate String.Format(XMLViewsStrings.ksReplaceXWithY' <pattern>' <replace>) to build a TsString that  				// properly displays everything.  				foreach (var piece in ExtractFormattingPieces(XMLViewsStrings.ksReplaceXWithY))  				{  					if (s_regexFormatItem.IsMatch(piece))  					{  						bldr.SetIntPropValues((int)FwTextPropType.ktptWs' (int)FwTextPropVar.ktpvDefault' wsArgs);  						if (piece == "{0}")  							bldr.Append(GetString(m_pattern.Pattern));  						else  							bldr.Append(m_tssReplace.Text);  					}  					else  					{  						bldr.SetIntPropValues((int)FwTextPropType.ktptWs' (int)FwTextPropVar.ktpvDefault' m_cache.DefaultUserWs);  						bldr.Append(piece);  					}  				}  				m_findReplaceSummaryLabel.Tss = bldr.GetString();  			}
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_findReplaceTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_listChoiceTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_listChoiceTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_listChoiceTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_listChoiceTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_listChoiceTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_listChoiceTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_listChoiceTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_listChoiceTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_listChoiceTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_listChoiceTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_listChoiceTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_listChoiceTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_bulkCopyTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_bulkCopyTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_bulkCopyTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_bulkCopyTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_bulkCopyTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_bulkCopyTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_bulkCopyTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_bulkCopyTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_bulkCopyTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_bulkCopyTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_bulkCopyTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_bulkCopyTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_clickCopyTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(590' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_clickCopyTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(590' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_clickCopyTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(590' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_clickCopyTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(590' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_clickCopyTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(590' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_clickCopyTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(590' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_clickCopyTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(590' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_clickCopyTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(590' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_clickCopyTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(590' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_clickCopyTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(590' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_clickCopyTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(590' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_clickCopyTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(590' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_transduceTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(590' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_transduceTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(590' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_transduceTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(590' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_transduceTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(590' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_transduceTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(590' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_transduceTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(590' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_transduceTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(590' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_transduceTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(590' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_transduceTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(590' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_transduceTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(590' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_transduceTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(590' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_transduceTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(590' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_deleteTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_deleteTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_deleteTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_deleteTab_Enter,The following statement contains a magic number: m_previewButton.SetBounds(500' 39' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_deleteTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_deleteTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_deleteTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_deleteTab_Enter,The following statement contains a magic number: m_ApplyButton.SetBounds(500' 72' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_deleteTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_deleteTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_deleteTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_deleteTab_Enter,The following statement contains a magic number: m_helpButton.SetBounds(500' 105' 75' 23);
Magic Number,SIL.FieldWorks.Common.Controls,DoItMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,DoItMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,DoItMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: foreach (int hvo in itemsToChange)  			{  				i++;  				if (i % interval == 0)  				{  					state.PercentDone = i * 100 / itemsToChange.Count();  					state.Breath();  				}  				bool fEnable = OkToChange(hvo);  				if (fEnable)  					m_sda.SetString(hvo' tagFakeFlid' NewValue(hvo));  				m_sda.SetInt(hvo' tagEnable' (fEnable ? 1 : 0));  			}
Magic Number,SIL.FieldWorks.Common.Controls,DoItMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,Doit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,DoItMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,Doit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,DoItMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,Doit,The following statement contains a magic number: foreach (int hvo in itemsToChange)  			{  				i++;  				if (i % interval == 0)  				{  					state.PercentDone = i * 100 / itemsToChange.Count();  					state.Breath();  				}  				Doit(hvo);  				BulkEditBar.CommitChanges(hvo' commitChanges' m_cache' m_accessor.WritingSystem);  			}
Magic Number,SIL.FieldWorks.Common.Controls,IntChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,IntChooserBEditControl,The following statement contains a magic number: foreach (string pair in itemList.Split(';'))  			{  				string[] vals = pair.Trim().Split(':');  				if (vals.Length != 2)  					throw new Exception("IntChooserBEditControl values must look like n:name");  				int val = Int32.Parse(vals[0]);  				m_combo.Items.Add(new IntComboItem(vals[1].Trim()' val));  			}
Magic Number,SIL.FieldWorks.Common.Controls,IntChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,IntChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,IntChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: foreach (int hvoItem in itemsToChange)  			{  				i++;  				if (i % interval == 0)  				{  					state.PercentDone = i * 100 / itemsToChange.Count();  					state.Breath();  				}  				// If the field is on an owned object that might not exist' we don't want to create  				// that owned object just because we're changing the values involved.  				// (See FWR-3199 for an example of such a situation.)  				int clid = m_sda.get_IntProp(hvoItem' CmObjectTags.kflidClass);  				var flids = mdcManaged.GetFields(clid' true' (int)CellarPropertyTypeFilter.All);  				if (!flids.Contains(m_flid))  					continue;  				int valOld;  				if (TryGetOriginalListValue(sda' hvoItem' out valOld) && valOld == val)  					continue;  				UpdateListItemToNewValue(sda' hvoItem' val' valOld);  			}
Magic Number,SIL.FieldWorks.Common.Controls,IntChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,IntChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,IntChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: foreach (int hvoItem in itemsToChange)  			{  				i++;  				if (i % interval == 0)  				{  					state.PercentDone = i * 100 / itemsToChange.Count();  					state.Breath();  				}  				bool fEnable;  				// If the field is on an owned object that might not exist' the hvoItem might  				// refer to the owner' which is likely of a different class.  In such cases'  				// we don't want to try getting the field value' since that produces a pretty  				// green dialog box for the user.  See FWR-3199.  				int clid = m_sda.get_IntProp(hvoItem' CmObjectTags.kflidClass);  				var flids = mdcManaged.GetFields(clid' true' (int)CellarPropertyTypeFilter.All);  				if (!flids.Contains(m_flid))  					fEnable = false;  				else if (type == (int)CellarPropertyType.Boolean)  					fEnable = m_sda.get_BooleanProp(hvoItem' m_flid) != (val != 0);  				else  					fEnable = m_sda.get_IntProp(hvoItem' m_flid) != val;  				if (fEnable)  					m_sda.SetString(hvoItem' tagFakeFlid' tssVal);  				m_sda.SetInt(hvoItem' tagEnabled' (fEnable ? 1 : 0));  			}
Magic Number,SIL.FieldWorks.Common.Controls,IntOnSubfieldChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,IntOnSubfieldChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,IntOnSubfieldChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: if (m_flidSub == LexEntryRefTags.kflidHideMinorEntry)  			{  				// we present this to the user as "Show" instead of "Hide"  				if (val == 0)  					val = 1;  				else  					val = 0;  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					Debug.Assert(m_sda.get_IntProp(hvoItem' CmObjectTags.kflidClass) == LexEntryRefTags.kClassId);  					int valOld = m_sda.get_IntProp(hvoItem' m_flidSub);  					bool fEnable = valOld != val;  					if (fEnable)  						m_sda.SetString(hvoItem' tagFakeFlid' tssVal);  					m_sda.SetInt(hvoItem' tagEnabled' (fEnable ? 1 : 0));  				}  			}  			else  			{  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					int hvoField = m_sda.get_ObjectProp(hvoItem' m_flid);  					if (hvoField == 0)  						continue;  					int valOld = GetValueOfField(m_sda' hvoField);  					bool fEnable = valOld != val;  					if (fEnable)  						m_sda.SetString(hvoItem' tagFakeFlid' tssVal);  					m_sda.SetInt(hvoItem' tagEnabled' (fEnable ? 1 : 0));  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,IntOnSubfieldChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: if (m_flidSub == LexEntryRefTags.kflidHideMinorEntry)  			{  				// we present this to the user as "Show" instead of "Hide"  				if (val == 0)  					val = 1;  				else  					val = 0;  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					Debug.Assert(m_sda.get_IntProp(hvoItem' CmObjectTags.kflidClass) == LexEntryRefTags.kClassId);  					int valOld = m_sda.get_IntProp(hvoItem' m_flidSub);  					bool fEnable = valOld != val;  					if (fEnable)  						m_sda.SetString(hvoItem' tagFakeFlid' tssVal);  					m_sda.SetInt(hvoItem' tagEnabled' (fEnable ? 1 : 0));  				}  			}  			else  			{  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					int hvoField = m_sda.get_ObjectProp(hvoItem' m_flid);  					if (hvoField == 0)  						continue;  					int valOld = GetValueOfField(m_sda' hvoField);  					bool fEnable = valOld != val;  					if (fEnable)  						m_sda.SetString(hvoItem' tagFakeFlid' tssVal);  					m_sda.SetInt(hvoItem' tagEnabled' (fEnable ? 1 : 0));  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,IntOnSubfieldChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,IntOnSubfieldChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,IntOnSubfieldChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: if (m_flidSub == LexEntryRefTags.kflidHideMinorEntry)  			{  				// we present this to the user as "Show" instead of "Hide"  				if (val == 0)  					val = 1;  				else  					val = 0;  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					Debug.Assert(m_sda.get_IntProp(hvoItem' CmObjectTags.kflidClass) == LexEntryRefTags.kClassId);  					int valOld = m_sda.get_IntProp(hvoItem' m_flidSub);  					if (valOld != val)  						sda.SetInt(hvoItem' m_flidSub' val);  				}  			}  			else  			{  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					int hvoField = sda.get_ObjectProp(hvoItem' m_flid);  					if (hvoField == 0)  						continue;  					int valOld = GetValueOfField(sda' hvoField);  					if (valOld == val)  						continue;  					SetValueOfField(sda' hvoField' val);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,IntOnSubfieldChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: if (m_flidSub == LexEntryRefTags.kflidHideMinorEntry)  			{  				// we present this to the user as "Show" instead of "Hide"  				if (val == 0)  					val = 1;  				else  					val = 0;  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					Debug.Assert(m_sda.get_IntProp(hvoItem' CmObjectTags.kflidClass) == LexEntryRefTags.kClassId);  					int valOld = m_sda.get_IntProp(hvoItem' m_flidSub);  					if (valOld != val)  						sda.SetInt(hvoItem' m_flidSub' val);  				}  			}  			else  			{  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					int hvoField = sda.get_ObjectProp(hvoItem' m_flid);  					if (hvoField == 0)  						continue;  					int valOld = GetValueOfField(sda' hvoField);  					if (valOld == val)  						continue;  					SetValueOfField(sda' hvoField' val);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,BoolOnSubfieldChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,BoolOnSubfieldChooserBEditControl,The following statement contains a magic number: if (m_combo.Items.Count != 2)  				throw new ArgumentException("BoolOnSubfieldChooserBEditControl must be created with a two-item list of options");
Magic Number,SIL.FieldWorks.Common.Controls,FlatListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkEdit' XMLViewsStrings.ksRedoBulkEdit'  				m_cache.ActionHandlerAccessor' () =>  			{  				ISilDataAccess sda = m_cache.DomainDataByFlid;    				HvoTssComboItem item = m_combo.SelectedItem as HvoTssComboItem;  				if (item == null)  					return;  				int hvoSel = item.Hvo;  				var mdcManaged = m_cache.ServiceLocator.GetInstance<IFwMetaDataCacheManaged>();  				int i = 0;  				// Report progress 50 times or every 100 items' whichever is more (but no more than once per item!)  				int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					// If the field is on an owned object that might not exist' the hvoItem might  					// refer to the owner' which is likely of a different class.  In such cases'  					// we don't want to try getting the field value' since that produces a pretty  					// green dialog box for the user.  See FWR-3199.  					int clid = m_sda.get_IntProp(hvoItem' CmObjectTags.kflidClass);  					var flids = mdcManaged.GetFields(clid' true' (int)CellarPropertyTypeFilter.All);  					if (!flids.Contains(m_flidAtomicProp))  						continue;  					int hvoOld = GetOriginalListValue(sda' hvoItem);  					if (hvoOld == hvoSel)  						continue;  					UpdateListItemToNewValue(sda' hvoItem' hvoSel' hvoOld);  				}  			});
Magic Number,SIL.FieldWorks.Common.Controls,FlatListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkEdit' XMLViewsStrings.ksRedoBulkEdit'  				m_cache.ActionHandlerAccessor' () =>  			{  				ISilDataAccess sda = m_cache.DomainDataByFlid;    				HvoTssComboItem item = m_combo.SelectedItem as HvoTssComboItem;  				if (item == null)  					return;  				int hvoSel = item.Hvo;  				var mdcManaged = m_cache.ServiceLocator.GetInstance<IFwMetaDataCacheManaged>();  				int i = 0;  				// Report progress 50 times or every 100 items' whichever is more (but no more than once per item!)  				int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					// If the field is on an owned object that might not exist' the hvoItem might  					// refer to the owner' which is likely of a different class.  In such cases'  					// we don't want to try getting the field value' since that produces a pretty  					// green dialog box for the user.  See FWR-3199.  					int clid = m_sda.get_IntProp(hvoItem' CmObjectTags.kflidClass);  					var flids = mdcManaged.GetFields(clid' true' (int)CellarPropertyTypeFilter.All);  					if (!flids.Contains(m_flidAtomicProp))  						continue;  					int hvoOld = GetOriginalListValue(sda' hvoItem);  					if (hvoOld == hvoSel)  						continue;  					UpdateListItemToNewValue(sda' hvoItem' hvoSel' hvoOld);  				}  			});
Magic Number,SIL.FieldWorks.Common.Controls,FlatListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkEdit' XMLViewsStrings.ksRedoBulkEdit'  				m_cache.ActionHandlerAccessor' () =>  			{  				ISilDataAccess sda = m_cache.DomainDataByFlid;    				HvoTssComboItem item = m_combo.SelectedItem as HvoTssComboItem;  				if (item == null)  					return;  				int hvoSel = item.Hvo;  				var mdcManaged = m_cache.ServiceLocator.GetInstance<IFwMetaDataCacheManaged>();  				int i = 0;  				// Report progress 50 times or every 100 items' whichever is more (but no more than once per item!)  				int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					// If the field is on an owned object that might not exist' the hvoItem might  					// refer to the owner' which is likely of a different class.  In such cases'  					// we don't want to try getting the field value' since that produces a pretty  					// green dialog box for the user.  See FWR-3199.  					int clid = m_sda.get_IntProp(hvoItem' CmObjectTags.kflidClass);  					var flids = mdcManaged.GetFields(clid' true' (int)CellarPropertyTypeFilter.All);  					if (!flids.Contains(m_flidAtomicProp))  						continue;  					int hvoOld = GetOriginalListValue(sda' hvoItem);  					if (hvoOld == hvoSel)  						continue;  					UpdateListItemToNewValue(sda' hvoItem' hvoSel' hvoOld);  				}  			});
Magic Number,SIL.FieldWorks.Common.Controls,FlatListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,FlatListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,FlatListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: foreach(int hvoItem in itemsToChange)  			{  				i++;  				if (i % interval == 0)  				{  					state.PercentDone = i * 100 / itemsToChange.Count();  					state.Breath();  				}  				bool fEnable;  				// If the field is on an owned object that might not exist' the hvoItem might  				// refer to the owner' which is likely of a different class.  In such cases'  				// we don't want to try getting the field value' since that produces a pretty  				// green dialog box for the user.  See FWR-3199.  				int clid = m_sda.get_IntProp(hvoItem' CmObjectTags.kflidClass);  				var flids = mdcManaged.GetFields(clid' true' (int)CellarPropertyTypeFilter.All);  				if (!flids.Contains(m_flidAtomicProp))  				{  					fEnable = false;  				}  				else  				{  					int hvoOld = GetOriginalListValue(sda' hvoItem);  					fEnable = hvoOld != hvoSel;  				}  				if (fEnable)  					m_sda.SetString(hvoItem' tagFakeFlid' item.AsTss);  				m_sda.SetInt(hvoItem' tagEnabled' (fEnable ? 1 : 0));  			}
Magic Number,SIL.FieldWorks.Common.Controls,ComplexListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_launcher_Click,The following statement contains a magic number: using (new WaitCursor(this.Control))  			{  				var list = m_cache.ServiceLocator.GetInstance<ICmPossibilityListRepository>().GetObject(m_hvoList);  				var persistProvider = new PersistenceProvider(m_mediator' PropTable);  				var labels = ObjectLabel.CreateObjectLabels(m_cache' list.PossibilitiesOS'  					m_displayNameProperty' m_displayWs);  				using (var chooser = new ReallySimpleListChooser(persistProvider'  					labels' m_fieldName' m_cache' m_chosenObjs' PropTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")))  				{  					chooser.Atomic = Atomic;  					chooser.Cache = m_cache;  					chooser.SetObjectAndFlid(0' m_flid);  					chooser.ShowFuncButtons();  					if (Convert.ToInt16(Right(m_flid.ToString()' 3)) >= 500 && Convert.ToInt16(Right(m_flid.ToString()'3)) < 600)  						chooser.SetHelpTopic("khtpBulkEditCustomField");  					else  						chooser.SetHelpTopic("khtpBulkEdit" + m_fieldName.Replace(" "' ""));  					var res = chooser.ShowDialog((sender as Control).TopLevelControl);  					if (DialogResult.Cancel == res)  						return;  					m_chosenObjs = chooser.ChosenObjects.ToList();  					m_fReplace = chooser.ReplaceMode;  					m_fRemove = chooser.RemoveMode;    					// Tell the parent control that we may have changed the selected item so it can  					// enable or disable the Apply and Preview buttons based on the selection.  					// We are just checking here if any item was selected by the user in the dialog  					if (ValueChanged != null)  					{  						int hvo = 0;  						if (m_chosenObjs.Count > 0)  							hvo = m_chosenObjs[0].Hvo;  						ValueChanged(sender' new FwObjectSelectionEventArgs(hvo));  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,ComplexListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_launcher_Click,The following statement contains a magic number: using (new WaitCursor(this.Control))  			{  				var list = m_cache.ServiceLocator.GetInstance<ICmPossibilityListRepository>().GetObject(m_hvoList);  				var persistProvider = new PersistenceProvider(m_mediator' PropTable);  				var labels = ObjectLabel.CreateObjectLabels(m_cache' list.PossibilitiesOS'  					m_displayNameProperty' m_displayWs);  				using (var chooser = new ReallySimpleListChooser(persistProvider'  					labels' m_fieldName' m_cache' m_chosenObjs' PropTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")))  				{  					chooser.Atomic = Atomic;  					chooser.Cache = m_cache;  					chooser.SetObjectAndFlid(0' m_flid);  					chooser.ShowFuncButtons();  					if (Convert.ToInt16(Right(m_flid.ToString()' 3)) >= 500 && Convert.ToInt16(Right(m_flid.ToString()'3)) < 600)  						chooser.SetHelpTopic("khtpBulkEditCustomField");  					else  						chooser.SetHelpTopic("khtpBulkEdit" + m_fieldName.Replace(" "' ""));  					var res = chooser.ShowDialog((sender as Control).TopLevelControl);  					if (DialogResult.Cancel == res)  						return;  					m_chosenObjs = chooser.ChosenObjects.ToList();  					m_fReplace = chooser.ReplaceMode;  					m_fRemove = chooser.RemoveMode;    					// Tell the parent control that we may have changed the selected item so it can  					// enable or disable the Apply and Preview buttons based on the selection.  					// We are just checking here if any item was selected by the user in the dialog  					if (ValueChanged != null)  					{  						int hvo = 0;  						if (m_chosenObjs.Count > 0)  							hvo = m_chosenObjs[0].Hvo;  						ValueChanged(sender' new FwObjectSelectionEventArgs(hvo));  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,ComplexListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_launcher_Click,The following statement contains a magic number: using (new WaitCursor(this.Control))  			{  				var list = m_cache.ServiceLocator.GetInstance<ICmPossibilityListRepository>().GetObject(m_hvoList);  				var persistProvider = new PersistenceProvider(m_mediator' PropTable);  				var labels = ObjectLabel.CreateObjectLabels(m_cache' list.PossibilitiesOS'  					m_displayNameProperty' m_displayWs);  				using (var chooser = new ReallySimpleListChooser(persistProvider'  					labels' m_fieldName' m_cache' m_chosenObjs' PropTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")))  				{  					chooser.Atomic = Atomic;  					chooser.Cache = m_cache;  					chooser.SetObjectAndFlid(0' m_flid);  					chooser.ShowFuncButtons();  					if (Convert.ToInt16(Right(m_flid.ToString()' 3)) >= 500 && Convert.ToInt16(Right(m_flid.ToString()'3)) < 600)  						chooser.SetHelpTopic("khtpBulkEditCustomField");  					else  						chooser.SetHelpTopic("khtpBulkEdit" + m_fieldName.Replace(" "' ""));  					var res = chooser.ShowDialog((sender as Control).TopLevelControl);  					if (DialogResult.Cancel == res)  						return;  					m_chosenObjs = chooser.ChosenObjects.ToList();  					m_fReplace = chooser.ReplaceMode;  					m_fRemove = chooser.RemoveMode;    					// Tell the parent control that we may have changed the selected item so it can  					// enable or disable the Apply and Preview buttons based on the selection.  					// We are just checking here if any item was selected by the user in the dialog  					if (ValueChanged != null)  					{  						int hvo = 0;  						if (m_chosenObjs.Count > 0)  							hvo = m_chosenObjs[0].Hvo;  						ValueChanged(sender' new FwObjectSelectionEventArgs(hvo));  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,ComplexListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_launcher_Click,The following statement contains a magic number: using (new WaitCursor(this.Control))  			{  				var list = m_cache.ServiceLocator.GetInstance<ICmPossibilityListRepository>().GetObject(m_hvoList);  				var persistProvider = new PersistenceProvider(m_mediator' PropTable);  				var labels = ObjectLabel.CreateObjectLabels(m_cache' list.PossibilitiesOS'  					m_displayNameProperty' m_displayWs);  				using (var chooser = new ReallySimpleListChooser(persistProvider'  					labels' m_fieldName' m_cache' m_chosenObjs' PropTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")))  				{  					chooser.Atomic = Atomic;  					chooser.Cache = m_cache;  					chooser.SetObjectAndFlid(0' m_flid);  					chooser.ShowFuncButtons();  					if (Convert.ToInt16(Right(m_flid.ToString()' 3)) >= 500 && Convert.ToInt16(Right(m_flid.ToString()'3)) < 600)  						chooser.SetHelpTopic("khtpBulkEditCustomField");  					else  						chooser.SetHelpTopic("khtpBulkEdit" + m_fieldName.Replace(" "' ""));  					var res = chooser.ShowDialog((sender as Control).TopLevelControl);  					if (DialogResult.Cancel == res)  						return;  					m_chosenObjs = chooser.ChosenObjects.ToList();  					m_fReplace = chooser.ReplaceMode;  					m_fRemove = chooser.RemoveMode;    					// Tell the parent control that we may have changed the selected item so it can  					// enable or disable the Apply and Preview buttons based on the selection.  					// We are just checking here if any item was selected by the user in the dialog  					if (ValueChanged != null)  					{  						int hvo = 0;  						if (m_chosenObjs.Count > 0)  							hvo = m_chosenObjs[0].Hvo;  						ValueChanged(sender' new FwObjectSelectionEventArgs(hvo));  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,ComplexListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkEdit' XMLViewsStrings.ksRedoBulkEdit'  				m_cache.ServiceLocator.GetInstance<IActionHandler>()' () =>  			{  				//ISilDataAccess sda = m_cache.DomainDataByFlid; // used DataAccess' is that okay?    				var chosenObjs = m_chosenObjs;  				int i = 0;  				// Report progress 50 times or every 100 items' whichever is more (but no more than once per item!)  				int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					if (DisableItem(hvoItem))  						continue;  					List<ICmObject> oldVals' newVal;  					ComputeValue(chosenObjs' hvoItem' out oldVals' out newVal);  					if (oldVals.SequenceEqual(newVal))  						continue;    					var newHvos = (from obj in newVal  								   select obj.Hvo).ToArray();  					var realTarget = hvoItem;  					if (m_ghostParentHelper != null)  					{  						realTarget = m_ghostParentHelper.FindOrCreateOwnerOfTargetProp(hvoItem' m_flid);  					}  					if (Atomic)  					{  						var newHvo = newHvos.Length > 0 ? newHvos[0] : 0;  						DataAccess.SetObjProp(realTarget' m_flid' newHvo);  					}  					else  					{  						DataAccess.Replace(realTarget' m_flid' 0' oldVals.Count' newHvos' newHvos.Length);  					}  				}  			});
Magic Number,SIL.FieldWorks.Common.Controls,ComplexListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkEdit' XMLViewsStrings.ksRedoBulkEdit'  				m_cache.ServiceLocator.GetInstance<IActionHandler>()' () =>  			{  				//ISilDataAccess sda = m_cache.DomainDataByFlid; // used DataAccess' is that okay?    				var chosenObjs = m_chosenObjs;  				int i = 0;  				// Report progress 50 times or every 100 items' whichever is more (but no more than once per item!)  				int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					if (DisableItem(hvoItem))  						continue;  					List<ICmObject> oldVals' newVal;  					ComputeValue(chosenObjs' hvoItem' out oldVals' out newVal);  					if (oldVals.SequenceEqual(newVal))  						continue;    					var newHvos = (from obj in newVal  								   select obj.Hvo).ToArray();  					var realTarget = hvoItem;  					if (m_ghostParentHelper != null)  					{  						realTarget = m_ghostParentHelper.FindOrCreateOwnerOfTargetProp(hvoItem' m_flid);  					}  					if (Atomic)  					{  						var newHvo = newHvos.Length > 0 ? newHvos[0] : 0;  						DataAccess.SetObjProp(realTarget' m_flid' newHvo);  					}  					else  					{  						DataAccess.Replace(realTarget' m_flid' 0' oldVals.Count' newHvos' newHvos.Length);  					}  				}  			});
Magic Number,SIL.FieldWorks.Common.Controls,ComplexListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkEdit' XMLViewsStrings.ksRedoBulkEdit'  				m_cache.ServiceLocator.GetInstance<IActionHandler>()' () =>  			{  				//ISilDataAccess sda = m_cache.DomainDataByFlid; // used DataAccess' is that okay?    				var chosenObjs = m_chosenObjs;  				int i = 0;  				// Report progress 50 times or every 100 items' whichever is more (but no more than once per item!)  				int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));  				foreach (int hvoItem in itemsToChange)  				{  					i++;  					if (i % interval == 0)  					{  						state.PercentDone = i * 100 / itemsToChange.Count();  						state.Breath();  					}  					if (DisableItem(hvoItem))  						continue;  					List<ICmObject> oldVals' newVal;  					ComputeValue(chosenObjs' hvoItem' out oldVals' out newVal);  					if (oldVals.SequenceEqual(newVal))  						continue;    					var newHvos = (from obj in newVal  								   select obj.Hvo).ToArray();  					var realTarget = hvoItem;  					if (m_ghostParentHelper != null)  					{  						realTarget = m_ghostParentHelper.FindOrCreateOwnerOfTargetProp(hvoItem' m_flid);  					}  					if (Atomic)  					{  						var newHvo = newHvos.Length > 0 ? newHvos[0] : 0;  						DataAccess.SetObjProp(realTarget' m_flid' newHvo);  					}  					else  					{  						DataAccess.Replace(realTarget' m_flid' 0' oldVals.Count' newHvos' newHvos.Length);  					}  				}  			});
Magic Number,SIL.FieldWorks.Common.Controls,ComplexListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,ComplexListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,ComplexListChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: foreach (int hvoItem in itemsToChange)  			{  				i++;  				if (i % interval == 0)  				{  					state.PercentDone = i * 100 / itemsToChange.Count();  					state.Breath();  				}  				ITsString tssVal = tssChosenVal;  				List<ICmObject> oldVals' newVal;  				bool fEnable = false;  				if (!DisableItem(hvoItem))  				{  					ComputeValue(chosenObjs' hvoItem' out oldVals' out newVal);  					fEnable = !oldVals.SequenceEqual(newVal);  					if (fEnable)  					{  						if (newVal != chosenObjs)  							tssVal = BuildValueString(newVal);  						m_sda.SetString(hvoItem' tagFakeFlid' tssVal);  					}  				}  				m_sda.SetInt(hvoItem' tagEnabled' (fEnable ? 1 : 0));  			}
Magic Number,SIL.FieldWorks.Common.Controls,SemanticDomainChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,MakeSuggestions,The following statement contains a magic number: state.PercentDone = 15;
Magic Number,SIL.FieldWorks.Common.Controls,MorphTypeChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkEdit' XMLViewsStrings.ksRedoBulkEdit' m_cache.ActionHandlerAccessor'  				() =>  					{  						ISilDataAccess sda = m_cache.DomainDataByFlid;    						HvoTssComboItem item = m_combo.SelectedItem as HvoTssComboItem;  						if (item == null)  							return;  						int hvoSelMorphType = item.Hvo;  						bool fSelAffix = false;  						if (hvoSelMorphType != 0)  							fSelAffix = MorphServices.IsAffixType(m_cache' hvoSelMorphType);  						bool fAnyFundamentalChanges = false;  						// Preliminary check and warning if changing fundamental type.  						foreach (int hvoLexEntry in itemsToChange)  						{  							int hvoLexemeForm = sda.get_ObjectProp(hvoLexEntry' m_flidParent);  							if (hvoLexemeForm == 0)  								continue;  							int hvoMorphType = sda.get_ObjectProp(hvoLexemeForm' m_flidAtomicProp);  							if (hvoMorphType == 0)  								continue;  							bool fAffix = MorphServices.IsAffixType(m_cache' hvoMorphType);  							if (fAffix != fSelAffix && hvoSelMorphType != 0)  							{  								string msg = String.Format(XMLViewsStrings.ksMorphTypeChangesSlow'  									(fAffix ? XMLViewsStrings.ksAffixes : XMLViewsStrings.ksStems)'  									(fAffix ? XMLViewsStrings.ksStems : XMLViewsStrings.ksAffixes));  								if (MessageBox.Show(this.m_combo' msg' XMLViewsStrings.ksChangingMorphType'  									MessageBoxButtons.OKCancel'  									MessageBoxIcon.Warning) != DialogResult.OK)  								{  									return;  								}  								fAnyFundamentalChanges = true;  								break; // user OKd it' no need to check further.  							}  						}  						if (fAnyFundamentalChanges)  						{  							m_containingViewer.SetListModificationInProgress(true);  						}  						try  						{  							// Report progress 50 times or every 100 items' whichever is more  							// (but no more than once per item!)  							var idsToDel = new HashSet<int>();  							var newForms = new Dictionary<IMoForm' ILexEntry>();  							int interval = Math.Min(80' Math.Max(itemsToChange.Count()/50' 1));  							int i = 0;  							var rgmsaOld = new List<IMoMorphSynAnalysis>();  							foreach (int hvoLexEntry in itemsToChange)  							{  								// Guess we're 80% done when through all but deleting leftover objects and moving  								// new MoForms to LexemeForm slot.  								if ((i + 1)%interval == 0)  								{  									state.PercentDone = i*80/itemsToChange.Count();  									state.Breath();  								}  								i++;  								int hvoLexemeForm = sda.get_ObjectProp(hvoLexEntry' m_flidParent);  								if (hvoLexemeForm == 0)  									continue;  								int hvoMorphType = sda.get_ObjectProp(hvoLexemeForm' m_flidAtomicProp);  								if (hvoMorphType == 0)  									continue;  								bool fAffix = MorphServices.IsAffixType(m_cache' hvoMorphType);  								var stemAlloFactory = m_cache.ServiceLocator.GetInstance<IMoStemAllomorphFactory>();  								var afxAlloFactory = m_cache.ServiceLocator.GetInstance<IMoAffixAllomorphFactory>();  								if (fAffix == fSelAffix)  								{  									// Not changing C# type of allomorph object' just set the morph type.  									if (hvoMorphType != hvoSelMorphType)  									{  										sda.SetObjProp(hvoLexemeForm' m_flidAtomicProp' hvoSelMorphType);  									}  								}  								else if (fAffix)  								{  									// Changing from affix to stem' need a new allomorph object.  									var entry = m_cache.ServiceLocator.GetInstance<ILexEntryRepository>().GetObject(hvoLexEntry);  									var affix = m_cache.ServiceLocator.GetInstance<IMoAffixAllomorphRepository>().GetObject(hvoLexemeForm);  									var stem = stemAlloFactory.Create();  									rgmsaOld.Clear();  									foreach (var msa in entry.MorphoSyntaxAnalysesOC)  									{  										if (!(msa is IMoStemMsa))  											rgmsaOld.Add(msa);  									}  									entry.ReplaceObsoleteMsas(rgmsaOld);  									SwapFormValues(entry' affix' stem' hvoSelMorphType' idsToDel);  									foreach (var env in affix.PhoneEnvRC)  										stem.PhoneEnvRC.Add(env);  									newForms[stem] = entry;  								}  								else  								{  									// Changing from stem to affix' need a new allomorph object.  									var entry = m_cache.ServiceLocator.GetInstance<ILexEntryRepository>().GetObject(hvoLexEntry);  									var stem = m_cache.ServiceLocator.GetInstance<IMoStemAllomorphRepository>().GetObject(hvoLexemeForm);  									var affix = afxAlloFactory.Create();  									rgmsaOld.Clear();  									foreach (var msa in entry.MorphoSyntaxAnalysesOC)  									{  										if (msa is IMoStemMsa)  											rgmsaOld.Add(msa);  									}  									entry.ReplaceObsoleteMsas(rgmsaOld);  									SwapFormValues(entry' stem' affix' hvoSelMorphType' idsToDel);  									foreach (var env in stem.PhoneEnvRC)  										affix.PhoneEnvRC.Add(env);  									newForms[affix] = entry;  								}  							}  							if (fAnyFundamentalChanges)  							{  								foreach (int hvo in idsToDel)  								{  									sda.DeleteObj(hvo);  								}  								state.PercentDone = 90;  								state.Breath();  								foreach (var pair in newForms)  								{  									pair.Value.LexemeFormOA = pair.Key;  								}  								state.PercentDone = 100;  								state.Breath();  							}  						}  						finally  						{  							if (fAnyFundamentalChanges)  								m_containingViewer.SetListModificationInProgress(false);  						}  					});
Magic Number,SIL.FieldWorks.Common.Controls,MorphTypeChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkEdit' XMLViewsStrings.ksRedoBulkEdit' m_cache.ActionHandlerAccessor'  				() =>  					{  						ISilDataAccess sda = m_cache.DomainDataByFlid;    						HvoTssComboItem item = m_combo.SelectedItem as HvoTssComboItem;  						if (item == null)  							return;  						int hvoSelMorphType = item.Hvo;  						bool fSelAffix = false;  						if (hvoSelMorphType != 0)  							fSelAffix = MorphServices.IsAffixType(m_cache' hvoSelMorphType);  						bool fAnyFundamentalChanges = false;  						// Preliminary check and warning if changing fundamental type.  						foreach (int hvoLexEntry in itemsToChange)  						{  							int hvoLexemeForm = sda.get_ObjectProp(hvoLexEntry' m_flidParent);  							if (hvoLexemeForm == 0)  								continue;  							int hvoMorphType = sda.get_ObjectProp(hvoLexemeForm' m_flidAtomicProp);  							if (hvoMorphType == 0)  								continue;  							bool fAffix = MorphServices.IsAffixType(m_cache' hvoMorphType);  							if (fAffix != fSelAffix && hvoSelMorphType != 0)  							{  								string msg = String.Format(XMLViewsStrings.ksMorphTypeChangesSlow'  									(fAffix ? XMLViewsStrings.ksAffixes : XMLViewsStrings.ksStems)'  									(fAffix ? XMLViewsStrings.ksStems : XMLViewsStrings.ksAffixes));  								if (MessageBox.Show(this.m_combo' msg' XMLViewsStrings.ksChangingMorphType'  									MessageBoxButtons.OKCancel'  									MessageBoxIcon.Warning) != DialogResult.OK)  								{  									return;  								}  								fAnyFundamentalChanges = true;  								break; // user OKd it' no need to check further.  							}  						}  						if (fAnyFundamentalChanges)  						{  							m_containingViewer.SetListModificationInProgress(true);  						}  						try  						{  							// Report progress 50 times or every 100 items' whichever is more  							// (but no more than once per item!)  							var idsToDel = new HashSet<int>();  							var newForms = new Dictionary<IMoForm' ILexEntry>();  							int interval = Math.Min(80' Math.Max(itemsToChange.Count()/50' 1));  							int i = 0;  							var rgmsaOld = new List<IMoMorphSynAnalysis>();  							foreach (int hvoLexEntry in itemsToChange)  							{  								// Guess we're 80% done when through all but deleting leftover objects and moving  								// new MoForms to LexemeForm slot.  								if ((i + 1)%interval == 0)  								{  									state.PercentDone = i*80/itemsToChange.Count();  									state.Breath();  								}  								i++;  								int hvoLexemeForm = sda.get_ObjectProp(hvoLexEntry' m_flidParent);  								if (hvoLexemeForm == 0)  									continue;  								int hvoMorphType = sda.get_ObjectProp(hvoLexemeForm' m_flidAtomicProp);  								if (hvoMorphType == 0)  									continue;  								bool fAffix = MorphServices.IsAffixType(m_cache' hvoMorphType);  								var stemAlloFactory = m_cache.ServiceLocator.GetInstance<IMoStemAllomorphFactory>();  								var afxAlloFactory = m_cache.ServiceLocator.GetInstance<IMoAffixAllomorphFactory>();  								if (fAffix == fSelAffix)  								{  									// Not changing C# type of allomorph object' just set the morph type.  									if (hvoMorphType != hvoSelMorphType)  									{  										sda.SetObjProp(hvoLexemeForm' m_flidAtomicProp' hvoSelMorphType);  									}  								}  								else if (fAffix)  								{  									// Changing from affix to stem' need a new allomorph object.  									var entry = m_cache.ServiceLocator.GetInstance<ILexEntryRepository>().GetObject(hvoLexEntry);  									var affix = m_cache.ServiceLocator.GetInstance<IMoAffixAllomorphRepository>().GetObject(hvoLexemeForm);  									var stem = stemAlloFactory.Create();  									rgmsaOld.Clear();  									foreach (var msa in entry.MorphoSyntaxAnalysesOC)  									{  										if (!(msa is IMoStemMsa))  											rgmsaOld.Add(msa);  									}  									entry.ReplaceObsoleteMsas(rgmsaOld);  									SwapFormValues(entry' affix' stem' hvoSelMorphType' idsToDel);  									foreach (var env in affix.PhoneEnvRC)  										stem.PhoneEnvRC.Add(env);  									newForms[stem] = entry;  								}  								else  								{  									// Changing from stem to affix' need a new allomorph object.  									var entry = m_cache.ServiceLocator.GetInstance<ILexEntryRepository>().GetObject(hvoLexEntry);  									var stem = m_cache.ServiceLocator.GetInstance<IMoStemAllomorphRepository>().GetObject(hvoLexemeForm);  									var affix = afxAlloFactory.Create();  									rgmsaOld.Clear();  									foreach (var msa in entry.MorphoSyntaxAnalysesOC)  									{  										if (msa is IMoStemMsa)  											rgmsaOld.Add(msa);  									}  									entry.ReplaceObsoleteMsas(rgmsaOld);  									SwapFormValues(entry' stem' affix' hvoSelMorphType' idsToDel);  									foreach (var env in stem.PhoneEnvRC)  										affix.PhoneEnvRC.Add(env);  									newForms[affix] = entry;  								}  							}  							if (fAnyFundamentalChanges)  							{  								foreach (int hvo in idsToDel)  								{  									sda.DeleteObj(hvo);  								}  								state.PercentDone = 90;  								state.Breath();  								foreach (var pair in newForms)  								{  									pair.Value.LexemeFormOA = pair.Key;  								}  								state.PercentDone = 100;  								state.Breath();  							}  						}  						finally  						{  							if (fAnyFundamentalChanges)  								m_containingViewer.SetListModificationInProgress(false);  						}  					});
Magic Number,SIL.FieldWorks.Common.Controls,MorphTypeChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkEdit' XMLViewsStrings.ksRedoBulkEdit' m_cache.ActionHandlerAccessor'  				() =>  					{  						ISilDataAccess sda = m_cache.DomainDataByFlid;    						HvoTssComboItem item = m_combo.SelectedItem as HvoTssComboItem;  						if (item == null)  							return;  						int hvoSelMorphType = item.Hvo;  						bool fSelAffix = false;  						if (hvoSelMorphType != 0)  							fSelAffix = MorphServices.IsAffixType(m_cache' hvoSelMorphType);  						bool fAnyFundamentalChanges = false;  						// Preliminary check and warning if changing fundamental type.  						foreach (int hvoLexEntry in itemsToChange)  						{  							int hvoLexemeForm = sda.get_ObjectProp(hvoLexEntry' m_flidParent);  							if (hvoLexemeForm == 0)  								continue;  							int hvoMorphType = sda.get_ObjectProp(hvoLexemeForm' m_flidAtomicProp);  							if (hvoMorphType == 0)  								continue;  							bool fAffix = MorphServices.IsAffixType(m_cache' hvoMorphType);  							if (fAffix != fSelAffix && hvoSelMorphType != 0)  							{  								string msg = String.Format(XMLViewsStrings.ksMorphTypeChangesSlow'  									(fAffix ? XMLViewsStrings.ksAffixes : XMLViewsStrings.ksStems)'  									(fAffix ? XMLViewsStrings.ksStems : XMLViewsStrings.ksAffixes));  								if (MessageBox.Show(this.m_combo' msg' XMLViewsStrings.ksChangingMorphType'  									MessageBoxButtons.OKCancel'  									MessageBoxIcon.Warning) != DialogResult.OK)  								{  									return;  								}  								fAnyFundamentalChanges = true;  								break; // user OKd it' no need to check further.  							}  						}  						if (fAnyFundamentalChanges)  						{  							m_containingViewer.SetListModificationInProgress(true);  						}  						try  						{  							// Report progress 50 times or every 100 items' whichever is more  							// (but no more than once per item!)  							var idsToDel = new HashSet<int>();  							var newForms = new Dictionary<IMoForm' ILexEntry>();  							int interval = Math.Min(80' Math.Max(itemsToChange.Count()/50' 1));  							int i = 0;  							var rgmsaOld = new List<IMoMorphSynAnalysis>();  							foreach (int hvoLexEntry in itemsToChange)  							{  								// Guess we're 80% done when through all but deleting leftover objects and moving  								// new MoForms to LexemeForm slot.  								if ((i + 1)%interval == 0)  								{  									state.PercentDone = i*80/itemsToChange.Count();  									state.Breath();  								}  								i++;  								int hvoLexemeForm = sda.get_ObjectProp(hvoLexEntry' m_flidParent);  								if (hvoLexemeForm == 0)  									continue;  								int hvoMorphType = sda.get_ObjectProp(hvoLexemeForm' m_flidAtomicProp);  								if (hvoMorphType == 0)  									continue;  								bool fAffix = MorphServices.IsAffixType(m_cache' hvoMorphType);  								var stemAlloFactory = m_cache.ServiceLocator.GetInstance<IMoStemAllomorphFactory>();  								var afxAlloFactory = m_cache.ServiceLocator.GetInstance<IMoAffixAllomorphFactory>();  								if (fAffix == fSelAffix)  								{  									// Not changing C# type of allomorph object' just set the morph type.  									if (hvoMorphType != hvoSelMorphType)  									{  										sda.SetObjProp(hvoLexemeForm' m_flidAtomicProp' hvoSelMorphType);  									}  								}  								else if (fAffix)  								{  									// Changing from affix to stem' need a new allomorph object.  									var entry = m_cache.ServiceLocator.GetInstance<ILexEntryRepository>().GetObject(hvoLexEntry);  									var affix = m_cache.ServiceLocator.GetInstance<IMoAffixAllomorphRepository>().GetObject(hvoLexemeForm);  									var stem = stemAlloFactory.Create();  									rgmsaOld.Clear();  									foreach (var msa in entry.MorphoSyntaxAnalysesOC)  									{  										if (!(msa is IMoStemMsa))  											rgmsaOld.Add(msa);  									}  									entry.ReplaceObsoleteMsas(rgmsaOld);  									SwapFormValues(entry' affix' stem' hvoSelMorphType' idsToDel);  									foreach (var env in affix.PhoneEnvRC)  										stem.PhoneEnvRC.Add(env);  									newForms[stem] = entry;  								}  								else  								{  									// Changing from stem to affix' need a new allomorph object.  									var entry = m_cache.ServiceLocator.GetInstance<ILexEntryRepository>().GetObject(hvoLexEntry);  									var stem = m_cache.ServiceLocator.GetInstance<IMoStemAllomorphRepository>().GetObject(hvoLexemeForm);  									var affix = afxAlloFactory.Create();  									rgmsaOld.Clear();  									foreach (var msa in entry.MorphoSyntaxAnalysesOC)  									{  										if (msa is IMoStemMsa)  											rgmsaOld.Add(msa);  									}  									entry.ReplaceObsoleteMsas(rgmsaOld);  									SwapFormValues(entry' stem' affix' hvoSelMorphType' idsToDel);  									foreach (var env in stem.PhoneEnvRC)  										affix.PhoneEnvRC.Add(env);  									newForms[affix] = entry;  								}  							}  							if (fAnyFundamentalChanges)  							{  								foreach (int hvo in idsToDel)  								{  									sda.DeleteObj(hvo);  								}  								state.PercentDone = 90;  								state.Breath();  								foreach (var pair in newForms)  								{  									pair.Value.LexemeFormOA = pair.Key;  								}  								state.PercentDone = 100;  								state.Breath();  							}  						}  						finally  						{  							if (fAnyFundamentalChanges)  								m_containingViewer.SetListModificationInProgress(false);  						}  					});
Magic Number,SIL.FieldWorks.Common.Controls,MorphTypeChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkEdit' XMLViewsStrings.ksRedoBulkEdit' m_cache.ActionHandlerAccessor'  				() =>  					{  						ISilDataAccess sda = m_cache.DomainDataByFlid;    						HvoTssComboItem item = m_combo.SelectedItem as HvoTssComboItem;  						if (item == null)  							return;  						int hvoSelMorphType = item.Hvo;  						bool fSelAffix = false;  						if (hvoSelMorphType != 0)  							fSelAffix = MorphServices.IsAffixType(m_cache' hvoSelMorphType);  						bool fAnyFundamentalChanges = false;  						// Preliminary check and warning if changing fundamental type.  						foreach (int hvoLexEntry in itemsToChange)  						{  							int hvoLexemeForm = sda.get_ObjectProp(hvoLexEntry' m_flidParent);  							if (hvoLexemeForm == 0)  								continue;  							int hvoMorphType = sda.get_ObjectProp(hvoLexemeForm' m_flidAtomicProp);  							if (hvoMorphType == 0)  								continue;  							bool fAffix = MorphServices.IsAffixType(m_cache' hvoMorphType);  							if (fAffix != fSelAffix && hvoSelMorphType != 0)  							{  								string msg = String.Format(XMLViewsStrings.ksMorphTypeChangesSlow'  									(fAffix ? XMLViewsStrings.ksAffixes : XMLViewsStrings.ksStems)'  									(fAffix ? XMLViewsStrings.ksStems : XMLViewsStrings.ksAffixes));  								if (MessageBox.Show(this.m_combo' msg' XMLViewsStrings.ksChangingMorphType'  									MessageBoxButtons.OKCancel'  									MessageBoxIcon.Warning) != DialogResult.OK)  								{  									return;  								}  								fAnyFundamentalChanges = true;  								break; // user OKd it' no need to check further.  							}  						}  						if (fAnyFundamentalChanges)  						{  							m_containingViewer.SetListModificationInProgress(true);  						}  						try  						{  							// Report progress 50 times or every 100 items' whichever is more  							// (but no more than once per item!)  							var idsToDel = new HashSet<int>();  							var newForms = new Dictionary<IMoForm' ILexEntry>();  							int interval = Math.Min(80' Math.Max(itemsToChange.Count()/50' 1));  							int i = 0;  							var rgmsaOld = new List<IMoMorphSynAnalysis>();  							foreach (int hvoLexEntry in itemsToChange)  							{  								// Guess we're 80% done when through all but deleting leftover objects and moving  								// new MoForms to LexemeForm slot.  								if ((i + 1)%interval == 0)  								{  									state.PercentDone = i*80/itemsToChange.Count();  									state.Breath();  								}  								i++;  								int hvoLexemeForm = sda.get_ObjectProp(hvoLexEntry' m_flidParent);  								if (hvoLexemeForm == 0)  									continue;  								int hvoMorphType = sda.get_ObjectProp(hvoLexemeForm' m_flidAtomicProp);  								if (hvoMorphType == 0)  									continue;  								bool fAffix = MorphServices.IsAffixType(m_cache' hvoMorphType);  								var stemAlloFactory = m_cache.ServiceLocator.GetInstance<IMoStemAllomorphFactory>();  								var afxAlloFactory = m_cache.ServiceLocator.GetInstance<IMoAffixAllomorphFactory>();  								if (fAffix == fSelAffix)  								{  									// Not changing C# type of allomorph object' just set the morph type.  									if (hvoMorphType != hvoSelMorphType)  									{  										sda.SetObjProp(hvoLexemeForm' m_flidAtomicProp' hvoSelMorphType);  									}  								}  								else if (fAffix)  								{  									// Changing from affix to stem' need a new allomorph object.  									var entry = m_cache.ServiceLocator.GetInstance<ILexEntryRepository>().GetObject(hvoLexEntry);  									var affix = m_cache.ServiceLocator.GetInstance<IMoAffixAllomorphRepository>().GetObject(hvoLexemeForm);  									var stem = stemAlloFactory.Create();  									rgmsaOld.Clear();  									foreach (var msa in entry.MorphoSyntaxAnalysesOC)  									{  										if (!(msa is IMoStemMsa))  											rgmsaOld.Add(msa);  									}  									entry.ReplaceObsoleteMsas(rgmsaOld);  									SwapFormValues(entry' affix' stem' hvoSelMorphType' idsToDel);  									foreach (var env in affix.PhoneEnvRC)  										stem.PhoneEnvRC.Add(env);  									newForms[stem] = entry;  								}  								else  								{  									// Changing from stem to affix' need a new allomorph object.  									var entry = m_cache.ServiceLocator.GetInstance<ILexEntryRepository>().GetObject(hvoLexEntry);  									var stem = m_cache.ServiceLocator.GetInstance<IMoStemAllomorphRepository>().GetObject(hvoLexemeForm);  									var affix = afxAlloFactory.Create();  									rgmsaOld.Clear();  									foreach (var msa in entry.MorphoSyntaxAnalysesOC)  									{  										if (msa is IMoStemMsa)  											rgmsaOld.Add(msa);  									}  									entry.ReplaceObsoleteMsas(rgmsaOld);  									SwapFormValues(entry' stem' affix' hvoSelMorphType' idsToDel);  									foreach (var env in stem.PhoneEnvRC)  										affix.PhoneEnvRC.Add(env);  									newForms[affix] = entry;  								}  							}  							if (fAnyFundamentalChanges)  							{  								foreach (int hvo in idsToDel)  								{  									sda.DeleteObj(hvo);  								}  								state.PercentDone = 90;  								state.Breath();  								foreach (var pair in newForms)  								{  									pair.Value.LexemeFormOA = pair.Key;  								}  								state.PercentDone = 100;  								state.Breath();  							}  						}  						finally  						{  							if (fAnyFundamentalChanges)  								m_containingViewer.SetListModificationInProgress(false);  						}  					});
Magic Number,SIL.FieldWorks.Common.Controls,MorphTypeChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,DoIt,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do(XMLViewsStrings.ksUndoBulkEdit' XMLViewsStrings.ksRedoBulkEdit' m_cache.ActionHandlerAccessor'  				() =>  					{  						ISilDataAccess sda = m_cache.DomainDataByFlid;    						HvoTssComboItem item = m_combo.SelectedItem as HvoTssComboItem;  						if (item == null)  							return;  						int hvoSelMorphType = item.Hvo;  						bool fSelAffix = false;  						if (hvoSelMorphType != 0)  							fSelAffix = MorphServices.IsAffixType(m_cache' hvoSelMorphType);  						bool fAnyFundamentalChanges = false;  						// Preliminary check and warning if changing fundamental type.  						foreach (int hvoLexEntry in itemsToChange)  						{  							int hvoLexemeForm = sda.get_ObjectProp(hvoLexEntry' m_flidParent);  							if (hvoLexemeForm == 0)  								continue;  							int hvoMorphType = sda.get_ObjectProp(hvoLexemeForm' m_flidAtomicProp);  							if (hvoMorphType == 0)  								continue;  							bool fAffix = MorphServices.IsAffixType(m_cache' hvoMorphType);  							if (fAffix != fSelAffix && hvoSelMorphType != 0)  							{  								string msg = String.Format(XMLViewsStrings.ksMorphTypeChangesSlow'  									(fAffix ? XMLViewsStrings.ksAffixes : XMLViewsStrings.ksStems)'  									(fAffix ? XMLViewsStrings.ksStems : XMLViewsStrings.ksAffixes));  								if (MessageBox.Show(this.m_combo' msg' XMLViewsStrings.ksChangingMorphType'  									MessageBoxButtons.OKCancel'  									MessageBoxIcon.Warning) != DialogResult.OK)  								{  									return;  								}  								fAnyFundamentalChanges = true;  								break; // user OKd it' no need to check further.  							}  						}  						if (fAnyFundamentalChanges)  						{  							m_containingViewer.SetListModificationInProgress(true);  						}  						try  						{  							// Report progress 50 times or every 100 items' whichever is more  							// (but no more than once per item!)  							var idsToDel = new HashSet<int>();  							var newForms = new Dictionary<IMoForm' ILexEntry>();  							int interval = Math.Min(80' Math.Max(itemsToChange.Count()/50' 1));  							int i = 0;  							var rgmsaOld = new List<IMoMorphSynAnalysis>();  							foreach (int hvoLexEntry in itemsToChange)  							{  								// Guess we're 80% done when through all but deleting leftover objects and moving  								// new MoForms to LexemeForm slot.  								if ((i + 1)%interval == 0)  								{  									state.PercentDone = i*80/itemsToChange.Count();  									state.Breath();  								}  								i++;  								int hvoLexemeForm = sda.get_ObjectProp(hvoLexEntry' m_flidParent);  								if (hvoLexemeForm == 0)  									continue;  								int hvoMorphType = sda.get_ObjectProp(hvoLexemeForm' m_flidAtomicProp);  								if (hvoMorphType == 0)  									continue;  								bool fAffix = MorphServices.IsAffixType(m_cache' hvoMorphType);  								var stemAlloFactory = m_cache.ServiceLocator.GetInstance<IMoStemAllomorphFactory>();  								var afxAlloFactory = m_cache.ServiceLocator.GetInstance<IMoAffixAllomorphFactory>();  								if (fAffix == fSelAffix)  								{  									// Not changing C# type of allomorph object' just set the morph type.  									if (hvoMorphType != hvoSelMorphType)  									{  										sda.SetObjProp(hvoLexemeForm' m_flidAtomicProp' hvoSelMorphType);  									}  								}  								else if (fAffix)  								{  									// Changing from affix to stem' need a new allomorph object.  									var entry = m_cache.ServiceLocator.GetInstance<ILexEntryRepository>().GetObject(hvoLexEntry);  									var affix = m_cache.ServiceLocator.GetInstance<IMoAffixAllomorphRepository>().GetObject(hvoLexemeForm);  									var stem = stemAlloFactory.Create();  									rgmsaOld.Clear();  									foreach (var msa in entry.MorphoSyntaxAnalysesOC)  									{  										if (!(msa is IMoStemMsa))  											rgmsaOld.Add(msa);  									}  									entry.ReplaceObsoleteMsas(rgmsaOld);  									SwapFormValues(entry' affix' stem' hvoSelMorphType' idsToDel);  									foreach (var env in affix.PhoneEnvRC)  										stem.PhoneEnvRC.Add(env);  									newForms[stem] = entry;  								}  								else  								{  									// Changing from stem to affix' need a new allomorph object.  									var entry = m_cache.ServiceLocator.GetInstance<ILexEntryRepository>().GetObject(hvoLexEntry);  									var stem = m_cache.ServiceLocator.GetInstance<IMoStemAllomorphRepository>().GetObject(hvoLexemeForm);  									var affix = afxAlloFactory.Create();  									rgmsaOld.Clear();  									foreach (var msa in entry.MorphoSyntaxAnalysesOC)  									{  										if (msa is IMoStemMsa)  											rgmsaOld.Add(msa);  									}  									entry.ReplaceObsoleteMsas(rgmsaOld);  									SwapFormValues(entry' stem' affix' hvoSelMorphType' idsToDel);  									foreach (var env in stem.PhoneEnvRC)  										affix.PhoneEnvRC.Add(env);  									newForms[affix] = entry;  								}  							}  							if (fAnyFundamentalChanges)  							{  								foreach (int hvo in idsToDel)  								{  									sda.DeleteObj(hvo);  								}  								state.PercentDone = 90;  								state.Breath();  								foreach (var pair in newForms)  								{  									pair.Value.LexemeFormOA = pair.Key;  								}  								state.PercentDone = 100;  								state.Breath();  							}  						}  						finally  						{  							if (fAnyFundamentalChanges)  								m_containingViewer.SetListModificationInProgress(false);  						}  					});
Magic Number,SIL.FieldWorks.Common.Controls,MorphTypeChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,MorphTypeChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.Common.Controls,MorphTypeChooserBEditControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,FakeDoit,The following statement contains a magic number: foreach (int hvoLexEntry in itemsToChange)  			{  				if ((i + 1) % interval == 0)  				{  					state.PercentDone = i * 100 / itemsToChange.Count();  					state.Breath();  				}  				int hvoLexemeForm = sda.get_ObjectProp(hvoLexEntry' m_flidParent);  				if (hvoLexemeForm == 0)  					continue;  				int hvoMorphType = sda.get_ObjectProp(hvoLexemeForm' m_flidAtomicProp);  				if (hvoMorphType == 0)  					continue;  				bool fAffix = MorphServices.IsAffixType(m_cache' hvoMorphType);  				// Per LT-5305' OK to switch types.  				//bool fEnable = fAffix == fSelAffix && hvoMorphType != hvoSelMorphType;  				bool fEnable = hvoMorphType != hvoSelMorphType;  				if (fEnable)  					m_sda.SetString(hvoLexEntry' tagFakeFlid' item.AsTss);  				m_sda.SetInt(hvoLexEntry' tagEnabled' (fEnable ? 1 : 0));  				i++;  			}
Magic Number,SIL.FieldWorks.Common.Controls,FieldReadWriter,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,Create,The following statement contains a magic number: if (parts.Length != 2 && parts.Length != 3)  				return null;
Magic Number,SIL.FieldWorks.Common.Controls,FieldReadWriter,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,Create,The following statement contains a magic number: if (parts.Length != 2 && parts.Length != 3)  				return null;
Magic Number,SIL.FieldWorks.Common.Controls,FieldReadWriter,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,Create,The following statement contains a magic number: if (parts.Length == 2)  			{  				FieldReadWriter frw;  				// parts are divided into class.propname  				if (DoItMethod.IsMultilingual(flid' mdc))  					frw = new OwnMlPropReadWriter(cache' flid' ws);  				else  					frw = new OwnStringPropReadWriter(cache' flid' GetWsFromMetaData(ws' flid' cache));  				frw.InitForGhostItems(cache' node);  				return frw;  			}
Magic Number,SIL.FieldWorks.Common.Controls,FieldReadWriter,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,Create,The following statement contains a magic number: int flid2 = mdc.GetFieldId2(clidDst' parts[2]' true);
Magic Number,SIL.FieldWorks.Common.Controls,OwnAtomicStringPropReadWriter,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,SetNewValue,The following statement contains a magic number: if (!fHadObject)  			{  				if (m_clid == 0)  					return;  				ownedAtomicObj = m_sda.MakeNewObject(m_clid' hvo' m_flidObj' -2);  			}
Magic Number,SIL.FieldWorks.Common.Controls,OwnAtomicMlPropReadWriter,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,SetNewValue,The following statement contains a magic number: if (!fHadObject)  			{  				if (m_clid == 0)  					return;  				ownedAtomicObj = m_sda.MakeNewObject(m_clid' hvo' m_flidObj' -2);  			}
Magic Number,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,MakeCurrentItem,The following statement contains a magic number: var cols = new string[2];
Magic Number,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,GetDuplicateColumns,The following statement contains a magic number: for (int i = 0; i < CurrentSpecs.Count; i++)  			{  				string label = GetColumnLabel(i);  				string wsParam = XmlViewsUtils.FindWsParam(CurrentSpecs[i]);    				// This tries to interpret the ws paramter into an int.  Sometimes the parameter cannot be interpreted without an object'  				// such as when the ws is a magic string that will change the actual ws depending on the contents of the object.  				// In these cases' we give -50 as a known constant to check for and will just compare the string version of the  				// ws paramter.  This can can possibly throw an exception' so we'll enclose it in a try block.  				int ws = -50;  				int wsMagic = 0;  				try  				{  					if (!XmlViewsUtils.GetWsRequiresObject(wsParam))  						ws = WritingSystemServices.InterpretWsLabel(m_cache' wsParam' null' 0' 0' null' out wsMagic);  				}  				catch { }    				for (int j = 0; j < CurrentSpecs.Count; j++)  				{  					// No need to check against our own node  					if (j == i)  						continue;    					bool sameSpec = false;    					string otherLabel = GetColumnLabel(j);  					if (label == otherLabel)  					{  						string otherWsParam = XmlViewsUtils.FindWsParam(CurrentSpecs[j] as XmlNode);    						// If the ws is not -50' then we know to compare against integer ws codes' not string labels  						if (ws != -50)  						{  							int wsOtherMagic = 0;  							int wsOther = WritingSystemServices.InterpretWsLabel(m_cache' otherWsParam' null' 0' 0' null' out wsOtherMagic);  							if (ws == wsOther && wsMagic == wsOtherMagic)  								sameSpec = true;  						}  						else  						{  							if (wsParam == otherWsParam)  								sameSpec = true;  						}    						if (sameSpec) // Found a duplicate column.  						{  							if (!duplicateColumnLabels.Contains(label)) // Don't add the same label twice!  							{  								duplicateColumnLabels.Add(label);  							}  						}  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,GetDuplicateColumns,The following statement contains a magic number: for (int i = 0; i < CurrentSpecs.Count; i++)  			{  				string label = GetColumnLabel(i);  				string wsParam = XmlViewsUtils.FindWsParam(CurrentSpecs[i]);    				// This tries to interpret the ws paramter into an int.  Sometimes the parameter cannot be interpreted without an object'  				// such as when the ws is a magic string that will change the actual ws depending on the contents of the object.  				// In these cases' we give -50 as a known constant to check for and will just compare the string version of the  				// ws paramter.  This can can possibly throw an exception' so we'll enclose it in a try block.  				int ws = -50;  				int wsMagic = 0;  				try  				{  					if (!XmlViewsUtils.GetWsRequiresObject(wsParam))  						ws = WritingSystemServices.InterpretWsLabel(m_cache' wsParam' null' 0' 0' null' out wsMagic);  				}  				catch { }    				for (int j = 0; j < CurrentSpecs.Count; j++)  				{  					// No need to check against our own node  					if (j == i)  						continue;    					bool sameSpec = false;    					string otherLabel = GetColumnLabel(j);  					if (label == otherLabel)  					{  						string otherWsParam = XmlViewsUtils.FindWsParam(CurrentSpecs[j] as XmlNode);    						// If the ws is not -50' then we know to compare against integer ws codes' not string labels  						if (ws != -50)  						{  							int wsOtherMagic = 0;  							int wsOther = WritingSystemServices.InterpretWsLabel(m_cache' otherWsParam' null' 0' 0' null' out wsOtherMagic);  							if (ws == wsOther && wsMagic == wsOtherMagic)  								sameSpec = true;  						}  						else  						{  							if (wsParam == otherWsParam)  								sameSpec = true;  						}    						if (sameSpec) // Found a duplicate column.  						{  							if (!duplicateColumnLabels.Contains(label)) // Don't add the same label twice!  							{  								duplicateColumnLabels.Add(label);  							}  						}  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,AddTimeProp,The following statement contains a magic number: m_sTimeField = GetFieldXmlElementName(sField' tag/1000);
Magic Number,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,WriteTsString,The following statement contains a magic number: using (var reader = new StringReader(xml))  			{  				string line;  				while ((line = reader.ReadLine()) != null)  				{  					m_writer.Write(new string(' '' tabs * 4));  					m_writer.WriteLine(line);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,GetFirstLetterLength,The following statement contains a magic number: if (char.IsSurrogatePair(sEntry' 0))  				return 2;
Magic Number,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,WriteFieldStartTag,The following statement contains a magic number: try  			{  				IFwMetaDataCacheManaged mdc = (IFwMetaDataCacheManaged)m_sda.MetaDataCache;  				CellarPropertyType cpt = (CellarPropertyType)mdc.GetFieldType(flid);  				string sField = mdc.GetFieldName((int)flid);  				switch (cpt)  				{  					case CellarPropertyType.ReferenceAtomic:  						// Don't treat the Self property as starting a link (or a property).  						// View it as just a continuation of the current state.  (See FWR-1673.)  						if (sField != "Self" || !mdc.get_IsVirtual(flid))  							m_cc = CurrentContext.insideLink;  						break;  					case CellarPropertyType.ReferenceCollection:  					case CellarPropertyType.ReferenceSequence:  						m_cc = CurrentContext.insideLink;  						break;  					default:  						m_cc = CurrentContext.insideProperty;  						break;  				}  				sXml = GetFieldXmlElementName(sField' flid/1000);  				if (sXml == "_")  				{  					sXml = String.Empty;  				}  				else  				{  					if (sXml == "_" + sField && ccOld == CurrentContext.insideLink && m_cc == CurrentContext.insideProperty)  					{  						AddMissingObjectLink();  						sXml = GetFieldXmlElementName(sField' flid / 1000);  					}  					IndentLine();  					string sUserLabel = null;  					if (mdc.IsCustom(flid))  					{  						// REVIEW: NOT SURE userlabel attribute is useful (or needed) in the  						// new system since the field name serves as the label.  On the other  						// hand' the field name might have spaces in it' which is a no-no for  						// XML element tags.  						if (!m_dictCustomUserLabels.TryGetValue(flid' out sUserLabel))  						{  							sUserLabel = m_sda.MetaDataCache.GetFieldLabel((int)flid);  							m_dictCustomUserLabels.Add(flid' sUserLabel);  						}  						sXml = sXml.Replace(' '' '.');  					}  					if (String.IsNullOrEmpty(sUserLabel))  						m_writer.WriteLine("<{0}>"' sXml);  					else  						m_writer.WriteLine("<{0} userlabel=\"{1}\">"' sXml' sUserLabel);  				}  			}  			catch  			{  				sXml = String.Empty;  			}
Magic Number,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,WriteFieldStartTag,The following statement contains a magic number: try  			{  				IFwMetaDataCacheManaged mdc = (IFwMetaDataCacheManaged)m_sda.MetaDataCache;  				CellarPropertyType cpt = (CellarPropertyType)mdc.GetFieldType(flid);  				string sField = mdc.GetFieldName((int)flid);  				switch (cpt)  				{  					case CellarPropertyType.ReferenceAtomic:  						// Don't treat the Self property as starting a link (or a property).  						// View it as just a continuation of the current state.  (See FWR-1673.)  						if (sField != "Self" || !mdc.get_IsVirtual(flid))  							m_cc = CurrentContext.insideLink;  						break;  					case CellarPropertyType.ReferenceCollection:  					case CellarPropertyType.ReferenceSequence:  						m_cc = CurrentContext.insideLink;  						break;  					default:  						m_cc = CurrentContext.insideProperty;  						break;  				}  				sXml = GetFieldXmlElementName(sField' flid/1000);  				if (sXml == "_")  				{  					sXml = String.Empty;  				}  				else  				{  					if (sXml == "_" + sField && ccOld == CurrentContext.insideLink && m_cc == CurrentContext.insideProperty)  					{  						AddMissingObjectLink();  						sXml = GetFieldXmlElementName(sField' flid / 1000);  					}  					IndentLine();  					string sUserLabel = null;  					if (mdc.IsCustom(flid))  					{  						// REVIEW: NOT SURE userlabel attribute is useful (or needed) in the  						// new system since the field name serves as the label.  On the other  						// hand' the field name might have spaces in it' which is a no-no for  						// XML element tags.  						if (!m_dictCustomUserLabels.TryGetValue(flid' out sUserLabel))  						{  							sUserLabel = m_sda.MetaDataCache.GetFieldLabel((int)flid);  							m_dictCustomUserLabels.Add(flid' sUserLabel);  						}  						sXml = sXml.Replace(' '' '.');  					}  					if (String.IsNullOrEmpty(sUserLabel))  						m_writer.WriteLine("<{0}>"' sXml);  					else  						m_writer.WriteLine("<{0} userlabel=\"{1}\">"' sXml' sUserLabel);  				}  			}  			catch  			{  				sXml = String.Empty;  			}
Magic Number,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,GetFieldXmlElementName,The following statement contains a magic number: if (clid > 0 && clid < 10000)  				sClass = m_sda.MetaDataCache.GetClassName(clid);
Magic Number,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,MakeStringValidXmlElement,The following statement contains a magic number: for (; ;)  			{  				var match = pattern.Match(result);  				if (!match.Success)  					return result; // We can't find an illegal character' string is good.  				result = match.Groups[1].Value + MakeValueForXmlElement(match.Groups[2].Value[0]) + match.Groups[3].Value;  			}
Magic Number,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,MakeStringValidXmlElement,The following statement contains a magic number: for (; ;)  			{  				var match = pattern.Match(result);  				if (!match.Success)  					return result; // We can't find an illegal character' string is good.  				result = match.Groups[1].Value + MakeValueForXmlElement(match.Groups[2].Value[0]) + match.Groups[3].Value;  			}
Magic Number,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,OutputItemNumber,The following statement contains a magic number: string after = ich < tag.Length - 1 ? tag.Substring(ich + 2) : "";
Magic Number,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,BeginCssClassIfNeeded,The following statement contains a magic number: if (!String.IsNullOrEmpty(cssClass))  			{  				if (cssClass.StartsWith("$fwstyle="))  				{  					m_sActiveParaStyle = cssClass.Substring(9);  				}  				else  				{  					var flowType = GetFlowType(frag);  					if (flowType == "div" || flowType == "para")  						m_writer.WriteLine("<div class=\"{0}\">"' m_xhtml.GetValidCssClassName(cssClass));  					else if (flowType != "divInPara")  						m_writer.WriteLine("<span class=\"{0}\">"' m_xhtml.GetValidCssClassName(cssClass));  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView,The following statement contains a magic number: m_imgList.ImageSize = new Size(kHalfArrowSize * 2' kHalfArrowSize * 2);
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView,The following statement contains a magic number: m_imgList.ImageSize = new Size(kHalfArrowSize * 2' kHalfArrowSize * 2);
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,WndProc,The following statement contains a magic number: switch (m.Msg)  			{  				case WM_CONTEXTMENU:  					Point pointClicked = PointToClient(MousePosition);  					int index = GetColumnIndexFromMousePosition(pointClicked);  					if (index >= 0)  					{  						OnColumnRightClick(index' pointClicked);  					}  					break;  				case WM_NOTIFY:  					var nm = (NMHDR)m.GetLParam(typeof(NMHDR));    					// Notification names: standard' ANSI (A)' and Unicode (W)  					const int HDN_FIRST = 0 - 300;  					const int HDN_DIVIDERDBLCLICKA = HDN_FIRST - 5;  					const int HDN_DIVIDERDBLCLICKW = HDN_FIRST - 25;    					// Handle notifications for header column divider  					if (nm.code == HDN_DIVIDERDBLCLICKA || nm.code == HDN_DIVIDERDBLCLICKW)  					{  						// nmheader.iItem is in the original column order' but the resizes are done in display order.  						var nmheader = (NMHEADER)m.GetLParam(typeof(NMHEADER));  						int inDisplayOrder = m_orderForColumnsDisplay[nmheader.iItem];  						m_bv.AdjustColumnWidthToMatchContents(inDisplayOrder);  					}  					// Handle all other notifications  					else  					{  						base.WndProc(ref m);  					}  					break;  				default:  					base.WndProc(ref m);  					break;  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,WndProc,The following statement contains a magic number: switch (m.Msg)  			{  				case WM_CONTEXTMENU:  					Point pointClicked = PointToClient(MousePosition);  					int index = GetColumnIndexFromMousePosition(pointClicked);  					if (index >= 0)  					{  						OnColumnRightClick(index' pointClicked);  					}  					break;  				case WM_NOTIFY:  					var nm = (NMHDR)m.GetLParam(typeof(NMHDR));    					// Notification names: standard' ANSI (A)' and Unicode (W)  					const int HDN_FIRST = 0 - 300;  					const int HDN_DIVIDERDBLCLICKA = HDN_FIRST - 5;  					const int HDN_DIVIDERDBLCLICKW = HDN_FIRST - 25;    					// Handle notifications for header column divider  					if (nm.code == HDN_DIVIDERDBLCLICKA || nm.code == HDN_DIVIDERDBLCLICKW)  					{  						// nmheader.iItem is in the original column order' but the resizes are done in display order.  						var nmheader = (NMHEADER)m.GetLParam(typeof(NMHEADER));  						int inDisplayOrder = m_orderForColumnsDisplay[nmheader.iItem];  						m_bv.AdjustColumnWidthToMatchContents(inDisplayOrder);  					}  					// Handle all other notifications  					else  					{  						base.WndProc(ref m);  					}  					break;  				default:  					base.WndProc(ref m);  					break;  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,WndProc,The following statement contains a magic number: switch (m.Msg)  			{  				case WM_CONTEXTMENU:  					Point pointClicked = PointToClient(MousePosition);  					int index = GetColumnIndexFromMousePosition(pointClicked);  					if (index >= 0)  					{  						OnColumnRightClick(index' pointClicked);  					}  					break;  				case WM_NOTIFY:  					var nm = (NMHDR)m.GetLParam(typeof(NMHDR));    					// Notification names: standard' ANSI (A)' and Unicode (W)  					const int HDN_FIRST = 0 - 300;  					const int HDN_DIVIDERDBLCLICKA = HDN_FIRST - 5;  					const int HDN_DIVIDERDBLCLICKW = HDN_FIRST - 25;    					// Handle notifications for header column divider  					if (nm.code == HDN_DIVIDERDBLCLICKA || nm.code == HDN_DIVIDERDBLCLICKW)  					{  						// nmheader.iItem is in the original column order' but the resizes are done in display order.  						var nmheader = (NMHEADER)m.GetLParam(typeof(NMHEADER));  						int inDisplayOrder = m_orderForColumnsDisplay[nmheader.iItem];  						m_bv.AdjustColumnWidthToMatchContents(inDisplayOrder);  					}  					// Handle all other notifications  					else  					{  						base.WndProc(ref m);  					}  					break;  				default:  					base.WndProc(ref m);  					break;  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,m_timer_Tick,The following statement contains a magic number: if (m_cTicks == 10 && m_lastTooltipText != m_tooltipText)  			{  				m_lastTooltipText = m_tooltipText;  				if (m_tooltip == null)  				{  					m_tooltip = new ToolTip();  					m_tooltip.InitialDelay = 10;  					m_tooltip.ReshowDelay = 10;  					m_tooltip.SetToolTip(this' m_tooltipText);  				}  				m_tooltip.Show(m_tooltipText' this' cursorLocation.X' cursorLocation.Y' 2000);  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,m_timer_Tick,The following statement contains a magic number: if (m_cTicks == 10 && m_lastTooltipText != m_tooltipText)  			{  				m_lastTooltipText = m_tooltipText;  				if (m_tooltip == null)  				{  					m_tooltip = new ToolTip();  					m_tooltip.InitialDelay = 10;  					m_tooltip.ReshowDelay = 10;  					m_tooltip.SetToolTip(this' m_tooltipText);  				}  				m_tooltip.Show(m_tooltipText' this' cursorLocation.X' cursorLocation.Y' 2000);  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,m_timer_Tick,The following statement contains a magic number: if (m_cTicks == 10 && m_lastTooltipText != m_tooltipText)  			{  				m_lastTooltipText = m_tooltipText;  				if (m_tooltip == null)  				{  					m_tooltip = new ToolTip();  					m_tooltip.InitialDelay = 10;  					m_tooltip.ReshowDelay = 10;  					m_tooltip.SetToolTip(this' m_tooltipText);  				}  				m_tooltip.Show(m_tooltipText' this' cursorLocation.X' cursorLocation.Y' 2000);  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,m_timer_Tick,The following statement contains a magic number: if (m_cTicks == 10 && m_lastTooltipText != m_tooltipText)  			{  				m_lastTooltipText = m_tooltipText;  				if (m_tooltip == null)  				{  					m_tooltip = new ToolTip();  					m_tooltip.InitialDelay = 10;  					m_tooltip.ReshowDelay = 10;  					m_tooltip.SetToolTip(this' m_tooltipText);  				}  				m_tooltip.Show(m_tooltipText' this' cursorLocation.X' cursorLocation.Y' 2000);  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The following statement contains a magic number: var paleBlue = Color.FromArgb(187' 235' 254);
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The following statement contains a magic number: var paleBlue = Color.FromArgb(187' 235' 254);
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The following statement contains a magic number: var paleBlue = Color.FromArgb(187' 235' 254);
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The following statement contains a magic number: var veryPaleBlue = Color.FromArgb(227' 247' 255);
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The following statement contains a magic number: var veryPaleBlue = Color.FromArgb(227' 247' 255);
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The following statement contains a magic number: var veryPaleBlue = Color.FromArgb(227' 247' 255);
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The following statement contains a magic number: drawRect.Height = Height - 4;
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The following statement contains a magic number: var topHeight = drawRect.Height / 2 - 1;
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The following statement contains a magic number: if ((e.State & ListViewItemStates.Selected) != 0)  			{  				using (var brush = new SolidBrush(paleBlue))  				{  					e.Graphics.FillRectangle(brush' new Rectangle(e.Bounds.Left' e.Bounds.Top' e.Bounds.Width' topHeight));  				}  				using (var brush = new SolidBrush(lightBlue))  				{  					e.Graphics.FillRectangle(brush' new Rectangle(e.Bounds.Left' e.Bounds.Top + topHeight' e.Bounds.Width' e.Bounds.Height - topHeight));  				}  			}  			else if (e.Bounds.Contains(PointToClient(Cursor.Position))) // seems to be no state that indicates mouse is in it...Hot should but doesn't.  			{  				m_hotRectangle = e.Bounds;  				if (m_timer == null)  				{  					m_timer = new Timer();  					m_timer.Interval = 50;  					m_timer.Tick += m_timer_Tick;  					m_timer.Start();  				}  				m_cTicks = 0;  				if (realSize.Width > drawRect.Width)  				{  					m_tooltipText = drawText;  				}  				else  				{  					m_tooltipText = null;  				}  				using (var brush = new SolidBrush(veryPaleBlue))  				{  					e.Graphics.FillRectangle(brush' new Rectangle(e.Bounds.Left' e.Bounds.Top' e.Bounds.Width' topHeight));  				}  				using (var brush = new SolidBrush(paleBlue))  				{  					e.Graphics.FillRectangle(brush' new Rectangle(e.Bounds.Left' e.Bounds.Top + topHeight' e.Bounds.Width' e.Bounds.Height - topHeight));  				}  			}  			else  			{  				e.DrawBackground(); // standard background  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The following statement contains a magic number: if (imageIndex >= 0)  			{  				var size = m_imgList.ImageSize;  				m_imgList.Draw(e.Graphics' e.Bounds.Right - 2 - size.Width' e.Bounds.Top + 2' imageIndex);  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,DhListView_DrawColumnHeader,The following statement contains a magic number: if (imageIndex >= 0)  			{  				var size = m_imgList.ImageSize;  				m_imgList.Draw(e.Graphics' e.Bounds.Right - 2 - size.Width' e.Bounds.Top + 2' imageIndex);  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: switch(size)  			{  				case ArrowSize.Large:  					offset = 0;  					break;  				case ArrowSize.Medium:  					offset = 2;  					break;  				case ArrowSize.Small:  					offset = 3;  					break;  				default:  					offset = 0;  					break;  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: switch(size)  			{  				case ArrowSize.Large:  					offset = 0;  					break;  				case ArrowSize.Medium:  					offset = 2;  					break;  				case ArrowSize.Small:  					offset = 3;  					break;  				default:  					offset = 0;  					break;  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: Bitmap bmp = new Bitmap(kHalfArrowSize * 2' kHalfArrowSize * 2);
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: Bitmap bmp = new Bitmap(kHalfArrowSize * 2' kHalfArrowSize * 2);
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(bmp))  			{  				Brush brush = new SolidBrush(Color.FromArgb(215'230'255));  				Pen pen = new Pen(Color.FromArgb(49'106'197));    				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2);    				Point[] points = null;  				if(type == ArrowType.Ascending)  				{  //					Point left = new Point(kHalfArrowSize' 0);  //					Point right = new Point(kHalfArrowSize' 0);  //					for (int i = 0; i < kHalfArrowSize; i++)  //					{  //						left.X -= 1;  //						right.X += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //					}  					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)'  						new Point(offset'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  				else if(type == ArrowType.Descending)  				{  					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(bmp))  			{  				Brush brush = new SolidBrush(Color.FromArgb(215'230'255));  				Pen pen = new Pen(Color.FromArgb(49'106'197));    				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2);    				Point[] points = null;  				if(type == ArrowType.Ascending)  				{  //					Point left = new Point(kHalfArrowSize' 0);  //					Point right = new Point(kHalfArrowSize' 0);  //					for (int i = 0; i < kHalfArrowSize; i++)  //					{  //						left.X -= 1;  //						right.X += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //					}  					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)'  						new Point(offset'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  				else if(type == ArrowType.Descending)  				{  					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(bmp))  			{  				Brush brush = new SolidBrush(Color.FromArgb(215'230'255));  				Pen pen = new Pen(Color.FromArgb(49'106'197));    				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2);    				Point[] points = null;  				if(type == ArrowType.Ascending)  				{  //					Point left = new Point(kHalfArrowSize' 0);  //					Point right = new Point(kHalfArrowSize' 0);  //					for (int i = 0; i < kHalfArrowSize; i++)  //					{  //						left.X -= 1;  //						right.X += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //					}  					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)'  						new Point(offset'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  				else if(type == ArrowType.Descending)  				{  					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(bmp))  			{  				Brush brush = new SolidBrush(Color.FromArgb(215'230'255));  				Pen pen = new Pen(Color.FromArgb(49'106'197));    				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2);    				Point[] points = null;  				if(type == ArrowType.Ascending)  				{  //					Point left = new Point(kHalfArrowSize' 0);  //					Point right = new Point(kHalfArrowSize' 0);  //					for (int i = 0; i < kHalfArrowSize; i++)  //					{  //						left.X -= 1;  //						right.X += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //					}  					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)'  						new Point(offset'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  				else if(type == ArrowType.Descending)  				{  					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(bmp))  			{  				Brush brush = new SolidBrush(Color.FromArgb(215'230'255));  				Pen pen = new Pen(Color.FromArgb(49'106'197));    				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2);    				Point[] points = null;  				if(type == ArrowType.Ascending)  				{  //					Point left = new Point(kHalfArrowSize' 0);  //					Point right = new Point(kHalfArrowSize' 0);  //					for (int i = 0; i < kHalfArrowSize; i++)  //					{  //						left.X -= 1;  //						right.X += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //					}  					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)'  						new Point(offset'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  				else if(type == ArrowType.Descending)  				{  					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(bmp))  			{  				Brush brush = new SolidBrush(Color.FromArgb(215'230'255));  				Pen pen = new Pen(Color.FromArgb(49'106'197));    				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2);    				Point[] points = null;  				if(type == ArrowType.Ascending)  				{  //					Point left = new Point(kHalfArrowSize' 0);  //					Point right = new Point(kHalfArrowSize' 0);  //					for (int i = 0; i < kHalfArrowSize; i++)  //					{  //						left.X -= 1;  //						right.X += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //					}  					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)'  						new Point(offset'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  				else if(type == ArrowType.Descending)  				{  					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(bmp))  			{  				Brush brush = new SolidBrush(Color.FromArgb(215'230'255));  				Pen pen = new Pen(Color.FromArgb(49'106'197));    				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2);    				Point[] points = null;  				if(type == ArrowType.Ascending)  				{  //					Point left = new Point(kHalfArrowSize' 0);  //					Point right = new Point(kHalfArrowSize' 0);  //					for (int i = 0; i < kHalfArrowSize; i++)  //					{  //						left.X -= 1;  //						right.X += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //					}  					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)'  						new Point(offset'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  				else if(type == ArrowType.Descending)  				{  					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(bmp))  			{  				Brush brush = new SolidBrush(Color.FromArgb(215'230'255));  				Pen pen = new Pen(Color.FromArgb(49'106'197));    				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2);    				Point[] points = null;  				if(type == ArrowType.Ascending)  				{  //					Point left = new Point(kHalfArrowSize' 0);  //					Point right = new Point(kHalfArrowSize' 0);  //					for (int i = 0; i < kHalfArrowSize; i++)  //					{  //						left.X -= 1;  //						right.X += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //					}  					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)'  						new Point(offset'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  				else if(type == ArrowType.Descending)  				{  					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(bmp))  			{  				Brush brush = new SolidBrush(Color.FromArgb(215'230'255));  				Pen pen = new Pen(Color.FromArgb(49'106'197));    				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2);    				Point[] points = null;  				if(type == ArrowType.Ascending)  				{  //					Point left = new Point(kHalfArrowSize' 0);  //					Point right = new Point(kHalfArrowSize' 0);  //					for (int i = 0; i < kHalfArrowSize; i++)  //					{  //						left.X -= 1;  //						right.X += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //					}  					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)'  						new Point(offset'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  				else if(type == ArrowType.Descending)  				{  					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(bmp))  			{  				Brush brush = new SolidBrush(Color.FromArgb(215'230'255));  				Pen pen = new Pen(Color.FromArgb(49'106'197));    				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2);    				Point[] points = null;  				if(type == ArrowType.Ascending)  				{  //					Point left = new Point(kHalfArrowSize' 0);  //					Point right = new Point(kHalfArrowSize' 0);  //					for (int i = 0; i < kHalfArrowSize; i++)  //					{  //						left.X -= 1;  //						right.X += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //					}  					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)'  						new Point(offset'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  				else if(type == ArrowType.Descending)  				{  					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(bmp))  			{  				Brush brush = new SolidBrush(Color.FromArgb(215'230'255));  				Pen pen = new Pen(Color.FromArgb(49'106'197));    				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2);    				Point[] points = null;  				if(type == ArrowType.Ascending)  				{  //					Point left = new Point(kHalfArrowSize' 0);  //					Point right = new Point(kHalfArrowSize' 0);  //					for (int i = 0; i < kHalfArrowSize; i++)  //					{  //						left.X -= 1;  //						right.X += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //					}  					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)'  						new Point(offset'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  				else if(type == ArrowType.Descending)  				{  					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(bmp))  			{  				Brush brush = new SolidBrush(Color.FromArgb(215'230'255));  				Pen pen = new Pen(Color.FromArgb(49'106'197));    				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2);    				Point[] points = null;  				if(type == ArrowType.Ascending)  				{  //					Point left = new Point(kHalfArrowSize' 0);  //					Point right = new Point(kHalfArrowSize' 0);  //					for (int i = 0; i < kHalfArrowSize; i++)  //					{  //						left.X -= 1;  //						right.X += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //					}  					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)'  						new Point(offset'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  				else if(type == ArrowType.Descending)  				{  					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,GetArrowBitmap,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(bmp))  			{  				Brush brush = new SolidBrush(Color.FromArgb(215'230'255));  				Pen pen = new Pen(Color.FromArgb(49'106'197));    				gfx.FillRectangle(new SolidBrush(Color.FromKnownColor(KnownColor.ControlLight))' 0' 0' kHalfArrowSize * 2' kHalfArrowSize * 2);    				Point[] points = null;  				if(type == ArrowType.Ascending)  				{  //					Point left = new Point(kHalfArrowSize' 0);  //					Point right = new Point(kHalfArrowSize' 0);  //					for (int i = 0; i < kHalfArrowSize; i++)  //					{  //						left.X -= 1;  //						right.X += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //						gfx.DrawLine(pen' left' right);  //						left.Y += 1;  //						right.Y += 1;  //					}  					points = new Point[] { new Point(kHalfArrowSize' offset)' new Point(kHalfArrowSize * 2 - 1 - offset' kHalfArrowSize * 2 - 1 - offset)'  						new Point(offset'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  				else if(type == ArrowType.Descending)  				{  					points = new Point[] { new Point(offset'offset)' new Point(kHalfArrowSize * 2 - 1 - offset' offset)' new Point(kHalfArrowSize'kHalfArrowSize * 2 - 1 - offset)};  					gfx.FillPolygon(brush' points);  					gfx.DrawPolygon(pen' points);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,DhListView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\DhListView.cs,ShowHeaderIcon,The following statement contains a magic number: if (sortOrder == SortOrder.None)  			{  				m_columnIconIndexes.Remove(columnIndex);  			}  			else  			{  				// There are 3 potential sizes: Large' Medium' and Small with 2 sort orders' Ascending and Descending  				// The images are stored in that order' so the following works  				m_columnIconIndexes[columnIndex] = (int)size + (3 * ((int)sortOrder - 1));  			}
Magic Number,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,FilterBar,The following statement contains a magic number: using (Font tempFont = new Font(MiscUtils.StandardSerif' (float)10.0))  			{  				m_stdFontHeight = tempFont.Height;  			}
Magic Number,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,SetColWidths,The following statement contains a magic number: x += 2;
Magic Number,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,ExtractFromFlow,The following statement contains a magic number: if (viewSpec.Name == "para" || viewSpec.Name == "div")  			{  				if (viewSpec.ChildNodes.Count == 2 && viewSpec.FirstChild.Name == "properties")  					return viewSpec.ChildNodes[1];  				else if (viewSpec.ChildNodes.Count == 1)  					return viewSpec.FirstChild;  			}
Magic Number,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,MakeCombo,The following statement contains a magic number: switch (sortType)  			{  				case "integer":  					// For columns which are interger values we offer the user a couple preset filters  					// one is  "0"  and the other is "Greater than zero"  					combo.Items.Add(new FilterComboItem(MakeLabel(XMLViewsStrings.ksZero)'  						new ExactMatcher(MatchExactPattern(XMLViewsStrings.ksZero))' item));  					combo.Items.Add(new FilterComboItem(MakeLabel(XMLViewsStrings.ksGreaterThanZero)'  						new RangeIntMatcher(1' Int32.MaxValue)' item));  					combo.Items.Add(new FilterComboItem(MakeLabel(XMLViewsStrings.ksGreaterThanOne)'  						new RangeIntMatcher(2' Int32.MaxValue)' item));  					combo.Items.Add(new RestrictComboItem(MakeLabel(XMLViewsStrings.ksRestrict_)'  						m_bv.PropTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")'  						item'  						m_cache.ServiceLocator.WritingSystemManager.UserWs'  						combo));  					break;  				case "genDate":  				case "date":  					combo.Items.Add(new RestrictDateComboItem(MakeLabel(XMLViewsStrings.ksRestrict_)'  						m_bv.PropTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")'  						item'  						m_cache.ServiceLocator.WritingSystemManager.UserWs'  						sortType == "genDate"'  						combo));  					break;  				case "YesNo":  					// For columns which have only the values of "yes" or "no" we offer the user these preset  					// filters to choose.  					combo.Items.Add(new FilterComboItem(MakeLabel(XMLViewsStrings.ksYes)'  						new ExactMatcher(MatchExactPattern(XMLViewsStrings.ksYes))' item));  					combo.Items.Add(new FilterComboItem(MakeLabel(XMLViewsStrings.ksNo)'  						new ExactMatcher(MatchExactPattern(XMLViewsStrings.ksNo))' item));  					break;  				case "stringList":  					string[] labels = m_bv.BrowseView.GetStringList(item.Spec);  					if (labels == null)  						break;  					foreach (string aLabel in labels)  					{  						combo.Items.Add(new FilterComboItem(MakeLabel(aLabel)'  							new ExactMatcher(MatchExactPattern(aLabel))' item));  					}  					if (labels.Length > 2)  					{  						foreach (string aLabel in labels)  						{  							combo.Items.Add(new FilterComboItem(MakeLabel(string.Format(XMLViewsStrings.ksExcludeX' aLabel))'  								new InvertMatcher(new ExactMatcher(MatchExactPattern(aLabel)))' item));  						}  					}  					break;  				default:  					// If it isn't any of those' include the bad spelling item' provided we have a dictionary  					// for the relevant language' and provided it is NOT a list (for which we will make a chooser).  					if (!String.IsNullOrEmpty(beSpec))  						break;  					AddSpellingErrorsIfAppropriate(item' combo' ws);  					break;  			}
Magic Number,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,MakeCombo,The following statement contains a magic number: switch (sortType)  			{  				case "integer":  					// For columns which are interger values we offer the user a couple preset filters  					// one is  "0"  and the other is "Greater than zero"  					combo.Items.Add(new FilterComboItem(MakeLabel(XMLViewsStrings.ksZero)'  						new ExactMatcher(MatchExactPattern(XMLViewsStrings.ksZero))' item));  					combo.Items.Add(new FilterComboItem(MakeLabel(XMLViewsStrings.ksGreaterThanZero)'  						new RangeIntMatcher(1' Int32.MaxValue)' item));  					combo.Items.Add(new FilterComboItem(MakeLabel(XMLViewsStrings.ksGreaterThanOne)'  						new RangeIntMatcher(2' Int32.MaxValue)' item));  					combo.Items.Add(new RestrictComboItem(MakeLabel(XMLViewsStrings.ksRestrict_)'  						m_bv.PropTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")'  						item'  						m_cache.ServiceLocator.WritingSystemManager.UserWs'  						combo));  					break;  				case "genDate":  				case "date":  					combo.Items.Add(new RestrictDateComboItem(MakeLabel(XMLViewsStrings.ksRestrict_)'  						m_bv.PropTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")'  						item'  						m_cache.ServiceLocator.WritingSystemManager.UserWs'  						sortType == "genDate"'  						combo));  					break;  				case "YesNo":  					// For columns which have only the values of "yes" or "no" we offer the user these preset  					// filters to choose.  					combo.Items.Add(new FilterComboItem(MakeLabel(XMLViewsStrings.ksYes)'  						new ExactMatcher(MatchExactPattern(XMLViewsStrings.ksYes))' item));  					combo.Items.Add(new FilterComboItem(MakeLabel(XMLViewsStrings.ksNo)'  						new ExactMatcher(MatchExactPattern(XMLViewsStrings.ksNo))' item));  					break;  				case "stringList":  					string[] labels = m_bv.BrowseView.GetStringList(item.Spec);  					if (labels == null)  						break;  					foreach (string aLabel in labels)  					{  						combo.Items.Add(new FilterComboItem(MakeLabel(aLabel)'  							new ExactMatcher(MatchExactPattern(aLabel))' item));  					}  					if (labels.Length > 2)  					{  						foreach (string aLabel in labels)  						{  							combo.Items.Add(new FilterComboItem(MakeLabel(string.Format(XMLViewsStrings.ksExcludeX' aLabel))'  								new InvertMatcher(new ExactMatcher(MatchExactPattern(aLabel)))' item));  						}  					}  					break;  				default:  					// If it isn't any of those' include the bad spelling item' provided we have a dictionary  					// for the relevant language' and provided it is NOT a list (for which we will make a chooser).  					if (!String.IsNullOrEmpty(beSpec))  						break;  					AddSpellingErrorsIfAppropriate(item' combo' ws);  					break;  			}
Magic Number,SIL.FieldWorks.Common.Controls,FilterSdaDecorator,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterSdaDecorator.cs,SetFilterFlids,The following statement contains a magic number: foreach (string field in input.Split(';'))  			{  				string[] parts = field.Trim().Split(':');  				if (parts.Length != 2)  				   throw new ArgumentException("Expected sequence of class.field:class.field;class.field:class.field but got " + input);  				int flidMain = Flid(parts[0]);  				int flidRel = Flid(parts[1]);  				m_filterFlids[flidMain] = new TestItemAtomicFlid(flidRel);  			}
Magic Number,SIL.FieldWorks.Common.Controls,FilterSdaDecorator,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterSdaDecorator.cs,Flid,The following statement contains a magic number: if (parts.Length != 2)  				throw new ArgumentException("Expected class.field but got " + field);
Magic Number,SIL.FieldWorks.Common.Controls,GhostParentHelper,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\GhostParentHelper.cs,GhostParentHelper,The following statement contains a magic number: switch ((CellarPropertyType)mdc.GetFieldType(flidOwning))  			{  				case CellarPropertyType.OwningAtomic:  					m_indexToCreate = -2;  					break;  				case CellarPropertyType.OwningCollection:  					m_indexToCreate = -1;  					break;  				case CellarPropertyType.OwningSequence:  					m_indexToCreate = 0;  					break;  				default:  					throw new InvalidOperationException("can only create objects in owning properties");  			}
Magic Number,SIL.FieldWorks.Common.Controls,GhostParentHelper,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\GhostParentHelper.cs,IsOwningPropVector,The following statement contains a magic number: return m_indexToCreate != -2;
Magic Number,SIL.FieldWorks.Common.Controls,LabelNode,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LabelNode.cs,GetVernacularFont,The following statement contains a magic number: if (stylesheet == null)  			{  				ILgWritingSystem wsEngine = wsf.get_EngineOrNull(wsVern);  				string fontName = wsEngine.DefaultFontName;  				return new Font(fontName' (float)10.0);  			}  			else  			{  				return FontHeightAdjuster.GetFontForNormalStyle(wsVern' stylesheet' wsf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,SimpleDateMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleDateMatchDlg.cs,UpdateCalendarOptions,The following statement contains a magic number: if (m_typeCombo.SelectedIndex == 4)  			{  				m_andLabel.Visible = true;  				m_endPicker.Visible = true;  				if (HandleGenDate)  					m_chkEndBC.Visible = true;  				//System.Globalization.CultureInfo.CurrentUICulture.DateTimeFormat.FullDateTimePattern  				// = dddd' MMMM dd' yyyy h:mm:ss tt  				string dateTimeFormat = "ddd' MMM dd' yyyy h:mm:ss tt";  				m_startPicker.Format = DateTimePickerFormat.Custom;  				m_startPicker.CustomFormat = dateTimeFormat;  				m_endPicker.Format = DateTimePickerFormat.Custom;  				m_endPicker.CustomFormat = dateTimeFormat;  			}  			else  			{  				m_andLabel.Visible = false;  				m_endPicker.Visible = false;  				m_chkEndBC.Visible = false;  				m_startPicker.Format = DateTimePickerFormat.Long;  			}
Magic Number,SIL.FieldWorks.Common.Controls,SimpleDateMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleDateMatchDlg.cs,SetDlgValues,The following statement contains a magic number: switch (matcher.MatchType)  			{  				case DateTimeMatcher.DateMatchType.On:  					m_typeCombo.SelectedIndex = 0;  					break;  				case DateTimeMatcher.DateMatchType.NotRange:  					m_typeCombo.SelectedIndex = 1;  					break;  				case DateTimeMatcher.DateMatchType.Before:  					m_typeCombo.SelectedIndex = 2;  					break;  				case DateTimeMatcher.DateMatchType.After:  					m_typeCombo.SelectedIndex = 3;  					break;  				case DateTimeMatcher.DateMatchType.Range:  					m_typeCombo.SelectedIndex = 4;  					break;  			}
Magic Number,SIL.FieldWorks.Common.Controls,SimpleDateMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleDateMatchDlg.cs,SetDlgValues,The following statement contains a magic number: switch (matcher.MatchType)  			{  				case DateTimeMatcher.DateMatchType.On:  					m_typeCombo.SelectedIndex = 0;  					break;  				case DateTimeMatcher.DateMatchType.NotRange:  					m_typeCombo.SelectedIndex = 1;  					break;  				case DateTimeMatcher.DateMatchType.Before:  					m_typeCombo.SelectedIndex = 2;  					break;  				case DateTimeMatcher.DateMatchType.After:  					m_typeCombo.SelectedIndex = 3;  					break;  				case DateTimeMatcher.DateMatchType.Range:  					m_typeCombo.SelectedIndex = 4;  					break;  			}
Magic Number,SIL.FieldWorks.Common.Controls,SimpleDateMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleDateMatchDlg.cs,SetDlgValues,The following statement contains a magic number: switch (matcher.MatchType)  			{  				case DateTimeMatcher.DateMatchType.On:  					m_typeCombo.SelectedIndex = 0;  					break;  				case DateTimeMatcher.DateMatchType.NotRange:  					m_typeCombo.SelectedIndex = 1;  					break;  				case DateTimeMatcher.DateMatchType.Before:  					m_typeCombo.SelectedIndex = 2;  					break;  				case DateTimeMatcher.DateMatchType.After:  					m_typeCombo.SelectedIndex = 3;  					break;  				case DateTimeMatcher.DateMatchType.Range:  					m_typeCombo.SelectedIndex = 4;  					break;  			}
Magic Number,SIL.FieldWorks.Common.Controls,SimpleDateMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleDateMatchDlg.cs,m_endPicker_ValueChanged,The following statement contains a magic number: if (m_typeCombo.SelectedIndex != 4)  				return;
Magic Number,SIL.FieldWorks.Common.Controls,SimpleDateMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleDateMatchDlg.cs,m_startPicker_ValueChanged,The following statement contains a magic number: if (m_typeCombo.SelectedIndex != 4)  			{  				// Only one showing' get the effect we want by making the other match  				SelectionEnd = SelectionStart;  			}  			else  			{  				// Both visible' keep in order  				if (SelectionEnd < SelectionStart)  					SelectionEnd = SelectionStart;  			}
Magic Number,SIL.FieldWorks.Common.Controls,PartOwnershipTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutCache.cs,GetSourceFieldName,The following statement contains a magic number: if (targetFieldId != 0)  			{  				var altSourceField = XmlUtils.GetOptionalAttributeValue(classNode' "altSourceField");  				if (altSourceField != null)  				{  					var targetFieldName = m_cache.MetaDataCacheAccessor.GetFieldName(targetFieldId);  					foreach (var option in altSourceField.Split(';'))  					{  						var parts = option.Split(':');  						if (parts.Length != 2)  							throw new ConfigurationException("altSourceField must contain Field:SourceField;Field:SourceField...");  						if (parts[0].Trim() == targetFieldName)  						{  							flidName = parts[1].Trim();  							break;  						}  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,LayoutFinder,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutFinder.cs,Preload,The following statement contains a magic number: if (splits.Length != 2)  				return;
Magic Number,SIL.FieldWorks.Common.Controls,SortMethodFinder,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutFinder.cs,CallSortMethod,The following statement contains a magic number: try  			{  				MethodInfo mi = typeCmo.GetMethod(m_sMethodName);  				if (mi == null)  					return null;    				object obj;  				if (mi.GetParameters().Length == 2)  				{  					// Enhance JohnT: possibly we should seek to evaluate this every time' in case it is a magic WS like  					// "best vernacular". But interpreting those requires a flid' and we don't have one; indeed' the  					// method may retrieve information from several. So we may as well just accept that the fancy ones  					// won't work.  					if (m_ws == 0 && WritingSystemName != null)  						m_ws = WritingSystemServices.InterpretWsLabel(m_cache' WritingSystemName' null' 0' 0' null);  					obj = mi.Invoke(cmo' new object[] { sortedFromEnd' m_ws });  				}  				else  				{  					obj = mi.Invoke(cmo' new object[] { sortedFromEnd });  				}  				if (obj is string)  					return new [] {(string) obj};  				// otherwise assume it already is a string array.  				return (string[]) obj;  			}  			catch (Exception)  			{  				return null;  			}
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,AddLink,The following statement contains a magic number: Debug.Assert(m_cLinksShown < 2);
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,AddLink,The following statement contains a magic number: if (m_cLinksShown >= 2)  				return;
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,AddLink,The following statement contains a magic number: if (m_cLinksShown == 1)  			{  				m_lblLink1.Text = sText;  				if (type != LinkType.kSimpleLink)  					m_picboxLink1.Image = m_imageList.Images[(int)type];  				m_obj1 = obj;  				m_link1Panel.Visible = true;  			}  			else if (m_cLinksShown == 2)  			{  				m_lblLink2.Text = sText;  				if (type != LinkType.kSimpleLink)  					m_picboxLink2.Image = m_imageList.Images[(int)type];  				m_obj2 = obj;  				m_link2Panel.Visible = true;  			}
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ShowFuncButtons,The following statement contains a magic number: m_AddButton.Width = ((m_link2Panel.Width - m_link2Panel.Padding.Horizontal) / 2) - m_AddButton.Margin.Horizontal - 1;
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ShowFuncButtons,The following statement contains a magic number: m_RemoveButton = new RadioButton { Text = XMLViewsStrings.ksRemoveExisting' Width = m_AddButton.Width' Height = 30 };
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ShowAnyAllNoneButtons,The following statement contains a magic number: m_AnyButton.Width = ((m_link2Panel.Width - m_link2Panel.Padding.Horizontal) / 2) - m_AnyButton.Margin.Horizontal - 1;
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitializeExtras,The following statement contains a magic number: if (node != null)  			{  				string sTextParam =  					XmlUtils.GetAttributeValue(node' "textparam"' "owner").ToLower();  				if (sTextParam != null)  				{  					// The default case ("owner") is handled by the caller setting TextParamHvo.  					if (sTextParam == "vernws")  					{  						CoreWritingSystemDefinition co = m_cache.ServiceLocator.WritingSystems.DefaultVernacularWritingSystem;  						m_sTextParam = co.DisplayLabel;  					}  				}  				string sFlid = XmlUtils.GetAttributeValue(node' "flidTextParam");  				if (sFlid != null)  				{  					try  					{  						int flidTextParam = Int32.Parse(sFlid' CultureInfo.InvariantCulture);  						if (flidTextParam != 0)  						{  							ISilDataAccess sda = m_cache.DomainDataByFlid;  							m_hvoTextParam = sda.get_ObjectProp(m_hvoObject' flidTextParam);  						}  					}  					catch  					{  						// Ignore any badness here.  					}  				}    				string sTitle = XmlUtils.GetAttributeValue(node' "title");  				if (sTitle != null)  					Title = sTitle;  				string sText = XmlUtils.GetAttributeValue(node' "text");  				if (sText != null)  					InstructionalText = sText;  				XmlNodeList linkNodes = node.SelectNodes("chooserLink");  				Debug.Assert(linkNodes != null && linkNodes.Count <= 2);  				for (int i = linkNodes.Count - 1; i >= 0 ; --i)  				{  					string sType = XmlUtils.GetAttributeValue(linkNodes[i]' "type"' "goto").ToLower();  					string sLabel = XmlUtils.GetLocalizedAttributeValue(linkNodes[i]' "label"' null);  					switch (sType)  					{  					case "goto":  					{  						string sTool = XmlUtils.GetAttributeValue(linkNodes[i]' "tool");  						if (sLabel != null && sTool != null)  						{  							AddLink(sLabel' LinkType.kGotoLink' new FwLinkArgs(sTool' m_guidLink));  						}  						break;  					}  					case "dialog":  					{  						string sDialog = XmlUtils.GetAttributeValue(linkNodes[i]' "dialog");  						// TODO: make use of sDialog somehow to create a ChooserCommand object.  						// TODO: maybe even better' use a new SubDialog object that allows us  						// to call the specified dialog' then return to this dialog' adding  						// a newly created object to the list of chosen items (or making the  						// newly created object the chosen item).  						if (sLabel != null && sDialog != null)  							AddLink(sLabel' LinkType.kDialogLink' null);  						break;  					}  					case "simple":  					{  						string sTool = XmlUtils.GetAttributeValue(linkNodes[i]' "tool");  						if (sLabel != null && sTool != null)  						{  							AddSimpleLink(sLabel' sTool' linkNodes[i]);  						}  						break;  					}  					}  				}  				string sGuiControl = XmlUtils.GetOptionalAttributeValue(node' "guicontrol");  				// Replace the tree view control with a browse view control if it's both desirable  				// and feasible.  				if (m_fFlatList && !string.IsNullOrEmpty(sGuiControl))  					ReplaceTreeView(sGuiControl);    				bool useHelpBrowser = XmlUtils.GetOptionalBooleanAttributeValue(node' "helpBrowser"' false);  				if (useHelpBrowser)  					InitHelpBrowser();  			}
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,GenerateChooserInfoForCustomNode,The following statement contains a magic number: if (list.Owner != null)  			{  				listField = m_cache.MetaDataCacheAccessor.GetFieldName(listFlid);  				listOwnerClass = m_cache.MetaDataCacheAccessor.GetClassName(listFlid / 1000);  			}
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitHelpBrowser,The following statement contains a magic number: m_backButton = new ToolStripButton(null' m_imageList.Images[2]' m_backButton_Click) {Enabled = false};
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitHelpBrowser,The following statement contains a magic number: m_forwardButton = new ToolStripButton(null' m_imageList.Images[3]' m_forwardButton_Click) {Enabled = false};
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitHelpBrowser,The following statement contains a magic number: m_printButton = new ToolStripButton(null' m_imageList.Images[4]' m_printButton_Click);
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,GetHelpTopic,The following statement contains a magic number: startIndex += 3;
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,ExpandHelpBrowser,The following statement contains a magic number: Width = Width + 400;
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitializeComponent,The following statement contains a magic number: this.m_imageList.Images.SetKeyName(2' "HistoryBack.bmp");
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitializeComponent,The following statement contains a magic number: this.m_imageList.Images.SetKeyName(3' "HistoryForward.bmp");
Magic Number,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitializeComponent,The following statement contains a magic number: this.m_imageList.Images.SetKeyName(4' "FWPrint.bmp");
Magic Number,SIL.FieldWorks.Common.Controls,SimpleMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleMatchDlg.cs,SimpleMatchDlg,The following statement contains a magic number: this.m_textBox.Location = new System.Drawing.Point(8' 24);
Magic Number,SIL.FieldWorks.Common.Controls,SimpleMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleMatchDlg.cs,SimpleMatchDlg,The following statement contains a magic number: this.m_textBox.Location = new System.Drawing.Point(8' 24);
Magic Number,SIL.FieldWorks.Common.Controls,SimpleMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleMatchDlg.cs,SimpleMatchDlg,The following statement contains a magic number: this.m_textBox.Size = new System.Drawing.Size(450' 32);
Magic Number,SIL.FieldWorks.Common.Controls,SimpleMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleMatchDlg.cs,SimpleMatchDlg,The following statement contains a magic number: this.m_textBox.Size = new System.Drawing.Size(450' 32);
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseRDEView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseRDEView.cs,CreateObjectFromEntryRow,The following statement contains a magic number: object[] parameters = new object[3];
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseRDEView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseRDEView.cs,CreateObjectFromEntryRow,The following statement contains a magic number: parameters[2] = rgtss;
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseRDEView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseRDEView.cs,DoMerges,The following statement contains a magic number: try  			{  				try  				{  					RDEVc.EditableObjectsRemoveInvalidObjects();    					ISet<int> idsClone = RDEVc.EditableObjectsClone();  					fInDoMerges = true;  					Type targetType = ReflectionHelper.GetType(RDEVc.EditRowAssembly' RDEVc.EditRowClass);  					System.Reflection.MethodInfo mi = targetType.GetMethod(RDEVc.EditRowMergeMethod);  					object[] parameters = new object[2];  					parameters[0] = (object)m_hvoRoot;  					parameters[1] = (object)idsClone; // This is a Set<int>.    					// Make a copy. I (JohnT) don't see how this collection can get modified  					// during the loop' but we've had exceptions (e.g.' LT-1355) claiming that  					// it has been.  					foreach (int hvoSense in idsClone)  					{  						ICmObject target = Cache.ServiceLocator.GetObject(hvoSense);  						try  						{  							if ((bool)mi.Invoke(target' parameters))  							{  								// The sense was deleted as a duplicate; get rid of it from our fakeflid' too.  								ISilDataAccessManaged sda = m_bv.SpecialCache;  								int[] oldList = sda.VecProp(m_hvoRoot' m_fakeFlid);  								for (int i = 0; i < oldList.Length; i++)  								{  									if (oldList[i] == hvoSense)  									{  										m_bv.SpecialCache.Replace(m_hvoRoot' m_fakeFlid' i' i+1' new int[0]' 0);  									}  								}  							}  						}  						catch (Exception e)  						{  							// Ignore a failure here - LT-3091 (after adding a word and def in cat entry'  							// selecting undo and then closing the application causes the following error:  							//     Msg: Tried to create an FDO object based on db object(hvo=39434class=0)'  							//     but that class is not fit in this signature (LexSense)  							Debug.WriteLine("mi.Invoke failed in XmlBrowseRDEView: " + e.InnerException.Message);  							throw e;  						}  					}  				}  				catch (Exception error)  				{  					throw new RuntimeConfigurationException(String.Format(  						"XmlBrowseRDEView.DoMerges() could not invoke the static {0} method of the class {1}"'  						RDEVc.EditRowMergeMethod' RDEVc.EditRowClass)' error);  				}  				RDEVc.EditableObjectsClear();  				int cobj = m_bv.SpecialCache.get_VecSize(m_hvoRoot' m_fakeFlid);  				m_bv.BrowseView.RootBox.PropChanged(m_hvoRoot' m_fakeFlid' 0' cobj' cobj);  			}  			finally  			{  				fInDoMerges = false;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseView.cs,StripTrailingNewLine,The following statement contains a magic number: if (ch == '\n' || ch == '\r')  			{  				cchStrip ++;  				if (cch > 1)  				{  					ch = val[cch - 2];  					if (ch == '\n' || ch == '\r')  					{  						cchStrip ++;  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseView.cs,OnMouseUp,The following statement contains a magic number: try  			{  				if (m_selectedIndex == -1)  					return; // Can't do much in an empty list' so quit.  				m_fHandlingMouseUp = true;  #pragma warning disable 219  				int oldSelectedIndex = m_selectedIndex;  #pragma warning restore 219    				// Note all the stuff we might want to know about what was clicked that we will  				// use later. We want to get this now before anything changes' because there can  				// be scrolling effects from converting dummy objects to real.  				IVwSelection vwsel = MakeSelectionAt(e);  				int newSelectedIndex = GetRowIndexFromSelection(vwsel' true);  				// If we're changing records' we need to do some tricks to keep the selection in the place  				// clicked and the focus here. Save the information we will need.  				SelectionHelper clickSel = null;  				if (newSelectedIndex != SelectedIndex && vwsel != null && SelectionHelper.IsEditable(vwsel))  					clickSel = SelectionHelper.Create(vwsel' this);  				ITsString tssWord = null; // word clicked for click copy  				ITsString tssSource = null; // whole source string of clicked cell for click copy  				int hvoNewSelRow = 0; // hvo of new selected row (only for click copy)  				int ichStart = 0; // of tssWord in tssSource  				if (ClickCopy != null && e.Button == MouseButtons.Left && newSelectedIndex >= 0)  				{  					if (vwsel != null && vwsel.SelType == VwSelType.kstText)  					{  						int icol = vwsel.get_BoxIndex(false' 3);  						if (icol != Vc.OverrideAllowEditColumn + 1)  						{  							IVwSelection vwSelWord = vwsel.GrowToWord();  							// GrowToWord() can return a null -- see LT-9163 and LT-9349.  							if (vwSelWord != null)  							{  								vwSelWord.GetSelectionString(out tssWord' " ");  								tssWord = StripTrailingNewLine(tssWord);  								hvoNewSelRow = m_sda.get_VecItem(m_hvoRoot' m_fakeFlid'  																						newSelectedIndex);  								int hvoObj' tag' ws;  								bool fAssocPrev;  								vwSelWord.TextSelInfo(false' out tssSource' out ichStart' out fAssocPrev' out hvoObj'  													  out tag' out ws);  							}  						}  					}  				}    				// We need to manually change the index for ReadOnly views.  				// SimpleRootSite delegates RightMouseClickEvent to our RecordBrowseView parent'  				// which also makes the selection for us..  				if (ReadOnlySelect && e.Button != MouseButtons.Right)  				{  					if (this.m_xbvvc.HasSelectColumn && e.X < m_xbvvc.SelectColumnWidth)  					{  						base.OnMouseUp(e); // allows check box to operate.  					}  				}  				else  				{  					// If we leave this set' the base method call's side effects like updating the WS combo  					// don't happen.  					m_fHandlingMouseUp = false;  					base.OnMouseUp(e); // normal behavior.  					m_fHandlingMouseUp = true;  				}  				SetSelectedIndex(newSelectedIndex);  				if (tssWord != null)  				{  					// We're doing click copies; generate an event.  					// Do this AFTER other actions which may change the current line.  					ClickCopy(this' new ClickCopyEventArgs(tssWord' hvoNewSelRow' tssSource' ichStart));  				}  				if (clickSel != null)  				{  					IVwSelection finalSel = null;  					// There seem to be some cases where the selection helper can't restore the selection.  					// One that came up in FWR-3666 was clicking on a check box.  					// If we can't re-establish an editiable selection just let the default behavior continue.  					try  					{  						finalSel = clickSel.MakeRangeSelection(RootBox' false);  					}  					catch (Exception)  					{  					}  					if (finalSel != null && SelectionHelper.IsEditable(finalSel))  					{  						finalSel.Install();  						FocusMe();  					}  				}  			}  			finally  			{  				m_fHandlingMouseUp = false;  				m_fMouseUpEnabled = false;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseView.cs,FocusMe,The following statement contains a magic number: m_idleFocusCount = 5;
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The following statement contains a magic number: try  			{  				doc = new XmlDocument();  				doc.LoadXml(savedCols);  				int version = XmlUtils.GetOptionalIntegerValue(doc.DocumentElement' "version"' 0);  				if (version != BrowseViewer.kBrowseViewVersion)  				{  					// If we can fix problems introduced by a new version' fix them here.  					// Otherwise throw up a dialog telling the user they are losing their settings.  					switch (version)  					{  							// Process changes made in P4 Changelist 29278  						case 12:  							target = "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\" /></properties><string field=\"MLHeadWord\" ws=\"vernacular\" /></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\" layout=\"EntryHeadwordForFindEntry\" />");  							target = "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><obj field=\"LexemeForm\" layout=\"empty\"><string field=\"Form\" ws=\"$ws=vernacular\"/></obj></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"LexemeFormForFindEntry\"/>");  							target = "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><string field=\"CitationForm\" ws=\"$ws=vernacular\"/></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"CitationFormForFindEntry\"/>");  							target = "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\"/></properties><seq field=\"AlternateForms\" layout=\"empty\" sep=\"' \"><string field=\"Form\" ws=\"$ws=vernacular\"/></seq></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\" ws=\"$ws=vernacular\" layout=\"AllomorphsForFindEntry\"/>");  							target = "<column label=\"Glosses\" multipara=\"true\" editable=\"false\" width=\"96000\"><seq field=\"Senses\" layout=\"empty\"><para><properties><editable value=\"false\"/></properties><string field=\"Gloss\" ws=\"$ws=analysis\"/></para></seq></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Glosses\" editable=\"false\" width=\"96000\" ws=\"$ws=analysis\" layout=\"GlossesForFindEntry\"/>");  							savedCols = savedCols.Replace("root version=\"12\""' "root version=\"13\"");  							goto case 13;  						case 13:  							savedCols = RemoveWeatherColumn(savedCols);  							savedCols = savedCols.Replace("root version=\"13\""' "root version=\"14\"");  							goto case 14;  						case 14:  							savedCols = FixVersion15Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"14\""' "root version=\"15\"");  							goto case 15;  						case 15:  							savedCols = FixVersion16Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"15\""' "root version=\"16\"");  							goto case 16;  						case 16:  							savedCols = FixVersion17Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"16\""' "root version=\"17\"");  							goto case 17;  						case 17:  							savedCols = FixVersion18Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"17\""' "root version=\"18\"");  							propertyTable.SetProperty(colListId' savedCols' true);  							doc.LoadXml(savedCols);  							break;  						default:  							if (!s_haveShownDefaultColumnMessage)  							{  								s_haveShownDefaultColumnMessage = true; // FWR-1781 only show this once  								MessageBox.Show(null' XMLViewsStrings.ksInvalidSavedLayout' XMLViewsStrings.ksNote);  							}  							doc = null;  							// Forget the old settings' so we don't keep complaining every time the program runs.  							// There doesn't seem to be any way to remove the property altogether' so at least' make it empty.  							propertyTable.SetProperty(colListId' ""' PropertyTable.SettingsGroup.LocalSettings' true);  							break;  					}  				}  			}  			catch(Exception)  			{  				// If anything is wrong with the saved data (e.g.' an old version that doesn't  				// parse as XML)' ignore it.  				doc = null;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The following statement contains a magic number: try  			{  				doc = new XmlDocument();  				doc.LoadXml(savedCols);  				int version = XmlUtils.GetOptionalIntegerValue(doc.DocumentElement' "version"' 0);  				if (version != BrowseViewer.kBrowseViewVersion)  				{  					// If we can fix problems introduced by a new version' fix them here.  					// Otherwise throw up a dialog telling the user they are losing their settings.  					switch (version)  					{  							// Process changes made in P4 Changelist 29278  						case 12:  							target = "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\" /></properties><string field=\"MLHeadWord\" ws=\"vernacular\" /></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\" layout=\"EntryHeadwordForFindEntry\" />");  							target = "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><obj field=\"LexemeForm\" layout=\"empty\"><string field=\"Form\" ws=\"$ws=vernacular\"/></obj></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"LexemeFormForFindEntry\"/>");  							target = "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><string field=\"CitationForm\" ws=\"$ws=vernacular\"/></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"CitationFormForFindEntry\"/>");  							target = "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\"/></properties><seq field=\"AlternateForms\" layout=\"empty\" sep=\"' \"><string field=\"Form\" ws=\"$ws=vernacular\"/></seq></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\" ws=\"$ws=vernacular\" layout=\"AllomorphsForFindEntry\"/>");  							target = "<column label=\"Glosses\" multipara=\"true\" editable=\"false\" width=\"96000\"><seq field=\"Senses\" layout=\"empty\"><para><properties><editable value=\"false\"/></properties><string field=\"Gloss\" ws=\"$ws=analysis\"/></para></seq></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Glosses\" editable=\"false\" width=\"96000\" ws=\"$ws=analysis\" layout=\"GlossesForFindEntry\"/>");  							savedCols = savedCols.Replace("root version=\"12\""' "root version=\"13\"");  							goto case 13;  						case 13:  							savedCols = RemoveWeatherColumn(savedCols);  							savedCols = savedCols.Replace("root version=\"13\""' "root version=\"14\"");  							goto case 14;  						case 14:  							savedCols = FixVersion15Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"14\""' "root version=\"15\"");  							goto case 15;  						case 15:  							savedCols = FixVersion16Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"15\""' "root version=\"16\"");  							goto case 16;  						case 16:  							savedCols = FixVersion17Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"16\""' "root version=\"17\"");  							goto case 17;  						case 17:  							savedCols = FixVersion18Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"17\""' "root version=\"18\"");  							propertyTable.SetProperty(colListId' savedCols' true);  							doc.LoadXml(savedCols);  							break;  						default:  							if (!s_haveShownDefaultColumnMessage)  							{  								s_haveShownDefaultColumnMessage = true; // FWR-1781 only show this once  								MessageBox.Show(null' XMLViewsStrings.ksInvalidSavedLayout' XMLViewsStrings.ksNote);  							}  							doc = null;  							// Forget the old settings' so we don't keep complaining every time the program runs.  							// There doesn't seem to be any way to remove the property altogether' so at least' make it empty.  							propertyTable.SetProperty(colListId' ""' PropertyTable.SettingsGroup.LocalSettings' true);  							break;  					}  				}  			}  			catch(Exception)  			{  				// If anything is wrong with the saved data (e.g.' an old version that doesn't  				// parse as XML)' ignore it.  				doc = null;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The following statement contains a magic number: try  			{  				doc = new XmlDocument();  				doc.LoadXml(savedCols);  				int version = XmlUtils.GetOptionalIntegerValue(doc.DocumentElement' "version"' 0);  				if (version != BrowseViewer.kBrowseViewVersion)  				{  					// If we can fix problems introduced by a new version' fix them here.  					// Otherwise throw up a dialog telling the user they are losing their settings.  					switch (version)  					{  							// Process changes made in P4 Changelist 29278  						case 12:  							target = "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\" /></properties><string field=\"MLHeadWord\" ws=\"vernacular\" /></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\" layout=\"EntryHeadwordForFindEntry\" />");  							target = "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><obj field=\"LexemeForm\" layout=\"empty\"><string field=\"Form\" ws=\"$ws=vernacular\"/></obj></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"LexemeFormForFindEntry\"/>");  							target = "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><string field=\"CitationForm\" ws=\"$ws=vernacular\"/></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"CitationFormForFindEntry\"/>");  							target = "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\"/></properties><seq field=\"AlternateForms\" layout=\"empty\" sep=\"' \"><string field=\"Form\" ws=\"$ws=vernacular\"/></seq></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\" ws=\"$ws=vernacular\" layout=\"AllomorphsForFindEntry\"/>");  							target = "<column label=\"Glosses\" multipara=\"true\" editable=\"false\" width=\"96000\"><seq field=\"Senses\" layout=\"empty\"><para><properties><editable value=\"false\"/></properties><string field=\"Gloss\" ws=\"$ws=analysis\"/></para></seq></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Glosses\" editable=\"false\" width=\"96000\" ws=\"$ws=analysis\" layout=\"GlossesForFindEntry\"/>");  							savedCols = savedCols.Replace("root version=\"12\""' "root version=\"13\"");  							goto case 13;  						case 13:  							savedCols = RemoveWeatherColumn(savedCols);  							savedCols = savedCols.Replace("root version=\"13\""' "root version=\"14\"");  							goto case 14;  						case 14:  							savedCols = FixVersion15Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"14\""' "root version=\"15\"");  							goto case 15;  						case 15:  							savedCols = FixVersion16Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"15\""' "root version=\"16\"");  							goto case 16;  						case 16:  							savedCols = FixVersion17Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"16\""' "root version=\"17\"");  							goto case 17;  						case 17:  							savedCols = FixVersion18Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"17\""' "root version=\"18\"");  							propertyTable.SetProperty(colListId' savedCols' true);  							doc.LoadXml(savedCols);  							break;  						default:  							if (!s_haveShownDefaultColumnMessage)  							{  								s_haveShownDefaultColumnMessage = true; // FWR-1781 only show this once  								MessageBox.Show(null' XMLViewsStrings.ksInvalidSavedLayout' XMLViewsStrings.ksNote);  							}  							doc = null;  							// Forget the old settings' so we don't keep complaining every time the program runs.  							// There doesn't seem to be any way to remove the property altogether' so at least' make it empty.  							propertyTable.SetProperty(colListId' ""' PropertyTable.SettingsGroup.LocalSettings' true);  							break;  					}  				}  			}  			catch(Exception)  			{  				// If anything is wrong with the saved data (e.g.' an old version that doesn't  				// parse as XML)' ignore it.  				doc = null;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The following statement contains a magic number: try  			{  				doc = new XmlDocument();  				doc.LoadXml(savedCols);  				int version = XmlUtils.GetOptionalIntegerValue(doc.DocumentElement' "version"' 0);  				if (version != BrowseViewer.kBrowseViewVersion)  				{  					// If we can fix problems introduced by a new version' fix them here.  					// Otherwise throw up a dialog telling the user they are losing their settings.  					switch (version)  					{  							// Process changes made in P4 Changelist 29278  						case 12:  							target = "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\" /></properties><string field=\"MLHeadWord\" ws=\"vernacular\" /></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\" layout=\"EntryHeadwordForFindEntry\" />");  							target = "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><obj field=\"LexemeForm\" layout=\"empty\"><string field=\"Form\" ws=\"$ws=vernacular\"/></obj></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"LexemeFormForFindEntry\"/>");  							target = "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><string field=\"CitationForm\" ws=\"$ws=vernacular\"/></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"CitationFormForFindEntry\"/>");  							target = "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\"/></properties><seq field=\"AlternateForms\" layout=\"empty\" sep=\"' \"><string field=\"Form\" ws=\"$ws=vernacular\"/></seq></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\" ws=\"$ws=vernacular\" layout=\"AllomorphsForFindEntry\"/>");  							target = "<column label=\"Glosses\" multipara=\"true\" editable=\"false\" width=\"96000\"><seq field=\"Senses\" layout=\"empty\"><para><properties><editable value=\"false\"/></properties><string field=\"Gloss\" ws=\"$ws=analysis\"/></para></seq></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Glosses\" editable=\"false\" width=\"96000\" ws=\"$ws=analysis\" layout=\"GlossesForFindEntry\"/>");  							savedCols = savedCols.Replace("root version=\"12\""' "root version=\"13\"");  							goto case 13;  						case 13:  							savedCols = RemoveWeatherColumn(savedCols);  							savedCols = savedCols.Replace("root version=\"13\""' "root version=\"14\"");  							goto case 14;  						case 14:  							savedCols = FixVersion15Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"14\""' "root version=\"15\"");  							goto case 15;  						case 15:  							savedCols = FixVersion16Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"15\""' "root version=\"16\"");  							goto case 16;  						case 16:  							savedCols = FixVersion17Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"16\""' "root version=\"17\"");  							goto case 17;  						case 17:  							savedCols = FixVersion18Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"17\""' "root version=\"18\"");  							propertyTable.SetProperty(colListId' savedCols' true);  							doc.LoadXml(savedCols);  							break;  						default:  							if (!s_haveShownDefaultColumnMessage)  							{  								s_haveShownDefaultColumnMessage = true; // FWR-1781 only show this once  								MessageBox.Show(null' XMLViewsStrings.ksInvalidSavedLayout' XMLViewsStrings.ksNote);  							}  							doc = null;  							// Forget the old settings' so we don't keep complaining every time the program runs.  							// There doesn't seem to be any way to remove the property altogether' so at least' make it empty.  							propertyTable.SetProperty(colListId' ""' PropertyTable.SettingsGroup.LocalSettings' true);  							break;  					}  				}  			}  			catch(Exception)  			{  				// If anything is wrong with the saved data (e.g.' an old version that doesn't  				// parse as XML)' ignore it.  				doc = null;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The following statement contains a magic number: try  			{  				doc = new XmlDocument();  				doc.LoadXml(savedCols);  				int version = XmlUtils.GetOptionalIntegerValue(doc.DocumentElement' "version"' 0);  				if (version != BrowseViewer.kBrowseViewVersion)  				{  					// If we can fix problems introduced by a new version' fix them here.  					// Otherwise throw up a dialog telling the user they are losing their settings.  					switch (version)  					{  							// Process changes made in P4 Changelist 29278  						case 12:  							target = "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\" /></properties><string field=\"MLHeadWord\" ws=\"vernacular\" /></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\" layout=\"EntryHeadwordForFindEntry\" />");  							target = "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><obj field=\"LexemeForm\" layout=\"empty\"><string field=\"Form\" ws=\"$ws=vernacular\"/></obj></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"LexemeFormForFindEntry\"/>");  							target = "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><string field=\"CitationForm\" ws=\"$ws=vernacular\"/></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"CitationFormForFindEntry\"/>");  							target = "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\"/></properties><seq field=\"AlternateForms\" layout=\"empty\" sep=\"' \"><string field=\"Form\" ws=\"$ws=vernacular\"/></seq></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\" ws=\"$ws=vernacular\" layout=\"AllomorphsForFindEntry\"/>");  							target = "<column label=\"Glosses\" multipara=\"true\" editable=\"false\" width=\"96000\"><seq field=\"Senses\" layout=\"empty\"><para><properties><editable value=\"false\"/></properties><string field=\"Gloss\" ws=\"$ws=analysis\"/></para></seq></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Glosses\" editable=\"false\" width=\"96000\" ws=\"$ws=analysis\" layout=\"GlossesForFindEntry\"/>");  							savedCols = savedCols.Replace("root version=\"12\""' "root version=\"13\"");  							goto case 13;  						case 13:  							savedCols = RemoveWeatherColumn(savedCols);  							savedCols = savedCols.Replace("root version=\"13\""' "root version=\"14\"");  							goto case 14;  						case 14:  							savedCols = FixVersion15Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"14\""' "root version=\"15\"");  							goto case 15;  						case 15:  							savedCols = FixVersion16Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"15\""' "root version=\"16\"");  							goto case 16;  						case 16:  							savedCols = FixVersion17Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"16\""' "root version=\"17\"");  							goto case 17;  						case 17:  							savedCols = FixVersion18Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"17\""' "root version=\"18\"");  							propertyTable.SetProperty(colListId' savedCols' true);  							doc.LoadXml(savedCols);  							break;  						default:  							if (!s_haveShownDefaultColumnMessage)  							{  								s_haveShownDefaultColumnMessage = true; // FWR-1781 only show this once  								MessageBox.Show(null' XMLViewsStrings.ksInvalidSavedLayout' XMLViewsStrings.ksNote);  							}  							doc = null;  							// Forget the old settings' so we don't keep complaining every time the program runs.  							// There doesn't seem to be any way to remove the property altogether' so at least' make it empty.  							propertyTable.SetProperty(colListId' ""' PropertyTable.SettingsGroup.LocalSettings' true);  							break;  					}  				}  			}  			catch(Exception)  			{  				// If anything is wrong with the saved data (e.g.' an old version that doesn't  				// parse as XML)' ignore it.  				doc = null;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The following statement contains a magic number: try  			{  				doc = new XmlDocument();  				doc.LoadXml(savedCols);  				int version = XmlUtils.GetOptionalIntegerValue(doc.DocumentElement' "version"' 0);  				if (version != BrowseViewer.kBrowseViewVersion)  				{  					// If we can fix problems introduced by a new version' fix them here.  					// Otherwise throw up a dialog telling the user they are losing their settings.  					switch (version)  					{  							// Process changes made in P4 Changelist 29278  						case 12:  							target = "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\" /></properties><string field=\"MLHeadWord\" ws=\"vernacular\" /></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\" layout=\"EntryHeadwordForFindEntry\" />");  							target = "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><obj field=\"LexemeForm\" layout=\"empty\"><string field=\"Form\" ws=\"$ws=vernacular\"/></obj></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"LexemeFormForFindEntry\"/>");  							target = "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><string field=\"CitationForm\" ws=\"$ws=vernacular\"/></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"CitationFormForFindEntry\"/>");  							target = "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\"/></properties><seq field=\"AlternateForms\" layout=\"empty\" sep=\"' \"><string field=\"Form\" ws=\"$ws=vernacular\"/></seq></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\" ws=\"$ws=vernacular\" layout=\"AllomorphsForFindEntry\"/>");  							target = "<column label=\"Glosses\" multipara=\"true\" editable=\"false\" width=\"96000\"><seq field=\"Senses\" layout=\"empty\"><para><properties><editable value=\"false\"/></properties><string field=\"Gloss\" ws=\"$ws=analysis\"/></para></seq></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Glosses\" editable=\"false\" width=\"96000\" ws=\"$ws=analysis\" layout=\"GlossesForFindEntry\"/>");  							savedCols = savedCols.Replace("root version=\"12\""' "root version=\"13\"");  							goto case 13;  						case 13:  							savedCols = RemoveWeatherColumn(savedCols);  							savedCols = savedCols.Replace("root version=\"13\""' "root version=\"14\"");  							goto case 14;  						case 14:  							savedCols = FixVersion15Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"14\""' "root version=\"15\"");  							goto case 15;  						case 15:  							savedCols = FixVersion16Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"15\""' "root version=\"16\"");  							goto case 16;  						case 16:  							savedCols = FixVersion17Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"16\""' "root version=\"17\"");  							goto case 17;  						case 17:  							savedCols = FixVersion18Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"17\""' "root version=\"18\"");  							propertyTable.SetProperty(colListId' savedCols' true);  							doc.LoadXml(savedCols);  							break;  						default:  							if (!s_haveShownDefaultColumnMessage)  							{  								s_haveShownDefaultColumnMessage = true; // FWR-1781 only show this once  								MessageBox.Show(null' XMLViewsStrings.ksInvalidSavedLayout' XMLViewsStrings.ksNote);  							}  							doc = null;  							// Forget the old settings' so we don't keep complaining every time the program runs.  							// There doesn't seem to be any way to remove the property altogether' so at least' make it empty.  							propertyTable.SetProperty(colListId' ""' PropertyTable.SettingsGroup.LocalSettings' true);  							break;  					}  				}  			}  			catch(Exception)  			{  				// If anything is wrong with the saved data (e.g.' an old version that doesn't  				// parse as XML)' ignore it.  				doc = null;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The following statement contains a magic number: try  			{  				doc = new XmlDocument();  				doc.LoadXml(savedCols);  				int version = XmlUtils.GetOptionalIntegerValue(doc.DocumentElement' "version"' 0);  				if (version != BrowseViewer.kBrowseViewVersion)  				{  					// If we can fix problems introduced by a new version' fix them here.  					// Otherwise throw up a dialog telling the user they are losing their settings.  					switch (version)  					{  							// Process changes made in P4 Changelist 29278  						case 12:  							target = "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\" /></properties><string field=\"MLHeadWord\" ws=\"vernacular\" /></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\" layout=\"EntryHeadwordForFindEntry\" />");  							target = "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><obj field=\"LexemeForm\" layout=\"empty\"><string field=\"Form\" ws=\"$ws=vernacular\"/></obj></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"LexemeFormForFindEntry\"/>");  							target = "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><string field=\"CitationForm\" ws=\"$ws=vernacular\"/></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"CitationFormForFindEntry\"/>");  							target = "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\"/></properties><seq field=\"AlternateForms\" layout=\"empty\" sep=\"' \"><string field=\"Form\" ws=\"$ws=vernacular\"/></seq></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\" ws=\"$ws=vernacular\" layout=\"AllomorphsForFindEntry\"/>");  							target = "<column label=\"Glosses\" multipara=\"true\" editable=\"false\" width=\"96000\"><seq field=\"Senses\" layout=\"empty\"><para><properties><editable value=\"false\"/></properties><string field=\"Gloss\" ws=\"$ws=analysis\"/></para></seq></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Glosses\" editable=\"false\" width=\"96000\" ws=\"$ws=analysis\" layout=\"GlossesForFindEntry\"/>");  							savedCols = savedCols.Replace("root version=\"12\""' "root version=\"13\"");  							goto case 13;  						case 13:  							savedCols = RemoveWeatherColumn(savedCols);  							savedCols = savedCols.Replace("root version=\"13\""' "root version=\"14\"");  							goto case 14;  						case 14:  							savedCols = FixVersion15Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"14\""' "root version=\"15\"");  							goto case 15;  						case 15:  							savedCols = FixVersion16Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"15\""' "root version=\"16\"");  							goto case 16;  						case 16:  							savedCols = FixVersion17Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"16\""' "root version=\"17\"");  							goto case 17;  						case 17:  							savedCols = FixVersion18Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"17\""' "root version=\"18\"");  							propertyTable.SetProperty(colListId' savedCols' true);  							doc.LoadXml(savedCols);  							break;  						default:  							if (!s_haveShownDefaultColumnMessage)  							{  								s_haveShownDefaultColumnMessage = true; // FWR-1781 only show this once  								MessageBox.Show(null' XMLViewsStrings.ksInvalidSavedLayout' XMLViewsStrings.ksNote);  							}  							doc = null;  							// Forget the old settings' so we don't keep complaining every time the program runs.  							// There doesn't seem to be any way to remove the property altogether' so at least' make it empty.  							propertyTable.SetProperty(colListId' ""' PropertyTable.SettingsGroup.LocalSettings' true);  							break;  					}  				}  			}  			catch(Exception)  			{  				// If anything is wrong with the saved data (e.g.' an old version that doesn't  				// parse as XML)' ignore it.  				doc = null;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The following statement contains a magic number: try  			{  				doc = new XmlDocument();  				doc.LoadXml(savedCols);  				int version = XmlUtils.GetOptionalIntegerValue(doc.DocumentElement' "version"' 0);  				if (version != BrowseViewer.kBrowseViewVersion)  				{  					// If we can fix problems introduced by a new version' fix them here.  					// Otherwise throw up a dialog telling the user they are losing their settings.  					switch (version)  					{  							// Process changes made in P4 Changelist 29278  						case 12:  							target = "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\" /></properties><string field=\"MLHeadWord\" ws=\"vernacular\" /></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\" layout=\"EntryHeadwordForFindEntry\" />");  							target = "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><obj field=\"LexemeForm\" layout=\"empty\"><string field=\"Form\" ws=\"$ws=vernacular\"/></obj></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"LexemeFormForFindEntry\"/>");  							target = "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><string field=\"CitationForm\" ws=\"$ws=vernacular\"/></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"CitationFormForFindEntry\"/>");  							target = "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\"/></properties><seq field=\"AlternateForms\" layout=\"empty\" sep=\"' \"><string field=\"Form\" ws=\"$ws=vernacular\"/></seq></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\" ws=\"$ws=vernacular\" layout=\"AllomorphsForFindEntry\"/>");  							target = "<column label=\"Glosses\" multipara=\"true\" editable=\"false\" width=\"96000\"><seq field=\"Senses\" layout=\"empty\"><para><properties><editable value=\"false\"/></properties><string field=\"Gloss\" ws=\"$ws=analysis\"/></para></seq></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Glosses\" editable=\"false\" width=\"96000\" ws=\"$ws=analysis\" layout=\"GlossesForFindEntry\"/>");  							savedCols = savedCols.Replace("root version=\"12\""' "root version=\"13\"");  							goto case 13;  						case 13:  							savedCols = RemoveWeatherColumn(savedCols);  							savedCols = savedCols.Replace("root version=\"13\""' "root version=\"14\"");  							goto case 14;  						case 14:  							savedCols = FixVersion15Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"14\""' "root version=\"15\"");  							goto case 15;  						case 15:  							savedCols = FixVersion16Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"15\""' "root version=\"16\"");  							goto case 16;  						case 16:  							savedCols = FixVersion17Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"16\""' "root version=\"17\"");  							goto case 17;  						case 17:  							savedCols = FixVersion18Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"17\""' "root version=\"18\"");  							propertyTable.SetProperty(colListId' savedCols' true);  							doc.LoadXml(savedCols);  							break;  						default:  							if (!s_haveShownDefaultColumnMessage)  							{  								s_haveShownDefaultColumnMessage = true; // FWR-1781 only show this once  								MessageBox.Show(null' XMLViewsStrings.ksInvalidSavedLayout' XMLViewsStrings.ksNote);  							}  							doc = null;  							// Forget the old settings' so we don't keep complaining every time the program runs.  							// There doesn't seem to be any way to remove the property altogether' so at least' make it empty.  							propertyTable.SetProperty(colListId' ""' PropertyTable.SettingsGroup.LocalSettings' true);  							break;  					}  				}  			}  			catch(Exception)  			{  				// If anything is wrong with the saved data (e.g.' an old version that doesn't  				// parse as XML)' ignore it.  				doc = null;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The following statement contains a magic number: try  			{  				doc = new XmlDocument();  				doc.LoadXml(savedCols);  				int version = XmlUtils.GetOptionalIntegerValue(doc.DocumentElement' "version"' 0);  				if (version != BrowseViewer.kBrowseViewVersion)  				{  					// If we can fix problems introduced by a new version' fix them here.  					// Otherwise throw up a dialog telling the user they are losing their settings.  					switch (version)  					{  							// Process changes made in P4 Changelist 29278  						case 12:  							target = "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\" /></properties><string field=\"MLHeadWord\" ws=\"vernacular\" /></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\" layout=\"EntryHeadwordForFindEntry\" />");  							target = "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><obj field=\"LexemeForm\" layout=\"empty\"><string field=\"Form\" ws=\"$ws=vernacular\"/></obj></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"LexemeFormForFindEntry\"/>");  							target = "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><string field=\"CitationForm\" ws=\"$ws=vernacular\"/></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"CitationFormForFindEntry\"/>");  							target = "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\"/></properties><seq field=\"AlternateForms\" layout=\"empty\" sep=\"' \"><string field=\"Form\" ws=\"$ws=vernacular\"/></seq></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\" ws=\"$ws=vernacular\" layout=\"AllomorphsForFindEntry\"/>");  							target = "<column label=\"Glosses\" multipara=\"true\" editable=\"false\" width=\"96000\"><seq field=\"Senses\" layout=\"empty\"><para><properties><editable value=\"false\"/></properties><string field=\"Gloss\" ws=\"$ws=analysis\"/></para></seq></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Glosses\" editable=\"false\" width=\"96000\" ws=\"$ws=analysis\" layout=\"GlossesForFindEntry\"/>");  							savedCols = savedCols.Replace("root version=\"12\""' "root version=\"13\"");  							goto case 13;  						case 13:  							savedCols = RemoveWeatherColumn(savedCols);  							savedCols = savedCols.Replace("root version=\"13\""' "root version=\"14\"");  							goto case 14;  						case 14:  							savedCols = FixVersion15Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"14\""' "root version=\"15\"");  							goto case 15;  						case 15:  							savedCols = FixVersion16Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"15\""' "root version=\"16\"");  							goto case 16;  						case 16:  							savedCols = FixVersion17Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"16\""' "root version=\"17\"");  							goto case 17;  						case 17:  							savedCols = FixVersion18Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"17\""' "root version=\"18\"");  							propertyTable.SetProperty(colListId' savedCols' true);  							doc.LoadXml(savedCols);  							break;  						default:  							if (!s_haveShownDefaultColumnMessage)  							{  								s_haveShownDefaultColumnMessage = true; // FWR-1781 only show this once  								MessageBox.Show(null' XMLViewsStrings.ksInvalidSavedLayout' XMLViewsStrings.ksNote);  							}  							doc = null;  							// Forget the old settings' so we don't keep complaining every time the program runs.  							// There doesn't seem to be any way to remove the property altogether' so at least' make it empty.  							propertyTable.SetProperty(colListId' ""' PropertyTable.SettingsGroup.LocalSettings' true);  							break;  					}  				}  			}  			catch(Exception)  			{  				// If anything is wrong with the saved data (e.g.' an old version that doesn't  				// parse as XML)' ignore it.  				doc = null;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The following statement contains a magic number: try  			{  				doc = new XmlDocument();  				doc.LoadXml(savedCols);  				int version = XmlUtils.GetOptionalIntegerValue(doc.DocumentElement' "version"' 0);  				if (version != BrowseViewer.kBrowseViewVersion)  				{  					// If we can fix problems introduced by a new version' fix them here.  					// Otherwise throw up a dialog telling the user they are losing their settings.  					switch (version)  					{  							// Process changes made in P4 Changelist 29278  						case 12:  							target = "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\" /></properties><string field=\"MLHeadWord\" ws=\"vernacular\" /></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\" layout=\"EntryHeadwordForFindEntry\" />");  							target = "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><obj field=\"LexemeForm\" layout=\"empty\"><string field=\"Form\" ws=\"$ws=vernacular\"/></obj></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"LexemeFormForFindEntry\"/>");  							target = "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><string field=\"CitationForm\" ws=\"$ws=vernacular\"/></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"CitationFormForFindEntry\"/>");  							target = "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\"/></properties><seq field=\"AlternateForms\" layout=\"empty\" sep=\"' \"><string field=\"Form\" ws=\"$ws=vernacular\"/></seq></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\" ws=\"$ws=vernacular\" layout=\"AllomorphsForFindEntry\"/>");  							target = "<column label=\"Glosses\" multipara=\"true\" editable=\"false\" width=\"96000\"><seq field=\"Senses\" layout=\"empty\"><para><properties><editable value=\"false\"/></properties><string field=\"Gloss\" ws=\"$ws=analysis\"/></para></seq></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Glosses\" editable=\"false\" width=\"96000\" ws=\"$ws=analysis\" layout=\"GlossesForFindEntry\"/>");  							savedCols = savedCols.Replace("root version=\"12\""' "root version=\"13\"");  							goto case 13;  						case 13:  							savedCols = RemoveWeatherColumn(savedCols);  							savedCols = savedCols.Replace("root version=\"13\""' "root version=\"14\"");  							goto case 14;  						case 14:  							savedCols = FixVersion15Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"14\""' "root version=\"15\"");  							goto case 15;  						case 15:  							savedCols = FixVersion16Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"15\""' "root version=\"16\"");  							goto case 16;  						case 16:  							savedCols = FixVersion17Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"16\""' "root version=\"17\"");  							goto case 17;  						case 17:  							savedCols = FixVersion18Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"17\""' "root version=\"18\"");  							propertyTable.SetProperty(colListId' savedCols' true);  							doc.LoadXml(savedCols);  							break;  						default:  							if (!s_haveShownDefaultColumnMessage)  							{  								s_haveShownDefaultColumnMessage = true; // FWR-1781 only show this once  								MessageBox.Show(null' XMLViewsStrings.ksInvalidSavedLayout' XMLViewsStrings.ksNote);  							}  							doc = null;  							// Forget the old settings' so we don't keep complaining every time the program runs.  							// There doesn't seem to be any way to remove the property altogether' so at least' make it empty.  							propertyTable.SetProperty(colListId' ""' PropertyTable.SettingsGroup.LocalSettings' true);  							break;  					}  				}  			}  			catch(Exception)  			{  				// If anything is wrong with the saved data (e.g.' an old version that doesn't  				// parse as XML)' ignore it.  				doc = null;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,GetSavedColumns,The following statement contains a magic number: try  			{  				doc = new XmlDocument();  				doc.LoadXml(savedCols);  				int version = XmlUtils.GetOptionalIntegerValue(doc.DocumentElement' "version"' 0);  				if (version != BrowseViewer.kBrowseViewVersion)  				{  					// If we can fix problems introduced by a new version' fix them here.  					// Otherwise throw up a dialog telling the user they are losing their settings.  					switch (version)  					{  							// Process changes made in P4 Changelist 29278  						case 12:  							target = "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\" /></properties><string field=\"MLHeadWord\" ws=\"vernacular\" /></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Headword\" sortmethod=\"FullSortKey\" ws=\"$ws=vernacular\" editable=\"false\" width=\"96000\" layout=\"EntryHeadwordForFindEntry\" />");  							target = "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><obj field=\"LexemeForm\" layout=\"empty\"><string field=\"Form\" ws=\"$ws=vernacular\"/></obj></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Lexeme Form\" visibility=\"menu\" common=\"true\" sortmethod=\"MorphSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"LexemeFormForFindEntry\"/>");  							target = "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\"><span><properties><editable value=\"false\"/></properties><string field=\"CitationForm\" ws=\"$ws=vernacular\"/></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Citation Form\" visibility=\"menu\" sortmethod=\"CitationFormSortKey\" ws=\"$ws=vernacular\" editable=\"false\" layout=\"CitationFormForFindEntry\"/>");  							target = "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\"><span><properties><editable value=\"false\"/></properties><seq field=\"AlternateForms\" layout=\"empty\" sep=\"' \"><string field=\"Form\" ws=\"$ws=vernacular\"/></seq></span></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Allomorphs\" editable=\"false\" width=\"96000\" ws=\"$ws=vernacular\" layout=\"AllomorphsForFindEntry\"/>");  							target = "<column label=\"Glosses\" multipara=\"true\" editable=\"false\" width=\"96000\"><seq field=\"Senses\" layout=\"empty\"><para><properties><editable value=\"false\"/></properties><string field=\"Gloss\" ws=\"$ws=analysis\"/></para></seq></column>";  							if (savedCols.IndexOf(target) > -1)  								savedCols = savedCols.Replace(target' "<column label=\"Glosses\" editable=\"false\" width=\"96000\" ws=\"$ws=analysis\" layout=\"GlossesForFindEntry\"/>");  							savedCols = savedCols.Replace("root version=\"12\""' "root version=\"13\"");  							goto case 13;  						case 13:  							savedCols = RemoveWeatherColumn(savedCols);  							savedCols = savedCols.Replace("root version=\"13\""' "root version=\"14\"");  							goto case 14;  						case 14:  							savedCols = FixVersion15Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"14\""' "root version=\"15\"");  							goto case 15;  						case 15:  							savedCols = FixVersion16Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"15\""' "root version=\"16\"");  							goto case 16;  						case 16:  							savedCols = FixVersion17Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"16\""' "root version=\"17\"");  							goto case 17;  						case 17:  							savedCols = FixVersion18Columns(savedCols);  							savedCols = savedCols.Replace("root version=\"17\""' "root version=\"18\"");  							propertyTable.SetProperty(colListId' savedCols' true);  							doc.LoadXml(savedCols);  							break;  						default:  							if (!s_haveShownDefaultColumnMessage)  							{  								s_haveShownDefaultColumnMessage = true; // FWR-1781 only show this once  								MessageBox.Show(null' XMLViewsStrings.ksInvalidSavedLayout' XMLViewsStrings.ksNote);  							}  							doc = null;  							// Forget the old settings' so we don't keep complaining every time the program runs.  							// There doesn't seem to be any way to remove the property altogether' so at least' make it empty.  							propertyTable.SetProperty(colListId' ""' PropertyTable.SettingsGroup.LocalSettings' true);  							break;  					}  				}  			}  			catch(Exception)  			{  				// If anything is wrong with the saved data (e.g.' an old version that doesn't  				// parse as XML)' ignore it.  				doc = null;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AppendAttrValue,The following statement contains a magic number: if (match.Success)  			{  				int index = match.Index + match.Length - 2; // just before closing />  				var leadIn = savedCols.Substring(0' index);  				var gap = " "; // for neatness don't put an extra space if we already have one.  				if (leadIn.EndsWith(" "))  					gap = "";  				savedCols = leadIn + gap + attrName + "=\"" + attrValue + "\"" + savedCols.Substring(index);  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,SetupSelectColumn,The following statement contains a magic number: if (m_fShowSelected)  			{  				// Only need these if showing the selected column.  				m_UncheckedCheckPic = m_app.PictureHolder.GetPicture("UncheckedCheckBox"' ResourceHelper.UncheckedCheckBox);  				m_CheckedCheckPic = m_app.PictureHolder.GetPicture("CheckedCheckBox"' ResourceHelper.CheckedCheckBox);  				m_DisabledCheckPic = m_app.PictureHolder.GetPicture("DisabledCheckBox"' ResourceHelper.DisabledCheckBox);  				// We want a width in millipoints (72000/inch). Value we have is in 100/mm.  				// There are 25.4 mm/inch.  				m_dxmpCheckWidth = m_UncheckedCheckPic.Width * 72000 / 2540;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,SetupSelectColumn,The following statement contains a magic number: if (m_fShowSelected)  			{  				// Only need these if showing the selected column.  				m_UncheckedCheckPic = m_app.PictureHolder.GetPicture("UncheckedCheckBox"' ResourceHelper.UncheckedCheckBox);  				m_CheckedCheckPic = m_app.PictureHolder.GetPicture("CheckedCheckBox"' ResourceHelper.CheckedCheckBox);  				m_DisabledCheckPic = m_app.PictureHolder.GetPicture("DisabledCheckBox"' ResourceHelper.DisabledCheckBox);  				// We want a width in millipoints (72000/inch). Value we have is in 100/mm.  				// There are 25.4 mm/inch.  				m_dxmpCheckWidth = m_UncheckedCheckPic.Width * 72000 / 2540;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,RGB,The following statement contains a magic number: return ((uint)(((byte)(r)|((short)((byte)(g))<<8))|(((short)(byte)(b))<<16)));
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,RGB,The following statement contains a magic number: return ((uint)(((byte)(r)|((short)((byte)(g))<<8))|(((short)(byte)(b))<<16)));
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableRow,The following statement contains a magic number: vwenv.GetOuterObject(clev - 2' out hvoDummy' out tagDummy' out index);
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableRow,The following statement contains a magic number: if (index == m_xbv.SelectedIndex && m_xbv.SelectedRowHighlighting != XmlBrowseViewBase.SelectionHighlighting.none)  			{  				vwenv.set_IntProperty((int)FwTextPropType.ktptBackColor'  					(int)FwTextPropVar.ktpvDefault'  					//	(int)RGB(Color.FromKnownColor(KnownColor.Highlight)));  					SelectedRowBackgroundColor(hvo));  				if (m_xbv.SelectedRowHighlighting == XmlBrowseViewBase.SelectionHighlighting.border)  				{  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop'  						(int)FwTextPropVar.ktpvMilliPoint'  						3000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderColor'  						(int)FwTextPropVar.ktpvDefault'  						(int)RGB(Color.FromKnownColor(KnownColor.Highlight)));  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableRow,The following statement contains a magic number: vwenv.OpenTable(colCount' // this many columns  				vl100' // using 100% of available space  				72000 / 96' //0' // no border  				VwAlignment.kvaLeft' // cells by default left aligned  				//	VwFramePosition.kvfpBelow' //.kvfpBox' //.kvfpVoid' // no frame  				VwFramePosition.kvfpBelow | VwFramePosition.kvfpRhs'  				VwRule.kvrlCols' // vertical lines between columns  				0' // no space between cells  				0' // no padding within cell.  				false);
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableRow,The following statement contains a magic number: vwenv.OpenTable(colCount' // this many columns  				vl100' // using 100% of available space  				72000 / 96' //0' // no border  				VwAlignment.kvaLeft' // cells by default left aligned  				//	VwFramePosition.kvfpBelow' //.kvfpBox' //.kvfpVoid' // no frame  				VwFramePosition.kvfpBelow | VwFramePosition.kvfpRhs'  				VwRule.kvrlCols' // vertical lines between columns  				0' // no space between cells  				0' // no padding within cell.  				false);
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableCell,The following statement contains a magic number: if (icolActive != 0 && m_PreviewArrowPic != null)  			{  				// The display depends on which column is active and whether the current row is selected.  				vwenv.NoteDependency(new int[] { hvoRoot' hvo' hvo }' new int[] { XMLViewsDataCache.ktagActiveColumn' XMLViewsDataCache.ktagItemSelected' XMLViewsDataCache.ktagItemEnabled }' 3);  				// We're doing the active column thing.  				if (MultiColumnPreview)  				{  					fIsCellActive = vwenv.DataAccess.get_IntProp(hvo' XMLViewsDataCache.ktagItemSelected) != 0  									&& vwenv.DataAccess.get_StringProp(hvo' XMLViewsDataCache.ktagAlternateValueMultiBase + icol).Length > 0;  				}  				else if (icol == icolActive)  				{  					fIsCellActive = vwenv.DataAccess.get_IntProp(hvo' XMLViewsDataCache.ktagItemSelected) != 0  						&& vwenv.DataAccess.get_IntProp(hvo' XMLViewsDataCache.ktagItemEnabled) != 0;  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableCell,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop'  				(int)FwTextPropVar.ktpvMilliPoint' 1607);
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableCell,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptPadTrailing'  				(int)FwTextPropVar.ktpvMilliPoint' 1607);
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableCell,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptPadLeading'  				(int)FwTextPropVar.ktpvMilliPoint' 1607);
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddTableCell,The following statement contains a magic number: if (m_sortItemProvider == null)  			{  				try  				{  					if (node.Name == "column")  					{  						SetForcedWs(node);  					}  				XmlNode nodeToProcess = GetColumnNode(node' hvo' m_sda' m_layouts);  				ProcessChildren(nodeToProcess' vwenv' hvo' null);  			}  				finally  				{  					// reset the ws for next column in the row.  					WsForce = 0;  				}  			}  			else  			{  				int level = vwenv.EmbeddingLevel;  				int hvoDum' tag' ihvo;  				vwenv.GetOuterObject(level - 2' out hvoDum' out tag' out ihvo);  				Debug.Assert(tag == m_fakeFlid);  				IManyOnePathSortItem item = m_sortItemProvider.SortItemAt(ihvo);  				if (item != null)  				DisplayCell(item' node' hvo' vwenv);	// (Original) cell contents  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddPreviewPiles,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptPadTrailing'  								  (int)FwTextPropVar.ktpvMilliPoint' 2500);
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,AddPreviewPiles,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptPadLeading'  								  (int)FwTextPropVar.ktpvMilliPoint' 2500);
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,ProcessFrag,The following statement contains a magic number: if (frag.Name == "preview")  			{  				vwenv.NoteDependency(new int[] { hvo' hvo }' new int[] { XMLViewsDataCache.ktagItemSelected' XMLViewsDataCache.ktagItemEnabled }' 2);  				// Explicitly insert the preview here' if enabled etc.  				if (vwenv.DataAccess.get_IntProp(hvo' XMLViewsDataCache.ktagItemSelected) != 0  										&& vwenv.DataAccess.get_IntProp(hvo' XMLViewsDataCache.ktagItemEnabled) != 0)  				{  					if (!HasPreviewArrow)  						PreviewArrow = BulkEditBar.PreviewArrowStatic;  					Debug.Assert(!MultiColumnPreview' "Expect only single column preview' not multi-column preview");  					AddPreviewPiles(vwenv' frag' 0);  				}  			}  			else  				base.ProcessFrag(frag' vwenv' hvo' fEditable' caller);
Magic Number,SIL.FieldWorks.Common.Controls,XmlBrowseViewBaseVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBaseVc.cs,EstimateHeight,The following statement contains a magic number: return 17;
Magic Number,SIL.FieldWorks.Common.Controls,XmlRDEBrowseViewVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlRDEBrowseViewVc.cs,AddEditRow,The following statement contains a magic number: vwenv.OpenTable(colCount' // this many columns  				vl100' // using 100% of available space  				72000 / 96' //0' // no border  				VwAlignment.kvaLeft' // cells by default left aligned  				//	VwFramePosition.kvfpBelow' //.kvfpBox' //.kvfpVoid' // no frame  				VwFramePosition.kvfpBelow | VwFramePosition.kvfpRhs'  				VwRule.kvrlCols' // vertical lines between columns  				0' // no space between cells  				0' // no padding within cell.  				false);
Magic Number,SIL.FieldWorks.Common.Controls,XmlRDEBrowseViewVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlRDEBrowseViewVc.cs,AddEditRow,The following statement contains a magic number: vwenv.OpenTable(colCount' // this many columns  				vl100' // using 100% of available space  				72000 / 96' //0' // no border  				VwAlignment.kvaLeft' // cells by default left aligned  				//	VwFramePosition.kvfpBelow' //.kvfpBox' //.kvfpVoid' // no frame  				VwFramePosition.kvfpBelow | VwFramePosition.kvfpRhs'  				VwRule.kvrlCols' // vertical lines between columns  				0' // no space between cells  				0' // no padding within cell.  				false);
Magic Number,SIL.FieldWorks.Common.Controls,XmlSeqView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlSeqView.cs,HandleSelectionChange,The following statement contains a magic number: if (clev < 2 || clevEnd < 2)  				return;
Magic Number,SIL.FieldWorks.Common.Controls,XmlSeqView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlSeqView.cs,HandleSelectionChange,The following statement contains a magic number: if (clev < 2 || clevEnd < 2)  				return;
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,Display,The following statement contains a magic number: if (fragId == 2)  			{  				// This number reserved for the main lazy sequence of an XmlSeqView.  				Debug.Assert(m_mainFlid != 0); // XmlSeqView must supply a main flid.  				// For displaying reversal indexes' we need to know the reversal index  				// language (writing system).  				var obj = m_cache.ServiceLocator.GetInstance<ICmObjectRepository>().GetObject(hvo);  				SetReversalWritingSystemFromRootObject(obj);  				vwenv.AddLazyVecItems(m_mainFlid' this' kRootFragId);  				return;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,DisplayVec,The following statement contains a magic number: if (frag <= 2)  			{  				// Should we do something special here?  				return;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,FilterAndSortListByComplexFormType,The following statement contains a magic number: if (objs[0].ClassID == LexReferenceTags.kClassId && m_mapGuidToReferenceInfo != null)  			{  				// First' filter the list of references according to the content of  				// m_mapGuidToReferenceInfo.  				var refs = new List<HvoAndIndex>();  				foreach (var obj in objs)  				{  					var lr = obj as ILexReference;  					if (lr == null || lr.TargetsRS.Count < 2)  						continue;  					List<LexReferenceInfo> lris;  					if (!m_mapGuidToReferenceInfo.TryGetValue(obj.Owner.Guid' out lris))  						continue;  					int originalIndex = 0;  					foreach (var lri in lris)  					{  						switch (lri.SubClass)  						{  							case LexReferenceInfo.TypeSubClass.Forward:  								if (lr.TargetsRS[0].Hvo != hvoTarget)  									continue;  								break;  							case LexReferenceInfo.TypeSubClass.Reverse:  								if (lr.TargetsRS[0].Hvo == hvoTarget)  									continue;  								break;  						}  						refs.Add(new HvoAndIndex {RefHvo = lr.Hvo' Index = lri.Index' OriginalIndex = originalIndex++});  					}  				}  				// Now' sort the list according to the order given by the information stored in  				// m_mapGuidToReferenceInfo' and return the new array of hvos.  				refs.Sort(SortHvoByIndex);  				return refs.Select(t => t.RefHvo).ToArray();  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ReallyEstimateHeight,The following statement contains a magic number: using (System.Windows.Forms.Form form = new System.Windows.Forms.Form())  			{  				using (Graphics g = form.CreateGraphics())  				{  					using (Font font = new Font(MiscUtils.StandardSansSerif' 12.0F))  					{  						StringMeasureEnv env = new StringMeasureEnv(null' m_sda'  							hvo' g' font);  						this.Display(env' hvo' frag);  						int lines = env.Width / dsAvailWidth + 1;  						int lineHeight = Convert.ToInt32(font.GetHeight(g));  						return lines * lineHeight * 72 / Convert.ToInt32(g.DpiY);  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetIntFromNamedProp,The following statement contains a magic number: if (parts.Length == 2)  			{  				flid = m_sda.MetaDataCache.GetFieldId(parts[0]' parts[1]' false);  			}  			else  			{  				int clsid = m_cache.ServiceLocator.GetInstance<ICmObjectRepository>().GetObject(hvo).ClassID;  				flid = m_sda.MetaDataCache.GetFieldId2(clsid' propName' true);  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessFrag,The following statement contains a magic number: try  			{  				switch (frag.Name)  				{  					default:  						Debug.Assert(false' "unrecognized XML node.");  						break;  					case "string":  						{  							int hvoTarget = hvo;  							GetActualTarget(frag' ref hvoTarget' m_sda);	// modify the hvo if needed  							if (hvo != hvoTarget)  							{  								AddStringFromOtherObj(frag' hvoTarget' vwenv' caller);  								break;  							}  							int flid = 0;  							if (TryCustomField(m_sda' frag' hvo' out flid))  							{  								// ignore invalid custom fields (LT-6474).  								if (flid == 0)  									break;  							}  							else  							{  								// Could still be an invalid CustomField that TryCustomField couldn't detect.  								if (!TryGetFlid(frag' hvoTarget' out flid))  									break;  							}    							int itype = m_sda.MetaDataCache.GetFieldType(flid);  							itype = itype & (int)CellarPropertyTypeFilter.VirtualMask;  							if (itype == (int)CellarPropertyType.Unicode)  							{  								int wsForUnicode = GetWritingSystemForObject(frag'  									hvo'  									flid'  									m_wsReversal == 0 ? m_cache.DefaultUserWs : m_wsReversal);  								vwenv.AddUnicodeProp(flid' wsForUnicode' this);  							}  							else if (itype == (int)CellarPropertyType.String)  							{  								MarkSource(vwenv' caller);  								vwenv.AddStringProp(flid' this);  							}  							else // multistring of some type  							{  								if (s_cwsMulti > 1)  								{  									string sLabelWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  									if (sLabelWs != null && sLabelWs == "current")  									{  										MarkSource(vwenv' caller);  										vwenv.OpenSpan();  										DisplayMultiSep(frag' vwenv' m_cache);  										DisplayWsLabel(s_qwsCurrent' vwenv' m_cache);  										if (s_qwsCurrent != null)  										{  											vwenv.AddStringAltMember(flid' s_qwsCurrent.Handle' this);  									}  										vwenv.CloseSpan();  								}  								}  								else  								{  									int wsid = GetWritingSystemForObject(frag'  										hvo'  										flid'  										m_wsReversal == 0 ? m_cache.DefaultUserWs : m_wsReversal);  									MarkSource(vwenv' caller);  									vwenv.AddStringAltMember(flid' wsid' this);  								}  							}  							break;  						}  					case "computedString":  						{  							// For example:  							// <part id="FsFeatStruc-Jt-PhonFeats_$fieldName" type="jtview">  							//   <computedString method="GetFeatureValueTSS" argument="$fieldName"/>  							// </part>  							var obj = m_cache.ServiceLocator.GetInstance<ICmObjectRepository>().GetObject(hvo);  							string method = XmlUtils.GetAttributeValue(frag' "method");  							if (!String.IsNullOrEmpty(method))  							{  								Type objType = obj.GetType();  								System.Reflection.MethodInfo mi = objType.GetMethod(method);  								if (mi != null)  								{  									string argument = XmlUtils.GetAttributeValue(frag' "argument");  									if (!String.IsNullOrEmpty(argument))  									{  										var value = (ITsString)mi.Invoke(obj' new object[] {argument});  										vwenv.AddString(value);  									}  								}  							}  							break;  						}  					case "configureMlString":  						{  							int hvoTarget = hvo;  							GetActualTarget(frag' ref hvoTarget' m_sda);	// modify the hvo if needed  							int flid = 0;  							if (TryCustomField(m_sda' frag' hvoTarget' out flid))  							{  								// ignore invalid custom fields (LT-6474).  								if (flid == 0)  									break;  							}  							else  							{  								// Could still be an invalid CustomField that TryCustomField couldn't detect.  								if (!TryGetFlid(frag' hvoTarget' out flid))  									break;  							}  							// The Ws info specified in the part ref node  							HashSet<int> wsIds;  							string sWs = XmlUtils.GetOptionalAttributeValue(caller' "ws");  							if (sWs == "reversal")  							{  								wsIds = new HashSet<int> {m_wsReversal};  							}  							else  							{  								wsIds = WritingSystemServices.GetAllWritingSystems(m_cache' caller' null' hvoTarget' flid);  							}  							if (wsIds.Count == 1)  							{  								if (hvoTarget != hvo)  									DisplayOtherObjStringAlt(flid' wsIds.First()' vwenv' hvoTarget' caller);  								else  								{  									MarkSource(vwenv' caller);  									vwenv.AddStringAltMember(flid' wsIds.First()' this);  							}  							}  							else  							{  								AddMultipleAlternatives(wsIds' vwenv' hvoTarget' flid' caller' hvoTarget == hvo);  							}  							break;  						}  					case "para":  						{  							ProcessProperties(frag' vwenv);  							var props = XmlUtils.GetFirstNonCommentChild(frag);  							if ((props == null || props.Name != "properties") && caller != null)  							{  								var style = XmlUtils.GetOptionalAttributeValue(caller' "style");  								if (!String.IsNullOrEmpty(style))  									vwenv.set_StringProperty((int) FwTextPropType.ktptNamedStyle' style);  							}  							// Note: the following assertion is indicative of not setting colSpec attribute multipara="true"  							// VwEnv.cpp: Assertion failed "Expression: dynamic_cast<VwPileBox *>(m_pgboxCurr)"  							vwenv.OpenParagraph();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseParagraph();  							break;  						}  					case "concpara":  						{  							OpenConcordanceParagraph(vwenv' hvo' frag);  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseParagraph();  							break;  						}  					case "div":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenDiv();  							ProcessChildren(frag' vwenv' hvo' caller);	// caller used for numbering subrecords  							vwenv.CloseDiv();  							break;  						}  					case "innerpile":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenInnerPile();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseInnerPile();  							break;  						}  					case "span":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenSpan();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseSpan();  							break;  						}  					case "table":  						{  							ProcessProperties(frag' vwenv);  							CoreWritingSystemDefinition ws = Cache.ServiceLocator.WritingSystems.DefaultVernacularWritingSystem;  							if (ws.RightToLeftScript)  								vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft' (int)FwTextPropVar.ktpvEnum' -1);  							// defaults for table settings.  							VwLength vlWidth = new VwLength();  							// For now only support percent of available width; actual unit is  							// 100ths of a percent' so 10000 is 100%' i.e.' take up all available  							// width  							vlWidth.nVal = XmlUtils.GetOptionalIntegerValue(frag' "width"' 10000);  							vlWidth.unit = VwUnit.kunPercent100;    							XmlAttribute xa = frag.Attributes["columns"];  							if (xa != null && xa.Value == "%ColumnCount")  							{  								// This is a kludge currently used only for MoInflAffixTemplate.  								// Set up the dependencies so the table gets reconstructed if the  								// prefixes or suffixes change.  								vwenv.NoteDependency(new[] { hvo' hvo }'  									new[] { MoInflAffixTemplateTags.kflidPrefixSlots'  										MoInflAffixTemplateTags.kflidSuffixSlots }'  									2);  							}      							// Open the table  							vwenv.OpenTable(GetColCount(frag' hvo)'  								vlWidth'  								XmlUtils.GetOptionalIntegerValue(frag' "border"' 0)'  								GetAlignment(frag)'  								GetFramePositions(frag)'  								GetRules(frag)'  								XmlUtils.GetOptionalIntegerValue(frag' "spacing"' 0)'  								XmlUtils.GetOptionalIntegerValue(frag' "padding"' 0)'  								false);  							ProcessColumnSpecs(frag' vwenv' hvo);  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTable();  							break;  						}  					case "header":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableHeader();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableHeader();  							break;  						}  					case "footer":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableFooter();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableFooter();  							break;  						}  					case "body":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableBody();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableBody();  							break;  						}  					case "row":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableRow();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableRow();  							break;  						}  					case "cell":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableCell(XmlUtils.GetOptionalIntegerValue(frag' "spanrows"' 1)'  								XmlUtils.GetOptionalIntegerValue(frag' "spancols"' 1));  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableCell();  							break;  						}  					case "headercell":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableHeaderCell(XmlUtils.GetOptionalIntegerValue(frag' "spanrows"' 1)'  								XmlUtils.GetOptionalIntegerValue(frag' "spancols"' 1));  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableHeaderCell();  							break;  						}  					// Deprecated' but still the only way to do some things until  					// we have individual property nodes for everything.  					case "mod":  						{  							int tpt = Convert.ToInt32(frag.Attributes["prop"].Value' 10);  							int var = Convert.ToInt32(frag.Attributes["var"].Value' 10);  							int val = Convert.ToInt32(frag.Attributes["val"].Value' 10);  							vwenv.set_IntProperty(tpt' var' val);  							break;  						}  					case "seq":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // can't do anything. Report?    							int fragId = GetSubFragIdSeq(frag' caller);  							if (fragId == 0)  								return; // something badly wrong.  							AddObjectVector(frag' vwenv' flid' fragId' caller);  							break;  						}  					case "objectOfRowUsingViewConstructor": // display the current object using an external VC.  						//notice this assumes that it wants a LcmCache as an argument  						IVwViewConstructor vc =  							(IVwViewConstructor)SIL.Utils.DynamicLoader.CreateObject(frag'  							new Object[] { m_cache });  						int selectorId =  							Convert.ToInt32(XmlUtils.GetMandatoryAttributeValue(frag' "selector"));  						// Note this is AddObj' not AddObjProp' and it explicitly adds the current object using the new vc and fragId  						vwenv.AddObj(hvo' vc' selectorId);  						break;    					case "obj":  						{  							int flid = GetFlid(frag' hvo);  							int fragId = GetSubFragId(frag' caller);  							if (flid == 0 || fragId == 0)  								return; // something badly wrong.  							AddObject(frag' vwenv' flid' fragId' caller' hvo);  							break;  						}  					case "objlocal":  						{  							// Display the object in the specified atomic property' using a fragment which causes  							// the children of this node to be processed' using our caller for params.  							// This is like an 'obj' element' but instead of displaying the target object using  							// one of its own views' we effectively display it using parts specified right in this node.  							// This is especially useful for parts which want to pull in writing system specs from the caller.  							int flid = GetFlid(frag' hvo);  							int fragId = GetId(new ObjLocalCommand(frag' caller)' m_idToDisplayCommand' m_displayCommandToId);  							vwenv.AddObjProp(flid' this' fragId);  							break;  						}  					case "int":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							MarkSource(vwenv' caller);  							vwenv.AddIntProp(flid);  							break;  						}  					case "gendate":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							int formatFrag = VwBaseVc.kfragGenDateLong;  							var formatAttr = frag.Attributes["format"];  							if (vwenv is SortCollectorEnv)  							{  								formatFrag = VwBaseVc.kfragGenDateSort;  							}  							else if (formatAttr != null)  							{  								switch (formatAttr.InnerText.ToLowerInvariant())  								{  									case "short":  										formatFrag = VwBaseVc.kfragGenDateShort;  										break;  									case "long":  										formatFrag = VwBaseVc.kfragGenDateLong;  										break;  									case "sort":  										formatFrag = VwBaseVc.kfragGenDateSort;  										break;  									default:  										throw new ConfigurationException("Invalid format attribute value"' frag);  								}  							}    							// the actual display of a GenDate property is handled in the VwBaseVc.DisplayVariant method  							MarkSource(vwenv' caller);  							vwenv.AddProp(flid' this' formatFrag);  							break;  						}  					case "datetime":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.    							CellarPropertyType itype = (CellarPropertyType)m_sda.MetaDataCache.GetFieldType(flid);  							if (itype == CellarPropertyType.Time)  							{  								DateTime dt = SilTime.GetTimeProperty(m_sda' hvo' flid);  								XmlNode dtNode = XmlViewsUtils.CopyWithParamDefaults(frag);  								string format;  								if (vwenv is SortCollectorEnv)  									format = DateTimeFormatInfo.InvariantInfo.SortableDateTimePattern;  								else  									format = XmlUtils.GetOptionalAttributeValue(dtNode' "format");  								string formattedDateTime;  								try  								{  									if (format != null)  									{  										formattedDateTime = dt.ToString(format' DateTimeFormatInfo.CurrentInfo);  									}  									else  									{  										// "G" format takes user's system ShortDate format appended by system LongTime format.  										formattedDateTime = dt.ToString("G"' DateTimeFormatInfo.CurrentInfo);  									}  								}  								catch (FormatException e)  								{  									string errorMsg = "Invalid datetime format attribute (" + format + ") in " + e.Source;  									throw new ConfigurationException(errorMsg' frag' e);  								}  								int systemWs = m_cache.ServiceLocator.WritingSystemManager.UserWs;  								ITsString tss = TsStringUtils.MakeString(formattedDateTime' systemWs);  								if (vwenv is ConfiguredExport)  									vwenv.AddTimeProp(flid' 0);  								AddStringThatCounts(vwenv' tss' caller);  							}  							else  							{  								string stFieldName = XmlUtils.GetMandatoryAttributeValue(frag' "field");  								throw new Exception("Bad field type (" + stFieldName + " for hvo " + hvo + " found for " +  									frag.Name + "  property " + flid + " in " + frag.OuterXml);  							}  							break;  						}  					case "iconInt":  						{  							throw new InvalidOperationException("Obsolete system use for 'iconInt'.");  							/*  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							//temp  							int min = Int32.Parse(XmlUtils.GetOptionalAttributeValue(frag' "min"' "0"));  							int max = Int32.Parse(XmlUtils.GetMandatoryAttributeValue(frag' "max"));  							// Get an ID that simply identifies the pictureValues child. This is used in DisplayPicture.  							int fragId = GetId(frag.SelectSingleNode("picturevalues")' m_idToDisplayCommand' m_displayCommandToId);  							vwenv.AddIntPropPic(flid' this' fragId' min' max);  							break;  							*/  						}  					case "commandIcon":  						{  							AddCommandIcon(frag' vwenv' hvo);  							break;  						}  					case "lit":  						{  							// Default to UI writing system.  							string literal = frag.InnerText;  							string sTranslate = XmlUtils.GetOptionalAttributeValue(frag' "translate"' "");  							if (sTranslate.Trim().ToLower() != "do not translate")  								literal = StringTable.Table.LocalizeLiteralValue(literal);  							string sWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  							int ws;  							if (sWs != null)  								ws = m_cache.WritingSystemFactory.GetWsFromStr(sWs);  							else  								ws = m_cache.WritingSystemFactory.UserWs;  							vwenv.AddString(TsStringUtils.MakeString(literal' ws));  							break;  						}  					case "if":  						{  							if (ConditionPasses(vwenv' frag' hvo' m_cache' m_sda' caller))  								ProcessChildren(frag' vwenv' hvo' caller);  							break;  						}  					case "ifnot":  						{  							if (!ConditionPasses(vwenv' frag' hvo' m_cache' m_sda' caller))  								ProcessChildren(frag' vwenv' hvo' caller);  							break;  						}  					case "choice":  						{  							foreach (XmlNode clause in frag.ChildNodes)  							{  								if (clause.Name == "where")  								{  									if (ConditionPasses(vwenv' clause' hvo' m_cache' m_sda' caller))  									{  										ProcessChildren(clause' vwenv' hvo' caller);  										break;  									}  								}  								else if (clause.Name == "otherwise")  								{  									// enhance: verify last node?  									ProcessChildren(clause' vwenv' hvo' caller);  									break;  								}  								else  								{  									throw new Exception("elements in choice must be where or otherwise");  								}  							}  							break;  						}  					case "stringList":  						{  							string[] labels;  							if (!m_StringsFromListNode.TryGetValue(frag' out labels))  							{  								labels = StringTable.Table.GetStringsFromStringListNode(frag);  								m_StringsFromListNode[frag] = labels;  							}  							int flid = GetFlid(frag' hvo);  							int value = m_sda.get_IntProp(hvo' flid);  							if ((value >= 0) &&  								(value < labels.Length))  							{  								int wsUi = m_cache.WritingSystemFactory.UserWs;  								ITsString tss = TsStringUtils.MakeString(labels[value]' wsUi);  								vwenv.AddString(tss);  								NoteDependency(vwenv' hvo' flid);  							}  							break;  						}  					case "multiling":  						{  							ProcessMultiLingualChildren(frag' vwenv' hvo);  							break;  						}  					case "labelws":  						{  							if (s_cwsMulti > 1)  							{  								DisplayMultiSep(frag' vwenv' m_cache);  								DisplayWsLabel(s_qwsCurrent' vwenv' m_cache);  							}  							break;  						}  					case "part":  						// This occurs when the node we're processing is a child of a layout'  						// and therefore a 'part ref'. It calls the specified part of the current object.    						// Some configuration items' like senses' will not display themselves if their type has already been shown  						// i.e. when displaying a sense any attempt to display sense info under the child of a sense is ignored.  						// in certain circumstances' like when a minor entry is the component of a sense of a main entry you need to display  						// the senses of the subentry. The following code will allow that to be specified in the configuration xml.  						bool wasIgnoring = ShouldIgnoreGramInfo;  						if (frag.Attributes != null && frag.Attributes["forceSubentryDisplay"] != null)  						{  							ShouldIgnoreGramInfo = !Boolean.Parse(frag.Attributes["forceSubentryDisplay"].Value);  						}  						ProcessPartRef(frag' hvo' vwenv);  						ShouldIgnoreGramInfo = wasIgnoring;  						break;  					case "sublayout":  						string layoutName = XmlUtils.GetOptionalAttributeValue(frag' "name"' null);  						XmlNode layout;  						if (frag.ChildNodes.Count > 0 && layoutName == null)  						{  							layout = frag;  						}  						else  						{  							// This will potentially also find a part' which we don't want here.  							layout = GetNodeForPart(hvo' layoutName' true);  							if (layout.Name != "layout")  								throw new Exception("sublayout must refer to layout' not part");  						}  						string group = XmlUtils.GetOptionalAttributeValue(frag' "group"' "");  						switch (group)  						{  							case "para":  								if (vwenv.IsParagraphOpen())  								{  									group = ""; // suppress CloseParagraph  									break; // don't start our own paragraph if some caller did it for us.  								}  								string style = XmlUtils.GetOptionalAttributeValue(frag' "style"' null);  								if (style == null)  								{  									if (caller != null)  									{  										style = GetParaStyle(caller);  									}  									else  									{  										foreach (var parent in m_stackPartRef)  										{  											style = GetParaStyle(parent);  											if (style != null)  												break;  										}  									}  								}  								else if (m_stackPartRef.Count > 0)  								{  									// Check whether we want to replace the given style due to recursive reuse.  									// (See LT-10400.)  									var callingFrag = m_stackPartRef[0];  									if (!XmlUtils.GetOptionalBooleanAttributeValue(callingFrag' "recurseConfig"' true) &&  										XmlUtils.GetOptionalAttributeValue(callingFrag' "flowType") == "div" &&  										!String.IsNullOrEmpty(GetParaStyle(callingFrag)))  									{  										style = GetParaStyle(callingFrag);  									}  								}  								GetParagraphStyleIfPara(hvo' ref style);  								if (style != null)  									vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' style);  								vwenv.OpenParagraph();  								break;  							case "innerpile":  								vwenv.OpenInnerPile();  								break;  							default:  								break;  						}  						ProcessChildren(layout' vwenv' hvo' frag);  						switch (group)  						{  							case "para":  								vwenv.CloseParagraph();  								break;  							case "innerpile":  								vwenv.CloseInnerPile();  								break;  							default:  								break;  						}  						break;  					case "picture": // current object is a CmPicture' display the picture.  						{  							var picture = m_cache.ServiceLocator.GetInstance<ICmPictureRepository>().GetObject(hvo);  							if (picture.PictureFileRA == null)  								break; // nothing we can show. // Enhance: should we insert some sort of error?    							string imagePath = picture.PictureFileRA.AbsoluteInternalPath;  							if (String.IsNullOrEmpty(imagePath))  								break;  							var picturePathCollector = vwenv as ICollectPicturePathsOnly;  							if (picturePathCollector != null)  							{  								if (File.Exists(FileUtils.ActualFilePath(imagePath)))  								{  									picturePathCollector.APictureIsBeingAdded();  								}  								// for export' we want the path' but not for these other cases.  (LT-5326)  								// There might be a more efficient way to do this' e.g.' by adding to ICollectPicturePathsOnly.  								int fragId = GetSubFragId(frag' caller);  								vwenv.AddObjProp(CmPictureTags.kflidPictureFile' this' fragId);  								break; // whether it exists or not' don't actually make the picture. This can run us out of memory on export (LT-13704)  							}  							IPicture comPicture = GetComPicture(imagePath);  							if (comPicture != null)  							{  								MarkSource(vwenv' caller);  								int height = XmlUtils.GetOptionalIntegerValue(frag' "height"' 0);  								int width = XmlUtils.GetOptionalIntegerValue(frag' "width"' 0);  								vwenv.AddPicture(comPicture' 1' width' height);  							}    						}  						break;  					// A generate node may occur in a layout element' but doesn't do anything when executed.  					case "generate":  						break;  					case "savehvo":  						m_stackHvo.Push(hvo);  						ProcessChildren(frag' vwenv' hvo' caller);  						m_stackHvo.Pop();  						break;  				}  			}  			catch (SIL.Utils.ConfigurationException)  			{  				throw;  			}  			catch (Exception error)  			{  				throw new SIL.Utils.ConfigurationException(  					"There was an error processing this fragment. " + error.Message' frag' error);  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessFrag,The following statement contains a magic number: try  			{  				switch (frag.Name)  				{  					default:  						Debug.Assert(false' "unrecognized XML node.");  						break;  					case "string":  						{  							int hvoTarget = hvo;  							GetActualTarget(frag' ref hvoTarget' m_sda);	// modify the hvo if needed  							if (hvo != hvoTarget)  							{  								AddStringFromOtherObj(frag' hvoTarget' vwenv' caller);  								break;  							}  							int flid = 0;  							if (TryCustomField(m_sda' frag' hvo' out flid))  							{  								// ignore invalid custom fields (LT-6474).  								if (flid == 0)  									break;  							}  							else  							{  								// Could still be an invalid CustomField that TryCustomField couldn't detect.  								if (!TryGetFlid(frag' hvoTarget' out flid))  									break;  							}    							int itype = m_sda.MetaDataCache.GetFieldType(flid);  							itype = itype & (int)CellarPropertyTypeFilter.VirtualMask;  							if (itype == (int)CellarPropertyType.Unicode)  							{  								int wsForUnicode = GetWritingSystemForObject(frag'  									hvo'  									flid'  									m_wsReversal == 0 ? m_cache.DefaultUserWs : m_wsReversal);  								vwenv.AddUnicodeProp(flid' wsForUnicode' this);  							}  							else if (itype == (int)CellarPropertyType.String)  							{  								MarkSource(vwenv' caller);  								vwenv.AddStringProp(flid' this);  							}  							else // multistring of some type  							{  								if (s_cwsMulti > 1)  								{  									string sLabelWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  									if (sLabelWs != null && sLabelWs == "current")  									{  										MarkSource(vwenv' caller);  										vwenv.OpenSpan();  										DisplayMultiSep(frag' vwenv' m_cache);  										DisplayWsLabel(s_qwsCurrent' vwenv' m_cache);  										if (s_qwsCurrent != null)  										{  											vwenv.AddStringAltMember(flid' s_qwsCurrent.Handle' this);  									}  										vwenv.CloseSpan();  								}  								}  								else  								{  									int wsid = GetWritingSystemForObject(frag'  										hvo'  										flid'  										m_wsReversal == 0 ? m_cache.DefaultUserWs : m_wsReversal);  									MarkSource(vwenv' caller);  									vwenv.AddStringAltMember(flid' wsid' this);  								}  							}  							break;  						}  					case "computedString":  						{  							// For example:  							// <part id="FsFeatStruc-Jt-PhonFeats_$fieldName" type="jtview">  							//   <computedString method="GetFeatureValueTSS" argument="$fieldName"/>  							// </part>  							var obj = m_cache.ServiceLocator.GetInstance<ICmObjectRepository>().GetObject(hvo);  							string method = XmlUtils.GetAttributeValue(frag' "method");  							if (!String.IsNullOrEmpty(method))  							{  								Type objType = obj.GetType();  								System.Reflection.MethodInfo mi = objType.GetMethod(method);  								if (mi != null)  								{  									string argument = XmlUtils.GetAttributeValue(frag' "argument");  									if (!String.IsNullOrEmpty(argument))  									{  										var value = (ITsString)mi.Invoke(obj' new object[] {argument});  										vwenv.AddString(value);  									}  								}  							}  							break;  						}  					case "configureMlString":  						{  							int hvoTarget = hvo;  							GetActualTarget(frag' ref hvoTarget' m_sda);	// modify the hvo if needed  							int flid = 0;  							if (TryCustomField(m_sda' frag' hvoTarget' out flid))  							{  								// ignore invalid custom fields (LT-6474).  								if (flid == 0)  									break;  							}  							else  							{  								// Could still be an invalid CustomField that TryCustomField couldn't detect.  								if (!TryGetFlid(frag' hvoTarget' out flid))  									break;  							}  							// The Ws info specified in the part ref node  							HashSet<int> wsIds;  							string sWs = XmlUtils.GetOptionalAttributeValue(caller' "ws");  							if (sWs == "reversal")  							{  								wsIds = new HashSet<int> {m_wsReversal};  							}  							else  							{  								wsIds = WritingSystemServices.GetAllWritingSystems(m_cache' caller' null' hvoTarget' flid);  							}  							if (wsIds.Count == 1)  							{  								if (hvoTarget != hvo)  									DisplayOtherObjStringAlt(flid' wsIds.First()' vwenv' hvoTarget' caller);  								else  								{  									MarkSource(vwenv' caller);  									vwenv.AddStringAltMember(flid' wsIds.First()' this);  							}  							}  							else  							{  								AddMultipleAlternatives(wsIds' vwenv' hvoTarget' flid' caller' hvoTarget == hvo);  							}  							break;  						}  					case "para":  						{  							ProcessProperties(frag' vwenv);  							var props = XmlUtils.GetFirstNonCommentChild(frag);  							if ((props == null || props.Name != "properties") && caller != null)  							{  								var style = XmlUtils.GetOptionalAttributeValue(caller' "style");  								if (!String.IsNullOrEmpty(style))  									vwenv.set_StringProperty((int) FwTextPropType.ktptNamedStyle' style);  							}  							// Note: the following assertion is indicative of not setting colSpec attribute multipara="true"  							// VwEnv.cpp: Assertion failed "Expression: dynamic_cast<VwPileBox *>(m_pgboxCurr)"  							vwenv.OpenParagraph();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseParagraph();  							break;  						}  					case "concpara":  						{  							OpenConcordanceParagraph(vwenv' hvo' frag);  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseParagraph();  							break;  						}  					case "div":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenDiv();  							ProcessChildren(frag' vwenv' hvo' caller);	// caller used for numbering subrecords  							vwenv.CloseDiv();  							break;  						}  					case "innerpile":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenInnerPile();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseInnerPile();  							break;  						}  					case "span":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenSpan();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseSpan();  							break;  						}  					case "table":  						{  							ProcessProperties(frag' vwenv);  							CoreWritingSystemDefinition ws = Cache.ServiceLocator.WritingSystems.DefaultVernacularWritingSystem;  							if (ws.RightToLeftScript)  								vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft' (int)FwTextPropVar.ktpvEnum' -1);  							// defaults for table settings.  							VwLength vlWidth = new VwLength();  							// For now only support percent of available width; actual unit is  							// 100ths of a percent' so 10000 is 100%' i.e.' take up all available  							// width  							vlWidth.nVal = XmlUtils.GetOptionalIntegerValue(frag' "width"' 10000);  							vlWidth.unit = VwUnit.kunPercent100;    							XmlAttribute xa = frag.Attributes["columns"];  							if (xa != null && xa.Value == "%ColumnCount")  							{  								// This is a kludge currently used only for MoInflAffixTemplate.  								// Set up the dependencies so the table gets reconstructed if the  								// prefixes or suffixes change.  								vwenv.NoteDependency(new[] { hvo' hvo }'  									new[] { MoInflAffixTemplateTags.kflidPrefixSlots'  										MoInflAffixTemplateTags.kflidSuffixSlots }'  									2);  							}      							// Open the table  							vwenv.OpenTable(GetColCount(frag' hvo)'  								vlWidth'  								XmlUtils.GetOptionalIntegerValue(frag' "border"' 0)'  								GetAlignment(frag)'  								GetFramePositions(frag)'  								GetRules(frag)'  								XmlUtils.GetOptionalIntegerValue(frag' "spacing"' 0)'  								XmlUtils.GetOptionalIntegerValue(frag' "padding"' 0)'  								false);  							ProcessColumnSpecs(frag' vwenv' hvo);  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTable();  							break;  						}  					case "header":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableHeader();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableHeader();  							break;  						}  					case "footer":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableFooter();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableFooter();  							break;  						}  					case "body":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableBody();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableBody();  							break;  						}  					case "row":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableRow();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableRow();  							break;  						}  					case "cell":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableCell(XmlUtils.GetOptionalIntegerValue(frag' "spanrows"' 1)'  								XmlUtils.GetOptionalIntegerValue(frag' "spancols"' 1));  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableCell();  							break;  						}  					case "headercell":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableHeaderCell(XmlUtils.GetOptionalIntegerValue(frag' "spanrows"' 1)'  								XmlUtils.GetOptionalIntegerValue(frag' "spancols"' 1));  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableHeaderCell();  							break;  						}  					// Deprecated' but still the only way to do some things until  					// we have individual property nodes for everything.  					case "mod":  						{  							int tpt = Convert.ToInt32(frag.Attributes["prop"].Value' 10);  							int var = Convert.ToInt32(frag.Attributes["var"].Value' 10);  							int val = Convert.ToInt32(frag.Attributes["val"].Value' 10);  							vwenv.set_IntProperty(tpt' var' val);  							break;  						}  					case "seq":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // can't do anything. Report?    							int fragId = GetSubFragIdSeq(frag' caller);  							if (fragId == 0)  								return; // something badly wrong.  							AddObjectVector(frag' vwenv' flid' fragId' caller);  							break;  						}  					case "objectOfRowUsingViewConstructor": // display the current object using an external VC.  						//notice this assumes that it wants a LcmCache as an argument  						IVwViewConstructor vc =  							(IVwViewConstructor)SIL.Utils.DynamicLoader.CreateObject(frag'  							new Object[] { m_cache });  						int selectorId =  							Convert.ToInt32(XmlUtils.GetMandatoryAttributeValue(frag' "selector"));  						// Note this is AddObj' not AddObjProp' and it explicitly adds the current object using the new vc and fragId  						vwenv.AddObj(hvo' vc' selectorId);  						break;    					case "obj":  						{  							int flid = GetFlid(frag' hvo);  							int fragId = GetSubFragId(frag' caller);  							if (flid == 0 || fragId == 0)  								return; // something badly wrong.  							AddObject(frag' vwenv' flid' fragId' caller' hvo);  							break;  						}  					case "objlocal":  						{  							// Display the object in the specified atomic property' using a fragment which causes  							// the children of this node to be processed' using our caller for params.  							// This is like an 'obj' element' but instead of displaying the target object using  							// one of its own views' we effectively display it using parts specified right in this node.  							// This is especially useful for parts which want to pull in writing system specs from the caller.  							int flid = GetFlid(frag' hvo);  							int fragId = GetId(new ObjLocalCommand(frag' caller)' m_idToDisplayCommand' m_displayCommandToId);  							vwenv.AddObjProp(flid' this' fragId);  							break;  						}  					case "int":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							MarkSource(vwenv' caller);  							vwenv.AddIntProp(flid);  							break;  						}  					case "gendate":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							int formatFrag = VwBaseVc.kfragGenDateLong;  							var formatAttr = frag.Attributes["format"];  							if (vwenv is SortCollectorEnv)  							{  								formatFrag = VwBaseVc.kfragGenDateSort;  							}  							else if (formatAttr != null)  							{  								switch (formatAttr.InnerText.ToLowerInvariant())  								{  									case "short":  										formatFrag = VwBaseVc.kfragGenDateShort;  										break;  									case "long":  										formatFrag = VwBaseVc.kfragGenDateLong;  										break;  									case "sort":  										formatFrag = VwBaseVc.kfragGenDateSort;  										break;  									default:  										throw new ConfigurationException("Invalid format attribute value"' frag);  								}  							}    							// the actual display of a GenDate property is handled in the VwBaseVc.DisplayVariant method  							MarkSource(vwenv' caller);  							vwenv.AddProp(flid' this' formatFrag);  							break;  						}  					case "datetime":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.    							CellarPropertyType itype = (CellarPropertyType)m_sda.MetaDataCache.GetFieldType(flid);  							if (itype == CellarPropertyType.Time)  							{  								DateTime dt = SilTime.GetTimeProperty(m_sda' hvo' flid);  								XmlNode dtNode = XmlViewsUtils.CopyWithParamDefaults(frag);  								string format;  								if (vwenv is SortCollectorEnv)  									format = DateTimeFormatInfo.InvariantInfo.SortableDateTimePattern;  								else  									format = XmlUtils.GetOptionalAttributeValue(dtNode' "format");  								string formattedDateTime;  								try  								{  									if (format != null)  									{  										formattedDateTime = dt.ToString(format' DateTimeFormatInfo.CurrentInfo);  									}  									else  									{  										// "G" format takes user's system ShortDate format appended by system LongTime format.  										formattedDateTime = dt.ToString("G"' DateTimeFormatInfo.CurrentInfo);  									}  								}  								catch (FormatException e)  								{  									string errorMsg = "Invalid datetime format attribute (" + format + ") in " + e.Source;  									throw new ConfigurationException(errorMsg' frag' e);  								}  								int systemWs = m_cache.ServiceLocator.WritingSystemManager.UserWs;  								ITsString tss = TsStringUtils.MakeString(formattedDateTime' systemWs);  								if (vwenv is ConfiguredExport)  									vwenv.AddTimeProp(flid' 0);  								AddStringThatCounts(vwenv' tss' caller);  							}  							else  							{  								string stFieldName = XmlUtils.GetMandatoryAttributeValue(frag' "field");  								throw new Exception("Bad field type (" + stFieldName + " for hvo " + hvo + " found for " +  									frag.Name + "  property " + flid + " in " + frag.OuterXml);  							}  							break;  						}  					case "iconInt":  						{  							throw new InvalidOperationException("Obsolete system use for 'iconInt'.");  							/*  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							//temp  							int min = Int32.Parse(XmlUtils.GetOptionalAttributeValue(frag' "min"' "0"));  							int max = Int32.Parse(XmlUtils.GetMandatoryAttributeValue(frag' "max"));  							// Get an ID that simply identifies the pictureValues child. This is used in DisplayPicture.  							int fragId = GetId(frag.SelectSingleNode("picturevalues")' m_idToDisplayCommand' m_displayCommandToId);  							vwenv.AddIntPropPic(flid' this' fragId' min' max);  							break;  							*/  						}  					case "commandIcon":  						{  							AddCommandIcon(frag' vwenv' hvo);  							break;  						}  					case "lit":  						{  							// Default to UI writing system.  							string literal = frag.InnerText;  							string sTranslate = XmlUtils.GetOptionalAttributeValue(frag' "translate"' "");  							if (sTranslate.Trim().ToLower() != "do not translate")  								literal = StringTable.Table.LocalizeLiteralValue(literal);  							string sWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  							int ws;  							if (sWs != null)  								ws = m_cache.WritingSystemFactory.GetWsFromStr(sWs);  							else  								ws = m_cache.WritingSystemFactory.UserWs;  							vwenv.AddString(TsStringUtils.MakeString(literal' ws));  							break;  						}  					case "if":  						{  							if (ConditionPasses(vwenv' frag' hvo' m_cache' m_sda' caller))  								ProcessChildren(frag' vwenv' hvo' caller);  							break;  						}  					case "ifnot":  						{  							if (!ConditionPasses(vwenv' frag' hvo' m_cache' m_sda' caller))  								ProcessChildren(frag' vwenv' hvo' caller);  							break;  						}  					case "choice":  						{  							foreach (XmlNode clause in frag.ChildNodes)  							{  								if (clause.Name == "where")  								{  									if (ConditionPasses(vwenv' clause' hvo' m_cache' m_sda' caller))  									{  										ProcessChildren(clause' vwenv' hvo' caller);  										break;  									}  								}  								else if (clause.Name == "otherwise")  								{  									// enhance: verify last node?  									ProcessChildren(clause' vwenv' hvo' caller);  									break;  								}  								else  								{  									throw new Exception("elements in choice must be where or otherwise");  								}  							}  							break;  						}  					case "stringList":  						{  							string[] labels;  							if (!m_StringsFromListNode.TryGetValue(frag' out labels))  							{  								labels = StringTable.Table.GetStringsFromStringListNode(frag);  								m_StringsFromListNode[frag] = labels;  							}  							int flid = GetFlid(frag' hvo);  							int value = m_sda.get_IntProp(hvo' flid);  							if ((value >= 0) &&  								(value < labels.Length))  							{  								int wsUi = m_cache.WritingSystemFactory.UserWs;  								ITsString tss = TsStringUtils.MakeString(labels[value]' wsUi);  								vwenv.AddString(tss);  								NoteDependency(vwenv' hvo' flid);  							}  							break;  						}  					case "multiling":  						{  							ProcessMultiLingualChildren(frag' vwenv' hvo);  							break;  						}  					case "labelws":  						{  							if (s_cwsMulti > 1)  							{  								DisplayMultiSep(frag' vwenv' m_cache);  								DisplayWsLabel(s_qwsCurrent' vwenv' m_cache);  							}  							break;  						}  					case "part":  						// This occurs when the node we're processing is a child of a layout'  						// and therefore a 'part ref'. It calls the specified part of the current object.    						// Some configuration items' like senses' will not display themselves if their type has already been shown  						// i.e. when displaying a sense any attempt to display sense info under the child of a sense is ignored.  						// in certain circumstances' like when a minor entry is the component of a sense of a main entry you need to display  						// the senses of the subentry. The following code will allow that to be specified in the configuration xml.  						bool wasIgnoring = ShouldIgnoreGramInfo;  						if (frag.Attributes != null && frag.Attributes["forceSubentryDisplay"] != null)  						{  							ShouldIgnoreGramInfo = !Boolean.Parse(frag.Attributes["forceSubentryDisplay"].Value);  						}  						ProcessPartRef(frag' hvo' vwenv);  						ShouldIgnoreGramInfo = wasIgnoring;  						break;  					case "sublayout":  						string layoutName = XmlUtils.GetOptionalAttributeValue(frag' "name"' null);  						XmlNode layout;  						if (frag.ChildNodes.Count > 0 && layoutName == null)  						{  							layout = frag;  						}  						else  						{  							// This will potentially also find a part' which we don't want here.  							layout = GetNodeForPart(hvo' layoutName' true);  							if (layout.Name != "layout")  								throw new Exception("sublayout must refer to layout' not part");  						}  						string group = XmlUtils.GetOptionalAttributeValue(frag' "group"' "");  						switch (group)  						{  							case "para":  								if (vwenv.IsParagraphOpen())  								{  									group = ""; // suppress CloseParagraph  									break; // don't start our own paragraph if some caller did it for us.  								}  								string style = XmlUtils.GetOptionalAttributeValue(frag' "style"' null);  								if (style == null)  								{  									if (caller != null)  									{  										style = GetParaStyle(caller);  									}  									else  									{  										foreach (var parent in m_stackPartRef)  										{  											style = GetParaStyle(parent);  											if (style != null)  												break;  										}  									}  								}  								else if (m_stackPartRef.Count > 0)  								{  									// Check whether we want to replace the given style due to recursive reuse.  									// (See LT-10400.)  									var callingFrag = m_stackPartRef[0];  									if (!XmlUtils.GetOptionalBooleanAttributeValue(callingFrag' "recurseConfig"' true) &&  										XmlUtils.GetOptionalAttributeValue(callingFrag' "flowType") == "div" &&  										!String.IsNullOrEmpty(GetParaStyle(callingFrag)))  									{  										style = GetParaStyle(callingFrag);  									}  								}  								GetParagraphStyleIfPara(hvo' ref style);  								if (style != null)  									vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' style);  								vwenv.OpenParagraph();  								break;  							case "innerpile":  								vwenv.OpenInnerPile();  								break;  							default:  								break;  						}  						ProcessChildren(layout' vwenv' hvo' frag);  						switch (group)  						{  							case "para":  								vwenv.CloseParagraph();  								break;  							case "innerpile":  								vwenv.CloseInnerPile();  								break;  							default:  								break;  						}  						break;  					case "picture": // current object is a CmPicture' display the picture.  						{  							var picture = m_cache.ServiceLocator.GetInstance<ICmPictureRepository>().GetObject(hvo);  							if (picture.PictureFileRA == null)  								break; // nothing we can show. // Enhance: should we insert some sort of error?    							string imagePath = picture.PictureFileRA.AbsoluteInternalPath;  							if (String.IsNullOrEmpty(imagePath))  								break;  							var picturePathCollector = vwenv as ICollectPicturePathsOnly;  							if (picturePathCollector != null)  							{  								if (File.Exists(FileUtils.ActualFilePath(imagePath)))  								{  									picturePathCollector.APictureIsBeingAdded();  								}  								// for export' we want the path' but not for these other cases.  (LT-5326)  								// There might be a more efficient way to do this' e.g.' by adding to ICollectPicturePathsOnly.  								int fragId = GetSubFragId(frag' caller);  								vwenv.AddObjProp(CmPictureTags.kflidPictureFile' this' fragId);  								break; // whether it exists or not' don't actually make the picture. This can run us out of memory on export (LT-13704)  							}  							IPicture comPicture = GetComPicture(imagePath);  							if (comPicture != null)  							{  								MarkSource(vwenv' caller);  								int height = XmlUtils.GetOptionalIntegerValue(frag' "height"' 0);  								int width = XmlUtils.GetOptionalIntegerValue(frag' "width"' 0);  								vwenv.AddPicture(comPicture' 1' width' height);  							}    						}  						break;  					// A generate node may occur in a layout element' but doesn't do anything when executed.  					case "generate":  						break;  					case "savehvo":  						m_stackHvo.Push(hvo);  						ProcessChildren(frag' vwenv' hvo' caller);  						m_stackHvo.Pop();  						break;  				}  			}  			catch (SIL.Utils.ConfigurationException)  			{  				throw;  			}  			catch (Exception error)  			{  				throw new SIL.Utils.ConfigurationException(  					"There was an error processing this fragment. " + error.Message' frag' error);  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessFrag,The following statement contains a magic number: try  			{  				switch (frag.Name)  				{  					default:  						Debug.Assert(false' "unrecognized XML node.");  						break;  					case "string":  						{  							int hvoTarget = hvo;  							GetActualTarget(frag' ref hvoTarget' m_sda);	// modify the hvo if needed  							if (hvo != hvoTarget)  							{  								AddStringFromOtherObj(frag' hvoTarget' vwenv' caller);  								break;  							}  							int flid = 0;  							if (TryCustomField(m_sda' frag' hvo' out flid))  							{  								// ignore invalid custom fields (LT-6474).  								if (flid == 0)  									break;  							}  							else  							{  								// Could still be an invalid CustomField that TryCustomField couldn't detect.  								if (!TryGetFlid(frag' hvoTarget' out flid))  									break;  							}    							int itype = m_sda.MetaDataCache.GetFieldType(flid);  							itype = itype & (int)CellarPropertyTypeFilter.VirtualMask;  							if (itype == (int)CellarPropertyType.Unicode)  							{  								int wsForUnicode = GetWritingSystemForObject(frag'  									hvo'  									flid'  									m_wsReversal == 0 ? m_cache.DefaultUserWs : m_wsReversal);  								vwenv.AddUnicodeProp(flid' wsForUnicode' this);  							}  							else if (itype == (int)CellarPropertyType.String)  							{  								MarkSource(vwenv' caller);  								vwenv.AddStringProp(flid' this);  							}  							else // multistring of some type  							{  								if (s_cwsMulti > 1)  								{  									string sLabelWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  									if (sLabelWs != null && sLabelWs == "current")  									{  										MarkSource(vwenv' caller);  										vwenv.OpenSpan();  										DisplayMultiSep(frag' vwenv' m_cache);  										DisplayWsLabel(s_qwsCurrent' vwenv' m_cache);  										if (s_qwsCurrent != null)  										{  											vwenv.AddStringAltMember(flid' s_qwsCurrent.Handle' this);  									}  										vwenv.CloseSpan();  								}  								}  								else  								{  									int wsid = GetWritingSystemForObject(frag'  										hvo'  										flid'  										m_wsReversal == 0 ? m_cache.DefaultUserWs : m_wsReversal);  									MarkSource(vwenv' caller);  									vwenv.AddStringAltMember(flid' wsid' this);  								}  							}  							break;  						}  					case "computedString":  						{  							// For example:  							// <part id="FsFeatStruc-Jt-PhonFeats_$fieldName" type="jtview">  							//   <computedString method="GetFeatureValueTSS" argument="$fieldName"/>  							// </part>  							var obj = m_cache.ServiceLocator.GetInstance<ICmObjectRepository>().GetObject(hvo);  							string method = XmlUtils.GetAttributeValue(frag' "method");  							if (!String.IsNullOrEmpty(method))  							{  								Type objType = obj.GetType();  								System.Reflection.MethodInfo mi = objType.GetMethod(method);  								if (mi != null)  								{  									string argument = XmlUtils.GetAttributeValue(frag' "argument");  									if (!String.IsNullOrEmpty(argument))  									{  										var value = (ITsString)mi.Invoke(obj' new object[] {argument});  										vwenv.AddString(value);  									}  								}  							}  							break;  						}  					case "configureMlString":  						{  							int hvoTarget = hvo;  							GetActualTarget(frag' ref hvoTarget' m_sda);	// modify the hvo if needed  							int flid = 0;  							if (TryCustomField(m_sda' frag' hvoTarget' out flid))  							{  								// ignore invalid custom fields (LT-6474).  								if (flid == 0)  									break;  							}  							else  							{  								// Could still be an invalid CustomField that TryCustomField couldn't detect.  								if (!TryGetFlid(frag' hvoTarget' out flid))  									break;  							}  							// The Ws info specified in the part ref node  							HashSet<int> wsIds;  							string sWs = XmlUtils.GetOptionalAttributeValue(caller' "ws");  							if (sWs == "reversal")  							{  								wsIds = new HashSet<int> {m_wsReversal};  							}  							else  							{  								wsIds = WritingSystemServices.GetAllWritingSystems(m_cache' caller' null' hvoTarget' flid);  							}  							if (wsIds.Count == 1)  							{  								if (hvoTarget != hvo)  									DisplayOtherObjStringAlt(flid' wsIds.First()' vwenv' hvoTarget' caller);  								else  								{  									MarkSource(vwenv' caller);  									vwenv.AddStringAltMember(flid' wsIds.First()' this);  							}  							}  							else  							{  								AddMultipleAlternatives(wsIds' vwenv' hvoTarget' flid' caller' hvoTarget == hvo);  							}  							break;  						}  					case "para":  						{  							ProcessProperties(frag' vwenv);  							var props = XmlUtils.GetFirstNonCommentChild(frag);  							if ((props == null || props.Name != "properties") && caller != null)  							{  								var style = XmlUtils.GetOptionalAttributeValue(caller' "style");  								if (!String.IsNullOrEmpty(style))  									vwenv.set_StringProperty((int) FwTextPropType.ktptNamedStyle' style);  							}  							// Note: the following assertion is indicative of not setting colSpec attribute multipara="true"  							// VwEnv.cpp: Assertion failed "Expression: dynamic_cast<VwPileBox *>(m_pgboxCurr)"  							vwenv.OpenParagraph();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseParagraph();  							break;  						}  					case "concpara":  						{  							OpenConcordanceParagraph(vwenv' hvo' frag);  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseParagraph();  							break;  						}  					case "div":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenDiv();  							ProcessChildren(frag' vwenv' hvo' caller);	// caller used for numbering subrecords  							vwenv.CloseDiv();  							break;  						}  					case "innerpile":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenInnerPile();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseInnerPile();  							break;  						}  					case "span":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenSpan();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseSpan();  							break;  						}  					case "table":  						{  							ProcessProperties(frag' vwenv);  							CoreWritingSystemDefinition ws = Cache.ServiceLocator.WritingSystems.DefaultVernacularWritingSystem;  							if (ws.RightToLeftScript)  								vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft' (int)FwTextPropVar.ktpvEnum' -1);  							// defaults for table settings.  							VwLength vlWidth = new VwLength();  							// For now only support percent of available width; actual unit is  							// 100ths of a percent' so 10000 is 100%' i.e.' take up all available  							// width  							vlWidth.nVal = XmlUtils.GetOptionalIntegerValue(frag' "width"' 10000);  							vlWidth.unit = VwUnit.kunPercent100;    							XmlAttribute xa = frag.Attributes["columns"];  							if (xa != null && xa.Value == "%ColumnCount")  							{  								// This is a kludge currently used only for MoInflAffixTemplate.  								// Set up the dependencies so the table gets reconstructed if the  								// prefixes or suffixes change.  								vwenv.NoteDependency(new[] { hvo' hvo }'  									new[] { MoInflAffixTemplateTags.kflidPrefixSlots'  										MoInflAffixTemplateTags.kflidSuffixSlots }'  									2);  							}      							// Open the table  							vwenv.OpenTable(GetColCount(frag' hvo)'  								vlWidth'  								XmlUtils.GetOptionalIntegerValue(frag' "border"' 0)'  								GetAlignment(frag)'  								GetFramePositions(frag)'  								GetRules(frag)'  								XmlUtils.GetOptionalIntegerValue(frag' "spacing"' 0)'  								XmlUtils.GetOptionalIntegerValue(frag' "padding"' 0)'  								false);  							ProcessColumnSpecs(frag' vwenv' hvo);  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTable();  							break;  						}  					case "header":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableHeader();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableHeader();  							break;  						}  					case "footer":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableFooter();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableFooter();  							break;  						}  					case "body":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableBody();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableBody();  							break;  						}  					case "row":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableRow();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableRow();  							break;  						}  					case "cell":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableCell(XmlUtils.GetOptionalIntegerValue(frag' "spanrows"' 1)'  								XmlUtils.GetOptionalIntegerValue(frag' "spancols"' 1));  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableCell();  							break;  						}  					case "headercell":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableHeaderCell(XmlUtils.GetOptionalIntegerValue(frag' "spanrows"' 1)'  								XmlUtils.GetOptionalIntegerValue(frag' "spancols"' 1));  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableHeaderCell();  							break;  						}  					// Deprecated' but still the only way to do some things until  					// we have individual property nodes for everything.  					case "mod":  						{  							int tpt = Convert.ToInt32(frag.Attributes["prop"].Value' 10);  							int var = Convert.ToInt32(frag.Attributes["var"].Value' 10);  							int val = Convert.ToInt32(frag.Attributes["val"].Value' 10);  							vwenv.set_IntProperty(tpt' var' val);  							break;  						}  					case "seq":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // can't do anything. Report?    							int fragId = GetSubFragIdSeq(frag' caller);  							if (fragId == 0)  								return; // something badly wrong.  							AddObjectVector(frag' vwenv' flid' fragId' caller);  							break;  						}  					case "objectOfRowUsingViewConstructor": // display the current object using an external VC.  						//notice this assumes that it wants a LcmCache as an argument  						IVwViewConstructor vc =  							(IVwViewConstructor)SIL.Utils.DynamicLoader.CreateObject(frag'  							new Object[] { m_cache });  						int selectorId =  							Convert.ToInt32(XmlUtils.GetMandatoryAttributeValue(frag' "selector"));  						// Note this is AddObj' not AddObjProp' and it explicitly adds the current object using the new vc and fragId  						vwenv.AddObj(hvo' vc' selectorId);  						break;    					case "obj":  						{  							int flid = GetFlid(frag' hvo);  							int fragId = GetSubFragId(frag' caller);  							if (flid == 0 || fragId == 0)  								return; // something badly wrong.  							AddObject(frag' vwenv' flid' fragId' caller' hvo);  							break;  						}  					case "objlocal":  						{  							// Display the object in the specified atomic property' using a fragment which causes  							// the children of this node to be processed' using our caller for params.  							// This is like an 'obj' element' but instead of displaying the target object using  							// one of its own views' we effectively display it using parts specified right in this node.  							// This is especially useful for parts which want to pull in writing system specs from the caller.  							int flid = GetFlid(frag' hvo);  							int fragId = GetId(new ObjLocalCommand(frag' caller)' m_idToDisplayCommand' m_displayCommandToId);  							vwenv.AddObjProp(flid' this' fragId);  							break;  						}  					case "int":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							MarkSource(vwenv' caller);  							vwenv.AddIntProp(flid);  							break;  						}  					case "gendate":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							int formatFrag = VwBaseVc.kfragGenDateLong;  							var formatAttr = frag.Attributes["format"];  							if (vwenv is SortCollectorEnv)  							{  								formatFrag = VwBaseVc.kfragGenDateSort;  							}  							else if (formatAttr != null)  							{  								switch (formatAttr.InnerText.ToLowerInvariant())  								{  									case "short":  										formatFrag = VwBaseVc.kfragGenDateShort;  										break;  									case "long":  										formatFrag = VwBaseVc.kfragGenDateLong;  										break;  									case "sort":  										formatFrag = VwBaseVc.kfragGenDateSort;  										break;  									default:  										throw new ConfigurationException("Invalid format attribute value"' frag);  								}  							}    							// the actual display of a GenDate property is handled in the VwBaseVc.DisplayVariant method  							MarkSource(vwenv' caller);  							vwenv.AddProp(flid' this' formatFrag);  							break;  						}  					case "datetime":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.    							CellarPropertyType itype = (CellarPropertyType)m_sda.MetaDataCache.GetFieldType(flid);  							if (itype == CellarPropertyType.Time)  							{  								DateTime dt = SilTime.GetTimeProperty(m_sda' hvo' flid);  								XmlNode dtNode = XmlViewsUtils.CopyWithParamDefaults(frag);  								string format;  								if (vwenv is SortCollectorEnv)  									format = DateTimeFormatInfo.InvariantInfo.SortableDateTimePattern;  								else  									format = XmlUtils.GetOptionalAttributeValue(dtNode' "format");  								string formattedDateTime;  								try  								{  									if (format != null)  									{  										formattedDateTime = dt.ToString(format' DateTimeFormatInfo.CurrentInfo);  									}  									else  									{  										// "G" format takes user's system ShortDate format appended by system LongTime format.  										formattedDateTime = dt.ToString("G"' DateTimeFormatInfo.CurrentInfo);  									}  								}  								catch (FormatException e)  								{  									string errorMsg = "Invalid datetime format attribute (" + format + ") in " + e.Source;  									throw new ConfigurationException(errorMsg' frag' e);  								}  								int systemWs = m_cache.ServiceLocator.WritingSystemManager.UserWs;  								ITsString tss = TsStringUtils.MakeString(formattedDateTime' systemWs);  								if (vwenv is ConfiguredExport)  									vwenv.AddTimeProp(flid' 0);  								AddStringThatCounts(vwenv' tss' caller);  							}  							else  							{  								string stFieldName = XmlUtils.GetMandatoryAttributeValue(frag' "field");  								throw new Exception("Bad field type (" + stFieldName + " for hvo " + hvo + " found for " +  									frag.Name + "  property " + flid + " in " + frag.OuterXml);  							}  							break;  						}  					case "iconInt":  						{  							throw new InvalidOperationException("Obsolete system use for 'iconInt'.");  							/*  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							//temp  							int min = Int32.Parse(XmlUtils.GetOptionalAttributeValue(frag' "min"' "0"));  							int max = Int32.Parse(XmlUtils.GetMandatoryAttributeValue(frag' "max"));  							// Get an ID that simply identifies the pictureValues child. This is used in DisplayPicture.  							int fragId = GetId(frag.SelectSingleNode("picturevalues")' m_idToDisplayCommand' m_displayCommandToId);  							vwenv.AddIntPropPic(flid' this' fragId' min' max);  							break;  							*/  						}  					case "commandIcon":  						{  							AddCommandIcon(frag' vwenv' hvo);  							break;  						}  					case "lit":  						{  							// Default to UI writing system.  							string literal = frag.InnerText;  							string sTranslate = XmlUtils.GetOptionalAttributeValue(frag' "translate"' "");  							if (sTranslate.Trim().ToLower() != "do not translate")  								literal = StringTable.Table.LocalizeLiteralValue(literal);  							string sWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  							int ws;  							if (sWs != null)  								ws = m_cache.WritingSystemFactory.GetWsFromStr(sWs);  							else  								ws = m_cache.WritingSystemFactory.UserWs;  							vwenv.AddString(TsStringUtils.MakeString(literal' ws));  							break;  						}  					case "if":  						{  							if (ConditionPasses(vwenv' frag' hvo' m_cache' m_sda' caller))  								ProcessChildren(frag' vwenv' hvo' caller);  							break;  						}  					case "ifnot":  						{  							if (!ConditionPasses(vwenv' frag' hvo' m_cache' m_sda' caller))  								ProcessChildren(frag' vwenv' hvo' caller);  							break;  						}  					case "choice":  						{  							foreach (XmlNode clause in frag.ChildNodes)  							{  								if (clause.Name == "where")  								{  									if (ConditionPasses(vwenv' clause' hvo' m_cache' m_sda' caller))  									{  										ProcessChildren(clause' vwenv' hvo' caller);  										break;  									}  								}  								else if (clause.Name == "otherwise")  								{  									// enhance: verify last node?  									ProcessChildren(clause' vwenv' hvo' caller);  									break;  								}  								else  								{  									throw new Exception("elements in choice must be where or otherwise");  								}  							}  							break;  						}  					case "stringList":  						{  							string[] labels;  							if (!m_StringsFromListNode.TryGetValue(frag' out labels))  							{  								labels = StringTable.Table.GetStringsFromStringListNode(frag);  								m_StringsFromListNode[frag] = labels;  							}  							int flid = GetFlid(frag' hvo);  							int value = m_sda.get_IntProp(hvo' flid);  							if ((value >= 0) &&  								(value < labels.Length))  							{  								int wsUi = m_cache.WritingSystemFactory.UserWs;  								ITsString tss = TsStringUtils.MakeString(labels[value]' wsUi);  								vwenv.AddString(tss);  								NoteDependency(vwenv' hvo' flid);  							}  							break;  						}  					case "multiling":  						{  							ProcessMultiLingualChildren(frag' vwenv' hvo);  							break;  						}  					case "labelws":  						{  							if (s_cwsMulti > 1)  							{  								DisplayMultiSep(frag' vwenv' m_cache);  								DisplayWsLabel(s_qwsCurrent' vwenv' m_cache);  							}  							break;  						}  					case "part":  						// This occurs when the node we're processing is a child of a layout'  						// and therefore a 'part ref'. It calls the specified part of the current object.    						// Some configuration items' like senses' will not display themselves if their type has already been shown  						// i.e. when displaying a sense any attempt to display sense info under the child of a sense is ignored.  						// in certain circumstances' like when a minor entry is the component of a sense of a main entry you need to display  						// the senses of the subentry. The following code will allow that to be specified in the configuration xml.  						bool wasIgnoring = ShouldIgnoreGramInfo;  						if (frag.Attributes != null && frag.Attributes["forceSubentryDisplay"] != null)  						{  							ShouldIgnoreGramInfo = !Boolean.Parse(frag.Attributes["forceSubentryDisplay"].Value);  						}  						ProcessPartRef(frag' hvo' vwenv);  						ShouldIgnoreGramInfo = wasIgnoring;  						break;  					case "sublayout":  						string layoutName = XmlUtils.GetOptionalAttributeValue(frag' "name"' null);  						XmlNode layout;  						if (frag.ChildNodes.Count > 0 && layoutName == null)  						{  							layout = frag;  						}  						else  						{  							// This will potentially also find a part' which we don't want here.  							layout = GetNodeForPart(hvo' layoutName' true);  							if (layout.Name != "layout")  								throw new Exception("sublayout must refer to layout' not part");  						}  						string group = XmlUtils.GetOptionalAttributeValue(frag' "group"' "");  						switch (group)  						{  							case "para":  								if (vwenv.IsParagraphOpen())  								{  									group = ""; // suppress CloseParagraph  									break; // don't start our own paragraph if some caller did it for us.  								}  								string style = XmlUtils.GetOptionalAttributeValue(frag' "style"' null);  								if (style == null)  								{  									if (caller != null)  									{  										style = GetParaStyle(caller);  									}  									else  									{  										foreach (var parent in m_stackPartRef)  										{  											style = GetParaStyle(parent);  											if (style != null)  												break;  										}  									}  								}  								else if (m_stackPartRef.Count > 0)  								{  									// Check whether we want to replace the given style due to recursive reuse.  									// (See LT-10400.)  									var callingFrag = m_stackPartRef[0];  									if (!XmlUtils.GetOptionalBooleanAttributeValue(callingFrag' "recurseConfig"' true) &&  										XmlUtils.GetOptionalAttributeValue(callingFrag' "flowType") == "div" &&  										!String.IsNullOrEmpty(GetParaStyle(callingFrag)))  									{  										style = GetParaStyle(callingFrag);  									}  								}  								GetParagraphStyleIfPara(hvo' ref style);  								if (style != null)  									vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' style);  								vwenv.OpenParagraph();  								break;  							case "innerpile":  								vwenv.OpenInnerPile();  								break;  							default:  								break;  						}  						ProcessChildren(layout' vwenv' hvo' frag);  						switch (group)  						{  							case "para":  								vwenv.CloseParagraph();  								break;  							case "innerpile":  								vwenv.CloseInnerPile();  								break;  							default:  								break;  						}  						break;  					case "picture": // current object is a CmPicture' display the picture.  						{  							var picture = m_cache.ServiceLocator.GetInstance<ICmPictureRepository>().GetObject(hvo);  							if (picture.PictureFileRA == null)  								break; // nothing we can show. // Enhance: should we insert some sort of error?    							string imagePath = picture.PictureFileRA.AbsoluteInternalPath;  							if (String.IsNullOrEmpty(imagePath))  								break;  							var picturePathCollector = vwenv as ICollectPicturePathsOnly;  							if (picturePathCollector != null)  							{  								if (File.Exists(FileUtils.ActualFilePath(imagePath)))  								{  									picturePathCollector.APictureIsBeingAdded();  								}  								// for export' we want the path' but not for these other cases.  (LT-5326)  								// There might be a more efficient way to do this' e.g.' by adding to ICollectPicturePathsOnly.  								int fragId = GetSubFragId(frag' caller);  								vwenv.AddObjProp(CmPictureTags.kflidPictureFile' this' fragId);  								break; // whether it exists or not' don't actually make the picture. This can run us out of memory on export (LT-13704)  							}  							IPicture comPicture = GetComPicture(imagePath);  							if (comPicture != null)  							{  								MarkSource(vwenv' caller);  								int height = XmlUtils.GetOptionalIntegerValue(frag' "height"' 0);  								int width = XmlUtils.GetOptionalIntegerValue(frag' "width"' 0);  								vwenv.AddPicture(comPicture' 1' width' height);  							}    						}  						break;  					// A generate node may occur in a layout element' but doesn't do anything when executed.  					case "generate":  						break;  					case "savehvo":  						m_stackHvo.Push(hvo);  						ProcessChildren(frag' vwenv' hvo' caller);  						m_stackHvo.Pop();  						break;  				}  			}  			catch (SIL.Utils.ConfigurationException)  			{  				throw;  			}  			catch (Exception error)  			{  				throw new SIL.Utils.ConfigurationException(  					"There was an error processing this fragment. " + error.Message' frag' error);  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessFrag,The following statement contains a magic number: try  			{  				switch (frag.Name)  				{  					default:  						Debug.Assert(false' "unrecognized XML node.");  						break;  					case "string":  						{  							int hvoTarget = hvo;  							GetActualTarget(frag' ref hvoTarget' m_sda);	// modify the hvo if needed  							if (hvo != hvoTarget)  							{  								AddStringFromOtherObj(frag' hvoTarget' vwenv' caller);  								break;  							}  							int flid = 0;  							if (TryCustomField(m_sda' frag' hvo' out flid))  							{  								// ignore invalid custom fields (LT-6474).  								if (flid == 0)  									break;  							}  							else  							{  								// Could still be an invalid CustomField that TryCustomField couldn't detect.  								if (!TryGetFlid(frag' hvoTarget' out flid))  									break;  							}    							int itype = m_sda.MetaDataCache.GetFieldType(flid);  							itype = itype & (int)CellarPropertyTypeFilter.VirtualMask;  							if (itype == (int)CellarPropertyType.Unicode)  							{  								int wsForUnicode = GetWritingSystemForObject(frag'  									hvo'  									flid'  									m_wsReversal == 0 ? m_cache.DefaultUserWs : m_wsReversal);  								vwenv.AddUnicodeProp(flid' wsForUnicode' this);  							}  							else if (itype == (int)CellarPropertyType.String)  							{  								MarkSource(vwenv' caller);  								vwenv.AddStringProp(flid' this);  							}  							else // multistring of some type  							{  								if (s_cwsMulti > 1)  								{  									string sLabelWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  									if (sLabelWs != null && sLabelWs == "current")  									{  										MarkSource(vwenv' caller);  										vwenv.OpenSpan();  										DisplayMultiSep(frag' vwenv' m_cache);  										DisplayWsLabel(s_qwsCurrent' vwenv' m_cache);  										if (s_qwsCurrent != null)  										{  											vwenv.AddStringAltMember(flid' s_qwsCurrent.Handle' this);  									}  										vwenv.CloseSpan();  								}  								}  								else  								{  									int wsid = GetWritingSystemForObject(frag'  										hvo'  										flid'  										m_wsReversal == 0 ? m_cache.DefaultUserWs : m_wsReversal);  									MarkSource(vwenv' caller);  									vwenv.AddStringAltMember(flid' wsid' this);  								}  							}  							break;  						}  					case "computedString":  						{  							// For example:  							// <part id="FsFeatStruc-Jt-PhonFeats_$fieldName" type="jtview">  							//   <computedString method="GetFeatureValueTSS" argument="$fieldName"/>  							// </part>  							var obj = m_cache.ServiceLocator.GetInstance<ICmObjectRepository>().GetObject(hvo);  							string method = XmlUtils.GetAttributeValue(frag' "method");  							if (!String.IsNullOrEmpty(method))  							{  								Type objType = obj.GetType();  								System.Reflection.MethodInfo mi = objType.GetMethod(method);  								if (mi != null)  								{  									string argument = XmlUtils.GetAttributeValue(frag' "argument");  									if (!String.IsNullOrEmpty(argument))  									{  										var value = (ITsString)mi.Invoke(obj' new object[] {argument});  										vwenv.AddString(value);  									}  								}  							}  							break;  						}  					case "configureMlString":  						{  							int hvoTarget = hvo;  							GetActualTarget(frag' ref hvoTarget' m_sda);	// modify the hvo if needed  							int flid = 0;  							if (TryCustomField(m_sda' frag' hvoTarget' out flid))  							{  								// ignore invalid custom fields (LT-6474).  								if (flid == 0)  									break;  							}  							else  							{  								// Could still be an invalid CustomField that TryCustomField couldn't detect.  								if (!TryGetFlid(frag' hvoTarget' out flid))  									break;  							}  							// The Ws info specified in the part ref node  							HashSet<int> wsIds;  							string sWs = XmlUtils.GetOptionalAttributeValue(caller' "ws");  							if (sWs == "reversal")  							{  								wsIds = new HashSet<int> {m_wsReversal};  							}  							else  							{  								wsIds = WritingSystemServices.GetAllWritingSystems(m_cache' caller' null' hvoTarget' flid);  							}  							if (wsIds.Count == 1)  							{  								if (hvoTarget != hvo)  									DisplayOtherObjStringAlt(flid' wsIds.First()' vwenv' hvoTarget' caller);  								else  								{  									MarkSource(vwenv' caller);  									vwenv.AddStringAltMember(flid' wsIds.First()' this);  							}  							}  							else  							{  								AddMultipleAlternatives(wsIds' vwenv' hvoTarget' flid' caller' hvoTarget == hvo);  							}  							break;  						}  					case "para":  						{  							ProcessProperties(frag' vwenv);  							var props = XmlUtils.GetFirstNonCommentChild(frag);  							if ((props == null || props.Name != "properties") && caller != null)  							{  								var style = XmlUtils.GetOptionalAttributeValue(caller' "style");  								if (!String.IsNullOrEmpty(style))  									vwenv.set_StringProperty((int) FwTextPropType.ktptNamedStyle' style);  							}  							// Note: the following assertion is indicative of not setting colSpec attribute multipara="true"  							// VwEnv.cpp: Assertion failed "Expression: dynamic_cast<VwPileBox *>(m_pgboxCurr)"  							vwenv.OpenParagraph();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseParagraph();  							break;  						}  					case "concpara":  						{  							OpenConcordanceParagraph(vwenv' hvo' frag);  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseParagraph();  							break;  						}  					case "div":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenDiv();  							ProcessChildren(frag' vwenv' hvo' caller);	// caller used for numbering subrecords  							vwenv.CloseDiv();  							break;  						}  					case "innerpile":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenInnerPile();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseInnerPile();  							break;  						}  					case "span":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenSpan();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseSpan();  							break;  						}  					case "table":  						{  							ProcessProperties(frag' vwenv);  							CoreWritingSystemDefinition ws = Cache.ServiceLocator.WritingSystems.DefaultVernacularWritingSystem;  							if (ws.RightToLeftScript)  								vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft' (int)FwTextPropVar.ktpvEnum' -1);  							// defaults for table settings.  							VwLength vlWidth = new VwLength();  							// For now only support percent of available width; actual unit is  							// 100ths of a percent' so 10000 is 100%' i.e.' take up all available  							// width  							vlWidth.nVal = XmlUtils.GetOptionalIntegerValue(frag' "width"' 10000);  							vlWidth.unit = VwUnit.kunPercent100;    							XmlAttribute xa = frag.Attributes["columns"];  							if (xa != null && xa.Value == "%ColumnCount")  							{  								// This is a kludge currently used only for MoInflAffixTemplate.  								// Set up the dependencies so the table gets reconstructed if the  								// prefixes or suffixes change.  								vwenv.NoteDependency(new[] { hvo' hvo }'  									new[] { MoInflAffixTemplateTags.kflidPrefixSlots'  										MoInflAffixTemplateTags.kflidSuffixSlots }'  									2);  							}      							// Open the table  							vwenv.OpenTable(GetColCount(frag' hvo)'  								vlWidth'  								XmlUtils.GetOptionalIntegerValue(frag' "border"' 0)'  								GetAlignment(frag)'  								GetFramePositions(frag)'  								GetRules(frag)'  								XmlUtils.GetOptionalIntegerValue(frag' "spacing"' 0)'  								XmlUtils.GetOptionalIntegerValue(frag' "padding"' 0)'  								false);  							ProcessColumnSpecs(frag' vwenv' hvo);  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTable();  							break;  						}  					case "header":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableHeader();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableHeader();  							break;  						}  					case "footer":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableFooter();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableFooter();  							break;  						}  					case "body":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableBody();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableBody();  							break;  						}  					case "row":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableRow();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableRow();  							break;  						}  					case "cell":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableCell(XmlUtils.GetOptionalIntegerValue(frag' "spanrows"' 1)'  								XmlUtils.GetOptionalIntegerValue(frag' "spancols"' 1));  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableCell();  							break;  						}  					case "headercell":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableHeaderCell(XmlUtils.GetOptionalIntegerValue(frag' "spanrows"' 1)'  								XmlUtils.GetOptionalIntegerValue(frag' "spancols"' 1));  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableHeaderCell();  							break;  						}  					// Deprecated' but still the only way to do some things until  					// we have individual property nodes for everything.  					case "mod":  						{  							int tpt = Convert.ToInt32(frag.Attributes["prop"].Value' 10);  							int var = Convert.ToInt32(frag.Attributes["var"].Value' 10);  							int val = Convert.ToInt32(frag.Attributes["val"].Value' 10);  							vwenv.set_IntProperty(tpt' var' val);  							break;  						}  					case "seq":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // can't do anything. Report?    							int fragId = GetSubFragIdSeq(frag' caller);  							if (fragId == 0)  								return; // something badly wrong.  							AddObjectVector(frag' vwenv' flid' fragId' caller);  							break;  						}  					case "objectOfRowUsingViewConstructor": // display the current object using an external VC.  						//notice this assumes that it wants a LcmCache as an argument  						IVwViewConstructor vc =  							(IVwViewConstructor)SIL.Utils.DynamicLoader.CreateObject(frag'  							new Object[] { m_cache });  						int selectorId =  							Convert.ToInt32(XmlUtils.GetMandatoryAttributeValue(frag' "selector"));  						// Note this is AddObj' not AddObjProp' and it explicitly adds the current object using the new vc and fragId  						vwenv.AddObj(hvo' vc' selectorId);  						break;    					case "obj":  						{  							int flid = GetFlid(frag' hvo);  							int fragId = GetSubFragId(frag' caller);  							if (flid == 0 || fragId == 0)  								return; // something badly wrong.  							AddObject(frag' vwenv' flid' fragId' caller' hvo);  							break;  						}  					case "objlocal":  						{  							// Display the object in the specified atomic property' using a fragment which causes  							// the children of this node to be processed' using our caller for params.  							// This is like an 'obj' element' but instead of displaying the target object using  							// one of its own views' we effectively display it using parts specified right in this node.  							// This is especially useful for parts which want to pull in writing system specs from the caller.  							int flid = GetFlid(frag' hvo);  							int fragId = GetId(new ObjLocalCommand(frag' caller)' m_idToDisplayCommand' m_displayCommandToId);  							vwenv.AddObjProp(flid' this' fragId);  							break;  						}  					case "int":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							MarkSource(vwenv' caller);  							vwenv.AddIntProp(flid);  							break;  						}  					case "gendate":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							int formatFrag = VwBaseVc.kfragGenDateLong;  							var formatAttr = frag.Attributes["format"];  							if (vwenv is SortCollectorEnv)  							{  								formatFrag = VwBaseVc.kfragGenDateSort;  							}  							else if (formatAttr != null)  							{  								switch (formatAttr.InnerText.ToLowerInvariant())  								{  									case "short":  										formatFrag = VwBaseVc.kfragGenDateShort;  										break;  									case "long":  										formatFrag = VwBaseVc.kfragGenDateLong;  										break;  									case "sort":  										formatFrag = VwBaseVc.kfragGenDateSort;  										break;  									default:  										throw new ConfigurationException("Invalid format attribute value"' frag);  								}  							}    							// the actual display of a GenDate property is handled in the VwBaseVc.DisplayVariant method  							MarkSource(vwenv' caller);  							vwenv.AddProp(flid' this' formatFrag);  							break;  						}  					case "datetime":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.    							CellarPropertyType itype = (CellarPropertyType)m_sda.MetaDataCache.GetFieldType(flid);  							if (itype == CellarPropertyType.Time)  							{  								DateTime dt = SilTime.GetTimeProperty(m_sda' hvo' flid);  								XmlNode dtNode = XmlViewsUtils.CopyWithParamDefaults(frag);  								string format;  								if (vwenv is SortCollectorEnv)  									format = DateTimeFormatInfo.InvariantInfo.SortableDateTimePattern;  								else  									format = XmlUtils.GetOptionalAttributeValue(dtNode' "format");  								string formattedDateTime;  								try  								{  									if (format != null)  									{  										formattedDateTime = dt.ToString(format' DateTimeFormatInfo.CurrentInfo);  									}  									else  									{  										// "G" format takes user's system ShortDate format appended by system LongTime format.  										formattedDateTime = dt.ToString("G"' DateTimeFormatInfo.CurrentInfo);  									}  								}  								catch (FormatException e)  								{  									string errorMsg = "Invalid datetime format attribute (" + format + ") in " + e.Source;  									throw new ConfigurationException(errorMsg' frag' e);  								}  								int systemWs = m_cache.ServiceLocator.WritingSystemManager.UserWs;  								ITsString tss = TsStringUtils.MakeString(formattedDateTime' systemWs);  								if (vwenv is ConfiguredExport)  									vwenv.AddTimeProp(flid' 0);  								AddStringThatCounts(vwenv' tss' caller);  							}  							else  							{  								string stFieldName = XmlUtils.GetMandatoryAttributeValue(frag' "field");  								throw new Exception("Bad field type (" + stFieldName + " for hvo " + hvo + " found for " +  									frag.Name + "  property " + flid + " in " + frag.OuterXml);  							}  							break;  						}  					case "iconInt":  						{  							throw new InvalidOperationException("Obsolete system use for 'iconInt'.");  							/*  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							//temp  							int min = Int32.Parse(XmlUtils.GetOptionalAttributeValue(frag' "min"' "0"));  							int max = Int32.Parse(XmlUtils.GetMandatoryAttributeValue(frag' "max"));  							// Get an ID that simply identifies the pictureValues child. This is used in DisplayPicture.  							int fragId = GetId(frag.SelectSingleNode("picturevalues")' m_idToDisplayCommand' m_displayCommandToId);  							vwenv.AddIntPropPic(flid' this' fragId' min' max);  							break;  							*/  						}  					case "commandIcon":  						{  							AddCommandIcon(frag' vwenv' hvo);  							break;  						}  					case "lit":  						{  							// Default to UI writing system.  							string literal = frag.InnerText;  							string sTranslate = XmlUtils.GetOptionalAttributeValue(frag' "translate"' "");  							if (sTranslate.Trim().ToLower() != "do not translate")  								literal = StringTable.Table.LocalizeLiteralValue(literal);  							string sWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  							int ws;  							if (sWs != null)  								ws = m_cache.WritingSystemFactory.GetWsFromStr(sWs);  							else  								ws = m_cache.WritingSystemFactory.UserWs;  							vwenv.AddString(TsStringUtils.MakeString(literal' ws));  							break;  						}  					case "if":  						{  							if (ConditionPasses(vwenv' frag' hvo' m_cache' m_sda' caller))  								ProcessChildren(frag' vwenv' hvo' caller);  							break;  						}  					case "ifnot":  						{  							if (!ConditionPasses(vwenv' frag' hvo' m_cache' m_sda' caller))  								ProcessChildren(frag' vwenv' hvo' caller);  							break;  						}  					case "choice":  						{  							foreach (XmlNode clause in frag.ChildNodes)  							{  								if (clause.Name == "where")  								{  									if (ConditionPasses(vwenv' clause' hvo' m_cache' m_sda' caller))  									{  										ProcessChildren(clause' vwenv' hvo' caller);  										break;  									}  								}  								else if (clause.Name == "otherwise")  								{  									// enhance: verify last node?  									ProcessChildren(clause' vwenv' hvo' caller);  									break;  								}  								else  								{  									throw new Exception("elements in choice must be where or otherwise");  								}  							}  							break;  						}  					case "stringList":  						{  							string[] labels;  							if (!m_StringsFromListNode.TryGetValue(frag' out labels))  							{  								labels = StringTable.Table.GetStringsFromStringListNode(frag);  								m_StringsFromListNode[frag] = labels;  							}  							int flid = GetFlid(frag' hvo);  							int value = m_sda.get_IntProp(hvo' flid);  							if ((value >= 0) &&  								(value < labels.Length))  							{  								int wsUi = m_cache.WritingSystemFactory.UserWs;  								ITsString tss = TsStringUtils.MakeString(labels[value]' wsUi);  								vwenv.AddString(tss);  								NoteDependency(vwenv' hvo' flid);  							}  							break;  						}  					case "multiling":  						{  							ProcessMultiLingualChildren(frag' vwenv' hvo);  							break;  						}  					case "labelws":  						{  							if (s_cwsMulti > 1)  							{  								DisplayMultiSep(frag' vwenv' m_cache);  								DisplayWsLabel(s_qwsCurrent' vwenv' m_cache);  							}  							break;  						}  					case "part":  						// This occurs when the node we're processing is a child of a layout'  						// and therefore a 'part ref'. It calls the specified part of the current object.    						// Some configuration items' like senses' will not display themselves if their type has already been shown  						// i.e. when displaying a sense any attempt to display sense info under the child of a sense is ignored.  						// in certain circumstances' like when a minor entry is the component of a sense of a main entry you need to display  						// the senses of the subentry. The following code will allow that to be specified in the configuration xml.  						bool wasIgnoring = ShouldIgnoreGramInfo;  						if (frag.Attributes != null && frag.Attributes["forceSubentryDisplay"] != null)  						{  							ShouldIgnoreGramInfo = !Boolean.Parse(frag.Attributes["forceSubentryDisplay"].Value);  						}  						ProcessPartRef(frag' hvo' vwenv);  						ShouldIgnoreGramInfo = wasIgnoring;  						break;  					case "sublayout":  						string layoutName = XmlUtils.GetOptionalAttributeValue(frag' "name"' null);  						XmlNode layout;  						if (frag.ChildNodes.Count > 0 && layoutName == null)  						{  							layout = frag;  						}  						else  						{  							// This will potentially also find a part' which we don't want here.  							layout = GetNodeForPart(hvo' layoutName' true);  							if (layout.Name != "layout")  								throw new Exception("sublayout must refer to layout' not part");  						}  						string group = XmlUtils.GetOptionalAttributeValue(frag' "group"' "");  						switch (group)  						{  							case "para":  								if (vwenv.IsParagraphOpen())  								{  									group = ""; // suppress CloseParagraph  									break; // don't start our own paragraph if some caller did it for us.  								}  								string style = XmlUtils.GetOptionalAttributeValue(frag' "style"' null);  								if (style == null)  								{  									if (caller != null)  									{  										style = GetParaStyle(caller);  									}  									else  									{  										foreach (var parent in m_stackPartRef)  										{  											style = GetParaStyle(parent);  											if (style != null)  												break;  										}  									}  								}  								else if (m_stackPartRef.Count > 0)  								{  									// Check whether we want to replace the given style due to recursive reuse.  									// (See LT-10400.)  									var callingFrag = m_stackPartRef[0];  									if (!XmlUtils.GetOptionalBooleanAttributeValue(callingFrag' "recurseConfig"' true) &&  										XmlUtils.GetOptionalAttributeValue(callingFrag' "flowType") == "div" &&  										!String.IsNullOrEmpty(GetParaStyle(callingFrag)))  									{  										style = GetParaStyle(callingFrag);  									}  								}  								GetParagraphStyleIfPara(hvo' ref style);  								if (style != null)  									vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' style);  								vwenv.OpenParagraph();  								break;  							case "innerpile":  								vwenv.OpenInnerPile();  								break;  							default:  								break;  						}  						ProcessChildren(layout' vwenv' hvo' frag);  						switch (group)  						{  							case "para":  								vwenv.CloseParagraph();  								break;  							case "innerpile":  								vwenv.CloseInnerPile();  								break;  							default:  								break;  						}  						break;  					case "picture": // current object is a CmPicture' display the picture.  						{  							var picture = m_cache.ServiceLocator.GetInstance<ICmPictureRepository>().GetObject(hvo);  							if (picture.PictureFileRA == null)  								break; // nothing we can show. // Enhance: should we insert some sort of error?    							string imagePath = picture.PictureFileRA.AbsoluteInternalPath;  							if (String.IsNullOrEmpty(imagePath))  								break;  							var picturePathCollector = vwenv as ICollectPicturePathsOnly;  							if (picturePathCollector != null)  							{  								if (File.Exists(FileUtils.ActualFilePath(imagePath)))  								{  									picturePathCollector.APictureIsBeingAdded();  								}  								// for export' we want the path' but not for these other cases.  (LT-5326)  								// There might be a more efficient way to do this' e.g.' by adding to ICollectPicturePathsOnly.  								int fragId = GetSubFragId(frag' caller);  								vwenv.AddObjProp(CmPictureTags.kflidPictureFile' this' fragId);  								break; // whether it exists or not' don't actually make the picture. This can run us out of memory on export (LT-13704)  							}  							IPicture comPicture = GetComPicture(imagePath);  							if (comPicture != null)  							{  								MarkSource(vwenv' caller);  								int height = XmlUtils.GetOptionalIntegerValue(frag' "height"' 0);  								int width = XmlUtils.GetOptionalIntegerValue(frag' "width"' 0);  								vwenv.AddPicture(comPicture' 1' width' height);  							}    						}  						break;  					// A generate node may occur in a layout element' but doesn't do anything when executed.  					case "generate":  						break;  					case "savehvo":  						m_stackHvo.Push(hvo);  						ProcessChildren(frag' vwenv' hvo' caller);  						m_stackHvo.Pop();  						break;  				}  			}  			catch (SIL.Utils.ConfigurationException)  			{  				throw;  			}  			catch (Exception error)  			{  				throw new SIL.Utils.ConfigurationException(  					"There was an error processing this fragment. " + error.Message' frag' error);  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessFrag,The following statement contains a magic number: try  			{  				switch (frag.Name)  				{  					default:  						Debug.Assert(false' "unrecognized XML node.");  						break;  					case "string":  						{  							int hvoTarget = hvo;  							GetActualTarget(frag' ref hvoTarget' m_sda);	// modify the hvo if needed  							if (hvo != hvoTarget)  							{  								AddStringFromOtherObj(frag' hvoTarget' vwenv' caller);  								break;  							}  							int flid = 0;  							if (TryCustomField(m_sda' frag' hvo' out flid))  							{  								// ignore invalid custom fields (LT-6474).  								if (flid == 0)  									break;  							}  							else  							{  								// Could still be an invalid CustomField that TryCustomField couldn't detect.  								if (!TryGetFlid(frag' hvoTarget' out flid))  									break;  							}    							int itype = m_sda.MetaDataCache.GetFieldType(flid);  							itype = itype & (int)CellarPropertyTypeFilter.VirtualMask;  							if (itype == (int)CellarPropertyType.Unicode)  							{  								int wsForUnicode = GetWritingSystemForObject(frag'  									hvo'  									flid'  									m_wsReversal == 0 ? m_cache.DefaultUserWs : m_wsReversal);  								vwenv.AddUnicodeProp(flid' wsForUnicode' this);  							}  							else if (itype == (int)CellarPropertyType.String)  							{  								MarkSource(vwenv' caller);  								vwenv.AddStringProp(flid' this);  							}  							else // multistring of some type  							{  								if (s_cwsMulti > 1)  								{  									string sLabelWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  									if (sLabelWs != null && sLabelWs == "current")  									{  										MarkSource(vwenv' caller);  										vwenv.OpenSpan();  										DisplayMultiSep(frag' vwenv' m_cache);  										DisplayWsLabel(s_qwsCurrent' vwenv' m_cache);  										if (s_qwsCurrent != null)  										{  											vwenv.AddStringAltMember(flid' s_qwsCurrent.Handle' this);  									}  										vwenv.CloseSpan();  								}  								}  								else  								{  									int wsid = GetWritingSystemForObject(frag'  										hvo'  										flid'  										m_wsReversal == 0 ? m_cache.DefaultUserWs : m_wsReversal);  									MarkSource(vwenv' caller);  									vwenv.AddStringAltMember(flid' wsid' this);  								}  							}  							break;  						}  					case "computedString":  						{  							// For example:  							// <part id="FsFeatStruc-Jt-PhonFeats_$fieldName" type="jtview">  							//   <computedString method="GetFeatureValueTSS" argument="$fieldName"/>  							// </part>  							var obj = m_cache.ServiceLocator.GetInstance<ICmObjectRepository>().GetObject(hvo);  							string method = XmlUtils.GetAttributeValue(frag' "method");  							if (!String.IsNullOrEmpty(method))  							{  								Type objType = obj.GetType();  								System.Reflection.MethodInfo mi = objType.GetMethod(method);  								if (mi != null)  								{  									string argument = XmlUtils.GetAttributeValue(frag' "argument");  									if (!String.IsNullOrEmpty(argument))  									{  										var value = (ITsString)mi.Invoke(obj' new object[] {argument});  										vwenv.AddString(value);  									}  								}  							}  							break;  						}  					case "configureMlString":  						{  							int hvoTarget = hvo;  							GetActualTarget(frag' ref hvoTarget' m_sda);	// modify the hvo if needed  							int flid = 0;  							if (TryCustomField(m_sda' frag' hvoTarget' out flid))  							{  								// ignore invalid custom fields (LT-6474).  								if (flid == 0)  									break;  							}  							else  							{  								// Could still be an invalid CustomField that TryCustomField couldn't detect.  								if (!TryGetFlid(frag' hvoTarget' out flid))  									break;  							}  							// The Ws info specified in the part ref node  							HashSet<int> wsIds;  							string sWs = XmlUtils.GetOptionalAttributeValue(caller' "ws");  							if (sWs == "reversal")  							{  								wsIds = new HashSet<int> {m_wsReversal};  							}  							else  							{  								wsIds = WritingSystemServices.GetAllWritingSystems(m_cache' caller' null' hvoTarget' flid);  							}  							if (wsIds.Count == 1)  							{  								if (hvoTarget != hvo)  									DisplayOtherObjStringAlt(flid' wsIds.First()' vwenv' hvoTarget' caller);  								else  								{  									MarkSource(vwenv' caller);  									vwenv.AddStringAltMember(flid' wsIds.First()' this);  							}  							}  							else  							{  								AddMultipleAlternatives(wsIds' vwenv' hvoTarget' flid' caller' hvoTarget == hvo);  							}  							break;  						}  					case "para":  						{  							ProcessProperties(frag' vwenv);  							var props = XmlUtils.GetFirstNonCommentChild(frag);  							if ((props == null || props.Name != "properties") && caller != null)  							{  								var style = XmlUtils.GetOptionalAttributeValue(caller' "style");  								if (!String.IsNullOrEmpty(style))  									vwenv.set_StringProperty((int) FwTextPropType.ktptNamedStyle' style);  							}  							// Note: the following assertion is indicative of not setting colSpec attribute multipara="true"  							// VwEnv.cpp: Assertion failed "Expression: dynamic_cast<VwPileBox *>(m_pgboxCurr)"  							vwenv.OpenParagraph();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseParagraph();  							break;  						}  					case "concpara":  						{  							OpenConcordanceParagraph(vwenv' hvo' frag);  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseParagraph();  							break;  						}  					case "div":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenDiv();  							ProcessChildren(frag' vwenv' hvo' caller);	// caller used for numbering subrecords  							vwenv.CloseDiv();  							break;  						}  					case "innerpile":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenInnerPile();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseInnerPile();  							break;  						}  					case "span":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenSpan();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseSpan();  							break;  						}  					case "table":  						{  							ProcessProperties(frag' vwenv);  							CoreWritingSystemDefinition ws = Cache.ServiceLocator.WritingSystems.DefaultVernacularWritingSystem;  							if (ws.RightToLeftScript)  								vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft' (int)FwTextPropVar.ktpvEnum' -1);  							// defaults for table settings.  							VwLength vlWidth = new VwLength();  							// For now only support percent of available width; actual unit is  							// 100ths of a percent' so 10000 is 100%' i.e.' take up all available  							// width  							vlWidth.nVal = XmlUtils.GetOptionalIntegerValue(frag' "width"' 10000);  							vlWidth.unit = VwUnit.kunPercent100;    							XmlAttribute xa = frag.Attributes["columns"];  							if (xa != null && xa.Value == "%ColumnCount")  							{  								// This is a kludge currently used only for MoInflAffixTemplate.  								// Set up the dependencies so the table gets reconstructed if the  								// prefixes or suffixes change.  								vwenv.NoteDependency(new[] { hvo' hvo }'  									new[] { MoInflAffixTemplateTags.kflidPrefixSlots'  										MoInflAffixTemplateTags.kflidSuffixSlots }'  									2);  							}      							// Open the table  							vwenv.OpenTable(GetColCount(frag' hvo)'  								vlWidth'  								XmlUtils.GetOptionalIntegerValue(frag' "border"' 0)'  								GetAlignment(frag)'  								GetFramePositions(frag)'  								GetRules(frag)'  								XmlUtils.GetOptionalIntegerValue(frag' "spacing"' 0)'  								XmlUtils.GetOptionalIntegerValue(frag' "padding"' 0)'  								false);  							ProcessColumnSpecs(frag' vwenv' hvo);  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTable();  							break;  						}  					case "header":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableHeader();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableHeader();  							break;  						}  					case "footer":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableFooter();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableFooter();  							break;  						}  					case "body":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableBody();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableBody();  							break;  						}  					case "row":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableRow();  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableRow();  							break;  						}  					case "cell":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableCell(XmlUtils.GetOptionalIntegerValue(frag' "spanrows"' 1)'  								XmlUtils.GetOptionalIntegerValue(frag' "spancols"' 1));  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableCell();  							break;  						}  					case "headercell":  						{  							ProcessProperties(frag' vwenv);  							vwenv.OpenTableHeaderCell(XmlUtils.GetOptionalIntegerValue(frag' "spanrows"' 1)'  								XmlUtils.GetOptionalIntegerValue(frag' "spancols"' 1));  							ProcessChildren(frag' vwenv' hvo);  							vwenv.CloseTableHeaderCell();  							break;  						}  					// Deprecated' but still the only way to do some things until  					// we have individual property nodes for everything.  					case "mod":  						{  							int tpt = Convert.ToInt32(frag.Attributes["prop"].Value' 10);  							int var = Convert.ToInt32(frag.Attributes["var"].Value' 10);  							int val = Convert.ToInt32(frag.Attributes["val"].Value' 10);  							vwenv.set_IntProperty(tpt' var' val);  							break;  						}  					case "seq":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // can't do anything. Report?    							int fragId = GetSubFragIdSeq(frag' caller);  							if (fragId == 0)  								return; // something badly wrong.  							AddObjectVector(frag' vwenv' flid' fragId' caller);  							break;  						}  					case "objectOfRowUsingViewConstructor": // display the current object using an external VC.  						//notice this assumes that it wants a LcmCache as an argument  						IVwViewConstructor vc =  							(IVwViewConstructor)SIL.Utils.DynamicLoader.CreateObject(frag'  							new Object[] { m_cache });  						int selectorId =  							Convert.ToInt32(XmlUtils.GetMandatoryAttributeValue(frag' "selector"));  						// Note this is AddObj' not AddObjProp' and it explicitly adds the current object using the new vc and fragId  						vwenv.AddObj(hvo' vc' selectorId);  						break;    					case "obj":  						{  							int flid = GetFlid(frag' hvo);  							int fragId = GetSubFragId(frag' caller);  							if (flid == 0 || fragId == 0)  								return; // something badly wrong.  							AddObject(frag' vwenv' flid' fragId' caller' hvo);  							break;  						}  					case "objlocal":  						{  							// Display the object in the specified atomic property' using a fragment which causes  							// the children of this node to be processed' using our caller for params.  							// This is like an 'obj' element' but instead of displaying the target object using  							// one of its own views' we effectively display it using parts specified right in this node.  							// This is especially useful for parts which want to pull in writing system specs from the caller.  							int flid = GetFlid(frag' hvo);  							int fragId = GetId(new ObjLocalCommand(frag' caller)' m_idToDisplayCommand' m_displayCommandToId);  							vwenv.AddObjProp(flid' this' fragId);  							break;  						}  					case "int":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							MarkSource(vwenv' caller);  							vwenv.AddIntProp(flid);  							break;  						}  					case "gendate":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							int formatFrag = VwBaseVc.kfragGenDateLong;  							var formatAttr = frag.Attributes["format"];  							if (vwenv is SortCollectorEnv)  							{  								formatFrag = VwBaseVc.kfragGenDateSort;  							}  							else if (formatAttr != null)  							{  								switch (formatAttr.InnerText.ToLowerInvariant())  								{  									case "short":  										formatFrag = VwBaseVc.kfragGenDateShort;  										break;  									case "long":  										formatFrag = VwBaseVc.kfragGenDateLong;  										break;  									case "sort":  										formatFrag = VwBaseVc.kfragGenDateSort;  										break;  									default:  										throw new ConfigurationException("Invalid format attribute value"' frag);  								}  							}    							// the actual display of a GenDate property is handled in the VwBaseVc.DisplayVariant method  							MarkSource(vwenv' caller);  							vwenv.AddProp(flid' this' formatFrag);  							break;  						}  					case "datetime":  						{  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.    							CellarPropertyType itype = (CellarPropertyType)m_sda.MetaDataCache.GetFieldType(flid);  							if (itype == CellarPropertyType.Time)  							{  								DateTime dt = SilTime.GetTimeProperty(m_sda' hvo' flid);  								XmlNode dtNode = XmlViewsUtils.CopyWithParamDefaults(frag);  								string format;  								if (vwenv is SortCollectorEnv)  									format = DateTimeFormatInfo.InvariantInfo.SortableDateTimePattern;  								else  									format = XmlUtils.GetOptionalAttributeValue(dtNode' "format");  								string formattedDateTime;  								try  								{  									if (format != null)  									{  										formattedDateTime = dt.ToString(format' DateTimeFormatInfo.CurrentInfo);  									}  									else  									{  										// "G" format takes user's system ShortDate format appended by system LongTime format.  										formattedDateTime = dt.ToString("G"' DateTimeFormatInfo.CurrentInfo);  									}  								}  								catch (FormatException e)  								{  									string errorMsg = "Invalid datetime format attribute (" + format + ") in " + e.Source;  									throw new ConfigurationException(errorMsg' frag' e);  								}  								int systemWs = m_cache.ServiceLocator.WritingSystemManager.UserWs;  								ITsString tss = TsStringUtils.MakeString(formattedDateTime' systemWs);  								if (vwenv is ConfiguredExport)  									vwenv.AddTimeProp(flid' 0);  								AddStringThatCounts(vwenv' tss' caller);  							}  							else  							{  								string stFieldName = XmlUtils.GetMandatoryAttributeValue(frag' "field");  								throw new Exception("Bad field type (" + stFieldName + " for hvo " + hvo + " found for " +  									frag.Name + "  property " + flid + " in " + frag.OuterXml);  							}  							break;  						}  					case "iconInt":  						{  							throw new InvalidOperationException("Obsolete system use for 'iconInt'.");  							/*  							int flid = GetFlid(frag' hvo);  							if (flid == 0)  								return; // something badly wrong.  							//temp  							int min = Int32.Parse(XmlUtils.GetOptionalAttributeValue(frag' "min"' "0"));  							int max = Int32.Parse(XmlUtils.GetMandatoryAttributeValue(frag' "max"));  							// Get an ID that simply identifies the pictureValues child. This is used in DisplayPicture.  							int fragId = GetId(frag.SelectSingleNode("picturevalues")' m_idToDisplayCommand' m_displayCommandToId);  							vwenv.AddIntPropPic(flid' this' fragId' min' max);  							break;  							*/  						}  					case "commandIcon":  						{  							AddCommandIcon(frag' vwenv' hvo);  							break;  						}  					case "lit":  						{  							// Default to UI writing system.  							string literal = frag.InnerText;  							string sTranslate = XmlUtils.GetOptionalAttributeValue(frag' "translate"' "");  							if (sTranslate.Trim().ToLower() != "do not translate")  								literal = StringTable.Table.LocalizeLiteralValue(literal);  							string sWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  							int ws;  							if (sWs != null)  								ws = m_cache.WritingSystemFactory.GetWsFromStr(sWs);  							else  								ws = m_cache.WritingSystemFactory.UserWs;  							vwenv.AddString(TsStringUtils.MakeString(literal' ws));  							break;  						}  					case "if":  						{  							if (ConditionPasses(vwenv' frag' hvo' m_cache' m_sda' caller))  								ProcessChildren(frag' vwenv' hvo' caller);  							break;  						}  					case "ifnot":  						{  							if (!ConditionPasses(vwenv' frag' hvo' m_cache' m_sda' caller))  								ProcessChildren(frag' vwenv' hvo' caller);  							break;  						}  					case "choice":  						{  							foreach (XmlNode clause in frag.ChildNodes)  							{  								if (clause.Name == "where")  								{  									if (ConditionPasses(vwenv' clause' hvo' m_cache' m_sda' caller))  									{  										ProcessChildren(clause' vwenv' hvo' caller);  										break;  									}  								}  								else if (clause.Name == "otherwise")  								{  									// enhance: verify last node?  									ProcessChildren(clause' vwenv' hvo' caller);  									break;  								}  								else  								{  									throw new Exception("elements in choice must be where or otherwise");  								}  							}  							break;  						}  					case "stringList":  						{  							string[] labels;  							if (!m_StringsFromListNode.TryGetValue(frag' out labels))  							{  								labels = StringTable.Table.GetStringsFromStringListNode(frag);  								m_StringsFromListNode[frag] = labels;  							}  							int flid = GetFlid(frag' hvo);  							int value = m_sda.get_IntProp(hvo' flid);  							if ((value >= 0) &&  								(value < labels.Length))  							{  								int wsUi = m_cache.WritingSystemFactory.UserWs;  								ITsString tss = TsStringUtils.MakeString(labels[value]' wsUi);  								vwenv.AddString(tss);  								NoteDependency(vwenv' hvo' flid);  							}  							break;  						}  					case "multiling":  						{  							ProcessMultiLingualChildren(frag' vwenv' hvo);  							break;  						}  					case "labelws":  						{  							if (s_cwsMulti > 1)  							{  								DisplayMultiSep(frag' vwenv' m_cache);  								DisplayWsLabel(s_qwsCurrent' vwenv' m_cache);  							}  							break;  						}  					case "part":  						// This occurs when the node we're processing is a child of a layout'  						// and therefore a 'part ref'. It calls the specified part of the current object.    						// Some configuration items' like senses' will not display themselves if their type has already been shown  						// i.e. when displaying a sense any attempt to display sense info under the child of a sense is ignored.  						// in certain circumstances' like when a minor entry is the component of a sense of a main entry you need to display  						// the senses of the subentry. The following code will allow that to be specified in the configuration xml.  						bool wasIgnoring = ShouldIgnoreGramInfo;  						if (frag.Attributes != null && frag.Attributes["forceSubentryDisplay"] != null)  						{  							ShouldIgnoreGramInfo = !Boolean.Parse(frag.Attributes["forceSubentryDisplay"].Value);  						}  						ProcessPartRef(frag' hvo' vwenv);  						ShouldIgnoreGramInfo = wasIgnoring;  						break;  					case "sublayout":  						string layoutName = XmlUtils.GetOptionalAttributeValue(frag' "name"' null);  						XmlNode layout;  						if (frag.ChildNodes.Count > 0 && layoutName == null)  						{  							layout = frag;  						}  						else  						{  							// This will potentially also find a part' which we don't want here.  							layout = GetNodeForPart(hvo' layoutName' true);  							if (layout.Name != "layout")  								throw new Exception("sublayout must refer to layout' not part");  						}  						string group = XmlUtils.GetOptionalAttributeValue(frag' "group"' "");  						switch (group)  						{  							case "para":  								if (vwenv.IsParagraphOpen())  								{  									group = ""; // suppress CloseParagraph  									break; // don't start our own paragraph if some caller did it for us.  								}  								string style = XmlUtils.GetOptionalAttributeValue(frag' "style"' null);  								if (style == null)  								{  									if (caller != null)  									{  										style = GetParaStyle(caller);  									}  									else  									{  										foreach (var parent in m_stackPartRef)  										{  											style = GetParaStyle(parent);  											if (style != null)  												break;  										}  									}  								}  								else if (m_stackPartRef.Count > 0)  								{  									// Check whether we want to replace the given style due to recursive reuse.  									// (See LT-10400.)  									var callingFrag = m_stackPartRef[0];  									if (!XmlUtils.GetOptionalBooleanAttributeValue(callingFrag' "recurseConfig"' true) &&  										XmlUtils.GetOptionalAttributeValue(callingFrag' "flowType") == "div" &&  										!String.IsNullOrEmpty(GetParaStyle(callingFrag)))  									{  										style = GetParaStyle(callingFrag);  									}  								}  								GetParagraphStyleIfPara(hvo' ref style);  								if (style != null)  									vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' style);  								vwenv.OpenParagraph();  								break;  							case "innerpile":  								vwenv.OpenInnerPile();  								break;  							default:  								break;  						}  						ProcessChildren(layout' vwenv' hvo' frag);  						switch (group)  						{  							case "para":  								vwenv.CloseParagraph();  								break;  							case "innerpile":  								vwenv.CloseInnerPile();  								break;  							default:  								break;  						}  						break;  					case "picture": // current object is a CmPicture' display the picture.  						{  							var picture = m_cache.ServiceLocator.GetInstance<ICmPictureRepository>().GetObject(hvo);  							if (picture.PictureFileRA == null)  								break; // nothing we can show. // Enhance: should we insert some sort of error?    							string imagePath = picture.PictureFileRA.AbsoluteInternalPath;  							if (String.IsNullOrEmpty(imagePath))  								break;  							var picturePathCollector = vwenv as ICollectPicturePathsOnly;  							if (picturePathCollector != null)  							{  								if (File.Exists(FileUtils.ActualFilePath(imagePath)))  								{  									picturePathCollector.APictureIsBeingAdded();  								}  								// for export' we want the path' but not for these other cases.  (LT-5326)  								// There might be a more efficient way to do this' e.g.' by adding to ICollectPicturePathsOnly.  								int fragId = GetSubFragId(frag' caller);  								vwenv.AddObjProp(CmPictureTags.kflidPictureFile' this' fragId);  								break; // whether it exists or not' don't actually make the picture. This can run us out of memory on export (LT-13704)  							}  							IPicture comPicture = GetComPicture(imagePath);  							if (comPicture != null)  							{  								MarkSource(vwenv' caller);  								int height = XmlUtils.GetOptionalIntegerValue(frag' "height"' 0);  								int width = XmlUtils.GetOptionalIntegerValue(frag' "width"' 0);  								vwenv.AddPicture(comPicture' 1' width' height);  							}    						}  						break;  					// A generate node may occur in a layout element' but doesn't do anything when executed.  					case "generate":  						break;  					case "savehvo":  						m_stackHvo.Push(hvo);  						ProcessChildren(frag' vwenv' hvo' caller);  						m_stackHvo.Pop();  						break;  				}  			}  			catch (SIL.Utils.ConfigurationException)  			{  				throw;  			}  			catch (Exception error)  			{  				throw new SIL.Utils.ConfigurationException(  					"There was an error processing this fragment. " + error.Message' frag' error);  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,DetermineNeededFieldsFor,The following statement contains a magic number: try  			{  				switch (frag.Name)  				{  					default:  						// Any cases not handled just do nothing.  						break;  					case "part":  						// This occurs when the node we're processing is a child of a layout'  						// and therefore a 'part ref'. It calls the specified part of the current object.  						DetermineNeededFieldsForPartRef(frag' info);  						break;  					case "elementDisplayCondition":  					case "if":  					case "ifnot":  					case "where":  						{  							// Enhance: get stuff for the condition tests of if' ifnot' and where  							int flid = DetermineNeededFlid(frag' info);  							IFwMetaDataCache mdc = m_sda.MetaDataCache;  							NeededPropertyInfo infoTarget = info;  							if (flid == 0)  							{  								// Deal with the object/object/flid scenario  								string stFieldPath = XmlUtils.GetOptionalAttributeValue(frag' "field");  								if (!String.IsNullOrEmpty(stFieldPath))  								{  									string[] rgstFields = stFieldPath.Split(new char[] { '/' });  									if (rgstFields.Length >= 2) // otherwise DetermineNeededFlid already got it.  									{  										string stClassName = XmlUtils.GetOptionalAttributeValue(frag' "class");  										if (String.IsNullOrEmpty(stClassName))  										{  											int classId = info.TargetClass(this);  											flid = mdc.GetFieldId2(classId' rgstFields[0]' true);  										}  										else  										{  											flid = mdc.GetFieldId(stClassName' rgstFields[0]' true);  										}  										// on entry to each iteration' flid is the flid resulting from  										// rgstFields[i-1]. On successful exit' it is the flid of the last  										// item' the real field' which is processed normally.  										for (int i = 1; i < rgstFields.Length; i++)  										{  											// We assume this intermediate flid is an object property.  											infoTarget = infoTarget.AddObjField(flid' false);  											string subFieldName = rgstFields[i];  											int outerClassId = mdc.GetDstClsId(flid);  											flid = mdc.GetFieldId2(outerClassId' subFieldName' true);  										}  									}  								}  							}  							if (flid != 0)  							{  								string sWs = XmlUtils.GetOptionalAttributeValue(frag' "ws"' null);  								int wsid = 0;  								if (sWs != null)  								{  									if (sWs == "current" && s_qwsCurrent != null)  									{  										wsid = s_qwsCurrent.Handle;  									}  									else  									{  										// If ws is 'configure' then we must have a caller to inherit the configured value from.  										if (sWs == "configure")  										{  											sWs = XmlUtils.GetMandatoryAttributeValue(caller' "ws");  										}  										wsid = m_cache.WritingSystemFactory.GetWsFromStr(sWs);  									}  								}  								if (wsid == 0 && sWs != null)  								{  									foreach (int ws in WritingSystemServices.GetWritingSystems(m_cache' frag))  										infoTarget.AddAtomicField(flid' ws);  								}  								else  								{  									infoTarget.AddAtomicField(flid' wsid);  								}  							}  						}  						DetermineNeededFieldsForChildren(frag' caller' info);  						break;  					case "para":  					case "concpara":  					case "div":  					case "innerpile":  					case "span":  					case "table":  					case "header":  					case "footer":  					case "body":  					case "row":  					case "cell":  					case "headercell":  					case "choice":  					case "otherwise":  						DetermineNeededFieldsForChildren(frag' caller' info);  						break;  					case "string":  						{  							//GetActualTarget(frag' ref hvoTarget' m_cache);	// modify the hvo if needed  							// If GetActualTargetInfo would modify the target don't try to be smart.  							string target = XmlUtils.GetOptionalAttributeValue(frag' "target"' "").ToLower();  							if (target == "owner")  								return;    							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  								if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}    							// If we don't have enough info to determine a flid' give up.  							if (flid == 0)  								return;    							int itype = m_sda.MetaDataCache.GetFieldType(flid);  							itype = itype & (int)CellarPropertyTypeFilter.VirtualMask;  							if ((itype == (int)CellarPropertyType.MultiString) ||  								(itype == (int)CellarPropertyType.MultiUnicode))  							{  								if (s_cwsMulti > 1)  								{  									string sLabelWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  									if (sLabelWs != null && sLabelWs == "current")  									{  										if (s_qwsCurrent != null)  											info.AddAtomicField(flid' s_qwsCurrent.Handle);  									}  								}  								else  								{  									foreach (int wsid in WritingSystemServices.GetWritingSystems(m_cache' frag))  										info.AddAtomicField(flid' wsid);  								}  							}  							else  							{  								// add info for simple string.  								info.AddAtomicField(flid' 0);  							}  							break;  						}  					case "configureMlString":  						{  							string target = XmlUtils.GetOptionalAttributeValue(frag' "target"' "").ToLower();  							if (target == "owner")  								return;    							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  								if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							// If we don't have enough info to determine a flid' give up.  							if (flid == 0)  								return;    							// The Ws info specified in the part ref node  							string sWs = XmlUtils.GetOptionalAttributeValue(caller' "ws");  							if (sWs == "reversal")  							{  								info.AddAtomicField(flid' m_wsReversal);  							}  							else  							{  								foreach (int wsid in WritingSystemServices.GetWritingSystems(m_cache' caller))  								info.AddAtomicField(flid' wsid);  							}  							break;  						}  					case "gendate":  					case "int":  						{  							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  							if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							if (flid == 0)  								return;  							info.AddAtomicField(flid' 0);  						}  						break;  					case "seq":  						{  							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  							if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							if (flid == 0)  								return;  							int fragId = GetSubFragId(frag' caller);  							if (fragId == 0)  								return; // something badly wrong.  							// Checking depth guards against infinite recursion (e.g.' subsenses of senses)'  							// but also against doing optimization queries for cases which rarely occur in  							// the real data. It may need fine tuning' possibly even by an XML-specified property  							// of the top-level layout.  							if (info.SeqDepth >= 4)  								break;    							NeededPropertyInfo subinfo = info.AddObjField(flid' true);  								DisplayCommand dispCommand = m_idToDisplayCommand[fragId];  								dispCommand.DetermineNeededFields(this' fragId' subinfo);  							break;  						}  					case "sublayout":  						string layoutName = XmlUtils.GetOptionalAttributeValue(frag' "name"' null);  						XmlNode layout;  						if (frag.ChildNodes.Count > 0 && layoutName == null)  						{  							layout = frag;  						}  						else  						{  							// This will potentially also find a part' which we don't want here.  							layout = GetNodeForPart(layoutName' true' info.TargetClass(this));  							if (layout.Name != "layout")  								return;  						}  						//ProcessChildren(layout' vwenv' hvo' frag);  						DetermineNeededFieldsForChildren(layout' frag' info);  						break;  					case "obj":  						{  							// NOTE TO JohnT: perhaps "AddAtomicField" is really "AddSimpleField"'  							// "AddObjField" is really "AddOwningOrReferenceField" ??  							// or split three ways instead of two? (one for AtomicRef/Own)  							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  								if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							if (flid == 0)  								return;  							int fragId = GetSubFragId(frag' caller);  							if (fragId == 0)  								return; // something badly wrong.    							if (info.SeqDepth < 3 && info.Depth < 10) // see comments on case seq  							{  								NeededPropertyInfo subinfo = info.AddObjField(flid' false);  								DisplayCommand dispCommand = m_idToDisplayCommand[fragId];  								dispCommand.DetermineNeededFields(this' fragId' subinfo);  							}  						}  						break;  					case "objlocal":  						{  							int flid = DetermineNeededFlid(frag' info);  							if (flid == 0)  								return;  							NeededPropertyInfo subinfo = info.AddObjField(flid' false);  							DisplayCommand dispCommand = new ObjLocalCommand(frag' caller);  							dispCommand.DetermineNeededFields(this' 0' subinfo);  						}  						break;  				}  			}  			catch (Exception)  			{  				// ignore' don't do any preloading.  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,DetermineNeededFieldsFor,The following statement contains a magic number: try  			{  				switch (frag.Name)  				{  					default:  						// Any cases not handled just do nothing.  						break;  					case "part":  						// This occurs when the node we're processing is a child of a layout'  						// and therefore a 'part ref'. It calls the specified part of the current object.  						DetermineNeededFieldsForPartRef(frag' info);  						break;  					case "elementDisplayCondition":  					case "if":  					case "ifnot":  					case "where":  						{  							// Enhance: get stuff for the condition tests of if' ifnot' and where  							int flid = DetermineNeededFlid(frag' info);  							IFwMetaDataCache mdc = m_sda.MetaDataCache;  							NeededPropertyInfo infoTarget = info;  							if (flid == 0)  							{  								// Deal with the object/object/flid scenario  								string stFieldPath = XmlUtils.GetOptionalAttributeValue(frag' "field");  								if (!String.IsNullOrEmpty(stFieldPath))  								{  									string[] rgstFields = stFieldPath.Split(new char[] { '/' });  									if (rgstFields.Length >= 2) // otherwise DetermineNeededFlid already got it.  									{  										string stClassName = XmlUtils.GetOptionalAttributeValue(frag' "class");  										if (String.IsNullOrEmpty(stClassName))  										{  											int classId = info.TargetClass(this);  											flid = mdc.GetFieldId2(classId' rgstFields[0]' true);  										}  										else  										{  											flid = mdc.GetFieldId(stClassName' rgstFields[0]' true);  										}  										// on entry to each iteration' flid is the flid resulting from  										// rgstFields[i-1]. On successful exit' it is the flid of the last  										// item' the real field' which is processed normally.  										for (int i = 1; i < rgstFields.Length; i++)  										{  											// We assume this intermediate flid is an object property.  											infoTarget = infoTarget.AddObjField(flid' false);  											string subFieldName = rgstFields[i];  											int outerClassId = mdc.GetDstClsId(flid);  											flid = mdc.GetFieldId2(outerClassId' subFieldName' true);  										}  									}  								}  							}  							if (flid != 0)  							{  								string sWs = XmlUtils.GetOptionalAttributeValue(frag' "ws"' null);  								int wsid = 0;  								if (sWs != null)  								{  									if (sWs == "current" && s_qwsCurrent != null)  									{  										wsid = s_qwsCurrent.Handle;  									}  									else  									{  										// If ws is 'configure' then we must have a caller to inherit the configured value from.  										if (sWs == "configure")  										{  											sWs = XmlUtils.GetMandatoryAttributeValue(caller' "ws");  										}  										wsid = m_cache.WritingSystemFactory.GetWsFromStr(sWs);  									}  								}  								if (wsid == 0 && sWs != null)  								{  									foreach (int ws in WritingSystemServices.GetWritingSystems(m_cache' frag))  										infoTarget.AddAtomicField(flid' ws);  								}  								else  								{  									infoTarget.AddAtomicField(flid' wsid);  								}  							}  						}  						DetermineNeededFieldsForChildren(frag' caller' info);  						break;  					case "para":  					case "concpara":  					case "div":  					case "innerpile":  					case "span":  					case "table":  					case "header":  					case "footer":  					case "body":  					case "row":  					case "cell":  					case "headercell":  					case "choice":  					case "otherwise":  						DetermineNeededFieldsForChildren(frag' caller' info);  						break;  					case "string":  						{  							//GetActualTarget(frag' ref hvoTarget' m_cache);	// modify the hvo if needed  							// If GetActualTargetInfo would modify the target don't try to be smart.  							string target = XmlUtils.GetOptionalAttributeValue(frag' "target"' "").ToLower();  							if (target == "owner")  								return;    							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  								if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}    							// If we don't have enough info to determine a flid' give up.  							if (flid == 0)  								return;    							int itype = m_sda.MetaDataCache.GetFieldType(flid);  							itype = itype & (int)CellarPropertyTypeFilter.VirtualMask;  							if ((itype == (int)CellarPropertyType.MultiString) ||  								(itype == (int)CellarPropertyType.MultiUnicode))  							{  								if (s_cwsMulti > 1)  								{  									string sLabelWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  									if (sLabelWs != null && sLabelWs == "current")  									{  										if (s_qwsCurrent != null)  											info.AddAtomicField(flid' s_qwsCurrent.Handle);  									}  								}  								else  								{  									foreach (int wsid in WritingSystemServices.GetWritingSystems(m_cache' frag))  										info.AddAtomicField(flid' wsid);  								}  							}  							else  							{  								// add info for simple string.  								info.AddAtomicField(flid' 0);  							}  							break;  						}  					case "configureMlString":  						{  							string target = XmlUtils.GetOptionalAttributeValue(frag' "target"' "").ToLower();  							if (target == "owner")  								return;    							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  								if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							// If we don't have enough info to determine a flid' give up.  							if (flid == 0)  								return;    							// The Ws info specified in the part ref node  							string sWs = XmlUtils.GetOptionalAttributeValue(caller' "ws");  							if (sWs == "reversal")  							{  								info.AddAtomicField(flid' m_wsReversal);  							}  							else  							{  								foreach (int wsid in WritingSystemServices.GetWritingSystems(m_cache' caller))  								info.AddAtomicField(flid' wsid);  							}  							break;  						}  					case "gendate":  					case "int":  						{  							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  							if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							if (flid == 0)  								return;  							info.AddAtomicField(flid' 0);  						}  						break;  					case "seq":  						{  							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  							if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							if (flid == 0)  								return;  							int fragId = GetSubFragId(frag' caller);  							if (fragId == 0)  								return; // something badly wrong.  							// Checking depth guards against infinite recursion (e.g.' subsenses of senses)'  							// but also against doing optimization queries for cases which rarely occur in  							// the real data. It may need fine tuning' possibly even by an XML-specified property  							// of the top-level layout.  							if (info.SeqDepth >= 4)  								break;    							NeededPropertyInfo subinfo = info.AddObjField(flid' true);  								DisplayCommand dispCommand = m_idToDisplayCommand[fragId];  								dispCommand.DetermineNeededFields(this' fragId' subinfo);  							break;  						}  					case "sublayout":  						string layoutName = XmlUtils.GetOptionalAttributeValue(frag' "name"' null);  						XmlNode layout;  						if (frag.ChildNodes.Count > 0 && layoutName == null)  						{  							layout = frag;  						}  						else  						{  							// This will potentially also find a part' which we don't want here.  							layout = GetNodeForPart(layoutName' true' info.TargetClass(this));  							if (layout.Name != "layout")  								return;  						}  						//ProcessChildren(layout' vwenv' hvo' frag);  						DetermineNeededFieldsForChildren(layout' frag' info);  						break;  					case "obj":  						{  							// NOTE TO JohnT: perhaps "AddAtomicField" is really "AddSimpleField"'  							// "AddObjField" is really "AddOwningOrReferenceField" ??  							// or split three ways instead of two? (one for AtomicRef/Own)  							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  								if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							if (flid == 0)  								return;  							int fragId = GetSubFragId(frag' caller);  							if (fragId == 0)  								return; // something badly wrong.    							if (info.SeqDepth < 3 && info.Depth < 10) // see comments on case seq  							{  								NeededPropertyInfo subinfo = info.AddObjField(flid' false);  								DisplayCommand dispCommand = m_idToDisplayCommand[fragId];  								dispCommand.DetermineNeededFields(this' fragId' subinfo);  							}  						}  						break;  					case "objlocal":  						{  							int flid = DetermineNeededFlid(frag' info);  							if (flid == 0)  								return;  							NeededPropertyInfo subinfo = info.AddObjField(flid' false);  							DisplayCommand dispCommand = new ObjLocalCommand(frag' caller);  							dispCommand.DetermineNeededFields(this' 0' subinfo);  						}  						break;  				}  			}  			catch (Exception)  			{  				// ignore' don't do any preloading.  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,DetermineNeededFieldsFor,The following statement contains a magic number: try  			{  				switch (frag.Name)  				{  					default:  						// Any cases not handled just do nothing.  						break;  					case "part":  						// This occurs when the node we're processing is a child of a layout'  						// and therefore a 'part ref'. It calls the specified part of the current object.  						DetermineNeededFieldsForPartRef(frag' info);  						break;  					case "elementDisplayCondition":  					case "if":  					case "ifnot":  					case "where":  						{  							// Enhance: get stuff for the condition tests of if' ifnot' and where  							int flid = DetermineNeededFlid(frag' info);  							IFwMetaDataCache mdc = m_sda.MetaDataCache;  							NeededPropertyInfo infoTarget = info;  							if (flid == 0)  							{  								// Deal with the object/object/flid scenario  								string stFieldPath = XmlUtils.GetOptionalAttributeValue(frag' "field");  								if (!String.IsNullOrEmpty(stFieldPath))  								{  									string[] rgstFields = stFieldPath.Split(new char[] { '/' });  									if (rgstFields.Length >= 2) // otherwise DetermineNeededFlid already got it.  									{  										string stClassName = XmlUtils.GetOptionalAttributeValue(frag' "class");  										if (String.IsNullOrEmpty(stClassName))  										{  											int classId = info.TargetClass(this);  											flid = mdc.GetFieldId2(classId' rgstFields[0]' true);  										}  										else  										{  											flid = mdc.GetFieldId(stClassName' rgstFields[0]' true);  										}  										// on entry to each iteration' flid is the flid resulting from  										// rgstFields[i-1]. On successful exit' it is the flid of the last  										// item' the real field' which is processed normally.  										for (int i = 1; i < rgstFields.Length; i++)  										{  											// We assume this intermediate flid is an object property.  											infoTarget = infoTarget.AddObjField(flid' false);  											string subFieldName = rgstFields[i];  											int outerClassId = mdc.GetDstClsId(flid);  											flid = mdc.GetFieldId2(outerClassId' subFieldName' true);  										}  									}  								}  							}  							if (flid != 0)  							{  								string sWs = XmlUtils.GetOptionalAttributeValue(frag' "ws"' null);  								int wsid = 0;  								if (sWs != null)  								{  									if (sWs == "current" && s_qwsCurrent != null)  									{  										wsid = s_qwsCurrent.Handle;  									}  									else  									{  										// If ws is 'configure' then we must have a caller to inherit the configured value from.  										if (sWs == "configure")  										{  											sWs = XmlUtils.GetMandatoryAttributeValue(caller' "ws");  										}  										wsid = m_cache.WritingSystemFactory.GetWsFromStr(sWs);  									}  								}  								if (wsid == 0 && sWs != null)  								{  									foreach (int ws in WritingSystemServices.GetWritingSystems(m_cache' frag))  										infoTarget.AddAtomicField(flid' ws);  								}  								else  								{  									infoTarget.AddAtomicField(flid' wsid);  								}  							}  						}  						DetermineNeededFieldsForChildren(frag' caller' info);  						break;  					case "para":  					case "concpara":  					case "div":  					case "innerpile":  					case "span":  					case "table":  					case "header":  					case "footer":  					case "body":  					case "row":  					case "cell":  					case "headercell":  					case "choice":  					case "otherwise":  						DetermineNeededFieldsForChildren(frag' caller' info);  						break;  					case "string":  						{  							//GetActualTarget(frag' ref hvoTarget' m_cache);	// modify the hvo if needed  							// If GetActualTargetInfo would modify the target don't try to be smart.  							string target = XmlUtils.GetOptionalAttributeValue(frag' "target"' "").ToLower();  							if (target == "owner")  								return;    							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  								if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}    							// If we don't have enough info to determine a flid' give up.  							if (flid == 0)  								return;    							int itype = m_sda.MetaDataCache.GetFieldType(flid);  							itype = itype & (int)CellarPropertyTypeFilter.VirtualMask;  							if ((itype == (int)CellarPropertyType.MultiString) ||  								(itype == (int)CellarPropertyType.MultiUnicode))  							{  								if (s_cwsMulti > 1)  								{  									string sLabelWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  									if (sLabelWs != null && sLabelWs == "current")  									{  										if (s_qwsCurrent != null)  											info.AddAtomicField(flid' s_qwsCurrent.Handle);  									}  								}  								else  								{  									foreach (int wsid in WritingSystemServices.GetWritingSystems(m_cache' frag))  										info.AddAtomicField(flid' wsid);  								}  							}  							else  							{  								// add info for simple string.  								info.AddAtomicField(flid' 0);  							}  							break;  						}  					case "configureMlString":  						{  							string target = XmlUtils.GetOptionalAttributeValue(frag' "target"' "").ToLower();  							if (target == "owner")  								return;    							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  								if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							// If we don't have enough info to determine a flid' give up.  							if (flid == 0)  								return;    							// The Ws info specified in the part ref node  							string sWs = XmlUtils.GetOptionalAttributeValue(caller' "ws");  							if (sWs == "reversal")  							{  								info.AddAtomicField(flid' m_wsReversal);  							}  							else  							{  								foreach (int wsid in WritingSystemServices.GetWritingSystems(m_cache' caller))  								info.AddAtomicField(flid' wsid);  							}  							break;  						}  					case "gendate":  					case "int":  						{  							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  							if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							if (flid == 0)  								return;  							info.AddAtomicField(flid' 0);  						}  						break;  					case "seq":  						{  							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  							if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							if (flid == 0)  								return;  							int fragId = GetSubFragId(frag' caller);  							if (fragId == 0)  								return; // something badly wrong.  							// Checking depth guards against infinite recursion (e.g.' subsenses of senses)'  							// but also against doing optimization queries for cases which rarely occur in  							// the real data. It may need fine tuning' possibly even by an XML-specified property  							// of the top-level layout.  							if (info.SeqDepth >= 4)  								break;    							NeededPropertyInfo subinfo = info.AddObjField(flid' true);  								DisplayCommand dispCommand = m_idToDisplayCommand[fragId];  								dispCommand.DetermineNeededFields(this' fragId' subinfo);  							break;  						}  					case "sublayout":  						string layoutName = XmlUtils.GetOptionalAttributeValue(frag' "name"' null);  						XmlNode layout;  						if (frag.ChildNodes.Count > 0 && layoutName == null)  						{  							layout = frag;  						}  						else  						{  							// This will potentially also find a part' which we don't want here.  							layout = GetNodeForPart(layoutName' true' info.TargetClass(this));  							if (layout.Name != "layout")  								return;  						}  						//ProcessChildren(layout' vwenv' hvo' frag);  						DetermineNeededFieldsForChildren(layout' frag' info);  						break;  					case "obj":  						{  							// NOTE TO JohnT: perhaps "AddAtomicField" is really "AddSimpleField"'  							// "AddObjField" is really "AddOwningOrReferenceField" ??  							// or split three ways instead of two? (one for AtomicRef/Own)  							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  								if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							if (flid == 0)  								return;  							int fragId = GetSubFragId(frag' caller);  							if (fragId == 0)  								return; // something badly wrong.    							if (info.SeqDepth < 3 && info.Depth < 10) // see comments on case seq  							{  								NeededPropertyInfo subinfo = info.AddObjField(flid' false);  								DisplayCommand dispCommand = m_idToDisplayCommand[fragId];  								dispCommand.DetermineNeededFields(this' fragId' subinfo);  							}  						}  						break;  					case "objlocal":  						{  							int flid = DetermineNeededFlid(frag' info);  							if (flid == 0)  								return;  							NeededPropertyInfo subinfo = info.AddObjField(flid' false);  							DisplayCommand dispCommand = new ObjLocalCommand(frag' caller);  							dispCommand.DetermineNeededFields(this' 0' subinfo);  						}  						break;  				}  			}  			catch (Exception)  			{  				// ignore' don't do any preloading.  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,DetermineNeededFieldsFor,The following statement contains a magic number: try  			{  				switch (frag.Name)  				{  					default:  						// Any cases not handled just do nothing.  						break;  					case "part":  						// This occurs when the node we're processing is a child of a layout'  						// and therefore a 'part ref'. It calls the specified part of the current object.  						DetermineNeededFieldsForPartRef(frag' info);  						break;  					case "elementDisplayCondition":  					case "if":  					case "ifnot":  					case "where":  						{  							// Enhance: get stuff for the condition tests of if' ifnot' and where  							int flid = DetermineNeededFlid(frag' info);  							IFwMetaDataCache mdc = m_sda.MetaDataCache;  							NeededPropertyInfo infoTarget = info;  							if (flid == 0)  							{  								// Deal with the object/object/flid scenario  								string stFieldPath = XmlUtils.GetOptionalAttributeValue(frag' "field");  								if (!String.IsNullOrEmpty(stFieldPath))  								{  									string[] rgstFields = stFieldPath.Split(new char[] { '/' });  									if (rgstFields.Length >= 2) // otherwise DetermineNeededFlid already got it.  									{  										string stClassName = XmlUtils.GetOptionalAttributeValue(frag' "class");  										if (String.IsNullOrEmpty(stClassName))  										{  											int classId = info.TargetClass(this);  											flid = mdc.GetFieldId2(classId' rgstFields[0]' true);  										}  										else  										{  											flid = mdc.GetFieldId(stClassName' rgstFields[0]' true);  										}  										// on entry to each iteration' flid is the flid resulting from  										// rgstFields[i-1]. On successful exit' it is the flid of the last  										// item' the real field' which is processed normally.  										for (int i = 1; i < rgstFields.Length; i++)  										{  											// We assume this intermediate flid is an object property.  											infoTarget = infoTarget.AddObjField(flid' false);  											string subFieldName = rgstFields[i];  											int outerClassId = mdc.GetDstClsId(flid);  											flid = mdc.GetFieldId2(outerClassId' subFieldName' true);  										}  									}  								}  							}  							if (flid != 0)  							{  								string sWs = XmlUtils.GetOptionalAttributeValue(frag' "ws"' null);  								int wsid = 0;  								if (sWs != null)  								{  									if (sWs == "current" && s_qwsCurrent != null)  									{  										wsid = s_qwsCurrent.Handle;  									}  									else  									{  										// If ws is 'configure' then we must have a caller to inherit the configured value from.  										if (sWs == "configure")  										{  											sWs = XmlUtils.GetMandatoryAttributeValue(caller' "ws");  										}  										wsid = m_cache.WritingSystemFactory.GetWsFromStr(sWs);  									}  								}  								if (wsid == 0 && sWs != null)  								{  									foreach (int ws in WritingSystemServices.GetWritingSystems(m_cache' frag))  										infoTarget.AddAtomicField(flid' ws);  								}  								else  								{  									infoTarget.AddAtomicField(flid' wsid);  								}  							}  						}  						DetermineNeededFieldsForChildren(frag' caller' info);  						break;  					case "para":  					case "concpara":  					case "div":  					case "innerpile":  					case "span":  					case "table":  					case "header":  					case "footer":  					case "body":  					case "row":  					case "cell":  					case "headercell":  					case "choice":  					case "otherwise":  						DetermineNeededFieldsForChildren(frag' caller' info);  						break;  					case "string":  						{  							//GetActualTarget(frag' ref hvoTarget' m_cache);	// modify the hvo if needed  							// If GetActualTargetInfo would modify the target don't try to be smart.  							string target = XmlUtils.GetOptionalAttributeValue(frag' "target"' "").ToLower();  							if (target == "owner")  								return;    							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  								if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}    							// If we don't have enough info to determine a flid' give up.  							if (flid == 0)  								return;    							int itype = m_sda.MetaDataCache.GetFieldType(flid);  							itype = itype & (int)CellarPropertyTypeFilter.VirtualMask;  							if ((itype == (int)CellarPropertyType.MultiString) ||  								(itype == (int)CellarPropertyType.MultiUnicode))  							{  								if (s_cwsMulti > 1)  								{  									string sLabelWs = XmlUtils.GetOptionalAttributeValue(frag' "ws");  									if (sLabelWs != null && sLabelWs == "current")  									{  										if (s_qwsCurrent != null)  											info.AddAtomicField(flid' s_qwsCurrent.Handle);  									}  								}  								else  								{  									foreach (int wsid in WritingSystemServices.GetWritingSystems(m_cache' frag))  										info.AddAtomicField(flid' wsid);  								}  							}  							else  							{  								// add info for simple string.  								info.AddAtomicField(flid' 0);  							}  							break;  						}  					case "configureMlString":  						{  							string target = XmlUtils.GetOptionalAttributeValue(frag' "target"' "").ToLower();  							if (target == "owner")  								return;    							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  								if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							// If we don't have enough info to determine a flid' give up.  							if (flid == 0)  								return;    							// The Ws info specified in the part ref node  							string sWs = XmlUtils.GetOptionalAttributeValue(caller' "ws");  							if (sWs == "reversal")  							{  								info.AddAtomicField(flid' m_wsReversal);  							}  							else  							{  								foreach (int wsid in WritingSystemServices.GetWritingSystems(m_cache' caller))  								info.AddAtomicField(flid' wsid);  							}  							break;  						}  					case "gendate":  					case "int":  						{  							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  							if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							if (flid == 0)  								return;  							info.AddAtomicField(flid' 0);  						}  						break;  					case "seq":  						{  							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  							if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							if (flid == 0)  								return;  							int fragId = GetSubFragId(frag' caller);  							if (fragId == 0)  								return; // something badly wrong.  							// Checking depth guards against infinite recursion (e.g.' subsenses of senses)'  							// but also against doing optimization queries for cases which rarely occur in  							// the real data. It may need fine tuning' possibly even by an XML-specified property  							// of the top-level layout.  							if (info.SeqDepth >= 4)  								break;    							NeededPropertyInfo subinfo = info.AddObjField(flid' true);  								DisplayCommand dispCommand = m_idToDisplayCommand[fragId];  								dispCommand.DetermineNeededFields(this' fragId' subinfo);  							break;  						}  					case "sublayout":  						string layoutName = XmlUtils.GetOptionalAttributeValue(frag' "name"' null);  						XmlNode layout;  						if (frag.ChildNodes.Count > 0 && layoutName == null)  						{  							layout = frag;  						}  						else  						{  							// This will potentially also find a part' which we don't want here.  							layout = GetNodeForPart(layoutName' true' info.TargetClass(this));  							if (layout.Name != "layout")  								return;  						}  						//ProcessChildren(layout' vwenv' hvo' frag);  						DetermineNeededFieldsForChildren(layout' frag' info);  						break;  					case "obj":  						{  							// NOTE TO JohnT: perhaps "AddAtomicField" is really "AddSimpleField"'  							// "AddObjField" is really "AddOwningOrReferenceField" ??  							// or split three ways instead of two? (one for AtomicRef/Own)  							int flid = 0;  							if (!TryCustomField(m_sda' frag' 0' out flid))  							{  								flid = DetermineNeededFlid(frag' info);  							}  							else  							{  								// TryCustomField may not be able to dertermine the flid  								// without the hvo' but might still be able to determine that  								// it's a custom field.  								if (flid == 0)  									flid = DetermineNeededFlid(frag' info);  								m_customFieldNode = frag;  							}  							if (flid == 0)  								return;  							int fragId = GetSubFragId(frag' caller);  							if (fragId == 0)  								return; // something badly wrong.    							if (info.SeqDepth < 3 && info.Depth < 10) // see comments on case seq  							{  								NeededPropertyInfo subinfo = info.AddObjField(flid' false);  								DisplayCommand dispCommand = m_idToDisplayCommand[fragId];  								dispCommand.DetermineNeededFields(this' fragId' subinfo);  							}  						}  						break;  					case "objlocal":  						{  							int flid = DetermineNeededFlid(frag' info);  							if (flid == 0)  								return;  							NeededPropertyInfo subinfo = info.AddObjField(flid' false);  							DisplayCommand dispCommand = new ObjLocalCommand(frag' caller);  							dispCommand.DetermineNeededFields(this' 0' subinfo);  						}  						break;  				}  			}  			catch (Exception)  			{  				// ignore' don't do any preloading.  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,DetermineNeededFlid,The following statement contains a magic number: try  			{  				IFwMetaDataCache mdc = m_sda.MetaDataCache;  				XmlAttribute xa = frag.Attributes["flid"];  				if (xa == null)  				{  					if (mdc == null)  						return 0; // can't do anything else sensible.  					// JohnT: try class' field props and look up in MetaDataCache.    					string stClassName = XmlUtils.GetOptionalAttributeValue(frag' "class");  					string stFieldName = XmlUtils.GetOptionalAttributeValue(frag' "field");  					if (String.IsNullOrEmpty(stFieldName) || stFieldName == "OwningFlid")  					{  						return 0;  					}  					else if (stFieldName == "OwnOrd" ||  						stFieldName == "Guid" ||  						stFieldName == "Owner" ||  						stFieldName == "Self")  					{  						// try a general purpose field that doesn't get treated as a 'base' class.  						flid = mdc.GetFieldId("CmObject"' stFieldName' false);  					}  					else if (String.IsNullOrEmpty(stClassName))  					{  						int classId = info.TargetClass(this);  						flid = mdc.GetFieldId2(classId' stFieldName' true);  					}  					else  					{  						flid = mdc.GetFieldId(stClassName' stFieldName' true);  					}  				}  				else  				{  					flid = Convert.ToInt32(xa.Value' 10);  				}  			}  			catch  			{  				// Eat any exception.  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,IntEqualsConditionPasses,The following statement contains a magic number: int intValue = XmlUtils.GetOptionalIntegerValue(frag' "intequals"' -2);
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,IntEqualsConditionPasses,The following statement contains a magic number: int intValue2 = XmlUtils.GetOptionalIntegerValue(frag' "intequals"' -3);
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,IntEqualsConditionPasses,The following statement contains a magic number: if (intValue != -2 || intValue2 != -3)  			{  				int value = GetValueFromCache(vwenv' frag' hvo' sda);  				if (value != intValue)  					return false;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,IntEqualsConditionPasses,The following statement contains a magic number: if (intValue != -2 || intValue2 != -3)  			{  				int value = GetValueFromCache(vwenv' frag' hvo' sda);  				if (value != intValue)  					return false;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,IntGreaterConditionPasses,The following statement contains a magic number: int intValue = XmlUtils.GetOptionalIntegerValue(frag' "intgreaterthan"' -2);
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,IntGreaterConditionPasses,The following statement contains a magic number: int intValue2 = XmlUtils.GetOptionalIntegerValue(frag' "intgreaterthan"' -3);
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,IntGreaterConditionPasses,The following statement contains a magic number: if (intValue != -2 || intValue2 != -3)  			{  				int value = GetValueFromCache(vwenv' frag' hvo' sda);  				if (value <= intValue)  					return false;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,IntGreaterConditionPasses,The following statement contains a magic number: if (intValue != -2 || intValue2 != -3)  			{  				int value = GetValueFromCache(vwenv' frag' hvo' sda);  				if (value <= intValue)  					return false;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,IntLessConditionPasses,The following statement contains a magic number: int intValue = XmlUtils.GetOptionalIntegerValue(frag' "intlessthan"' -2);
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,IntLessConditionPasses,The following statement contains a magic number: int intValue2 = XmlUtils.GetOptionalIntegerValue(frag' "intlessthan"' -3);
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,IntLessConditionPasses,The following statement contains a magic number: if (intValue != -2 || intValue2 != -3)  			{  				int value = GetValueFromCache(vwenv' frag' hvo' sda);  				if (value >= intValue)  					return false;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,IntLessConditionPasses,The following statement contains a magic number: if (intValue != -2 || intValue2 != -3)  			{  				int value = GetValueFromCache(vwenv' frag' hvo' sda);  				if (value >= intValue)  					return false;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,HvoEqualsConditionPasses,The following statement contains a magic number: if (sIndex == null)  			{  				int flid = GetFlid(frag' hvo' sda);  				val = sda.get_ObjectProp(hvo' flid);  			}  			else  			{  				int index;  				try  				{  					index = Convert.ToInt32(sIndex' 10);  					int flid = GetFlid(frag' hvo' sda);  					val = sda.get_VecItem(hvo' flid' index);  				}  				catch  				{  					return false;  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetIntVal,The following statement contains a magic number: return Convert.ToInt32(xa.Value' 10);
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetFlid,The following statement contains a magic number: try  			{  				var mdc = sda.MetaDataCache;  				XmlAttribute xa = frag.Attributes["flid"];  				if (xa == null)  				{  					if (mdc == null)  						return 0;  					// can't do anything else sensible.  					// JohnT: try class' field props and look up in MetaDataCache.    					string stClassName = XmlUtils.GetOptionalAttributeValue(frag' "class");  					if (stClassName == null && hvo != 0)  					{  						var clsid = sda.get_IntProp(hvo' CmObjectTags.kflidClass);  						stClassName = mdc.GetClassName(clsid);  					}  					string stFieldName = XmlUtils.GetOptionalAttributeValue(frag' "field");  					if (stFieldName != null)  					{  						string[] rgstFields = stFieldName.Split('/');  						if (rgstFields != null && rgstFields.Length > 1)  						{  							// this kind of field attribute is handled in GetFlidAndHvo()  							return 0;  						}  					}  					if (!String.IsNullOrEmpty(stClassName) && !String.IsNullOrEmpty(stFieldName))  						flid = mdc.GetFieldId(stClassName' stFieldName' true);  				}  				else  				{  					flid = Convert.ToInt32(xa.Value' 10);  				}  			}  			catch (Exception e)  			{  				throw new ConfigurationException("There was a problem figuring out the flid for " + hvo' frag' e);  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetFlidAndHvo,The following statement contains a magic number: try  			{    				int flid = 0;  				IFwMetaDataCache mdc = sda.MetaDataCache;  				XmlAttribute xa = frag.Attributes["flid"];  				if (xa == null)  				{  					if (mdc == null)  						return 0; // can't do anything else sensible.  					// JohnT: try class' field props and look up in MetaDataCache.    					string stClassName = XmlUtils.GetOptionalAttributeValue(frag' "class");  					string stFieldPath = XmlUtils.GetOptionalAttributeValue(frag' "field");  					string[] rgstFields = stFieldPath.Split('/');    					for (int i = 0; i < rgstFields.Length; i++)  					{  						if (i > 0)  						{  							NoteDependency(vwenv' hvo' flid);  							hvo = sda.get_ObjectProp(hvo' flid);  							if (hvo == 0)  								return -1;  						}  						if (String.IsNullOrEmpty(stClassName))  						{  							int clsid = sda.get_IntProp(hvo' CmObjectTags.kflidClass);  							flid = mdc.GetFieldId2(clsid' rgstFields[i]' true);  						}  						else  						{  							flid = mdc.GetFieldId(stClassName' rgstFields[i]' true);  							if (flid != 0)  							{  								// And cache it for next time if possible...  								// Can only do this if it doesn't depend on the current object.  								// (Hence we only do this here where there was an explicit "class" attribute'  								// not in the branch where we looked up the class on the object.)  								XmlNode xmldocT = frag;  								while (xmldocT != null && !(xmldocT is XmlDocument))  									xmldocT = xmldocT.ParentNode;  								if (xmldocT != null)  								{  									XmlDocument xmldoc = (XmlDocument)xmldocT;  									XmlAttribute xaT = xmldoc.CreateAttribute("flid");  									xaT.Value = flid.ToString();  									frag.Attributes.Prepend(xaT);  								}  							}  						}  						stClassName = null;  					}  				}  				else  				{  					flid = Convert.ToInt32(xa.Value' 10);  				}  				return flid;  			}  			catch (Exception e)  			{  				throw new ConfigurationException("There was a problem figuring out the flid for " + hvo' frag' e);  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetColCount,The following statement contains a magic number: return GetIntVal(frag' "columns"' 2' hvo);
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessColumnSpec,The following statement contains a magic number: vlWidth.nVal = XmlUtils.GetOptionalIntegerValue(node' "width"' 1000 / colsTotal);
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ProcessProperty,The following statement contains a magic number: switch (node.Name)  			{  				case "fontfamily":  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptFontFamily' GetPropVal(node));  						break;  					}  				case "italic": // <italic/> || <italic value='on|off|invert'/>  					{  						int val = OnOffInvert(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptItalic' (int)FwTextPropVar.ktpvEnum' val);  						break;  					}  				case "bold": // <bold/> || <bold value='on|off|invert'/>  					{  						int val = OnOffInvert(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBold' (int)FwTextPropVar.ktpvEnum' val);  						break;  					}  				case "style":  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' GetPropVal(node));  						break;  					}  				case "superscript": // <superscript/> || <superscript value='super|sub|off'/>  					{  						string strVal = GetPropVal(node);  						int val = (int)FwSuperscriptVal.kssvSuper; // default  						switch (strVal)  						{  							case "super":  							case null:  								val = (int)FwSuperscriptVal.kssvSuper;  								break;  							case "off":  								val = (int)FwSuperscriptVal.kssvOff;  								break;  							case "sub":  								val = (int)FwSuperscriptVal.kssvSub;  								break;  							default:  								Debug.Assert(false' "Expected value super' sub' or off");  								break;  						}  						vwenv.set_IntProperty((int)FwTextPropType.ktptSuperscript' (int)FwTextPropVar.ktpvEnum' val);  						break;  					}  				case "underline": // <underline/> || <underline value='single|none|double|dotted|dashed|squiggle'/>  					{  						string strVal = GetPropVal(node);  						int val = InterpretUnderlineType(strVal);  						vwenv.set_IntProperty((int)FwTextPropType.ktptUnderline' (int)FwTextPropVar.ktpvEnum' val);  						break;  					}  				case "fontsize": // <fontsize value='millipoints'/>  					{  						string sval = GetPropVal(node);  						if (sval == null || sval.Length == 0)  							break;  						sval = sval.Trim();  						if (sval[sval.Length - 1] == '%')  						{  							sval = sval.Substring(0' sval.Length - 1); // strip %  							int percent = Convert.ToInt32(sval);  							vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvRelative' percent * 100);  						}  						else  						{  							int val = MillipointVal(node);  							vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint' val);  						}  						break;  					}  				case "offset": // <offset value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "backcolor":  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptBackColor' (int)FwTextPropVar.ktpvDefault'  							ColorVal(node));  						break;  					}  				case "forecolor":  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptForeColor' (int)FwTextPropVar.ktpvDefault'  							ColorVal(node));  						break;  					}  				case "underlinecolor": // underlineColor? But for now I'm sticking to the ktpt names...  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptUnderColor' (int)FwTextPropVar.ktpvDefault'  							ColorVal(node));  						break;  					}  				case "alignment":  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum'  							Alignment(node));  						break;  					}  				case "firstindent": // <firstindent value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptFirstIndent' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "marginleading":  				case "leadingindent": // <leadingindent value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptLeadingIndent' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "margintrailing":  				case "trailingindent": // <trailingindent value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptTrailingIndent' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "spacebefore": // <spacebefore value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptSpaceBefore' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "marginbottom":  				case "spaceafter": // <spaceafter value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptSpaceAfter' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "lineheight": // <lineheight value='millipoints'/>  					{  						// Todo JohnT: add support for relative.  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptLineHeight' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "margintop": // <margintop value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "padleading": // <padleading value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptPadLeading' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "padtrailing": // <padtrailing value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptPadTrailing' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "padtop": // <padtop value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "padbottom": // <padbottom value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptPadBottom' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "borderleading": // <borderleading value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "bordertrailing": // <bordertrailing value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "bordertop": // <bordertop value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "borderbottom": // <borderbottom value='millipoints'/>  					{  						int val = MillipointVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' val);  						break;  					}  				case "editable":  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptEditable' (int)FwTextPropVar.ktpvEnum'  							GetEditable(node));  						break;  					}  				case "righttoleft":  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft' (int)FwTextPropVar.ktpvEnum'  							OnOffInvert(node));  						break;  					}  				case "maxlines":  					{  						var value = GetPropVal(node);  						vwenv.set_IntProperty((int)FwTextPropType.ktptMaxLines' (int)FwTextPropVar.ktpvDefault'  							Convert.ToInt32(value));  						break;  					}  				//Todo JohnT: and a good many more...  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ColorVal,The following statement contains a magic number: if (val[0] == '(')  			{  				int firstComma = val.IndexOf(''');  				int red = Convert.ToInt32(val.Substring(1' firstComma - 1));  				int secondComma = val.IndexOf('''' firstComma + 1);  				int green = Convert.ToInt32(val.Substring(firstComma + 1' secondComma - firstComma - 1));  				int blue = Convert.ToInt32(val.Substring(secondComma + 1' val.Length - secondComma - 2));  				return red + (blue * 256 + green) * 256;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ColorVal,The following statement contains a magic number: if (val[0] == '(')  			{  				int firstComma = val.IndexOf(''');  				int red = Convert.ToInt32(val.Substring(1' firstComma - 1));  				int secondComma = val.IndexOf('''' firstComma + 1);  				int green = Convert.ToInt32(val.Substring(firstComma + 1' secondComma - firstComma - 1));  				int blue = Convert.ToInt32(val.Substring(secondComma + 1' val.Length - secondComma - 2));  				return red + (blue * 256 + green) * 256;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ColorVal,The following statement contains a magic number: if (val[0] == '(')  			{  				int firstComma = val.IndexOf(''');  				int red = Convert.ToInt32(val.Substring(1' firstComma - 1));  				int secondComma = val.IndexOf('''' firstComma + 1);  				int green = Convert.ToInt32(val.Substring(firstComma + 1' secondComma - firstComma - 1));  				int blue = Convert.ToInt32(val.Substring(secondComma + 1' val.Length - secondComma - 2));  				return red + (blue * 256 + green) * 256;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ColorVal,The following statement contains a magic number: return col.R + (col.B * 256 + col.G) * 256;
Magic Number,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,ColorVal,The following statement contains a magic number: return col.R + (col.B * 256 + col.G) * 256;
Magic Number,SIL.FieldWorks.Common.Controls,PropWs,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetHashCode,The following statement contains a magic number: return flid * (ws + 11);
Magic Number,SIL.FieldWorks.Common.Controls,LexReferenceInfo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,LexReferenceInfo,The following statement contains a magic number: if (s.EndsWith(":f"))  			{  				SubClass = TypeSubClass.Forward;  				s = s.Remove(s.Length - 2);  			}  			else if (s.EndsWith(":r"))  			{  				SubClass = TypeSubClass.Reverse;  				s = s.Remove(s.Length - 2);  			}  			else  			{  				SubClass = TypeSubClass.Normal;  			}
Magic Number,SIL.FieldWorks.Common.Controls,LexReferenceInfo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,LexReferenceInfo,The following statement contains a magic number: if (s.EndsWith(":f"))  			{  				SubClass = TypeSubClass.Forward;  				s = s.Remove(s.Length - 2);  			}  			else if (s.EndsWith(":r"))  			{  				SubClass = TypeSubClass.Reverse;  				s = s.Remove(s.Length - 2);  			}  			else  			{  				SubClass = TypeSubClass.Normal;  			}
Magic Number,SIL.FieldWorks.Common.Controls,XmlVcDisplayVec,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVcDisplayVec.cs,CalculateAndFormatSenseLabel,The following statement contains a magic number: if (sNum.Length != 0)  				sTag = (sTag.Remove(ich - 1' 2)).Insert(ich - 1' sNum);
Magic Number,SIL.FieldWorks.Common.Controls,WrapParagraphDisplayCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVcDisplayVec.cs,PerformDisplay,The following statement contains a magic number: vwenv.GetOuterObject(level - 2' out hvoDum' out tag' out ihvo);
Magic Number,SIL.FieldWorks.Common.Controls,XmlView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlView.cs,HandleSelectionChange,The following statement contains a magic number: try  			{  				int cvsli = 0;    				// Out variables for AllTextSelInfo.  				int ihvoRoot = 0;  				int tagTextProp = 0;  				int cpropPrevious = 0;  				int ichAnchor = 0;  				int ichEnd = 0;  				int ws = 0;  				bool fAssocPrev = false;  				int ihvoEnd = 0;  				ITsTextProps ttpBogus = null;  				SelLevInfo[] rgvsli = new SelLevInfo[0];    				List<int> newSelectedObjects = new List<int>(4);  				newSelectedObjects.Add(XmlVc.FocusHvo);  				if (sel != null)  				{  					cvsli = sel.CLevels(false) - 1;  					// Main array of information retrived from sel that made combo.  					rgvsli = SelLevInfo.AllTextSelInfo(sel' cvsli'  						out ihvoRoot' out tagTextProp' out cpropPrevious' out ichAnchor' out ichEnd'  						out ws' out fAssocPrev' out ihvoEnd' out ttpBogus);  					for (int i = 0; i < cvsli; i++)  					{  						newSelectedObjects.Add(rgvsli[i].hvo);  					}  				}  				var changed = new HashSet<int>(m_xmlVc.SelectedObjects);  				changed.SymmetricExceptWith(newSelectedObjects);  				if (changed.Count != 0)  				{  					m_xmlVc.SelectedObjects = newSelectedObjects;  					// Generate propChanged calls that force the relevant parts of the view to redraw  					// to indicate which command icons should be visible.  					foreach (int hvo in changed)  						m_rootb.PropChanged(hvo' XmlVc.IsObjectSelectedTag' 0' 1' 1);  					if (sel != null && !sel.IsValid)  					{  						// we wiped it out by regenerating parts of the display in our PropChanged calls! Restore it if we can.  						sel = m_rootb.MakeTextSelection(ihvoRoot' cvsli' rgvsli' tagTextProp'  							cpropPrevious' ichAnchor' ichEnd' ws' fAssocPrev' ihvoEnd' ttpBogus' true);  					}  				}  			}    			finally  			{  				m_fInChangeSelectedObjects = false;  			}
Magic Number,SIL.FieldWorks.Common.Controls,TestForParameter,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,IsParameter,The following statement contains a magic number: if (input.Length < 2)  				return false;
Missing Default,SIL.FieldWorks.Common.Controls,BrowseViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,ResetAllCollectChangedHvos,The following switch statement is missing a default case: switch (newState)  				{  					case CheckState.ToggleAll:  						newVal = (currentValue == 0) ? 1 : 0;  						break;  					case CheckState.CheckAll:  						newVal = 1;  						break;  					case CheckState.UncheckAll:  						newVal = 0;  						break;  				}
Missing Default,SIL.FieldWorks.Common.Controls,BrowseActiveViewer,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BrowseViewer.cs,GetCheckState,The following switch statement is missing a default case: switch (obj.ClassID)  			{  				case PhRegularRuleTags.kClassId: // fall through  				case PhMetathesisRuleTags.kClassId:  					fDisabled = SpecialCache.get_BooleanProp(hvoItem' PhSegmentRuleTags.kflidDisabled);  					break;  				case MoEndoCompoundTags.kClassId: // fall through  				case MoExoCompoundTags.kClassId:  					fDisabled = SpecialCache.get_BooleanProp(hvoItem' MoCompoundRuleTags.kflidDisabled);  					break;  			}
Missing Default,SIL.FieldWorks.Common.Controls,BulkEditBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\BulkEditBar.cs,m_helpButton_Click,The following switch statement is missing a default case: switch (m_propertyTable.GetStringProperty("currentContentControl"' null))  			{  				case "bulkEditEntriesOrSenses":  					helpTopic = "khtpBulkEditBarEntriesOrSenses";  					break;  				case "reversalToolBulkEditReversalEntries":  					helpTopic = "khtpBulkEditBarReversalEntries";  					break;  				case "toolBulkEditWordforms":  					helpTopic = "khtpBulkEditBarWordforms";  					break;  				case "toolBulkEditPhonemes":  					helpTopic = "khtpBulkEditBarPhonemes";  					break;  			}
Missing Default,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,SelectWsLabel,The following switch statement is missing a default case: switch (wsLabel)  				{  					case "analysis vernacular":  					case "vernacular analysis":  						itemToSelect = wsLabel.Split(' ')[0];  						break;  				}
Missing Default,SIL.FieldWorks.Common.Controls,ColumnConfigureDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ColumnConfigureDialog.cs,TranslateWsParamToLocalizedDisplayCategory,The following switch statement is missing a default case: switch (wsParam)  			{  				case "analysis":  					result = XMLViewsStrings.ksDefaultAnal;  					break;  				case "vernacular":  					result = XMLViewsStrings.ksDefaultVern;  					break;  				case "pronunciation":  					result = XMLViewsStrings.ksDefaultPron;  					break;  				case "best vernoranal":  					result = XMLViewsStrings.ksBestVernAnal;  					break;  				case "best analorvern":  					result = XMLViewsStrings.ksBestAnalVern;  					break;  				case "best analysis":  					result = XMLViewsStrings.ksBestAnal;  					break;  				case "best vernacular":  					result = XMLViewsStrings.ksBestVern;  					break;  				case "reversal":  					{  						// Get the language for this reversal index.  						string sWsName = null;  						if (m_hvoRootObj > 0)  						{  							var servLoc = m_cache.ServiceLocator;  							var ri = servLoc.GetInstance<IReversalIndexRepository>().GetObject(m_hvoRootObj);  							//var ws = servLoc.WritingSystemManager.Get(ri.WritingSystem);  							//sWsName = ws.DisplayLabel;  							sWsName = ri.ShortName;  						}  						if (String.IsNullOrEmpty(sWsName))  							sWsName = GetDefaultReversalWsName();  						if (!String.IsNullOrEmpty(sWsName))  							result = sWsName;  					}  					break;  				//case "reversal index": // ??? is this case used? Nope.  				//    break;  				case "analysis vernacular":  					result = XMLViewsStrings.ksDefaultAnal;  					break;  				case "vernacular analysis":  					result = XMLViewsStrings.ksDefaultVern;  					break;  			}
Missing Default,SIL.FieldWorks.Common.Controls,ConfiguredExport,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ConfiguredExport.cs,AddStringAltMember,The following switch statement is missing a default case: switch (style)  				{  					case "Sense-Reference-Number":  						if (m_xhtml != null)  						{  							m_xhtml.MapCssToLang("xsensexrefnumber"' m_cache.ServiceLocator.WritingSystemManager.Get(wsRun).Id);  						}  						break;  				}
Missing Default,SIL.FieldWorks.Common.Controls,FilterBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\FilterBar.cs,MakeCombo,The following switch statement is missing a default case: switch (blankPossible)  			{  				case "true":  					combo.Items.Add(new FilterComboItem(MakeLabel(XMLViewsStrings.ksBlanks)' new BlankMatcher()' item));  					combo.Items.Add(new FilterComboItem(MakeLabel(XMLViewsStrings.ksNonBlanks)' new NonBlankMatcher()' item));  					break;  			}
Missing Default,SIL.FieldWorks.Common.Controls,GhostParentHelper,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\GhostParentHelper.cs,GetBulkEditDestinationClass,The following switch statement is missing a default case: switch (cache.MetaDataCacheAccessor.GetFieldName(listFlid))  				{  					case "AllExampleSentenceTargets":  						return LexExampleSentenceTags.kClassId;  					case "AllPossiblePronunciations":  						return LexPronunciationTags.kClassId;  					case "AllPossibleEtymologies":  						return LexEtymologyTags.kClassId;  					case "AllPossibleAllomorphs":  						return MoFormTags.kClassId;  					case "AllExampleTranslationTargets":  						return CmTranslationTags.kClassId;  					case "AllComplexEntryRefPropertyTargets":  					case "AllVariantEntryRefPropertyTargets":  						return LexEntryRefTags.kClassId;  					case "AllExtendedNoteTargets":  						return LexExtendedNoteTags.kClassId;  					case "AllPossiblePictures":  						return CmPictureTags.kClassId;  				}
Missing Default,SIL.FieldWorks.Common.Controls,SimpleDateMatchDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\SimpleDateMatchDlg.cs,SetDlgValues,The following switch statement is missing a default case: switch (matcher.MatchType)  			{  				case DateTimeMatcher.DateMatchType.On:  					m_typeCombo.SelectedIndex = 0;  					break;  				case DateTimeMatcher.DateMatchType.NotRange:  					m_typeCombo.SelectedIndex = 1;  					break;  				case DateTimeMatcher.DateMatchType.Before:  					m_typeCombo.SelectedIndex = 2;  					break;  				case DateTimeMatcher.DateMatchType.After:  					m_typeCombo.SelectedIndex = 3;  					break;  				case DateTimeMatcher.DateMatchType.Range:  					m_typeCombo.SelectedIndex = 4;  					break;  			}
Missing Default,SIL.FieldWorks.Common.Controls,PartOwnershipTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutCache.cs,FindCorrespondingItemsInCurrentList,The following switch statement is missing a default case: switch (relationshipOfTarget)  			{  				case RelationshipOfRelatives.Sibling:  					{  						Debug.Fail("Sibling relationships are not supported.");  						// no use for this currently.  						break;  					}  				case RelationshipOfRelatives.Ancestor:  					{  						GhostParentHelper gph = GetGhostParentHelper(flidForItemsBeforeListChange);  						// the items (e.g. senses) are owned by the new class (e.g. entry)'  						// so find the (new class) ancestor for each item.  						foreach (int hvoBeforeListChange in itemsBeforeListChange)  						{  							int hvoAncestorOfItem;  							if (gph != null && gph.GhostOwnerClass == newListItemsClass &&  								gph.IsGhostOwnerClass(hvoBeforeListChange))  							{  								// just add the ghost owner' as the ancestor relative'  								// since it's already in the newListItemsClass  								hvoAncestorOfItem = hvoBeforeListChange;  							}  							else  							{  								var obj =  									Cache.ServiceLocator.GetInstance<ICmObjectRepository>().GetObject(hvoBeforeListChange);  								hvoAncestorOfItem = obj.OwnerOfClass(newListItemsClass).Hvo;  							}  							relatives.Add(hvoAncestorOfItem);  						}  						commonAncestors = relatives;  						break;  					}  				case RelationshipOfRelatives.Descendent:  				case RelationshipOfRelatives.Cousin:  					{  						HashSet<int> newClasses =  							new HashSet<int>(((IFwMetaDataCacheManaged)Cache.MetaDataCacheAccessor).GetAllSubclasses(newListItemsClass));  						foreach (int hvoBeforeListChange in itemsBeforeListChange)  						{  							if (!Cache.ServiceLocator.IsValidObjectId(hvoBeforeListChange))  								continue; // skip this one.  							if (newClasses.Contains(Cache.ServiceLocator.GetObject(hvoBeforeListChange).ClassID))  							{  								// strangely' the 'before' object is ALREADY one that is valid for' and presumably in'  								// the destination property. One way this happens is at startup' when switching to  								// the saved target column' but we have also saved the list of objects.  								relatives.Add(hvoBeforeListChange);  								continue;  							}  							int hvoCommonAncestor;  							if (relationshipOfTarget == RelationshipOfRelatives.Descendent)  							{  								// the item is the ancestor  								hvoCommonAncestor = hvoBeforeListChange;  							}  							else  							{  								// the item and its cousins have a common ancestor.  								hvoCommonAncestor = GetHvoCommonAncestor(hvoBeforeListChange'  																		 prevListItemsClass' newListItemsClass);  							}    							// only add the descendants/cousins if we haven't already processed the ancestor.  							if (!commonAncestors.Contains(hvoCommonAncestor))  							{  								GhostParentHelper gph = GetGhostParentHelper(flidForCurrentList);  								ISet<int> descendents = GetDescendents(hvoCommonAncestor' flidForCurrentList);  								if (descendents.Count > 0)  								{  									relatives.UnionWith(descendents);  								}  								else if (gph != null && gph.IsGhostOwnerClass(hvoCommonAncestor))  								{  									relatives.Add(hvoCommonAncestor);  								}  								commonAncestors.Add(hvoCommonAncestor);  							}  						}  						break;  					}  			}
Missing Default,SIL.FieldWorks.Common.Controls,SortMethodFinder,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\LayoutFinder.cs,GetKey,The following switch statement is missing a default case: switch (layout.Name)  			{  				case "obj":  					{  						int flid = GetFlid(layout' cmo.Hvo);  						if (pathIndex != -1 && (pathIndex == item.PathLength || flid != item.PathFlid(pathIndex)))  							// we are now off of the path  							pathIndex = -1;    						int objHvo = m_cache.MainCacheAccessor.get_ObjectProp(cmo.Hvo' flid);  						if (objHvo != 0)  						{  							if (pathIndex != -1  								&& (pathIndex < item.PathLength - 1 && objHvo == item.PathObject(pathIndex + 1))  								 || (pathIndex == item.PathLength - 1 && objHvo == item.KeyObject))  							{  								return GetChildObjKey(layout' objHvo' item' pathIndex + 1' sortedFromEnd);  							}    							// we are off of the path  							return GetChildObjKey(layout' objHvo' item' -1' sortedFromEnd);  						}  					}  					break;    				case "seq":  					{  						int flid = GetFlid(layout' cmo.Hvo);  						if (pathIndex != -1 && (pathIndex == item.PathLength || flid != item.PathFlid(pathIndex)))  							// we are now off of the path  							pathIndex = -1;    						int size = m_cache.MainCacheAccessor.get_VecSize(cmo.Hvo' flid);  						StringBuilder sb = null;  						for (int i = 0; i < size; i++)  						{  							int objHvo = m_cache.MainCacheAccessor.get_VecItem(cmo.Hvo' flid' i);  							if (pathIndex != -1  								&& (pathIndex < item.PathLength - 1 && objHvo == item.PathObject(pathIndex + 1))  								|| (pathIndex == item.PathLength - 1 && objHvo == item.KeyObject))  							{  								return GetChildObjKey(layout' objHvo' item' pathIndex + 1' sortedFromEnd);  							}    							// if we are off of the path' we concatenate all vector keys to create an  							// aggregate key  							var childObjKey = GetChildObjKey(layout' objHvo' item' -1' sortedFromEnd);  							if (childObjKey != null)  							{  								if (sb == null)  									sb = new StringBuilder();  								foreach (var subKey in childObjKey)  									sb.Append(subKey);  							}  						}  						if (sb != null)  							return new [] {sb.ToString()};  					}  					break;    				case "layout":  				case "part":  					{  						string partref = XmlUtils.GetOptionalAttributeValue(layout' "ref");  						if (partref != null)  						{  							XmlNode part = XmlVc.GetNodeForPart(cmo.Hvo' partref' true' m_sda' m_layouts);  							return GetKey(part' cmo' item' pathIndex' sortedFromEnd);  						}    						foreach (XmlNode child in layout.ChildNodes)  						{  							if (child is XmlComment)  								continue;    							var key = GetKey(child' cmo' item' pathIndex' sortedFromEnd);  							if (key != null)  								return key;  						}  					}  					break;  			}
Missing Default,SIL.FieldWorks.Common.Controls,PartGenerator,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\PartGenerator.cs,Accept,The following switch statement is missing a default case: switch (m_restrictions)  			{  				case "none":  					return true;  				case "customOnly":  					return ((IFwMetaDataCacheManaged) m_mdc).IsCustom(flid);  				case "featureDefns":  					return flid == FsFeatureSystemTags.kflidFeatures;  			}
Missing Default,SIL.FieldWorks.Common.Controls,ReallySimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\ReallySimpleListChooser.cs,InitializeExtras,The following switch statement is missing a default case: switch (sType)  					{  					case "goto":  					{  						string sTool = XmlUtils.GetAttributeValue(linkNodes[i]' "tool");  						if (sLabel != null && sTool != null)  						{  							AddLink(sLabel' LinkType.kGotoLink' new FwLinkArgs(sTool' m_guidLink));  						}  						break;  					}  					case "dialog":  					{  						string sDialog = XmlUtils.GetAttributeValue(linkNodes[i]' "dialog");  						// TODO: make use of sDialog somehow to create a ChooserCommand object.  						// TODO: maybe even better' use a new SubDialog object that allows us  						// to call the specified dialog' then return to this dialog' adding  						// a newly created object to the list of chosen items (or making the  						// newly created object the chosen item).  						if (sLabel != null && sDialog != null)  							AddLink(sLabel' LinkType.kDialogLink' null);  						break;  					}  					case "simple":  					{  						string sTool = XmlUtils.GetAttributeValue(linkNodes[i]' "tool");  						if (sLabel != null && sTool != null)  						{  							AddSimpleLink(sLabel' sTool' linkNodes[i]);  						}  						break;  					}  					}
Missing Default,SIL.FieldWorks.Common.Controls,XmlBrowseView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseView.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.KeyCode)  				{  					case Keys.Down:  						if (m_selectedIndex < cobj - 1)  							SelectedIndex = m_selectedIndex + 1;  						e.Handled = true;  						break;  					case Keys.Up:  						if (m_selectedIndex > 0)  							SelectedIndex = m_selectedIndex - 1;  						e.Handled = true;  						break;  				}
Missing Default,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,GetCurrentTableCellInfo,The following switch statement is missing a default case: switch (vbt)  				{  					case VwBoxType.kvbtTable:  						// Note that the layout should one (visible) row per "table"' and  						// stacks the "table" boxes to form the visual table.  See JohnT  						// for an explanation of this nonintuitive use of tables and rows.  						// At least' i think JohnT knows why -- maybe it's RandyR?  						iTableBox = iBox;  						cTableBoxes = cBoxes;  						iTableLevel = iLevel;  						break;  					case VwBoxType.kvbtTableRow:  						iRowBox = iBox;  						cRowBoxes = cBoxes;  						iRowLevel = iLevel;  						break;  					case VwBoxType.kvbtTableCell:  						iCellBox = iBox;  						cCellBoxes = cBoxes;  						iCellLevel = iLevel;  						break;  				}
Missing Default,SIL.FieldWorks.Common.Controls,XmlBrowseViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlBrowseViewBase.cs,Init,The following switch statement is missing a default case: switch (sDefaultCursor)  				{  					case "IBeam":  						EditingHelper.DefaultCursor = Cursors.IBeam;  						break;  					case "Hand":  						EditingHelper.DefaultCursor = Cursors.Hand;  						break;  					case "Arrow":  						EditingHelper.DefaultCursor = Cursors.Arrow;  						break;  					case "Cross":  						EditingHelper.DefaultCursor = Cursors.Cross;  						break;  				}
Missing Default,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,FilterAndSortListByComplexFormType,The following switch statement is missing a default case: switch (lri.SubClass)  						{  							case LexReferenceInfo.TypeSubClass.Forward:  								if (lr.TargetsRS[0].Hvo != hvoTarget)  									continue;  								break;  							case LexReferenceInfo.TypeSubClass.Reverse:  								if (lr.TargetsRS[0].Hvo == hvoTarget)  									continue;  								break;  						}
Missing Default,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetRules,The following switch statement is missing a default case: switch (xa.Value)  			{  				case "all":  					return VwRule.kvrlAll;  				case "columns":  					return VwRule.kvrlCols;  				case "groups":  					return VwRule.kvrlGroups;  				case "none":  					return VwRule.kvrlNone;  				case "rows":  					return VwRule.kvrlRows;  			}
Missing Default,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetAlignment,The following switch statement is missing a default case: switch (xa.Value)  			{  				case "right":  					return VwAlignment.kvaRight;  				case "left":  					return VwAlignment.kvaLeft;  				case "center":  					return VwAlignment.kvaCenter;  				case "justify":  					return VwAlignment.kvaJustified; // not yet supported  			}
Missing Default,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetFramePositions,The following switch statement is missing a default case: switch (xa.Value)  			{  				case "above":  					return VwFramePosition.kvfpAbove;  				case "below":  					return VwFramePosition.kvfpBelow;  				case "box":  					return VwFramePosition.kvfpBox;  				case "hsides":  					return VwFramePosition.kvfpHsides;  				case "left":  					return VwFramePosition.kvfpLhs;  				case "right":  					return VwFramePosition.kvfpRhs;  				case "vsides":  					return VwFramePosition.kvfpVsides;  				case "void":  				case "none":  					return VwFramePosition.kvfpVoid;  			}
Missing Default,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,Alignment,The following switch statement is missing a default case: switch (val)  			{  				case "left":  					return (int)FwTextAlign.ktalLeft;  				case "right":  					return (int)FwTextAlign.ktalRight;  				case "center":  					return (int)FwTextAlign.ktalCenter;  				case "leading":  					return (int)FwTextAlign.ktalLeading;  				case "trailing":  					return (int)FwTextAlign.ktalTrailing;  				case "justify":  					return (int)FwTextAlign.ktalJustify; // not yet implemented.  			}
Missing Default,SIL.FieldWorks.Common.Controls,XmlVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,GetEditable,The following switch statement is missing a default case: switch (GetPropVal(node))  			{  				case "noteditable":  				case "no":  				case "false":  					return (int)TptEditable.ktptNotEditable;  				case "editable":  				case "iseditable":  				case "yes":  				case "true":  					return (int)TptEditable.ktptIsEditable;  				case "semi":  					return (int)TptEditable.ktptSemiEditable;  			}
Missing Default,SIL.FieldWorks.Common.Controls,MainCallerDisplayCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVc.cs,PerformDisplay,The following switch statement is missing a default case: switch (flowType)  					{  						case "span":  							vwenv.OpenSpan();  							break;  						case "para":  							vwenv.OpenParagraph();  							break;  						case "div":  							vwenv.OpenDiv();  							break;  						case "none":  							break;  						case "divInPara":  							vwenv.CloseParagraph();  							vwenv.OpenDiv();  							break;  					}
Missing Default,SIL.FieldWorks.Common.Controls,XmlVcDisplayVec,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlVcDisplayVec.cs,CalculateAndFormatSenseLabel,The following switch statement is missing a default case: switch (sTag[ich])  				{  					case 'd':  						sNum = string.Format("{0}"' ihvo + 1);  						break;  					case 'A':  						sNum = AlphaOutline.NumToAlphaOutline(ihvo + 1);  						break;  					case 'a':  						sNum = AlphaOutline.NumToAlphaOutline(ihvo + 1).ToLower();  						break;  					case 'I':  						sNum = RomanNumerals.IntToRoman(ihvo + 1);  						break;  					case 'i':  						sNum = RomanNumerals.IntToRoman(ihvo + 1).ToLower();  						break;  					case 'O':  						if (m_cache.MetaDataCacheAccessor.get_IsVirtual(m_flid))  							sNum = String.Format("{0}"' ihvo + 1);  						else  						{  							var item = m_objRepo.GetObject(hvo);  							if (item is ILexSense)  							{  								// Need to use a virtual property which can be overridden by DictionaryPublicationDecorator  								// So the numbering excludes any hidden senses.  								var senseOutlineFlid = item.Cache.MetaDataCacheAccessor.GetFieldId2(LexSenseTags.kClassId' "LexSenseOutline"' false);  								sNum = m_sda.get_StringProp(item.Hvo' senseOutlineFlid).Text;  							}  							else  							{  								// Not sure this can ever happen (since the method name indicates is it supposed to make  								// labels for senses)' but it seemed safest to keep the old generic behavior for any other cases.  								sNum = m_cache.GetOutlineNumber(item' false' true);  							}  						}  						break;  					case 'z':  						sNum = GetOutlineStyle2biv(hvo' ihvo);  						break;  					// MDL: can only get to this case for "%%" - does it mean anything?  					case '%':  						sTag.Remove(ich' 1); // removes the 2nd %  						--ich;  						break;  				}
Missing Default,SIL.FieldWorks.Common.Controls,XmlViewsMdc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XMLViewsDataCache.cs,GetFieldName,The following switch statement is missing a default case: switch (flid)  			{  				case XMLViewsDataCache.ktagTagMe: return "Me";  				case XMLViewsDataCache.ktagActiveColumn: return "ActiveColumn";  				case XMLViewsDataCache.ktagAlternateValue: return "AlternateValue";  				case XMLViewsDataCache.ktagItemEnabled: return "ItemEnabled";  				case XMLViewsDataCache.ktagItemSelected: return "ItemSelected";  			}
Missing Default,SIL.FieldWorks.Common.Controls,XmlViewsUtils,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\XMLViews\XmlViewsUtils.cs,StringsFor,The following switch statement is missing a default case: switch (itype)  						{  							case (int) CellarPropertyType.MultiUnicode:  							case (int) CellarPropertyType.MultiString:  								if (wsForce < 0)  								{  									int wsActual;  									var tss = WritingSystemServices.GetMagicStringAlt(fdoCache' sda' wsForce' hvo' flid' true' out wsActual);  									return new[] {tss == null ? "" : tss.Text };  								}  								return new[]  										   {sda.get_MultiStringAlt(hvo' flid' wsForce).Text};  						}
