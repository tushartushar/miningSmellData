Implementation smell,Namespace,Class,File,Method,Description
Long Method,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The method has 167 lines of code.
Long Method,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The method has 149 lines of code.
Long Method,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The method has 109 lines of code.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,FixtureSetUp,The length of the statement  "			File.WriteAllText(Path.Combine(m_originalSettingsPath' "db$TestLocal$Settings.xml")' Resources.db_TestLocal_Settings_xml); " is 122.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,FixtureSetUp,The length of the statement  "//			m_originalSettingsPath = Path.Combine(DirectoryFinder.FwSourceDirectory' @"XCore\xCoreInterfaces\xCoreInterfacesTests\settingsBackup"); " is 140.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,FixtureSetUp,The length of the statement  "//			m_modifiedSettingsPath = Path.Combine(DirectoryFinder.FwSourceDirectory' @"XCore\xCoreInterfaces\xCoreInterfacesTests"); " is 125.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,TryGetValueTest,The length of the statement  "			fPropertyExists = m_propertyTable.TryGetValue("BooleanPropertyA"' PropertyTable.SettingsGroup.GlobalSettings' out gpba); " is 120.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,TryGetValueTest,The length of the statement  "			fPropertyExists = m_propertyTable.TryGetValue("IntegerPropertyA"' PropertyTable.SettingsGroup.GlobalSettings' out gpia); " is 120.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,TryGetValueTest,The length of the statement  "			Assert.AreEqual("global_StringPropertyA_value"' gpsa' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyA")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,TryGetValueTest,The length of the statement  "			Assert.AreEqual("local_StringPropertyA_value"' lpsa' String.Format("Invalid value for {0} {1}."' "local"' "StringPropertyA")); " is 126.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,TryGetValueTest,The length of the statement  "			fPropertyExists = m_propertyTable.TryGetValue("BestBooleanPropertyA"' PropertyTable.SettingsGroup.BestSettings' out ugpba); " is 123.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,TryGetValueTest,The length of the statement  "			fPropertyExists = m_propertyTable.TryGetValue("BestIntegerPropertyB"' PropertyTable.SettingsGroup.BestSettings' out ulpia); " is 123.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("global_StringPropertyA_value"' gpsa' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyA")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			gpsa = m_propertyTable.GetValue("StringPropertyA"' PropertyTable.SettingsGroup.GlobalSettings' "global_StringPropertyC_value"); " is 127.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("global_StringPropertyA_value"' gpsa' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyA")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("local_StringPropertyA_value"' lpsa' String.Format("Invalid value for {0} {1}."' "local"' "StringPropertyA")); " is 126.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			lpsa = m_propertyTable.GetValue<string>("StringPropertyA"' PropertyTable.SettingsGroup.LocalSettings' "local_StringPropertyC_value"); " is 133.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("local_StringPropertyA_value"' lpsa' String.Format("Invalid value for {0} {1}."' "local"' "StringPropertyA")); " is 126.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			string gpsc = m_propertyTable.GetValue("StringPropertyC"' PropertyTable.SettingsGroup.GlobalSettings' "global_StringPropertyC_value"); " is 134.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("global_StringPropertyC_value"' gpsc' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyC")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			string lpsc = m_propertyTable.GetValue("StringPropertyC"' PropertyTable.SettingsGroup.LocalSettings' "local_StringPropertyC_value"); " is 132.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("local_StringPropertyC_value"' lpsc' String.Format("Invalid value for {0} {1}."' "local"' "StringPropertyC")); " is 126.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("global_StringPropertyC_value"' gpsc' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyC")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("local_StringPropertyA_value"' bpsa' String.Format("Invalid value for {0} {1}."' "best"' "StringPropertyA")); " is 125.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("local_StringPropertyA_value"' bpsa' String.Format("Invalid value for {0} {1}."' "best"' "StringPropertyA")); " is 125.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("local_StringPropertyA_value"' bpsa' String.Format("Invalid value for {0} {1}."' "local"' "StringPropertyA")); " is 126.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("global_StringPropertyA_value"' bpsa' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyA")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyA_value"' ubpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyA")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyA_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyA")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyA_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyA")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyA_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyA")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("local_BestStringPropertyB_value"' ubpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyB")); " is 134.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("local_BestStringPropertyB_value"' ulpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyB")); " is 134.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("local_BestStringPropertyB_value"' ulpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyB")); " is 134.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("local_BestStringPropertyB_value"' ulpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyB")); " is 134.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyC_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyC")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyC_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyC")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			string gpsa = m_propertyTable.GetStringProperty("StringPropertyA"' "global_StringPropertyC_value"' PropertyTable.SettingsGroup.GlobalSettings); " is 143.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			Assert.AreEqual("global_StringPropertyA_value"' gpsa' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyA")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			string lpsa = m_propertyTable.GetStringProperty("StringPropertyA"' "local_StringPropertyC_value"' PropertyTable.SettingsGroup.LocalSettings); " is 141.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			Assert.AreEqual("local_StringPropertyA_value"' lpsa' String.Format("Invalid value for {0} {1}."' "local"' "StringPropertyA")); " is 126.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			string gpsc = m_propertyTable.GetStringProperty("StringPropertyC"' "global_StringPropertyC_value"' PropertyTable.SettingsGroup.GlobalSettings); " is 143.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			Assert.AreEqual("global_StringPropertyC_value"' gpsc' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyC")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			string lpsc = m_propertyTable.GetStringProperty("StringPropertyC"' "local_StringPropertyC_value"' PropertyTable.SettingsGroup.LocalSettings); " is 141.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			Assert.AreEqual("local_StringPropertyC_value"' lpsc' String.Format("Invalid value for {0} {1}."' "local"' "StringPropertyC")); " is 126.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			string bpsa = m_propertyTable.GetStringProperty("StringPropertyA"' "global_StringPropertyA_value"' PropertyTable.SettingsGroup.BestSettings); " is 141.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			Assert.AreEqual("local_StringPropertyA_value"' bpsa' String.Format("Invalid value for {0} {1}."' "best"' "StringPropertyA")); " is 125.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			Assert.AreEqual("local_StringPropertyA_value"' bpsa' String.Format("Invalid value for {0} {1}."' "best"' "StringPropertyA")); " is 125.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			string ugpsa = m_propertyTable.GetStringProperty("BestStringPropertyA"' "local_BestStringPropertyA_value"' PropertyTable.SettingsGroup.BestSettings); " is 149.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyA_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyA")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyA_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyA")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			string ulpsa = m_propertyTable.GetStringProperty("BestStringPropertyB"' "global_BestStringPropertyC_value"' PropertyTable.SettingsGroup.BestSettings); " is 150.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			Assert.AreEqual("local_BestStringPropertyB_value"' ulpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyB")); " is 134.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			Assert.AreEqual("local_BestStringPropertyB_value"' ulpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyB")); " is 134.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyC_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyC")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			m_propertyTable.SetProperty("StringPropertyA"' "local_StringPropertyC_value"' PropertyTable.SettingsGroup.LocalSettings' true); " is 127.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			m_propertyTable.SetProperty("StringPropertyA"' "global_StringPropertyC_value"' PropertyTable.SettingsGroup.GlobalSettings' true); " is 129.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			string gpsa = m_propertyTable.GetValue<string>("StringPropertyA"' PropertyTable.SettingsGroup.GlobalSettings' "local_StringPropertyC_value"); " is 141.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("global_StringPropertyC_value"' gpsa' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyA")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("local_StringPropertyC_value"' lpsa' String.Format("Invalid value for {0} {1}."' "local"' "StringPropertyA")); " is 126.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			m_propertyTable.SetProperty("StringPropertyA"' "global_StringPropertyA_value"' PropertyTable.SettingsGroup.GlobalSettings' true); " is 129.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			m_propertyTable.SetProperty("StringPropertyA"' "local_StringPropertyA_value"' PropertyTable.SettingsGroup.LocalSettings' true); " is 127.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("local_StringPropertyA_value"' lpsa' String.Format("Invalid value for {0} {1}."' "local"' "StringPropertyA")); " is 126.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			gpsa = m_propertyTable.GetValue<string>("StringPropertyA"' PropertyTable.SettingsGroup.GlobalSettings' "local_StringPropertyC_value"); " is 134.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("global_StringPropertyA_value"' gpsa' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyA")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			m_propertyTable.SetProperty("StringPropertyC"' "global_StringPropertyC_value"' PropertyTable.SettingsGroup.GlobalSettings' true); " is 129.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			string gpsc = m_propertyTable.GetStringProperty("StringPropertyC"' "local_StringPropertyC_value"' PropertyTable.SettingsGroup.GlobalSettings); " is 142.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("global_StringPropertyC_value"' gpsc' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyC")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			m_propertyTable.SetProperty("StringPropertyC"' "local_StringPropertyC_value"' PropertyTable.SettingsGroup.LocalSettings' true); " is 127.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			string lpsc = m_propertyTable.GetStringProperty("StringPropertyC"' "local_StringPropertyC_value"' PropertyTable.SettingsGroup.LocalSettings); " is 141.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("local_StringPropertyC_value"' lpsc' String.Format("Invalid value for {0} {1}."' "local"' "StringPropertyC")); " is 126.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			m_propertyTable.SetProperty("StringPropertyA"' "local_StringPropertyA_value"' PropertyTable.SettingsGroup.LocalSettings' true); " is 127.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			m_propertyTable.SetProperty("StringPropertyA"' "global_StringPropertyA_value"' PropertyTable.SettingsGroup.GlobalSettings' true); " is 129.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			m_propertyTable.SetProperty("StringPropertyA"' "best_StringPropertyA_value"' PropertyTable.SettingsGroup.BestSettings' true); " is 125.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("best_StringPropertyA_value"' bpsa' String.Format("Invalid value for {0} {1}."' "best"' "StringPropertyA")); " is 124.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			gpsa = m_propertyTable.GetValue<string>("StringPropertyA"' PropertyTable.SettingsGroup.GlobalSettings' "local_StringPropertyC_value"); " is 134.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("global_StringPropertyA_value"' gpsa' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyA")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("best_StringPropertyA_value"' lpsa' String.Format("Invalid value for {0} {1}."' "local"' "StringPropertyA")); " is 125.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			m_propertyTable.SetProperty("BestStringPropertyA"' "best_BestStringPropertyA_value"' PropertyTable.SettingsGroup.BestSettings' true); " is 133.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("best_BestStringPropertyA_value"' ubpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyA")); " is 133.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("best_BestStringPropertyA_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyA")); " is 133.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			m_propertyTable.SetProperty("BestStringPropertyB"' "best_BestStringPropertyB_value"' PropertyTable.SettingsGroup.BestSettings' true); " is 133.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("best_BestStringPropertyB_value"' ubpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyB")); " is 133.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("best_BestStringPropertyB_value"' ulpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyB")); " is 133.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyC_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyC")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyC_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyC")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			m_propertyTable.SetDefault("StringPropertyA"' "local_StringPropertyC_value"' PropertyTable.SettingsGroup.LocalSettings' false); " is 127.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			m_propertyTable.SetDefault("StringPropertyA"' "global_StringPropertyC_value"' PropertyTable.SettingsGroup.GlobalSettings' false); " is 129.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			string gpsa = m_propertyTable.GetValue("StringPropertyA"' PropertyTable.SettingsGroup.GlobalSettings' "local_StringPropertyC_value"); " is 133.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			Assert.AreEqual("global_StringPropertyA_value"' gpsa' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyA")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			Assert.AreEqual("local_StringPropertyA_value"' lpsa' String.Format("Invalid value for {0} {1}."' "local"' "StringPropertyA")); " is 126.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			m_propertyTable.SetDefault("StringPropertyC"' "global_StringPropertyC_value"' PropertyTable.SettingsGroup.GlobalSettings' true); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			string gpsc = m_propertyTable.GetStringProperty("StringPropertyC"' "local_StringPropertyC_value"' PropertyTable.SettingsGroup.GlobalSettings); " is 142.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			Assert.AreEqual("global_StringPropertyC_value"' gpsc' String.Format("Invalid value for {0} {1}."' "global"' "StringPropertyC")); " is 128.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			m_propertyTable.SetDefault("StringPropertyC"' "local_StringPropertyC_value"' PropertyTable.SettingsGroup.LocalSettings' false); " is 127.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			string lpsc = m_propertyTable.GetStringProperty("StringPropertyC"' "local_StringPropertyC_value"' PropertyTable.SettingsGroup.LocalSettings); " is 141.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			Assert.AreEqual("local_StringPropertyC_value"' lpsc' String.Format("Invalid value for {0} {1}."' "local"' "StringPropertyC")); " is 126.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			m_propertyTable.SetDefault("BestStringPropertyA"' "best_BestStringPropertyA_value"' PropertyTable.SettingsGroup.BestSettings' false); " is 133.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyA_value"' ubpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyA")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyA_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyA")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			m_propertyTable.SetDefault("BestStringPropertyB"' "best_BestStringPropertyB_value"' PropertyTable.SettingsGroup.BestSettings' false); " is 133.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			Assert.AreEqual("local_BestStringPropertyB_value"' ubpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyB")); " is 134.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			Assert.AreEqual("local_BestStringPropertyB_value"' ulpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyB")); " is 134.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyC_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyC")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The length of the statement  "			Assert.AreEqual("global_BestStringPropertyC_value"' ugpsa' String.Format("Invalid value for {0} {1}."' "best"' "BestStringPropertyC")); " is 135.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,ReadOnlyPropertyTable_GetWithDefaultDoesNotSet,The length of the statement  "			Assert.IsNull(m_propertyTable.GetValue<string>(noSuchPropName)' "Default should not have been set in the property table."); " is 123.
Long Statement,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,ReadOnlyPropertyTable_GetWithDefaultDoesNotSet,The length of the statement  "			Assert.AreEqual(roPropTable.GetStringProperty(noSuchPropName' myDefault)' notDefault' "Default was used instead of value from property table."); " is 144.
Long Statement,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInActivateInKeyDown,The length of the statement  "			// start of keydown' start of activate' end of activate' end of keydown' start of killfocus' end of killfocus' start of get focus' end of get focus. " is 148.
Long Statement,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInActivateInKeyDown,The length of the statement  "			Message msgActivate = Message.Create(IntPtr.Zero' (int)Win32.WinMsgs.WM_MDIACTIVATE' new IntPtr(201)' new IntPtr(2001)); " is 120.
Long Statement,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInActivateInKeyDown,The length of the statement  "				object[] expected = { msgKeyDown' msgActivate' msgActivate' msgKeyDown' msgKillFocus' msgKillFocus' msgSetFocus' msgSetFocus }; " is 127.
Long Statement,XCore,TestControlBase,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,Dispose,The length of the statement  "			System.Diagnostics.Debug.WriteLineIf(!release_all' "****** Missing Dispose() call for " + GetType().Name + ". ****** "); " is 120.
Empty Catch Block,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,FixtureTearDown,The method has an empty catch block.
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,TryGetValueTest,The following statement contains a magic number: Assert.AreEqual(253' gpia' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,TryGetValueTest,The following statement contains a magic number: Assert.AreEqual(333' lpia' String.Format("Invalid value for {0} {1}."' "local"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,TryGetValueTest,The following statement contains a magic number: Assert.AreEqual(-586' ulpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyB"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,TryGetValueTest,The following statement contains a magic number: Assert.AreEqual(-586' ulpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyB"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(253' gpia' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: gpia = m_propertyTable.GetValue("IntegerPropertyA"' PropertyTable.SettingsGroup.GlobalSettings' 352);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(253' gpia' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(333' lpia' String.Format("Invalid value for {0} {1}."' "local"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: lpia = m_propertyTable.GetValue("IntegerPropertyA"' PropertyTable.SettingsGroup.LocalSettings' 111);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(333' lpia' String.Format("Invalid value for {0} {1}."' "local"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: int gpic = m_propertyTable.GetValue("IntegerPropertyC"' PropertyTable.SettingsGroup.GlobalSettings' 352);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(352' gpic' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: int lpic = m_propertyTable.GetValue("IntegerPropertyC"' PropertyTable.SettingsGroup.LocalSettings' 111);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(111' lpic' String.Format("Invalid value for {0} {1}."' "local"' "IntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(352' gpic' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(333' bpia' String.Format("Invalid value for {0} {1}."' "best"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(333' bpia' String.Format("Invalid value for {0} {1}."' "best"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(333' bpia' String.Format("Invalid value for {0} {1}."' "local"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(253' bpia' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-101' ubpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-101' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-101' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: ugpia = m_propertyTable.GetValue("BestIntegerPropertyA"' -818);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-101' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-586' ubpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyB"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-586' ulpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyB"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-586' ulpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyB"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: ulpia = m_propertyTable.GetValue<int>("BestIntegerPropertyB"' -685);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-586' ulpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyB"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: ugpia = m_propertyTable.GetValue("BestIntegerPropertyC"' -818);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-818' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-818' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: int gpia = m_propertyTable.GetIntProperty("IntegerPropertyA"' 352' PropertyTable.SettingsGroup.GlobalSettings);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: Assert.AreEqual(253' gpia' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: int lpia = m_propertyTable.GetIntProperty("IntegerPropertyA"' 111' PropertyTable.SettingsGroup.LocalSettings);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: Assert.AreEqual(333' lpia' String.Format("Invalid value for {0} {1}."' "local"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: int gpic = m_propertyTable.GetIntProperty("IntegerPropertyC"' 352' PropertyTable.SettingsGroup.GlobalSettings);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: Assert.AreEqual(352' gpic' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: int lpic = m_propertyTable.GetIntProperty("IntegerPropertyC"' 111' PropertyTable.SettingsGroup.LocalSettings);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: Assert.AreEqual(111' lpic' String.Format("Invalid value for {0} {1}."' "local"' "IntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: int bpia = m_propertyTable.GetIntProperty("IntegerPropertyA"' -333' PropertyTable.SettingsGroup.BestSettings);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: Assert.AreEqual(333' bpia' String.Format("Invalid value for {0} {1}."' "best"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: bpia = m_propertyTable.GetIntProperty("IntegerPropertyA"' -333);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: Assert.AreEqual(333' bpia' String.Format("Invalid value for {0} {1}."' "best"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: int ugpia = m_propertyTable.GetIntProperty("BestIntegerPropertyA"' 101' PropertyTable.SettingsGroup.BestSettings);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: Assert.AreEqual(-101' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: ugpia = m_propertyTable.GetIntProperty("BestIntegerPropertyA"' 101);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: Assert.AreEqual(-101' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: int ulpia = m_propertyTable.GetIntProperty("BestIntegerPropertyB"' 586' PropertyTable.SettingsGroup.BestSettings);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: Assert.AreEqual(-586' ulpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyB"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: ulpia = m_propertyTable.GetIntProperty("BestIntegerPropertyB"' 586);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: Assert.AreEqual(-586' ulpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyB"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: ugpia = m_propertyTable.GetIntProperty("BestIntegerPropertyC"' -818);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,Get_X_Property,The following statement contains a magic number: Assert.AreEqual(-818' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: m_propertyTable.SetProperty("IntegerPropertyA"' 253' PropertyTable.SettingsGroup.LocalSettings' true);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: m_propertyTable.SetProperty("IntegerPropertyA"' -253' PropertyTable.SettingsGroup.GlobalSettings' true);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(-253' gpia' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(253' lpia' String.Format("Invalid value for {0} {1}."' "local"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: m_propertyTable.SetProperty("IntegerPropertyA"' 253' PropertyTable.SettingsGroup.GlobalSettings' true);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: m_propertyTable.SetProperty("IntegerPropertyA"' -253' PropertyTable.SettingsGroup.LocalSettings' true);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(-253' lpia' String.Format("Invalid value for {0} {1}."' "local"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(253' gpia' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: m_propertyTable.SetProperty("IntegerPropertyC"' 352' PropertyTable.SettingsGroup.GlobalSettings' true);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: int gpic = m_propertyTable.GetIntProperty("IntegerPropertyC"' -352' PropertyTable.SettingsGroup.GlobalSettings);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(352' gpic' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: m_propertyTable.SetProperty("IntegerPropertyC"' 111' PropertyTable.SettingsGroup.LocalSettings' true);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: int lpic = m_propertyTable.GetIntProperty("IntegerPropertyC"' -111' PropertyTable.SettingsGroup.LocalSettings);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(111' lpic' String.Format("Invalid value for {0} {1}."' "local"' "IntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: m_propertyTable.SetProperty("IntegerPropertyA"' 253' PropertyTable.SettingsGroup.LocalSettings' true);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: m_propertyTable.SetProperty("IntegerPropertyA"' -253' PropertyTable.SettingsGroup.GlobalSettings' true);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: m_propertyTable.SetProperty("IntegerPropertyA"' 352' PropertyTable.SettingsGroup.BestSettings' true);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(352' bpia' String.Format("Invalid value for {0} {1}."' "best"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(-253' gpia' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(352' lpia' String.Format("Invalid value for {0} {1}."' "local"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: m_propertyTable.SetProperty("BestIntegerPropertyA"' 101' PropertyTable.SettingsGroup.BestSettings' true);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(101' ubpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(101' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: m_propertyTable.SetProperty("BestIntegerPropertyB"' 586' PropertyTable.SettingsGroup.BestSettings' true);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(586' ubpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyB"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(586' ulpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyB"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: m_propertyTable.SetProperty("BestIntegerPropertyC"' -818' true);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(-818' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetProperty,The following statement contains a magic number: Assert.AreEqual(-818' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: m_propertyTable.SetDefault("IntegerPropertyA"' 253' PropertyTable.SettingsGroup.LocalSettings' false);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: m_propertyTable.SetDefault("IntegerPropertyA"' -253' PropertyTable.SettingsGroup.GlobalSettings' false);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: Assert.AreEqual(253' gpia' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: Assert.AreEqual(333' lpia' String.Format("Invalid value for {0} {1}."' "local"' "IntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: m_propertyTable.SetDefault("IntegerPropertyC"' 352' PropertyTable.SettingsGroup.GlobalSettings' true);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: int gpic = m_propertyTable.GetIntProperty("IntegerPropertyC"' -352' PropertyTable.SettingsGroup.GlobalSettings);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: Assert.AreEqual(352' gpic' String.Format("Invalid value for {0} {1}."' "global"' "IntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: m_propertyTable.SetDefault("IntegerPropertyC"' 111' PropertyTable.SettingsGroup.LocalSettings' false);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: int lpic = m_propertyTable.GetIntProperty("IntegerPropertyC"' -111' PropertyTable.SettingsGroup.LocalSettings);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: Assert.AreEqual(111' lpic' String.Format("Invalid value for {0} {1}."' "local"' "IntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: m_propertyTable.SetDefault("BestIntegerPropertyA"' 101' PropertyTable.SettingsGroup.BestSettings' false);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: Assert.AreEqual(-101' ubpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: Assert.AreEqual(-101' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyA"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: m_propertyTable.SetDefault("BestIntegerPropertyB"' 586' PropertyTable.SettingsGroup.BestSettings' false);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: Assert.AreEqual(-586' ubpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyB"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: Assert.AreEqual(-586' ulpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyB"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: m_propertyTable.SetDefault("BestIntegerPropertyC"' -818' false);
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: Assert.AreEqual(-818' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyC"));
Magic Number,XCore,PropertyTableTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\PropertyTableTests.cs,SetDefault,The following statement contains a magic number: Assert.AreEqual(-818' ugpia' String.Format("Invalid value for {0} {1}."' "best"' "BestIntegerPropertyC"));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,NormalOperation,The following statement contains a magic number: Message m1 = Message.Create(IntPtr.Zero' 10' new IntPtr(101)' new IntPtr(1001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,NormalOperation,The following statement contains a magic number: Message m1 = Message.Create(IntPtr.Zero' 10' new IntPtr(101)' new IntPtr(1001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,NormalOperation,The following statement contains a magic number: Message m1 = Message.Create(IntPtr.Zero' 10' new IntPtr(101)' new IntPtr(1001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,NormalOperation,The following statement contains a magic number: Message m2 = Message.Create(IntPtr.Zero' 20' new IntPtr(201)' new IntPtr(2001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,NormalOperation,The following statement contains a magic number: Message m2 = Message.Create(IntPtr.Zero' 20' new IntPtr(201)' new IntPtr(2001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,NormalOperation,The following statement contains a magic number: Message m2 = Message.Create(IntPtr.Zero' 20' new IntPtr(201)' new IntPtr(2001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,NormalOperation,The following statement contains a magic number: Message m3 = Message.Create(IntPtr.Zero' 30' new IntPtr(301)' new IntPtr(3001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,NormalOperation,The following statement contains a magic number: Message m3 = Message.Create(IntPtr.Zero' 30' new IntPtr(301)' new IntPtr(3001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,NormalOperation,The following statement contains a magic number: Message m3 = Message.Create(IntPtr.Zero' 30' new IntPtr(301)' new IntPtr(3001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInActivateInKeyDown,The following statement contains a magic number: Message msgKeyDown = Message.Create(IntPtr.Zero' (int)Win32.WinMsgs.WM_KEYDOWN' new IntPtr(101)' new IntPtr(1001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInActivateInKeyDown,The following statement contains a magic number: Message msgKeyDown = Message.Create(IntPtr.Zero' (int)Win32.WinMsgs.WM_KEYDOWN' new IntPtr(101)' new IntPtr(1001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInActivateInKeyDown,The following statement contains a magic number: Message msgActivate = Message.Create(IntPtr.Zero' (int)Win32.WinMsgs.WM_MDIACTIVATE' new IntPtr(201)' new IntPtr(2001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInActivateInKeyDown,The following statement contains a magic number: Message msgActivate = Message.Create(IntPtr.Zero' (int)Win32.WinMsgs.WM_MDIACTIVATE' new IntPtr(201)' new IntPtr(2001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInActivateInKeyDown,The following statement contains a magic number: Message msgKillFocus = Message.Create(IntPtr.Zero' (int)Win32.WinMsgs.WM_KILLFOCUS' new IntPtr(201)' new IntPtr(2001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInActivateInKeyDown,The following statement contains a magic number: Message msgKillFocus = Message.Create(IntPtr.Zero' (int)Win32.WinMsgs.WM_KILLFOCUS' new IntPtr(201)' new IntPtr(2001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInActivateInKeyDown,The following statement contains a magic number: Message msgSetFocus = Message.Create(IntPtr.Zero' (int)Win32.WinMsgs.WM_SETFOCUS' new IntPtr(301)' new IntPtr(3001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInActivateInKeyDown,The following statement contains a magic number: Message msgSetFocus = Message.Create(IntPtr.Zero' (int)Win32.WinMsgs.WM_SETFOCUS' new IntPtr(301)' new IntPtr(3001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInPaint,The following statement contains a magic number: Message msgKillFocus = Message.Create(IntPtr.Zero' (int)Win32.WinMsgs.WM_KILLFOCUS' new IntPtr(201)' new IntPtr(2001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInPaint,The following statement contains a magic number: Message msgKillFocus = Message.Create(IntPtr.Zero' (int)Win32.WinMsgs.WM_KILLFOCUS' new IntPtr(201)' new IntPtr(2001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInPaint,The following statement contains a magic number: Message msgSetFocus = Message.Create(IntPtr.Zero' (int)Win32.WinMsgs.WM_SETFOCUS' new IntPtr(301)' new IntPtr(3001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,KillFocusAndGetFocusInPaint,The following statement contains a magic number: Message msgSetFocus = Message.Create(IntPtr.Zero' (int)Win32.WinMsgs.WM_SETFOCUS' new IntPtr(301)' new IntPtr(3001));
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Fill(0' 49' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(0' 40' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Assert.AreEqual(9' count);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Fill(49' 89' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Fill(49' 89' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(40' 80' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(40' 80' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Assert.AreEqual(9' count);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Fill(89' 149' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Fill(89' 149' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Assert.AreEqual(69' count);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(80' 149' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(80' 149' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Fill(0'50' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(0' 20' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Fill(500' 555' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Fill(500' 555' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(20' 50' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(20' 50' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(500' 510' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(500' 510' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Fill(600' 650' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Fill(600' 650' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(510' 555' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(510' 555' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(600' 650' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueNormal,The following statement contains a magic number: Check(600' 650' ref count' queue);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueReentrant,The following statement contains a magic number: i < 49
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueReentrant,The following statement contains a magic number: queue.Add(300);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueReentrant,The following statement contains a magic number: Assert.AreEqual(60' queue.Count);
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueReentrant,The following statement contains a magic number: count += 11;
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueReentrant,The following statement contains a magic number: i < 49
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueReentrant,The following statement contains a magic number: Assert.AreEqual(300' (int)queue.Remove());
Magic Number,XCore,TestMessageSequencer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,QueueReentrant,The following statement contains a magic number: i < 910
Magic Number,XCore,TrickQueue,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestMessageSequencer.cs,GetNewArray,The following statement contains a magic number: i < 910
Magic Number,XCore,TestTupleComparer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestTupleComparer.cs,PriorityWins,The following statement contains a magic number: TryCompare(10' 11' new ClassA()' new ClassB());
Magic Number,XCore,TestTupleComparer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestTupleComparer.cs,PriorityWins,The following statement contains a magic number: TryCompare(10' 11' new ClassA()' new ClassB());
Magic Number,XCore,TestTupleComparer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestTupleComparer.cs,ClassNameWins_WhenSamePriority,The following statement contains a magic number: TryCompare(10' 10' new ClassA()' new ClassB());
Magic Number,XCore,TestTupleComparer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestTupleComparer.cs,ClassNameWins_WhenSamePriority,The following statement contains a magic number: TryCompare(10' 10' new ClassA()' new ClassB());
Magic Number,XCore,TestTupleComparer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestTupleComparer.cs,ConsistentAnswer_WhenSamePriorityAndName,The following statement contains a magic number: TryCompare(10' 10' new ClassA()' new ClassA());
Magic Number,XCore,TestTupleComparer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestTupleComparer.cs,ConsistentAnswer_WhenSamePriorityAndName,The following statement contains a magic number: TryCompare(10' 10' new ClassA()' new ClassA());
Magic Number,XCore,TestTupleComparer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\xCoreInterfaces\xCoreInterfacesTests\TestTupleComparer.cs,SameObjectYieldsZero,The following statement contains a magic number: var tuple1 = Tuple.Create (10' (IxCoreColleague)new ClassA());
