Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The method has 101 lines of code.
Complex Method,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,OnMouseMove,Cyclomatic complexity of the method is 14
Complex Method,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,OnPaint,Cyclomatic complexity of the method is 11
Complex Method,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,Cyclomatic complexity of the method is 44
Complex Method,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,CreateContextMenu,Cyclomatic complexity of the method is 10
Long Parameter List,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,FillButton,The method has 6 parameters. Parameters: rc' g' state' drawTopBorder' drawLeftBorder' drawRightBorder
Long Identifier,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,,The length of the parameter m_buttonTextMarginFromIconOnLeft is 32.
Long Identifier,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,,The length of the parameter m_buttonColorSelectedAndHoveringTop is 35.
Long Identifier,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,,The length of the parameter m_buttonColorSelectedAndHoveringBottom is 38.
Long Statement,SIL.SilSidePane,OutlookBarPanelRenderer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OnRenderItemImage,The length of the statement  "				Debug.WriteLine(String.Format("Warning: Exception ignored in OutlookBarPanelRenderer.OnRenderItemImage: " + exception)); " is 120.
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,btn_Up_Click,The following statement contains a magic number: Tabs.RemoveAt(newIndex + 2);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,btn_Down_Click,The following statement contains a magic number: int newIndex = tabListBox.SelectedIndex + 2;
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.Label1.Location = new System.Drawing.Point(12' 9);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.Label1.Location = new System.Drawing.Point(12' 9);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.Label1.Size = new System.Drawing.Size(144' 23);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.Label1.Size = new System.Drawing.Size(144' 23);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.Label1.TabIndex = 6;
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.tabListBox.Location = new System.Drawing.Point(12' 35);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.tabListBox.Location = new System.Drawing.Point(12' 35);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.tabListBox.Size = new System.Drawing.Size(197' 109);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.tabListBox.Size = new System.Drawing.Size(197' 109);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.tabListBox.TabIndex = 5;
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Up.Location = new System.Drawing.Point(215' 35);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Up.Location = new System.Drawing.Point(215' 35);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Up.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Up.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Up.TabIndex = 4;
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Down.Location = new System.Drawing.Point(215' 64);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Down.Location = new System.Drawing.Point(215' 64);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Down.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Down.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Down.TabIndex = 3;
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Reset.Location = new System.Drawing.Point(215' 93);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Reset.Location = new System.Drawing.Point(215' 93);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Reset.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Reset.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Reset.TabIndex = 2;
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_OK.Location = new System.Drawing.Point(134' 158);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_OK.Location = new System.Drawing.Point(134' 158);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_OK.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_OK.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Cancel.Location = new System.Drawing.Point(215' 158);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Cancel.Location = new System.Drawing.Point(215' 158);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Cancel.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.btn_Cancel.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(302' 193);
Magic Number,SIL.SilSidePane,NavPaneOptionsDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\NavPaneOptionsDlg.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(302' 193);
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,OnPaint,The following statement contains a magic number: Height = (m_maxLargeButtonCount * (InternalButtonHeight + 2)) + GripRectangle.Height + BottomContainerRectangle.Height;
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,OnPaint,The following statement contains a magic number: Rectangle rec = new Rectangle(0'  						(SyncLargeButtons * (InternalButtonHeight + 2)) + GripRectangle.Height' Width' InternalButtonHeight + 2);
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,OnPaint,The following statement contains a magic number: Rectangle rec = new Rectangle(0'  						(SyncLargeButtons * (InternalButtonHeight + 2)) + GripRectangle.Height' Width' InternalButtonHeight + 2);
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,PaintButton,The following statement contains a magic number: location.Y = (float)button.Rectangle.Y + ((InternalButtonHeight / 2.0f) - (Font.Height / 2.0f));
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,PaintButton,The following statement contains a magic number: location.Y = (float)button.Rectangle.Y + ((InternalButtonHeight / 2.0f) - (Font.Height / 2.0f));
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetRectangleForButtonIcon,The following statement contains a magic number: rc.Y = button.Rectangle.Y +  				(int)Math.Floor(((decimal)InternalButtonHeight / 2) - ((decimal)imageDimension / 2)) + 1;
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetRectangleForButtonIcon,The following statement contains a magic number: rc.Y = button.Rectangle.Y +  				(int)Math.Floor(((decimal)InternalButtonHeight / 2) - ((decimal)imageDimension / 2)) + 1;
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetRectangleForButtonIcon,The following statement contains a magic number: rc.X += (imageDimension - button.Image.Width) / 2;
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetRectangleForButtonIcon,The following statement contains a magic number: rc.Y += (imageDimension - button.Image.Height) / 2;
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetGreyscalingColorMatrix,The following statement contains a magic number: float red   = .3f;
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetGreyscalingColorMatrix,The following statement contains a magic number: float green = .59f;
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetGreyscalingColorMatrix,The following statement contains a magic number: float blue  = .11f;
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,FillButton,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;    				case Renderer.Outlook2007:  					//Filling the top part of the button...  					Rectangle TopRectangle = rc;  					using (br = new LinearGradientBrush(TopRectangle' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						TopRectangle.Height = (InternalButtonHeight * 15) / 32;  						g.FillRectangle(br' TopRectangle);  					}    					//and the bottom part...  					Rectangle BottomRectangle = rc;  					using (br = new LinearGradientBrush(BottomRectangle' GetButtonColor(state' 2)'  						GetButtonColor(state' 3)' LinearGradientMode.Vertical))  					{  						BottomRectangle.Y += (InternalButtonHeight * 12) / 32;  						BottomRectangle.Height -= (InternalButtonHeight * 12) / 32;  						g.FillRectangle(br' BottomRectangle);  					}  					break;    				case Renderer.Custom:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,FillButton,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;    				case Renderer.Outlook2007:  					//Filling the top part of the button...  					Rectangle TopRectangle = rc;  					using (br = new LinearGradientBrush(TopRectangle' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						TopRectangle.Height = (InternalButtonHeight * 15) / 32;  						g.FillRectangle(br' TopRectangle);  					}    					//and the bottom part...  					Rectangle BottomRectangle = rc;  					using (br = new LinearGradientBrush(BottomRectangle' GetButtonColor(state' 2)'  						GetButtonColor(state' 3)' LinearGradientMode.Vertical))  					{  						BottomRectangle.Y += (InternalButtonHeight * 12) / 32;  						BottomRectangle.Height -= (InternalButtonHeight * 12) / 32;  						g.FillRectangle(br' BottomRectangle);  					}  					break;    				case Renderer.Custom:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,FillButton,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;    				case Renderer.Outlook2007:  					//Filling the top part of the button...  					Rectangle TopRectangle = rc;  					using (br = new LinearGradientBrush(TopRectangle' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						TopRectangle.Height = (InternalButtonHeight * 15) / 32;  						g.FillRectangle(br' TopRectangle);  					}    					//and the bottom part...  					Rectangle BottomRectangle = rc;  					using (br = new LinearGradientBrush(BottomRectangle' GetButtonColor(state' 2)'  						GetButtonColor(state' 3)' LinearGradientMode.Vertical))  					{  						BottomRectangle.Y += (InternalButtonHeight * 12) / 32;  						BottomRectangle.Height -= (InternalButtonHeight * 12) / 32;  						g.FillRectangle(br' BottomRectangle);  					}  					break;    				case Renderer.Custom:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,FillButton,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;    				case Renderer.Outlook2007:  					//Filling the top part of the button...  					Rectangle TopRectangle = rc;  					using (br = new LinearGradientBrush(TopRectangle' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						TopRectangle.Height = (InternalButtonHeight * 15) / 32;  						g.FillRectangle(br' TopRectangle);  					}    					//and the bottom part...  					Rectangle BottomRectangle = rc;  					using (br = new LinearGradientBrush(BottomRectangle' GetButtonColor(state' 2)'  						GetButtonColor(state' 3)' LinearGradientMode.Vertical))  					{  						BottomRectangle.Y += (InternalButtonHeight * 12) / 32;  						BottomRectangle.Height -= (InternalButtonHeight * 12) / 32;  						g.FillRectangle(br' BottomRectangle);  					}  					break;    				case Renderer.Custom:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,FillButton,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;    				case Renderer.Outlook2007:  					//Filling the top part of the button...  					Rectangle TopRectangle = rc;  					using (br = new LinearGradientBrush(TopRectangle' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						TopRectangle.Height = (InternalButtonHeight * 15) / 32;  						g.FillRectangle(br' TopRectangle);  					}    					//and the bottom part...  					Rectangle BottomRectangle = rc;  					using (br = new LinearGradientBrush(BottomRectangle' GetButtonColor(state' 2)'  						GetButtonColor(state' 3)' LinearGradientMode.Vertical))  					{  						BottomRectangle.Y += (InternalButtonHeight * 12) / 32;  						BottomRectangle.Height -= (InternalButtonHeight * 12) / 32;  						g.FillRectangle(br' BottomRectangle);  					}  					break;    				case Renderer.Custom:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,FillButton,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;    				case Renderer.Outlook2007:  					//Filling the top part of the button...  					Rectangle TopRectangle = rc;  					using (br = new LinearGradientBrush(TopRectangle' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						TopRectangle.Height = (InternalButtonHeight * 15) / 32;  						g.FillRectangle(br' TopRectangle);  					}    					//and the bottom part...  					Rectangle BottomRectangle = rc;  					using (br = new LinearGradientBrush(BottomRectangle' GetButtonColor(state' 2)'  						GetButtonColor(state' 3)' LinearGradientMode.Vertical))  					{  						BottomRectangle.Y += (InternalButtonHeight * 12) / 32;  						BottomRectangle.Height -= (InternalButtonHeight * 12) / 32;  						g.FillRectangle(br' BottomRectangle);  					}  					break;    				case Renderer.Custom:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,FillButton,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;    				case Renderer.Outlook2007:  					//Filling the top part of the button...  					Rectangle TopRectangle = rc;  					using (br = new LinearGradientBrush(TopRectangle' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						TopRectangle.Height = (InternalButtonHeight * 15) / 32;  						g.FillRectangle(br' TopRectangle);  					}    					//and the bottom part...  					Rectangle BottomRectangle = rc;  					using (br = new LinearGradientBrush(BottomRectangle' GetButtonColor(state' 2)'  						GetButtonColor(state' 3)' LinearGradientMode.Vertical))  					{  						BottomRectangle.Y += (InternalButtonHeight * 12) / 32;  						BottomRectangle.Height -= (InternalButtonHeight * 12) / 32;  						g.FillRectangle(br' BottomRectangle);  					}  					break;    				case Renderer.Custom:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,FillButton,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;    				case Renderer.Outlook2007:  					//Filling the top part of the button...  					Rectangle TopRectangle = rc;  					using (br = new LinearGradientBrush(TopRectangle' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						TopRectangle.Height = (InternalButtonHeight * 15) / 32;  						g.FillRectangle(br' TopRectangle);  					}    					//and the bottom part...  					Rectangle BottomRectangle = rc;  					using (br = new LinearGradientBrush(BottomRectangle' GetButtonColor(state' 2)'  						GetButtonColor(state' 3)' LinearGradientMode.Vertical))  					{  						BottomRectangle.Y += (InternalButtonHeight * 12) / 32;  						BottomRectangle.Height -= (InternalButtonHeight * 12) / 32;  						g.FillRectangle(br' BottomRectangle);  					}  					break;    				case Renderer.Custom:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,PaintGripRectangle,The following statement contains a magic number: Rectangle rc = new Rectangle((int)((int)Width / 2) - ((int)icon.Width / 2)'  					(((int)(GripRectangle.Height) / 2) - (int)(icon.Height / 2))' icon.Width' icon.Height);
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,PaintGripRectangle,The following statement contains a magic number: Rectangle rc = new Rectangle((int)((int)Width / 2) - ((int)icon.Width / 2)'  					(((int)(GripRectangle.Height) / 2) - (int)(icon.Height / 2))' icon.Width' icon.Height);
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,PaintGripRectangle,The following statement contains a magic number: Rectangle rc = new Rectangle((int)((int)Width / 2) - ((int)icon.Width / 2)'  					(((int)(GripRectangle.Height) / 2) - (int)(icon.Height / 2))' icon.Width' icon.Height);
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,PaintGripRectangle,The following statement contains a magic number: Rectangle rc = new Rectangle((int)((int)Width / 2) - ((int)icon.Width / 2)'  					(((int)(GripRectangle.Height) / 2) - (int)(icon.Height / 2))' icon.Width' icon.Height);
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,PaintDropDownRectangle,The following statement contains a magic number: Rectangle rc = new Rectangle((DropDownRectangle.X + ((DropDownRectangle.Width / 2) - (icon.Width / 2)))'  				(DropDownRectangle.Y + (((DropDownRectangle.Height / 2) - (icon.Height / 2)) + 1))' icon.Width' icon.Height);
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,PaintDropDownRectangle,The following statement contains a magic number: Rectangle rc = new Rectangle((DropDownRectangle.X + ((DropDownRectangle.Width / 2) - (icon.Width / 2)))'  				(DropDownRectangle.Y + (((DropDownRectangle.Height / 2) - (icon.Height / 2)) + 1))' icon.Width' icon.Height);
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,PaintDropDownRectangle,The following statement contains a magic number: Rectangle rc = new Rectangle((DropDownRectangle.X + ((DropDownRectangle.Width / 2) - (icon.Width / 2)))'  				(DropDownRectangle.Y + (((DropDownRectangle.Height / 2) - (icon.Height / 2)) + 1))' icon.Width' icon.Height);
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,PaintDropDownRectangle,The following statement contains a magic number: Rectangle rc = new Rectangle((DropDownRectangle.X + ((DropDownRectangle.Width / 2) - (icon.Width / 2)))'  				(DropDownRectangle.Y + (((DropDownRectangle.Height / 2) - (icon.Height / 2)) + 1))' icon.Width' icon.Height);
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonTextBrush,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003: return SystemBrushes.ControlText; // Brushes.Black;  				case Renderer.Outlook2007: return (isSelected ? new SolidBrush(Color.FromArgb(32' 77' 137 )) : Brushes.Black);  				case Renderer.Custom: return new SolidBrush(isSelected ? ForeColor : ForeColorSelected);  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonTextBrush,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003: return SystemBrushes.ControlText; // Brushes.Black;  				case Renderer.Outlook2007: return (isSelected ? new SolidBrush(Color.FromArgb(32' 77' 137 )) : Brushes.Black);  				case Renderer.Custom: return new SolidBrush(isSelected ? ForeColor : ForeColorSelected);  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonTextBrush,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003: return SystemBrushes.ControlText; // Brushes.Black;  				case Renderer.Outlook2007: return (isSelected ? new SolidBrush(Color.FromArgb(32' 77' 137 )) : Brushes.Black);  				case Renderer.Custom: return new SolidBrush(isSelected ? ForeColor : ForeColorSelected);  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following statement contains a magic number: switch (Renderer)  			{  				case Renderer.Outlook2003:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Pressed:  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientEnd;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientBegin;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ProfessionalColors.ButtonSelectedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonSelectedGradientEnd;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ProfessionalColors.ButtonCheckedGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ButtonCheckedGradientEnd;  							break;  						case ButtonState.Disabled:  						default:  							if (colorIndex == 0) return ProfessionalColors.ToolStripGradientBegin;  							if (colorIndex == 1) return ProfessionalColors.ToolStripGradientEnd;  							break;  					}  					break;    				case Renderer.Outlook2007:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}  					break;    				case Renderer.Custom:  					switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}  					break;  			}
Magic Number,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,CreateContextMenu,The following statement contains a magic number: contextMenuStrip.Show(this' new Point(Width' Height - (InternalButtonHeight / 2)));
Magic Number,SIL.SilSidePane,OutlookButtonPanel,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OutlookButtonPanel,The following statement contains a magic number: Padding = new Padding(0' 15' 0' 5);
Magic Number,SIL.SilSidePane,OutlookButtonPanel,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OutlookButtonPanel,The following statement contains a magic number: Padding = new Padding(0' 15' 0' 5);
Magic Number,SIL.SilSidePane,OutlookButtonPanel,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OutlookButtonPanel,The following statement contains a magic number: ImageScalingSize = new Size(32' 32);
Magic Number,SIL.SilSidePane,OutlookButtonPanel,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OutlookButtonPanel,The following statement contains a magic number: ImageScalingSize = new Size(32' 32);
Magic Number,SIL.SilSidePane,OutlookButtonPanel,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OutlookButtonPanel,The following statement contains a magic number: m_buttonSize = new Size(100' 47 + Font.Height * 2);
Magic Number,SIL.SilSidePane,OutlookButtonPanel,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OutlookButtonPanel,The following statement contains a magic number: m_buttonSize = new Size(100' 47 + Font.Height * 2);
Magic Number,SIL.SilSidePane,OutlookButtonPanel,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OutlookButtonPanel,The following statement contains a magic number: m_buttonSize = new Size(100' 47 + Font.Height * 2);
Magic Number,SIL.SilSidePane,OutlookBarPanelRenderer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: rc.Width = arrow.Width + 12;
Magic Number,SIL.SilSidePane,OutlookBarPanelRenderer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: rc.X = e.Item.Width - rc.Width - 2;
Magic Number,SIL.SilSidePane,OutlookBarPanelRenderer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: rc.Y = (int)(((decimal)e.Item.Height - rc.Height) / 2);
Magic Number,SIL.SilSidePane,OutlookBarPanelRenderer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: e.Graphics.DrawImageUnscaled(arrow' rc.X + 6' rc.Y + 2);
Magic Number,SIL.SilSidePane,OutlookBarPanelRenderer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: e.Graphics.DrawImageUnscaled(arrow' rc.X + 6' rc.Y + 2);
Magic Number,SIL.SilSidePane,OutlookBarPanelRenderer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OnRenderItemImage,The following statement contains a magic number: rc.X = (int)((decimal)(rc.Width - e.Image.Width) / 2);
Magic Number,SIL.SilSidePane,OutlookBarPanelRenderer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OnRenderItemImage,The following statement contains a magic number: rc.Y += 5;
Magic Number,SIL.SilSidePane,OutlookBarPanelRenderer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OnRenderItemText,The following statement contains a magic number: rc.Y = e.Item.Image.Height + 10;
Magic Number,SIL.SilSidePane,OutlookBarPanelRenderer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookButtonPanel.cs,OnRenderItemText,The following statement contains a magic number: rc.Height = e.Item.Font.Height * 2;
Magic Number,SIL.SilSidePane,SidePane,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\SidePane.cs,Init,The following statement contains a magic number: _banner = new Banner  				{  					Text = ""'  					Dock = DockStyle.Top'  					//Padding = new Padding(0)' // TODO not magic number  					Font = new System.Drawing.Font("Tahoma"'13F' System.Drawing.FontStyle.Bold'  						System.Drawing.GraphicsUnit.Point' ((byte)(0)))'  					Height = 24' // TODO not magic number  				};
Magic Number,SIL.SilSidePane,SidePane,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\SidePane.cs,Init,The following statement contains a magic number: _banner = new Banner  				{  					Text = ""'  					Dock = DockStyle.Top'  					//Padding = new Padding(0)' // TODO not magic number  					Font = new System.Drawing.Font("Tahoma"'13F' System.Drawing.FontStyle.Bold'  						System.Drawing.GraphicsUnit.Point' ((byte)(0)))'  					Height = 24' // TODO not magic number  				};
Magic Number,SIL.SilSidePane,SidePane,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\SidePane.cs,Init,The following statement contains a magic number: _tabArea = new OutlookBar  				{  					Dock = DockStyle.Bottom'  					Font = new System.Drawing.Font("Tahoma"' 13F' System.Drawing.FontStyle.Bold'  						System.Drawing.GraphicsUnit.World)'  					Name = "outlookBar"'  				};
Missing Default,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,FillButton,The following switch statement is missing a default case: switch (Renderer)  			{  				case Renderer.Outlook2003:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;    				case Renderer.Outlook2007:  					//Filling the top part of the button...  					Rectangle TopRectangle = rc;  					using (br = new LinearGradientBrush(TopRectangle' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						TopRectangle.Height = (InternalButtonHeight * 15) / 32;  						g.FillRectangle(br' TopRectangle);  					}    					//and the bottom part...  					Rectangle BottomRectangle = rc;  					using (br = new LinearGradientBrush(BottomRectangle' GetButtonColor(state' 2)'  						GetButtonColor(state' 3)' LinearGradientMode.Vertical))  					{  						BottomRectangle.Y += (InternalButtonHeight * 12) / 32;  						BottomRectangle.Height -= (InternalButtonHeight * 12) / 32;  						g.FillRectangle(br' BottomRectangle);  					}  					break;    				case Renderer.Custom:  					using (br = new LinearGradientBrush(rc' GetButtonColor(state' 0)'  						GetButtonColor(state' 1)' LinearGradientMode.Vertical))  					{  						g.FillRectangle(br' rc);  					}  					break;  			}
Missing Default,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonTextBrush,The following switch statement is missing a default case: switch (Renderer)  			{  				case Renderer.Outlook2003: return SystemBrushes.ControlText; // Brushes.Black;  				case Renderer.Outlook2007: return (isSelected ? new SolidBrush(Color.FromArgb(32' 77' 137 )) : Brushes.Black);  				case Renderer.Custom: return new SolidBrush(isSelected ? ForeColor : ForeColorSelected);  			}
Missing Default,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following switch statement is missing a default case: switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 189' 105);  							if (colorIndex == 1) return Color.FromArgb(255' 172' 66);  							if (colorIndex == 2) return Color.FromArgb(251' 140' 60);  							if (colorIndex == 3) return Color.FromArgb(254' 211' 101);  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return Color.FromArgb(255' 254' 228);  							if (colorIndex == 1) return Color.FromArgb(255' 232' 166);  							if (colorIndex == 2) return Color.FromArgb(255' 215' 103);  							if (colorIndex == 3) return Color.FromArgb(255' 230' 159);  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return Color.FromArgb(255' 217' 170);  							if (colorIndex == 1) return Color.FromArgb(255' 187' 109);  							if (colorIndex == 2) return Color.FromArgb(255' 171' 63);  							if (colorIndex == 3) return Color.FromArgb(254' 225' 123);  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return Color.FromArgb(227' 239' 255);  							if (colorIndex == 1) return Color.FromArgb(196' 221' 255);  							if (colorIndex == 2) return Color.FromArgb(173' 209' 255);  							if (colorIndex == 3) return Color.FromArgb(193' 219' 255);  							break;  					}
Missing Default,SIL.SilSidePane,OutlookBar,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\XCore\SilSidePane\OutlookBar.cs,GetButtonColor,The following switch statement is missing a default case: switch (buttonState)  					{  						case ButtonState.Hovering | ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedAndHoveringTop;  							if (colorIndex == 1) return ButtonColorSelectedAndHoveringBottom;  							break;  						case ButtonState.Hovering:  							if (colorIndex == 0) return ButtonColorHoveringTop;  							if (colorIndex == 1) return ButtonColorHoveringBottom;  							break;  						case ButtonState.Selected:  							if (colorIndex == 0) return ButtonColorSelectedTop;  							if (colorIndex == 1) return ButtonColorSelectedBottom;  							break;  						case ButtonState.Disabled:  						case ButtonState.Passive:  							if (colorIndex == 0) return ButtonColorPassiveTop;  							if (colorIndex == 1) return ButtonColorPassiveBottom;  							break;  					}
