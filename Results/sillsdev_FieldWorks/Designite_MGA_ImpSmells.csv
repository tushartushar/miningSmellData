Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.LexText.Controls.MGA,MGADialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGADialog.cs,InitializeComponent,The method has 317 lines of code.
Long Parameter List,SIL.FieldWorks.LexText.Controls.MGA,GlossListBoxItem,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\GlossListBoxItem.cs,GlossListBoxItem,The method has 5 parameters. Parameters: cache' node' sAfterSeparator' sComplexNameSeparator' fComplexNameFirst
Long Parameter List,SIL.FieldWorks.LexText.Controls.MGA,GlossListEventArgs,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\GlossListEventArgs.cs,GlossListEventArgs,The method has 5 parameters. Parameters: cache' node' sAfterSeparator' sComplexNameSeparator' fComplexNameFirst
Long Identifier,SIL.FieldWorks.LexText.Controls.MGA,MGADialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGADialog.cs,,The length of the parameter labelConstructedGlossForPrompt is 30.
Long Statement,SIL.FieldWorks.LexText.Controls.MGA,MGADialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGADialog.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MGADialog)); " is 129.
Long Statement,SIL.FieldWorks.LexText.Controls.MGA,MGADialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGADialog.cs,InitializeComponent,The length of the statement  "			this.splitContainerHorizontal.Panel2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128))))); " is 151.
Long Statement,SIL.FieldWorks.LexText.Controls.MGA,MGAHtmlHelpDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGAHtmlHelpDialog.cs,SetupInitialState,The length of the statement  "			string sXsltFile = Path.Combine(FwDirectoryFinder.CodeDirectory' String.Format("Language Explorer{0}MGA{0}MGAShowInfo.xsl"' Path.DirectorySeparatorChar)); " is 154.
Magic Number,SIL.FieldWorks.LexText.Controls.MGA,GlossListTreeView,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\GlossListTreeView.cs,OnMouseUp,The following statement contains a magic number: if (mea.Button == MouseButtons.Left)  			{  				TreeView tv = (TreeView) obj;  				TreeNode tn = tv.GetNodeAt(mea.X' mea.Y);  				if (tn != null)  				{  					Rectangle rec = tn.Bounds;  					rec.X += -18;       // include the image bitmap (16 pixels plus 2 pixels between the image and the text)  					rec.Width += 18;  					if (rec.Contains(mea.X' mea.Y))  					{  						HandleCheckBoxNodes(tv' tn);  //						int i = tn.ImageIndex;  					}  				}  			}
Magic Number,SIL.FieldWorks.LexText.Controls.MGA,GlossListTreeView,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\GlossListTreeView.cs,OnMouseUp,The following statement contains a magic number: if (mea.Button == MouseButtons.Left)  			{  				TreeView tv = (TreeView) obj;  				TreeNode tn = tv.GetNodeAt(mea.X' mea.Y);  				if (tn != null)  				{  					Rectangle rec = tn.Bounds;  					rec.X += -18;       // include the image bitmap (16 pixels plus 2 pixels between the image and the text)  					rec.Width += 18;  					if (rec.Contains(mea.X' mea.Y))  					{  						HandleCheckBoxNodes(tv' tn);  //						int i = tn.ImageIndex;  					}  				}  			}
Magic Number,SIL.FieldWorks.LexText.Controls.MGA,GlossListTreeView,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\GlossListTreeView.cs,FleshOutProxy,The following statement contains a magic number: if (xn != null)  			{  				XmlAttribute idAttr = dom.CreateAttribute("id");  				idAttr.Value = sTarget;  				idAttr.Value = sTarget;  				currentNode.Attributes.Append(idAttr);  				var guidAttr = (XmlAttribute) xn.SelectSingleNode("@guid");  				Debug.Assert(guidAttr != null' "guid is a required attribute for items with ids");  				currentNode.Attributes.Append((XmlAttribute)guidAttr.Clone());  				XmlAttribute typeAttr = (XmlAttribute)xn.SelectSingleNode("@type");  				if (typeAttr != null)  					currentNode.Attributes.Append((XmlAttribute)typeAttr.Clone());  				// replace any abbrev' term or def items from target and add any citations in target  				string[] asNodes =  new string[3] {"abbrev"' "term"' "def"};  				for (int i = 0; i<3; i++)  				{  					XmlNode newTempNode = xn.SelectSingleNode(asNodes[i]);  					XmlNode oldNode = currentNode.SelectSingleNode(asNodes[i]);  					if (newTempNode != null)  					{  						if (oldNode != null)  							currentNode.ReplaceChild(newTempNode.Clone()' oldNode);  						else  							currentNode.AppendChild(newTempNode.Clone());  					}  				}  				XmlNodeList citationNodes = xn.SelectNodes("citation");  				foreach (XmlNode citation in citationNodes)  				{  					currentNode.AppendChild(citation.Clone());  				}  			}
Magic Number,SIL.FieldWorks.LexText.Controls.MGA,GlossListTreeView,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\GlossListTreeView.cs,FleshOutProxy,The following statement contains a magic number: if (xn != null)  			{  				XmlAttribute idAttr = dom.CreateAttribute("id");  				idAttr.Value = sTarget;  				idAttr.Value = sTarget;  				currentNode.Attributes.Append(idAttr);  				var guidAttr = (XmlAttribute) xn.SelectSingleNode("@guid");  				Debug.Assert(guidAttr != null' "guid is a required attribute for items with ids");  				currentNode.Attributes.Append((XmlAttribute)guidAttr.Clone());  				XmlAttribute typeAttr = (XmlAttribute)xn.SelectSingleNode("@type");  				if (typeAttr != null)  					currentNode.Attributes.Append((XmlAttribute)typeAttr.Clone());  				// replace any abbrev' term or def items from target and add any citations in target  				string[] asNodes =  new string[3] {"abbrev"' "term"' "def"};  				for (int i = 0; i<3; i++)  				{  					XmlNode newTempNode = xn.SelectSingleNode(asNodes[i]);  					XmlNode oldNode = currentNode.SelectSingleNode(asNodes[i]);  					if (newTempNode != null)  					{  						if (oldNode != null)  							currentNode.ReplaceChild(newTempNode.Clone()' oldNode);  						else  							currentNode.AppendChild(newTempNode.Clone());  					}  				}  				XmlNodeList citationNodes = xn.SelectNodes("citation");  				foreach (XmlNode citation in citationNodes)  				{  					currentNode.AppendChild(citation.Clone());  				}  			}
Magic Number,SIL.FieldWorks.LexText.Controls.MGA,MGADialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGADialog.cs,InitForm,The following statement contains a magic number: using (var graphics = CreateGraphics())  			{  				float fRatio = graphics.DpiX / 96.0f; // try to adjust for screen resolution  				// on start-up' ensure the selected gloss panel is wide enough for all the buttons  				splitContainerVertical.SplitterDistance =  					splitContainerVertical.Width - (buttonAcceptGloss.Width  					+ buttonCancel.Width + buttonHelp.Width + (int)(16 * fRatio));    				Text += " " + m_cache.ProjectId.UiName;    				ResumeLayout();  			}
Magic Number,SIL.FieldWorks.LexText.Controls.MGA,MGADialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGADialog.cs,EnableMoveUpDownButtons,The following statement contains a magic number: if (cCount < 2 || iSelectedIndex < 0)  			{  				buttonMoveDown.Enabled = false;  				buttonMoveUp.Enabled = false;  			}  			else  			{  				if (iSelectedIndex == (cCount - 1))  					buttonMoveDown.Enabled = false;  				else  					buttonMoveDown.Enabled = true;  				if (iSelectedIndex == 0)  					buttonMoveUp.Enabled = false;  				else  					buttonMoveUp.Enabled = true;  			}
Magic Number,SIL.FieldWorks.LexText.Controls.MGA,MGADialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGADialog.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add(this.checkBoxShowUsed' 0' 2);
Magic Number,SIL.FieldWorks.LexText.Controls.MGA,MGADialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGADialog.cs,InitializeComponent,The following statement contains a magic number: this.splitContainerHorizontal.Panel2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));
Magic Number,SIL.FieldWorks.LexText.Controls.MGA,MGADialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGADialog.cs,InitializeComponent,The following statement contains a magic number: this.splitContainerHorizontal.Panel2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));
Magic Number,SIL.FieldWorks.LexText.Controls.MGA,MGADialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGADialog.cs,InitializeComponent,The following statement contains a magic number: this.splitContainerHorizontal.Panel2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));
Magic Number,SIL.FieldWorks.LexText.Controls.MGA,MGADialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGADialog.cs,InitializeComponent,The following statement contains a magic number: this.treeViewGlossListItem.ItemHeight = 16;
Magic Number,SIL.FieldWorks.LexText.Controls.MGA,MGAHtmlHelpDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGAHtmlHelpDialog.cs,MGAHtmlHelpDialog,The following statement contains a magic number: m_browser = new GeckoWebBrowser  						{  							Dock = DockStyle.Fill'  							Location = new Point(0' 0)'  							TabIndex = 1'  							MinimumSize = new Size(20' 20)'  							NoDefaultContextMenu = true  						};
Magic Number,SIL.FieldWorks.LexText.Controls.MGA,MGAHtmlHelpDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MGAHtmlHelpDialog.cs,MGAHtmlHelpDialog,The following statement contains a magic number: m_browser = new GeckoWebBrowser  						{  							Dock = DockStyle.Fill'  							Location = new Point(0' 0)'  							TabIndex = 1'  							MinimumSize = new Size(20' 20)'  							NoDefaultContextMenu = true  						};
Missing Default,SIL.FieldWorks.LexText.Controls.MGA,MasterInflectionFeature,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MGA\MasterInflectionFeature.cs,DetermineInDatabase,The following switch statement is missing a default case: switch (m_eKind)  				{  					case GlossListTreeView.ImageKind.radio: // fall through  					case GlossListTreeView.ImageKind.radioSelected: // fall through  					case GlossListTreeView.ImageKind.checkBox: // fall through  					case GlossListTreeView.ImageKind.checkedBox:  						// these are all feature values  						m_fInDatabase = featSys.GetSymbolicValue(sId) != null;  						break;  					case GlossListTreeView.ImageKind.complex:  						m_fInDatabase = featSys.GetFeature(sId) != null;  						break;  					case GlossListTreeView.ImageKind.userChoice: // closed feature  						string sStatus = XmlUtils.GetAttributeValue(m_node' "status");  						m_fInDatabase = featSys.GetFeature(sId) != null;  						if (sStatus == "proxy")  						{  							XmlNode xnType = this.m_node.SelectSingleNode("ancestor::item[@type='fsType']/@id");  							if (xnType != null)  							{  								var type = featSys.GetFeatureType(xnType.InnerText);  								m_fInDatabase = type != null && type.GetFeature(sId) != null && m_fInDatabase;  							}  						}  						break;  				}
