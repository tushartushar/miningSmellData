Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SIL.FieldWorks.Common.Controls,CharacterGrid,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterGrid.cs,LoadGrid,Cyclomatic complexity of the method is 12
Complex Method,SIL.FieldWorks.Common.Controls,FwButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwButton.cs,OnPaint,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Controls,ProgressDialogWithTask,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressDialogWithTask.cs,RunTask,Cyclomatic complexity of the method is 8
Complex Method,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,Cyclomatic complexity of the method is 15
Complex Method,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,MakeFloatable,Cyclomatic complexity of the method is 10
Complex Method,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,DockFloaty,Cyclomatic complexity of the method is 8
Long Parameter List,SIL.FieldWorks.Common.Controls,CharacterGrid,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterGrid.cs,GetGlyphIndices,The method has 5 parameters. Parameters: hdc' lpstr' c' pgi' fl
Long Parameter List,SIL.FieldWorks.Common.Drawing,BorderDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,BorderDrawing,The method has 6 parameters. Parameters: g' x' y' nWidth' nHeight' brdrType
Long Parameter List,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,LineDrawing,The method has 5 parameters. Parameters: g' x' y' dxpLength' lineType
Long Parameter List,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,LineDrawing,The method has 5 parameters. Parameters: g' x1' y1' x2' y2
Long Parameter List,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,LineDrawing,The method has 6 parameters. Parameters: g' x1' y1' x2' y2' lineType
Long Parameter List,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,Draw,The method has 5 parameters. Parameters: g' x' y' dxpLength' lineType
Long Parameter List,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,Draw,The method has 5 parameters. Parameters: g' x1' y1' x2' y2
Long Parameter List,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,Draw,The method has 5 parameters. Parameters: x1' y1' x2' y2' solidLineColor
Long Parameter List,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,Draw,The method has 6 parameters. Parameters: g' x1' y1' x2' y2' solidLineColor
Long Parameter List,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,Draw,The method has 5 parameters. Parameters: x1' y1' x2' y2' lineType
Long Parameter List,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,Draw,The method has 6 parameters. Parameters: g' x1' y1' x2' y2' lineType
Long Identifier,SIL.FieldWorks.Common.Controls,HeaderLabel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\HeaderLabel.cs,,The length of the parameter m_showWindowBackgroudOnTopAndRightEdge is 38.
Long Identifier,SIL.FieldWorks.Common.Controls,PredictiveProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\PredictiveProgressState.cs,,The length of the parameter m_currentStepExpectedFractionOfTotal is 36.
Long Identifier,SIL.FieldWorks.Common.Controls,PredictiveProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\PredictiveProgressState.cs,,The length of the parameter m_currentStepExpectedMilliSeconds is 33.
Long Identifier,SIL.FieldWorks.Common.Controls,MilestoneProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressState.cs,,The length of the parameter m_currentStepExpectedFractionOfTotal is 36.
Long Statement,SIL.FieldWorks.Common.Controls,ColorPickerMatrix,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ColorPickerMatrix.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ColorPickerMatrix)); " is 137.
Long Statement,SIL.FieldWorks.Common.Controls,ObtainProjectMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ObtainProjectMethod.cs,ObtainProjectFromAnySource,The length of the statement  "			var success = FLExBridgeHelper.LaunchFieldworksBridge(FwDirectoryFinder.ProjectsDirectory' null' FLExBridgeHelper.Obtain' null' " is 127.
Long Statement,SIL.FieldWorks.Common.Controls,ObtainProjectMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ObtainProjectMethod.cs,CreateProjectFromLift,The length of the statement  "			ProjectLockingService.UnlockCurrentProject(cache); // finish all saves and completely write the file so we can proceed to open it " is 129.
Long Statement,SIL.FieldWorks.Common.Controls,ObtainProjectMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ObtainProjectMethod.cs,CreateProjectTask,The length of the statement  "				Directory.GetParent(Path.GetDirectoryName(liftPathname)).Parent.Name' // Get the new Flex project name from the Lift pathname. " is 126.
Long Statement,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwColorCombo)); " is 132.
Long Statement,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,DrawDropDownButton,The length of the statement  "				Rectangle rect = new Rectangle(m_buttonRect.X - 1' m_buttonRect.Y - 1' m_buttonRect.Width + 2' m_buttonRect.Height + 2); " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,FwHelpButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwHelpButton.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwHelpButton)); " is 132.
Long Statement,SIL.FieldWorks.Common.Controls,InformationBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\InformationBar.cs,InitializeComponent,The length of the statement  "			this.InfoBarLabel.Font = new System.Drawing.Font("Arial"' 8.861538F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 155.
Long Statement,SIL.FieldWorks.Common.Controls,PredictiveProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\PredictiveProgressState.cs,SetMilestoneInternal,The length of the statement  "			//System.Diagnostics.Debug.WriteLine("m_currentStepExpectedFractionOfTotal="+m_currentStepExpectedFractionOfTotal.ToString()); " is 126.
Long Statement,SIL.FieldWorks.Common.Controls,PredictiveProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\PredictiveProgressState.cs,SetMilestoneInternal,The length of the statement  "			//System.Diagnostics.Debug.WriteLine("m_currentStepExpectedMilliSeconds="+m_currentStepExpectedMilliSeconds.ToString()); " is 120.
Long Statement,SIL.FieldWorks.Common.Controls,PredictiveProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\PredictiveProgressState.cs,ReadIncrements,The length of the statement  "			/*			string sPBIncrementPerTimerInterval = GetStringRegistryValue( REGVALUE_PB_MILISECOND_INCREMENT' m_taskLabel' "0.0015"); " is 124.
Long Statement,SIL.FieldWorks.Common.Controls,PredictiveProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\PredictiveProgressState.cs,ReadIncrements,The length of the statement  "						if( Double.TryParse(sPBIncrementPerTimerInterval' System.Globalization.NumberStyles.Float' System.Globalization.NumberFormatInfo.InvariantInfo' out dblResult) == true ) " is 168.
Long Statement,SIL.FieldWorks.Common.Controls,PredictiveProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\PredictiveProgressState.cs,ReadIncrements,The length of the statement  "			if( Double.TryParse(s' System.Globalization.NumberStyles.Float' System.Globalization.NumberFormatInfo.InvariantInfo' out dblResult) == true ) " is 141.
Long Statement,SIL.FieldWorks.Common.Controls,PredictiveProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\PredictiveProgressState.cs,ReadIncrements,The length of the statement  "					if( Double.TryParse(aTimes[i]' System.Globalization.NumberStyles.Float' System.Globalization.NumberFormatInfo.InvariantInfo' out dblVal) ) " is 138.
Long Statement,SIL.FieldWorks.Common.Controls,PredictiveProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\PredictiveProgressState.cs,StoreIncrements,The length of the statement  "			//SetStringRegistryValue( REGVALUE_PB_MILISECOND_INCREMENT' m_taskLabel' m_incrementPerTimerInterval.ToString("#.000000"' System.Globalization.NumberFormatInfo.InvariantInfo)); " is 176.
Long Statement,SIL.FieldWorks.Common.Controls,PredictiveProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\PredictiveProgressState.cs,StoreIncrements,The length of the statement  "			SetStringRegistryValue( REGVALUE_PB_TOTAL_TIME' m_taskLabel' actualElapsedMilliseconds.ToString("#.000000"' System.Globalization.NumberFormatInfo.InvariantInfo)); " is 162.
Long Statement,SIL.FieldWorks.Common.Controls,PredictiveProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\PredictiveProgressState.cs,Breath,The length of the statement  "			if( /*m_bFirstLaunch == false && */ m_acumulatedFractionOfTotal < (m_acumulatedFractionOfTotal+m_currentStepExpectedFractionOfTotal )) " is 134.
Long Statement,SIL.FieldWorks.Common.Controls,ProgressDialogWorkingOn,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressDialogWorkingOn.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ProgressDialogWorkingOn)); " is 143.
Long Statement,SIL.FieldWorks.Common.Controls,MilestoneProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressState.cs,Breath,The length of the statement  "				m_accumulatedFractionOfTotal += 0.01; //TODO: this might be good to be based on how long it has been since we last breathed. " is 124.
Long Statement,SIL.FieldWorks.Common.Controls,ProgressDialogImpl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressDialogImpl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ProgressDialogImpl)); " is 138.
Long Statement,SIL.FieldWorks.Common.Controls,TriStateTreeView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\TriStateTreeView.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TriStateTreeView)); " is 136.
Long Statement,SIL.FieldWorks.Common.Controls,TriStateTreeView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\TriStateTreeView.cs,InitializeComponent,The length of the statement  "			this.m_TriStateImages.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("m_TriStateImages.ImageStream"))); " is 132.
Long Statement,SIL.FieldWorks.Common.Controls,WizardDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\WizardDialog.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(WizardDialog)); " is 132.
Long Statement,SIL.FieldWorks.Common.Controls,WSChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\WSChooser.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(WSChooser)); " is 129.
Long Statement,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,OnResizeEnd,The length of the statement  "			if (m_dockExtender.Overlay.Visible == true && m_dockExtender.Overlay.DockHostControl != null) //ok found new docking position " is 125.
Complex Conditional,SIL.FieldWorks.Common.Controls,CharacterGrid,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterGrid.cs,OnDoubleClick,The conditional expression  "i > 0 && i < m_chars.Count && htinfo.RowIndex >= 0 && htinfo.ColumnIndex >= 0"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Controls,FwOverrideComboBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwOverrideComboBox.cs,OnDropDownClosed,The conditional expression  "base.SelectedIndex == -1 && DropDownStyle == ComboBoxStyle.DropDownList &&  				m_lastSelectedIndex >= 0 && m_lastSelectedIndex < base.Items.Count"  is complex.
Complex Conditional,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The conditional expression  "rx > 0 && rx < ry && rx < 0.25 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Left) != 0"  is complex.
Complex Conditional,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The conditional expression  "rx < 1 && rx > ry && rx > 0.75 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Right) != 0"  is complex.
Complex Conditional,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The conditional expression  "ry > 0 && ry < rx && ry < 0.25 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Top) != 0"  is complex.
Complex Conditional,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The conditional expression  "ry < 1 && ry > rx && ry > 0.75 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Bottom) != 0"  is complex.
Magic Number,SIL.FieldWorks.Common.Controls,CharacterGrid,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterGrid.cs,OnCellPainting,The following statement contains a magic number: if (img != null)  			{  				// Paint the image that was found in the tag property.  				int x = (e.CellBounds.Width - img.Width) / 2;  				int y = (e.CellBounds.Height - img.Height) / 2;  				e.Graphics.DrawImageUnscaled(img' e.CellBounds.X + x' e.CellBounds.Y + y);  			}
Magic Number,SIL.FieldWorks.Common.Controls,CharacterGrid,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterGrid.cs,OnCellPainting,The following statement contains a magic number: if (img != null)  			{  				// Paint the image that was found in the tag property.  				int x = (e.CellBounds.Width - img.Width) / 2;  				int y = (e.CellBounds.Height - img.Height) / 2;  				e.Graphics.DrawImageUnscaled(img' e.CellBounds.X + x' e.CellBounds.Y + y);  			}
Magic Number,SIL.FieldWorks.Common.Controls,CharacterGrid,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterGrid.cs,LoadCharsFromFont,The following statement contains a magic number: using (new WaitCursor(this))  			{  				m_chars = new List<string>();    				using (Graphics g = CreateGraphics())  				{  					IntPtr hdc = g.GetHdc();  					IntPtr hfont = Font.ToHfont();  					IntPtr oldFont = SelectObject(hdc' hfont);    					ushort[] indices = new ushort[1];    					// Even though a font set can' theoretically' contain more than 65535 character  					// definitions' we're going to exclude upper plane characters from being chosen.  					for (int codePoint = kFirstChar; codePoint < 65534; codePoint++)  					{  						char cp = (char)codePoint;  						string chr = cp.ToString();  						uint ret = GetGlyphIndices(hdc' chr' 1' indices' 1);  						if (ret == 1 && indices[0] != 0xFFFF && ShouldLoadFontChar(cp))  							m_chars.Add(chr);  					}    					SelectObject(hdc' oldFont);  					g.ReleaseHdc(hdc);  				}  				CalcCellSize();  			}
Magic Number,SIL.FieldWorks.Common.Controls,CharacterGrid,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterGrid.cs,CalcCellSize,The following statement contains a magic number: int padding = 4;
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,CharacterInfoToolTip,The following statement contains a magic number: ReshowDelay = 1000;
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,CharacterInfoToolTip,The following statement contains a magic number: AutoPopDelay = 5000;
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandlePopup,The following statement contains a magic number: using (Graphics g = Graphics.FromHwnd(e.AssociatedWindow.Handle))  			{  				Size sz1 = TextRenderer.MeasureText(g' ToolTipTitle' m_fntTitle);  				Size sz2 = TextRenderer.MeasureText(g' m_text' m_fntText);    				m_rcTitle = new Rectangle(10' 10' sz1.Width' sz1.Height);  				m_rcText = new Rectangle(10' m_rcTitle.Bottom + 15' sz2.Width' sz2.Height);    				if (m_showMissingGlyphIcon)  				{  					m_rcTitle.X += (m_missingGlyphIcon.Width + 5);  					sz1.Width += (m_missingGlyphIcon.Width + 5);  					sz1.Height = Math.Max(sz1.Height' m_missingGlyphIcon.Height);  				}    				sz1.Width = Math.Max(sz1.Width' sz2.Width) + 20;  				sz1.Height += (sz2.Height + 35);  				e.ToolTipSize = sz1;  			}
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandlePopup,The following statement contains a magic number: using (Graphics g = Graphics.FromHwnd(e.AssociatedWindow.Handle))  			{  				Size sz1 = TextRenderer.MeasureText(g' ToolTipTitle' m_fntTitle);  				Size sz2 = TextRenderer.MeasureText(g' m_text' m_fntText);    				m_rcTitle = new Rectangle(10' 10' sz1.Width' sz1.Height);  				m_rcText = new Rectangle(10' m_rcTitle.Bottom + 15' sz2.Width' sz2.Height);    				if (m_showMissingGlyphIcon)  				{  					m_rcTitle.X += (m_missingGlyphIcon.Width + 5);  					sz1.Width += (m_missingGlyphIcon.Width + 5);  					sz1.Height = Math.Max(sz1.Height' m_missingGlyphIcon.Height);  				}    				sz1.Width = Math.Max(sz1.Width' sz2.Width) + 20;  				sz1.Height += (sz2.Height + 35);  				e.ToolTipSize = sz1;  			}
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandlePopup,The following statement contains a magic number: using (Graphics g = Graphics.FromHwnd(e.AssociatedWindow.Handle))  			{  				Size sz1 = TextRenderer.MeasureText(g' ToolTipTitle' m_fntTitle);  				Size sz2 = TextRenderer.MeasureText(g' m_text' m_fntText);    				m_rcTitle = new Rectangle(10' 10' sz1.Width' sz1.Height);  				m_rcText = new Rectangle(10' m_rcTitle.Bottom + 15' sz2.Width' sz2.Height);    				if (m_showMissingGlyphIcon)  				{  					m_rcTitle.X += (m_missingGlyphIcon.Width + 5);  					sz1.Width += (m_missingGlyphIcon.Width + 5);  					sz1.Height = Math.Max(sz1.Height' m_missingGlyphIcon.Height);  				}    				sz1.Width = Math.Max(sz1.Width' sz2.Width) + 20;  				sz1.Height += (sz2.Height + 35);  				e.ToolTipSize = sz1;  			}
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandlePopup,The following statement contains a magic number: using (Graphics g = Graphics.FromHwnd(e.AssociatedWindow.Handle))  			{  				Size sz1 = TextRenderer.MeasureText(g' ToolTipTitle' m_fntTitle);  				Size sz2 = TextRenderer.MeasureText(g' m_text' m_fntText);    				m_rcTitle = new Rectangle(10' 10' sz1.Width' sz1.Height);  				m_rcText = new Rectangle(10' m_rcTitle.Bottom + 15' sz2.Width' sz2.Height);    				if (m_showMissingGlyphIcon)  				{  					m_rcTitle.X += (m_missingGlyphIcon.Width + 5);  					sz1.Width += (m_missingGlyphIcon.Width + 5);  					sz1.Height = Math.Max(sz1.Height' m_missingGlyphIcon.Height);  				}    				sz1.Width = Math.Max(sz1.Width' sz2.Width) + 20;  				sz1.Height += (sz2.Height + 35);  				e.ToolTipSize = sz1;  			}
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandlePopup,The following statement contains a magic number: using (Graphics g = Graphics.FromHwnd(e.AssociatedWindow.Handle))  			{  				Size sz1 = TextRenderer.MeasureText(g' ToolTipTitle' m_fntTitle);  				Size sz2 = TextRenderer.MeasureText(g' m_text' m_fntText);    				m_rcTitle = new Rectangle(10' 10' sz1.Width' sz1.Height);  				m_rcText = new Rectangle(10' m_rcTitle.Bottom + 15' sz2.Width' sz2.Height);    				if (m_showMissingGlyphIcon)  				{  					m_rcTitle.X += (m_missingGlyphIcon.Width + 5);  					sz1.Width += (m_missingGlyphIcon.Width + 5);  					sz1.Height = Math.Max(sz1.Height' m_missingGlyphIcon.Height);  				}    				sz1.Width = Math.Max(sz1.Width' sz2.Width) + 20;  				sz1.Height += (sz2.Height + 35);  				e.ToolTipSize = sz1;  			}
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandlePopup,The following statement contains a magic number: using (Graphics g = Graphics.FromHwnd(e.AssociatedWindow.Handle))  			{  				Size sz1 = TextRenderer.MeasureText(g' ToolTipTitle' m_fntTitle);  				Size sz2 = TextRenderer.MeasureText(g' m_text' m_fntText);    				m_rcTitle = new Rectangle(10' 10' sz1.Width' sz1.Height);  				m_rcText = new Rectangle(10' m_rcTitle.Bottom + 15' sz2.Width' sz2.Height);    				if (m_showMissingGlyphIcon)  				{  					m_rcTitle.X += (m_missingGlyphIcon.Width + 5);  					sz1.Width += (m_missingGlyphIcon.Width + 5);  					sz1.Height = Math.Max(sz1.Height' m_missingGlyphIcon.Height);  				}    				sz1.Width = Math.Max(sz1.Width' sz2.Width) + 20;  				sz1.Height += (sz2.Height + 35);  				e.ToolTipSize = sz1;  			}
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandlePopup,The following statement contains a magic number: using (Graphics g = Graphics.FromHwnd(e.AssociatedWindow.Handle))  			{  				Size sz1 = TextRenderer.MeasureText(g' ToolTipTitle' m_fntTitle);  				Size sz2 = TextRenderer.MeasureText(g' m_text' m_fntText);    				m_rcTitle = new Rectangle(10' 10' sz1.Width' sz1.Height);  				m_rcText = new Rectangle(10' m_rcTitle.Bottom + 15' sz2.Width' sz2.Height);    				if (m_showMissingGlyphIcon)  				{  					m_rcTitle.X += (m_missingGlyphIcon.Width + 5);  					sz1.Width += (m_missingGlyphIcon.Width + 5);  					sz1.Height = Math.Max(sz1.Height' m_missingGlyphIcon.Height);  				}    				sz1.Width = Math.Max(sz1.Width' sz2.Width) + 20;  				sz1.Height += (sz2.Height + 35);  				e.ToolTipSize = sz1;  			}
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandlePopup,The following statement contains a magic number: using (Graphics g = Graphics.FromHwnd(e.AssociatedWindow.Handle))  			{  				Size sz1 = TextRenderer.MeasureText(g' ToolTipTitle' m_fntTitle);  				Size sz2 = TextRenderer.MeasureText(g' m_text' m_fntText);    				m_rcTitle = new Rectangle(10' 10' sz1.Width' sz1.Height);  				m_rcText = new Rectangle(10' m_rcTitle.Bottom + 15' sz2.Width' sz2.Height);    				if (m_showMissingGlyphIcon)  				{  					m_rcTitle.X += (m_missingGlyphIcon.Width + 5);  					sz1.Width += (m_missingGlyphIcon.Width + 5);  					sz1.Height = Math.Max(sz1.Height' m_missingGlyphIcon.Height);  				}    				sz1.Width = Math.Max(sz1.Width' sz2.Width) + 20;  				sz1.Height += (sz2.Height + 35);  				e.ToolTipSize = sz1;  			}
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandleDraw,The following statement contains a magic number: if (m_showMissingGlyphIcon)  			{  				Point pt = m_rcTitle.Location;  				pt.X -= (m_missingGlyphIcon.Width + 5);  				if (m_missingGlyphIcon.Height > m_rcTitle.Height)  					pt.Y -= (int)((m_missingGlyphIcon.Height - m_rcTitle.Height) / 2);    				e.Graphics.DrawImageUnscaled(m_missingGlyphIcon' pt);  			}
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandleDraw,The following statement contains a magic number: if (m_showMissingGlyphIcon)  			{  				Point pt = m_rcTitle.Location;  				pt.X -= (m_missingGlyphIcon.Width + 5);  				if (m_missingGlyphIcon.Height > m_rcTitle.Height)  					pt.Y -= (int)((m_missingGlyphIcon.Height - m_rcTitle.Height) / 2);    				e.Graphics.DrawImageUnscaled(m_missingGlyphIcon' pt);  			}
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandleDraw,The following statement contains a magic number: Point pt1 = new Point(e.Bounds.X + 7' m_rcTitle.Bottom + 7);
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandleDraw,The following statement contains a magic number: Point pt1 = new Point(e.Bounds.X + 7' m_rcTitle.Bottom + 7);
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandleDraw,The following statement contains a magic number: Point pt2 = new Point(e.Bounds.Right - 5' m_rcTitle.Bottom + 7);
Magic Number,SIL.FieldWorks.Common.Controls,CharacterInfoToolTip,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\CharacterInfoToolTip.cs,HandleDraw,The following statement contains a magic number: Point pt2 = new Point(e.Bounds.Right - 5' m_rcTitle.Bottom + 7);
Magic Number,SIL.FieldWorks.Common.Controls,ColorPickerDropDown,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ColorPickerDropDown.cs,ColorPickerDropDown,The following statement contains a magic number: host.Size = new Size(m_colorMatrix.Width + 6' m_colorMatrix.Height + 6);
Magic Number,SIL.FieldWorks.Common.Controls,ColorPickerDropDown,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ColorPickerDropDown.cs,ColorPickerDropDown,The following statement contains a magic number: host.Size = new Size(m_colorMatrix.Width + 6' m_colorMatrix.Height + 6);
Magic Number,SIL.FieldWorks.Common.Controls,ColorPickerDropDown,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ColorPickerDropDown.cs,ColorPickerDropDown,The following statement contains a magic number: host.Padding = new Padding(3);
Magic Number,SIL.FieldWorks.Common.Controls,ColorPickerMatrix,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ColorPickerMatrix.cs,btn_Paint,The following statement contains a magic number: using (SolidBrush br = new SolidBrush(btn.BackColor))  			{  				e.Graphics.FillRectangle(br' rc);    				br.Color = Color.Gray;  				rc.Inflate(-3' -3);  				e.Graphics.FillRectangle(br' rc);    				br.Color = m_clrButtons[btn];  				rc.Inflate(-1' -1);  				e.Graphics.FillRectangle(br' rc);  			}
Magic Number,SIL.FieldWorks.Common.Controls,ColorPickerMatrix,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ColorPickerMatrix.cs,btn_Paint,The following statement contains a magic number: using (SolidBrush br = new SolidBrush(btn.BackColor))  			{  				e.Graphics.FillRectangle(br' rc);    				br.Color = Color.Gray;  				rc.Inflate(-3' -3);  				e.Graphics.FillRectangle(br' rc);    				br.Color = m_clrButtons[btn];  				rc.Inflate(-1' -1);  				e.Graphics.FillRectangle(br' rc);  			}
Magic Number,SIL.FieldWorks.Common.Controls,ExplorerBarItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ExplorerBarItem.cs,ExplorerBarItem,The following statement contains a magic number: m_button.Height = 13 + m_button.Font.Height;
Magic Number,SIL.FieldWorks.Common.Controls,ExplorerBarItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ExplorerBarItem.cs,ExplorerBarItem,The following statement contains a magic number: m_glyphButtonWidth = 13 + Font.Height;
Magic Number,SIL.FieldWorks.Common.Controls,ExplorerBarItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ExplorerBarItem.cs,m_button_Paint,The following statement contains a magic number: rc.Inflate(-2' 0);
Magic Number,SIL.FieldWorks.Common.Controls,ExplorerBarItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ExplorerBarItem.cs,m_button_Paint,The following statement contains a magic number: Color clr1 = ColorHelper.CalculateColor(Color.White' SystemColors.MenuHighlight' 90);
Magic Number,SIL.FieldWorks.Common.Controls,ExplorerBarItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ExplorerBarItem.cs,m_button_Paint,The following statement contains a magic number: Point pt1 = new Point(rc.X + 1' rc.Bottom - 3);
Magic Number,SIL.FieldWorks.Common.Controls,ExplorerBarItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ExplorerBarItem.cs,m_button_Paint,The following statement contains a magic number: Point pt2 = new Point(rc.Right' rc.Bottom - 3);
Magic Number,SIL.FieldWorks.Common.Controls,ExplorerBarItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ExplorerBarItem.cs,DrawExpandCollapseGlyph,The following statement contains a magic number: if (PaintingHelper.CanPaintVisualStyle(element))  			{  				VisualStyleRenderer renderer = new VisualStyleRenderer(element);  				renderer.DrawBackground(g' rc);  			}  			else  			{  				Image glyph = (m_expanded ? Properties.Resources.kimidExplorerBarCollapseGlyph :  					Properties.Resources.kimidExplorerBarEpandGlyph);    				if (RightToLeft == RightToLeft.No)  					rc.X = rc.Right - (glyph.Width + 1);    				rc.Y += (m_button.Height - glyph.Height) / 2;  				rc.Width = glyph.Width;  				rc.Height = glyph.Height;  				g.DrawImage(glyph' rc);  			}
Magic Number,SIL.FieldWorks.Common.Controls,ExplorerBarItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ExplorerBarItem.cs,m_button_Click,The following statement contains a magic number: rc.X = rc.Right - rc.Height + 2;
Magic Number,SIL.FieldWorks.Common.Controls,ExplorerBarItem,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ExplorerBarItem.cs,m_button_Click,The following statement contains a magic number: rc.Width = rc.Height + 2;
Magic Number,SIL.FieldWorks.Common.Controls,ObtainProjectMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ObtainProjectMethod.cs,CreateProjectTask,The following statement contains a magic number: var anthroFile = (string) parameters[2];
Magic Number,SIL.FieldWorks.Common.Controls,ObtainProjectMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ObtainProjectMethod.cs,CreateProjectTask,The following statement contains a magic number: var cacheReceiver = (LcmCache[]) parameters[3];
Magic Number,SIL.FieldWorks.Common.Controls,FwBasicGrid,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwBasicGrid.cs,FwBasicGrid,The following statement contains a magic number: m_selCellBackColor =  				ColorHelper.CalculateColor(SystemColors.Window' SystemColors.Highlight' 200);
Magic Number,SIL.FieldWorks.Common.Controls,FwBasicGrid,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwBasicGrid.cs,FwBasicGrid,The following statement contains a magic number: m_selRowBackColor =  				ColorHelper.CalculateColor(SystemColors.Window' SystemColors.Highlight' 150);
Magic Number,SIL.FieldWorks.Common.Controls,FwButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwButton.cs,OnPaint,The following statement contains a magic number: if (!m_fButtonFillsControl)  			{  				if (TextPosition == TextLocation.Below)  				{  					// Adjust the alignment of the button.  					// We treat Top/Middle/Bottom the same  					if (m_ButtonAlign == ContentAlignment.TopCenter ||  						m_ButtonAlign == ContentAlignment.MiddleCenter ||  						m_ButtonAlign == ContentAlignment.BottomCenter)  					{  						m_rect.X = (Width - m_ButtonSize.Width) / 2;  					}  					else if (m_ButtonAlign == ContentAlignment.TopRight ||  						m_ButtonAlign == ContentAlignment.MiddleRight ||  						m_ButtonAlign == ContentAlignment.BottomRight)  					{  						m_rect.X = Width - m_ButtonSize.Width;  					}  				}  				else  				{  					// Adjust the alignment of the button.  					// We treat Top/Middle/Bottom the same  					if (m_ButtonAlign == ContentAlignment.MiddleLeft ||  						m_ButtonAlign == ContentAlignment.MiddleCenter ||  						m_ButtonAlign == ContentAlignment.MiddleRight)  					{  						m_rect.Y = (Height - m_ButtonSize.Height) / 2;  					}  					else if (m_ButtonAlign == ContentAlignment.BottomLeft ||  						m_ButtonAlign == ContentAlignment.BottomCenter ||  						m_ButtonAlign == ContentAlignment.BottomRight)  					{  						m_rect.Y = Height - m_ButtonSize.Height;  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwButton.cs,OnPaint,The following statement contains a magic number: if (!m_fButtonFillsControl)  			{  				if (TextPosition == TextLocation.Below)  				{  					// Adjust the alignment of the button.  					// We treat Top/Middle/Bottom the same  					if (m_ButtonAlign == ContentAlignment.TopCenter ||  						m_ButtonAlign == ContentAlignment.MiddleCenter ||  						m_ButtonAlign == ContentAlignment.BottomCenter)  					{  						m_rect.X = (Width - m_ButtonSize.Width) / 2;  					}  					else if (m_ButtonAlign == ContentAlignment.TopRight ||  						m_ButtonAlign == ContentAlignment.MiddleRight ||  						m_ButtonAlign == ContentAlignment.BottomRight)  					{  						m_rect.X = Width - m_ButtonSize.Width;  					}  				}  				else  				{  					// Adjust the alignment of the button.  					// We treat Top/Middle/Bottom the same  					if (m_ButtonAlign == ContentAlignment.MiddleLeft ||  						m_ButtonAlign == ContentAlignment.MiddleCenter ||  						m_ButtonAlign == ContentAlignment.MiddleRight)  					{  						m_rect.Y = (Height - m_ButtonSize.Height) / 2;  					}  					else if (m_ButtonAlign == ContentAlignment.BottomLeft ||  						m_ButtonAlign == ContentAlignment.BottomCenter ||  						m_ButtonAlign == ContentAlignment.BottomRight)  					{  						m_rect.Y = Height - m_ButtonSize.Height;  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwButton.cs,PutTextOnButton,The following statement contains a magic number: using (var sf = new StringFormat())  			{  				// Take the text's content alignment value and convert it into the individual  				// alignment types for horizontal and vertical alignment.  				sf.Alignment = ContentAlignmentHelper.ConAlignToHorizStrAlign(TextAlign);  				sf.LineAlignment = ContentAlignmentHelper.ConAlignToVertStrAlign(TextAlign);  				sf.Trimming = m_TextTrimming;  				sf.FormatFlags = StringFormatFlags.LineLimit;    				// Create a rectangle in which to align text that accounts for the buttons borders.  				// Multiplying by 2 accounts the combined thickness of the top and bottom borders'  				// and the combined thickness of the left and right borders.  				Rectangle rc = new Rectangle(m_dpBorderWidth' m_dpBorderWidth'  					this.Width - (m_dpBorderWidth * 2)' this.Height - (m_dpBorderWidth * 2));    				// If the text doesn't go on the button portion of the control and the button  				// portion of the control is actually shorter than the control' make the text's  				// rectangle the area below the button's rectangle.  				if (!m_fTextInButton)  				{  					if (TextPosition == TextLocation.Below && m_rect.Height < this.Height)  					{  						// Make the text's rectangle 2 pixels smaller so the text doesn't get  						// too close to the edges. ENHANCE: Should probably add a property  						// called TextMargin or Padding or something like that' instead of  						// hard coding the value to 2.  						rc.Height = this.Height - m_rect.Height - 2;  						rc.Y = m_rect.Height + 2;  					}  					else if (TextPosition == TextLocation.Right && m_rect.Width < this.Width)  					{  						// Make the text's rectangle 2 pixels smaller so the text doesn't get  						// too close to the edges. ENHANCE: Should probably add a property  						// called TextMargin or Padding or something like that' instead of  						// hard coding the value to 2.  						rc.Width = this.Width - m_rect.Width - 2;  						rc.X = m_rect.Width + 2;  					}  				}      				// Ensure that ellipsis draws for text if task bar is to small  				//if (Parent.Width < rc.Width)  				//{  				//	rc.Width = Parent.Width;  				//}    				g.DrawString(Text' this.Font' new SolidBrush(this.ForeColor)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwButton.cs,PutTextOnButton,The following statement contains a magic number: using (var sf = new StringFormat())  			{  				// Take the text's content alignment value and convert it into the individual  				// alignment types for horizontal and vertical alignment.  				sf.Alignment = ContentAlignmentHelper.ConAlignToHorizStrAlign(TextAlign);  				sf.LineAlignment = ContentAlignmentHelper.ConAlignToVertStrAlign(TextAlign);  				sf.Trimming = m_TextTrimming;  				sf.FormatFlags = StringFormatFlags.LineLimit;    				// Create a rectangle in which to align text that accounts for the buttons borders.  				// Multiplying by 2 accounts the combined thickness of the top and bottom borders'  				// and the combined thickness of the left and right borders.  				Rectangle rc = new Rectangle(m_dpBorderWidth' m_dpBorderWidth'  					this.Width - (m_dpBorderWidth * 2)' this.Height - (m_dpBorderWidth * 2));    				// If the text doesn't go on the button portion of the control and the button  				// portion of the control is actually shorter than the control' make the text's  				// rectangle the area below the button's rectangle.  				if (!m_fTextInButton)  				{  					if (TextPosition == TextLocation.Below && m_rect.Height < this.Height)  					{  						// Make the text's rectangle 2 pixels smaller so the text doesn't get  						// too close to the edges. ENHANCE: Should probably add a property  						// called TextMargin or Padding or something like that' instead of  						// hard coding the value to 2.  						rc.Height = this.Height - m_rect.Height - 2;  						rc.Y = m_rect.Height + 2;  					}  					else if (TextPosition == TextLocation.Right && m_rect.Width < this.Width)  					{  						// Make the text's rectangle 2 pixels smaller so the text doesn't get  						// too close to the edges. ENHANCE: Should probably add a property  						// called TextMargin or Padding or something like that' instead of  						// hard coding the value to 2.  						rc.Width = this.Width - m_rect.Width - 2;  						rc.X = m_rect.Width + 2;  					}  				}      				// Ensure that ellipsis draws for text if task bar is to small  				//if (Parent.Width < rc.Width)  				//{  				//	rc.Width = Parent.Width;  				//}    				g.DrawString(Text' this.Font' new SolidBrush(this.ForeColor)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwButton.cs,PutTextOnButton,The following statement contains a magic number: using (var sf = new StringFormat())  			{  				// Take the text's content alignment value and convert it into the individual  				// alignment types for horizontal and vertical alignment.  				sf.Alignment = ContentAlignmentHelper.ConAlignToHorizStrAlign(TextAlign);  				sf.LineAlignment = ContentAlignmentHelper.ConAlignToVertStrAlign(TextAlign);  				sf.Trimming = m_TextTrimming;  				sf.FormatFlags = StringFormatFlags.LineLimit;    				// Create a rectangle in which to align text that accounts for the buttons borders.  				// Multiplying by 2 accounts the combined thickness of the top and bottom borders'  				// and the combined thickness of the left and right borders.  				Rectangle rc = new Rectangle(m_dpBorderWidth' m_dpBorderWidth'  					this.Width - (m_dpBorderWidth * 2)' this.Height - (m_dpBorderWidth * 2));    				// If the text doesn't go on the button portion of the control and the button  				// portion of the control is actually shorter than the control' make the text's  				// rectangle the area below the button's rectangle.  				if (!m_fTextInButton)  				{  					if (TextPosition == TextLocation.Below && m_rect.Height < this.Height)  					{  						// Make the text's rectangle 2 pixels smaller so the text doesn't get  						// too close to the edges. ENHANCE: Should probably add a property  						// called TextMargin or Padding or something like that' instead of  						// hard coding the value to 2.  						rc.Height = this.Height - m_rect.Height - 2;  						rc.Y = m_rect.Height + 2;  					}  					else if (TextPosition == TextLocation.Right && m_rect.Width < this.Width)  					{  						// Make the text's rectangle 2 pixels smaller so the text doesn't get  						// too close to the edges. ENHANCE: Should probably add a property  						// called TextMargin or Padding or something like that' instead of  						// hard coding the value to 2.  						rc.Width = this.Width - m_rect.Width - 2;  						rc.X = m_rect.Width + 2;  					}  				}      				// Ensure that ellipsis draws for text if task bar is to small  				//if (Parent.Width < rc.Width)  				//{  				//	rc.Width = Parent.Width;  				//}    				g.DrawString(Text' this.Font' new SolidBrush(this.ForeColor)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwButton.cs,PutTextOnButton,The following statement contains a magic number: using (var sf = new StringFormat())  			{  				// Take the text's content alignment value and convert it into the individual  				// alignment types for horizontal and vertical alignment.  				sf.Alignment = ContentAlignmentHelper.ConAlignToHorizStrAlign(TextAlign);  				sf.LineAlignment = ContentAlignmentHelper.ConAlignToVertStrAlign(TextAlign);  				sf.Trimming = m_TextTrimming;  				sf.FormatFlags = StringFormatFlags.LineLimit;    				// Create a rectangle in which to align text that accounts for the buttons borders.  				// Multiplying by 2 accounts the combined thickness of the top and bottom borders'  				// and the combined thickness of the left and right borders.  				Rectangle rc = new Rectangle(m_dpBorderWidth' m_dpBorderWidth'  					this.Width - (m_dpBorderWidth * 2)' this.Height - (m_dpBorderWidth * 2));    				// If the text doesn't go on the button portion of the control and the button  				// portion of the control is actually shorter than the control' make the text's  				// rectangle the area below the button's rectangle.  				if (!m_fTextInButton)  				{  					if (TextPosition == TextLocation.Below && m_rect.Height < this.Height)  					{  						// Make the text's rectangle 2 pixels smaller so the text doesn't get  						// too close to the edges. ENHANCE: Should probably add a property  						// called TextMargin or Padding or something like that' instead of  						// hard coding the value to 2.  						rc.Height = this.Height - m_rect.Height - 2;  						rc.Y = m_rect.Height + 2;  					}  					else if (TextPosition == TextLocation.Right && m_rect.Width < this.Width)  					{  						// Make the text's rectangle 2 pixels smaller so the text doesn't get  						// too close to the edges. ENHANCE: Should probably add a property  						// called TextMargin or Padding or something like that' instead of  						// hard coding the value to 2.  						rc.Width = this.Width - m_rect.Width - 2;  						rc.X = m_rect.Width + 2;  					}  				}      				// Ensure that ellipsis draws for text if task bar is to small  				//if (Parent.Width < rc.Width)  				//{  				//	rc.Width = Parent.Width;  				//}    				g.DrawString(Text' this.Font' new SolidBrush(this.ForeColor)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwButton.cs,PutTextOnButton,The following statement contains a magic number: using (var sf = new StringFormat())  			{  				// Take the text's content alignment value and convert it into the individual  				// alignment types for horizontal and vertical alignment.  				sf.Alignment = ContentAlignmentHelper.ConAlignToHorizStrAlign(TextAlign);  				sf.LineAlignment = ContentAlignmentHelper.ConAlignToVertStrAlign(TextAlign);  				sf.Trimming = m_TextTrimming;  				sf.FormatFlags = StringFormatFlags.LineLimit;    				// Create a rectangle in which to align text that accounts for the buttons borders.  				// Multiplying by 2 accounts the combined thickness of the top and bottom borders'  				// and the combined thickness of the left and right borders.  				Rectangle rc = new Rectangle(m_dpBorderWidth' m_dpBorderWidth'  					this.Width - (m_dpBorderWidth * 2)' this.Height - (m_dpBorderWidth * 2));    				// If the text doesn't go on the button portion of the control and the button  				// portion of the control is actually shorter than the control' make the text's  				// rectangle the area below the button's rectangle.  				if (!m_fTextInButton)  				{  					if (TextPosition == TextLocation.Below && m_rect.Height < this.Height)  					{  						// Make the text's rectangle 2 pixels smaller so the text doesn't get  						// too close to the edges. ENHANCE: Should probably add a property  						// called TextMargin or Padding or something like that' instead of  						// hard coding the value to 2.  						rc.Height = this.Height - m_rect.Height - 2;  						rc.Y = m_rect.Height + 2;  					}  					else if (TextPosition == TextLocation.Right && m_rect.Width < this.Width)  					{  						// Make the text's rectangle 2 pixels smaller so the text doesn't get  						// too close to the edges. ENHANCE: Should probably add a property  						// called TextMargin or Padding or something like that' instead of  						// hard coding the value to 2.  						rc.Width = this.Width - m_rect.Width - 2;  						rc.X = m_rect.Width + 2;  					}  				}      				// Ensure that ellipsis draws for text if task bar is to small  				//if (Parent.Width < rc.Width)  				//{  				//	rc.Width = Parent.Width;  				//}    				g.DrawString(Text' this.Font' new SolidBrush(this.ForeColor)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwButton.cs,PutTextOnButton,The following statement contains a magic number: using (var sf = new StringFormat())  			{  				// Take the text's content alignment value and convert it into the individual  				// alignment types for horizontal and vertical alignment.  				sf.Alignment = ContentAlignmentHelper.ConAlignToHorizStrAlign(TextAlign);  				sf.LineAlignment = ContentAlignmentHelper.ConAlignToVertStrAlign(TextAlign);  				sf.Trimming = m_TextTrimming;  				sf.FormatFlags = StringFormatFlags.LineLimit;    				// Create a rectangle in which to align text that accounts for the buttons borders.  				// Multiplying by 2 accounts the combined thickness of the top and bottom borders'  				// and the combined thickness of the left and right borders.  				Rectangle rc = new Rectangle(m_dpBorderWidth' m_dpBorderWidth'  					this.Width - (m_dpBorderWidth * 2)' this.Height - (m_dpBorderWidth * 2));    				// If the text doesn't go on the button portion of the control and the button  				// portion of the control is actually shorter than the control' make the text's  				// rectangle the area below the button's rectangle.  				if (!m_fTextInButton)  				{  					if (TextPosition == TextLocation.Below && m_rect.Height < this.Height)  					{  						// Make the text's rectangle 2 pixels smaller so the text doesn't get  						// too close to the edges. ENHANCE: Should probably add a property  						// called TextMargin or Padding or something like that' instead of  						// hard coding the value to 2.  						rc.Height = this.Height - m_rect.Height - 2;  						rc.Y = m_rect.Height + 2;  					}  					else if (TextPosition == TextLocation.Right && m_rect.Width < this.Width)  					{  						// Make the text's rectangle 2 pixels smaller so the text doesn't get  						// too close to the edges. ENHANCE: Should probably add a property  						// called TextMargin or Padding or something like that' instead of  						// hard coding the value to 2.  						rc.Width = this.Width - m_rect.Width - 2;  						rc.X = m_rect.Width + 2;  					}  				}      				// Ensure that ellipsis draws for text if task bar is to small  				//if (Parent.Width < rc.Width)  				//{  				//	rc.Width = Parent.Width;  				//}    				g.DrawString(Text' this.Font' new SolidBrush(this.ForeColor)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwColorButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorButton.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(15' 15);
Magic Number,SIL.FieldWorks.Common.Controls,FwColorButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorButton.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(15' 15);
Magic Number,SIL.FieldWorks.Common.Controls,FwColorButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorButton.cs,OnPaint,The following statement contains a magic number: Rectangle rect = new Rectangle(2' 2' this.Width - 3' this.Height - 3);
Magic Number,SIL.FieldWorks.Common.Controls,FwColorButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorButton.cs,OnPaint,The following statement contains a magic number: Rectangle rect = new Rectangle(2' 2' this.Width - 3' this.Height - 3);
Magic Number,SIL.FieldWorks.Common.Controls,FwColorButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorButton.cs,OnPaint,The following statement contains a magic number: Rectangle rect = new Rectangle(2' 2' this.Width - 3' this.Height - 3);
Magic Number,SIL.FieldWorks.Common.Controls,FwColorButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorButton.cs,OnPaint,The following statement contains a magic number: Rectangle rect = new Rectangle(2' 2' this.Width - 3' this.Height - 3);
Magic Number,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,OnResize,The following statement contains a magic number: int buttonWidth = 16;
Magic Number,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,OnResize,The following statement contains a magic number: if (!Application.RenderWithVisualStyles)  			{  				buttonMargin = 2;  				buttonWidth = 14;  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,OnResize,The following statement contains a magic number: if (!Application.RenderWithVisualStyles)  			{  				buttonMargin = 2;  				buttonWidth = 14;  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,OnResize,The following statement contains a magic number: m_buttonRect = new Rectangle(  				ClientRectangle.Width - (buttonWidth + buttonMargin)' ClientRectangle.Y + buttonMargin'  				buttonWidth' ClientRectangle.Height - (buttonMargin * 2));
Magic Number,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,DrawDropDownButton,The following statement contains a magic number: if (!Application.RenderWithVisualStyles)  			{  				// Strange' but we have to expand the rectangle a little bit to convince  				// Microsoft's drawing routine to draw an arrow that is the right size;  				// otherwise' the arrows are smaller than for regular comboboxes.  				Rectangle rect = new Rectangle(m_buttonRect.X - 1' m_buttonRect.Y - 1' m_buttonRect.Width + 2' m_buttonRect.Height + 2);  				ControlPaint.DrawComboButton(graphics' rect' state);  			}  			else  			{  				VisualStyleRenderer renderer = new VisualStyleRenderer(element);  				renderer.DrawBackground(graphics' m_buttonRect);  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,DrawDropDownButton,The following statement contains a magic number: if (!Application.RenderWithVisualStyles)  			{  				// Strange' but we have to expand the rectangle a little bit to convince  				// Microsoft's drawing routine to draw an arrow that is the right size;  				// otherwise' the arrows are smaller than for regular comboboxes.  				Rectangle rect = new Rectangle(m_buttonRect.X - 1' m_buttonRect.Y - 1' m_buttonRect.Width + 2' m_buttonRect.Height + 2);  				ControlPaint.DrawComboButton(graphics' rect' state);  			}  			else  			{  				VisualStyleRenderer renderer = new VisualStyleRenderer(element);  				renderer.DrawBackground(graphics' m_buttonRect);  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,OnPaint,The following statement contains a magic number: Rectangle boxRect = new Rectangle(2' 2'  				(m_currentColor == Color.Empty) ? 0 : Height - 4' Height - 4);
Magic Number,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,OnPaint,The following statement contains a magic number: Rectangle boxRect = new Rectangle(2' 2'  				(m_currentColor == Color.Empty) ? 0 : Height - 4' Height - 4);
Magic Number,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,OnPaint,The following statement contains a magic number: Rectangle boxRect = new Rectangle(2' 2'  				(m_currentColor == Color.Empty) ? 0 : Height - 4' Height - 4);
Magic Number,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,OnPaint,The following statement contains a magic number: Rectangle boxRect = new Rectangle(2' 2'  				(m_currentColor == Color.Empty) ? 0 : Height - 4' Height - 4);
Magic Number,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawString(m_colorName' Font' new SolidBrush(ForeColor)'  				boxRect.Right + 1' (Height / 2) - (ht / 2));
Magic Number,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawString(m_colorName' Font' new SolidBrush(ForeColor)'  				boxRect.Right + 1' (Height / 2) - (ht / 2));
Magic Number,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,OnPaint,The following statement contains a magic number: if (ContainsFocus)  			{  				ControlPaint.DrawFocusRectangle(e.Graphics'  					new Rectangle(boxRect.Right + 1' boxRect.Top'  					Width - (boxRect.Width + m_buttonRect.Width + 8)' boxRect.Height));  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwOverrideComboBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwOverrideComboBox.cs,OnEnter,The following statement contains a magic number: int factor = 6;
Magic Number,SIL.FieldWorks.Common.Controls,FwPopup,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwPopup.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(167' 187);
Magic Number,SIL.FieldWorks.Common.Controls,FwPopup,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwPopup.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(167' 187);
Magic Number,SIL.FieldWorks.Common.Controls,FwTextPanel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwTextPanel.cs,CalculateTextRectangle,The following statement contains a magic number: if (m_clipTextForChildControls)  			{  				int rightExtent = m_rcText.Right;    				foreach (Control child in Controls)  					rightExtent = Math.Min(rightExtent' child.Left);    				if (rightExtent != m_rcText.Right &&  					m_rcText.Contains(new Point(rightExtent' m_rcText.Top + m_rcText.Height / 2)))  				{  					m_rcText.Width -= (m_rcText.Right - rightExtent);    					// Give a bit more to account for the  					if ((m_txtFmtFlags & TextFormatFlags.LeftAndRightPadding) > 0)  						m_rcText.Width += 8;  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,FwTextPanel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwTextPanel.cs,CalculateTextRectangle,The following statement contains a magic number: if (m_clipTextForChildControls)  			{  				int rightExtent = m_rcText.Right;    				foreach (Control child in Controls)  					rightExtent = Math.Min(rightExtent' child.Left);    				if (rightExtent != m_rcText.Right &&  					m_rcText.Contains(new Point(rightExtent' m_rcText.Top + m_rcText.Height / 2)))  				{  					m_rcText.Width -= (m_rcText.Right - rightExtent);    					// Give a bit more to account for the  					if ((m_txtFmtFlags & TextFormatFlags.LeftAndRightPadding) > 0)  						m_rcText.Width += 8;  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,HeaderLabel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\HeaderLabel.cs,OnPaintBackground,The following statement contains a magic number: if (!PaintingHelper.CanPaintVisualStyle(element))  				ControlPaint.DrawButton(e.Graphics' rc' ButtonState.Normal);  			else  			{  				// Add 2 so the separator that's drawn at the right  				// side of normal list resultView header isn't visible.  				rc.Width += 2;    				if (m_showWindowBackgroudOnTopAndRightEdge)  				{  					// Shrink the rectangle so the top and left  					// edge window background don't get clobbered.  					rc.Height--;  					rc.Y++;  					rc.X++;  				}    				VisualStyleRenderer renderer = new VisualStyleRenderer(element);  				renderer.DrawBackground(e.Graphics' rc);    				if (m_showWindowBackgroudOnTopAndRightEdge)  				{  					// Draw a window background color line down the right edge.  					rc = ClientRectangle;  					e.Graphics.DrawLine(SystemPens.Window'  						new Point(rc.Width - 1' 0)' new Point(rc.Width - 1' rc.Bottom));  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,InformationBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\InformationBar.cs,InformationBar,The following statement contains a magic number: m_buttonWidth = 17;
Magic Number,SIL.FieldWorks.Common.Controls,InformationBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\InformationBar.cs,InformationBar,The following statement contains a magic number: DockPadding.All = 5;
Magic Number,SIL.FieldWorks.Common.Controls,InformationBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\InformationBar.cs,InitializeComponent,The following statement contains a magic number: this.InfoBarPanel.Location = new System.Drawing.Point(5' 5);
Magic Number,SIL.FieldWorks.Common.Controls,InformationBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\InformationBar.cs,InitializeComponent,The following statement contains a magic number: this.InfoBarPanel.Location = new System.Drawing.Point(5' 5);
Magic Number,SIL.FieldWorks.Common.Controls,InformationBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\InformationBar.cs,InitializeComponent,The following statement contains a magic number: this.InfoBarPanel.Size = new System.Drawing.Size(742' 22);
Magic Number,SIL.FieldWorks.Common.Controls,InformationBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\InformationBar.cs,InitializeComponent,The following statement contains a magic number: this.InfoBarPanel.Size = new System.Drawing.Size(742' 22);
Magic Number,SIL.FieldWorks.Common.Controls,InformationBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\InformationBar.cs,InitializeComponent,The following statement contains a magic number: this.InfoBarLabel.Size = new System.Drawing.Size(632' 22);
Magic Number,SIL.FieldWorks.Common.Controls,InformationBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\InformationBar.cs,InitializeComponent,The following statement contains a magic number: this.InfoBarLabel.Size = new System.Drawing.Size(632' 22);
Magic Number,SIL.FieldWorks.Common.Controls,InformationBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\InformationBar.cs,InitializeComponent,The following statement contains a magic number: this.DockPadding.All = 5;
Magic Number,SIL.FieldWorks.Common.Controls,InformationBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\InformationBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(752' 32);
Magic Number,SIL.FieldWorks.Common.Controls,InformationBar,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\InformationBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(752' 32);
Magic Number,SIL.FieldWorks.Common.Controls,LineControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\LineControl.cs,PaintForeground,The following statement contains a magic number: if (m_gradientMode == LinearGradientMode.Vertical)  			{  				using (Pen linePen = new Pen(Brush' Width))  				{  					e.Graphics.DrawLine(linePen' new Point(Width / 2' 0)'  						new Point(Width / 2' Height));  				}  			}  			else  			{  				using (Pen linePen = new Pen(Brush' Height))  				{  					e.Graphics.DrawLine(linePen' new Point(0' Height / 2)'  						new Point(Width' Height / 2));  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,LineControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\LineControl.cs,PaintForeground,The following statement contains a magic number: if (m_gradientMode == LinearGradientMode.Vertical)  			{  				using (Pen linePen = new Pen(Brush' Width))  				{  					e.Graphics.DrawLine(linePen' new Point(Width / 2' 0)'  						new Point(Width / 2' Height));  				}  			}  			else  			{  				using (Pen linePen = new Pen(Brush' Height))  				{  					e.Graphics.DrawLine(linePen' new Point(0' Height / 2)'  						new Point(Width' Height / 2));  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,LineControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\LineControl.cs,PaintForeground,The following statement contains a magic number: if (m_gradientMode == LinearGradientMode.Vertical)  			{  				using (Pen linePen = new Pen(Brush' Width))  				{  					e.Graphics.DrawLine(linePen' new Point(Width / 2' 0)'  						new Point(Width / 2' Height));  				}  			}  			else  			{  				using (Pen linePen = new Pen(Brush' Height))  				{  					e.Graphics.DrawLine(linePen' new Point(0' Height / 2)'  						new Point(Width' Height / 2));  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,LineControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\LineControl.cs,PaintForeground,The following statement contains a magic number: if (m_gradientMode == LinearGradientMode.Vertical)  			{  				using (Pen linePen = new Pen(Brush' Width))  				{  					e.Graphics.DrawLine(linePen' new Point(Width / 2' 0)'  						new Point(Width / 2' Height));  				}  			}  			else  			{  				using (Pen linePen = new Pen(Brush' Height))  				{  					e.Graphics.DrawLine(linePen' new Point(0' Height / 2)'  						new Point(Width' Height / 2));  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,LineControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\LineControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(320' 1);
Magic Number,SIL.FieldWorks.Common.Controls,OptionListBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\OptionListBox.cs,OnMeasureItem,The following statement contains a magic number: e.ItemHeight += 4;
Magic Number,SIL.FieldWorks.Common.Controls,OptionListBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\OptionListBox.cs,OnDrawItem,The following statement contains a magic number: if (Items.Count > 0 && e.Index >= 0)  			{  				// Fill the background  				Rectangle rc = e.Bounds;  				rc.X = 17;  				rc.Width = (int)e.Graphics.MeasureString(Items[e.Index].ToString()'  					SystemInformation.MenuFont).Width + 2;  				e.Graphics.FillRectangle((selected ?  					SystemBrushes.Highlight : SystemBrushes.Window)' rc);    				if (selected)  				{  					ControlPaint.DrawFocusRectangle(e.Graphics' rc'  						SystemColors.HighlightText' SystemColors.Highlight);  				}    				// Draw the radio button.  				rc = new Rectangle(2' e.Bounds.Top' 12' 12);  				rc.Y += ((e.Bounds.Height / 2) - 6);  				e.Graphics.DrawImage((selected ? m_imgSelected : m_imgUnselected)' rc);    				// Draw the text.  				StringFormat sf = (StringFormat)StringFormat.GenericTypographic.Clone();  				sf.LineAlignment = StringAlignment.Center;  				sf.Alignment = StringAlignment.Near;    				if (RightToLeft == RightToLeft.Yes)  					sf.FormatFlags = StringFormatFlags.DirectionRightToLeft;    				rc = e.Bounds;  				rc.X += 20;  				rc.Width -= 20;  				e.Graphics.DrawString(Items[e.Index].ToString()' SystemInformation.MenuFont'  					(selected ? SystemBrushes.HighlightText : SystemBrushes.WindowText)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,OptionListBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\OptionListBox.cs,OnDrawItem,The following statement contains a magic number: if (Items.Count > 0 && e.Index >= 0)  			{  				// Fill the background  				Rectangle rc = e.Bounds;  				rc.X = 17;  				rc.Width = (int)e.Graphics.MeasureString(Items[e.Index].ToString()'  					SystemInformation.MenuFont).Width + 2;  				e.Graphics.FillRectangle((selected ?  					SystemBrushes.Highlight : SystemBrushes.Window)' rc);    				if (selected)  				{  					ControlPaint.DrawFocusRectangle(e.Graphics' rc'  						SystemColors.HighlightText' SystemColors.Highlight);  				}    				// Draw the radio button.  				rc = new Rectangle(2' e.Bounds.Top' 12' 12);  				rc.Y += ((e.Bounds.Height / 2) - 6);  				e.Graphics.DrawImage((selected ? m_imgSelected : m_imgUnselected)' rc);    				// Draw the text.  				StringFormat sf = (StringFormat)StringFormat.GenericTypographic.Clone();  				sf.LineAlignment = StringAlignment.Center;  				sf.Alignment = StringAlignment.Near;    				if (RightToLeft == RightToLeft.Yes)  					sf.FormatFlags = StringFormatFlags.DirectionRightToLeft;    				rc = e.Bounds;  				rc.X += 20;  				rc.Width -= 20;  				e.Graphics.DrawString(Items[e.Index].ToString()' SystemInformation.MenuFont'  					(selected ? SystemBrushes.HighlightText : SystemBrushes.WindowText)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,OptionListBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\OptionListBox.cs,OnDrawItem,The following statement contains a magic number: if (Items.Count > 0 && e.Index >= 0)  			{  				// Fill the background  				Rectangle rc = e.Bounds;  				rc.X = 17;  				rc.Width = (int)e.Graphics.MeasureString(Items[e.Index].ToString()'  					SystemInformation.MenuFont).Width + 2;  				e.Graphics.FillRectangle((selected ?  					SystemBrushes.Highlight : SystemBrushes.Window)' rc);    				if (selected)  				{  					ControlPaint.DrawFocusRectangle(e.Graphics' rc'  						SystemColors.HighlightText' SystemColors.Highlight);  				}    				// Draw the radio button.  				rc = new Rectangle(2' e.Bounds.Top' 12' 12);  				rc.Y += ((e.Bounds.Height / 2) - 6);  				e.Graphics.DrawImage((selected ? m_imgSelected : m_imgUnselected)' rc);    				// Draw the text.  				StringFormat sf = (StringFormat)StringFormat.GenericTypographic.Clone();  				sf.LineAlignment = StringAlignment.Center;  				sf.Alignment = StringAlignment.Near;    				if (RightToLeft == RightToLeft.Yes)  					sf.FormatFlags = StringFormatFlags.DirectionRightToLeft;    				rc = e.Bounds;  				rc.X += 20;  				rc.Width -= 20;  				e.Graphics.DrawString(Items[e.Index].ToString()' SystemInformation.MenuFont'  					(selected ? SystemBrushes.HighlightText : SystemBrushes.WindowText)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,OptionListBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\OptionListBox.cs,OnDrawItem,The following statement contains a magic number: if (Items.Count > 0 && e.Index >= 0)  			{  				// Fill the background  				Rectangle rc = e.Bounds;  				rc.X = 17;  				rc.Width = (int)e.Graphics.MeasureString(Items[e.Index].ToString()'  					SystemInformation.MenuFont).Width + 2;  				e.Graphics.FillRectangle((selected ?  					SystemBrushes.Highlight : SystemBrushes.Window)' rc);    				if (selected)  				{  					ControlPaint.DrawFocusRectangle(e.Graphics' rc'  						SystemColors.HighlightText' SystemColors.Highlight);  				}    				// Draw the radio button.  				rc = new Rectangle(2' e.Bounds.Top' 12' 12);  				rc.Y += ((e.Bounds.Height / 2) - 6);  				e.Graphics.DrawImage((selected ? m_imgSelected : m_imgUnselected)' rc);    				// Draw the text.  				StringFormat sf = (StringFormat)StringFormat.GenericTypographic.Clone();  				sf.LineAlignment = StringAlignment.Center;  				sf.Alignment = StringAlignment.Near;    				if (RightToLeft == RightToLeft.Yes)  					sf.FormatFlags = StringFormatFlags.DirectionRightToLeft;    				rc = e.Bounds;  				rc.X += 20;  				rc.Width -= 20;  				e.Graphics.DrawString(Items[e.Index].ToString()' SystemInformation.MenuFont'  					(selected ? SystemBrushes.HighlightText : SystemBrushes.WindowText)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,OptionListBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\OptionListBox.cs,OnDrawItem,The following statement contains a magic number: if (Items.Count > 0 && e.Index >= 0)  			{  				// Fill the background  				Rectangle rc = e.Bounds;  				rc.X = 17;  				rc.Width = (int)e.Graphics.MeasureString(Items[e.Index].ToString()'  					SystemInformation.MenuFont).Width + 2;  				e.Graphics.FillRectangle((selected ?  					SystemBrushes.Highlight : SystemBrushes.Window)' rc);    				if (selected)  				{  					ControlPaint.DrawFocusRectangle(e.Graphics' rc'  						SystemColors.HighlightText' SystemColors.Highlight);  				}    				// Draw the radio button.  				rc = new Rectangle(2' e.Bounds.Top' 12' 12);  				rc.Y += ((e.Bounds.Height / 2) - 6);  				e.Graphics.DrawImage((selected ? m_imgSelected : m_imgUnselected)' rc);    				// Draw the text.  				StringFormat sf = (StringFormat)StringFormat.GenericTypographic.Clone();  				sf.LineAlignment = StringAlignment.Center;  				sf.Alignment = StringAlignment.Near;    				if (RightToLeft == RightToLeft.Yes)  					sf.FormatFlags = StringFormatFlags.DirectionRightToLeft;    				rc = e.Bounds;  				rc.X += 20;  				rc.Width -= 20;  				e.Graphics.DrawString(Items[e.Index].ToString()' SystemInformation.MenuFont'  					(selected ? SystemBrushes.HighlightText : SystemBrushes.WindowText)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,OptionListBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\OptionListBox.cs,OnDrawItem,The following statement contains a magic number: if (Items.Count > 0 && e.Index >= 0)  			{  				// Fill the background  				Rectangle rc = e.Bounds;  				rc.X = 17;  				rc.Width = (int)e.Graphics.MeasureString(Items[e.Index].ToString()'  					SystemInformation.MenuFont).Width + 2;  				e.Graphics.FillRectangle((selected ?  					SystemBrushes.Highlight : SystemBrushes.Window)' rc);    				if (selected)  				{  					ControlPaint.DrawFocusRectangle(e.Graphics' rc'  						SystemColors.HighlightText' SystemColors.Highlight);  				}    				// Draw the radio button.  				rc = new Rectangle(2' e.Bounds.Top' 12' 12);  				rc.Y += ((e.Bounds.Height / 2) - 6);  				e.Graphics.DrawImage((selected ? m_imgSelected : m_imgUnselected)' rc);    				// Draw the text.  				StringFormat sf = (StringFormat)StringFormat.GenericTypographic.Clone();  				sf.LineAlignment = StringAlignment.Center;  				sf.Alignment = StringAlignment.Near;    				if (RightToLeft == RightToLeft.Yes)  					sf.FormatFlags = StringFormatFlags.DirectionRightToLeft;    				rc = e.Bounds;  				rc.X += 20;  				rc.Width -= 20;  				e.Graphics.DrawString(Items[e.Index].ToString()' SystemInformation.MenuFont'  					(selected ? SystemBrushes.HighlightText : SystemBrushes.WindowText)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,OptionListBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\OptionListBox.cs,OnDrawItem,The following statement contains a magic number: if (Items.Count > 0 && e.Index >= 0)  			{  				// Fill the background  				Rectangle rc = e.Bounds;  				rc.X = 17;  				rc.Width = (int)e.Graphics.MeasureString(Items[e.Index].ToString()'  					SystemInformation.MenuFont).Width + 2;  				e.Graphics.FillRectangle((selected ?  					SystemBrushes.Highlight : SystemBrushes.Window)' rc);    				if (selected)  				{  					ControlPaint.DrawFocusRectangle(e.Graphics' rc'  						SystemColors.HighlightText' SystemColors.Highlight);  				}    				// Draw the radio button.  				rc = new Rectangle(2' e.Bounds.Top' 12' 12);  				rc.Y += ((e.Bounds.Height / 2) - 6);  				e.Graphics.DrawImage((selected ? m_imgSelected : m_imgUnselected)' rc);    				// Draw the text.  				StringFormat sf = (StringFormat)StringFormat.GenericTypographic.Clone();  				sf.LineAlignment = StringAlignment.Center;  				sf.Alignment = StringAlignment.Near;    				if (RightToLeft == RightToLeft.Yes)  					sf.FormatFlags = StringFormatFlags.DirectionRightToLeft;    				rc = e.Bounds;  				rc.X += 20;  				rc.Width -= 20;  				e.Graphics.DrawString(Items[e.Index].ToString()' SystemInformation.MenuFont'  					(selected ? SystemBrushes.HighlightText : SystemBrushes.WindowText)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,OptionListBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\OptionListBox.cs,OnDrawItem,The following statement contains a magic number: if (Items.Count > 0 && e.Index >= 0)  			{  				// Fill the background  				Rectangle rc = e.Bounds;  				rc.X = 17;  				rc.Width = (int)e.Graphics.MeasureString(Items[e.Index].ToString()'  					SystemInformation.MenuFont).Width + 2;  				e.Graphics.FillRectangle((selected ?  					SystemBrushes.Highlight : SystemBrushes.Window)' rc);    				if (selected)  				{  					ControlPaint.DrawFocusRectangle(e.Graphics' rc'  						SystemColors.HighlightText' SystemColors.Highlight);  				}    				// Draw the radio button.  				rc = new Rectangle(2' e.Bounds.Top' 12' 12);  				rc.Y += ((e.Bounds.Height / 2) - 6);  				e.Graphics.DrawImage((selected ? m_imgSelected : m_imgUnselected)' rc);    				// Draw the text.  				StringFormat sf = (StringFormat)StringFormat.GenericTypographic.Clone();  				sf.LineAlignment = StringAlignment.Center;  				sf.Alignment = StringAlignment.Near;    				if (RightToLeft == RightToLeft.Yes)  					sf.FormatFlags = StringFormatFlags.DirectionRightToLeft;    				rc = e.Bounds;  				rc.X += 20;  				rc.Width -= 20;  				e.Graphics.DrawString(Items[e.Index].ToString()' SystemInformation.MenuFont'  					(selected ? SystemBrushes.HighlightText : SystemBrushes.WindowText)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,OptionListBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\OptionListBox.cs,OnDrawItem,The following statement contains a magic number: if (Items.Count > 0 && e.Index >= 0)  			{  				// Fill the background  				Rectangle rc = e.Bounds;  				rc.X = 17;  				rc.Width = (int)e.Graphics.MeasureString(Items[e.Index].ToString()'  					SystemInformation.MenuFont).Width + 2;  				e.Graphics.FillRectangle((selected ?  					SystemBrushes.Highlight : SystemBrushes.Window)' rc);    				if (selected)  				{  					ControlPaint.DrawFocusRectangle(e.Graphics' rc'  						SystemColors.HighlightText' SystemColors.Highlight);  				}    				// Draw the radio button.  				rc = new Rectangle(2' e.Bounds.Top' 12' 12);  				rc.Y += ((e.Bounds.Height / 2) - 6);  				e.Graphics.DrawImage((selected ? m_imgSelected : m_imgUnselected)' rc);    				// Draw the text.  				StringFormat sf = (StringFormat)StringFormat.GenericTypographic.Clone();  				sf.LineAlignment = StringAlignment.Center;  				sf.Alignment = StringAlignment.Near;    				if (RightToLeft == RightToLeft.Yes)  					sf.FormatFlags = StringFormatFlags.DirectionRightToLeft;    				rc = e.Bounds;  				rc.X += 20;  				rc.Width -= 20;  				e.Graphics.DrawString(Items[e.Index].ToString()' SystemInformation.MenuFont'  					(selected ? SystemBrushes.HighlightText : SystemBrushes.WindowText)' rc' sf);  			}
Magic Number,SIL.FieldWorks.Common.Controls,PredictiveProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\PredictiveProgressState.cs,ReadIncrements,The following statement contains a magic number: if( Double.TryParse(s' System.Globalization.NumberStyles.Float' System.Globalization.NumberFormatInfo.InvariantInfo' out dblResult) == true )  				m_expectedTotalMilliSeconds  = (int)dblResult;  			else  				m_expectedTotalMilliSeconds = 2;
Magic Number,SIL.FieldWorks.Common.Controls,PredictiveProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\PredictiveProgressState.cs,Dispose,The following statement contains a magic number: if (disposing)  			{  				SaveStepInfo();  				if(m_acumulatedFractionOfTotal < 1)  				{  					m_acumulatedFractionOfTotal = 1;  					m_progressBar.Refresh();  					System.Threading.Thread.Sleep(50);  				}  				StoreIncrements();  			}
Magic Number,SIL.FieldWorks.Common.Controls,ProgressDialogWorkingOn,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressDialogWorkingOn.cs,InitializeComponent,The following statement contains a magic number: this.m_ProgressBar.Maximum = 18;
Magic Number,SIL.FieldWorks.Common.Controls,MilestoneProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressState.cs,Dispose,The following statement contains a magic number: if (disposing)  			{  				if (m_accumulatedFractionOfTotal < 1)  				{  					m_accumulatedFractionOfTotal = 1;  					m_progressBar.Refresh();  					System.Threading.Thread.Sleep(50);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,MilestoneProgressState,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressState.cs,Breath,The following statement contains a magic number: if(m_accumulatedFractionOfTotal < (m_accumulatedFractionOfTotal+m_currentStepExpectedFractionOfTotal ))  			{  				//just add 1 percent since we have no idea how many times Breathe()  				//will be called during this milestone  				m_accumulatedFractionOfTotal += 0.01; //TODO: this might be good to be based on how long it has been since we last breathed.    				//Review: this will currently allow us to go past what had been allocated for this milestone  			}
Magic Number,SIL.FieldWorks.Common.Controls,ProgressBarWrapper,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressState.cs,ProgressBarWrapper,The following statement contains a magic number: m_progressBar.Maximum = 100;
Magic Number,SIL.FieldWorks.Common.Controls,ProgressBarWrapper,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressState.cs,Refresh,The following statement contains a magic number: int percentDone = 100;
Magic Number,SIL.FieldWorks.Common.Controls,ProgressBarWrapper,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressState.cs,Refresh,The following statement contains a magic number: m_progressBar.Value = Math.Min(percentDone' 100);
Magic Number,SIL.FieldWorks.Common.Controls,ProgressDialogImpl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressDialogImpl.cs,ProgressDialogImpl,The following statement contains a magic number: if (owner == null)  				StartPosition = FormStartPosition.CenterScreen;  			else  			{  				//StartPosition = FormStartPosition.CenterParent;  				// Sadly' just doing CenterParent won't work in this case :-(  				Left = owner.Left + (owner.Width - Width) / 2;  				Top = owner.Top + (owner.Height - Height) / 2;  				Screen primaryScreen = Screen.FromControl(owner);  				Left = Math.Max(Left' primaryScreen.WorkingArea.Left);  				Top = Math.Max(Top' primaryScreen.WorkingArea.Top);  				if (Right > primaryScreen.WorkingArea.Right)  					Left -= (Right - primaryScreen.WorkingArea.Right);  				if (Bottom > primaryScreen.WorkingArea.Bottom)  					Top -= (Bottom - primaryScreen.WorkingArea.Bottom);  			}
Magic Number,SIL.FieldWorks.Common.Controls,ProgressDialogImpl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressDialogImpl.cs,ProgressDialogImpl,The following statement contains a magic number: if (owner == null)  				StartPosition = FormStartPosition.CenterScreen;  			else  			{  				//StartPosition = FormStartPosition.CenterParent;  				// Sadly' just doing CenterParent won't work in this case :-(  				Left = owner.Left + (owner.Width - Width) / 2;  				Top = owner.Top + (owner.Height - Height) / 2;  				Screen primaryScreen = Screen.FromControl(owner);  				Left = Math.Max(Left' primaryScreen.WorkingArea.Left);  				Top = Math.Max(Top' primaryScreen.WorkingArea.Top);  				if (Right > primaryScreen.WorkingArea.Right)  					Left -= (Right - primaryScreen.WorkingArea.Right);  				if (Bottom > primaryScreen.WorkingArea.Bottom)  					Top -= (Bottom - primaryScreen.WorkingArea.Bottom);  			}
Magic Number,SIL.FieldWorks.Common.Controls,StatusBarProgressPanel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\StatusBarProgressPanel.cs,Init,The following statement contains a magic number: _stepSize = 10;
Magic Number,SIL.FieldWorks.Common.Controls,StatusBarProgressPanel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\StatusBarProgressPanel.cs,Init,The following statement contains a magic number: _endPoint = 100;
Magic Number,SIL.FieldWorks.Common.Controls,StatusBarProgressPanel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\StatusBarProgressPanel.cs,Init,The following statement contains a magic number: _textFont = new Font(MiscUtils.StandardSansSerif' 8);
Magic Number,SIL.FieldWorks.Common.Controls,StatusBarProgressPanel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\StatusBarProgressPanel.cs,Init,The following statement contains a magic number: _animationTick = TimeSpan.FromSeconds(0.5);
Magic Number,SIL.FieldWorks.Common.Controls,StatusBarProgressPanel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\StatusBarProgressPanel.cs,Init,The following statement contains a magic number: this.EndPoint = ((long)(100));
Magic Number,SIL.FieldWorks.Common.Controls,StatusBarProgressPanel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\StatusBarProgressPanel.cs,Init,The following statement contains a magic number: this.StepSize = ((long)(10));
Magic Number,SIL.FieldWorks.Common.Controls,StatusBarProgressPanel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\StatusBarProgressPanel.cs,Init,The following statement contains a magic number: const int TIMER_INTERVAL = 1000;
Magic Number,SIL.FieldWorks.Common.Controls,StatusBarProgressPanel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\StatusBarProgressPanel.cs,DrawPanel,The following statement contains a magic number: using (Graphics graphics = this.Parent.CreateGraphics())  			{  				Rectangle eventBounds = m_bounds;    				if (offScreenBmp == null)  				{  					offScreenBmp = new Bitmap(eventBounds.Width'  						eventBounds.Height);  					offScreenDC = Graphics.FromImage(offScreenBmp);  				}    				Rectangle fullBounds = eventBounds;  				fullBounds.X = 0;  				fullBounds.Y = 0;  				offScreenDC.FillRectangle(SystemBrushes.Control' fullBounds);    				//allow it to 'catch up' smoothly  				int pos = ProgressPosition;    				//			if(m_drawPosition > pos)  				m_drawPosition = pos;    				//			if(m_drawPosition < pos)  				//				++m_drawPosition;    				if (m_drawPosition != _startPoint)  				{  					if ((m_drawPosition <= _endPoint) ||  						(this.AnimationStyle == ProgressDisplayStyle.Infinite))  					{  						Rectangle bounds = eventBounds;  						float percent = ((float) m_drawPosition/  										 ((float) _endPoint - (float) _startPoint));    						switch (this.AnimationStyle)  						{    							case ProgressDisplayStyle.LeftToRight:  								{  									bounds.Width = (int) (percent*(float) eventBounds.Width);  									break;  								}  							case ProgressDisplayStyle.RightToLeft:  								{  									bounds.Width = (int) (percent*(float) eventBounds.Width);  									bounds.X += eventBounds.Width - bounds.Width;  									break;  								}  							case ProgressDisplayStyle.BottomToTop:  								{  									bounds.Height = (int) (percent*(float) eventBounds.Height);  									bounds.Y += eventBounds.Height - bounds.Height;  									break;  								}  							case ProgressDisplayStyle.TopToBottom:  								{  									bounds.Height = (int) (percent*(float) eventBounds.Height);  									break;  								}  							case ProgressDisplayStyle.Infinite:  								{  									bounds.Height = (int) (percent*(float) eventBounds.Height);  									bounds.Y += (eventBounds.Height - bounds.Height)/2;  									bounds.Width = (int) (percent*(float) eventBounds.Width);  									bounds.X += (eventBounds.Width - bounds.Width)/2;  									break;  								}  						}    						// draw the progress bar  						bounds.X = 0;  						bounds.Y = 0;  						offScreenDC.FillRectangle(_progressBrush' bounds);  						if (this.ShowText)  						{  							// draw the text on top of the progress bar  							//						offScreenDC.DrawString((percent * 100).ToString()'  							offScreenDC.DrawString(m_stateProvider.Status'  								_textFont' _textBrush' new PointF(0.0F' 0.0F));  						}  					}  				}    				graphics.DrawImage(offScreenBmp' eventBounds.X' eventBounds.Y);  			}
Magic Number,SIL.FieldWorks.Common.Controls,StatusBarProgressPanel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\StatusBarProgressPanel.cs,DrawPanel,The following statement contains a magic number: using (Graphics graphics = this.Parent.CreateGraphics())  			{  				Rectangle eventBounds = m_bounds;    				if (offScreenBmp == null)  				{  					offScreenBmp = new Bitmap(eventBounds.Width'  						eventBounds.Height);  					offScreenDC = Graphics.FromImage(offScreenBmp);  				}    				Rectangle fullBounds = eventBounds;  				fullBounds.X = 0;  				fullBounds.Y = 0;  				offScreenDC.FillRectangle(SystemBrushes.Control' fullBounds);    				//allow it to 'catch up' smoothly  				int pos = ProgressPosition;    				//			if(m_drawPosition > pos)  				m_drawPosition = pos;    				//			if(m_drawPosition < pos)  				//				++m_drawPosition;    				if (m_drawPosition != _startPoint)  				{  					if ((m_drawPosition <= _endPoint) ||  						(this.AnimationStyle == ProgressDisplayStyle.Infinite))  					{  						Rectangle bounds = eventBounds;  						float percent = ((float) m_drawPosition/  										 ((float) _endPoint - (float) _startPoint));    						switch (this.AnimationStyle)  						{    							case ProgressDisplayStyle.LeftToRight:  								{  									bounds.Width = (int) (percent*(float) eventBounds.Width);  									break;  								}  							case ProgressDisplayStyle.RightToLeft:  								{  									bounds.Width = (int) (percent*(float) eventBounds.Width);  									bounds.X += eventBounds.Width - bounds.Width;  									break;  								}  							case ProgressDisplayStyle.BottomToTop:  								{  									bounds.Height = (int) (percent*(float) eventBounds.Height);  									bounds.Y += eventBounds.Height - bounds.Height;  									break;  								}  							case ProgressDisplayStyle.TopToBottom:  								{  									bounds.Height = (int) (percent*(float) eventBounds.Height);  									break;  								}  							case ProgressDisplayStyle.Infinite:  								{  									bounds.Height = (int) (percent*(float) eventBounds.Height);  									bounds.Y += (eventBounds.Height - bounds.Height)/2;  									bounds.Width = (int) (percent*(float) eventBounds.Width);  									bounds.X += (eventBounds.Width - bounds.Width)/2;  									break;  								}  						}    						// draw the progress bar  						bounds.X = 0;  						bounds.Y = 0;  						offScreenDC.FillRectangle(_progressBrush' bounds);  						if (this.ShowText)  						{  							// draw the text on top of the progress bar  							//						offScreenDC.DrawString((percent * 100).ToString()'  							offScreenDC.DrawString(m_stateProvider.Status'  								_textFont' _textBrush' new PointF(0.0F' 0.0F));  						}  					}  				}    				graphics.DrawImage(offScreenBmp' eventBounds.X' eventBounds.Y);  			}
Magic Number,SIL.FieldWorks.Common.Controls,StatusBarTextBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\StatusBarTextBox.cs,HandleDrawItem,The following statement contains a magic number: using (StringFormat sf = new StringFormat())  			{  				sf.Alignment = StringAlignment.Center;  				Rectangle centered = rect;  				centered.Offset(0' (int)(rect.Height - sbdevent.Graphics.MeasureString(m_text' sbdevent.Font).Height) / 2);  				using (SolidBrush brush = new SolidBrush(sbdevent.ForeColor))  				{  					sbdevent.Graphics.DrawString(m_text' sbdevent.Font' brush' centered' sf);  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,ProgressDialogWithTask,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressDialogWithTask.cs,ImportTranslatedListsForWs,The following statement contains a magic number: using (var dlg = new ProgressDialogWithTask(parentWindow))  			{  				dlg.AllowCancel = true;  				dlg.Maximum = 200;  				dlg.Message = Path.GetFileName(path);  				dlg.Title = XmlTranslatedLists.ProgressDialogCaption;  				dlg.RunTask(true' ImportTranslatedListsForWs' ws' cache);  			}
Magic Number,SIL.FieldWorks.Common.Controls,ProgressDialogWithTaskDlgImpl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ProgressDialogWithTask.cs,ProgressDialogWithTaskDlgImpl,The following statement contains a magic number: _timer.Interval = 50;
Magic Number,SIL.FieldWorks.Common.Controls,TriStateTreeView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\TriStateTreeView.cs,TriStateTreeView,The following statement contains a magic number: if (Application.RenderWithVisualStyles)  			{  				using (Bitmap bmp = new Bitmap(m_TriStateImages.ImageSize.Width'  					m_TriStateImages.ImageSize.Height))  				{  					Rectangle rc = new Rectangle(0' 0' bmp.Width' bmp.Height);  					using (Graphics graphics = Graphics.FromImage(bmp))  					{  						VisualStyleRenderer renderer =  							new VisualStyleRenderer(VisualStyleElement.Button.CheckBox.CheckedDisabled);  						renderer.DrawBackground(graphics' rc' rc);  						m_TriStateImages.Images[0] = bmp;    						renderer.SetParameters(VisualStyleElement.Button.CheckBox.UncheckedNormal);  						renderer.DrawBackground(graphics' rc' rc);  						m_TriStateImages.Images[1] = bmp;    						renderer.SetParameters(VisualStyleElement.Button.CheckBox.CheckedNormal);  						renderer.DrawBackground(graphics' rc' rc);  						m_TriStateImages.Images[2] = bmp;  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,TriStateTreeView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\TriStateTreeView.cs,InitializeComponent,The following statement contains a magic number: this.m_TriStateImages.Images.SetKeyName(2' "");
Magic Number,SIL.FieldWorks.Common.Controls,WizardDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\WizardDialog.cs,OnPaint,The following statement contains a magic number: LineDrawing.DrawDialogControlSeparator(e.Graphics' ClientRectangle'  				lblSteps.Bottom + (m_btnHelp.Top - lblSteps.Bottom) / 2);
Magic Number,SIL.FieldWorks.Common.Controls,WizardDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\WizardDialog.cs,PanStepsPaint,The following statement contains a magic number: Rectangle rcText =  				new Rectangle(kdxpStepListSpacing + kdxpStepSquareWidth + 3'  				kdypStepListSpacing'  				steps.PanSteps.Width - (kdxpStepListSpacing + kdxpStepSquareWidth + 3)'  				dyStepHeight);
Magic Number,SIL.FieldWorks.Common.Controls,WizardDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\WizardDialog.cs,PanStepsPaint,The following statement contains a magic number: Rectangle rcText =  				new Rectangle(kdxpStepListSpacing + kdxpStepSquareWidth + 3'  				kdypStepListSpacing'  				steps.PanSteps.Width - (kdxpStepListSpacing + kdxpStepSquareWidth + 3)'  				dyStepHeight);
Magic Number,SIL.FieldWorks.Common.Controls,WizardDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\WizardDialog.cs,PanStepsPaint,The following statement contains a magic number: int dySquarePadding = (dyStepHeight > kdypStepSquareHeight) ?  				(dyStepHeight - kdypStepSquareHeight) / 2 : 0;
Magic Number,SIL.FieldWorks.Common.Controls,WizardDialog,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\WizardDialog.cs,PanStepsPaint,The following statement contains a magic number: using (var sf = new StringFormat(StringFormat.GenericTypographic))  			{  				sf.Alignment = StringAlignment.Near;  				sf.LineAlignment = StringAlignment.Center;  				sf.Trimming = StringTrimming.EllipsisCharacter;    				// Calculate the horizontal position for the vertical connecting  				// line. (Subtracting 1 puts it just off center because the line  				// will be 2 pixels thick.)  				int xpConnectingLine = rcSquare.X + (kdxpStepSquareWidth / 2) - 1;    				// Create brushes for the colored squares and the step text.  				using (SolidBrush brSquare = new SolidBrush(kclrPendingStep)'  					brText = new SolidBrush(steps.TextColor))  				{  					for (int i = 0; i <= steps.LastStepNumber; i++)  					{  						e.Graphics.DrawString(steps.StepNames[i]' steps.StepsFont' brText' rcText' sf);  						rcText.Y += dyStepHeight + kdypStepListSpacing;    						// Determine what color the square should be.  						if (i == steps.LastStepNumber)  							brSquare.Color = kclrLastStep;  						else if (i == steps.CurrentStepNumber)  							brSquare.Color = kclrCurrentStep;  						else if (i < steps.CurrentStepNumber)  							brSquare.Color = kclrCompletedStep;  						else  							brSquare.Color = kclrPendingStep;    						// Draw the square next to the step text label.  						e.Graphics.FillRectangle(brSquare' rcSquare);  						rcSquare.Y += (dyStepHeight + kdypStepListSpacing);    						// Draw the vertical line connecting each step's square.  						if (i < steps.LastStepNumber)  						{  							using (var line = new LineDrawing(e.Graphics))  							{  								line.LineType = LineTypes.Solid;    								line.Draw(xpConnectingLine'  									rcSquare.Y - kdypStepListSpacing'  									xpConnectingLine' rcSquare.Y' kclrCompletedStep);    								line.Draw(xpConnectingLine + 1'  									rcSquare.Y - kdypStepListSpacing'  									xpConnectingLine + 1' rcSquare.Y' kclrPendingStep);  							}  						}  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Controls,WSChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\WSChooser.cs,InitializeComponent,The following statement contains a magic number: this.menuItem6.Index = 2;
Magic Number,SIL.FieldWorks.Common.Controls,WSChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\WSChooser.cs,button1_Paint,The following statement contains a magic number: using (Pen p = new Pen(this.BackColor' 2))  			{  				e.Graphics.DrawRectangle(p' this.button1.Left' this.button1.Top' this.button1.Width' this.button1.Height);  			}
Magic Number,SIL.FieldWorks.Common.Controls,XButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\XButton.cs,XButton,The following statement contains a magic number: Font = new Font("Marlett"' 9' GraphicsUnit.Point);
Magic Number,SIL.FieldWorks.Common.Controls,XButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\XButton.cs,XButton,The following statement contains a magic number: Size = new Size(16' 16);
Magic Number,SIL.FieldWorks.Common.Controls,XButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\XButton.cs,XButton,The following statement contains a magic number: Size = new Size(16' 16);
Magic Number,SIL.FieldWorks.Common.Controls,XButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\XButton.cs,DrawWithImage,The following statement contains a magic number: if (img != null)  			{  				int x = (Width - img.Width) / 2;  				int y = (Height - img.Height) / 2;  				Rectangle rc = new Rectangle(x' y' img.Width' img.Height);  				e.Graphics.DrawImageUnscaledAndClipped(img' rc);  			}
Magic Number,SIL.FieldWorks.Common.Controls,XButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\XButton.cs,DrawWithImage,The following statement contains a magic number: if (img != null)  			{  				int x = (Width - img.Width) / 2;  				int y = (Height - img.Height) / 2;  				Rectangle rc = new Rectangle(x' y' img.Width' img.Height);  				e.Graphics.DrawImageUnscaledAndClipped(img' rc);  			}
Magic Number,SIL.FieldWorks.Common.Controls,XButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\XButton.cs,DrawArrow,The following statement contains a magic number: if (Font.SizeInPoints != 12)  				Font = new Font(Font.FontFamily' 12' GraphicsUnit.Point);
Magic Number,SIL.FieldWorks.Common.Controls,XButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\XButton.cs,DrawArrow,The following statement contains a magic number: if (Font.SizeInPoints != 12)  				Font = new Font(Font.FontFamily' 12' GraphicsUnit.Point);
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(178' 122);
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(178' 122);
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,OnMove,The following statement contains a magic number: if (pc.Y < -21 || pc.Y > 0) return;
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,GetDockingArea,The following statement contains a magic number: int borderwidth = (r.Width - rc.Width) / 2;
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx > 0 && rx < ry && rx < 0.25 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Left) != 0)  			{  				if (m_dockState.OrgWidth <= 0)  					r.Width = r.Width / 2;  				else  				{  					r.Width = m_dockState.OrgWidth;  					if (r.Width > Width / 2)  						r.Width = Width / 2;  				}    				if (r.Width > this.Width)  					r.Width = this.Width;    				m_dockExtender.Overlay.Dock = DockStyle.Left; // dock to left  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx > 0 && rx < ry && rx < 0.25 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Left) != 0)  			{  				if (m_dockState.OrgWidth <= 0)  					r.Width = r.Width / 2;  				else  				{  					r.Width = m_dockState.OrgWidth;  					if (r.Width > Width / 2)  						r.Width = Width / 2;  				}    				if (r.Width > this.Width)  					r.Width = this.Width;    				m_dockExtender.Overlay.Dock = DockStyle.Left; // dock to left  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx > 0 && rx < ry && rx < 0.25 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Left) != 0)  			{  				if (m_dockState.OrgWidth <= 0)  					r.Width = r.Width / 2;  				else  				{  					r.Width = m_dockState.OrgWidth;  					if (r.Width > Width / 2)  						r.Width = Width / 2;  				}    				if (r.Width > this.Width)  					r.Width = this.Width;    				m_dockExtender.Overlay.Dock = DockStyle.Left; // dock to left  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx > 0 && rx < ry && rx < 0.25 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Left) != 0)  			{  				if (m_dockState.OrgWidth <= 0)  					r.Width = r.Width / 2;  				else  				{  					r.Width = m_dockState.OrgWidth;  					if (r.Width > Width / 2)  						r.Width = Width / 2;  				}    				if (r.Width > this.Width)  					r.Width = this.Width;    				m_dockExtender.Overlay.Dock = DockStyle.Left; // dock to left  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx > 0 && rx < ry && rx < 0.25 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Left) != 0)  			{  				if (m_dockState.OrgWidth <= 0)  					r.Width = r.Width / 2;  				else  				{  					r.Width = m_dockState.OrgWidth;  					if (r.Width > Width / 2)  						r.Width = Width / 2;  				}    				if (r.Width > this.Width)  					r.Width = this.Width;    				m_dockExtender.Overlay.Dock = DockStyle.Left; // dock to left  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx > 0 && rx < ry && rx < 0.25 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Left) != 0)  			{  				if (m_dockState.OrgWidth <= 0)  					r.Width = r.Width / 2;  				else  				{  					r.Width = m_dockState.OrgWidth;  					if (r.Width > Width / 2)  						r.Width = Width / 2;  				}    				if (r.Width > this.Width)  					r.Width = this.Width;    				m_dockExtender.Overlay.Dock = DockStyle.Left; // dock to left  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx < 1 && rx > ry && rx > 0.75 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Right) != 0)  			{  				if (m_dockState.OrgWidth <= 0)  					r.Width = r.Width / 2;  				else  				{  					r.Width = m_dockState.OrgWidth;  					if (r.Width > Width / 2)  						r.Width = Width / 2;  				}    				if (r.Width > this.Width)  					r.Width = this.Width;    				r.X = rc.X + rc.Width - r.Width;  				m_dockExtender.Overlay.Dock = DockStyle.Right;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx < 1 && rx > ry && rx > 0.75 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Right) != 0)  			{  				if (m_dockState.OrgWidth <= 0)  					r.Width = r.Width / 2;  				else  				{  					r.Width = m_dockState.OrgWidth;  					if (r.Width > Width / 2)  						r.Width = Width / 2;  				}    				if (r.Width > this.Width)  					r.Width = this.Width;    				r.X = rc.X + rc.Width - r.Width;  				m_dockExtender.Overlay.Dock = DockStyle.Right;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx < 1 && rx > ry && rx > 0.75 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Right) != 0)  			{  				if (m_dockState.OrgWidth <= 0)  					r.Width = r.Width / 2;  				else  				{  					r.Width = m_dockState.OrgWidth;  					if (r.Width > Width / 2)  						r.Width = Width / 2;  				}    				if (r.Width > this.Width)  					r.Width = this.Width;    				r.X = rc.X + rc.Width - r.Width;  				m_dockExtender.Overlay.Dock = DockStyle.Right;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx < 1 && rx > ry && rx > 0.75 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Right) != 0)  			{  				if (m_dockState.OrgWidth <= 0)  					r.Width = r.Width / 2;  				else  				{  					r.Width = m_dockState.OrgWidth;  					if (r.Width > Width / 2)  						r.Width = Width / 2;  				}    				if (r.Width > this.Width)  					r.Width = this.Width;    				r.X = rc.X + rc.Width - r.Width;  				m_dockExtender.Overlay.Dock = DockStyle.Right;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx < 1 && rx > ry && rx > 0.75 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Right) != 0)  			{  				if (m_dockState.OrgWidth <= 0)  					r.Width = r.Width / 2;  				else  				{  					r.Width = m_dockState.OrgWidth;  					if (r.Width > Width / 2)  						r.Width = Width / 2;  				}    				if (r.Width > this.Width)  					r.Width = this.Width;    				r.X = rc.X + rc.Width - r.Width;  				m_dockExtender.Overlay.Dock = DockStyle.Right;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx < 1 && rx > ry && rx > 0.75 && ry < 0.75 && ry > 0.25 &&  				(m_allowedDocking & AnchorStyles.Right) != 0)  			{  				if (m_dockState.OrgWidth <= 0)  					r.Width = r.Width / 2;  				else  				{  					r.Width = m_dockState.OrgWidth;  					if (r.Width > Width / 2)  						r.Width = Width / 2;  				}    				if (r.Width > this.Width)  					r.Width = this.Width;    				r.X = rc.X + rc.Width - r.Width;  				m_dockExtender.Overlay.Dock = DockStyle.Right;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry > 0 && ry < rx && ry < 0.25 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Top) != 0)  			{  				if (m_dockState.OrgHeight <= 0)  					r.Height = r.Height / 2;  				else  				{  					r.Height = m_dockState.OrgHeight;  					if (r.Height > Height / 2)  						r.Height = Height / 2;  				}    				if (r.Height > this.Height)  					r.Height = this.Height;    				m_dockExtender.Overlay.Dock = DockStyle.Top;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry > 0 && ry < rx && ry < 0.25 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Top) != 0)  			{  				if (m_dockState.OrgHeight <= 0)  					r.Height = r.Height / 2;  				else  				{  					r.Height = m_dockState.OrgHeight;  					if (r.Height > Height / 2)  						r.Height = Height / 2;  				}    				if (r.Height > this.Height)  					r.Height = this.Height;    				m_dockExtender.Overlay.Dock = DockStyle.Top;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry > 0 && ry < rx && ry < 0.25 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Top) != 0)  			{  				if (m_dockState.OrgHeight <= 0)  					r.Height = r.Height / 2;  				else  				{  					r.Height = m_dockState.OrgHeight;  					if (r.Height > Height / 2)  						r.Height = Height / 2;  				}    				if (r.Height > this.Height)  					r.Height = this.Height;    				m_dockExtender.Overlay.Dock = DockStyle.Top;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry > 0 && ry < rx && ry < 0.25 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Top) != 0)  			{  				if (m_dockState.OrgHeight <= 0)  					r.Height = r.Height / 2;  				else  				{  					r.Height = m_dockState.OrgHeight;  					if (r.Height > Height / 2)  						r.Height = Height / 2;  				}    				if (r.Height > this.Height)  					r.Height = this.Height;    				m_dockExtender.Overlay.Dock = DockStyle.Top;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry > 0 && ry < rx && ry < 0.25 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Top) != 0)  			{  				if (m_dockState.OrgHeight <= 0)  					r.Height = r.Height / 2;  				else  				{  					r.Height = m_dockState.OrgHeight;  					if (r.Height > Height / 2)  						r.Height = Height / 2;  				}    				if (r.Height > this.Height)  					r.Height = this.Height;    				m_dockExtender.Overlay.Dock = DockStyle.Top;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry > 0 && ry < rx && ry < 0.25 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Top) != 0)  			{  				if (m_dockState.OrgHeight <= 0)  					r.Height = r.Height / 2;  				else  				{  					r.Height = m_dockState.OrgHeight;  					if (r.Height > Height / 2)  						r.Height = Height / 2;  				}    				if (r.Height > this.Height)  					r.Height = this.Height;    				m_dockExtender.Overlay.Dock = DockStyle.Top;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry < 1 && ry > rx && ry > 0.75 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Bottom) != 0)  			{  				if (m_dockState.OrgHeight <= 0)  					r.Height = r.Height / 2;  				else  				{  					r.Height = m_dockState.OrgHeight;  					if (r.Height > Height / 2)  						r.Height = Height / 2;  				}    				if (r.Height > this.Height)  					r.Height = this.Height;  				r.Y = rc.Y + rc.Height - r.Height;  				m_dockExtender.Overlay.Dock = DockStyle.Bottom;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry < 1 && ry > rx && ry > 0.75 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Bottom) != 0)  			{  				if (m_dockState.OrgHeight <= 0)  					r.Height = r.Height / 2;  				else  				{  					r.Height = m_dockState.OrgHeight;  					if (r.Height > Height / 2)  						r.Height = Height / 2;  				}    				if (r.Height > this.Height)  					r.Height = this.Height;  				r.Y = rc.Y + rc.Height - r.Height;  				m_dockExtender.Overlay.Dock = DockStyle.Bottom;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry < 1 && ry > rx && ry > 0.75 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Bottom) != 0)  			{  				if (m_dockState.OrgHeight <= 0)  					r.Height = r.Height / 2;  				else  				{  					r.Height = m_dockState.OrgHeight;  					if (r.Height > Height / 2)  						r.Height = Height / 2;  				}    				if (r.Height > this.Height)  					r.Height = this.Height;  				r.Y = rc.Y + rc.Height - r.Height;  				m_dockExtender.Overlay.Dock = DockStyle.Bottom;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry < 1 && ry > rx && ry > 0.75 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Bottom) != 0)  			{  				if (m_dockState.OrgHeight <= 0)  					r.Height = r.Height / 2;  				else  				{  					r.Height = m_dockState.OrgHeight;  					if (r.Height > Height / 2)  						r.Height = Height / 2;  				}    				if (r.Height > this.Height)  					r.Height = this.Height;  				r.Y = rc.Y + rc.Height - r.Height;  				m_dockExtender.Overlay.Dock = DockStyle.Bottom;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry < 1 && ry > rx && ry > 0.75 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Bottom) != 0)  			{  				if (m_dockState.OrgHeight <= 0)  					r.Height = r.Height / 2;  				else  				{  					r.Height = m_dockState.OrgHeight;  					if (r.Height > Height / 2)  						r.Height = Height / 2;  				}    				if (r.Height > this.Height)  					r.Height = this.Height;  				r.Y = rc.Y + rc.Height - r.Height;  				m_dockExtender.Overlay.Dock = DockStyle.Bottom;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry < 1 && ry > rx && ry > 0.75 && rx < 0.75 && rx > 0.25 &&  				(m_allowedDocking & AnchorStyles.Bottom) != 0)  			{  				if (m_dockState.OrgHeight <= 0)  					r.Height = r.Height / 2;  				else  				{  					r.Height = m_dockState.OrgHeight;  					if (r.Height > Height / 2)  						r.Height = Height / 2;  				}    				if (r.Height > this.Height)  					r.Height = this.Height;  				r.Y = rc.Y + rc.Height - r.Height;  				m_dockExtender.Overlay.Dock = DockStyle.Bottom;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (m_dockState.Container.Equals(m_dockState.Handle))  			{  				// REVIEW: what are these values?  				containerSize.Width += 18;  				containerSize.Height += 28;  			}  			else  			{  				containerSize.Width += 2 * SystemInformation.FrameBorderSize.Width;  				containerSize.Height += SystemInformation.ToolWindowCaptionHeight +  					2 * SystemInformation.FrameBorderSize.Height;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (m_dockState.Container.Equals(m_dockState.Handle))  			{  				// REVIEW: what are these values?  				containerSize.Width += 18;  				containerSize.Height += 28;  			}  			else  			{  				containerSize.Width += 2 * SystemInformation.FrameBorderSize.Width;  				containerSize.Height += SystemInformation.ToolWindowCaptionHeight +  					2 * SystemInformation.FrameBorderSize.Height;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (m_dockState.Container.Equals(m_dockState.Handle))  			{  				// REVIEW: what are these values?  				containerSize.Width += 18;  				containerSize.Height += 28;  			}  			else  			{  				containerSize.Width += 2 * SystemInformation.FrameBorderSize.Width;  				containerSize.Height += SystemInformation.ToolWindowCaptionHeight +  					2 * SystemInformation.FrameBorderSize.Height;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (m_dockState.Container.Equals(m_dockState.Handle))  			{  				// REVIEW: what are these values?  				containerSize.Width += 18;  				containerSize.Height += 28;  			}  			else  			{  				containerSize.Width += 2 * SystemInformation.FrameBorderSize.Width;  				containerSize.Height += SystemInformation.ToolWindowCaptionHeight +  					2 * SystemInformation.FrameBorderSize.Height;  			}
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (containerSize.Width > 600)  				containerSize.Width = 600;
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (containerSize.Width > 600)  				containerSize.Width = 600;
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (containerSize.Height > 600)  				containerSize.Height = 600;
Magic Number,ControlExtenders,Floaty,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (containerSize.Height > 600)  				containerSize.Height = 600;
Magic Number,ControlExtenders,Overlay,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DockExtender\Overlay.cs,InitializeComponent,The following statement contains a magic number: this.Opacity = 0.3;
Magic Number,SIL.FieldWorks.Common.Drawing,BorderDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,Draw,The following statement contains a magic number: if (m_brdrType == BorderTypes.SingleRaised || m_brdrType == BorderTypes.SingleSunken)  			{  				//***********************************************************************************  				// First' draw the dark border all around the rectangle.  				//***********************************************************************************  				m_graphics.DrawRectangle(m_penDarkEdge' m_rect);    				//***********************************************************************************  				// Then draw the two light edges where they should appear.  				//***********************************************************************************  				if (m_brdrType == BorderTypes.SingleRaised)  				{  					// Note: left and top border line are one pixel shorter!  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left' m_rect.Top' m_rect.Left' m_rect.Bottom-1);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left' m_rect.Top' m_rect.Right-1' m_rect.Top);  				}  				else  				{  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Right' m_rect.Top' m_rect.Right' m_rect.Bottom);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left' m_rect.Bottom' m_rect.Right' m_rect.Bottom);  				}  			}    				//***************************************************************************************  				// Double border raised or sunken  				//***************************************************************************************  			else  			{  				//***********************************************************************************  				// Draw the dark and darkest border all around the rectangle. One inside the other.  				//***********************************************************************************  				m_graphics.DrawRectangle(m_penDarkestEdge' m_rect);    				m_graphics.DrawRectangle(m_penDarkEdge' m_rect.X + 1' m_rect.Y + 1'  					m_rect.Width - 2' m_rect.Height - 2);    				//***********************************************************************************  				//***********************************************************************************  				if (m_brdrType == BorderTypes.DoubleRaised)  				{  					// Note: left and top border line are one pixel shorter!  					m_graphics.DrawLine(m_penLightEdge' m_rect.Left' m_rect.Top' m_rect.Left' m_rect.Bottom-1);  					m_graphics.DrawLine(m_penLightEdge' m_rect.Left' m_rect.Top' m_rect.Right-1' m_rect.Top);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left+1' m_rect.Top+1' m_rect.Left+1' m_rect.Bottom-2);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left+1' m_rect.Top+1' m_rect.Right-2' m_rect.Top+1);  				}  				else  				{  					// DoubleSunken  					m_graphics.DrawLine(m_penLightEdge' m_rect.Right' m_rect.Top' m_rect.Right' m_rect.Bottom);  					m_graphics.DrawLine(m_penLightEdge' m_rect.Left' m_rect.Bottom' m_rect.Right' m_rect.Bottom);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Right-1' m_rect.Top+1' m_rect.Right-1' m_rect.Bottom-1);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left+1' m_rect.Bottom-1' m_rect.Right-1' m_rect.Bottom-1);  				}  			}
Magic Number,SIL.FieldWorks.Common.Drawing,BorderDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,Draw,The following statement contains a magic number: if (m_brdrType == BorderTypes.SingleRaised || m_brdrType == BorderTypes.SingleSunken)  			{  				//***********************************************************************************  				// First' draw the dark border all around the rectangle.  				//***********************************************************************************  				m_graphics.DrawRectangle(m_penDarkEdge' m_rect);    				//***********************************************************************************  				// Then draw the two light edges where they should appear.  				//***********************************************************************************  				if (m_brdrType == BorderTypes.SingleRaised)  				{  					// Note: left and top border line are one pixel shorter!  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left' m_rect.Top' m_rect.Left' m_rect.Bottom-1);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left' m_rect.Top' m_rect.Right-1' m_rect.Top);  				}  				else  				{  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Right' m_rect.Top' m_rect.Right' m_rect.Bottom);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left' m_rect.Bottom' m_rect.Right' m_rect.Bottom);  				}  			}    				//***************************************************************************************  				// Double border raised or sunken  				//***************************************************************************************  			else  			{  				//***********************************************************************************  				// Draw the dark and darkest border all around the rectangle. One inside the other.  				//***********************************************************************************  				m_graphics.DrawRectangle(m_penDarkestEdge' m_rect);    				m_graphics.DrawRectangle(m_penDarkEdge' m_rect.X + 1' m_rect.Y + 1'  					m_rect.Width - 2' m_rect.Height - 2);    				//***********************************************************************************  				//***********************************************************************************  				if (m_brdrType == BorderTypes.DoubleRaised)  				{  					// Note: left and top border line are one pixel shorter!  					m_graphics.DrawLine(m_penLightEdge' m_rect.Left' m_rect.Top' m_rect.Left' m_rect.Bottom-1);  					m_graphics.DrawLine(m_penLightEdge' m_rect.Left' m_rect.Top' m_rect.Right-1' m_rect.Top);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left+1' m_rect.Top+1' m_rect.Left+1' m_rect.Bottom-2);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left+1' m_rect.Top+1' m_rect.Right-2' m_rect.Top+1);  				}  				else  				{  					// DoubleSunken  					m_graphics.DrawLine(m_penLightEdge' m_rect.Right' m_rect.Top' m_rect.Right' m_rect.Bottom);  					m_graphics.DrawLine(m_penLightEdge' m_rect.Left' m_rect.Bottom' m_rect.Right' m_rect.Bottom);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Right-1' m_rect.Top+1' m_rect.Right-1' m_rect.Bottom-1);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left+1' m_rect.Bottom-1' m_rect.Right-1' m_rect.Bottom-1);  				}  			}
Magic Number,SIL.FieldWorks.Common.Drawing,BorderDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,Draw,The following statement contains a magic number: if (m_brdrType == BorderTypes.SingleRaised || m_brdrType == BorderTypes.SingleSunken)  			{  				//***********************************************************************************  				// First' draw the dark border all around the rectangle.  				//***********************************************************************************  				m_graphics.DrawRectangle(m_penDarkEdge' m_rect);    				//***********************************************************************************  				// Then draw the two light edges where they should appear.  				//***********************************************************************************  				if (m_brdrType == BorderTypes.SingleRaised)  				{  					// Note: left and top border line are one pixel shorter!  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left' m_rect.Top' m_rect.Left' m_rect.Bottom-1);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left' m_rect.Top' m_rect.Right-1' m_rect.Top);  				}  				else  				{  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Right' m_rect.Top' m_rect.Right' m_rect.Bottom);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left' m_rect.Bottom' m_rect.Right' m_rect.Bottom);  				}  			}    				//***************************************************************************************  				// Double border raised or sunken  				//***************************************************************************************  			else  			{  				//***********************************************************************************  				// Draw the dark and darkest border all around the rectangle. One inside the other.  				//***********************************************************************************  				m_graphics.DrawRectangle(m_penDarkestEdge' m_rect);    				m_graphics.DrawRectangle(m_penDarkEdge' m_rect.X + 1' m_rect.Y + 1'  					m_rect.Width - 2' m_rect.Height - 2);    				//***********************************************************************************  				//***********************************************************************************  				if (m_brdrType == BorderTypes.DoubleRaised)  				{  					// Note: left and top border line are one pixel shorter!  					m_graphics.DrawLine(m_penLightEdge' m_rect.Left' m_rect.Top' m_rect.Left' m_rect.Bottom-1);  					m_graphics.DrawLine(m_penLightEdge' m_rect.Left' m_rect.Top' m_rect.Right-1' m_rect.Top);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left+1' m_rect.Top+1' m_rect.Left+1' m_rect.Bottom-2);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left+1' m_rect.Top+1' m_rect.Right-2' m_rect.Top+1);  				}  				else  				{  					// DoubleSunken  					m_graphics.DrawLine(m_penLightEdge' m_rect.Right' m_rect.Top' m_rect.Right' m_rect.Bottom);  					m_graphics.DrawLine(m_penLightEdge' m_rect.Left' m_rect.Bottom' m_rect.Right' m_rect.Bottom);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Right-1' m_rect.Top+1' m_rect.Right-1' m_rect.Bottom-1);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left+1' m_rect.Bottom-1' m_rect.Right-1' m_rect.Bottom-1);  				}  			}
Magic Number,SIL.FieldWorks.Common.Drawing,BorderDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,Draw,The following statement contains a magic number: if (m_brdrType == BorderTypes.SingleRaised || m_brdrType == BorderTypes.SingleSunken)  			{  				//***********************************************************************************  				// First' draw the dark border all around the rectangle.  				//***********************************************************************************  				m_graphics.DrawRectangle(m_penDarkEdge' m_rect);    				//***********************************************************************************  				// Then draw the two light edges where they should appear.  				//***********************************************************************************  				if (m_brdrType == BorderTypes.SingleRaised)  				{  					// Note: left and top border line are one pixel shorter!  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left' m_rect.Top' m_rect.Left' m_rect.Bottom-1);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left' m_rect.Top' m_rect.Right-1' m_rect.Top);  				}  				else  				{  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Right' m_rect.Top' m_rect.Right' m_rect.Bottom);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left' m_rect.Bottom' m_rect.Right' m_rect.Bottom);  				}  			}    				//***************************************************************************************  				// Double border raised or sunken  				//***************************************************************************************  			else  			{  				//***********************************************************************************  				// Draw the dark and darkest border all around the rectangle. One inside the other.  				//***********************************************************************************  				m_graphics.DrawRectangle(m_penDarkestEdge' m_rect);    				m_graphics.DrawRectangle(m_penDarkEdge' m_rect.X + 1' m_rect.Y + 1'  					m_rect.Width - 2' m_rect.Height - 2);    				//***********************************************************************************  				//***********************************************************************************  				if (m_brdrType == BorderTypes.DoubleRaised)  				{  					// Note: left and top border line are one pixel shorter!  					m_graphics.DrawLine(m_penLightEdge' m_rect.Left' m_rect.Top' m_rect.Left' m_rect.Bottom-1);  					m_graphics.DrawLine(m_penLightEdge' m_rect.Left' m_rect.Top' m_rect.Right-1' m_rect.Top);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left+1' m_rect.Top+1' m_rect.Left+1' m_rect.Bottom-2);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left+1' m_rect.Top+1' m_rect.Right-2' m_rect.Top+1);  				}  				else  				{  					// DoubleSunken  					m_graphics.DrawLine(m_penLightEdge' m_rect.Right' m_rect.Top' m_rect.Right' m_rect.Bottom);  					m_graphics.DrawLine(m_penLightEdge' m_rect.Left' m_rect.Bottom' m_rect.Right' m_rect.Bottom);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Right-1' m_rect.Top+1' m_rect.Right-1' m_rect.Bottom-1);  					m_graphics.DrawLine(m_penLightestEdge' m_rect.Left+1' m_rect.Bottom-1' m_rect.Right-1' m_rect.Bottom-1);  				}  			}
Magic Number,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,DrawDialogControlSeparator,The following statement contains a magic number: Draw(g' 8' rcControl.Top - (rcDlgClient.Height - rcControl.Bottom)'  				rcDlgClient.Width - 17'	LineTypes.Etched);
Magic Number,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,DrawDialogControlSeparator,The following statement contains a magic number: Draw(g' 8' rcControl.Top - (rcDlgClient.Height - rcControl.Bottom)'  				rcDlgClient.Width - 17'	LineTypes.Etched);
Magic Number,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,DrawDialogControlSeparator,The following statement contains a magic number: Draw(g' 8' y' rcDlgClient.Width - 17' LineTypes.Etched);
Magic Number,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,DrawDialogControlSeparator,The following statement contains a magic number: Draw(g' 8' y' rcDlgClient.Width - 17' LineTypes.Etched);
Magic Number,SIL.FieldWorks.Common.Drawing,ContentAlignmentHelper,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,ConAlignToImgPosition,The following statement contains a magic number: if (align == ContentAlignment.BottomCenter || align == ContentAlignment.MiddleCenter ||  				align == ContentAlignment.TopCenter)  				pt.X = rc.Left + (rc.Width - img.Width) / 2;  			else if (align == ContentAlignment.BottomRight || align == ContentAlignment.MiddleRight ||  				align == ContentAlignment.TopRight)  				pt.X = rc.Left + (rc.Width - img.Width) - nMargin;
Magic Number,SIL.FieldWorks.Common.Drawing,ContentAlignmentHelper,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,ConAlignToImgPosition,The following statement contains a magic number: if (align == ContentAlignment.MiddleLeft || align == ContentAlignment.MiddleCenter ||  				align == ContentAlignment.MiddleRight)  				pt.Y = rc.Top + (rc.Height - img.Height) / 2;  			else if (align == ContentAlignment.BottomLeft || align == ContentAlignment.BottomCenter ||  				align == ContentAlignment.BottomRight)  				pt.Y = rc.Top + (rc.Height - img.Height) - nMargin;
Missing Default,SIL.FieldWorks.Common.Controls,DataUpDown,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DataUpDown.cs,UpdateEditText,The following switch statement is missing a default case: switch(m_mode)  			{  				case DataUpDownMode.Normal:  					Text = m_currentValue.ToString();  					break;    				case DataUpDownMode.Letters:  					Text = AlphaOutline.NumToAlphaOutline(m_currentValue);  					break;    				case DataUpDownMode.LettersLowerCase:  					Text = AlphaOutline.NumToAlphaOutline(m_currentValue).ToLower();  					break;    				case DataUpDownMode.Roman:  					Text = RomanNumerals.IntToRoman(m_currentValue);  					break;    				case DataUpDownMode.RomanLowerCase:  					Text = RomanNumerals.IntToRoman(m_currentValue).ToLower();  					break;  			}
Missing Default,SIL.FieldWorks.Common.Controls,DataUpDown,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\DataUpDown.cs,ValidateEditText,The following switch statement is missing a default case: switch (m_mode)  			{  				case DataUpDownMode.Normal:  					foreach (char ch in text)  					{  						if (!Char.IsDigit(ch))  						{  							newValue = -1;  							break;  						}  					}  					if (newValue != -1)  						newValue = Int32.Parse(text);  					break;    				case DataUpDownMode.Letters:  				case DataUpDownMode.LettersLowerCase:  					newValue = AlphaOutline.AlphaOutlineToNum(text);  					// If the text does not validate and the old text does not validate then  					// switch to a value of 1.  					if (newValue == -1 && AlphaOutline.AlphaOutlineToNum(m_previousText) == -1)  					{  						newValue = 1;  						text = AlphaOutline.NumToAlphaOutline(newValue);  					}    					if (m_mode == DataUpDownMode.Letters)  						text = text.ToUpper();  					else  						text = text.ToLower();  					break;    				case DataUpDownMode.Roman:  				case DataUpDownMode.RomanLowerCase:  					newValue = RomanNumerals.RomanToInt(text);  					// If the text does not validate and the old text does not validate then  					// switch to a value of 1.  					if (newValue == -1 && RomanNumerals.RomanToInt(m_previousText) == -1)  					{  						newValue = 1;  						text = RomanNumerals.IntToRoman(newValue);  					}    					if (m_mode == DataUpDownMode.Roman)  						text = text.ToUpper();  					else  						text = text.ToLower();  					break;  			}
Missing Default,SIL.FieldWorks.Common.Controls,ObtainProjectMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ObtainProjectMethod.cs,RetrieveDefaultWritingSystemIdsFromLift,The following switch statement is missing a default case: switch (reader.NodeType)  				{  					case XmlNodeType.Element:  						switch (reader.Name)  						{  							case "lexical-unit":  								inLexicalUnit = true;  								break;  							case "definition":  							case "gloss":  								inDefnOrGloss = true;  								break;  							case "form":  								if (inLexicalUnit && string.IsNullOrWhiteSpace(vernWs))  									vernWs = reader.GetAttribute("lang"); // pathologically may leave it null' if so keep trying.  								if (inDefnOrGloss && string.IsNullOrWhiteSpace(analysisWs))  									analysisWs = reader.GetAttribute("lang"); // pathologically may leave it null' if so keep trying.  								if (!string.IsNullOrWhiteSpace(vernWs) && !string.IsNullOrWhiteSpace(analysisWs))  									return; // got all we need' skip rest of file.  								break;  						}  						break;  					case XmlNodeType.EndElement:  						switch (reader.Name)  						{  							case "lexical-unit":  								inLexicalUnit = false;  								break;  							case "definition":  							case "gloss":  								inDefnOrGloss = false;  								break;  						}  						break;  				}
Missing Default,SIL.FieldWorks.Common.Controls,ObtainProjectMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ObtainProjectMethod.cs,RetrieveDefaultWritingSystemIdsFromLift,The following switch statement is missing a default case: switch (reader.Name)  						{  							case "lexical-unit":  								inLexicalUnit = true;  								break;  							case "definition":  							case "gloss":  								inDefnOrGloss = true;  								break;  							case "form":  								if (inLexicalUnit && string.IsNullOrWhiteSpace(vernWs))  									vernWs = reader.GetAttribute("lang"); // pathologically may leave it null' if so keep trying.  								if (inDefnOrGloss && string.IsNullOrWhiteSpace(analysisWs))  									analysisWs = reader.GetAttribute("lang"); // pathologically may leave it null' if so keep trying.  								if (!string.IsNullOrWhiteSpace(vernWs) && !string.IsNullOrWhiteSpace(analysisWs))  									return; // got all we need' skip rest of file.  								break;  						}
Missing Default,SIL.FieldWorks.Common.Controls,ObtainProjectMethod,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ObtainProjectMethod.cs,RetrieveDefaultWritingSystemIdsFromLift,The following switch statement is missing a default case: switch (reader.Name)  						{  							case "lexical-unit":  								inLexicalUnit = false;  								break;  							case "definition":  							case "gloss":  								inDefnOrGloss = false;  								break;  						}
Missing Default,SIL.FieldWorks.Common.Controls,FwColorCombo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwColorCombo.cs,DrawDropDownButton,The following switch statement is missing a default case: switch (m_buttonState)  			{  				case DropDownButtonState.Pressed:  					element = VisualStyleElement.ComboBox.DropDownButton.Pressed;  					state = ButtonState.Pushed;  					break;    				case DropDownButtonState.Hot:  					element = VisualStyleElement.ComboBox.DropDownButton.Hot;  					state = ButtonState.Normal;  					break;    				case DropDownButtonState.Normal:  					element = VisualStyleElement.ComboBox.DropDownButton.Normal;  					state = ButtonState.Normal;  					break;  			}
Missing Default,SIL.FieldWorks.Common.Controls,ScrollListBox,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\ScrollListBox.cs,OnVScroll,The following switch statement is missing a default case: switch (type)  			{  				case ScrollEventType.First:  					topIndex = 0;  					break;  				case ScrollEventType.Last:  					topIndex = iLimit;  					break;  				case ScrollEventType.SmallDecrement:  					topIndex = TopIndex - 1;  					break;  				case ScrollEventType.SmallIncrement:  					topIndex = TopIndex + 1;  					break;  				case ScrollEventType.LargeDecrement:  					topIndex = TopIndex - ItemsPerPage;  					break;  				case ScrollEventType.LargeIncrement:  					topIndex = TopIndex + ItemsPerPage;  					break;  				case ScrollEventType.ThumbTrack:  				case ScrollEventType.ThumbPosition:  					topIndex = MiscUtils.HiWord(wParam);  					break;  				case ScrollEventType.EndScroll:  					topIndex = TopIndex;  					break;  			}
Missing Default,SIL.FieldWorks.Common.Controls,StatusBarProgressPanel,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\StatusBarProgressPanel.cs,DrawPanel,The following switch statement is missing a default case: switch (this.AnimationStyle)  						{    							case ProgressDisplayStyle.LeftToRight:  								{  									bounds.Width = (int) (percent*(float) eventBounds.Width);  									break;  								}  							case ProgressDisplayStyle.RightToLeft:  								{  									bounds.Width = (int) (percent*(float) eventBounds.Width);  									bounds.X += eventBounds.Width - bounds.Width;  									break;  								}  							case ProgressDisplayStyle.BottomToTop:  								{  									bounds.Height = (int) (percent*(float) eventBounds.Height);  									bounds.Y += eventBounds.Height - bounds.Height;  									break;  								}  							case ProgressDisplayStyle.TopToBottom:  								{  									bounds.Height = (int) (percent*(float) eventBounds.Height);  									break;  								}  							case ProgressDisplayStyle.Infinite:  								{  									bounds.Height = (int) (percent*(float) eventBounds.Height);  									bounds.Y += (eventBounds.Height - bounds.Height)/2;  									bounds.Width = (int) (percent*(float) eventBounds.Width);  									bounds.X += (eventBounds.Width - bounds.Width)/2;  									break;  								}  						}
Missing Default,SIL.FieldWorks.Common.Drawing,LineDrawing,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\FwControls\FwDrawing.cs,Draw,The following switch statement is missing a default case: switch (g_LineType)  			{  				case LineTypes.Etched:  				case LineTypes.Raised:  					g_graphics.DrawLine((g_LineType == LineTypes.Etched ?  						g_penDarkLine : g_penLightLine)'  						g_StartLocation' g_EndLocation);    					Point tmpStart = new Point(g_StartLocation.X' g_StartLocation.Y + 1);  					Point tmpEnd = new Point(g_EndLocation.X' g_EndLocation.Y + 1);    					g_graphics.DrawLine((g_LineType == LineTypes.Etched ?  						g_penLightLine : g_penDarkLine)' tmpStart' tmpEnd);  					break;    				case LineTypes.Solid:  					g_graphics.DrawLine(g_penSolidLine' g_StartLocation' g_EndLocation);  					break;  			}
