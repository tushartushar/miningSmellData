Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The method has 147 lines of code.
Long Parameter List,SIL.FieldWorks.IText,AddWordsToLexiconTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\AddWordsToLexiconTests.cs,ValidateSenseWithAnalysis,The method has 5 parameters. Parameters: sense' wfiGloss' hvoSbWordPos' fMatchMainPossibility' allomorph
Long Parameter List,SIL.FieldWorks.IText,AddWordsToLexiconTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\AddWordsToLexiconTests.cs,SetupLexEntryAndSense,The method has 6 parameters. Parameters: formLexEntry' senseGloss' cache' testSandBox' lexEntry' lexSense
Long Parameter List,SIL.FieldWorks.IText,AddWordsToLexiconTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\AddWordsToLexiconTests.cs,SetupLexEntryAndSense,The method has 5 parameters. Parameters: formLexEntry' senseGloss' partOfSpeech' lexEntry' lexSense
Long Parameter List,SIL.FieldWorks.IText,AddWordsToLexiconTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\AddWordsToLexiconTests.cs,SetupLexEntryAndSense,The method has 7 parameters. Parameters: formLexEntry' senseGloss' partOfSpeech' cache' testSandBox' lexEntry' lexSense
Long Parameter List,SIL.FieldWorks.IText,AddWordsToLexiconTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\AddWordsToLexiconTests.cs,SetupMorphBundleForEntry,The method has 5 parameters. Parameters: cba0_0' gloss' lexEntry1_Entry' lexEntry1_Sense1' wf
Long Parameter List,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,MakeTag,The method has 6 parameters. Parameters: text' tag' beginSeg' begin' endSeg' end
Long Parameter List,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,GetMsaAndMoForm,The method has 5 parameters. Parameters: entry' slotType' pos' inflFS' form
Long Parameter List,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,VerifySelection,The method has 5 parameters. Parameters: sandbox' fPicture' tagText' tagObj' morphIndex
Long Statement,SIL.FieldWorks.IText,AddWordsToLexiconTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\AddWordsToLexiconTests.cs,ValidateSenseWithAnalysis,The length of the statement  "				Assert.AreEqual(posTarget.MainPossibility' (sense.MorphoSyntaxAnalysisRA as IMoStemMsa).PartOfSpeechRA.MainPossibility); " is 120.
Long Statement,SIL.FieldWorks.IText,AddWordsToLexiconTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\AddWordsToLexiconTests.cs,PickLexGlossUsingExistingAnalysis,The length of the statement  "			var morphBundle2 = SetupMorphBundleForEntry (cba0_0' "xxxa.AlternativeGloss"' lexEntry2_Entry' lexEntry2_Sense1' out wf); " is 121.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,CreateTestData,The length of the statement  "			m_np = Cache.LangProject.GetDefaultTextTagList().ReallyReallyAllPossibilities.Single(poss => poss.Abbreviation.BestAnalysisAlternative.Text == "Noun Phrase"); " is 158.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,CreateTestData,The length of the statement  "			ILexEntry la = MakeEntry("-la"' m_noun' "1SgPoss"' new FS {{GetFeature("nounAgr")' new FS {{GetFeature("num")' GetValue("sg")}}}}); " is 131.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,GetFeature,The length of the statement  "			return Cache.LanguageProject.MsFeatureSystemOA.FeaturesOC.First(f => f.Abbreviation.AnalysisDefaultWritingSystem.Text == id); " is 125.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,GetValue,The length of the statement  "			return Cache.LanguageProject.MsFeatureSystemOA.FeaturesOC.OfType<IFsClosedFeature>().SelectMany(f => f.ValuesOC).First(sym => sym.Abbreviation.AnalysisDefaultWritingSystem.Text == id); " is 184.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			model.Root.Children.Add(new ComplexConcWordNode {InflFeatures = {{GetFeature("nounAgr")' new FS {{GetFeature("num")' new ClosedFeatureValue(GetValue("sg")' false)}}}}}); " is 169.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer)); " is 147.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			model.Root.Children.Add(new ComplexConcWordNode {InflFeatures = {{GetFeature("tense")' new ClosedFeatureValue(GetValue("pres")' true)}}}); " is 138.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer)); " is 221.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer)); " is 147.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 23' null)}).Using(m_fragmentComparer)); " is 147.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer)); " is 257.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer)); " is 147.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer)); " is 183.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			model.Root.Children.Add(new ComplexConcMorphNode {Category = m_adj' NegateCategory = true' Form = MakeVernString("him")' Entry = MakeVernString("him")' Gloss = MakeAnalysisString("3SgObj")}); " is 191.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			model.Root.Children.Add(new ComplexConcMorphNode {Category = m_adj' NegateCategory = true' Form = MakeVernString("him")' Entry = MakeVernString("hin")' Gloss = MakeAnalysisString("3SgObj")}); " is 191.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 23' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,WordBoundarySearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,WordBoundarySearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer)); " is 147.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,WordBoundarySearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 23' null)}).Using(m_fragmentComparer)); " is 147.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,QuantifierSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 27' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,QuantifierSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 27' null)}).Using(m_fragmentComparer)); " is 147.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,QuantifierSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,QuantifierSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 23' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,QuantifierSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer)); " is 183.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer)); " is 183.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)'  new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer)); " is 221.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 23' null)}).Using(m_fragmentComparer)); " is 147.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer)); " is 183.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,GroupSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 23' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,GroupSearch,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 23' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,ParagraphWithInvalidParse,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer)); " is 147.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,ParagraphWithInvalidParse,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer)); " is 147.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,InvalidTags,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,InvalidTags,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,InvalidTags,The length of the statement  "			Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer)); " is 146.
Long Statement,SIL.FieldWorks.IText,ParaFragmentEqualityComparer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,Equals,The length of the statement  "				return x.Paragraph == y.Paragraph && x.GetMyBeginOffsetInPara() == y.GetMyBeginOffsetInPara() && x.GetMyEndOffsetInPara() == y.GetMyEndOffsetInPara(); " is 150.
Long Statement,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,WordsFragDoc_OneWordAndMultiGloss,The length of the statement  "			Assert.That(wff1.AnalysesOC' Has.Count.EqualTo(2)' "multiple word glosses (without specifying morphology) should create separate WfiAnalyses with separate glosses"); " is 165.
Long Statement,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,WordsFragDoc_OneWordAndMultiGloss,The length of the statement  "			Assert.That(wff1.AnalysesOC.ElementAt(1).MeaningsOC.ElementAt(0).Form.get_String(wsEn).Text' Is.EqualTo("secondgloss")); " is 120.
Long Statement,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,WordsFragDoc_OneWordAndMultiGloss_AvoidDuplication,The length of the statement  "			Assert.That(wff1.AnalysesOC' Has.Count.EqualTo(2)' "multiple word glosses (without specifying morphology) should create separate WfiAnalyses with separate glosses"); " is 165.
Long Statement,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,WordsFragDoc_OneWordAndMultiGloss_AvoidDuplication,The length of the statement  "			Assert.That(wff1.AnalysesOC.ElementAt(1).MeaningsOC.ElementAt(0).Form.get_String(wsEn).Text' Is.EqualTo("secondgloss")); " is 120.
Long Statement,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,WordsFragDoc_OneWordPhraseAndOneGloss,The length of the statement  "			Assert.That(wff1.AnalysesOC.ElementAt(0).MeaningsOC.ElementAt(0).Form.get_String(wsEn).Text' Is.EqualTo("phrase gloss")); " is 121.
Long Statement,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,WordsFragDoc_OneWordPhraseAndOneGloss_AvoidDuplicates,The length of the statement  "			Assert.That(wff1.AnalysesOC.ElementAt(0).MeaningsOC.ElementAt(0).Form.get_String(wsEn).Text' Is.EqualTo("phrase gloss")); " is 121.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportBasicInformation_FormSansMorph,The length of the statement  "				AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath($@"//word[item[@type='txt' and @lang='{QaaXKal}']='gone']"' 1); " is 132.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportBasicInformation_FormSansMorph,The length of the statement  "				AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath($@"//morph[item[@type='txt' and @lang='{QaaXKal}']]"' 2); " is 126.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportBasicInformation_FormSansMorph,The length of the statement  "				AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath($@"//morph[item[@type='txt' and @lang='{QaaXKal}']='go']"' 1); " is 131.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportBasicInformation_FormSansMorph,The length of the statement  "				AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath($@"//morph[item[@type='txt' and @lang='{QaaXKal}']='en']"' 1); " is 131.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_xml,The length of the statement  "				AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath(@"//phrase[item[@type='gls']='" + tssFreeTranslation.Text + @"']"' 1); " is 139.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_xml,The length of the statement  "				AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath(@"//phrase[item[@type='lit']='" + tssLitTranslation.Text + @"']"' 1); " is 138.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The length of the statement  "				AssertThatXmlIn.Dom(htmlDoc).HasSpecifiedNumberOfMatchesForXpath(@"//*[@class='itx_Freeform_gls']"' 3 + 1); // "Should be 3 empty and 1 non-empty freeform Free (gloss) annotations" " is 180.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The length of the statement  "				AssertThatXmlIn.Dom(htmlDoc).HasSpecifiedNumberOfMatchesForXpath(@"//*[@class='itx_Freeform_lit']"' 3 + 1); // "Should be 3 empty and 1 non-empty freeform literal annotations" " is 175.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The length of the statement  "				AssertThatXmlIn.Dom(htmlDoc).HasSpecifiedNumberOfMatchesForXpath(@"//*[@class='itx_Freeform_note']"' 2); // "Should be 2 freeform note annotations" " is 147.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The length of the statement  "				AssertThatXmlIn.Dom(htmlDoc).HasSpecifiedNumberOfMatchesForXpath(@"//*[@class='itx_Words']"' 4); // "Should be 4 phrases." " is 122.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The length of the statement  "				AssertThatXmlIn.Dom(htmlDoc).HasSpecifiedNumberOfMatchesForXpath(@"//*[@class='itx_Frame_Number']"' 4); // "Should be 4 phrase numbers." " is 136.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The length of the statement  "				AssertThatXmlIn.Dom(htmlDoc).HasSpecifiedNumberOfMatchesForXpath(@"//*[@class='itx_Frame_Word']"' 4); // "Should be 4 words (including punct)." " is 143.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374,The length of the statement  "				AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath(@"//morph[item[@type='variantTypes']='+fr. var.']"' 1); " is 124.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2html_multipleWss,The length of the statement  "				AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[2]/td"' 1); " is 138.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2html_multipleWss,The length of the statement  "				Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[2]/td").InnerText' Is.EqualTo(formLexEntryEs + "+fr. var.\u00A0")); " is 165.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2html_multipleWss,The length of the statement  "				//AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[2]/td/sub[@class='Interlin_Homograph']"' 1); " is 173.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2html_multipleWss,The length of the statement  "				//Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[2]/td/sub[@class='Interlin_Homograph']").InnerText' Is.EqualTo("1")); " is 169.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2html_multipleWss,The length of the statement  "				AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[2]/td/span[@class='itx_VariantTypes']"' 1); " is 170.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2html_multipleWss,The length of the statement  "				Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[2]/td/span[@class='itx_VariantTypes']").InnerText' Is.EqualTo("+fr. var.")); " is 174.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2html_multipleWss,The length of the statement  "				AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td"' 1); " is 138.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2html_multipleWss,The length of the statement  "				Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td").InnerText' Is.EqualTo(formLexEntry + "+fr. var.\u00A0")); " is 163.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2html_multipleWss,The length of the statement  "				//AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td/sub[@class='Interlin_Homograph']"' 1); " is 173.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2html_multipleWss,The length of the statement  "				//Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td/sub[@class='Interlin_Homograph']").InnerText' Is.EqualTo("1")); " is 169.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2html_multipleWss,The length of the statement  "				AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td/span[@class='itx_VariantTypes']"' 1); " is 170.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2html_multipleWss,The length of the statement  "				Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td/span[@class='itx_VariantTypes']").InnerText' Is.EqualTo("+fr. var.")); " is 174.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2OO_multipleWss,The length of the statement  "				//AssertThatXmlIn.Dom(transformedDocOO).HasSpecifiedNumberOfMatchesForXpath(@"/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[2]"' 1); " is 215.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectNodes("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[2]"' nsmgr)' Has.Count.EqualTo(1)); " is 206.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectSingleNode("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[2]"' nsmgr).InnerText' Is.EqualTo(formLexEntryEs + "+fr. var.")); " is 241.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2OO_multipleWss,The length of the statement  "				//Assert.That(transformedDocOO.SelectNodes("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[2]/text:span[@text:style-name='Interlin_Homograph']"' nsmgr)' Has.Count.EqualTo(1)); " is 257.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectNodes("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[2]/text:span[@text:style-name='Interlin_VariantTypes']"' nsmgr)' Has.Count.EqualTo(1)); " is 258.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectSingleNode("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[2]/text:span[@text:style-name='Interlin_VariantTypes']"' nsmgr).InnerText' Is.EqualTo("+fr. var.")); " is 276.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectNodes("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[3]"' nsmgr)' Has.Count.EqualTo(1)); " is 206.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectSingleNode("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[3]"' nsmgr).InnerText' Is.EqualTo(formLexEntry + "+fr. var.")); " is 239.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectNodes("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[3]/text:span[@text:style-name='Interlin_VariantTypes']"' nsmgr)' Has.Count.EqualTo(1)); " is 258.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportVariantTypeInformation_LT9374_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectSingleNode("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[3]/text:span[@text:style-name='Interlin_VariantTypes']"' nsmgr).InnerText' Is.EqualTo("+fr. var.")); " is 276.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsPrepend,The length of the statement  "				AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td"' 1); " is 138.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsPrepend,The length of the statement  "				Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td").InnerText' Is.EqualTo("Prepend.glossgo\u00A0")); " is 154.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsPrepend,The length of the statement  "				AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td/span[1][@class='itx_VariantTypes']"' 1); " is 173.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsPrepend,The length of the statement  "				Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td/span[1][@class='itx_VariantTypes']").InnerText' Is.EqualTo("Prepend.")); " is 176.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2htm,The length of the statement  "				AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td"' 1); " is 138.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2htm,The length of the statement  "				Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td").InnerText' Is.EqualTo("glossgo.pst\u00A0")); " is 150.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2htm,The length of the statement  "				AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td/span[@class='itx_VariantTypes']"' 1); " is 170.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2htm,The length of the statement  "				Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td/span[@class='itx_VariantTypes']").InnerText' Is.EqualTo(".pst")); " is 169.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2htm_multipleWss,The length of the statement  "				// namespace via XmlNamespaceManager (http://mymemorysucks.wordpress.com/2007/08/17/xmldocumentselectnodes-selects-nothing/) " is 124.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2htm_multipleWss,The length of the statement  "				AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td"' 1); " is 138.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2htm_multipleWss,The length of the statement  "				Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td").InnerText' Is.EqualTo("frglossgo.pst\u00A0")); " is 152.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2htm_multipleWss,The length of the statement  "				AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td/span[@class='itx_VariantTypes']"' 1); " is 170.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2htm_multipleWss,The length of the statement  "				Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[3]/td/span[@class='itx_VariantTypes']").InnerText' Is.EqualTo(".pst")); " is 169.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2htm_multipleWss,The length of the statement  "				AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[4]/td"' 1); " is 138.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2htm_multipleWss,The length of the statement  "				Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[4]/td").InnerText' Is.EqualTo("glossgo.pst\u00A0")); " is 150.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2htm_multipleWss,The length of the statement  "				AssertThatXmlIn.Dom(transformedDoc).HasSpecifiedNumberOfMatchesForXpath(@"/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[4]/td/span[@class='itx_VariantTypes']"' 1); " is 170.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2htm_multipleWss,The length of the statement  "				Assert.That(transformedDoc.SelectSingleNode("/html/body/p[4]/span[3]/table/tr[2]/td/span/table/tr[4]/td/span[@class='itx_VariantTypes']").InnerText' Is.EqualTo(".pst")); " is 169.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2OO_multipleWss,The length of the statement  "				//AssertThatXmlIn.Dom(transformedDocOO).HasSpecifiedNumberOfMatchesForXpath(@"/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[2]"' 1); " is 215.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectNodes("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[3]"' nsmgr)' Has.Count.EqualTo(1)); " is 206.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectSingleNode("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[3]"' nsmgr).InnerText' Is.EqualTo("frglossgo.pst")); " is 228.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectNodes("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[3]/text:span[@text:style-name='Interlin_VariantTypes']"' nsmgr)' " is 235.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectSingleNode("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[3]/text:span[@text:style-name='Interlin_VariantTypes']"' nsmgr).InnerText' " is 250.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectNodes("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[4]"' nsmgr)' Has.Count.EqualTo(1)); " is 206.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectSingleNode("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[4]"' nsmgr).InnerText' Is.EqualTo("glossgo.pst")); " is 226.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectNodes("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[4]/text:span[@text:style-name='Interlin_VariantTypes']"' nsmgr)' " is 235.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_xml2OO_multipleWss,The length of the statement  "				Assert.That(transformedDocOO.SelectSingleNode("/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[4]/text:span[@text:style-name='Interlin_VariantTypes']"' nsmgr).InnerText' " is 250.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word_multipleWss,The length of the statement  "				var freeVar = Cache.ServiceLocator.GetInstance<ILexEntryTypeRepository>().GetObject(LexEntryTypeTags.kguidLexTypFreeVar); " is 121.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word_multipleWss,The length of the statement  "				//AssertThatXmlIn.Dom(transformedDocOO).HasSpecifiedNumberOfMatchesForXpath(@"/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[2]"' 1); " is 215.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word_multipleWss,The length of the statement  "				Assert.That(transformedDocWord.SelectNodes("/w:wordDocument/w:body/w:p[5]/w:pict[3]/v:shape/v:textbox/w:txbxContent/w:tbl/w:tr[2]/w:tc/w:p/w:r[2]/w:t"' nsmgr)' Has.Count.EqualTo(1)' "test homograph number for lex entry: " + formLexEntryEs); " is 240.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word_multipleWss,The length of the statement  "				Assert.That(transformedDocWord.SelectSingleNode("/w:wordDocument/w:body/w:p[5]/w:pict[3]/v:shape/v:textbox/w:txbxContent/w:tbl/w:tr[2]/w:tc/w:p/w:r[2]/w:t"' nsmgr).InnerText' Is.Not.EqualTo("1")' "Inaccurate homograph number for lex entry: " + formLexEntryEs); " is 260.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word_multipleWss,The length of the statement  "				Assert.That(transformedDocWord.SelectNodes("/w:wordDocument/w:body/w:p[5]/w:pict[3]/v:shape/v:textbox/w:txbxContent/w:tbl/w:tr[2]/w:tc/w:p/w:r[2]/w:t"' nsmgr)' Has.Count.EqualTo(1)); " is 182.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word_multipleWss,The length of the statement  "				Assert.That(transformedDocWord.SelectSingleNode("/w:wordDocument/w:body/w:p[5]/w:pict[3]/v:shape/v:textbox/w:txbxContent/w:tbl/w:tr[2]/w:tc/w:p/w:r[2]/w:t"' nsmgr).InnerText' Is.EqualTo("+fr. var.")); " is 200.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word_multipleWss,The length of the statement  "				Assert.That(transformedDocWord.SelectNodes("//*[text()='.pst']"' nsmgr)' Has.Count.EqualTo(2)' "Irregularly inflected types should only match the number of lines for LexGloss"); " is 177.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word_multipleWss,The length of the statement  "				Assert.That(transformedDocWord.SelectNodes("//w:pStyle[starts-with(@w:val' '\n') or starts-with(@w:val' ' ')]"' nsmgr)' Has.Count.EqualTo(0)' "style values should not start with whitespace"); " is 191.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word2007_multipleWss,The length of the statement  "				var freeVar = Cache.ServiceLocator.GetInstance<ILexEntryTypeRepository>().GetObject(LexEntryTypeTags.kguidLexTypFreeVar); " is 121.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word2007_multipleWss,The length of the statement  "				//AssertThatXmlIn.Dom(transformedDocOO).HasSpecifiedNumberOfMatchesForXpath(@"/office:document-content/office:body/office:text/text:p[5]/draw:frame[3]/draw:text-box/text:p[2]/draw:frame/draw:text-box/text:p[2]"' 1); " is 215.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word2007_multipleWss,The length of the statement  "				//Assert.That(transformedDocWord.SelectNodes("/pkg:package/pkg:part[3]/pkg:xmlData/w:document/w:body/w:p[5]/m:oMath[2]/m:m/m:mr[2]/m:e/m:m/m:mr[2]/m:e/m:r/m:t[2]"' nsmgr)' Has.Count.EqualTo(1)' "test homograph number for lex entry: " + formLexEntryEs); " is 252.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word2007_multipleWss,The length of the statement  "				Assert.That(transformedDocWord.SelectSingleNode("/pkg:package/pkg:part[3]/pkg:xmlData/w:document/w:body/w:p[5]/m:oMath[2]/m:m/m:mr[2]/m:e/m:m/m:mr[2]/m:e/m:r/m:t[2]"' nsmgr).InnerText' Is.Not.EqualTo("1")' "Inaccurate homograph number for lex entry: " + formLexEntryEs); " is 270.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word2007_multipleWss,The length of the statement  "				Assert.That(transformedDocWord.SelectNodes("/pkg:package/pkg:part[3]/pkg:xmlData/w:document/w:body/w:p[5]/m:oMath[2]/m:m/m:mr[2]/m:e/m:m/m:mr[2]/m:e/m:r/m:t[2]"' nsmgr)' Has.Count.EqualTo(1)); " is 192.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word2007_multipleWss,The length of the statement  "				Assert.That(transformedDocWord.SelectSingleNode("/pkg:package/pkg:part[3]/pkg:xmlData/w:document/w:body/w:p[5]/m:oMath[2]/m:m/m:mr[2]/m:e/m:m/m:mr[2]/m:e/m:r/m:t[2]"' nsmgr).InnerText' Is.EqualTo("+fr. var.")); " is 210.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word2007_multipleWss,The length of the statement  "				Assert.That(transformedDocWord.SelectNodes("//*[text()='.pst']"' nsmgr)' Has.Count.EqualTo(2)' "Irregularly inflected types should only match the number of lines for LexGloss"); " is 177.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word2007_multipleWss,The length of the statement  "				Assert.That(transformedDocWord.SelectNodes("//w:rStyle[starts-with(@w:val' '\n') or starts-with(@w:val' ' ')]"' nsmgr)' Has.Count.EqualTo(0)' "style values should not start with whitespace"); " is 191.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_gls_multiEngWss,The length of the statement  "				Assert.That(transformedDocWord.SelectNodes("//*[text()='glossgo']"' nsmgr)' Has.Count.EqualTo(2)' "Should only have one LexGloss per line"); " is 140.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTestsForELAN,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,SetupDataForText1,The length of the statement  "				IStTxtPara para = Cache.ServiceLocator.GetInstance<IScrTxtParaFactory>().CreateWithStyle(text.ContentsOA' 0' "special"); " is 120.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTestsForELAN,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,SetupDataForText1,The length of the statement  "				para.Contents = TsStringUtils.MakeString("This is a text. It has two segments."' Cache.LanguageProject.DefaultVernacularWritingSystem.Handle); " is 142.
Long Statement,SIL.FieldWorks.IText,InterlinearExporterTestsForELAN,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ValidateMultipleTitlesAndAbbreviations,The length of the statement  "				AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath("//interlinear-text/item[@type=\"title-abbreviation\"]"' 2); " is 129.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,ValidateBirdDocSchema,The length of the statement  "						 "<morphemes><morph><item type=\"txt\" lang=\"en\">supercali-</item><item type=\"gls\" lang=\"pt\">superlative</item></morph></morphemes>" + " is 139.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,ValidateLanguageEncodingAttributeMultiple,The length of the statement  "					"<languages><language lang='en' encoding='ISO639-1'/><language lang='jit' encoding='ISO639-1' vernacular='true'/></languages>" + " is 128.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,ValidateLanguageEncodingAttributeMultiple,The length of the statement  "					"<languages><language lang='en' encoding='ISO639-1'/><language lang='jit' encoding='ISO639-1' vernacular='true'/></languages>" + " is 128.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,InvalidScrBookAttributeValue,The length of the statement  "				Assert.That(ex.Message' Is.EqualTo("The 'scrSectionType' attribute is invalid - The value 'invalid' is invalid according to its datatype 'scrSectionTypes' - The Enumeration constraint failed.")); " is 195.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,InvalidScrSectionTypeAttributeValue,The length of the statement  "				Assert.That(ex.Message' Is.EqualTo("The 'scrSectionType' attribute is invalid - The value 'invalid' is invalid according to its datatype 'scrSectionTypes' - The Enumeration constraint failed.")); " is 195.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,InvalidScrMilestonePhraseSequence,The length of the statement  "				Assert.That(ex.Message' Is.EqualTo("The element 'words' has invalid child element 'scrMilestone'. List of possible elements expected: 'word'.")); " is 145.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,InvalidScrMilestoneChapterType,The length of the statement  "				Assert.That(ex.Message' Is.EqualTo("The 'chapter' attribute is invalid - The value 'one' is invalid according to its datatype 'http://www.w3.org/2001/XMLSchema:integer' - The string 'one' is not a valid Integer value.")); " is 221.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,InvalidScrMilestoneVerseType,The length of the statement  "				Assert.That(ex.Message' Is.EqualTo("The 'verse' attribute is invalid - The value 'one' is invalid according to its datatype 'http://www.w3.org/2001/XMLSchema:integer' - The string 'one' is not a valid Integer value.")); " is 219.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,InvalidMorphemeAnalysisStatus,The length of the statement  "				Assert.That(ex.Message' Is.EqualTo("The 'analysisStatus' attribute is invalid - The value 'invalid' is invalid according to its datatype 'analysisStatusTypes' - The Enumeration constraint failed.")); " is 199.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexTextPhraseWithoutGuidMergesIntoParagraphOfSibling,The length of the statement  "					Assert.AreEqual("hesyla\x00a7 pus\x00A7 nihimbilira"' para.Contents.Text' "The contents of the paragraph does not match the words."); " is 133.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexTextNewParagraphCreatesNewParagraph_OriginalIsUnchanged,The length of the statement  "					Assert.AreEqual("nihimbilira"' secondPara.Contents.Text' "The contents of the second paragraph do not match the words."); " is 121.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexText_NotesWithMatchingContentMerges,The length of the statement  "					Assert.AreEqual(commonNote' para.SegmentsOS[0].NotesOS[0].Content.get_String(wsEng).Text' "The first note's Eng content should not have changed."); " is 147.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexText_NotesWithMatchingContentMerges,The length of the statement  "					Assert.AreEqual("Une note pour les deux xml."' para.SegmentsOS[0].NotesOS[0].Content.get_String(wsFr).Text' "The first note's Fr content should not have changed."); " is 164.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexText_NotesWithMatchingContentMerges,The length of the statement  "					Assert.AreEqual("Note in first xml."' para.SegmentsOS[0].NotesOS[1].Content.get_String(wsEng).Text' "The second note should not have changed."); " is 144.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexText_NotesWithMatchingContentMerges,The length of the statement  "					Assert.AreEqual("Une note pour le premier xml."' para.SegmentsOS[0].NotesOS[2].Content.get_String(wsFr).Text' "The third note should note have changed."); " is 154.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexText_NotesWithMatchingContentMerges,The length of the statement  "					Assert.AreEqual("Note in second xml."' para.SegmentsOS[0].NotesOS[3].Content.get_String(wsEng).Text' "A new note should have been added."); " is 139.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundPunct,The length of the statement  "					Assert.AreEqual(6' para.Contents.Text.Split(spaceArray).Length); //capture correct number of spaces' and no double spaces " is 121.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundSpanishPunct,The length of the statement  "					Assert.AreEqual(7' para.Contents.Text.Split(spaceArray).Length); //capture correct number of spaces' and no double spaces " is 121.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportFullELANData,The length of the statement  "				"<phrase media-file=\"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF\" guid=\"BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB\" begin-time-offset=\"1\" end-time-offset=\"2\">" + " is 156.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportFullELANData,The length of the statement  "				@"<media-files offset-type=""milliseconds""><media guid=""FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"" location=""file:\\test.wav""/></media-files></interlinear-text></document>"; " is 173.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportFullELANData,The length of the statement  "					Assert.AreEqual(new Guid("BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB")' para.SegmentsOS[0].Guid' "Segment guid not maintained on import."); " is 133.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportMergeInELANData,The length of the statement  "			const string firstxml = "<document><interlinear-text guid=\"AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA\"><item type=\"title\" lang=\"en\">wordspace</item>" + " is 151.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportMergeInELANData,The length of the statement  "				"<item type=\"title-abbreviation\" lang=\"en\">ws</item><paragraphs><paragraph><phrases><phrase guid=\"BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB\">" + " is 145.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportMergeInELANData,The length of the statement  "				"<word guid=\"CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC\"><item type=\"txt\" lang=\"fr\">Word</item></word></phrase></phrases></paragraph></paragraphs></interlinear-text></document>"; " is 178.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportMergeInELANData,The length of the statement  "			const string secondxml = "<document><interlinear-text guid=\"AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA\"><item type=\"title\" lang=\"en\">wordspace</item>" + " is 152.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportMergeInELANData,The length of the statement  "				"<phrase guid=\"BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB\" media-file=\"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF\" begin-time-offset=\"1\" end-time-offset=\"2\">" + " is 156.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportMergeInELANData,The length of the statement  "				"<word guid=\"CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC\"><item type=\"txt\" lang=\"fr\">Word</item></word></phrase></phrases></paragraph></paragraphs>" + " is 149.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportMergeInELANData,The length of the statement  "				@"<media-files offset-type=""milliseconds""><media guid=""FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"" location=""file:\\test.wav""/></media-files></interlinear-text></document>"; " is 173.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportMergeInELANData,The length of the statement  "					using (var thirdStream = new MemoryStream(Encoding.ASCII.GetBytes(secondxml.Replace("test.wav"' "retest.wav").ToCharArray()))) " is 126.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportMergeInELANData,The length of the statement  "						Assert.AreEqual(2' li.NumTimesDlgShown' "The user should have been prompted again to merge the text with the same Guid."); " is 122.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The length of the statement  "			const string importxml = "<document><interlinear-text guid=\"AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA\"><item type=\"title\" lang=\"en\">wordspace</item>" + " is 152.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The length of the statement  "				"<phrase guid=\"BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB\" media-file=\"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF\" begin-time-offset=\"1\" end-time-offset=\"2\">" + " is 156.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The length of the statement  "				"<word guid=\"CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC\"><item type=\"txt\" lang=\"fr\">Word</item></word></phrase></phrases></paragraph></paragraphs>" + " is 149.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The length of the statement  "				@"<media-files offset-type=""milliseconds""><media guid=""FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"" location=""file:\\test.wav""/></media-files></interlinear-text></document>"; " is 173.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The length of the statement  "				Assert.AreEqual(new Guid("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA")' firstText.Guid' "Guid not maintained during import."); " is 120.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The length of the statement  "				Assert.AreEqual(@"file:\\test.wav"' firstText.MediaFilesOA.MediaURIsOC.First().MediaURI' "URI was not imported correctly."); " is 124.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The length of the statement  "				using (var secondStream = new MemoryStream(Encoding.ASCII.GetBytes(importxml.Replace("test.wav"' "retest.wav").ToCharArray()))) " is 127.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The length of the statement  "					Assert.AreEqual(2' Cache.LanguageProject.Texts.Count' "We imported twice and didn't merge; there should be two texts."); " is 120.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The length of the statement  "					Assert.AreEqual(new Guid("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA")' firstText.Guid' "First text should remain unchanged."); " is 121.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The length of the statement  "					Assert.AreEqual(@"file:\\test.wav"' firstText.MediaFilesOA.MediaURIsOC.First().MediaURI' "First text should remain unchanged."); " is 128.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The length of the statement  "					Assert.AreNotEqual(new Guid("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA")' secondText.Guid' "Second text should have a unique Guid."); " is 128.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The length of the statement  "					Assert.AreNotEqual(mediaContainerGuid' secondText.MediaFilesOA.Guid' "Second text's media container should have a unique Guid."); " is 129.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The length of the statement  "					Assert.AreEqual(@"file:\\retest.wav"' secondText.MediaFilesOA.MediaURIsOC.First().MediaURI' "URI was not imported correctly."); " is 127.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportCreatesPersonForSpeaker,The length of the statement  "			"<paragraphs><paragraph><phrases><phrase speaker=\"Jimmy Dorante\" media-file=\"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF\" guid=\"BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB\" begin-time-offset=\"1\" end-time-offset=\"2\">" + " is 214.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportCreatesPersonForSpeaker,The length of the statement  "			"<media-files offset-type=\"milliseconds\"><media guid=\"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF\" location=\"file:\\\\test.wav\"/></media-files></interlinear-text></document>"; " is 174.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportCreatesReusesExistingSpeaker,The length of the statement  "			"<paragraphs><paragraph><phrases><phrase speaker=\"Jimmy Dorante\" media-file=\"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF\" guid=\"BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB\" begin-time-offset=\"1\" end-time-offset=\"2\">" + " is 214.
Long Statement,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportCreatesReusesExistingSpeaker,The length of the statement  "			"<media-files offset-type=\"milliseconds\"><media guid=\"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF\" location=\"file:\\\\test.wav\"/></media-files></interlinear-text></document>"; " is 174.
Long Statement,SIL.FieldWorks.IText,FocusBoxControllerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinDocForAnalysisTests.cs,ApproveAndMoveNext_NewWordGloss,The length of the statement  "#if WANTPORTWFIC // Undo is not working. The part of the test up to Undo works' but leaves extra things on the Undo stack " is 121.
Long Statement,SIL.FieldWorks.IText,InterlinearTextRecordClerkDerived,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearTextRecordClerkTests.cs,CreateStText,The length of the statement  "				string outerXmlFromProject = "<recordList owner=\"LangProject\" property=\"InterestingTexts\"><!-- We use a decorator here so it can override certain virtual properties and limit occurrences to interesting texts. --><decoratorClass assemblyPath=\"xWorks.dll\" class=\"SIL.FieldWorks.XWorks.InterestingTextsDecorator\" /></recordList>"; " is 335.
Long Statement,SIL.FieldWorks.IText,InterlinMasterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinMasterTests.cs,DoSetupFixture,The length of the statement  "			Assert.AreEqual(m_wsEn.Handle' m_sttNoExplicitWs.MainWritingSystem' "Our code counts on English being the defualt WS for very empty texts"); " is 140.
Long Statement,SIL.FieldWorks.IText,InterlinMasterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinMasterTests.cs,DoSetupFixture,The length of the statement  "			((IStTxtPara)m_sttEmptyButWithWs.ParagraphsOS[0]).Contents = TsStringUtils.MakeString(string.Empty' m_wsOtherVern.Handle); " is 122.
Long Statement,SIL.FieldWorks.IText,InterlinMasterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinMasterTests.cs,ShowRoot_ReplacesGlobalDefaultWsWithDefaultVernInEmptyText,The length of the statement  "			Assert.AreEqual(m_wsDefaultVern.Handle' m_sttNoExplicitWs.MainWritingSystem' "The WS for the text should now be the default vernacular"); " is 137.
Long Statement,SIL.FieldWorks.IText,InterlinMasterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinMasterTests.cs,ShowRoot_MaintainsSelectedWsInEmptyText,The length of the statement  "			Assert.AreEqual(m_wsOtherVern.Handle' m_sttEmptyButWithWs.MainWritingSystem' "The WS for the text should still be the other vernacular"); " is 137.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,BasicConversion,The length of the statement  "			mappings.Add(new InterlinearMapping() { Marker = "id"' Destination = InterlinDestination.Abbreviation' WritingSystem = "en" }); " is 127.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,BasicConversion,The length of the statement  "					VerifyItem(textElt' "./item[@type='comment']"' "en"' "a funny story (folk tale?) about the relationship between Abu Nawas and a king"); " is 135.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,BasicConversion,The length of the statement  "					VerifyText(phrase1' new[] {"$$"' "Uun"' "kono'"' "serita'"' "'"' "dau-dau"' "("' "tu"'")"' "kisa"' "Abu"' "Nawas"' "."}' " is 120.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,BasicConversion,The length of the statement  "					VerifyItem(phrase1' "./item[@type='gls']"' "en"' "There was' it is said' a story about Abu Nawas. JT added some more."); " is 120.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,BasicConversion,The length of the statement  "					// If we unexpectedly get a second text line AFTER some other known field without a ref line' start a new phrase anyway. " is 120.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,MultipleTexts,The length of the statement  "			mappings.Add(new InterlinearMapping() { Marker = "ab"' Destination = InterlinDestination.Abbreviation' WritingSystem = "en" }); " is 127.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,MultipleFileSplitAndJoin,The length of the statement  "				new []{"'file"' "name'"' "a'b"' "c;d;e"' "~`@#$%^&() /-_=\\+{}[]'"' @"C:\Users\John\AppData\Roaming\Favorite Files\\Myfile.sfm"} // edge cases and a realistic path " is 163.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,GetMappings,The length of the statement  "			mappings.Add(new InterlinearMapping() { Marker = "name"' Destination = InterlinDestination.Title' WritingSystem = "fr" }); " is 122.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,GetMappings,The length of the statement  "			mappings.Add(new InterlinearMapping() { Marker = "au"' Destination = InterlinDestination.Source' WritingSystem = "en" }); " is 121.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,GetMappings,The length of the statement  "			mappings.Add(new InterlinearMapping() { Marker = "com"' Destination = InterlinDestination.Comment' WritingSystem = "en" }); " is 123.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,GetMappings,The length of the statement  "			mappings.Add(new InterlinearMapping() { Marker = "ref"' Destination = InterlinDestination.Reference' WritingSystem = "en" }); " is 125.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,GetMappings,The length of the statement  "			mappings.Add(new InterlinearMapping() { Marker = "t"' Destination = InterlinDestination.Baseline' WritingSystem = "qaa-x-kal" }); " is 129.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,GetMappings,The length of the statement  "			mappings.Add(new InterlinearMapping() { Marker = "f"' Destination = InterlinDestination.FreeTranslation' WritingSystem = "en" }); " is 129.
Long Statement,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,GetMappings,The length of the statement  "			mappings.Add(new InterlinearMapping() { Marker = "lt"' Destination = InterlinDestination.LiteralTranslation' WritingSystem = "en" }); " is 133.
Long Statement,SIL.FieldWorks.IText,GlossToolLoadsGuessContentsTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\GlossToolLoadsGuessContentsTests.cs,SandBoxWithGlossConfig_LoadsGuessForGlossFromAnalysis,The length of the statement  "				var wf = Cache.ServiceLocator.GetInstance<IWfiWordformFactory>().Create(TsStringUtils.MakeString("xxxa"' Cache.DefaultVernWs)); " is 127.
Long Statement,SIL.FieldWorks.IText,GlossToolLoadsGuessContentsTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\GlossToolLoadsGuessContentsTests.cs,SandBoxWithGlossConfig_LoadsGuessForGlossFromAnalysis,The length of the statement  "				cba0_0.Analysis = Cache.ServiceLocator.GetInstance<IWfiAnalysisFactory>().Create(wf' Cache.ServiceLocator.GetInstance<IWfiGlossFactory>()); " is 139.
Long Statement,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The length of the statement  "							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord1_morphs1' baseWord1)); " is 120.
Long Statement,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The length of the statement  "							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord1_morphs2' baseWord1)); " is 120.
Long Statement,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The length of the statement  "							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord1_morphs3' baseWord1)); " is 120.
Long Statement,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The length of the statement  "							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord2_morphs1' baseWord2)); " is 120.
Long Statement,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The length of the statement  "							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord2_morphs2' baseWord2)); " is 120.
Long Statement,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The length of the statement  "							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord2_morphs3' baseWord2)); " is 120.
Long Statement,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The length of the statement  "							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord3_morphs1' baseWord3)); " is 120.
Long Statement,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The length of the statement  "							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord3_morphs2' baseWord3)); " is 120.
Long Statement,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The length of the statement  "							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord4_morphs1' baseWord4)); " is 120.
Long Statement,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The length of the statement  "							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord4_morphs2' baseWord4)); " is 120.
Long Statement,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The length of the statement  "							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord5_morphs2' baseWord5)); " is 120.
Long Statement,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,EstablishDefaultEntry_Empty_Basic,The length of the statement  "				morph.MorphTypeRA = Cache.ServiceLocator.GetInstance<IMoMorphTypeRepository>().GetObject(MoMorphTypeTags.kguidMorphSuffix); " is 123.
Long Statement,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,HandleTab,The length of the statement  "				// Test that we start with a default selection in the first place editing is possible' in the text of the first morpheme. " is 121.
Long Statement,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,GetBestGloss,The length of the statement  "			// We will not return one where the WfiGloss has a relevant non-empty alternative' even if the corresponding target is empty. " is 125.
Long Statement,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,LexEntriesComboHandler_IndexOfCurrentInflVariant_NoInflTypeChosen,The length of the statement  "					Assert.That(miCurrentSandboxState.m_hvoMainEntryOfVariant' Is.EqualTo(initialAnalysisStack.WfiAnalysis.MorphBundlesOS[0].SenseRA.Entry.Hvo)); " is 141.
Long Statement,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,LexEntriesComboHandler_ItemsInComboForInflVariant,The length of the statement  "					ILexEntryType letDialectalVariantType = Cache.ServiceLocator.GetInstance<ILexEntryTypeRepository>().GetObject(LexEntryTypeTags.kguidLexTypDialectalVar); " is 152.
Long Statement,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,LexEntriesComboHandler_IndexOfCurrentInflVariant_InflTypeChosen,The length of the statement  "					Assert.That(miCurrentSandboxState.m_hvoMainEntryOfVariant' Is.EqualTo(initialAnalysisStack.WfiAnalysis.MorphBundlesOS[0].SenseRA.Entry.Hvo)); " is 141.
Long Statement,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,GetComboHandler,The length of the statement  "			return SandboxBase.InterlinComboHandler.MakeCombo(null' tagIcon' sandbox' morphIndex) as SandboxBase.InterlinComboHandler; " is 122.
Long Statement,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorDoesNothingWhenTurnedOff,The length of the statement  "			mockDa.StringValues[new Tuple<int' int>(27' StTxtParaTags.kflidContents)] = TsStringUtils.MakeString(underlyingValue' 77); " is 122.
Long Statement,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorGetHandlesEmptyStringWhenTurnedOn,The length of the statement  "			mockDa.StringValues[new Tuple<int' int>(27' StTxtParaTags.kflidContents)] = TsStringUtils.MakeString(underlyingValue' 77); " is 122.
Long Statement,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorReplacesZwsWithGreySpaceWhenTurnedOn,The length of the statement  "			mockDa.StringValues[new Tuple<int' int>(27' StTxtParaTags.kflidContents)] = TsStringUtils.MakeString(underlyingValue' 77); " is 122.
Long Statement,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorReplacesZwsWithGreySpaceWhenTurnedOn,The length of the statement  "			VerifyBackColor(tss' new[] { ShowSpaceDecorator.KzwsBackColor' -1' ShowSpaceDecorator.KzwsBackColor' -1' ShowSpaceDecorator.KzwsBackColor' -1 }); " is 145.
Long Statement,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorReplacesGreySpaceWithZwsWhenTurnedOn,The length of the statement  "			bldr.SetIntPropValues("hello".Length' "hello".Length + 1' (int)FwTextPropType.ktptBackColor' (int)FwTextPropVar.ktpvDefault' " is 124.
Long Statement,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,VerifyBackColor,The length of the statement  "				Assert.That(tss.get_Properties(irun).GetIntPropValues((int)FwTextPropType.ktptBackColor' out nVar)' Is.EqualTo(colors[irun])); " is 126.
Long Statement,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,DontDieOnLongData,The length of the statement  "			int[] breakLocs = tester.BreakResults("fourscoreandsevenyearsagoourforefathersbroughtforthonthiscontinentanewnationconcievedinliberty" + " is 136.
Empty Catch Block,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,AssertTagDoesntExist,The method has an empty catch block.
Magic Number,SIL.FieldWorks.IText,AddWordsToLexiconTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\AddWordsToLexiconTests.cs,PickLexGlossUsingExistingAnalysis,The following statement contains a magic number: Assert.AreEqual(2' wf.AnalysesOC.Count);
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,CreateTestData,The following statement contains a magic number: MakeTag(m_text' m_np' para.SegmentsOS.First()' 1' para.SegmentsOS.First()' 3);
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)' new ParaFragment(seg' 24' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,SimpleSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,WordBoundarySearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,WordBoundarySearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,WordBoundarySearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,WordBoundarySearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,WordBoundarySearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,WordBoundarySearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)'  				new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,WordBoundarySearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)'  				new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,WordBoundarySearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)'  				new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,WordBoundarySearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)'  				new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,WordBoundarySearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)'  				new ParaFragment(seg' 12' 15' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,QuantifierSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,QuantifierSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,QuantifierSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 27' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,QuantifierSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,QuantifierSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,QuantifierSearch,The following statement contains a magic number: model.Root.Children.Add(new ComplexConcMorphNode {Category = m_verb' Minimum = 1' Maximum = 3});
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,QuantifierSearch,The following statement contains a magic number: model.Root.Children.Add(new ComplexConcMorphNode {Category = m_verb' Minimum = 1' Maximum = 4});
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,QuantifierSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)'  new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)'  new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)'  new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)'  new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 12' 15' null)'  new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 12' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,AlternationSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)' new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,GroupSearch,The following statement contains a magic number: model.Root.Children.Add(new ComplexConcGroupNode {Minimum = 1' Maximum = 2' Children =  				{  					new ComplexConcWordNode {Category = m_verb}'  					new ComplexConcOrNode()'  					new ComplexConcWordNode {Category = m_adj}  				}});
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,GroupSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,GroupSearch,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,ParagraphWithInvalidParse,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,ParagraphWithInvalidParse,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,ParagraphWithInvalidParse,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,ParagraphWithInvalidParse,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 17' 23' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,InvalidTags,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,InvalidTags,The following statement contains a magic number: ITextTag ttag = MakeTag(m_text' m_np' seg' 6' seg' 6);
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,InvalidTags,The following statement contains a magic number: ITextTag ttag = MakeTag(m_text' m_np' seg' 6' seg' 6);
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,InvalidTags,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,InvalidTags,The following statement contains a magic number: MakeTag(m_text' m_np' seg' 5' seg' 4);
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,InvalidTags,The following statement contains a magic number: MakeTag(m_text' m_np' seg' 5' seg' 4);
Magic Number,SIL.FieldWorks.IText,ComplexConcPatternModelTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,InvalidTags,The following statement contains a magic number: Assert.That(model.Search(m_text.ContentsOA)' Is.EquivalentTo(new IParaFragment[] {new ParaFragment(seg' 0' 11' null)}).Using(m_fragmentComparer));
Magic Number,SIL.FieldWorks.IText,ParaFragmentEqualityComparer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,GetHashCode,The following statement contains a magic number: int code = 23;
Magic Number,SIL.FieldWorks.IText,ParaFragmentEqualityComparer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,GetHashCode,The following statement contains a magic number: code = code * 31 + obj.Paragraph.GetHashCode();
Magic Number,SIL.FieldWorks.IText,ParaFragmentEqualityComparer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,GetHashCode,The following statement contains a magic number: code = code * 31 + obj.GetMyBeginOffsetInPara();
Magic Number,SIL.FieldWorks.IText,ParaFragmentEqualityComparer,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ComplexConcPatternModelTests.cs,GetHashCode,The following statement contains a magic number: code = code * 31 + obj.GetMyEndOffsetInPara();
Magic Number,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,ImportNewUserConfirmedWordGlossSeparatedFromToExistingWfiAnalysis,The following statement contains a magic number: Assert.That(Cache.ServiceLocator.GetInstance<IWfiAnalysisRepository>().Count' Is.EqualTo(2));
Magic Number,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,ImportUnknownPhraseWholeSegmentNoVersion_MakesSeparateWords,The following statement contains a magic number: Assert.That(seg.AnalysesRS.Count' Is.EqualTo(5).Or.EqualTo(0));
Magic Number,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,WordsFragDoc_OneWordAndMultiGloss,The following statement contains a magic number: Assert.That(wff1.AnalysesOC' Has.Count.EqualTo(2)' "multiple word glosses (without specifying morphology) should create separate WfiAnalyses with separate glosses");
Magic Number,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,WordsFragDoc_OneWordAndMultiGloss,The following statement contains a magic number: Assert.That(Cache.ServiceLocator.GetInstance<IWfiGlossRepository>().Count' Is.EqualTo(2));
Magic Number,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,WordsFragDoc_OneWordAndMultiGloss,The following statement contains a magic number: Assert.That(Cache.ServiceLocator.GetInstance<IWfiAnalysisRepository>().Count' Is.EqualTo(2));
Magic Number,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,WordsFragDoc_OneWordAndMultiGloss_AvoidDuplication,The following statement contains a magic number: Assert.That(wff1.AnalysesOC' Has.Count.EqualTo(2)' "multiple word glosses (without specifying morphology) should create separate WfiAnalyses with separate glosses");
Magic Number,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,WordsFragDoc_OneWordAndMultiGloss_AvoidDuplication,The following statement contains a magic number: Assert.That(Cache.ServiceLocator.GetInstance<IWfiGlossRepository>().Count' Is.EqualTo(2));
Magic Number,SIL.FieldWorks.IText,ImportInterlinearAnalysesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ImportInterlinearAnalysesTests.cs,WordsFragDoc_OneWordAndMultiGloss_AvoidDuplication,The following statement contains a magic number: Assert.That(Cache.ServiceLocator.GetInstance<IWfiAnalysisRepository>().Count' Is.EqualTo(2));
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportBasicInformation_FormSansMorph,The following statement contains a magic number: pa.BreakIntoMorphs(0' 2' new ArrayList{ leGo.LexemeFormOA' tssEnForm });
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportBasicInformation_FormSansMorph,The following statement contains a magic number: pa.SetMorphSense(0' 2' 0' leGo.SensesOS[0]);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportBasicInformation_FormSansMorph,The following statement contains a magic number: pa.SetMorphSense(0' 2' 1' leEn.SensesOS[0]);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportBasicInformation_FormSansMorph,The following statement contains a magic number: AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath($@"//morph[item[@type='txt' and @lang='{QaaXKal}']]"' 2);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_xml,The following statement contains a magic number: AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath(@"//phrase/item[@type='note']"' 2);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The following statement contains a magic number: AssertThatXmlIn.Dom(htmlDoc).HasSpecifiedNumberOfMatchesForXpath(@"//*[@class='itx_Freeform_gls']"' 3 + 1);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The following statement contains a magic number: AssertThatXmlIn.Dom(htmlDoc).HasSpecifiedNumberOfMatchesForXpath(@"//*[@class='itx_Freeform_lit']"' 3 + 1);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The following statement contains a magic number: AssertThatXmlIn.Dom(htmlDoc).HasSpecifiedNumberOfMatchesForXpath(@"//*[@class='itx_Freeform_note']"' 2);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The following statement contains a magic number: Assert.That(htmlDoc.SelectNodes(@"//*[@class='itx_Freeform_gls']")[3].InnerText' Is.EqualTo(tssFreeTranslation.Text));
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The following statement contains a magic number: Assert.That(htmlDoc.SelectNodes(@"//*[@class='itx_Freeform_lit']")[3].InnerText' Is.EqualTo(tssLitTranslation.Text));
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The following statement contains a magic number: AssertThatXmlIn.Dom(htmlDoc).HasSpecifiedNumberOfMatchesForXpath(@"//*[@class='itx_Words']"' 4);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The following statement contains a magic number: AssertThatXmlIn.Dom(htmlDoc).HasSpecifiedNumberOfMatchesForXpath(@"//*[@class='itx_Frame_Number']"' 4);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportFreeLiteralNoteLines_html,The following statement contains a magic number: AssertThatXmlIn.Dom(htmlDoc).HasSpecifiedNumberOfMatchesForXpath(@"//*[@class='itx_Frame_Word']"' 4);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportBasicInformation_multipleWss,The following statement contains a magic number: AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath(@"//morph/item[@type='cf']"' 2);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word_multipleWss,The following statement contains a magic number: Assert.That(transformedDocWord.SelectNodes("//*[text()='.pst']"' nsmgr)' Has.Count.EqualTo(2)' "Irregularly inflected types should only match the number of lines for LexGloss");
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_glsAppend_varianttypes_xml2Word2007_multipleWss,The following statement contains a magic number: Assert.That(transformedDocWord.SelectNodes("//*[text()='.pst']"' nsmgr)' Has.Count.EqualTo(2)' "Irregularly inflected types should only match the number of lines for LexGloss");
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ExportIrrInflVariantTypeInformation_LT7581_gls_multiEngWss,The following statement contains a magic number: Assert.That(transformedDocWord.SelectNodes("//*[text()='glossgo']"' nsmgr)' Has.Count.EqualTo(2)' "Should only have one LexGloss per line");
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTestsForELAN,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ValidateMultipleTitlesAndAbbreviations,The following statement contains a magic number: AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath("//interlinear-text/item[@type=\"title\"]"' 2);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTestsForELAN,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ValidateMultipleTitlesAndAbbreviations,The following statement contains a magic number: AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath("//interlinear-text/item[@type=\"title-abbreviation\"]"' 2);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTestsForELAN,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ValidateMultipleSources,The following statement contains a magic number: AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath("//interlinear-text/item[@type=\"source\"]"' 2);
Magic Number,SIL.FieldWorks.IText,InterlinearExporterTestsForELAN,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinearExporterTests.cs,ValidateMultipleComments,The following statement contains a magic number: AssertThatXmlIn.Dom(exportedDoc).HasSpecifiedNumberOfMatchesForXpath("//interlinear-text/item[@type=\"comment\"]"' 2);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportMergeFlexTextWithSegnumItem,The following statement contains a magic number: Assert.True(analyses.Count.Equals(2));
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexTextPhraseWithoutGuidMergesIntoParagraphOfSibling,The following statement contains a magic number: Assert.True(para.SegmentsOS.Count.Equals(2));
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexTextPhraseWithoutGuidMergesIntoParagraphOfSibling,The following statement contains a magic number: Assert.True(mergedPara.SegmentsOS.Count.Equals(3));
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexTextPhraseWithoutGuidMergesIntoParagraphOfSibling,The following statement contains a magic number: Assert.False(mergedPara.SegmentsOS[2].Guid.Equals(segGuid));
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexTextNewParagraphCreatesNewParagraph_OriginalIsUnchanged,The following statement contains a magic number: Assert.True(text.ContentsOA.ParagraphsOS.Count.Equals(2));
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexText_NotesWithMatchingContentMerges,The following statement contains a magic number: Assert.AreEqual(3' para.SegmentsOS[0].NotesOS.Count);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexText_NotesWithMatchingContentMerges,The following statement contains a magic number: Assert.AreEqual("Une note pour le premier xml."' para.SegmentsOS[0].NotesOS[2].Content.get_String(wsFr).Text);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexText_NotesWithMatchingContentMerges,The following statement contains a magic number: Assert.AreEqual(4' para.SegmentsOS[0].NotesOS.Count);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexText_NotesWithMatchingContentMerges,The following statement contains a magic number: Assert.AreEqual("Une note pour le premier xml."' para.SegmentsOS[0].NotesOS[2].Content.get_String(wsFr).Text' "The third note should note have changed.");
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestMergeFlexText_NotesWithMatchingContentMerges,The following statement contains a magic number: Assert.AreEqual("Note in second xml."' para.SegmentsOS[0].NotesOS[3].Content.get_String(wsEng).Text' "A new note should have been added.");
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundPunct,The following statement contains a magic number: var spaceOne = para.Contents.Text.Substring(2' 1);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundPunct,The following statement contains a magic number: var spaceTwo = para.Contents.Text.Substring(5' 1);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundPunct,The following statement contains a magic number: var spaceThree = para.Contents.Text.Substring(9' 1);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundPunct,The following statement contains a magic number: var spaceFour = para.Contents.Text.Substring(13' 1);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundPunct,The following statement contains a magic number: var spaceFive = para.Contents.Text.Substring(15' 1);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundPunct,The following statement contains a magic number: Assert.AreEqual(6' para.Contents.Text.Split(spaceArray).Length);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundSpanishPunct,The following statement contains a magic number: var spaceOne = para.Contents.Text.Substring(2' 1);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundSpanishPunct,The following statement contains a magic number: var spaceTwo = para.Contents.Text.Substring(6' 1);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundSpanishPunct,The following statement contains a magic number: var spaceThree = para.Contents.Text.Substring(10' 1);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundSpanishPunct,The following statement contains a magic number: var spaceFour = para.Contents.Text.Substring(13' 1);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundSpanishPunct,The following statement contains a magic number: var spaceFive = para.Contents.Text.Substring(17' 1);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundSpanishPunct,The following statement contains a magic number: var spaceSix = para.Contents.Text.Substring(21' 1);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesAroundSpanishPunct,The following statement contains a magic number: Assert.AreEqual(7' para.Contents.Text.Split(spaceArray).Length);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesBetweenWords,The following statement contains a magic number: var wordAfter = para.Contents.Text.Substring(2' 5);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesBetweenWords,The following statement contains a magic number: var wordAfter = para.Contents.Text.Substring(2' 5);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestSpacesBetweenWords,The following statement contains a magic number: var spaceTwo = para.Contents.Text.Substring(7' 1);
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportMergeInELANData,The following statement contains a magic number: Assert.AreEqual(2' li.NumTimesDlgShown' "The user should have been prompted again to merge the text with the same Guid.");
Magic Number,SIL.FieldWorks.IText,BIRDFormatImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\BIRDFormatImportTests.cs,TestImportTwiceWithoutMerge,The following statement contains a magic number: Assert.AreEqual(2' Cache.LanguageProject.Texts.Count' "We imported twice and didn't merge; there should be two texts.");
Magic Number,SIL.FieldWorks.IText,FocusBoxControllerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinDocForAnalysisTests.cs,OnAddWordGlossesToFreeTrans_ORCs,The following statement contains a magic number: TsStringUtils.InsertOrcIntoPara(footnoteGuid' FwObjDataTypes.kodtOwnNameGuidHot'  				strBldr' 7' 7' Cache.DefaultVernWs);
Magic Number,SIL.FieldWorks.IText,FocusBoxControllerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinDocForAnalysisTests.cs,OnAddWordGlossesToFreeTrans_ORCs,The following statement contains a magic number: TsStringUtils.InsertOrcIntoPara(footnoteGuid' FwObjDataTypes.kodtOwnNameGuidHot'  				strBldr' 7' 7' Cache.DefaultVernWs);
Magic Number,SIL.FieldWorks.IText,FocusBoxControllerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinDocForAnalysisTests.cs,OnAddWordGlossesToFreeTrans_ORCs,The following statement contains a magic number: TsStringUtils.InsertOrcIntoPara(footnoteGuid' FwObjDataTypes.kodtNameGuidHot'  				strBldr' 4' 4' Cache.DefaultAnalWs);
Magic Number,SIL.FieldWorks.IText,FocusBoxControllerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinDocForAnalysisTests.cs,OnAddWordGlossesToFreeTrans_ORCs,The following statement contains a magic number: TsStringUtils.InsertOrcIntoPara(footnoteGuid' FwObjDataTypes.kodtNameGuidHot'  				strBldr' 4' 4' Cache.DefaultAnalWs);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: choices.Add(InterlinLineChoices.kflidLexGloss' 3003);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexPos' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[4].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordGloss' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordPos' choices[6].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidFreeTrans' choices[7].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.AreEqual(WritingSystemServices.kwsFirstAnal' choices[3].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.AreEqual(3003' choices[4].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.AreEqual(3003' choices[4].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.IsFalse(choices[7].WordLevel);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.IsFalse(choices[6].MorphemeLevel);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.IsTrue(choices[2].LexEntryLevel);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.IsTrue(choices[3].LexEntryLevel);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.IsTrue(choices[4].LexEntryLevel);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.IsFalse(choices[5].LexEntryLevel);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.IsFalse(choices[6].LexEntryLevel);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.IsFalse(choices[7].LexEntryLevel);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddFields,The following statement contains a magic number: Assert.AreEqual(2' choices.FirstLexEntryIndex);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordGloss' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordPos' choices[4].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidFreeTrans' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.IsTrue(choices.OkToRemove(choices[2]' out msg));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.IsTrue(choices.OkToRemove(choices[3]' out msg));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.IsTrue(choices.OkToRemove(choices[4]' out msg));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.IsTrue(choices.OkToRemove(choices[5]' out msg));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordGloss' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordPos' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidFreeTrans' choices[4].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.AreEqual(5' choices.Count);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.AreEqual(7' choices.Count);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: choices.Remove(choices[2]);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,AddRemoveEditFields,The following statement contains a magic number: Assert.AreEqual(6' choices.Count);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(2));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(3));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(4));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(5));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(6));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.IsFalse(choices.OkToMoveUp(7));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(8));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWord' choices[4].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: choices.MoveUp(2);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidMorphemes' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: choices.MoveUp(3);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: choices.MoveUp(5);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidMorphemes' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: choices.MoveUp(6);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordPos' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordGloss' choices[6].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: choices.MoveUp(8);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLitTrans' choices[7].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidFreeTrans' choices[8].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(2));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(3));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(4));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(5));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(6));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsFalse(choices.OkToMoveUp(7));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(8));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveUp(4);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexPos' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[4].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveUp(5);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidMorphemes' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(2));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveUp(2);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordGloss' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveUp(6);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordPos' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordGloss' choices[6].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveUp(8);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLitTrans' choices[7].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidFreeTrans' choices[8].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.Add(InterlinLineChoices.kflidLexGloss' 3004);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(2' wsList.Count);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(3004' wsList[1]);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[4].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveDown(4);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(5));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveUp(5);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[4].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(3004' choices[4].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(3004' choices[4].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexPos' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(5));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(4));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveUp(4);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(3004' choices[3].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(3004' choices[3].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[4].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(WritingSystemServices.kwsFirstAnal' choices[4].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(3));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.Add(InterlinLineChoices.kflidLexEntries' 3005);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(2' wsList.Count);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(3005' wsList[1]);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveDown(3);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveDown(4);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(5));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveUp(5);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(4));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveUp(4);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(3005' choices[3].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(3005' choices[3].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[4].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(WritingSystemServices.kwsFirstAnal' choices[4].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(3));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.Add(InterlinLineChoices.kflidMorphemes' 3006);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(2' wsList.Count);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidMorphemes' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveDown(2);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveDown(3);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveDown(4);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidMorphemes' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(5));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveUp(5);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(4));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveUp(4);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(3));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.MoveUp(3);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidMorphemes' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(3006' choices[2].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(3006' choices[2].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveUp(2));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: choices.Add(InterlinLineChoices.kflidWord' 3007);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveUp,The following statement contains a magic number: Assert.AreEqual(2' wsList.Count);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveDown(2));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveDown(3));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveDown(4));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveDown(5));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.IsFalse(choices.OkToMoveDown(6));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveDown(7));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.IsFalse(choices.OkToMoveDown(8));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWord' choices[4].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidMorphemes' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: choices.MoveDown(4);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidMorphemes' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: choices.MoveDown(5);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordPos' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordGloss' choices[6].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: choices.MoveDown(7);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLitTrans' choices[7].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,MoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidFreeTrans' choices[8].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveDown(2));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveDown(3));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveDown(4));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveDown(5));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.IsFalse(choices.OkToMoveDown(6));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.IsTrue(choices.OkToMoveDown(7));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.IsFalse(choices.OkToMoveDown(8));
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: choices.MoveDown(3);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexPos' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[4].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: choices.MoveDown(4);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidMorphemes' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordGloss' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: choices.MoveDown(5);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordPos' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordGloss' choices[6].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: choices.MoveDown(7);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLitTrans' choices[7].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,EditMoveDown,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidFreeTrans' choices[8].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexPos' choices[4].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordGloss' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordPos' choices[6].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidFreeTrans' choices[7].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLitTrans' choices[8].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(wsEng' choices[5].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(wsFrn' choices[2].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexEntries' choices[2].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[3].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexGloss' choices[4].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLexPos' choices[5].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordGloss' choices[6].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidWordPos' choices[7].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidFreeTrans' choices[8].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(InterlinLineChoices.kflidLitTrans' choices[9].Flid);
Magic Number,SIL.FieldWorks.IText,InterlinLineChoicesTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinLineChoicesTests.cs,Persistence,The following statement contains a magic number: Assert.AreEqual(wsGer' choices[4].WritingSystem);
Magic Number,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,EncodingConverters,The following statement contains a magic number: var input = new ByteReader("input2"' Encoding.GetEncoding(1252).GetBytes(input2));
Magic Number,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,MultipleTexts,The following statement contains a magic number: var input = new ByteReader("input3"' Encoding.GetEncoding(1252).GetBytes(input3));
Magic Number,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,MultipleTexts,The following statement contains a magic number: textElt = outputElt.Elements("interlinear-text").Skip(2).First();
Magic Number,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,MultipleTexts,The following statement contains a magic number: textElt = outputElt.Elements("interlinear-text").Skip(3).First();
Magic Number,SIL.FieldWorks.IText,InterlinSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinSfmImportTests.cs,MultipleFileSplitAndJoin,The following statement contains a magic number: Assert.That(output.Length' Is.EqualTo(2));
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,ParseTestText,The following statement contains a magic number: var coords = new int[8' 2] { { 0' 0 }' { 0' 1 }' { 0' 2 }' { 1' 0 }' { 1' 1 }' { 1' 2 }' { 2' 0 }' { 2' 1 } };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,ParseTestText,The following statement contains a magic number: var coords = new int[8' 2] { { 0' 0 }' { 0' 1 }' { 0' 2 }' { 1' 0 }' { 1' 1 }' { 1' 2 }' { 2' 0 }' { 2' 1 } };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,ParseTestText,The following statement contains a magic number: var coords = new int[8' 2] { { 0' 0 }' { 0' 1 }' { 0' 2 }' { 1' 0 }' { 1' 1 }' { 1' 2 }' { 2' 0 }' { 2' 1 } };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,ParseTestText,The following statement contains a magic number: var coords = new int[8' 2] { { 0' 0 }' { 0' 1 }' { 0' 2 }' { 1' 0 }' { 1' 1 }' { 1' 2 }' { 2' 0 }' { 2' 1 } };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,ParseTestText,The following statement contains a magic number: var coords = new int[8' 2] { { 0' 0 }' { 0' 1 }' { 0' 2 }' { 1' 0 }' { 1' 1 }' { 1' 2 }' { 2' 0 }' { 2' 1 } };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,ParseTestText,The following statement contains a magic number: var coords = new int[8' 2] { { 0' 0 }' { 0' 1 }' { 0' 2 }' { 1' 0 }' { 1' 1 }' { 1' 2 }' { 2' 0 }' { 2' 1 } };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,ParseTestText,The following statement contains a magic number: m_occurrences = new AnalysisOccurrence[8];
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,ParseTestText,The following statement contains a magic number: i < 8
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_MarkupTags,The following statement contains a magic number: Assert.AreEqual(2' strip.Items.Count);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_MarkupTags,The following statement contains a magic number: ToolStripMenuItem itemMDC = AssertHasMenuWithText(strip.Items' kFTO_Syntax' 3);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_MarkupTags,The following statement contains a magic number: ToolStripMenuItem itemMDC2 = AssertHasMenuWithText(strip.Items' kFTO_RRG_Semantics' 3);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTag_CompleteWith3Wordforms,The following statement contains a magic number: var tempList = new List<AnalysisOccurrence> {m_occurrences[0]' m_occurrences[1]' m_occurrences[2]};
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTag_CompleteWith3Wordforms,The following statement contains a magic number: VerifyTextTag(ttag' m_possTags[0]' tempList[0]' tempList[2]);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_CompleteOverlap,The following statement contains a magic number: var tempList = new List<AnalysisOccurrence> {m_occurrences[1]' m_occurrences[2]};
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_FrontOverlap,The following statement contains a magic number: var tempList = new List<AnalysisOccurrence> {m_occurrences[1]' m_occurrences[2]};
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_RearOverlap,The following statement contains a magic number: var tempList = new List<AnalysisOccurrence> {m_occurrences[1]' m_occurrences[2]};
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_RearOverlap,The following statement contains a magic number: var tempList1 = new List<AnalysisOccurrence> { m_occurrences[2]' m_occurrences[3]' m_occurrences[4] };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_RearOverlap,The following statement contains a magic number: var tempList1 = new List<AnalysisOccurrence> { m_occurrences[2]' m_occurrences[3]' m_occurrences[4] };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_RearOverlap,The following statement contains a magic number: var tempList1 = new List<AnalysisOccurrence> { m_occurrences[2]' m_occurrences[3]' m_occurrences[4] };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_RearOverlap,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do("UndoTagTest"' "RedoTagTest"' Cache.ActionHandlerAccessor' () =>  				{  					tagSUT = m_tagChild.CallMakeTextTagInstance(m_possTags[2]);  					if (tagSUT != null)  						hvoSUTTag = tagSUT.Hvo;  				});
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_RearOverlap,The following statement contains a magic number: VerifyTextTag(tagSUT' m_possTags[2]' tempList1[0]' tempList1[2]);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_RearOverlap,The following statement contains a magic number: VerifyTextTag(tagSUT' m_possTags[2]' tempList1[0]' tempList1[2]);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_MultipleExistTags_Overlap,The following statement contains a magic number: var tempList = new List<AnalysisOccurrence> {m_occurrences[1]' m_occurrences[2]};
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_MultipleExistTags_Overlap,The following statement contains a magic number: var tempList1 = new List<AnalysisOccurrence> { m_occurrences[3]' m_occurrences[4] };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_MultipleExistTags_Overlap,The following statement contains a magic number: var tempList1 = new List<AnalysisOccurrence> { m_occurrences[3]' m_occurrences[4] };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_MultipleExistTags_Overlap,The following statement contains a magic number: var tempList2 = new List<AnalysisOccurrence> { m_occurrences[2]' m_occurrences[3] };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_MultipleExistTags_Overlap,The following statement contains a magic number: var tempList2 = new List<AnalysisOccurrence> { m_occurrences[2]' m_occurrences[3] };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_MultipleExistTags_Overlap,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do("UndoTagTest"' "RedoTagTest"' Cache.ActionHandlerAccessor' () =>  				{  					tagSUT = m_tagChild.CallMakeTextTagInstance(m_possTags[2]);  					if (tagSUT != null)  						hvoSUTTag = tagSUT.Hvo;  				});
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_MultipleExistTags_Overlap,The following statement contains a magic number: VerifyTextTag(tagSUT' m_possTags[2]' tempList2[0]' tempList2[1]);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_NoOverlap,The following statement contains a magic number: var tempList1 = new List<AnalysisOccurrence> {m_occurrences[2]' m_occurrences[3]' m_occurrences[4]};
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_NoOverlap,The following statement contains a magic number: var tempList1 = new List<AnalysisOccurrence> {m_occurrences[2]' m_occurrences[3]' m_occurrences[4]};
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_NoOverlap,The following statement contains a magic number: var tempList1 = new List<AnalysisOccurrence> {m_occurrences[2]' m_occurrences[3]' m_occurrences[4]};
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_NoOverlap,The following statement contains a magic number: UndoableUnitOfWorkHelper.Do("UndoTagTest"' "RedoTagTest"' Cache.ActionHandlerAccessor' () =>  				{  					tagSUT = m_tagChild.CallMakeTextTagInstance(m_possTags[2]);  					if (tagSUT != null)  						hvoTagSUT = tagSUT.Hvo;  				});
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_NoOverlap,The following statement contains a magic number: VerifyTextTag(tagSUT' m_possTags[2]' tempList1[0]' tempList1[2]);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeTagAnnot_ExistTag_NoOverlap,The following statement contains a magic number: VerifyTextTag(tagSUT' m_possTags[2]' tempList1[0]' tempList1[2]);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,DeleteTagAnnot_SetOfTwo,The following statement contains a magic number: tempList = new List<AnalysisOccurrence> {m_occurrences[2]' m_occurrences[3]' m_occurrences[4]};
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,DeleteTagAnnot_SetOfTwo,The following statement contains a magic number: tempList = new List<AnalysisOccurrence> {m_occurrences[2]' m_occurrences[3]' m_occurrences[4]};
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,DeleteTagAnnot_SetOfTwo,The following statement contains a magic number: tempList = new List<AnalysisOccurrence> {m_occurrences[2]' m_occurrences[3]' m_occurrences[4]};
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_CheckedStates_NoSel,The following statement contains a magic number: var subMenu = AssertHasMenuWithText(menu.Items' "Syntax"' 3);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_CheckedStates_SelMatchesTag,The following statement contains a magic number: var subList = AssertHasMenuWithText(menu.Items' kFTO_RRG_Semantics' 3);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_CheckedStates_SelFirstOfTag,The following statement contains a magic number: var tempList = new List<AnalysisOccurrence> { m_occurrences[0]' m_occurrences[1]' m_occurrences[2] };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_CheckedStates_SelFirstOfTag,The following statement contains a magic number: tempList.Remove(m_occurrences[2]);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_CheckedStates_SelFirstOfTag,The following statement contains a magic number: var subList = AssertHasMenuWithText(menu.Items' kFTO_RRG_Semantics' 3);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_CheckedStates_MultiAnnSelLast,The following statement contains a magic number: var tempList = new List<AnalysisOccurrence> { m_occurrences[0]' m_occurrences[1]' m_occurrences[2] };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_CheckedStates_MultiAnnSelLast,The following statement contains a magic number: var subList = AssertHasMenuWithText(menu.Items' kFTO_RRG_Semantics' 3);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_CheckedStates_MultiAnnSelExtra,The following statement contains a magic number: var tempList = new List<AnalysisOccurrence> { m_occurrences[1]' m_occurrences[2] };
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_CheckedStates_MultiAnnSelExtra,The following statement contains a magic number: tempList.Add(m_occurrences[3]);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_CheckedStates_MultiAnnSelExtra,The following statement contains a magic number: var subList = AssertHasMenuWithText(menu.Items' kFTO_RRG_Semantics' 3);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_CheckedStates_SelCoversMultiSideBySideAnn,The following statement contains a magic number: tempList.Add(m_occurrences[2]);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_CheckedStates_SelCoversMultiSideBySideAnn,The following statement contains a magic number: tempList.Add(m_occurrences[3]);
Magic Number,SIL.FieldWorks.IText,InterlinTaggingTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\InterlinTaggingTests.cs,MakeContextMenu_CheckedStates_SelCoversMultiSideBySideAnn,The following statement contains a magic number: var subList = AssertHasMenuWithText(menu.Items' kFTO_RRG_Semantics' 3);
Magic Number,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The following statement contains a magic number: Assert.AreEqual(2' morphs.Count'  							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord1_morphs2' baseWord1));
Magic Number,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The following statement contains a magic number: Assert.AreEqual(3' morphs.Count'  							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord1_morphs3' baseWord1));
Magic Number,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The following statement contains a magic number: Assert.AreEqual("-s"' morphs[2]);
Magic Number,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The following statement contains a magic number: Assert.AreEqual(2' morphs.Count'  							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord2_morphs2' baseWord2));
Magic Number,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The following statement contains a magic number: Assert.AreEqual(3' morphs.Count'  							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord2_morphs3' baseWord2));
Magic Number,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The following statement contains a magic number: Assert.AreEqual("-la"' morphs[2]);
Magic Number,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The following statement contains a magic number: Assert.AreEqual(3' morphs.Count'  							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord3_morphs2' baseWord3));
Magic Number,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The following statement contains a magic number: Assert.AreEqual("xxxpus xxxyalola"' morphs[2]);
Magic Number,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The following statement contains a magic number: Assert.AreEqual(2' morphs.Count'  							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord4_morphs2' baseWord4));
Magic Number,SIL.FieldWorks.IText,MorphemeBreakerTest,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\MorphemeBreakerTests.cs,Phrase_BreakIntoMorphs,The following statement contains a magic number: Assert.AreEqual(2' morphs.Count'  							String.Format("Unexpected number of morphs in string '{0}' compared to baseWord '{1}'."' baseWord5_morphs2' baseWord5));
Magic Number,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,HandleTab,The following statement contains a magic number: VerifySelection(sandbox' false' SandboxBase.ktagSbNamedObjName' SandboxBase.ktagSbMorphForm' 2);
Magic Number,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,HandleTab,The following statement contains a magic number: VerifySelection(sandbox' false' SandboxBase.ktagSbMorphPrefix' 0' 3);
Magic Number,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,HandleTab,The following statement contains a magic number: VerifySelection(sandbox' true' SandboxBase.ktagSbNamedObjName' SandboxBase.ktagSbMorphEntry' 2);
Magic Number,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,HandleTab,The following statement contains a magic number: VerifySelection(sandbox' true' SandboxBase.ktagSbNamedObjName' SandboxBase.ktagSbMorphEntry' 3);
Magic Number,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,HandleTab,The following statement contains a magic number: VerifySelection(sandbox' true' SandboxBase.ktagSbNamedObjName' SandboxBase.ktagSbMorphEntry' 3);
Magic Number,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,HandleTab,The following statement contains a magic number: VerifySelection(sandbox' true' SandboxBase.ktagSbNamedObjName' SandboxBase.ktagSbMorphEntry' 2);
Magic Number,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,HandleTab,The following statement contains a magic number: VerifySelection(sandbox' false' SandboxBase.ktagSbMorphPrefix' 0' 3);
Magic Number,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,HandleTab,The following statement contains a magic number: VerifySelection(sandbox' false' SandboxBase.ktagSbNamedObjName' SandboxBase.ktagSbMorphForm' 2);
Magic Number,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,GetBestGloss,The following statement contains a magic number: int hvoAbc = 123456;
Magic Number,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,GetBestGloss,The following statement contains a magic number: Assert.That(SandboxBase.GetRealAnalysisMethod.GetBestGloss(wa' wsIds' sda' 27)' Is.Null);
Magic Number,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,GetBestGloss,The following statement contains a magic number: int hvoDef = 123457;
Magic Number,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,LexEntriesComboHandler_ItemsInComboForInflVariant,The following statement contains a magic number: Assert.That(handlerList[2].ToString()' Is.EqualTo("    Add New Sense..."));
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorDoesNothingWhenTurnedOff,The following statement contains a magic number: mockDa.StringValues[new Tuple<int' int>(27' StTxtParaTags.kflidContents)] = TsStringUtils.MakeString(underlyingValue' 77);
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorDoesNothingWhenTurnedOff,The following statement contains a magic number: mockDa.StringValues[new Tuple<int' int>(27' StTxtParaTags.kflidContents)] = TsStringUtils.MakeString(underlyingValue' 77);
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorDoesNothingWhenTurnedOff,The following statement contains a magic number: var tss = decorator.get_StringProp(27' StTxtParaTags.kflidContents);
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorGetHandlesEmptyStringWhenTurnedOn,The following statement contains a magic number: mockDa.StringValues[new Tuple<int' int>(27' StTxtParaTags.kflidContents)] = TsStringUtils.MakeString(underlyingValue' 77);
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorGetHandlesEmptyStringWhenTurnedOn,The following statement contains a magic number: mockDa.StringValues[new Tuple<int' int>(27' StTxtParaTags.kflidContents)] = TsStringUtils.MakeString(underlyingValue' 77);
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorGetHandlesEmptyStringWhenTurnedOn,The following statement contains a magic number: var tss = decorator.get_StringProp(27' StTxtParaTags.kflidContents);
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorReplacesZwsWithGreySpaceWhenTurnedOn,The following statement contains a magic number: mockDa.StringValues[new Tuple<int' int>(27' StTxtParaTags.kflidContents)] = TsStringUtils.MakeString(underlyingValue' 77);
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorReplacesZwsWithGreySpaceWhenTurnedOn,The following statement contains a magic number: mockDa.StringValues[new Tuple<int' int>(27' StTxtParaTags.kflidContents)] = TsStringUtils.MakeString(underlyingValue' 77);
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorReplacesZwsWithGreySpaceWhenTurnedOn,The following statement contains a magic number: var tss = decorator.get_StringProp(27' StTxtParaTags.kflidContents);
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorReplacesGreySpaceWithZwsWhenTurnedOn,The following statement contains a magic number: var bldr = TsStringUtils.MakeString(underlyingValue' 77).GetBldr();
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorReplacesGreySpaceWithZwsWhenTurnedOn,The following statement contains a magic number: decorator.SetString(27' StTxtParaTags.kflidContents' bldr.GetString());
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorReplacesGreySpaceWithZwsWhenTurnedOn,The following statement contains a magic number: var tss = mockDa.StringValues[new Tuple<int' int>(27' StTxtParaTags.kflidContents)];
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorSetHandlesEmptyStringWhenTurnedOn,The following statement contains a magic number: var bldr = TsStringUtils.MakeString(underlyingValue' 77).GetBldr();
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorSetHandlesEmptyStringWhenTurnedOn,The following statement contains a magic number: decorator.SetString(27' StTxtParaTags.kflidContents' bldr.GetString());
Magic Number,SIL.FieldWorks.IText,ShowSpaceDecoratorTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\ShowSpaceDecoratorTests.cs,DecoratorSetHandlesEmptyStringWhenTurnedOn,The following statement contains a magic number: var tss = mockDa.StringValues[new Tuple<int' int>(27' StTxtParaTags.kflidContents)];
Magic Number,SIL.FieldWorks.IText,TextsTriStateTreeViewTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\TextsTriStateTreeViewTests.cs,ExpandBook_FillsInVerses,The following statement contains a magic number: Assert.AreEqual(2' m_bookNode.Nodes.Count' "Both Verses and Footnote should have been added");
Magic Number,SIL.FieldWorks.IText,TextsTriStateTreeViewTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\TextsTriStateTreeViewTests.cs,CreateViewWithEmptyBook,The following statement contains a magic number: m_bookNode = new TreeNode("II Hezekiah"' new[] { dummyVersesNode }) { Name = "Book"' Tag = 7 };
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundNotPartial,The following statement contains a magic number: Assert.True(breakLocs.Length == 2);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundNotPartial,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 5);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundNotLongest,The following statement contains a magic number: Assert.True(breakLocs.Length == 4);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundNotLongest,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 3 && breakLocs[2] == 7 && breakLocs[3] == 9);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundNotLongest,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 3 && breakLocs[2] == 7 && breakLocs[3] == 9);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundNotLongest,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 3 && breakLocs[2] == 7 && breakLocs[3] == 9);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundNotLongest,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 3 && breakLocs[2] == 7 && breakLocs[3] == 9);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundNotLongest,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 3 && breakLocs[2] == 7 && breakLocs[3] == 9);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundMoreRobust,The following statement contains a magic number: Assert.True(breakLocs.Length == 4);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundMoreRobust,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 3 && breakLocs[2] == 7 && breakLocs[3] == 9);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundMoreRobust,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 3 && breakLocs[2] == 7 && breakLocs[3] == 9);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundMoreRobust,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 3 && breakLocs[2] == 7 && breakLocs[3] == 9);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundMoreRobust,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 3 && breakLocs[2] == 7 && breakLocs[3] == 9);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundMoreRobust,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 3 && breakLocs[2] == 7 && breakLocs[3] == 9);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundPunctuationTest,The following statement contains a magic number: Assert.True(breakLocs.Length == 11);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundPunctuationTest,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 5 && breakLocs[2] == 10 && breakLocs[10] == 61);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundPunctuationTest,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 5 && breakLocs[2] == 10 && breakLocs[10] == 61);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundPunctuationTest,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 5 && breakLocs[2] == 10 && breakLocs[10] == 61);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundPunctuationTest,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 5 && breakLocs[2] == 10 && breakLocs[10] == 61);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,BestFoundPunctuationTest,The following statement contains a magic number: Assert.True(breakLocs[0] == 0 && breakLocs[1] == 5 && breakLocs[2] == 10 && breakLocs[10] == 61);
Magic Number,SIL.FieldWorks.IText,WordBreakGuesserTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\WordBreakGuesserTests.cs,DontDieOnLongData,The following statement contains a magic number: Assert.True(breakLocs.Length == 165);
Missing Default,SIL.FieldWorks.IText,SandboxBaseTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Interlinear\ITextDllTests\SandboxBaseTests.cs,GetComboHandler,The following switch statement is missing a default case: switch (flid)  			{  				case InterlinLineChoices.kflidMorphemes:  					tagIcon = SandboxBase.ktagMorphFormIcon;  					break;  				case InterlinLineChoices.kflidLexEntries:  					tagIcon = SandboxBase.ktagMorphEntryIcon;  					break;  				case InterlinLineChoices.kflidWordGloss:  					tagIcon = SandboxBase.ktagWordGlossIcon;  					break;  				case InterlinLineChoices.kflidWordPos:  					tagIcon = SandboxBase.ktagWordPosIcon;  					break;  			}
