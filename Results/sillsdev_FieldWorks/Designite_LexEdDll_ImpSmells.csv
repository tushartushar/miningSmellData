Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,GenerateChildNode,The method has 149 lines of code.
Long Method,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,SetupContextMenuStrip,The method has 119 lines of code.
Long Method,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntryVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,Display,The method has 178 lines of code.
Complex Method,SIL.FieldWorks.XWorks.LexEd,DeleteEntriesSensesWithoutInterlinearization,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\DeleteEntriesSensesWithoutInterlinearization.cs,DeleteUnusedEntriesAndSenses,Cyclomatic complexity of the method is 17
Complex Method,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,OnLiftBridge,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,NotesFileIsPresent,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.XWorks.LexEd,EntrySequenceVectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\EntrySequenceReferenceLauncher.cs,OnProblemDeletion,Cyclomatic complexity of the method is 12
Complex Method,SIL.FieldWorks.XWorks.LexEd,LexEntryMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryMenuHandler.cs,OnDisplayDataTreeInsert,Cyclomatic complexity of the method is 12
Complex Method,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,SetupContextMenuStrip,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncherView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncherView.cs,PropChanged,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntrySliceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,ConvertDummiesToReal,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntrySliceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,GetReversalFormsAndCheckExisting,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntrySliceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,LoadDummyCache,Cyclomatic complexity of the method is 15
Complex Method,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntrySliceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,HandleSelectionChange,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.XWorks.LexEd,ReversalListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalListener.cs,Init,Cyclomatic complexity of the method is 9
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,EntrySequenceReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\EntrySequenceReferenceLauncher.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,AddPrimaryLexemeChooserCommand,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\EntrySequenceReferenceLauncher.cs,AddPrimaryLexemeChooserCommand,The method has 7 parameters. Parameters: cache' fCloseBeforeExecuting' sLabel' mediator' propertyTable' lexEntryRef' parentWindow
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,AddComplexFormChooserCommand,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\EntrySequenceReferenceLauncher.cs,AddComplexFormChooserCommand,The method has 7 parameters. Parameters: cache' fCloseBeforeExecuting' sLabel' mediator' propertyTable' lexEntry' parentWindow
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,ConcOccurrenceBrowseView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FindExampleSentenceDlg.cs,Init,The method has 5 parameters. Parameters: mediator' propertyTable' xnBrowseViewControlParameters' pubView' sda
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,GenerateChildren,The method has 8 parameters. Parameters: node' caller' obj' indent' insPos' path' reuseMap' fUsePersistentExpansion
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,GenerateChildNode,The method has 7 parameters. Parameters: iChild' node' caller' indent' insPos' path' reuseMap
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,MSADlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MSADlgLauncher.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,MSADlglauncherView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MSADlglauncherView.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncher.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncher.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncherView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncherView.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,ReversalEntryGoDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryGoDlg.cs,SetDlgInfo,The method has 5 parameters. Parameters: cache' wp' mediator' propertyTable' form
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,ReversalIndexPOSRecordList,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryPOS.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntryFormSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntryFormSlice.cs,ReversalIndexEntryFormSlice,The method has 7 parameters. Parameters: cache' editor' flid' node' obj' persistenceProvider' ws
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntrySlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntrySliceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,GetReversalFormsAndCheckExisting,The method has 6 parameters. Parameters: currentEntries' hvoIndex' wsIndex' irieSense' hvoEntry' rgsFromDummy
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntrySliceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,FindMatchingReversalEntry,The method has 6 parameters. Parameters: rgsForms' rghvoOwners' rgrieMatching' idxForms' maxLevel' maxOwner
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,ReversalEntryDataAccess,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,PropChanged,The method has 7 parameters. Parameters: _nchng' _ct' hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,ReversalEntryDataAccess,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,CacheReplace,The method has 6 parameters. Parameters: hvoObj' tag' ihvoMin' ihvoLim' _rghvo' chvo
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,RoledParticipantsSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RoledParticipantsSlice.cs,GenerateChildren,The method has 8 parameters. Parameters: node' caller' obj' indent' insPos' path' reuseMap' fUsePersistentExpansion
Long Parameter List,SIL.FieldWorks.XWorks.LexEd,RoledParticipantsSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RoledParticipantsSlice.cs,GenerateChildNode,The method has 7 parameters. Parameters: roledPartic' node' caller' indent' insPos' path' reuseMap
Long Identifier,SIL.FieldWorks.XWorks.LexEd,GhostLexRefLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\GhostLexRefSlice.cs,AddItem,The length of the parameter unspecComplexFormEntryTypeGuid is 30.
Long Identifier,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncher.cs,,The length of the parameter m_msaInflectionFeatureListDlgLauncherView is 41.
Long Identifier,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncher.cs,,The length of the parameter m_PhonologicalFeatureListDlgLauncherView is 40.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeFirstSendReceiveInstructionsDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeFirstSendReceiveInstructionsDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FLExBridgeFirstSendReceiveInstructionsDlg)); " is 161.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,OnDisplayFLExLiftBridge,The length of the statement  "				display.Enabled = display.Enabled && FLExBridgeHelper.FixItAppExists && FLExBridgeHelper.DoesProjectHaveFlexRepo(Cache.ProjectId); " is 130.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,RunFLExLiftBridge,The length of the statement  "			var bridgeLastUsed = _propertyTable.GetStringProperty("LastBridgeUsed"' "FLExBridge"' PropertyTable.SettingsGroup.LocalSettings); " is 129.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,OnObtainAnyFlexBridgeProject,The length of the statement  "			var newprojectPathname = ObtainProjectMethod.ObtainProjectFromAnySource(_parentForm' _propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")' " is 150.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,OnObtainAnyFlexBridgeProject,The length of the statement  "			_propertyTable.SetProperty("LastBridgeUsed"' obtainedProjectType == ObtainedProjectType.Lift ? "LiftBridge" : "FLExBridge"' " is 123.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,OnObtainLiftProject,The length of the statement  "				MessageBox.Show(_propertyTable.GetValue<FwApp>("App").ActiveMainWindow' LexEdStrings.kProjectAlreadyHasLiftRepo' LexEdStrings.kCannotDoGetAndMergeAgain' MessageBoxButtons.OK); " is 175.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,OnObtainLiftProject,The length of the statement  "			var success = FLExBridgeHelper.LaunchFieldworksBridge(Cache.ProjectId.ProjectFolder' null' FLExBridgeHelper.ObtainLift' null' " is 125.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,OnFLExBridge,The length of the statement  "				using (var dlg = new FwCoreDlgs.WarningNotUsingDefaultLinkedFilesLocation(_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider"))) " is 140.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,OnFLExBridge,The length of the statement  "					LexEdStrings.ksSendReceiveNotPermittedMultipleAppsCaption' MessageBoxButtons.RetryCancel' MessageBoxIcon.Warning) == DialogResult.Cancel) " is 137.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,OnFLExBridge,The length of the statement  "				var success = FLExBridgeHelper.LaunchFieldworksBridge(fullProjectFileName' SendReceiveUser' FLExBridgeHelper.SendReceive' " is 121.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,LinkedFilesLocationIsDefault,The length of the statement  "			var defaultLinkedFilesFolder = LcmFileHelper.GetDefaultLinkedFilesDir(Cache.ServiceLocator.DataSetup.ProjectId.ProjectFolder); " is 126.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,CopyDictionaryConfigFileToTemp,The length of the statement  "				// We've had difficulties in the past trying to delete this file while it's read-only. This may apply only to early testers' projects. " is 134.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,OnDisplayLiftBridge,The length of the statement  "				display.Enabled = OldLiftBridgeProjects.Contains(Cache.LangProject.Guid.ToString()) || FLExBridgeHelper.DoesProjectHaveLiftRepo(Cache.ProjectId); " is 145.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,OnLiftBridge,The length of the statement  "				MessageBox.Show(_parentForm' LexEdStrings.FLExBridgeListener_UndoExport_Error_exporting_LIFT' LexEdStrings.FLExBridgeListener_UndoExport_LIFT_Export_failed_Title' " is 162.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,OnViewMessages,The length of the statement  "			var success = FLExBridgeHelper.LaunchFieldworksBridge(Path.Combine(Cache.ProjectId.ProjectFolder' Cache.ProjectId.Name + LcmFileHelper.ksFwDataXmlFileExtension)' " is 161.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,MoveOldLiftRepoIfNeeded,The length of the statement  "			if (Directory.Exists(liftProjectDir) && (Directory.GetDirectories(liftProjectDir).Length > 0 || Directory.GetFiles(liftProjectDir).Length > 0)) " is 143.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,DoMercilessLiftImport,The length of the statement  "									// TODO: Even more importantly' the URLs in the lift notes files aren't compatible with what comes in for regular FW conflict reports " is 133.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,DoSendReceiveForLift,The length of the statement  "				FLExBridgeHelper.SendReceiveLift' // May create a new lift repo in the process of doing the S/R. Or' it may just use the extant lift repo. " is 138.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,ConvertFlexNotesToLift,The length of the statement  "			// silfw://localhost/link?app=flex&amp;database=current&amp;server=&amp;tool=default&amp;guid=bab7776e-531b-4ce1-997f-fa638c09e381&amp;tag=&amp;id=bab7776e-531b-4ce1-997f-fa638c09e381&amp;label=Entry &quot;pintu&quot; " is 217.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,ConvertLiftNotesToFlex,The length of the statement  "			// Typical input is something like lift://John.lift?type=entry&amp;label=fox&amp;id=f3093b9b-ea2f-422b-86b6-0defaa4646fe " is 120.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,ConvertLiftNotesToFlex,The length of the statement  "			// silfw://localhost/link?app=flex&amp;database=current&amp;server=&amp;tool=default&amp;guid=bab7776e-531b-4ce1-997f-fa638c09e381&amp;tag=&amp;id=bab7776e-531b-4ce1-997f-fa638c09e381&amp;label=Entry &quot;pintu&quot; " is 217.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,ConvertLiftNotesToFlex,The length of the statement  "			var outputTemplate = "silfw://localhost/link?app=flex&amp;database=current&amp;server=&amp;tool=default&amp;guid={2}&amp;tag=&amp;id={2}&amp;label={1}"; " is 152.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,ConvertRefAttrs,The length of the statement  "			// silfw://localhost/link?app=flex&amp;database=current&amp;server=&amp;tool=default&amp;guid=bab7776e-531b-4ce1-997f-fa638c09e381&amp;tag=&amp;id=bab7776e-531b-4ce1-997f-fa638c09e381&amp;label=Entry &quot;pintu&quot; " is 217.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,ShowMessageBeforeFirstSendReceive_IsUserReady,The length of the statement  "			using (var FirstTimeDlg = new FLExBridgeFirstSendReceiveInstructionsDlg(_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider"))) " is 138.
Long Statement,SIL.FieldWorks.XWorks.LexEd,EntrySequenceReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\EntrySequenceReferenceLauncher.cs,AddNewObjectsToProperty,The length of the statement  "				if (!ler.ComplexEntryTypesRS.Contains(ler.Services.GetInstance<ILexEntryTypeRepository>().GetObject(LexEntryTypeTags.kguidLexTypDerivation))) " is 141.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FindExampleSentenceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FindExampleSentenceDlg.cs,AddConfigurableControls,The length of the statement  "			m_rbv = DynamicLoader.CreateObject(xnBrowseViewControlParameters.ParentNode.SelectSingleNode("dynamicloaderinfo")) as ConcOccurrenceBrowseView; " is 143.
Long Statement,SIL.FieldWorks.XWorks.LexEd,FindExampleSentenceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FindExampleSentenceDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FindExampleSentenceDlg)); " is 142.
Long Statement,SIL.FieldWorks.XWorks.LexEd,GoldEticGuidFixer,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\GoldEticGuidFixer.cs,Process,The length of the statement  "				var caption = fixedGuids ? LexEdStrings.GoldEticGuidFixer_Guids_changed_Title : LexEdStrings.GoldEticGuidFixer_NoChangeTitle; " is 125.
Long Statement,SIL.FieldWorks.XWorks.LexEd,GoldEticGuidFixer,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\GoldEticGuidFixer.cs,CheckPossibilityGuidAgainstGold,The length of the statement  "				if(dom.SelectSingleNode(string.Format("//item[@id='{0}' and @guid='{1}']"' pos.CatalogSourceId' pos.Guid.ToString())) == null) " is 126.
Long Statement,SIL.FieldWorks.XWorks.LexEd,HomographResetter,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\HomographResetter.cs,Process,The length of the statement  "				var caution = string.Format(LexEdStrings.ksReassignHomographsCaution' homographWsLabel' defaultVernacularWs.DisplayLabel); " is 122.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ImageHolder.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ImageHolder)); " is 131.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ImageHolder.cs,InitializeComponent,The length of the statement  "			this.buttonImages.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("buttonImages.ImageStream"))); " is 124.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexEntryChangeHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryChangeHandler.cs,Fixup,The length of the statement  "			// If our old entry isn't even valid any more' something has deleted it' and whatever did so should have fixed up the list. " is 123.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexEntryChangeHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryChangeHandler.cs,Fixup,The length of the statement  "			// We really don't want to reload the whole thing if we don't need to (takes ages in a big lexicon)' so do nothing...JohnT " is 122.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexEntryChangeHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryChangeHandler.cs,Fixup,The length of the statement  "			var danglingRefs = m_entry.EntryRefsOS.Where(ler => !(ler.ComponentLexemesRS.Any() || ler.ComplexEntryTypesRS.Any() || ler.VariantEntryTypesRS.Any())).ToList(); " is 160.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexEntryChangeHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryChangeHandler.cs,Fixup,The length of the statement  "			var typelessRefs = m_entry.EntryRefsOS.Where(ler => ler.ComponentLexemesRS.Any() && !(ler.ComplexEntryTypesRS.Any() || ler.VariantEntryTypesRS.Any())).ToList(); " is 160.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexEntryChangeHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryChangeHandler.cs,Fixup,The length of the statement  "				NonUndoableUnitOfWorkHelper.DoUsingNewOrCurrentUOW(m_cache.ActionHandlerAccessor' () => danglingRefs.ForEach(ler => ler.Delete())); " is 131.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexEntryImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryImages.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(LexEntryImages)); " is 134.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexEntryImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryImages.cs,InitializeComponent,The length of the statement  "			this.buttonImages.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("buttonImages.ImageStream"))); " is 124.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexEntryInflTypeConverter,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryInflTypeConverter.cs,Process,The length of the statement  "			UndoableUnitOfWorkHelper.Do(LexEdStrings.ksUndoConvertIrregularlyInflectedFormVariants' LexEdStrings.ksRedoConvertIrregularlyInflectedFormVariants' " is 147.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexEntryMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryMenuHandler.cs,OnDisplayDataTreeInsert,The length of the statement  "				// (If the slice is disposed' we're in a weird state' possibly trying to update the toolbar during OnIdle though we haven't " is 123.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexEntryMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryMenuHandler.cs,OnPictureProperties,The length of the statement  "				// Create an array of potential slices to call the showProperties method on.  If we're being called from a PictureSlice' " is 120.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,GenerateChildNode,The length of the statement  "				case LexRefTypeTags.MappingTypes.kmtEntryOrSenseAsymmetricPair: // Entry or sense Pair with different Forward/Reverse names " is 123.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,GenerateChildNode,The length of the statement  "				case LexRefTypeTags.MappingTypes.kmtEntryOrSenseAsymmetricPair: // Entry or sense Pair with different forward/Reverse names " is 123.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,HandleMouseDown,The length of the statement  "			m_contextMenuStrip.Closed += contextMenuStrip_Closed; // dispose when no longer needed (but not sooner! needed after this returns) " is 130.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,SetupContextMenuStrip,The length of the statement  "				// was: string reverseName = ILexRefType.BestAnalysisOrVernReverseName(lrt.Cache' lrt.Hvo).Text; // replaces lrt.ReverseName.AnalysisDefaultWritingSystem; " is 154.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,SetupContextMenuStrip,The length of the statement  "				//contextMenuStrip.Items.Insert(iInsert' new ToolStripMenuItem(label2' null' new EventHandler(this.HandleCreateMenuItem))); " is 123.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,SetupContextMenuStrip,The length of the statement  "					//contextMenuStrip.Items.Insert(iInsert' new ToolStripMenuItem(label2' null' new EventHandler(this.HandleCreateMenuItem))); " is 123.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,AddFinalContextMenuStripOptions,The length of the statement  "			contextMenuStrip.Items.Add(new ToolStripMenuItem(LexEdStrings.ksCreateLexRefType_' null' new EventHandler(this.HandleMoreMenuItem))); " is 133.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,AddFinalContextMenuStripOptions,The length of the statement  "			ToolStripMenuItem itemAlways = new ToolStripMenuItem(LexEdStrings.ksAlwaysVisible' null' new EventHandler(this.OnShowFieldAlwaysVisible1)); " is 139.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,AddFinalContextMenuStripOptions,The length of the statement  "			ToolStripMenuItem itemIfData = new ToolStripMenuItem(LexEdStrings.ksHiddenUnlessData' null' new EventHandler(this.OnShowFieldIfData1)); " is 135.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,AddFinalContextMenuStripOptions,The length of the statement  "			ToolStripMenuItem itemHidden = new ToolStripMenuItem(LexEdStrings.ksNormallyHidden' null' new EventHandler(this.OnShowFieldNormallyHidden1)); " is 141.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,OnHelp,The length of the statement  "				ShowHelp.ShowHelpTopic(m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")' "khtpFieldLexSenseLexicalRelations"); " is 127.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,OnHelp,The length of the statement  "				ShowHelp.ShowHelpTopic(m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")' "khtpFieldLexEntryCrossReference"); " is 125.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,GetRootObject,The length of the statement  "						Debug.Assert(lrt.MappingType == (int)LexRefTypeTags.MappingTypes.kmtSenseAsymmetricPair || lrt.MappingType == (int)LexRefTypeTags.MappingTypes.kmtSenseTree); " is 157.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,GetRootObject,The length of the statement  "				var wp = new WindowParams { m_title = String.Format(LexEdStrings.ksIdentifyXEntry' lrt.ReverseName.BestAnalysisAlternative.Text)' m_btnText = LexEdStrings.ks_Add }; " is 164.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,GetChildObject,The length of the statement  "						Debug.Assert(lrt.MappingType == (int)LexRefTypeTags.MappingTypes.kmtSenseAsymmetricPair || lrt.MappingType == (int)LexRefTypeTags.MappingTypes.kmtSenseTree); " is 157.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,Expand,The length of the statement  "				GenerateChildren(m_configurationNode' caller' m_obj' Indent' ref insPos' new ArrayList(Key)' new ObjSeqHashMap()' false); " is 121.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,DeleteFromReference,The length of the statement  "				throw new ConfigurationException("Slice:GetObjectHvoForMenusToOperateOn is either messed up or should not have been called' because it could not find the object to be deleted."' m_configurationNode); " is 199.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,DeleteReference,The length of the statement  "				throw new ConfigurationException("Slice:GetObjectHvoForMenusToOperateOn is either messed up or should not have been called' because it could not find the object to be deleted."' m_configurationNode); " is 199.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,EditReferenceDetails,The length of the statement  "				throw new ConfigurationException("Slice:GetObjectHvoForMenusToOperateOn is either messed up or should not have been called' because it could not find the object to be deleted."' m_configurationNode); " is 199.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceSequenceLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceSequenceLauncher.cs,HandleChooser,The length of the statement  "				var wp = new WindowParams { m_title = String.Format(LexEdStrings.ksIdentifyXEntry' lrt.Name.BestAnalysisAlternative.Text)' m_btnText = LexEdStrings.ks_Add }; " is 157.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceTreeBranchesLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceTreeBranchesLauncher.cs,HandleChooser,The length of the statement  "				var wp = new WindowParams { m_title = String.Format(LexEdStrings.ksIdentifyXEntry' lrt.Name.BestAnalysisAlternative.Text)' m_btnText = LexEdStrings.ks_Add }; " is 157.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceTreeRootLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceTreeRootLauncher.cs,HandleChooser,The length of the statement  "				var wp = new WindowParams { m_title = String.Format(LexEdStrings.ksReplaceXEntry)' m_btnText = LexEdStrings.ks_Replace }; " is 121.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LexReferenceUnidirectionalLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceUnidirectionalLauncher.cs,HandleChooser,The length of the statement  "				var wp = new WindowParams { m_title = String.Format(LexEdStrings.ksIdentifyXEntry' lrt.Name.BestAnalysisAlternative.Text)' m_btnText = LexEdStrings.ks_Add }; " is 157.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LiftImportFailureServices,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LiftImportFailureServices.cs,GetFailureStatus,The length of the statement  "			return fileContents.Contains(LexEdStrings.kBasicFailureFileContents) ? ImportFailureStatus.BasicImportNeeded : ImportFailureStatus.StandardImportNeeded; " is 152.
Long Statement,SIL.FieldWorks.XWorks.LexEd,LiftImportFailureServices,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LiftImportFailureServices.cs,DisplayLiftFailureNoticeIfNecessary,The length of the statement  "					MessageBoxUtils.Show(parentWindow' LexEdStrings.kBasicImportFailureMessage' LexEdStrings.kFlexImportFailureTitle' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 160.
Long Statement,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncher.cs,InitializeComponent,The length of the statement  "			this.m_msaInflectionFeatureListDlgLauncherView = new SIL.FieldWorks.XWorks.LexEd.MsaInflectionFeatureListDlgLauncherView(); " is 123.
Long Statement,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncherSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncherSlice.cs,GetFeatureStructureFromMSA,The length of the statement  "			IFsFeatStruc fs = obj.Cache.GetAtomicPropObject(obj.Cache.DomainDataByFlid.get_ObjectProp(obj.Hvo' flid)) as IFsFeatStruc; " is 122.
Long Statement,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncher.cs,InitializeComponent,The length of the statement  "			this.m_PhonologicalFeatureListDlgLauncherView = new SIL.FieldWorks.XWorks.LexEd.PhonologicalFeatureListDlgLauncherView(); " is 121.
Long Statement,SIL.FieldWorks.XWorks.LexEd,MessageSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MessageSlice.cs,FinishInit,The length of the statement  "			m_notesBar = m_chorusSystem.WinForms.CreateNotesBar(dataFilePath' additionalPaths' idAttrForOtherFiles' notesToRecordMapping' new NullProgress()); " is 146.
Long Statement,SIL.FieldWorks.XWorks.LexEd,MessageSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MessageSlice.cs,GetCurrentUrlForNewNotes,The length of the statement  "			// In this URI' the stuff up to tag=& is the part that allows FLEx to switch to the right object from the notes browser. " is 120.
Long Statement,SIL.FieldWorks.XWorks.LexEd,MessageSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MessageSlice.cs,GetCurrentUrlForNewNotes,The length of the statement  "			return string.Format("silfw://localhost/link?app=flex&database=current&server=&tool=default&guid={0}&tag=&id={0}&label={1}"' m_obj.Guid' m_obj.ShortName); " is 154.
Long Statement,SIL.FieldWorks.XWorks.LexEd,AllReversalEntriesRecordList,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryBulkEdit.cs,Init,The length of the statement  "			// <recordList owner="IReversalIndex" property="AllEntries" assemblyPath="RBRExtensions.dll" class="RBRExtensions.AllReversalEntriesRecordList"/> " is 145.
Long Statement,SIL.FieldWorks.XWorks.LexEd,AllReversalEntriesRecordList,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryBulkEdit.cs,PropertyTableId,The length of the statement  "				return null; // there is no current Reversal Index; don't try to find Properties (sorter & filter) for a nonexistant Reversal Index " is 131.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalEntryGoDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryGoDlg.cs,InitializeMatchingObjects,The length of the statement  "			XmlNode configNode = xnWindow.SelectSingleNode("controls/parameters/guicontrol[@id=\"matchingReversalEntries\"]/parameters"); " is 125.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalEntryGoDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryGoDlg.cs,InitializeMatchingObjects,The length of the statement  "			var searchEngine = (ReversalEntrySearchEngine)SearchEngine.Get(m_mediator' m_propertyTable' "ReversalEntryGoSearchEngine-" + m_reveralIndex.Hvo' " is 144.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalEntryGoDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryGoDlg.cs,InitializeMatchingObjects,The length of the statement  "			m_matchingObjectsBrowser.Initialize(cache' FontHeightAdjuster.StyleSheetFromPropertyTable(m_propertyTable)' m_mediator' m_propertyTable' configNode' " is 148.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalEntryGoDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryGoDlg.cs,SetDlgInfo,The length of the statement  "			SetDlgInfo(cache' wp' mediator' propertyTable' cache.ServiceLocator.WritingSystemManager.GetWsFromStr(m_reveralIndex.WritingSystem)); " is 133.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalEntryGoDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryGoDlg.cs,SetDlgInfo,The length of the statement  "			SetDlgInfo(cache' wp' mediator' propertyTable' form' cache.ServiceLocator.WritingSystemManager.GetWsFromStr(m_reveralIndex.WritingSystem)); " is 139.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalEntryGoDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryGoDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ReversalEntryGoDlg)); " is 138.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalEntryGoDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryGoDlg.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetHelpNavigator(this' ((System.Windows.Forms.HelpNavigator)(resources.GetObject("$this.HelpNavigator")))); " is 127.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalPOSMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryPOS.cs,OnMoveReversalPOS,The length of the statement  "			using (SimpleListChooser dlg = new SimpleListChooser(cache' null' m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")' labels' null' " is 146.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalPOSMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryPOS.cs,OnMergeReversalPOS,The length of the statement  "			using (SimpleListChooser dlg = new SimpleListChooser(cache' null' m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")' labels' null' " is 146.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalIndexPOSRecordList,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryPOS.cs,Init,The length of the statement  "			// <recordList owner="IReversalIndex" property="AllEntries" assemblyPath="RBRExtensions.dll" class="RBRExtensions.AllReversalEntriesRecordList"/> " is 145.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntrySliceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,ConvertDummiesToReal,The length of the statement  "					!m_sense.IsValidObject) //users might quickly realize a mistake and delete the sense before we have converted our dummy. " is 120.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntrySliceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,MakeRoot,The length of the statement  "					m_sdaRev = new ReversalEntryDataAccess(m_cache.DomainDataByFlid as ISilDataAccessManaged) {TsStrFactory = TsStringUtils.TsStrFactory}; " is 134.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntryVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,CheckDisposed,The length of the statement  "					throw new ObjectDisposedException(GetType().ToString()' "This object is being used after it has been disposed: this is an Error."); " is 131.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalListener.cs,OnDisplayReversalIndexList,The length of the statement  "			var reversalIndexConfigurations = SIL.FieldWorks.XWorks.DictionaryConfigurationUtils.GatherBuiltInAndUserConfigurations(cache' configObjectName); " is 145.
Long Statement,SIL.FieldWorks.XWorks.LexEd,ReversalClerk,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalListener.cs,TryRestoreSorter,The length of the statement  "			var fakevc = new XmlBrowseViewBaseVc { SuppressPictures = true' Cache = Cache }; // SuppressPictures to make sure that we don't leak anything as this will not be disposed. " is 171.
Long Statement,SIL.FieldWorks.XWorks.LexEd,RoledParticipantsSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RoledParticipantsSlice.cs,InitLauncher,The length of the statement  "			vrl.Initialize(m_cache' defaultRoledPartic' RnRoledParticTags.kflidParticipants' m_fieldName' m_persistenceProvider' Mediator' " is 126.
Long Statement,SIL.FieldWorks.XWorks.LexEd,RoledParticipantsSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RoledParticipantsSlice.cs,GenerateChildren,The length of the statement  "			Expansion = Record.ParticipantsOC.Count == 0 ? DataTree.TreeItemState.ktisCollapsedEmpty : DataTree.TreeItemState.ktisExpanded; " is 127.
Long Statement,SIL.FieldWorks.XWorks.LexEd,RoledParticipantsSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RoledParticipantsSlice.cs,HandleMouseDown,The length of the statement  "			m_contextMenuStrip.Closed += contextMenuStrip_Closed; // dispose when no longer needed (but not sooner! needed after this returns) " is 130.
Long Statement,SIL.FieldWorks.XWorks.LexEd,RoledParticipantsSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RoledParticipantsSlice.cs,AddParticipants,The length of the statement  "			IEnumerable<ObjectLabel> labels = ObjectLabel.CreateObjectLabels(m_cache' m_cache.LanguageProject.PeopleOA.PossibilitiesOS' " is 123.
Long Statement,SIL.FieldWorks.XWorks.LexEd,RoledParticipantsSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RoledParticipantsSlice.cs,ShowHelpTopic,The length of the statement  "				ShowHelp.ShowHelpTopic(m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")' "khtpField-notebookEdit-InterlinearEdit-RnGenericRec-Participants"); " is 158.
Long Statement,SIL.FieldWorks.XWorks.LexEd,RoledParticipantsSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RoledParticipantsSlice.cs,ShowHelpTopic,The length of the statement  "				ShowHelp.ShowHelpTopic(m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")' "khtpField-notebookEdit-CustomSlice-RnGenericRec-Participants"); " is 154.
Long Statement,SIL.FieldWorks.XWorks.LexEd,RoledParticipantsSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RoledParticipantsSlice.cs,ExpandNewNode,The length of the statement  "				GenerateChildNode(roledPartic' m_configurationNode' caller' Indent' ref insPos' new ArrayList(Key)' new ObjSeqHashMap()); " is 121.
Long Statement,SIL.FieldWorks.XWorks.LexEd,RoledParticipantsSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RoledParticipantsSlice.cs,Expand,The length of the statement  "				GenerateChildren(m_configurationNode' caller' m_obj' Indent' ref insPos' new ArrayList(Key)' new ObjSeqHashMap()' false); " is 121.
Long Statement,SIL.FieldWorks.XWorks.LexEd,SortReversalSubEntries,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\SortReversalSubEntries.cs,Process,The length of the statement  "				MessageBox.Show(Dialog' LexEdStrings.SortReversalSubEntries_CompletedContent' LexEdStrings.SortReversalSubEntries_CompletedTitle' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 180.
Long Statement,SIL.FieldWorks.XWorks.LexEd,SwapLexemeWithAllomorphDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\SwapLexemeWithAllomorphDlg.cs,SetDlgInfo,The length of the statement  "				m_cache.ServiceLocator.WritingSystems.DefaultVernacularWritingSystem.Handle' stylesheet' m_cache.LanguageWritingSystemFactoryAccessor); " is 135.
Long Statement,SIL.FieldWorks.XWorks.LexEd,SwapLexemeWithAllomorphDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\SwapLexemeWithAllomorphDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SwapLexemeWithAllomorphDlg)); " is 146.
Complex Conditional,SIL.FieldWorks.XWorks.LexEd,FindExampleSentenceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FindExampleSentenceDlg.cs,btnAdd_Click,The conditional expression  "cNewExamples == 0 && m_les != null &&  								m_les.Example.BestVernacularAlternative.Text == "***" &&  								(m_les.TranslationsOC == null || m_les.TranslationsOC.Count == 0) &&  								m_les.Reference.Length == 0"  is complex.
Complex Conditional,SIL.FieldWorks.XWorks.LexEd,LexEntryMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryMenuHandler.cs,OnDisplayDemoteSense,The conditional expression  "slice == null || slice.Object == null ||  				(slice.Object.OwningFlid != LexSenseTags.kflidSenses) &&  				(slice.Object.OwningFlid != LexEntryTags.kflidSenses)"  is complex.
Complex Conditional,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncherSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncherSlice.cs,Dispose,The conditional expression  "m_fs != null && m_fs.IsValidObject && ((m_fs.FeatureSpecsOC == null) || (m_fs.FeatureSpecsOC.Count < 1))"  is complex.
Complex Conditional,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncherSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncherSlice.cs,Dispose,The conditional expression  "m_fs != null && m_fs.IsValidObject && ((m_fs.FeatureSpecsOC == null) || (m_fs.FeatureSpecsOC.Count < 1))"  is complex.
Complex Conditional,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntrySliceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,HandleSelectionChange,The conditional expression  "m_hvoOldSelection != 0  					&& hvoObj != m_hvoOldSelection  					&& (oldForm == null || oldForm.Length  == 0)"  is complex.
Empty Catch Block,SIL.FieldWorks.XWorks.LexEd,ReversalClerk,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalListener.cs,ChangeOwningObjectIfPossible,The method has an empty catch block.
Magic Number,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,ImportLiftLexicon,The following statement contains a magic number: progressDialog.Maximum = 100;
Magic Number,SIL.FieldWorks.XWorks.LexEd,LexEntryImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(2' "");
Magic Number,SIL.FieldWorks.XWorks.LexEd,LexEntryImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(3' "Find Lexical Entry.ico");
Magic Number,SIL.FieldWorks.XWorks.LexEd,LexEntryImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(4' "Create Reversal Entry.ico");
Magic Number,SIL.FieldWorks.XWorks.LexEd,LexEntryImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(5' "Find Reversal Entry.ico");
Magic Number,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,ExpandNewNode,The following statement contains a magic number: try  			{  				ContainingDataTree.DeepSuspendLayout();  				XmlNode caller = null;  				if (Key.Length > 1)  					caller = Key[Key.Length - 2] as XmlNode;  				int insPos = this.IndexInContainer + m_refs.Count;  				GenerateChildNode(m_refs.Count-1' m_configurationNode' caller' Indent'  					ref insPos' new ArrayList(Key)' new ObjSeqHashMap());  				Expansion = DataTree.TreeItemState.ktisExpanded;  			}  			finally  			{  				ContainingDataTree.DeepResumeLayout();  			}
Magic Number,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,Expand,The following statement contains a magic number: try  			{  				ContainingDataTree.DeepSuspendLayout();  				XmlNode caller = null;  				if (Key.Length > 1)  					caller = Key[Key.Length - 2] as XmlNode;  				int insPos = iSlice + 1;  				GenerateChildren(m_configurationNode' caller' m_obj' Indent' ref insPos' new ArrayList(Key)' new ObjSeqHashMap()' false);  				Expansion = DataTree.TreeItemState.ktisExpanded;  			}  			finally  			{  				ContainingDataTree.DeepResumeLayout();  			}
Magic Number,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,DeleteFromReference,The following statement contains a magic number: if (lr == null)  			{  				throw new ConfigurationException("Slice:GetObjectHvoForMenusToOperateOn is either messed up or should not have been called' because it could not find the object to be deleted."' m_configurationNode);  			}  			else  			{  				var mainWindow = m_propertyTable.GetValue<Form>("window");  				using (new WaitCursor(mainWindow))  				{  					using (var dlg = new ConfirmDeleteObjectDlg(m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")))  					{    						var ui = CmObjectUi.MakeUi(m_cache' lr.Hvo);  						ui.Mediator = Mediator;  						ui.PropTable = m_propertyTable;    						//We need this to determine which kind of relation we are deleting  						var lrtOwner = (ILexRefType) lr.Owner;    						var analWs = lrtOwner.Services.WritingSystems.DefaultAnalysisWritingSystem.Handle;  						var userWs = m_cache.WritingSystemFactory.UserWs;  						var tisb = TsStringUtils.MakeIncStrBldr();  						tisb.SetIntPropValues((int)FwTextPropType.ktptWs' 0' userWs);    						switch ((LexRefTypeTags.MappingTypes)lrtOwner.MappingType)  						{  							case LexRefTypeTags.MappingTypes.kmtSenseSequence:  							case LexRefTypeTags.MappingTypes.kmtEntrySequence:  							case LexRefTypeTags.MappingTypes.kmtEntryOrSenseSequence:  							case LexRefTypeTags.MappingTypes.kmtEntryOrSenseCollection:  							case LexRefTypeTags.MappingTypes.kmtEntryCollection:  							case LexRefTypeTags.MappingTypes.kmtSenseCollection:  								if (lr.TargetsRS.Count > 2)  								{  									tisb.SetIntPropValues((int)FwTextPropType.ktptWs' 0' userWs);  									tisb.Append(String.Format(LexEdStrings.ksDeleteSequenceCollectionA'  										StringUtils.kChHardLB.ToString()));  									tisb.SetIntPropValues((int)FwTextPropType.ktptWs' 0' analWs);  									tisb.Append(lrtOwner.ShortName);  									tisb.SetIntPropValues((int)FwTextPropType.ktptWs' 0' userWs);  									tisb.Append(LexEdStrings.ksDeleteSequenceCollectionB);    									dlg.SetDlgInfo(ui' m_cache' Mediator' m_propertyTable' tisb.GetString());  								}  								else  								{  									dlg.SetDlgInfo(ui' m_cache' Mediator' m_propertyTable);  								}  								break;  							default:  								dlg.SetDlgInfo(ui' m_cache' Mediator' m_propertyTable);  								break;  						}    						if (DialogResult.Yes == dlg.ShowDialog(mainWindow))  						{  							UndoableUnitOfWorkHelper.Do(LexEdStrings.ksUndoDeleteRelation' LexEdStrings.ksRedoDeleteRelation' m_obj' () =>  							{  								//If the user selected Yes' then we need to delete 'this' sense or entry  								lr.TargetsRS.Remove(m_obj);  							});  							//Update the display because we have removed this slice from the Lexical entry.  							UpdateForDelete(lr);  						 }  					}  				}  			}
Magic Number,SIL.FieldWorks.XWorks.LexEd,LexReferencePairVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferencePairView.cs,HvoOfObjectToDisplay,The following statement contains a magic number: if (chvo < 2)  				return 0;
Magic Number,SIL.FieldWorks.XWorks.LexEd,MSADlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MSADlgLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_msaDlglauncherView.Size = new System.Drawing.Size(128' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MSADlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MSADlgLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_msaDlglauncherView.Size = new System.Drawing.Size(128' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MSADlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MSADlgLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(150' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MSADlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MSADlgLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(150' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MSADlgLauncherSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MSADlgLauncherSlice.cs,Install,The following statement contains a magic number: this.Size = new System.Drawing.Size(208' 32);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MSADlgLauncherSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MSADlgLauncherSlice.cs,Install,The following statement contains a magic number: this.Size = new System.Drawing.Size(208' 32);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MSADlglauncherView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MSADlglauncherView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(168' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MSADlglauncherView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MSADlglauncherView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(168' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_msaInflectionFeatureListDlgLauncherView.Size = new System.Drawing.Size(128' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_msaInflectionFeatureListDlgLauncherView.Size = new System.Drawing.Size(128' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(150' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(150' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncherSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncherSlice.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(208' 32);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncherSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncherSlice.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(208' 32);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncherView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncherView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(168' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncherView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncherView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(168' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_PhonologicalFeatureListDlgLauncherView.Size = new System.Drawing.Size(130' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_PhonologicalFeatureListDlgLauncherView.Size = new System.Drawing.Size(130' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(150' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(150' 24);
Magic Number,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncherSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncherSlice.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(208' 32);
Magic Number,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncherSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncherSlice.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(208' 32);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MessageSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MessageSlice.cs,FinishInit,The following statement contains a magic number: var labelWs = new ChorusWritingSystem(vernWs.LanguageName' vernWs.Id' vernWs.DefaultFontName' 12);
Magic Number,SIL.FieldWorks.XWorks.LexEd,MessageSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MessageSlice.cs,FinishInit,The following statement contains a magic number: var msgWs = new ChorusWritingSystem(analWs.LanguageName' analWs.Id' analWs.DefaultFontName' 12);
Magic Number,SIL.FieldWorks.XWorks.LexEd,RevEntrySensesCollectionReferenceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RevEntrySensesCollectionReferenceView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(232' 40);
Magic Number,SIL.FieldWorks.XWorks.LexEd,RevEntrySensesCollectionReferenceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RevEntrySensesCollectionReferenceView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(232' 40);
Magic Number,SIL.FieldWorks.XWorks.LexEd,BulkReversalEntryPosEditor,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryBulkEdit.cs,DoIt,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.XWorks.LexEd,BulkReversalEntryPosEditor,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryBulkEdit.cs,DoIt,The following statement contains a magic number: int interval = Math.Min(100' Math.Max(itemsToChange.Count() / 50' 1));
Magic Number,SIL.FieldWorks.XWorks.LexEd,BulkReversalEntryPosEditor,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryBulkEdit.cs,DoIt,The following statement contains a magic number: foreach (int entryId in itemsToChange)  			{  				i++;  				if (i % interval == 0)  				{  					state.PercentDone = i * 80 / itemsToChange.Count() + 20;  					state.Breath();  				}  				IReversalIndexEntry entry = m_cache.ServiceLocator.GetInstance<IReversalIndexEntryRepository>().GetObject(entryId);  				if (m_selectedHvo == 0)  					entry.PartOfSpeechRA = null;  				else  					entry.PartOfSpeechRA = m_cache.ServiceLocator.GetInstance<IPartOfSpeechRepository>().GetObject(m_selectedHvo);  			}
Magic Number,SIL.FieldWorks.XWorks.LexEd,BulkReversalEntryPosEditor,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryBulkEdit.cs,DoIt,The following statement contains a magic number: foreach (int entryId in itemsToChange)  			{  				i++;  				if (i % interval == 0)  				{  					state.PercentDone = i * 80 / itemsToChange.Count() + 20;  					state.Breath();  				}  				IReversalIndexEntry entry = m_cache.ServiceLocator.GetInstance<IReversalIndexEntryRepository>().GetObject(entryId);  				if (m_selectedHvo == 0)  					entry.PartOfSpeechRA = null;  				else  					entry.PartOfSpeechRA = m_cache.ServiceLocator.GetInstance<IPartOfSpeechRepository>().GetObject(m_selectedHvo);  			}
Magic Number,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntrySliceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,GetReversalFormsAndCheckExisting,The following statement contains a magic number: if (hvoEntry > 0)  				{  					IReversalIndexEntry rie =  						m_cache.ServiceLocator.GetInstance<IReversalIndexEntryRepository>().GetObject(hvoEntry);  					if (rgsFromDummy[rgsFromDummy.Count - 1] == rie.ReversalForm.get_String(wsIndex).Text)  					{  						// Check that all parents exist as specified.  If so' then the user didn't change  						// this entry link.  						bool fSame = true;  						for (int i = rgsFromDummy.Count - 2; i >= 0; --i)  						{  							if (rie.OwningFlid == ReversalIndexEntryTags.kflidSubentries)  							{  								rie = rie.Owner as IReversalIndexEntry;  								if (rgsFromDummy[i] == rie.ReversalForm.get_String(wsIndex).Text)  									continue;  							}  							fSame = false;  							break;  						}  						if (fSame)  						{  							// Add hvoEntry to the currentEntries array.  							currentEntries.Add(hvoEntry);  							//fNeedPropChange = true;  							return true;  						}  					}  				}
Magic Number,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntrySliceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,HandleSelectionChange,The following statement contains a magic number: vwselNew.PropInfo(false' 2' out hvoSense' out tagIndex' out ihvoIndex' out cpropPrevious' out vps);
Magic Number,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntrySliceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,HandleSelectionChange,The following statement contains a magic number: SelLevInfo[] rgvsli = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntryVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,Display,The following statement contains a magic number: switch (frag)  				{  					default:  					{  						Debug.Assert(false' "Unrecognized fragment.");  						break;  					}  					case ReversalIndexEntrySliceView.kFragMainObject:  					{  						// The hvo here is for the sense.    						// We use a table to display  						// encodings in column one and the strings in column two.  						// The table uses 100% of the available width.  						VwLength vlTable;  						vlTable.nVal = 10000;  						vlTable.unit = VwUnit.kunPercent100;  						// The width of the writing system column is determined from the width of the  						// longest one which will be displayed.  						int dxs;	// Width of displayed string.  						int dys;	// Height of displayed string (not used here).  						int dxsMax = 0;	// Max width required.  						ISilDataAccess sda = vwenv.DataAccess;  						foreach (IReversalIndex idx in m_usedIndices)  						{  							int wsHandle = m_cache.ServiceLocator.WritingSystemManager.GetWsFromStr(idx.WritingSystem);  							vwenv.get_StringWidth(sda.get_StringProp(wsHandle' ReversalEntryDataAccess.kflidWsAbbr)'  								m_ttpLabel'  								out dxs'  								out dys);  							dxsMax = Math.Max(dxsMax' dxs);  						}  						VwLength vlColWs; // 5-pt space plus max label width.  						vlColWs.nVal = dxsMax + 5000;  						vlColWs.unit = VwUnit.kunPoint1000;  						// Enhance JohnT: possibly allow for right-to-left UI by reversing columns?  						// The Main column is relative and uses the rest of the space.  						VwLength vlColMain;  						vlColMain.nVal = 1;  						vlColMain.unit = VwUnit.kunRelative;    						vwenv.OpenTable(2' // Two columns.  							vlTable' // Table uses 100% of available width.  							0' // Border thickness.  							VwAlignment.kvaLeft' // Default alignment.  							VwFramePosition.kvfpVoid' // No border.  							VwRule.kvrlNone' // No rules between cells.  							0' // No forced space between cells.  							0' // No padding inside cells.  							false);  						// Specify column widths. The first argument is the number of columns'  						// not a column index. The writing system column only occurs at all if its  						// width is non-zero.  						vwenv.MakeColumns(1' vlColWs);  						vwenv.MakeColumns(1' vlColMain);    						vwenv.OpenTableBody();  						// Do vector of rows. Each row essentially is a reversal index' but shows other information.  						vwenv.AddObjVec(ReversalIndexEntrySliceView.kFlidIndices' this' ReversalIndexEntrySliceView.kFragIndices);  						vwenv.CloseTableBody();  						vwenv.CloseTable();  						break;  					}  					case ReversalIndexEntrySliceView.kFragIndexMain:  					{  						// First cell has writing system abbreviation displayed using m_ttpLabel.  						int wsHvo = 0;  						foreach (IReversalIndex idx in m_usedIndices)  						{  							if (idx.Hvo == hvo)  							{  								wsHvo = m_cache.ServiceLocator.WritingSystemManager.GetWsFromStr(idx.WritingSystem);  								break;  							}  						}  						Debug.Assert(wsHvo > 0' "Could not find writing system.");    						int wsOldDefault = DefaultWs;  						DefaultWs = wsHvo;    						// Cell 1 shows the ws abbreviation.  						vwenv.OpenTableCell(1'1);  						vwenv.Props = m_ttpLabel;  						vwenv.AddObj(wsHvo' this' ReversalIndexEntrySliceView.kFragWsAbbr);  						vwenv.CloseTableCell();    						// Second cell has the contents for the reversal entries.  						vwenv.OpenTableCell(1'1);  						// This displays the field flush right for RTL data' but gets arrow keys to  						// behave reasonably.  See comments on LT-5287.  						CoreWritingSystemDefinition wsObj = m_cache.ServiceLocator.WritingSystemManager.Get(DefaultWs);  						if (wsObj != null && wsObj.RightToLeftScript)  						{  							vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft'  								(int)FwTextPropVar.ktpvEnum' (int)FwTextToggleVal.kttvForceOn);  						}  						vwenv.OpenParagraph();  						// Do vector of entries in the second column.  						vwenv.AddObjVec(ReversalIndexEntrySliceView.kFlidEntries' this' ReversalIndexEntrySliceView.kFragEntries);  						vwenv.CloseParagraph();  						vwenv.CloseTableCell();    						DefaultWs = wsOldDefault;  						break;  					}  					case ReversalIndexEntrySliceView.kFragEntryForm:  					{  						vwenv.AddStringAltMember(ReversalIndexEntryTags.kflidReversalForm' DefaultWs' this);  						int hvoCurrent = vwenv.CurrentObject();  						if (hvoCurrent > 0)  						{  							IReversalIndexEntry rie =  								m_cache.ServiceLocator.GetInstance<IReversalIndexEntryRepository>().GetObject(hvoCurrent);  							Debug.Assert(rie != null);  							List<CoreWritingSystemDefinition> rgWs = WritingSystemServices.GetReversalIndexWritingSystems(m_cache' rie.Hvo' false);  							int wsAnal = m_cache.DefaultAnalWs;  							ITsIncStrBldr tisb = TsStringUtils.MakeIncStrBldr();  							tisb.SetIntPropValues((int)FwTextPropType.ktptWs'  								(int)FwTextPropVar.ktpvDefault' wsAnal);  							tisb.SetIntPropValues((int)FwTextPropType.ktptEditable'  								(int)FwTextPropVar.ktpvEnum'  								(int)TptEditable.ktptNotEditable);  							tisb.Append(" [");  							int cstr = 0;  							ITsTextProps ttpBase = null;  							ITsTextProps ttpLabel = null;  							for (int i = 0; i < rgWs.Count; ++i)  							{  								int ws = rgWs[i].Handle;  								if (ws == DefaultWs)  									continue;  								string sForm = rie.ReversalForm.get_String(ws).Text;  								if (!string.IsNullOrEmpty(sForm))  								{  									if (cstr > 0)  										tisb.Append("' ");  									++cstr;  									string sWs = rgWs[i].Abbreviation;  									if (!string.IsNullOrEmpty(sWs))  									{  										if (ttpBase == null)  										{  											ITsPropsBldr tpbLabel = m_ttpLabel.GetBldr();  											tpbLabel.SetIntPropValues((int)FwTextPropType.ktptWs'  												(int)FwTextPropVar.ktpvDefault' wsAnal);  											ttpLabel = tpbLabel.GetTextProps();  											// We have to totally replace the properties set by ttpLabel.  The  											// simplest way is to create another ITsString with the simple base  											// property of only the default analysis writing system.  											ITsPropsBldr tpbBase = TsStringUtils.MakePropsBldr();  											tpbBase.SetIntPropValues((int)FwTextPropType.ktptWs'  												(int)FwTextPropVar.ktpvDefault' wsAnal);  											ttpBase = tpbBase.GetTextProps();  										}  										ITsString tssWs = TsStringUtils.MakeString(sWs' ttpLabel);  										tisb.AppendTsString(tssWs);  										ITsString tssSpace = TsStringUtils.MakeString(" "' ttpBase);  										tisb.AppendTsString(tssSpace);  									}  									tisb.SetIntPropValues((int)FwTextPropType.ktptWs'  										(int)FwTextPropVar.ktpvDefault' ws);  									tisb.Append(sForm);  									tisb.SetIntPropValues((int)FwTextPropType.ktptWs'  										(int)FwTextPropVar.ktpvDefault' wsAnal);  								}  							}  							if (cstr > 0)  							{  								tisb.Append("]");  								ITsString tss = tisb.GetString();  								vwenv.AddString(tss);  							}  						}  						break;  					}  					case ReversalIndexEntrySliceView.kFragWsAbbr:  					{  						vwenv.AddString(da.get_StringProp(hvo' ReversalEntryDataAccess.kflidWsAbbr));  						break;  					}  				}
Magic Number,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntryVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,Display,The following statement contains a magic number: switch (frag)  				{  					default:  					{  						Debug.Assert(false' "Unrecognized fragment.");  						break;  					}  					case ReversalIndexEntrySliceView.kFragMainObject:  					{  						// The hvo here is for the sense.    						// We use a table to display  						// encodings in column one and the strings in column two.  						// The table uses 100% of the available width.  						VwLength vlTable;  						vlTable.nVal = 10000;  						vlTable.unit = VwUnit.kunPercent100;  						// The width of the writing system column is determined from the width of the  						// longest one which will be displayed.  						int dxs;	// Width of displayed string.  						int dys;	// Height of displayed string (not used here).  						int dxsMax = 0;	// Max width required.  						ISilDataAccess sda = vwenv.DataAccess;  						foreach (IReversalIndex idx in m_usedIndices)  						{  							int wsHandle = m_cache.ServiceLocator.WritingSystemManager.GetWsFromStr(idx.WritingSystem);  							vwenv.get_StringWidth(sda.get_StringProp(wsHandle' ReversalEntryDataAccess.kflidWsAbbr)'  								m_ttpLabel'  								out dxs'  								out dys);  							dxsMax = Math.Max(dxsMax' dxs);  						}  						VwLength vlColWs; // 5-pt space plus max label width.  						vlColWs.nVal = dxsMax + 5000;  						vlColWs.unit = VwUnit.kunPoint1000;  						// Enhance JohnT: possibly allow for right-to-left UI by reversing columns?  						// The Main column is relative and uses the rest of the space.  						VwLength vlColMain;  						vlColMain.nVal = 1;  						vlColMain.unit = VwUnit.kunRelative;    						vwenv.OpenTable(2' // Two columns.  							vlTable' // Table uses 100% of available width.  							0' // Border thickness.  							VwAlignment.kvaLeft' // Default alignment.  							VwFramePosition.kvfpVoid' // No border.  							VwRule.kvrlNone' // No rules between cells.  							0' // No forced space between cells.  							0' // No padding inside cells.  							false);  						// Specify column widths. The first argument is the number of columns'  						// not a column index. The writing system column only occurs at all if its  						// width is non-zero.  						vwenv.MakeColumns(1' vlColWs);  						vwenv.MakeColumns(1' vlColMain);    						vwenv.OpenTableBody();  						// Do vector of rows. Each row essentially is a reversal index' but shows other information.  						vwenv.AddObjVec(ReversalIndexEntrySliceView.kFlidIndices' this' ReversalIndexEntrySliceView.kFragIndices);  						vwenv.CloseTableBody();  						vwenv.CloseTable();  						break;  					}  					case ReversalIndexEntrySliceView.kFragIndexMain:  					{  						// First cell has writing system abbreviation displayed using m_ttpLabel.  						int wsHvo = 0;  						foreach (IReversalIndex idx in m_usedIndices)  						{  							if (idx.Hvo == hvo)  							{  								wsHvo = m_cache.ServiceLocator.WritingSystemManager.GetWsFromStr(idx.WritingSystem);  								break;  							}  						}  						Debug.Assert(wsHvo > 0' "Could not find writing system.");    						int wsOldDefault = DefaultWs;  						DefaultWs = wsHvo;    						// Cell 1 shows the ws abbreviation.  						vwenv.OpenTableCell(1'1);  						vwenv.Props = m_ttpLabel;  						vwenv.AddObj(wsHvo' this' ReversalIndexEntrySliceView.kFragWsAbbr);  						vwenv.CloseTableCell();    						// Second cell has the contents for the reversal entries.  						vwenv.OpenTableCell(1'1);  						// This displays the field flush right for RTL data' but gets arrow keys to  						// behave reasonably.  See comments on LT-5287.  						CoreWritingSystemDefinition wsObj = m_cache.ServiceLocator.WritingSystemManager.Get(DefaultWs);  						if (wsObj != null && wsObj.RightToLeftScript)  						{  							vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft'  								(int)FwTextPropVar.ktpvEnum' (int)FwTextToggleVal.kttvForceOn);  						}  						vwenv.OpenParagraph();  						// Do vector of entries in the second column.  						vwenv.AddObjVec(ReversalIndexEntrySliceView.kFlidEntries' this' ReversalIndexEntrySliceView.kFragEntries);  						vwenv.CloseParagraph();  						vwenv.CloseTableCell();    						DefaultWs = wsOldDefault;  						break;  					}  					case ReversalIndexEntrySliceView.kFragEntryForm:  					{  						vwenv.AddStringAltMember(ReversalIndexEntryTags.kflidReversalForm' DefaultWs' this);  						int hvoCurrent = vwenv.CurrentObject();  						if (hvoCurrent > 0)  						{  							IReversalIndexEntry rie =  								m_cache.ServiceLocator.GetInstance<IReversalIndexEntryRepository>().GetObject(hvoCurrent);  							Debug.Assert(rie != null);  							List<CoreWritingSystemDefinition> rgWs = WritingSystemServices.GetReversalIndexWritingSystems(m_cache' rie.Hvo' false);  							int wsAnal = m_cache.DefaultAnalWs;  							ITsIncStrBldr tisb = TsStringUtils.MakeIncStrBldr();  							tisb.SetIntPropValues((int)FwTextPropType.ktptWs'  								(int)FwTextPropVar.ktpvDefault' wsAnal);  							tisb.SetIntPropValues((int)FwTextPropType.ktptEditable'  								(int)FwTextPropVar.ktpvEnum'  								(int)TptEditable.ktptNotEditable);  							tisb.Append(" [");  							int cstr = 0;  							ITsTextProps ttpBase = null;  							ITsTextProps ttpLabel = null;  							for (int i = 0; i < rgWs.Count; ++i)  							{  								int ws = rgWs[i].Handle;  								if (ws == DefaultWs)  									continue;  								string sForm = rie.ReversalForm.get_String(ws).Text;  								if (!string.IsNullOrEmpty(sForm))  								{  									if (cstr > 0)  										tisb.Append("' ");  									++cstr;  									string sWs = rgWs[i].Abbreviation;  									if (!string.IsNullOrEmpty(sWs))  									{  										if (ttpBase == null)  										{  											ITsPropsBldr tpbLabel = m_ttpLabel.GetBldr();  											tpbLabel.SetIntPropValues((int)FwTextPropType.ktptWs'  												(int)FwTextPropVar.ktpvDefault' wsAnal);  											ttpLabel = tpbLabel.GetTextProps();  											// We have to totally replace the properties set by ttpLabel.  The  											// simplest way is to create another ITsString with the simple base  											// property of only the default analysis writing system.  											ITsPropsBldr tpbBase = TsStringUtils.MakePropsBldr();  											tpbBase.SetIntPropValues((int)FwTextPropType.ktptWs'  												(int)FwTextPropVar.ktpvDefault' wsAnal);  											ttpBase = tpbBase.GetTextProps();  										}  										ITsString tssWs = TsStringUtils.MakeString(sWs' ttpLabel);  										tisb.AppendTsString(tssWs);  										ITsString tssSpace = TsStringUtils.MakeString(" "' ttpBase);  										tisb.AppendTsString(tssSpace);  									}  									tisb.SetIntPropValues((int)FwTextPropType.ktptWs'  										(int)FwTextPropVar.ktpvDefault' ws);  									tisb.Append(sForm);  									tisb.SetIntPropValues((int)FwTextPropType.ktptWs'  										(int)FwTextPropVar.ktpvDefault' wsAnal);  								}  							}  							if (cstr > 0)  							{  								tisb.Append("]");  								ITsString tss = tisb.GetString();  								vwenv.AddString(tss);  							}  						}  						break;  					}  					case ReversalIndexEntrySliceView.kFragWsAbbr:  					{  						vwenv.AddString(da.get_StringProp(hvo' ReversalEntryDataAccess.kflidWsAbbr));  						break;  					}  				}
Magic Number,SIL.FieldWorks.XWorks.LexEd,ReversalIndexEntryVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalIndexEntrySlice.cs,Display,The following statement contains a magic number: switch (frag)  				{  					default:  					{  						Debug.Assert(false' "Unrecognized fragment.");  						break;  					}  					case ReversalIndexEntrySliceView.kFragMainObject:  					{  						// The hvo here is for the sense.    						// We use a table to display  						// encodings in column one and the strings in column two.  						// The table uses 100% of the available width.  						VwLength vlTable;  						vlTable.nVal = 10000;  						vlTable.unit = VwUnit.kunPercent100;  						// The width of the writing system column is determined from the width of the  						// longest one which will be displayed.  						int dxs;	// Width of displayed string.  						int dys;	// Height of displayed string (not used here).  						int dxsMax = 0;	// Max width required.  						ISilDataAccess sda = vwenv.DataAccess;  						foreach (IReversalIndex idx in m_usedIndices)  						{  							int wsHandle = m_cache.ServiceLocator.WritingSystemManager.GetWsFromStr(idx.WritingSystem);  							vwenv.get_StringWidth(sda.get_StringProp(wsHandle' ReversalEntryDataAccess.kflidWsAbbr)'  								m_ttpLabel'  								out dxs'  								out dys);  							dxsMax = Math.Max(dxsMax' dxs);  						}  						VwLength vlColWs; // 5-pt space plus max label width.  						vlColWs.nVal = dxsMax + 5000;  						vlColWs.unit = VwUnit.kunPoint1000;  						// Enhance JohnT: possibly allow for right-to-left UI by reversing columns?  						// The Main column is relative and uses the rest of the space.  						VwLength vlColMain;  						vlColMain.nVal = 1;  						vlColMain.unit = VwUnit.kunRelative;    						vwenv.OpenTable(2' // Two columns.  							vlTable' // Table uses 100% of available width.  							0' // Border thickness.  							VwAlignment.kvaLeft' // Default alignment.  							VwFramePosition.kvfpVoid' // No border.  							VwRule.kvrlNone' // No rules between cells.  							0' // No forced space between cells.  							0' // No padding inside cells.  							false);  						// Specify column widths. The first argument is the number of columns'  						// not a column index. The writing system column only occurs at all if its  						// width is non-zero.  						vwenv.MakeColumns(1' vlColWs);  						vwenv.MakeColumns(1' vlColMain);    						vwenv.OpenTableBody();  						// Do vector of rows. Each row essentially is a reversal index' but shows other information.  						vwenv.AddObjVec(ReversalIndexEntrySliceView.kFlidIndices' this' ReversalIndexEntrySliceView.kFragIndices);  						vwenv.CloseTableBody();  						vwenv.CloseTable();  						break;  					}  					case ReversalIndexEntrySliceView.kFragIndexMain:  					{  						// First cell has writing system abbreviation displayed using m_ttpLabel.  						int wsHvo = 0;  						foreach (IReversalIndex idx in m_usedIndices)  						{  							if (idx.Hvo == hvo)  							{  								wsHvo = m_cache.ServiceLocator.WritingSystemManager.GetWsFromStr(idx.WritingSystem);  								break;  							}  						}  						Debug.Assert(wsHvo > 0' "Could not find writing system.");    						int wsOldDefault = DefaultWs;  						DefaultWs = wsHvo;    						// Cell 1 shows the ws abbreviation.  						vwenv.OpenTableCell(1'1);  						vwenv.Props = m_ttpLabel;  						vwenv.AddObj(wsHvo' this' ReversalIndexEntrySliceView.kFragWsAbbr);  						vwenv.CloseTableCell();    						// Second cell has the contents for the reversal entries.  						vwenv.OpenTableCell(1'1);  						// This displays the field flush right for RTL data' but gets arrow keys to  						// behave reasonably.  See comments on LT-5287.  						CoreWritingSystemDefinition wsObj = m_cache.ServiceLocator.WritingSystemManager.Get(DefaultWs);  						if (wsObj != null && wsObj.RightToLeftScript)  						{  							vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft'  								(int)FwTextPropVar.ktpvEnum' (int)FwTextToggleVal.kttvForceOn);  						}  						vwenv.OpenParagraph();  						// Do vector of entries in the second column.  						vwenv.AddObjVec(ReversalIndexEntrySliceView.kFlidEntries' this' ReversalIndexEntrySliceView.kFragEntries);  						vwenv.CloseParagraph();  						vwenv.CloseTableCell();    						DefaultWs = wsOldDefault;  						break;  					}  					case ReversalIndexEntrySliceView.kFragEntryForm:  					{  						vwenv.AddStringAltMember(ReversalIndexEntryTags.kflidReversalForm' DefaultWs' this);  						int hvoCurrent = vwenv.CurrentObject();  						if (hvoCurrent > 0)  						{  							IReversalIndexEntry rie =  								m_cache.ServiceLocator.GetInstance<IReversalIndexEntryRepository>().GetObject(hvoCurrent);  							Debug.Assert(rie != null);  							List<CoreWritingSystemDefinition> rgWs = WritingSystemServices.GetReversalIndexWritingSystems(m_cache' rie.Hvo' false);  							int wsAnal = m_cache.DefaultAnalWs;  							ITsIncStrBldr tisb = TsStringUtils.MakeIncStrBldr();  							tisb.SetIntPropValues((int)FwTextPropType.ktptWs'  								(int)FwTextPropVar.ktpvDefault' wsAnal);  							tisb.SetIntPropValues((int)FwTextPropType.ktptEditable'  								(int)FwTextPropVar.ktpvEnum'  								(int)TptEditable.ktptNotEditable);  							tisb.Append(" [");  							int cstr = 0;  							ITsTextProps ttpBase = null;  							ITsTextProps ttpLabel = null;  							for (int i = 0; i < rgWs.Count; ++i)  							{  								int ws = rgWs[i].Handle;  								if (ws == DefaultWs)  									continue;  								string sForm = rie.ReversalForm.get_String(ws).Text;  								if (!string.IsNullOrEmpty(sForm))  								{  									if (cstr > 0)  										tisb.Append("' ");  									++cstr;  									string sWs = rgWs[i].Abbreviation;  									if (!string.IsNullOrEmpty(sWs))  									{  										if (ttpBase == null)  										{  											ITsPropsBldr tpbLabel = m_ttpLabel.GetBldr();  											tpbLabel.SetIntPropValues((int)FwTextPropType.ktptWs'  												(int)FwTextPropVar.ktpvDefault' wsAnal);  											ttpLabel = tpbLabel.GetTextProps();  											// We have to totally replace the properties set by ttpLabel.  The  											// simplest way is to create another ITsString with the simple base  											// property of only the default analysis writing system.  											ITsPropsBldr tpbBase = TsStringUtils.MakePropsBldr();  											tpbBase.SetIntPropValues((int)FwTextPropType.ktptWs'  												(int)FwTextPropVar.ktpvDefault' wsAnal);  											ttpBase = tpbBase.GetTextProps();  										}  										ITsString tssWs = TsStringUtils.MakeString(sWs' ttpLabel);  										tisb.AppendTsString(tssWs);  										ITsString tssSpace = TsStringUtils.MakeString(" "' ttpBase);  										tisb.AppendTsString(tssSpace);  									}  									tisb.SetIntPropValues((int)FwTextPropType.ktptWs'  										(int)FwTextPropVar.ktpvDefault' ws);  									tisb.Append(sForm);  									tisb.SetIntPropValues((int)FwTextPropType.ktptWs'  										(int)FwTextPropVar.ktpvDefault' wsAnal);  								}  							}  							if (cstr > 0)  							{  								tisb.Append("]");  								ITsString tss = tisb.GetString();  								vwenv.AddString(tss);  							}  						}  						break;  					}  					case ReversalIndexEntrySliceView.kFragWsAbbr:  					{  						vwenv.AddString(da.get_StringProp(hvo' ReversalEntryDataAccess.kflidWsAbbr));  						break;  					}  				}
Magic Number,SIL.FieldWorks.XWorks.LexEd,RoledParticipantsSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RoledParticipantsSlice.cs,ExpandNewNode,The following statement contains a magic number: try  			{  				ContainingDataTree.DeepSuspendLayout();  				XmlNode caller = null;  				if (Key.Length > 1)  					caller = Key[Key.Length - 2] as XmlNode;  				int insPos = IndexInContainer + Record.ParticipantsOC.Count - 1;  				GenerateChildNode(roledPartic' m_configurationNode' caller' Indent' ref insPos' new ArrayList(Key)' new ObjSeqHashMap());  				Expansion = DataTree.TreeItemState.ktisExpanded;  			}  			finally  			{  				ContainingDataTree.DeepResumeLayout();  			}
Magic Number,SIL.FieldWorks.XWorks.LexEd,RoledParticipantsSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\RoledParticipantsSlice.cs,Expand,The following statement contains a magic number: try  			{  				ContainingDataTree.DeepSuspendLayout();  				XmlNode caller = null;  				if (Key.Length > 1)  					caller = Key[Key.Length - 2] as XmlNode;  				int insPos = iSlice + 1;  				GenerateChildren(m_configurationNode' caller' m_obj' Indent' ref insPos' new ArrayList(Key)' new ObjSeqHashMap()' false);  				Expansion = DataTree.TreeItemState.ktisExpanded;  			}  			finally  			{  				ContainingDataTree.DeepResumeLayout();  			}
Magic Number,SIL.FieldWorks.XWorks.LexEd,SwapLexemeWithAllomorphDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\SwapLexemeWithAllomorphDlg.cs,SwapLexemeWithAllomorphDlg,The following statement contains a magic number: m_fwTextBoxBottomMsg.Location = new Point(46' 240);
Magic Number,SIL.FieldWorks.XWorks.LexEd,SwapLexemeWithAllomorphDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\SwapLexemeWithAllomorphDlg.cs,SwapLexemeWithAllomorphDlg,The following statement contains a magic number: m_fwTextBoxBottomMsg.Location = new Point(46' 240);
Magic Number,SIL.FieldWorks.XWorks.LexEd,SwapLexemeWithAllomorphDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\SwapLexemeWithAllomorphDlg.cs,SwapLexemeWithAllomorphDlg,The following statement contains a magic number: m_fwTextBoxBottomMsg.Size = new Size(386' 45);
Magic Number,SIL.FieldWorks.XWorks.LexEd,SwapLexemeWithAllomorphDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\SwapLexemeWithAllomorphDlg.cs,SwapLexemeWithAllomorphDlg,The following statement contains a magic number: m_fwTextBoxBottomMsg.Size = new Size(386' 45);
Magic Number,SIL.FieldWorks.XWorks.LexEd,SwapLexemeWithAllomorphDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\SwapLexemeWithAllomorphDlg.cs,SwapLexemeWithAllomorphDlg,The following statement contains a magic number: btnOK.TabIndex = 2;
Magic Number,SIL.FieldWorks.XWorks.LexEd,SwapLexemeWithAllomorphDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\SwapLexemeWithAllomorphDlg.cs,SwapLexemeWithAllomorphDlg,The following statement contains a magic number: btnClose.TabIndex = 3;
Missing Default,SIL.FieldWorks.XWorks.LexEd,FLExBridgeListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\FLExBridgeListener.cs,RepeatPriorFailedImportIfNeeded,The following switch statement is missing a default case: switch (previousImportStatus)  			{  				case ImportFailureStatus.BasicImportNeeded:  					return !ImportLiftCommon(FlexLiftMerger.MergeStyle.MsKeepBoth);  				case ImportFailureStatus.StandardImportNeeded:  					return !ImportLiftCommon(FlexLiftMerger.MergeStyle.MsKeepOnlyNew);  				case ImportFailureStatus.NoImportNeeded:  					// Nothing to do. :-)  					break;  			}
Missing Default,SIL.FieldWorks.XWorks.LexEd,LexEntryMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryMenuHandler.cs,CreateNewForm,The following switch statement is missing a default case: switch (clsid)  			{  				case MoAffixProcessTags.kClassId:  					return parent.Services.GetInstance<IMoAffixProcessFactory>().Create();    				case MoAffixAllomorphTags.kClassId:  					return parent.Services.GetInstance<IMoAffixAllomorphFactory>().Create();    				case MoStemAllomorphTags.kClassId:  					return parent.Services.GetInstance<IMoStemAllomorphFactory>().Create();  			}
Missing Default,SIL.FieldWorks.XWorks.LexEd,LexEntryMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexEntryMenuHandler.cs,CheckForFormDataLoss,The following switch statement is missing a default case: switch (origForm.ClassID)  			{  				case MoAffixAllomorphTags.kClassId:  					IMoAffixAllomorph affAllo = origForm as IMoAffixAllomorph;  					bool loseEnv = affAllo.PhoneEnvRC.Count > 0;  					bool losePos = affAllo.PositionRS.Count > 0;  					bool loseGram = affAllo.MsEnvFeaturesOA != null || affAllo.MsEnvPartOfSpeechRA != null;  					if (loseEnv && losePos && loseGram)  						msg = LexEdStrings.ksConvertFormLoseEnvInfixLocGramInfo;  					else if (loseEnv && losePos)  						msg = LexEdStrings.ksConvertFormLoseEnvInfixLoc;  					else if (loseEnv && loseGram)  						msg = LexEdStrings.ksConvertFormLoseEnvGramInfo;  					else if (losePos && loseGram)  						msg = LexEdStrings.ksConvertFormLoseInfixLocGramInfo;  					else if (loseEnv)  						msg = LexEdStrings.ksConvertFormLoseEnv;  					else if (losePos)  						msg = LexEdStrings.ksConvertFormLoseInfixLoc;  					else if (loseGram)  						msg = LexEdStrings.ksConvertFormLoseGramInfo;  					break;    				case MoAffixProcessTags.kClassId:  					msg = LexEdStrings.ksConvertFormLoseRule;  					break;    				case MoStemAllomorphTags.kClassId:  					// not implemented  					break;  			}
Missing Default,SIL.FieldWorks.XWorks.LexEd,LexReferenceCollectionLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceCollectionLauncher.cs,HandleChooser,The following switch statement is missing a default case: switch (type)  				{  					case LexRefTypeTags.MappingTypes.kmtSenseCollection:  						dlg = new LinkEntryOrSenseDlg();  						(dlg as LinkEntryOrSenseDlg).SelectSensesOnly = true;  						sTitle = String.Format(LexEdStrings.ksIdentifyXSense'  							lrt.Name.BestAnalysisAlternative.Text);  						break;  					case LexRefTypeTags.MappingTypes.kmtEntryCollection:  						dlg = new EntryGoDlg();  						sTitle = String.Format(LexEdStrings.ksIdentifyXLexEntry'  							lrt.Name.BestAnalysisAlternative.Text);  						break;  					case LexRefTypeTags.MappingTypes.kmtEntryOrSenseCollection:  						dlg = new LinkEntryOrSenseDlg();  						sTitle = String.Format(LexEdStrings.ksIdentifyXLexEntryOrSense'  							lrt.Name.BestAnalysisAlternative.Text);  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,GenerateChildNode,The following switch statement is missing a default case: switch ((LexRefTypeTags.MappingTypes)lrt.MappingType)  			{  				case LexRefTypeTags.MappingTypes.kmtSenseUnidirectional:  				case LexRefTypeTags.MappingTypes.kmtEntryUnidirectional:  				case LexRefTypeTags.MappingTypes.kmtEntryOrSenseUnidirectional:  					if (chvoTargets > 0)  					{  						int hvoFirst = sda.get_VecItem(lr.Hvo' LexReferenceTags.kflidTargets' 0);  						if (hvoFirst != m_obj.Hvo)  							return;  					}  					break;    				case LexRefTypeTags.MappingTypes.kmtSenseTree:  				case LexRefTypeTags.MappingTypes.kmtEntryTree:  				case LexRefTypeTags.MappingTypes.kmtEntryOrSenseTree:  				case LexRefTypeTags.MappingTypes.kmtSenseAsymmetricPair: // Sense Pair with different Forward/Reverse names  				case LexRefTypeTags.MappingTypes.kmtEntryAsymmetricPair: // Entry Pair with different Forward/Reverse names  				case LexRefTypeTags.MappingTypes.kmtEntryOrSenseAsymmetricPair: // Entry or sense Pair with different Forward/Reverse names  					//int chvo = sda.get_VecSize(lr.Hvo' LexReferenceTags.kflidTargets);  					if (chvoTargets > 0)  					{  						int hvoFirst = sda.get_VecItem(lr.Hvo' LexReferenceTags.kflidTargets' 0);  						if (hvoFirst != m_obj.Hvo)  						{  							sLabel = lrt.ReverseName.BestAnalysisAlternative.Text;  							if (sLabel == null || sLabel == string.Empty)  								sLabel = lrt.ReverseAbbreviation.BestAnalysisAlternative.Text;  							fTreeRoot = false;  						}  					}  					break;  			}
Missing Default,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,GenerateChildNode,The following switch statement is missing a default case: switch ((LexRefTypeTags.MappingTypes)lrt.MappingType)  			{  				case LexRefTypeTags.MappingTypes.kmtSenseCollection:  					sXml +=	" class=\"SIL.FieldWorks.XWorks.LexEd.LexReferenceCollectionSlice\"";  					break;  				case LexRefTypeTags.MappingTypes.kmtSenseUnidirectional:  					sXml += " class=\"SIL.FieldWorks.XWorks.LexEd.LexReferenceUnidirectionalSlice\"";  					break;  				case LexRefTypeTags.MappingTypes.kmtSensePair:  				case LexRefTypeTags.MappingTypes.kmtSenseAsymmetricPair: // Sense Pair with different Forward/Reverse names  				case LexRefTypeTags.MappingTypes.kmtEntryPair:  				case LexRefTypeTags.MappingTypes.kmtEntryAsymmetricPair: // Entry Pair with different Forward/Reverse names  				case LexRefTypeTags.MappingTypes.kmtEntryOrSensePair:  				case LexRefTypeTags.MappingTypes.kmtEntryOrSenseAsymmetricPair: // Entry or sense Pair with different forward/Reverse names  					sXml +=	" class=\"SIL.FieldWorks.XWorks.LexEd.LexReferencePairSlice\"";  					sMenu = "mnuDataTree-DeleteReplaceLexReference";  					break;  				case LexRefTypeTags.MappingTypes.kmtSenseTree:  					if (fTreeRoot)  					{  						sXml +=	" class=\"SIL.FieldWorks.XWorks.LexEd.LexReferenceTreeBranchesSlice\"";  						sMenu = "mnuDataTree-DeleteAddLexReference";  					}  					else  					{  						sXml +=	" class=\"SIL.FieldWorks.XWorks.LexEd.LexReferenceTreeRootSlice\"";  						sMenu = "mnuDataTree-DeleteReplaceLexReference";  					}  					break;  				case LexRefTypeTags.MappingTypes.kmtSenseSequence:  				case LexRefTypeTags.MappingTypes.kmtEntrySequence:  				case LexRefTypeTags.MappingTypes.kmtEntryOrSenseSequence:  					sXml +=	" class=\"SIL.FieldWorks.XWorks.LexEd.LexReferenceSequenceSlice\"";  					break;  				case LexRefTypeTags.MappingTypes.kmtEntryCollection:  					sXml +=	" class=\"SIL.FieldWorks.XWorks.LexEd.LexReferenceCollectionSlice\"";  					//sMenu = "mnuDataTree-DeleteFromLexEntryReference"; we used to have distinct strings in the menu  					sMenu = "mnuDataTree-DeleteAddLexReference";  					break;  				case LexRefTypeTags.MappingTypes.kmtEntryUnidirectional:  					sXml += " class=\"SIL.FieldWorks.XWorks.LexEd.LexReferenceUnidirectionalSlice\"";  					//sMenu = "mnuDataTree-DeleteFromLexEntryReference"; we used to have distinct strings in the menu  					sMenu = "mnuDataTree-DeleteAddLexReference";  					break;  				case LexRefTypeTags.MappingTypes.kmtEntryTree:  					//sMenu = "mnuDataTree-DeleteFromLexEntryReference"; we used to have distinct strings in the menu  					sMenu = "mnuDataTree-DeleteAddLexReference";  					if (fTreeRoot)  					{  						sXml +=	" class=\"SIL.FieldWorks.XWorks.LexEd.LexReferenceTreeBranchesSlice\"";  						sMenu = "mnuDataTree-DeleteAddLexReference";  					}  					else  					{  						sXml +=	" class=\"SIL.FieldWorks.XWorks.LexEd.LexReferenceTreeRootSlice\"";  						sMenu = "mnuDataTree-DeleteReplaceLexReference";  					}  					break;  				case LexRefTypeTags.MappingTypes.kmtEntryOrSenseCollection:  					sXml +=	" class=\"SIL.FieldWorks.XWorks.LexEd.LexReferenceCollectionSlice\"";  					if (m_obj is ILexEntry)  						//sMenu = "mnuDataTree-DeleteFromLexEntryReference"; we used to have distinct strings in the menu  						sMenu = "mnuDataTree-DeleteAddLexReference";  					break;  				case LexRefTypeTags.MappingTypes.kmtEntryOrSenseUnidirectional:  					sXml += " class=\"SIL.FieldWorks.XWorks.LexEd.LexReferenceUnidirectionalSlice\"";  					if (m_obj is ILexEntry)  						//sMenu = "mnuDataTree-DeleteFromLexEntryReference"; we used to have distinct strings in the menu  						sMenu = "mnuDataTree-DeleteAddLexReference";  					break;  				case LexRefTypeTags.MappingTypes.kmtEntryOrSenseTree:  					if (m_obj is ILexEntry)  						//sMenu = "mnuDataTree-DeleteFromLexEntryReference"; we used to have distinct strings in the menu  						sMenu = "mnuDataTree-DeleteAddLexReference";  					if (fTreeRoot)  					{  						sXml +=	" class=\"SIL.FieldWorks.XWorks.LexEd.LexReferenceTreeBranchesSlice\"";  						sMenu = "mnuDataTree-DeleteAddLexReference";  					}  					else  					{  						sXml +=	" class=\"SIL.FieldWorks.XWorks.LexEd.LexReferenceTreeRootSlice\"";  					}  					break;    			}
Missing Default,SIL.FieldWorks.XWorks.LexEd,LexReferenceMultiSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceMultiSlice.cs,SetupContextMenuStrip,The following switch statement is missing a default case: switch ((LexRefTypeTags.MappingTypes)lrt.MappingType)  				{  					case LexRefTypeTags.MappingTypes.kmtSenseCollection:  					case LexRefTypeTags.MappingTypes.kmtSensePair:  					case LexRefTypeTags.MappingTypes.kmtSenseSequence:  					case LexRefTypeTags.MappingTypes.kmtSenseUnidirectional:  					case LexRefTypeTags.MappingTypes.kmtEntryCollection:  					case LexRefTypeTags.MappingTypes.kmtEntryPair:  					case LexRefTypeTags.MappingTypes.kmtEntrySequence:  					case LexRefTypeTags.MappingTypes.kmtEntryUnidirectional:  					case LexRefTypeTags.MappingTypes.kmtEntryOrSenseCollection:  					case LexRefTypeTags.MappingTypes.kmtEntryOrSensePair:  					case LexRefTypeTags.MappingTypes.kmtEntryOrSenseSequence:  					case LexRefTypeTags.MappingTypes.kmtEntryOrSenseUnidirectional:  						label = string.Format(formatName' name);  						break;  					case LexRefTypeTags.MappingTypes.kmtSenseTree:  					case LexRefTypeTags.MappingTypes.kmtEntryTree:  					case LexRefTypeTags.MappingTypes.kmtEntryOrSenseTree:  					case LexRefTypeTags.MappingTypes.kmtSenseAsymmetricPair:  					case LexRefTypeTags.MappingTypes.kmtEntryAsymmetricPair:  					case LexRefTypeTags.MappingTypes.kmtEntryOrSenseAsymmetricPair:  						label = string.Format(formatNameWithReverse' name' reverseName);  						label2 = string.Format(formatNameWithReverse' reverseName' name);  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.LexEd,LexReferencePairLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferencePairLauncher.cs,HandleChooser,The following switch statement is missing a default case: switch (type)  				{  					case LexRefTypeTags.MappingTypes.kmtSensePair:  					case LexRefTypeTags.MappingTypes.kmtSenseAsymmetricPair: // Sense pair with different Forward/Reverse names  						dlg = new LinkEntryOrSenseDlg();  						(dlg as LinkEntryOrSenseDlg).SelectSensesOnly = true;  						break;  					case LexRefTypeTags.MappingTypes.kmtEntryPair:  					case LexRefTypeTags.MappingTypes.kmtEntryAsymmetricPair: // Entry pair with different Forward/Reverse names  						dlg = new EntryGoDlg();  						break;  					case LexRefTypeTags.MappingTypes.kmtEntryOrSensePair:  					case LexRefTypeTags.MappingTypes.kmtEntryOrSenseAsymmetricPair: // Entry or sense pair with different Forward/Reverse  						dlg = new LinkEntryOrSenseDlg();  						(dlg as LinkEntryOrSenseDlg).SelectSensesOnly = false;  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.LexEd,LexReferenceSequenceLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceSequenceLauncher.cs,HandleChooser,The following switch statement is missing a default case: switch ((LexRefTypeTags.MappingTypes)type)  				{  					case LexRefTypeTags.MappingTypes.kmtSenseSequence:  						dlg = new LinkEntryOrSenseDlg();  						(dlg as LinkEntryOrSenseDlg).SelectSensesOnly = true;  						break;  					case LexRefTypeTags.MappingTypes.kmtEntrySequence:  						dlg = new EntryGoDlg();  						break;  					case LexRefTypeTags.MappingTypes.kmtEntryOrSenseSequence:  						dlg = new LinkEntryOrSenseDlg();  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.LexEd,LexReferenceTreeBranchesLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceTreeBranchesLauncher.cs,HandleChooser,The following switch statement is missing a default case: switch ((LexRefTypeTags.MappingTypes)type)  				{  					case LexRefTypeTags.MappingTypes.kmtSenseTree:  						dlg = new LinkEntryOrSenseDlg();  						(dlg as LinkEntryOrSenseDlg).SelectSensesOnly = true;  						break;  					case LexRefTypeTags.MappingTypes.kmtEntryTree:  						dlg = new EntryGoDlg();  						break;  					case LexRefTypeTags.MappingTypes.kmtEntryOrSenseTree:  						dlg = new LinkEntryOrSenseDlg();  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.LexEd,LexReferenceTreeRootLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceTreeRootLauncher.cs,HandleChooser,The following switch statement is missing a default case: switch ((LexRefTypeTags.MappingTypes)type)  				{  					case LexRefTypeTags.MappingTypes.kmtSenseTree:  						dlg = new LinkEntryOrSenseDlg();  						(dlg as LinkEntryOrSenseDlg).SelectSensesOnly = true;  						break;  					case LexRefTypeTags.MappingTypes.kmtEntryTree:  						dlg = new EntryGoDlg();  						break;  					case LexRefTypeTags.MappingTypes.kmtEntryOrSenseTree:  						dlg = new LinkEntryOrSenseDlg();  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.LexEd,LexReferenceUnidirectionalLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\LexReferenceUnidirectionalLauncher.cs,HandleChooser,The following switch statement is missing a default case: switch ((LexRefTypeTags.MappingTypes)type)  				{  					case LexRefTypeTags.MappingTypes.kmtSenseUnidirectional:  						dlg = new LinkEntryOrSenseDlg();  						(dlg as LinkEntryOrSenseDlg).SelectSensesOnly = true;  						break;  					case LexRefTypeTags.MappingTypes.kmtEntryUnidirectional:  						dlg = new EntryGoDlg();  						break;  					case LexRefTypeTags.MappingTypes.kmtEntryOrSenseUnidirectional:  						dlg = new LinkEntryOrSenseDlg();  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.LexEd,MsaInflectionFeatureListDlgLauncherSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\MsaInflectionFeatureListDlgLauncherSlice.cs,RemoveFeatureStructureFromMSA,The following switch statement is missing a default case: switch (m_obj.ClassID)  					{  						case MoStemMsaTags.kClassId:  							IMoStemMsa stem = m_obj as IMoStemMsa;  							stem.MsFeaturesOA = null;  							break;  						case MoInflAffMsaTags.kClassId:  							IMoInflAffMsa infl = m_obj as IMoInflAffMsa;  							infl.InflFeatsOA = null;  							break;  						case MoDerivAffMsaTags.kClassId:  							IMoDerivAffMsa derv = m_obj as IMoDerivAffMsa;  							if (m_flid == MoDerivAffMsaTags.kflidFromMsFeatures)  							{  								derv.FromMsFeaturesOA = null;  							}  							else  							{ // assume it's the to features  								derv.ToMsFeaturesOA = null;  							}  							break;  					}
Missing Default,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncher,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncher.cs,HandleChooser,The following switch statement is missing a default case: switch (parentSliceClass)  				{  					case PhPhonemeTags.kClassId:  						IPhPhoneme phoneme = parentSlice.Object as IPhPhoneme;  						if (phoneme.FeaturesOA != null)  							originalFs = phoneme.FeaturesOA;  						break;  					case PhNCFeaturesTags.kClassId:  						IPhNCFeatures features = parentSlice.Object as IPhNCFeatures;  						if (features.FeaturesOA != null)  							originalFs = features.FeaturesOA;  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.LexEd,PhonologicalFeatureListDlgLauncherSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\PhonologicalFeatureListDlgLauncherSlice.cs,RemoveFeatureStructureFromOwner,The following switch statement is missing a default case: switch (m_obj.ClassID)  					{  						case PhPhonemeTags.kClassId:  							var phoneme = (IPhPhoneme) m_obj;  							phoneme.FeaturesOA = null;  							break;  						case PhNCFeaturesTags.kClassId:  							var features = (IPhNCFeatures) m_obj;  							features.FeaturesOA = null;  							break;  					}
Missing Default,SIL.FieldWorks.XWorks.LexEd,ReversalEntryGoSearchEngine,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryGoSearchEngine.cs,IsIndexResetRequired,The following switch statement is missing a default case: switch (flid)  			{  				case ReversalIndexTags.kflidEntries:  					return hvo == m_reversalIndex.Hvo;  				case ReversalIndexEntryTags.kflidReversalForm:  					return m_revEntryRepository.GetObject(hvo).ReversalIndex == m_reversalIndex;  			}
Missing Default,SIL.FieldWorks.XWorks.LexEd,ReversalEntryGoSearchEngine,C:\repos\sillsdev_FieldWorks\Src\LexText\Lexicon\ReversalEntryGoSearchEngine.cs,IsFieldMultiString,The following switch statement is missing a default case: switch (field.Flid)  			{  				case ReversalIndexEntryTags.kflidReversalForm:  					return true;  			}
