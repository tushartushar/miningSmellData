Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,InitializeComponent,The method has 140 lines of code.
Long Method,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetDescription,The method has 136 lines of code.
Long Method,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,InitializeComponent,The method has 377 lines of code.
Complex Method,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,ReadDataFromUnicodeFiles,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,m_btnSave_Click,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetDescription,Cyclomatic complexity of the method is 42
Complex Method,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,Cyclomatic complexity of the method is 42
Complex Method,SIL.FieldWorks.UnicodeCharEditor,Program,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\Program.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,SetEnableBasedOnGeneralCategory,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,ForceValidNumeric,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.UnicodeCharEditor,PUAInstaller,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\PUAInstaller.cs,InstallPUACharacters,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.UnicodeCharEditor,PUAInstaller,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\PUAInstaller.cs,InsertCharacters,Cyclomatic complexity of the method is 12
Long Identifier,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,,The length of the parameter m_cbCompatabilityDecomposition is 30.
Long Statement,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,m_btnDelete_Click,The length of the statement  "					string msg = String.Format("Deleting the character definition for {0} cannot be undone.  Do you want to continue?"' spec.CodePoint); " is 132.
Long Statement,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CharEditorWindow)); " is 136.
Long Statement,SIL.FieldWorks.UnicodeCharEditor,Program,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\Program.cs,Main,The length of the statement  "						// There were no arguments (the program was double-clicked or opened through the Start menu); run the graphical interface " is 121.
Long Statement,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,SetDialogProperties,The length of the statement  "				Debug.Assert(false' "Dialog must be set to Add or Modify (using the Modify property) before SetDialogProperties is called"); " is 124.
Long Statement,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CustomCharDlg)); " is 133.
Long Statement,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,InitializeComponent,The length of the statement  "			this.m_cbGeneralCategory.SelectedIndexChanged += new System.EventHandler(this.m_cbGeneralCategory_SelectedIndexChanged); " is 120.
Long Statement,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,InitializeComponent,The length of the statement  "			this.m_cbCompatabilityDecomposition.SelectedIndexChanged += new System.EventHandler(this.m_cbCompatabilityDecomposition_SelectedIndexChanged); " is 142.
Long Statement,SIL.FieldWorks.UnicodeCharEditor,PUAInstaller,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\PUAInstaller.cs,RunICUTools,The length of the statement  "			args = $@" -o ""{nfkcBinaryFileName}"" ""{nfcTxtFileName}"" ""{nfkcTxtFileName}"" ""{nfcHebrewFileName}"" ""{nfcOverridesFileName}"" ""{nfkcOverridesFileName}"""; " is 162.
Empty Catch Block,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,FindCachedIcuEntry,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.UnicodeCharEditor,Program,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\Program.cs,DeleteTemporaryFiles,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.UnicodeCharEditor,PUAInstaller,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\PUAInstaller.cs,InstallPUACharacters,The method has an empty catch block.
Magic Number,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,GetListViewSubItemsArray,The following statement contains a magic number: var rgs = new string[10];
Magic Number,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,GetListViewSubItemsArray,The following statement contains a magic number: rgs[2] = cs.GeneralCategory.ToString();
Magic Number,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,GetListViewSubItemsArray,The following statement contains a magic number: rgs[3] = cs.CanonicalCombiningClass.ToString();
Magic Number,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,GetListViewSubItemsArray,The following statement contains a magic number: rgs[4] = cs.BidiClass.ToString();
Magic Number,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,GetListViewSubItemsArray,The following statement contains a magic number: rgs[5] = cs.Decomposition;
Magic Number,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,GetListViewSubItemsArray,The following statement contains a magic number: rgs[6] = cs.BidiMirrored.ToString();
Magic Number,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,GetListViewSubItemsArray,The following statement contains a magic number: rgs[7] = cs.Upper;
Magic Number,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,GetListViewSubItemsArray,The following statement contains a magic number: rgs[8] = cs.Lower;
Magic Number,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,GetListViewSubItemsArray,The following statement contains a magic number: rgs[9] = cs.Title;
Magic Number,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,ParseCodeField,The following statement contains a magic number: rgsCode.Length != 2
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following statement contains a magic number: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,Program,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\Program.cs,Main,The following statement contains a magic number: switch (args.FirstOrDefault())  				{  					case "-i":  					case "-install":  					case "--install":  						// If we have any custom character data' install it!  						FwUtils.InitializeIcu();  						var customCharsFile = CharEditorWindow.CustomCharsFile;  						if (File.Exists(customCharsFile))  						{  							new PUAInstaller().InstallPUACharacters(customCharsFile);  						}  						break;  					case "--cleanup":  						// If the second argument is a Process ID (int)' wait up to five minutes for the proces to exit and then clean up;  						// otherwise' silently do nothing.  						needCleanup = false;  						int pid;  						if (int.TryParse(args.LastOrDefault()' out pid))  						{  							var iterationCount = 0;  							while (Process.GetProcesses().Any(p => p.Id == pid) && iterationCount < 300)  							{  								// wait 1s then try again  								Thread.Sleep(1000);  								iterationCount++;  							}    							if (iterationCount < 300)  								DeleteTemporaryFiles();  						}  						break;  					case null:  						// There were no arguments (the program was double-clicked or opened through the Start menu); run the graphical interface  						FwUtils.InitializeIcu();  						window = new CharEditorWindow();  						Application.Run(window);  						break;  					default:  						// An unrecognized argument was passed  						MessageBox.Show("Only one command line argument is recognized:" + Environment.NewLine +  										"\t-i means to install the custom character definitions (as a command line program)."'  							"Unicode Character Editor");  						break;  				}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,Program,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\Program.cs,Main,The following statement contains a magic number: switch (args.FirstOrDefault())  				{  					case "-i":  					case "-install":  					case "--install":  						// If we have any custom character data' install it!  						FwUtils.InitializeIcu();  						var customCharsFile = CharEditorWindow.CustomCharsFile;  						if (File.Exists(customCharsFile))  						{  							new PUAInstaller().InstallPUACharacters(customCharsFile);  						}  						break;  					case "--cleanup":  						// If the second argument is a Process ID (int)' wait up to five minutes for the proces to exit and then clean up;  						// otherwise' silently do nothing.  						needCleanup = false;  						int pid;  						if (int.TryParse(args.LastOrDefault()' out pid))  						{  							var iterationCount = 0;  							while (Process.GetProcesses().Any(p => p.Id == pid) && iterationCount < 300)  							{  								// wait 1s then try again  								Thread.Sleep(1000);  								iterationCount++;  							}    							if (iterationCount < 300)  								DeleteTemporaryFiles();  						}  						break;  					case null:  						// There were no arguments (the program was double-clicked or opened through the Start menu); run the graphical interface  						FwUtils.InitializeIcu();  						window = new CharEditorWindow();  						Application.Run(window);  						break;  					default:  						// An unrecognized argument was passed  						MessageBox.Show("Only one command line argument is recognized:" + Environment.NewLine +  										"\t-i means to install the custom character definitions (as a command line program)."'  							"Unicode Character Editor");  						break;  				}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,Program,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\Program.cs,Main,The following statement contains a magic number: switch (args.FirstOrDefault())  				{  					case "-i":  					case "-install":  					case "--install":  						// If we have any custom character data' install it!  						FwUtils.InitializeIcu();  						var customCharsFile = CharEditorWindow.CustomCharsFile;  						if (File.Exists(customCharsFile))  						{  							new PUAInstaller().InstallPUACharacters(customCharsFile);  						}  						break;  					case "--cleanup":  						// If the second argument is a Process ID (int)' wait up to five minutes for the proces to exit and then clean up;  						// otherwise' silently do nothing.  						needCleanup = false;  						int pid;  						if (int.TryParse(args.LastOrDefault()' out pid))  						{  							var iterationCount = 0;  							while (Process.GetProcesses().Any(p => p.Id == pid) && iterationCount < 300)  							{  								// wait 1s then try again  								Thread.Sleep(1000);  								iterationCount++;  							}    							if (iterationCount < 300)  								DeleteTemporaryFiles();  						}  						break;  					case null:  						// There were no arguments (the program was double-clicked or opened through the Start menu); run the graphical interface  						FwUtils.InitializeIcu();  						window = new CharEditorWindow();  						Application.Run(window);  						break;  					default:  						// An unrecognized argument was passed  						MessageBox.Show("Only one command line argument is recognized:" + Environment.NewLine +  										"\t-i means to install the custom character definitions (as a command line program)."'  							"Unicode Character Editor");  						break;  				}
Magic Number,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,ValidCodepoint,The following statement contains a magic number: codepoint.Length < 4
Magic Number,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,ValidCodepoint,The following statement contains a magic number: codepoint.Length > 6
Magic Number,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,ValidCodepoint,The following statement contains a magic number: var codepointValue = Convert.ToInt32(codepoint' 16);
Magic Number,SIL.FieldWorks.UnicodeCharEditor,PUAInstaller,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\PUAInstaller.cs,InstallPUACharacters,The following statement contains a magic number: var combiningClass = match.Groups[2].Value.Trim();
Magic Number,SIL.FieldWorks.UnicodeCharEditor,PUAInstaller,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\PUAInstaller.cs,InstallPUACharacters,The following statement contains a magic number: var decomp = match.Groups[3].Value.Trim();
Magic Number,SIL.FieldWorks.UnicodeCharEditor,PUAInstaller,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\PUAInstaller.cs,InsertCharacters,The following statement contains a magic number: var newCode = Convert.ToInt32(puaDefinitions[codeIndex].CodePoint' 16);
Magic Number,SIL.FieldWorks.UnicodeCharEditor,PUAInstaller,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\PUAInstaller.cs,InsertCharacters,The following statement contains a magic number: var fileCode = Convert.ToInt32(strFileCode' 16);
Magic Number,SIL.FieldWorks.UnicodeCharEditor,PUAInstaller,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\PUAInstaller.cs,InsertCharacters,The following statement contains a magic number: newCode = Convert.ToInt32(puaDefinitions[codeIndex].CodePoint' 16);
Missing Default,SIL.FieldWorks.UnicodeCharEditor,CharEditorWindow,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CharEditorWindow.cs,OnClosing,The following switch statement is missing a default case: switch (res)  				{  					case DialogResult.Cancel:  						e.Cancel = true;  						return;  					case DialogResult.Yes:  						m_btnSave_Click(this' e);  						break;  				}
Missing Default,SIL.FieldWorks.UnicodeCharEditor,ErrorCodesExtensionMethods,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\ErrorCodes.cs,GetLinuxErrorCode,The following switch statement is missing a default case: switch (errorCode)  			{  				case ErrorCodes.Success:  					return 0;  				case ErrorCodes.None:  					return 1;  				case ErrorCodes.CommandLine:  					return 2;  				case ErrorCodes.CancelAccessFailure:  					return 4;  				case ErrorCodes.LdBaseLocale:  					return 11;  				case ErrorCodes.LdNewLocale:  					return 12;  				case ErrorCodes.LdLocaleResources:  					return 13;  				case ErrorCodes.LdFileName:  					return 14;  				case ErrorCodes.LdBadData:  					return 15;  				case ErrorCodes.LdParsingError:  					return 16;  				case ErrorCodes.LdUsingISO3CountryName:  					return 17;  				case ErrorCodes.LdUsingISO3LanguageName:  					return 18;  				case ErrorCodes.LdUsingISO3ScriptName:  					return 19;  				case ErrorCodes.ResIndexFile:  					return 21;  				case ErrorCodes.RootFile:  					return 22;  				case ErrorCodes.NewLocaleFile:  					return 23;  				case ErrorCodes.GeneralFile:  					return 24;  				case ErrorCodes.ExistingLocaleFile:  					return 25;  				case ErrorCodes.FileRead:  					return 31;  				case ErrorCodes.FileWrite:  					return 32;  				case ErrorCodes.FileRename:  					return 33;  				case ErrorCodes.FileNotFound:  					return 34;  				case ErrorCodes.RootTxtFileNotFound:  					return 41;  				case ErrorCodes.ResIndexTxtFileNotFound:  					return 42;  				case ErrorCodes.RootResFileNotFound:  					return 43;  				case ErrorCodes.ResIndexResFileNotFound:  					return 44;  				case ErrorCodes.RootTxtInvalidCustomResourceFormat:  					return 45;  				case ErrorCodes.RootTxtCustomResourceNotFound:  					return 46;  				case ErrorCodes.RegistryIcuDir:  					return 50;  				case ErrorCodes.RegistryIcuLanguageDir:  					return 51;  				case ErrorCodes.RegistryIcuTemplatesDir:  					return 52;  				case ErrorCodes.Gennames:  					return 60;  				case ErrorCodes.Genprops:  					return 61;  				case ErrorCodes.Gennorm:  					return 62;  				case ErrorCodes.Genbidi:  					return 63;  				case ErrorCodes.Gencase:  					return 64;  				case ErrorCodes.PUAOutOfRange:  					return 70;  				case ErrorCodes.PUADefinitionFormat:  					return 71;  				case ErrorCodes.ICUDataParsingError:  					return 80;  				case ErrorCodes.ICUNodeAccessError:  					return 81;  				case ErrorCodes.ProgrammingError:  					return 254;  				case ErrorCodes.NonspecificError:  					return 255;  			}
Missing Default,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,SetEnableBasedOnGeneralCategory,The following switch statement is missing a default case: switch (majorClass)  			{  				case 'N':  					m_cbNumericType.Enabled = true;  					m_txtNumericValue.Enabled = true;  					m_chBidiMirrored.Enabled = false;  					break;  				case 'L':  					m_txtUpperEquiv.Enabled = true;  					m_txtLowerEquiv.Enabled = true;  					m_txtTitleEquiv.Enabled = true;  					m_chBidiMirrored.Enabled = false;  					break;  				case 'C':  					m_cbNumericType.Enabled = true;  					m_txtNumericValue.Enabled = true;  					m_txtUpperEquiv.Enabled = true;  					m_txtLowerEquiv.Enabled = true;  					m_txtTitleEquiv.Enabled = true;  					m_cbCanonicalCombClass.Enabled = true;  					break;  				case 'M':  					if( subClass == 'e' )  						break;  					m_cbCanonicalCombClass.Enabled = true;  					break;  				case 'Z':  					m_chBidiMirrored.Enabled = false;  					break;  			}
Missing Default,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,SetEnableBasedOnGeneralCategory,The following switch statement is missing a default case: switch (majorClass)  			{  				case 'N':  					if( subClass == 'd' )  					{  						m_cbNumericType.SelectedItem = UcdProperty.GetInstance(Icu.Character.UNumericType.DECIMAL);  						m_cbNumericType.Enabled = false;  					}  					break;  			}
Missing Default,SIL.FieldWorks.UnicodeCharEditor,CustomCharDlg,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\UnicodeCharEditor\CustomCharDlg.cs,IsValid,The following switch statement is missing a default case: switch ( unicodePropertyType )  			{  				case UnicodePropertyType.name:  					return char.IsLetter(character) || character == ' ' || character == '-';  				case UnicodePropertyType.codepoint:  					return ('A' <= char.ToUpper(character) &&  char.ToUpper(character) <= 'F') || char.IsNumber(character);  				case UnicodePropertyType.decomposition:  					return IsValid(character' UnicodePropertyType.codepoint) || character == ' ';  				case UnicodePropertyType.numeric:  					return char.IsNumber(character) || character == '/' || character == '.' || character == '-';  			}
