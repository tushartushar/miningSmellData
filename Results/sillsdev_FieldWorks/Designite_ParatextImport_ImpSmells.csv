Implementation smell,Namespace,Class,File,Method,Description
Long Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,DetectDifferencesInScrVerses,The method has 100 lines of code.
Long Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CreateSubDiffsForOneSidedClusterParas,The method has 160 lines of code.
Long Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CreateSubDiffsForClusterParas,The method has 142 lines of code.
Long Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CompareVerseText,The method has 202 lines of code.
Long Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CompareRunProps,The method has 117 lines of code.
Long Method,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,CreateBasicOverlapClusters,The method has 108 lines of code.
Long Method,ParatextImport,ImportedBooks,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ImportedBooks.cs,InitializeComponent,The method has 106 lines of code.
Long Method,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessSegment,The method has 163 lines of code.
Long Method,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,HandleSpecialTargets,The method has 210 lines of code.
Long Method,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessBackTransSegment,The method has 216 lines of code.
Complex Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,DetectDifferences,Cyclomatic complexity of the method is 10
Complex Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,ProcessMissingAddedSectionHead,Cyclomatic complexity of the method is 12
Complex Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,DetermineVersesMovedDiffs,Cyclomatic complexity of the method is 9
Complex Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CreateSubDiffsForOneSidedClusterParas,Cyclomatic complexity of the method is 10
Complex Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CreateSubDiffsForClusterParas,Cyclomatic complexity of the method is 9
Complex Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,FindVerseBoundaryParaBreak,Cyclomatic complexity of the method is 9
Complex Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,DetectDifferencesInStTexts_ByParagraph,Cyclomatic complexity of the method is 8
Complex Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CompareVerseText,Cyclomatic complexity of the method is 22
Complex Method,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CopyRevParaToCurPara,Cyclomatic complexity of the method is 9
Complex Method,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,ExtractCorrelatedPairsFromScrVerseCluster,Cyclomatic complexity of the method is 12
Complex Method,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,CleanUpClusterListForRemovedItems,Cyclomatic complexity of the method is 8
Complex Method,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,ExtractStanzaBreaksFromScrVerseCluster,Cyclomatic complexity of the method is 10
Complex Method,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,CreateBasicOverlapClusters,Cyclomatic complexity of the method is 11
Complex Method,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,CreateBasicAdjacentOverlapClusters,Cyclomatic complexity of the method is 8
Complex Method,ParatextImport,SectionHeadCorrelationHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,FindCorrelatedPairs,Cyclomatic complexity of the method is 9
Complex Method,ParatextImport,SectionHeadCorrelationHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,DetermineCorrelatedSectionHeadClusters,Cyclomatic complexity of the method is 9
Complex Method,ParatextImport,DifferenceList,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,AdjustFollowingDiffsDetails,Cyclomatic complexity of the method is 11
Complex Method,ParatextImport,Difference,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,Clone,Cyclomatic complexity of the method is 9
Complex Method,ParatextImport,Difference,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,CompareTo,Cyclomatic complexity of the method is 10
Complex Method,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessSegment,Cyclomatic complexity of the method is 24
Complex Method,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,SkipIntroMaterial,Cyclomatic complexity of the method is 8
Complex Method,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,InsertSegment,Cyclomatic complexity of the method is 8
Complex Method,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessBackTransSegment,Cyclomatic complexity of the method is 24
Complex Method,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessEndMarker,Cyclomatic complexity of the method is 11
Complex Method,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,AddBackTranslations,Cyclomatic complexity of the method is 11
Complex Method,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,AddImportStyleProxyForMapping,Cyclomatic complexity of the method is 10
Long Parameter List,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,GetMatchedTextLengths,The method has 6 parameters. Parameters: scrVersesCur' scrVersesRev' matchedTextLenInStartParas' matchedTextLenInEndParas' textCompareDiffType' baseDiff
Long Parameter List,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CreateSubDiffsForClusterParas,The method has 6 parameters. Parameters: baseDiff' scrVersesCur' scrVersesRev' matchedTextLenInStartParas' matchedTextLenInEndParas' textCompareDiffType
Long Parameter List,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,ProcessUnmatchedParas,The method has 7 parameters. Parameters: bcvRef' textCurr' textRev' iMinCurr' iLimCurr' iMinRev' iLimRev
Long Parameter List,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CompareVerseText,The method has 10 parameters. Parameters: verse1' verse2' ichMin' ichLim1' ichLim2' subDiffs' sCharStyleNameCurr' sCharStyleNameRev' sWsNameCurr' sWsNameRev
Long Parameter List,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,FindStringDifference,The method has 5 parameters. Parameters: tssV1' tssV2' ichMin' ichLim1' ichLim2
Long Parameter List,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CompareSubRunPropsForward,The method has 9 parameters. Parameters: tssV1' tssV2' ichMin' subDiff' sCharStyleName1' sCharStyleName2' sWsName1' sWsName2' ichMinNextSubRun
Long Parameter List,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CompareSubRunPropsBackward,The method has 11 parameters. Parameters: tssV1' tssV2' ichLim1' ichLim2' subDiff' sCharStyleName1' sCharStyleName2' sWsName1' sWsName2' ichLimNextSubRun1' ichLimNextSubRun2
Long Parameter List,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CompareRunProps,The method has 9 parameters. Parameters: ttpV1' ttpV2' char1' char2' subDiff' sCharStyleName1' sCharStyleName2' sWsName1' sWsName2
Long Parameter List,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,GetParaInsertIndex,The method has 5 parameters. Parameters: diff' paraCurr' textCurr' fRevParaIsStanza' insertAfter
Long Parameter List,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CopyRevParaToCurPara,The method has 8 parameters. Parameters: baseDiff' iSubDiff' originalParaCurr' ichStartRemainder' remainderParaCurr' lastParaProcessedCurr' fInsertingParasAtStartOfStText' fDeletingWholeParas
Long Parameter List,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,RemovePartOrAllOfParaInCurr,The method has 5 parameters. Parameters: baseDiff' iSubDiff' sectionCurr' lastParaProcessedCurr' fDeletingWholeParas
Long Parameter List,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CopyRevParaToNewParaInCur,The method has 7 parameters. Parameters: baseDiff' iSubDiff' originalParaCurr' ichStartRemainder' remainderParaCurr' lastParaProcessedCurr' fInsertingParasAtStartOfStText
Long Parameter List,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,ExtractingTheLastItemOnOneSide,The method has 5 parameters. Parameters: cluster' iItemCurr' iItemRev' fFwd' newIndexToInsertAtInOther
Long Parameter List,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,ExtractMissingAddedItems,The method has 5 parameters. Parameters: cluster' iFrom' iTo' fIsCurrent' fFwd
Long Parameter List,ParatextImport,DifferenceList,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,AdjustFollowingDiffsDetails,The method has 5 parameters. Parameters: diffIndex' paraCurr' ichLimit' paraNew' offset
Long Parameter List,ParatextImport,DifferenceList,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,AdjustDiff,The method has 5 parameters. Parameters: diff' ichLimit' paraNew' offset' fIsSubdiff
Long Parameter List,ParatextImport,DifferenceList,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,FixMissingCurrParaDestIP,The method has 5 parameters. Parameters: givenDiff' insertAfter' newPara' ichMinNew' ichLimNew
Long Parameter List,ParatextImport,Difference,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,Difference,The method has 17 parameters. Parameters: start' end' paraCurr' ichMinCurr' ichLimCurr' paraRev' ichMinRev' ichLimRev' diffType' subDiffsForORCs' subDiffsForParas' sCharStyleNameCurr' sCharStyleNameRev' sWsNameCurr' sWsNameRev' mapCurr' mapRev
Long Parameter List,ParatextImport,Difference,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,Difference,The method has 11 parameters. Parameters: paraCurr' ichMinCurr' ichLimCurr' paraRev' ichMinRev' ichLimRev' diffType' sCharStyleNameCurr' sCharStyleNameRev' sWsNameCurr' sWsNameRev
Long Parameter List,ParatextImport,Difference,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,Difference,The method has 11 parameters. Parameters: start' end' diffType' paraCurr' ichMinCurr' ichLimCurr' paraRev' ichMinRev' ichLimRev' mapCurr' mapRev
Long Parameter List,ParatextImport,Difference,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,Difference,The method has 6 parameters. Parameters: start' end' type' sectionsAdded' paraDest' ichDest
Long Parameter List,ParatextImport,ImportedBooks,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ImportedBooks.cs,ImportedBooks,The method has 5 parameters. Parameters: cache' importVersion' backupVersion' helpTopicProvider' app
Long Parameter List,ParatextImport,ImportedBooks,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ImportedBooks.cs,ImportedBooks,The method has 6 parameters. Parameters: cache' importVersion' backupVersion' booksImported' helpTopicProvider' app
Long Parameter List,ParatextImport,ImportedBooks,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ImportedBooks.cs,ConfirmBtOverwrite,The method has 5 parameters. Parameters: originalBook' scrDraftType' sectionsToRemove' missingBtWs' owner
Long Parameter List,ParatextImport,ImportStyleProxy,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ImportStyleProxy.cs,ImportStyleProxy,The method has 5 parameters. Parameters: sStyleName' styleType' ws' context' styleSheet
Long Parameter List,ParatextImport,ImportStyleProxy,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ImportStyleProxy.cs,ImportStyleProxy,The method has 6 parameters. Parameters: sStyleName' styleType' ws' context' domain' styleSheet
Long Parameter List,ParatextImport,ScrAnnotationInfo,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ScrAnnotationInfo.cs,ScrAnnotationInfo,The method has 5 parameters. Parameters: guidAnnotationType' bldrDiscussion' ichOffset' startReference' endReference
Long Parameter List,ParatextImport,ScrAnnotationInfo,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ScrAnnotationInfo.cs,ScrAnnotationInfo,The method has 9 parameters. Parameters: guidAnnotationType' bldrsDiscussion' bldrsQuote' bldrsRecommend' bldrsResolution' ichOffset' startReference' endReference' dateCreated
Long Parameter List,ParatextImport,SCTextEnum,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\SCTextEnum.cs,SCTextEnum,The method has 5 parameters. Parameters: settings' domain' startRef' endRef' encConverters
Long Parameter List,ParatextImport,SCTextSegment,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\SCTextSegment.cs,SCTextSegment,The method has 7 parameters. Parameters: text' marker' literalVerse' firstRef' lastRef' filename' lineNumber
Long Parameter List,ParatextImport,BtFootnoteBldrInfo,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,BtFootnoteBldrInfo,The method has 5 parameters. Parameters: ws' bldr' styleId' ichOffset' reference
Long Parameter List,ParatextImport,BTPictureInfo,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,BTPictureInfo,The method has 7 parameters. Parameters: captionText' sCopyright' ws' filename' lineNumber' segment' reference
Long Parameter List,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,Import,The method has 5 parameters. Parameters: settings' cache' styleSheet' undoManager' importCallbacks
Long Parameter List,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ParatextSfmImporter,The method has 5 parameters. Parameters: settings' cache' styleSheet' undoManager' importCallbacks
Long Parameter List,ParatextImport,ParatextImportManager,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextImportManager.cs,ParatextImportManager,The method has 5 parameters. Parameters: mainWnd' cache' importSettings' styleSheet' app
Long Parameter List,ParatextImport,ParatextImportManager,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextImportManager.cs,ImportParatext,The method has 5 parameters. Parameters: mainWnd' cache' importSettings' stylesheet' app
Long Parameter List,ParatextImport,UndoImportManager,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\UndoImportManager.cs,InsertNote,The method has 5 parameters. Parameters: bcvStartReference' bcvEndReference' obj' bldr' guidNoteType
Long Identifier,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,ReplaceCurrentWithRevision_CopyParaStructure,The length of the parameter fInsertingParasAtStartOfStText is 30.
Long Identifier,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CopyRevParaToCurPara,The length of the parameter fInsertingParasAtStartOfStText is 30.
Long Identifier,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CopyRevParaToNewParaInCur,The length of the parameter fInsertingParasAtStartOfStText is 30.
Long Identifier,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CopyRevParaToNewParaInCur,The length of the parameter lastParaProcessedInClusterCurr is 30.
Long Identifier,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,,The length of the parameter m_fCannotMergeBecauseOfTitleDifference is 38.
Long Identifier,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,,The length of the parameter m_DefaultIntroSectionHeadParaProxy is 34.
Long Identifier,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,,The length of the parameter kMaxParaSizeForVerseAndPuncBrk is 30.
Long Identifier,ParatextImport,UndoImportManager,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\UndoImportManager.cs,,The length of the parameter m_lastBookAddedToImportedBooks is 30.
Long Statement,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,ProcessMissingAddedSectionHead,The length of the statement  "			Debug.Assert(sections.Count() == 1' "Code here can maybe handle multiple sections' but it looks like this is not the intent. If this assertion fails' we'll need to look at the scenario and see if this is handled correctly."); " is 225.
Long Statement,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CompareSubRunPropsForward,The length of the statement  "			// which would need extra code here?  maybe our caller would not call us for an empty tss... write/check if a unit test proves it " is 129.
Long Statement,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,InitPrevVerseForBook,The length of the statement  "				Cache.ServiceLocator.GetInstance<IScrTxtParaFactory>().CreateWithStyle(FirstSection.HeadingOA' ScrStyleNames.SectionHead); " is 122.
Long Statement,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CopyRevParaToCurPara,The length of the statement  "					//Debug.Assert(new IScrTxtPara(m_cache' subdiff.HvoCurr).IndexInOwner == 0); This is almost always true' but alas it's not if the Current StText begins with an empty para. " is 171.
Long Statement,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,ExtractMatchedItemsCluster,The length of the statement  "			newCluster.itemsCurr.Add(cluster.itemsCurr[iItemCurr]); //use reference' not clone; the reference in original cluster will soon be deleted " is 138.
Long Statement,ParatextImport,ImportedBooks,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ImportedBooks.cs,ConfirmBtOverwrite,The length of the statement  "			string sMsg = string.Format(Properties.Resources.kstidConfirmOverwriteBackTrans' sType' sLanguages' originalBook.Name.UserDefaultWritingSystem.Text' sReferences); " is 162.
Long Statement,ParatextImport,ImportedBooks,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ImportedBooks.cs,UpdateDiffCount,The length of the statement  "				item.SubItems[kStatusCol].Text = (diffCountOrig == 0) ? Properties.Resources.kstidIdentical : Properties.Resources.kstidNoDifferencesLeft; " is 138.
Long Statement,ParatextImport,ImportedBooks,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ImportedBooks.cs,UpdateDiffCount,The length of the statement  "					newText = diffCount == diffCountOrig ? Properties.Resources.kstidOneInitialDifference : Properties.Resources.kstidOneRemainingDifference; " is 137.
Long Statement,ParatextImport,ImportedBooks,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ImportedBooks.cs,UpdateDiffCount,The length of the statement  "					newText = diffCount == diffCountOrig ? Properties.Resources.kstidInitialDifferences : Properties.Resources.kstidRemainingDifferences; " is 133.
Long Statement,ParatextImport,ImportedBooks,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ImportedBooks.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ImportedBooks)); " is 133.
Long Statement,ParatextImport,ImportedBooks,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ImportedBooks.cs,InitializeComponent,The length of the statement  "			this.m_imageListSmall.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("m_imageListSmall.ImageStream"))); " is 132.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,Import,The length of the statement  "				importCallbacks.AllowCancel = false; // LT-16647: Disallow canceling import after it is complete (before disposing importer). " is 125.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,MakeSection,The length of the statement  "			m_currSection = m_cache.ServiceLocator.GetInstance<IScrSectionFactory>().CreateEmptySection(CurrentBook' ++m_iCurrSection); " is 123.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,FindOrCreateAnnotation,The length of the statement  "			ann = m_undoManager.InsertNote(info.startReference' info.endReference' annotatedObj' GetAnnotDiscussionParaBldr(info)' info.guidAnnotationType); " is 144.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,Import,The length of the statement  "						m_importCallbacks.ErrorMessage(string.Format(Properties.Resources.kstidImportNoBookError' m_settings.StartRef.AsString' m_settings.EndRef.AsString)); " is 149.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,Initialize,The length of the statement  "			m_BookTitleParaProxy = new ImportStyleProxy(ScrStyleNames.MainBookTitle' StyleType.kstParagraph' m_wsVern' ContextValues.Title' m_styleSheet); " is 142.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,Initialize,The length of the statement  "			m_ScrSectionHeadParaProxy = new ImportStyleProxy(ScrStyleNames.SectionHead' StyleType.kstParagraph' m_wsVern' ContextValues.Text' m_styleSheet); " is 144.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,Initialize,The length of the statement  "			m_DefaultIntroSectionHeadParaProxy = new ImportStyleProxy(ScrStyleNames.IntroSectionHead' StyleType.kstParagraph' m_wsVern' ContextValues.Intro' m_styleSheet); " is 159.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,Initialize,The length of the statement  "			m_DefaultScrParaProxy = new ImportStyleProxy(ScrStyleNames.NormalParagraph' StyleType.kstParagraph' m_wsVern' ContextValues.Text' m_styleSheet); " is 144.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,Initialize,The length of the statement  "			m_DefaultIntroParaProxy = new ImportStyleProxy(ScrStyleNames.IntroParagraph' StyleType.kstParagraph' m_wsVern' ContextValues.Intro' m_styleSheet); " is 146.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,Initialize,The length of the statement  "			m_DefaultFootnoteParaProxy = new ImportStyleProxy(ScrStyleNames.NormalFootnoteParagraph' StyleType.kstParagraph' m_wsVern' ContextValues.Note' m_styleSheet); " is 157.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,Initialize,The length of the statement  "			m_DefaultAnnotationStyleProxy = new ImportStyleProxy(ScrStyleNames.Remark' StyleType.kstParagraph' m_wsAnal' ContextValues.Annotation' m_styleSheet); " is 149.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,Initialize,The length of the statement  "			m_scrTranslatorAnnotationDef = m_cache.ServiceLocator.GetInstance<ICmAnnotationDefnRepository>().GetObject(CmAnnotationDefnTags.kguidAnnTranslatorNote); " is 152.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessSegment,The length of the statement  "				if (!m_fInScriptureText && m_styleProxy.Context == ContextValues.Text && m_styleProxy.Structure == StructureValues.Body) " is 120.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessSegment,The length of the statement  "				if (!m_fInScriptureText && m_styleProxy.Context == ContextValues.Text && m_styleProxy.Structure == StructureValues.Body) " is 120.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,CheckForPendingFootnoteText,The length of the statement  "			if ((m_currDomain != MarkerDomain.Footnote || m_sMarker != m_sFootnoteEndMarker) && m_styleProxy.Context != ContextValues.Text) " is 127.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,AddNewAnnotation,The length of the statement  "					guidAnnotationType = m_cache.ServiceLocator.GetInstance<ICmAnnotationDefnRepository>().GetObject(m_SOWrapper.CurrentAnnotationType).Guid; " is 137.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,HandleFootnotes,The length of the statement  "			if (m_fInFootnote && (m_styleProxy.StyleType == StyleType.kstParagraph || (m_fGotFootnoteMarker && m_styleProxy.StyleId == ScrStyleNames.FootnoteMarker))) " is 154.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,InsertSegment,The length of the statement  "				if (m_fChapterNumberPending && m_context == ContextValues.Text && m_styleProxy.Structure == StructureValues.Body && !m_fInFootnote) " is 131.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessBackTransSegment,The length of the statement  "				throw new ScriptureUtilsException(SUE_ErrorCode.BackTransMissingVernBook' null' null' ScrReference.NumberToBookCode(m_nBookNumber)' null' null' true); " is 150.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessBackTransSegment,The length of the statement  "				else if (m_fInFootnote && (m_currDomain & MarkerDomain.Footnote) != 0 && m_styleProxy.StyleType == StyleType.kstParagraph) " is 122.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessBackTransSegment,The length of the statement  "			if (!m_fInScriptureText && m_styleProxy.Context == ContextValues.Text && m_styleProxy.Structure == StructureValues.Body) " is 120.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessBackTransSegment,The length of the statement  "					m_sBtFootnoteParaStyle = (m_styleProxy.StyleType == StyleType.kstCharacter) ? m_DefaultFootnoteParaProxy.StyleId : m_styleProxy.StyleId; " is 136.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,EndBTFootnote,The length of the statement  "				var btTss = m_BTFootnoteStrBldr.Length == 0 ? TsStringUtils.EmptyString(m_wsCurrBtPara) : m_BTFootnoteStrBldr.GetString(); " is 122.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,EndBTFootnote,The length of the statement  "				m_BtFootnoteStrBldrs.Add(new BtFootnoteBldrInfo(m_wsCurrBtPara' m_BTFootnoteStrBldr' m_sBtFootnoteParaStyle' ichMarker' m_currentRef)); " is 135.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessStartOfBook,The length of the statement  "				UpdateProgressDlgForBook(m_importDomain == ImportDomain.BackTrans ? Properties.Resources.kstidImportingBackTranslation : Properties.Resources.kstidImportingAnnotations); " is 169.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessStartOfBook,The length of the statement  "				m_fImportingToMain = (m_importDomain == ImportDomain.BackTrans || (m_importDomain == ImportDomain.Main && m_settings.ImportBackTranslation)); " is 141.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessStartOfBook,The length of the statement  "					throw new ScriptureUtilsException(SUE_ErrorCode.BackTransMissingVernBook' null' null' ScrReference.NumberToBookCode(m_nBookNumber)' null' null' false); " is 151.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessBookTitleStart,The length of the statement  "			m_ParaBldr.ParaStylePropsProxy = (m_styleProxy.StyleType == StyleType.kstParagraph) ? m_styleProxy : m_BookTitleParaProxy; " is 122.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,SetBookName,The length of the statement  "			if (m_styleProxy.StyleId == ScrStyleNames.MainBookTitle && sTitle.Length > 0 && tssBookName != null && String.IsNullOrEmpty(tssBookName.Text)) " is 142.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessSectionHeadStart,The length of the statement  "			if (m_settings.ImportTranslation && (m_currSection == null || !m_currSection.IsValidObject || m_currSection.ContentOA.ParagraphsOS.Count > 0)) " is 142.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,PrepareForFirstScriptureSection,The length of the statement  "			if (m_settings.ImportTranslation && m_importDomain == ImportDomain.Main && (m_currSection == null || !m_currSection.IsValidObject || " is 132.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,FinalizeBook,The length of the statement  "			if (m_currSection == null && m_settings.ImportTranslation && CurrentBook != null && m_importDomain == ImportDomain.Main) " is 120.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,GetVerseRefAsString,The length of the statement  "				sRef = string.Concat(sRef' m_scr.BridgeForWs(wsBt)' sVerseLast' (nSegLast > 0) ? Convert.ToChar(nSegLast + 96).ToString() : string.Empty); " is 138.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,AddBackTranslations,The length of the statement  "					throw new ScriptureUtilsException(SUE_ErrorCode.BackTransMissingVernBook' null' null' ScrReference.NumberToBookCode(m_nBookNumber)' null' null' false); " is 151.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ReportBTTextNotPartOfPara,The length of the statement  "			var sCharStyle = bldr.get_Properties(0).GetStrPropValue((int)FwTextPropType.ktptNamedStyle) ?? StyleUtils.DefaultParaCharsStyleName; " is 132.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,CreateCmTranslationForPendingBT,The length of the statement  "			if (m_prevImportDomain == ImportDomain.BackTrans || (m_prevImportDomain == ImportDomain.Main && !m_settings.ImportTranslation)) " is 127.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,CreateCmTranslationForPendingBT,The length of the statement  "				var targetRef = (BtChapterNumPending(ws) && m_vernParaStyleProxy.Style.Structure == StructureValues.Body) ? new BCVRef(m_prevRef) : new BCVRef(m_currentRef); " is 157.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,CreateCmTranslationForPendingBT,The length of the statement  "						sParaContents' string.Format(Properties.Resources.kstidBTNoCorrespondingParaDetails' m_vernParaStyleProxy.StyleId' targetRef.AsString)' " is 135.
Long Statement,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,LoadImportMappingProxies,The length of the statement  "			styleProxies[ScriptureServices.kMarkerBook] = new ImportStyleProxy(null' StyleType.kstParagraph' 0' ContextValues.Book' m_styleSheet); " is 134.
Long Statement,ParatextImport,ParatextImportManager,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextImportManager.cs,DisplayImportedBooksDlg,The length of the statement  "			using (var dlg = new ImportedBooks(Cache' ImportedVersion' backupSavedVersion' UndoManager.ImportedBooks.Keys' m_helpTopicProvider' m_app)) " is 139.
Long Statement,ParatextImport,UndoImportManager,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\UndoImportManager.cs,AddNewBook,The length of the statement  "			var newScrBook = Cache.ServiceLocator.GetInstance<IScrBookFactory>().Create(ImportedVersion.BooksOS' nCanonicalBookNumber' out title); " is 134.
Long Statement,ParatextImport,UndoImportManager,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\UndoImportManager.cs,RemoveImportedVersion,The length of the statement  "				UndoableUnitOfWorkHelper.Do("Remove temp version"' "Restore temp version"' Cache.ActionHandlerAccessor' () => m_scr.ArchivedDraftsOC.Remove(ImportedVersion)); " is 158.
Long Statement,ParatextImport,UndoImportManager,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\UndoImportManager.cs,SetCurrentBook,The length of the statement  "				throw new ArgumentOutOfRangeException(nameof(nCanonicalBookNumber)' nCanonicalBookNumber' @"Expected a canonical book number."); " is 128.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,ProcessMissingAddedSectionHead,The conditional expression  "diff.ParaCurr != null && paras.ContainsKey(diff.ParaCurr) &&  							(diff.DiffType == DifferenceType.ParagraphAddedToCurrent || diff.DiffType == DifferenceType.StanzaBreakAddedToCurrent)"  is complex.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,ProcessMissingAddedFirstSectionHead,The conditional expression  "(diff.DiffType == DifferenceType.VerseAddedToCurrent ||  					diff.DiffType == DifferenceType.ParagraphAddedToCurrent ||  					diff.DiffType == DifferenceType.StanzaBreakAddedToCurrent) &&  					correlation.itemsCurr[0].indexInOwner == diff.ParaNodeMapCurr.SectionIndex"  is complex.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,ScrVerseIsAdded,The conditional expression  "diff.DiffType == DifferenceType.ParagraphStructureChange &&  					diff.SubDiffsForParas[0].IchMinRev == diff.SubDiffsForParas[0].IchLimRev &&  					verse.StartRef >= diff.RefStart && verse.StartRef <= diff.RefEnd"  is complex.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CreateSubDiffsForOneSidedClusterParas,The conditional expression  "(cItemsInCurr > 0 && firstScrVerseCurr.VerseStartIndex == 0) ||  				(cItemsInRev > 0 && firstScrVerseRev.VerseStartIndex == 0)"  is complex.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CheckForParaStyleDifference,The conditional expression  "paraRev.Contents.Length > 0 && paraCurr.Contents.Length > 0 &&  					paraRev.StyleRules != null && !paraRev.StyleRules.Equals(paraCurr.StyleRules)"  is complex.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CreateOrAccumMissingInCurrent,The conditional expression  "diffType == DifferenceType.VerseMissingInCurrent ||  					diffType == DifferenceType.StanzaBreakMissingInCurrent ||  					(m_verseRev.Text != null && !string.IsNullOrEmpty(m_verseRev.Text.Text))"  is complex.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CreateOrAccumMissingInRevision,The conditional expression  "diffType == DifferenceType.VerseAddedToCurrent ||  					diffType == DifferenceType.StanzaBreakAddedToCurrent ||  					(m_verseCurr.Text != null && !string.IsNullOrEmpty(m_verseCurr.Text.Text))"  is complex.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CreateOrAccumTextDifference,The conditional expression  "m_diff != null && (m_diff.DiffType & DifferenceType.TextDifference) != 0 &&  				(m_verseCurr == null || (m_verseCurr != null && m_diff.ParaCurr == m_verseCurr.Para)) &&  				(m_verseRev == null || (m_verseRev != null && m_diff.ParaRev == m_verseRev.Para))"  is complex.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,DetectParaSplitMergeAtVerseBoundaries,The conditional expression  "verseCurr != null && verseRev != null &&  					prevVerseCurr != null && prevVerseRev != null"  is complex.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CompareVerseText,The conditional expression  "((foundDiffType & DifferenceType.TextDifference) != 0 ||  				(foundDiffType & DifferenceType.FootnoteMissingInCurrent) != 0 ||  				(foundDiffType & DifferenceType.FootnoteAddedToCurrent) != 0) &&  				(ichLim1 < ichMin || ichLim2 < ichMin)"  is complex.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,DoPartialOverwriteInternal,The conditional expression  "m_bookCurr.TitleOA != null && m_bookRev.TitleOA != null &&  				m_bookRev.TitleOA.ParagraphsOS.Count > 0 &&  				m_bookRev.TitleOA[0].Contents.Length > 0"  is complex.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,RemoveSectionAddedDiffs,The conditional expression  "m_fAttemptAutoMerge || section == null || section.VerseRefStart != section.VerseRefEnd ||  						section.ContentOA.ParagraphsOS.Count > 1 ||  						(section.PreviousSection != null && !section.PreviousSection.IsIntro &&  						section.PreviousSection.VerseRefEnd != section.VerseRefStart)"  is complex.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CopyRevParaToCurPara,The conditional expression  "baseDiff.DiffType == DifferenceType.ParagraphMergedInCurrent ||  					// this next possibility matches a diff that contains orphans from a simplified cluster  					(baseDiff.DiffType == DifferenceType.ParagraphStructureChange &&  					baseDiff.SubDiffsForParas[1].DiffType == DifferenceType.ParagraphMissingInCurrent &&  					subdiff.IchLimCurr > 0)"  is complex.
Complex Conditional,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,RemovePartOrAllOfParaInCurr,The conditional expression  "subdiff.IchMinCurr == 0 && (subdiff.IchLimCurr < subdiff.ParaCurr.Contents.Length ||  				(fDeletingWholeParas && ((IStText)subdiff.ParaCurr.Owner).ParagraphsOS.Count == 1 &&  				subdiff.IchLimCurr == subdiff.ParaCurr.Contents.Length))"  is complex.
Complex Conditional,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,SimplifyComplexScrVerseClusters,The conditional expression  "(cluster.clusterType == ClusterType.MultipleInBoth ||  					cluster.clusterType == ClusterType.SplitInCurrent ||  					cluster.clusterType == ClusterType.MergedInCurrent) &&  					// we don't simplify a complex cluster caused by a network of verse bridge overlaps  					!cluster.ContainsVerseBridgeDifference && cluster.SpansParaBreak"  is complex.
Complex Conditional,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,SimplifyLeadingTrailingEmptyParas,The conditional expression  "cluster.clusterType == ClusterType.AddedToCurrent ||  					cluster.clusterType == ClusterType.OrphansInCurrent ||  					cluster.clusterType == ClusterType.MissingInCurrent ||  					cluster.clusterType == ClusterType.OrphansInRevision"  is complex.
Complex Conditional,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,CreateBasicAdjacentOverlapClusters,The conditional expression  "(oiRev.isStanzaBreak && !oiCurr.isStanzaBreak) ||  							(!oiRev.isStanzaBreak && oiCurr.isStanzaBreak)"  is complex.
Complex Conditional,ParatextImport,DifferenceList,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,FixMissingCurrParaDestIP,The conditional expression  "(diff.DiffType == DifferenceType.ParagraphMissingInCurrent ||  					diff.DiffType == DifferenceType.SectionHeadMissingInCurrent ||  					diff.DiffType == DifferenceType.ParagraphStructureChange ||  					diff.DiffType == DifferenceType.SectionMissingInCurrent) &&  					diff.ParaCurr == givenDiff.ParaCurr"  is complex.
Complex Conditional,ParatextImport,Difference,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,CurrentIsSource,The conditional expression  "diffType == DifferenceType.FootnoteAddedToCurrent ||  				diffType == DifferenceType.ParagraphAddedToCurrent ||  				diffType == DifferenceType.StanzaBreakAddedToCurrent ||  				diffType == DifferenceType.PictureAddedToCurrent ||  				diffType == DifferenceType.SectionAddedToCurrent ||  				diffType == DifferenceType.SectionHeadAddedToCurrent ||  				diffType == DifferenceType.VerseAddedToCurrent"  is complex.
Complex Conditional,ParatextImport,Difference,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,CurrentIsSource,The conditional expression  "diffType == DifferenceType.FootnoteMissingInCurrent ||  				diffType == DifferenceType.ParagraphMissingInCurrent ||  				diffType == DifferenceType.StanzaBreakMissingInCurrent ||  				diffType == DifferenceType.PictureMissingInCurrent ||  				diffType == DifferenceType.SectionHeadMissingInCurrent ||  				diffType == DifferenceType.SectionMissingInCurrent ||  				diffType == DifferenceType.VerseMissingInCurrent"  is complex.
Complex Conditional,ParatextImport,Difference,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,IsEquivalent,The conditional expression  "m_diffType != otherDiff.m_diffType ||  				RefStart != otherDiff.RefStart ||  				RefEnd != otherDiff.RefEnd ||  				ParaRev != otherDiff.ParaRev ||  				IchMinRev != otherDiff.IchMinRev ||  				IchLimRev != otherDiff.IchLimRev ||  				!SectionsEqual(m_SectionsCurr' otherDiff.m_SectionsCurr) ||  				!SectionsEqual(m_SectionsRev' otherDiff.m_SectionsRev)"  is complex.
Complex Conditional,ParatextImport,Difference,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,SetDestinationIP,The conditional expression  "DiffType == DifferenceType.SectionAddedToCurrent ||  				DiffType == DifferenceType.SectionHeadAddedToCurrent ||  				DiffType == DifferenceType.ParagraphAddedToCurrent ||  				DiffType == DifferenceType.StanzaBreakAddedToCurrent"  is complex.
Complex Conditional,ParatextImport,Difference,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,SetDestinationIP,The conditional expression  "DiffType == DifferenceType.SectionMissingInCurrent ||  				DiffType == DifferenceType.SectionHeadMissingInCurrent ||  				DiffType == DifferenceType.StanzaBreakMissingInCurrent ||  				DiffType == DifferenceType.ParagraphMissingInCurrent"  is complex.
Complex Conditional,ParatextImport,Difference,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,IncludesWholePara,The conditional expression  "(DiffType == DifferenceType.SectionAddedToCurrent && !fRev) ||  				(DiffType == DifferenceType.SectionMissingInCurrent && fRev) ||  				(DiffType == DifferenceType.SectionHeadAddedToCurrent && !fRev) ||  				(DiffType == DifferenceType.SectionHeadMissingInCurrent && fRev)"  is complex.
Complex Conditional,ParatextImport,SCTextEnum,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\SCTextEnum.cs,ConvertSource,The conditional expression  "markerMapping.Style == null || markerMapping.IsParagraphStyle ||  						markerMapping.StyleName == ScrStyleNames.VerseNumber ||  						markerMapping.StyleName == ScrStyleNames.ChapterNumber ||  						(!markerMapping.IsInline && markerMapping.StyleName ==  						StyleUtils.DefaultParaCharsStyleName)"  is complex.
Complex Conditional,ParatextImport,SCTextEnum,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\SCTextEnum.cs,ConvertSource,The conditional expression  "m_domain == ImportDomain.Main &&  					((markerMapping.StyleName != StyleUtils.DefaultParaCharsStyleName &&  					(markerMapping.Style == null || markerMapping.IsParagraphStyle)) ||  					(markerMapping.Domain & ~MarkerDomain.Footnote) != MarkerDomain.Default)"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessSegment,The conditional expression  "m_styleProxy.Excluded ||  				(m_styleProxy.Function == FunctionValues.StanzaBreak &&  				(m_vernParaStyleProxy == null ||  				m_vernParaStyleProxy.Function != FunctionValues.Line))"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,GetSegmentInfo,The conditional expression  "(m_importDomain == ImportDomain.Main ||  				(m_importDomain == ImportDomain.BackTrans && m_currDomain == MarkerDomain.Note)) &&  				(m_styleProxy.Function == FunctionValues.Chapter ||  				 m_styleProxy.Function == FunctionValues.Verse)"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,GetSegmentInfo,The conditional expression  "m_styleProxy.Domain == MarkerDomain.Default &&  				m_styleProxy.Context == ContextValues.EndMarker &&  				(!m_fInCharStyle || m_sCharStyleEndMarker == null)"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,HandleStartOfBook,The conditional expression  "!m_fFoundABook || m_nBookNumber != SOWrapper.SegmentFirstRef.Book ||  				m_prevImportDomain != m_importDomain ||	m_wsOfPrevImportStream != wsCurrentStream"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,HandleFootnotes,The conditional expression  "m_fInFootnote && (m_styleProxy.StyleType == StyleType.kstParagraph || (m_fGotFootnoteMarker && m_styleProxy.StyleId == ScrStyleNames.FootnoteMarker))"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,HandleOtherParagraphStyles,The conditional expression  "m_styleProxy.StyleType != StyleType.kstParagraph || m_context == ContextValues.Book ||  			    m_context == ContextValues.Title || m_styleProxy.Structure == StructureValues.Heading ||  			    m_context == ContextValues.Note"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,InsertSegment,The conditional expression  "m_fChapterNumberPending && m_context == ContextValues.Text && m_styleProxy.Structure == StructureValues.Body && !m_fInFootnote"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessBackTransSegment,The conditional expression  "m_fInSectionHeading && strbldr.Length > 0 && ProcessingParagraphStart && m_importDomain == ImportDomain.Main"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,AddPendingVerseAndChapterNumsToBackTrans,The conditional expression  "BtChapterNumPending(m_wsCurrBtPara) &&  				m_vernParaStyleProxy != null &&  				((m_vernParaStyleProxy.Context == ContextValues.Text && m_vernParaStyleProxy.Structure == StructureValues.Body) ||  				m_vernParaStyleProxy.Context == ContextValues.EndMarker) &&  				!m_fInFootnote"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessBTEndMarker,The conditional expression  "m_fInFootnote && (m_sMarker == m_sFootnoteEndMarker ||  				m_sFootnoteEndMarker == null ||  				(m_styleProxy.Domain & MarkerDomain.Footnote) == 0)"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessEndMarker,The conditional expression  "m_fInFootnote && (m_sMarker == m_sFootnoteEndMarker ||  				m_sFootnoteEndMarker == null ||  				(m_styleProxy.Domain & MarkerDomain.Footnote) == 0) &&  				(!m_fInCharStyle || m_sMarker != m_sCharStyleEndMarker || m_sCharStyleEndMarker == null)"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessEndMarker,The conditional expression  "m_fInCharStyle &&  				(m_sMarker == m_sCharStyleEndMarker || m_sCharStyleEndMarker == null) &&  				(m_sMarker != m_sFootnoteEndMarker ||  				(m_fInFootnote && m_sFootnoteEndMarker == m_sCharStyleEndMarker))"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,SetBookName,The conditional expression  "m_styleProxy.StyleId == ScrStyleNames.MainBookTitle && sTitle.Length > 0 && tssBookName != null && String.IsNullOrEmpty(tssBookName.Text)"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,ProcessSectionHeadStart,The conditional expression  "m_settings.ImportTranslation && (m_currSection == null || !m_currSection.IsValidObject || m_currSection.ContentOA.ParagraphsOS.Count > 0)"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,PrepareForFirstScriptureSection,The conditional expression  "m_settings.ImportTranslation && m_importDomain == ImportDomain.Main && (m_currSection == null || !m_currSection.IsValidObject ||  				m_currSection.ContentOA.ParagraphsOS.Count > 0)"  is complex.
Complex Conditional,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,FinalizeBook,The conditional expression  "m_currSection == null && m_settings.ImportTranslation && CurrentBook != null && m_importDomain == ImportDomain.Main"  is complex.
Empty Catch Block,ParatextImport,ImportedBooks,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ImportedBooks.cs,GetLanguageNames,The method has an empty catch block.
Empty Catch Block,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,Import,The method has an empty catch block.
Empty Catch Block,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,GetRootedPath,The method has an empty catch block.
Empty Catch Block,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,AddNewAnnotation,The method has an empty catch block.
Magic Number,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,DetectDifferences,The following statement contains a magic number: if (m_progressDlg != null)  			{  				m_progressDlg.Minimum = 0;  				m_progressDlg.Maximum = m_bookRev.SectionsOS.Count * 3 + 3;  				m_progressDlg.Position = 0;  			}
Magic Number,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,DetectDifferences,The following statement contains a magic number: if (m_progressDlg != null)  			{  				m_progressDlg.Minimum = 0;  				m_progressDlg.Maximum = m_bookRev.SectionsOS.Count * 3 + 3;  				m_progressDlg.Position = 0;  			}
Magic Number,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,GetDestinationIP,The following statement contains a magic number: for (int i = 0; i < 2; i++)  			{  				DiffLocation dest = GetDestLocForSection(diffType' iSectionAdded' fTryFollowingPara);  				if (dest != null)  					return dest;  				fTryFollowingPara = !fTryFollowingPara;  			}
Magic Number,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,ProcessParaStructureCluster,The following statement contains a magic number: List<ScrVerse> scrVersesBlobCurr = new List<ScrVerse>(4);
Magic Number,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,ProcessParaStructureCluster,The following statement contains a magic number: List<ScrVerse> scrVersesBlobRev = new List<ScrVerse>(4);
Magic Number,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CreateSubDiffsForOneSidedClusterParas,The following statement contains a magic number: baseDiff.SubDiffsForParas = new List<Difference>(6);
Magic Number,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,CreateSubDiffsForClusterParas,The following statement contains a magic number: baseDiff.SubDiffsForParas = new List<Difference>(4);
Magic Number,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,DetectParaSplitMergeAtVerseBoundaries,The following statement contains a magic number: while (verseCurrIndex < m_scrVersesCurr.Count || verseRevIndex < m_scrVersesRev.Count)  			{  				// Get the ScrVerse at the current index locations.  				verseCurr = (verseCurrIndex < m_scrVersesCurr.Count) ?  					m_scrVersesCurr[verseCurrIndex] : null;  				verseRev = (verseRevIndex < m_scrVersesRev.Count) ?  					m_scrVersesRev[verseRevIndex] : null;  				// and the previous ScrVerses' too.  				ScrVerse prevVerseCurr = (verseCurrIndex > 0) ? m_scrVersesCurr[verseCurrIndex - 1] : null;  				ScrVerse prevVerseRev = (verseRevIndex > 0) ? m_scrVersesRev[verseRevIndex - 1] : null;    				if (verseCurr != null && verseRev != null &&  					prevVerseCurr != null && prevVerseRev != null)  				{  					// If we're comparing the same verse reference in the current and revision...  					if (verseCurr.StartRef == verseRev.StartRef)  					{  						IScrTxtPara prevParaCurr = prevVerseCurr.Para;  						IScrTxtPara prevParaRev = prevVerseRev.Para;    						Debug.Assert(prevParaCurr != null);  						Debug.Assert(prevParaRev != null);    						// If there is a verse boundary paragraph split in the current...  						if (FindVerseBoundaryParaBreak(m_scrVersesCurr' verseCurrIndex'  							m_scrVersesRev' verseRevIndex))  						{  							// Add a root diff  							Difference baseDiff = new Difference(prevVerseCurr.EndRef' prevVerseCurr.EndRef'  								DifferenceType.ParagraphSplitInCurrent'  								prevVerseCurr.Para' prevParaCurr.Contents.Length' prevParaCurr.Contents.Length'  								verseRev.Para' verseRev.VerseStartIndex' verseRev.VerseStartIndex'  								prevVerseCurr.ParaNodeMap' verseRev.ParaNodeMap);  							// and subdiffs.  							baseDiff.SubDiffsForParas = new List<Difference>(2);  							// Add a subdifference for the first Current para and the Revision para.  							baseDiff.SubDiffsForParas.Add(new Difference(  								baseDiff.ParaCurr' baseDiff.IchMinCurr' baseDiff.IchLimCurr'  								baseDiff.ParaRev' baseDiff.IchMinRev' baseDiff.IchLimRev'  								DifferenceType.NoDifference' null' null' null' null));  							// Add a subdifference for the Current para following the split and null for the Revision.  							baseDiff.SubDiffsForParas.Add(new Difference(  								verseCurr.Para' 0' 0' null' 0' 0'  								DifferenceType.NoDifference' null' null' null' null));  							ClusterDiffs.Add(baseDiff);  						}    						// If there is a verse boundary paragraph merge in the current...  						else if (FindVerseBoundaryParaBreak(m_scrVersesRev' verseRevIndex'  							m_scrVersesCurr' verseCurrIndex))  						{  							// Add a root diff  							Difference baseDiff = new Difference(prevVerseCurr.EndRef' prevVerseCurr.EndRef'  								DifferenceType.ParagraphMergedInCurrent'  								verseCurr.Para' verseCurr.VerseStartIndex' verseCurr.VerseStartIndex'  								prevVerseRev.Para' prevParaRev.Contents.Length' prevParaRev.Contents.Length'  								verseCurr.ParaNodeMap' prevVerseRev.ParaNodeMap);  							// and subdiffs.  							baseDiff.SubDiffsForParas = new List<Difference>(2);  							// Add a subdifference for the first Current para and the Revision para.  							baseDiff.SubDiffsForParas.Add(new Difference(  								baseDiff.ParaCurr' baseDiff.IchMinCurr' baseDiff.IchLimCurr'  								baseDiff.ParaRev' baseDiff.IchMinRev' baseDiff.IchLimRev'  								DifferenceType.NoDifference' null' null' null' null));  							// Add a subdifference for the Revision para following the split and null for the Current.  							baseDiff.SubDiffsForParas.Add(new Difference(  								null' 0' 0' verseRev.Para' 0' 0'  								DifferenceType.NoDifference' null' null' null' null));  							ClusterDiffs.Add(baseDiff);  						}  					}  				}    				AdvanceScrVerseIndices(verseCurr' verseRev' ref verseCurrIndex' ref verseRevIndex);  			}
Magic Number,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,DetectParaSplitMergeAtVerseBoundaries,The following statement contains a magic number: while (verseCurrIndex < m_scrVersesCurr.Count || verseRevIndex < m_scrVersesRev.Count)  			{  				// Get the ScrVerse at the current index locations.  				verseCurr = (verseCurrIndex < m_scrVersesCurr.Count) ?  					m_scrVersesCurr[verseCurrIndex] : null;  				verseRev = (verseRevIndex < m_scrVersesRev.Count) ?  					m_scrVersesRev[verseRevIndex] : null;  				// and the previous ScrVerses' too.  				ScrVerse prevVerseCurr = (verseCurrIndex > 0) ? m_scrVersesCurr[verseCurrIndex - 1] : null;  				ScrVerse prevVerseRev = (verseRevIndex > 0) ? m_scrVersesRev[verseRevIndex - 1] : null;    				if (verseCurr != null && verseRev != null &&  					prevVerseCurr != null && prevVerseRev != null)  				{  					// If we're comparing the same verse reference in the current and revision...  					if (verseCurr.StartRef == verseRev.StartRef)  					{  						IScrTxtPara prevParaCurr = prevVerseCurr.Para;  						IScrTxtPara prevParaRev = prevVerseRev.Para;    						Debug.Assert(prevParaCurr != null);  						Debug.Assert(prevParaRev != null);    						// If there is a verse boundary paragraph split in the current...  						if (FindVerseBoundaryParaBreak(m_scrVersesCurr' verseCurrIndex'  							m_scrVersesRev' verseRevIndex))  						{  							// Add a root diff  							Difference baseDiff = new Difference(prevVerseCurr.EndRef' prevVerseCurr.EndRef'  								DifferenceType.ParagraphSplitInCurrent'  								prevVerseCurr.Para' prevParaCurr.Contents.Length' prevParaCurr.Contents.Length'  								verseRev.Para' verseRev.VerseStartIndex' verseRev.VerseStartIndex'  								prevVerseCurr.ParaNodeMap' verseRev.ParaNodeMap);  							// and subdiffs.  							baseDiff.SubDiffsForParas = new List<Difference>(2);  							// Add a subdifference for the first Current para and the Revision para.  							baseDiff.SubDiffsForParas.Add(new Difference(  								baseDiff.ParaCurr' baseDiff.IchMinCurr' baseDiff.IchLimCurr'  								baseDiff.ParaRev' baseDiff.IchMinRev' baseDiff.IchLimRev'  								DifferenceType.NoDifference' null' null' null' null));  							// Add a subdifference for the Current para following the split and null for the Revision.  							baseDiff.SubDiffsForParas.Add(new Difference(  								verseCurr.Para' 0' 0' null' 0' 0'  								DifferenceType.NoDifference' null' null' null' null));  							ClusterDiffs.Add(baseDiff);  						}    						// If there is a verse boundary paragraph merge in the current...  						else if (FindVerseBoundaryParaBreak(m_scrVersesRev' verseRevIndex'  							m_scrVersesCurr' verseCurrIndex))  						{  							// Add a root diff  							Difference baseDiff = new Difference(prevVerseCurr.EndRef' prevVerseCurr.EndRef'  								DifferenceType.ParagraphMergedInCurrent'  								verseCurr.Para' verseCurr.VerseStartIndex' verseCurr.VerseStartIndex'  								prevVerseRev.Para' prevParaRev.Contents.Length' prevParaRev.Contents.Length'  								verseCurr.ParaNodeMap' prevVerseRev.ParaNodeMap);  							// and subdiffs.  							baseDiff.SubDiffsForParas = new List<Difference>(2);  							// Add a subdifference for the first Current para and the Revision para.  							baseDiff.SubDiffsForParas.Add(new Difference(  								baseDiff.ParaCurr' baseDiff.IchMinCurr' baseDiff.IchLimCurr'  								baseDiff.ParaRev' baseDiff.IchMinRev' baseDiff.IchLimRev'  								DifferenceType.NoDifference' null' null' null' null));  							// Add a subdifference for the Revision para following the split and null for the Current.  							baseDiff.SubDiffsForParas.Add(new Difference(  								null' 0' 0' verseRev.Para' 0' 0'  								DifferenceType.NoDifference' null' null' null' null));  							ClusterDiffs.Add(baseDiff);  						}  					}  				}    				AdvanceScrVerseIndices(verseCurr' verseRev' ref verseCurrIndex' ref verseRevIndex);  			}
Magic Number,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,FindLargestRemainingFactor,The following statement contains a magic number: double largestFactor = .2;
Magic Number,ParatextImport,BookMerger,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\BookMerger.cs,DoPartialOverwriteInternal,The following statement contains a magic number: const int kStepsToCalcDiffs = 2;
Magic Number,ParatextImport,Cluster,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,Cluster,The following statement contains a magic number: itemsCurr = new List<OverlapInfo>(6);
Magic Number,ParatextImport,Cluster,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,Cluster,The following statement contains a magic number: itemsRev = new List<OverlapInfo>(6);
Magic Number,ParatextImport,Cluster,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,Cluster,The following statement contains a magic number: itemsCurr = new List<OverlapInfo>(6);
Magic Number,ParatextImport,Cluster,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,Cluster,The following statement contains a magic number: itemsRev = new List<OverlapInfo>(6);
Magic Number,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,DetermineScrVerseOverlapClusters,The following statement contains a magic number: clh.SimplifyComplexScrVerseClusters(scrVersesCurr' scrVersesRev' 0.75);
Magic Number,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,FindOverlappedPairs,The following statement contains a magic number: foreach (OverlapInfo oi in m_proxyListCurr)  				oi.overlappedItemsInOther = new List<OverlapInfo>(4);
Magic Number,ParatextImport,ClusterListHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,FindOverlappedPairs,The following statement contains a magic number: foreach (OverlapInfo oi in m_proxyListRev)  				oi.overlappedItemsInOther = new List<OverlapInfo>(4);
Magic Number,ParatextImport,SectionHeadCorrelationHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,FindCorrelatedPairs,The following statement contains a magic number: foreach (OverlapInfo oi in m_proxyListCurr)  				oi.overlappedItemsInOther = new List<OverlapInfo>(4);
Magic Number,ParatextImport,SectionHeadCorrelationHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,FindCorrelatedPairs,The following statement contains a magic number: foreach (OverlapInfo oi in m_proxyListRev)  				oi.overlappedItemsInOther = new List<OverlapInfo>(4);
Magic Number,ParatextImport,SectionHeadCorrelationHelper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Cluster.cs,PotentialSectionHeadCorrelation,The following statement contains a magic number: if (Math.Abs(oi1.verseRefMin - oi2.verseRefMin) <= 2)  				return true;
Magic Number,ParatextImport,DifferenceList,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\Difference.cs,AdjustFollowingDiffsDetails,The following statement contains a magic number: while (++iDiff < m_List.Count)  			{  				Difference diff = m_List[iDiff];  				bool fMatchFound = false;    				// does this base diff refer to the same current paragraph?  				if (diff.ParaCurr == paraCurr)  				{  					fMatchFound = true;  					AdjustDiff(diff' ichLimit' paraNew' offset' false);    					Debug.Assert(diff.DiffType != DifferenceType.StanzaBreakAddedToCurrent'  						"We don't want to move anything into a stanza break paragraph");  					//if (diff.DiffType == DifferenceType.ParagraphAddedToCurrent)  					//{  						// we need to change diffType to VerseAdded so that text moved to this paragraph during  						// this revert won't be deleted. TE-7096' TE-7070  						//diff.DiffType = DifferenceType.VerseAddedToCurrent;  					//}  				}    				if (diff.HasParaSubDiffs)  				{  					foreach (Difference subDiff in diff.SubDiffsForParas)  					{  						// does this subdiff refer to the same current paragraph?  						if (subDiff.ParaCurr == paraCurr)  						{  							fMatchFound = true;  							AdjustDiff(subDiff' ichLimit' paraNew' offset' true);  						}  					}  				}    				if (diff.ParaCurr == paraCurr && diff.DiffType == DifferenceType.ParagraphAddedToCurrent)  				{  					// We need to turn this into a more complex difference so the text moved to this paragraph  					// during this revert won't be deleted. TE-7096' TE-7099' TE-7070. This is somewhat of  					// a hack' because we don't normally expect a paragraph split to be a subdiff.  					// See corresponding code in BookMerger.ReplaceCurrentWithRevision_CopyParaStructure  					// that handles this kind of subdiff.  					diff.DiffType = DifferenceType.ParagraphStructureChange;  					diff.SubDiffsForParas = new List<Difference>(2);  					diff.SubDiffsForParas.Add(new Difference(diff.ParaCurr' diff.IchMinCurr'  						diff.IchLimCurr' diff.ParaRev' diff.IchMinRev' diff.IchLimRev'  						DifferenceType.VerseAddedToCurrent' diff.StyleNameCurr'  						diff.StyleNameRev' diff.WsNameCurr' diff.WsNameRev));  					diff.SubDiffsForParas.Add(new Difference(diff.ParaCurr' diff.IchMinCurr'  						diff.IchMinCurr' null' -1' -1' DifferenceType.ParagraphSplitInCurrent'  						null' null' null' null));  				}    				// if there was no match in the root diff or subdiffsforparas...  				if (!fMatchFound)  				{  					// and if the list is sorted' we are beyond the matching diffs and we can quit.  					if (m_fListIsSorted)  						break;  				}  			}
Magic Number,ParatextImport,ScrObjWrapper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ScrObjWrapper.cs,MakeBCVRef,The following statement contains a magic number: if (segment < 0 || segment > 2)  				segment = 0;
Magic Number,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,GetRootedPath,The following statement contains a magic number: if (fileName.Length < 2 || !char.IsLetter(fileName[0]) || fileName[1] != Path.VolumeSeparatorChar)  #else  			if (fileName[0] != Path.DirectorySeparatorChar) // is fileName a relative Path  #endif  			{  				try  				{  					if (Path.IsPathRooted(fileName))  					{  						fullPath = Path.GetFullPath(fileName);  						if (!FileUtils.FileExists(fullPath))  						{  							fullPath = null;  							fileName = fileName.TrimStart(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar);  						}  					}  					if (fullPath == null)  					{  						Debug.Assert(SOWrapper.ExternalPictureFolders.Count > 0);  						foreach (var folder in SOWrapper.ExternalPictureFolders)  						{  							fullPath = Path.Combine(folder' fileName);  							if (FileUtils.FileExists(fullPath))  							{  								break;  							}  							fullPath = null;  						}  					}  					return fullPath ?? Path.Combine(SOWrapper.ExternalPictureFolders[0]' fileName);  				}  				catch (ArgumentException)  				{  					// filename probably has invalid characters in it' this should be caught a reported later  				}  			}
Magic Number,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,InsertPicture,The following statement contains a magic number: if (m_currPictureInfo == null)  			{  				var tokens = m_sSegmentText.Split('|');  				if (tokens.Length < 6)  				{  					throw new ArgumentException("The USFM format for a Picture was invalid");  				}  				var sDescription = tokens[0];  				var srcFilename = tokens[1];  				if (string.IsNullOrEmpty(srcFilename))  				{  					srcFilename = Path.Combine(FwDirectoryFinder.CodeDirectory' "MissingPictureInImport.bmp");  				}  				var sLayoutPos = tokens[2];  				var sLocationRange = tokens[3];  				var sCopyright = tokens[4];  				var sCaption = tokens[5];  				picture = picFactory.Create(CmFolderTags.DefaultPictureFolder' m_currentRef.BBCCCVVV'  					m_scr as IPictureLocationBridge' sDescription' srcFilename' sLayoutPos'  					sLocationRange' sCopyright' sCaption' PictureLocationRangeType.ReferenceRange' "100");  			}  			else  			{  				var srcFilename = m_currPictureInfo.PictureFilename;  				if (string.IsNullOrEmpty(srcFilename))  				{  					srcFilename = Path.Combine(m_cache.LanguageProject.LinkedFilesRootDir' "MissingPictureInImport.bmp");  				}  				picture = picFactory.Create(CmFolderTags.DefaultPictureFolder' m_currentRef.BBCCCVVV'  					m_scr as IPictureLocationBridge' m_currPictureInfo.Description' srcFilename'  					m_currPictureInfo.LayoutPos' m_currPictureInfo.LocationRange ?? ""'  					m_currPictureInfo.Copyright' m_currPictureInfo.TssCaption'  					PictureLocationRangeType.ReferenceRange' m_currPictureInfo.ScaleFactor);  				m_currPictureInfo = null;  			}
Magic Number,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,InsertPicture,The following statement contains a magic number: if (m_currPictureInfo == null)  			{  				var tokens = m_sSegmentText.Split('|');  				if (tokens.Length < 6)  				{  					throw new ArgumentException("The USFM format for a Picture was invalid");  				}  				var sDescription = tokens[0];  				var srcFilename = tokens[1];  				if (string.IsNullOrEmpty(srcFilename))  				{  					srcFilename = Path.Combine(FwDirectoryFinder.CodeDirectory' "MissingPictureInImport.bmp");  				}  				var sLayoutPos = tokens[2];  				var sLocationRange = tokens[3];  				var sCopyright = tokens[4];  				var sCaption = tokens[5];  				picture = picFactory.Create(CmFolderTags.DefaultPictureFolder' m_currentRef.BBCCCVVV'  					m_scr as IPictureLocationBridge' sDescription' srcFilename' sLayoutPos'  					sLocationRange' sCopyright' sCaption' PictureLocationRangeType.ReferenceRange' "100");  			}  			else  			{  				var srcFilename = m_currPictureInfo.PictureFilename;  				if (string.IsNullOrEmpty(srcFilename))  				{  					srcFilename = Path.Combine(m_cache.LanguageProject.LinkedFilesRootDir' "MissingPictureInImport.bmp");  				}  				picture = picFactory.Create(CmFolderTags.DefaultPictureFolder' m_currentRef.BBCCCVVV'  					m_scr as IPictureLocationBridge' m_currPictureInfo.Description' srcFilename'  					m_currPictureInfo.LayoutPos' m_currPictureInfo.LocationRange ?? ""'  					m_currPictureInfo.Copyright' m_currPictureInfo.TssCaption'  					PictureLocationRangeType.ReferenceRange' m_currPictureInfo.ScaleFactor);  				m_currPictureInfo = null;  			}
Magic Number,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,InsertPicture,The following statement contains a magic number: if (m_currPictureInfo == null)  			{  				var tokens = m_sSegmentText.Split('|');  				if (tokens.Length < 6)  				{  					throw new ArgumentException("The USFM format for a Picture was invalid");  				}  				var sDescription = tokens[0];  				var srcFilename = tokens[1];  				if (string.IsNullOrEmpty(srcFilename))  				{  					srcFilename = Path.Combine(FwDirectoryFinder.CodeDirectory' "MissingPictureInImport.bmp");  				}  				var sLayoutPos = tokens[2];  				var sLocationRange = tokens[3];  				var sCopyright = tokens[4];  				var sCaption = tokens[5];  				picture = picFactory.Create(CmFolderTags.DefaultPictureFolder' m_currentRef.BBCCCVVV'  					m_scr as IPictureLocationBridge' sDescription' srcFilename' sLayoutPos'  					sLocationRange' sCopyright' sCaption' PictureLocationRangeType.ReferenceRange' "100");  			}  			else  			{  				var srcFilename = m_currPictureInfo.PictureFilename;  				if (string.IsNullOrEmpty(srcFilename))  				{  					srcFilename = Path.Combine(m_cache.LanguageProject.LinkedFilesRootDir' "MissingPictureInImport.bmp");  				}  				picture = picFactory.Create(CmFolderTags.DefaultPictureFolder' m_currentRef.BBCCCVVV'  					m_scr as IPictureLocationBridge' m_currPictureInfo.Description' srcFilename'  					m_currPictureInfo.LayoutPos' m_currPictureInfo.LocationRange ?? ""'  					m_currPictureInfo.Copyright' m_currPictureInfo.TssCaption'  					PictureLocationRangeType.ReferenceRange' m_currPictureInfo.ScaleFactor);  				m_currPictureInfo = null;  			}
Magic Number,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,InsertPicture,The following statement contains a magic number: if (m_currPictureInfo == null)  			{  				var tokens = m_sSegmentText.Split('|');  				if (tokens.Length < 6)  				{  					throw new ArgumentException("The USFM format for a Picture was invalid");  				}  				var sDescription = tokens[0];  				var srcFilename = tokens[1];  				if (string.IsNullOrEmpty(srcFilename))  				{  					srcFilename = Path.Combine(FwDirectoryFinder.CodeDirectory' "MissingPictureInImport.bmp");  				}  				var sLayoutPos = tokens[2];  				var sLocationRange = tokens[3];  				var sCopyright = tokens[4];  				var sCaption = tokens[5];  				picture = picFactory.Create(CmFolderTags.DefaultPictureFolder' m_currentRef.BBCCCVVV'  					m_scr as IPictureLocationBridge' sDescription' srcFilename' sLayoutPos'  					sLocationRange' sCopyright' sCaption' PictureLocationRangeType.ReferenceRange' "100");  			}  			else  			{  				var srcFilename = m_currPictureInfo.PictureFilename;  				if (string.IsNullOrEmpty(srcFilename))  				{  					srcFilename = Path.Combine(m_cache.LanguageProject.LinkedFilesRootDir' "MissingPictureInImport.bmp");  				}  				picture = picFactory.Create(CmFolderTags.DefaultPictureFolder' m_currentRef.BBCCCVVV'  					m_scr as IPictureLocationBridge' m_currPictureInfo.Description' srcFilename'  					m_currPictureInfo.LayoutPos' m_currPictureInfo.LocationRange ?? ""'  					m_currPictureInfo.Copyright' m_currPictureInfo.TssCaption'  					PictureLocationRangeType.ReferenceRange' m_currPictureInfo.ScaleFactor);  				m_currPictureInfo = null;  			}
Magic Number,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,InsertPicture,The following statement contains a magic number: if (m_currPictureInfo == null)  			{  				var tokens = m_sSegmentText.Split('|');  				if (tokens.Length < 6)  				{  					throw new ArgumentException("The USFM format for a Picture was invalid");  				}  				var sDescription = tokens[0];  				var srcFilename = tokens[1];  				if (string.IsNullOrEmpty(srcFilename))  				{  					srcFilename = Path.Combine(FwDirectoryFinder.CodeDirectory' "MissingPictureInImport.bmp");  				}  				var sLayoutPos = tokens[2];  				var sLocationRange = tokens[3];  				var sCopyright = tokens[4];  				var sCaption = tokens[5];  				picture = picFactory.Create(CmFolderTags.DefaultPictureFolder' m_currentRef.BBCCCVVV'  					m_scr as IPictureLocationBridge' sDescription' srcFilename' sLayoutPos'  					sLocationRange' sCopyright' sCaption' PictureLocationRangeType.ReferenceRange' "100");  			}  			else  			{  				var srcFilename = m_currPictureInfo.PictureFilename;  				if (string.IsNullOrEmpty(srcFilename))  				{  					srcFilename = Path.Combine(m_cache.LanguageProject.LinkedFilesRootDir' "MissingPictureInImport.bmp");  				}  				picture = picFactory.Create(CmFolderTags.DefaultPictureFolder' m_currentRef.BBCCCVVV'  					m_scr as IPictureLocationBridge' m_currPictureInfo.Description' srcFilename'  					m_currPictureInfo.LayoutPos' m_currPictureInfo.LocationRange ?? ""'  					m_currPictureInfo.Copyright' m_currPictureInfo.TssCaption'  					PictureLocationRangeType.ReferenceRange' m_currPictureInfo.ScaleFactor);  				m_currPictureInfo = null;  			}
Magic Number,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,GetVerseRefAsString,The following statement contains a magic number: var sRef = nSegFirst > 0 ? string.Concat(sVerseFirst' Convert.ToChar(nSegFirst + 96)) : sVerseFirst;
Magic Number,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,GetVerseRefAsString,The following statement contains a magic number: if (sVerseFirst != sVerseLast || nSegFirst != nSegLast)  			{  				// Convert nSeg to lowercase alpha if needed  				sRef = string.Concat(sRef' m_scr.BridgeForWs(wsBt)' sVerseLast' (nSegLast > 0) ? Convert.ToChar(nSegLast + 96).ToString() : string.Empty);  			}
Magic Number,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,CreateCmTranslationForPendingBT,The following statement contains a magic number: if (m_prevImportDomain == ImportDomain.BackTrans || (m_prevImportDomain == ImportDomain.Main && !m_settings.ImportTranslation))  			{  				var targetRef = (BtChapterNumPending(ws) && m_vernParaStyleProxy.Style.Structure == StructureValues.Body) ? new BCVRef(m_prevRef) : new BCVRef(m_currentRef);  				if (m_vernParaStyleProxy.Style.Context != ContextValues.Intro && targetRef.Verse == 0)  				{  					targetRef.Verse = 1;  				}    				// FindCorrespondingVernParaForSegment may change m_iSection.  				// However' if we're importing interleaved BT we want to keep  				// m_iSection at it's current value.  				var iSectionTmp = m_iCurrSection;  				if (FindCorrespondingVernParaForSegment(m_vernParaStyleProxy.Style' targetRef' out fAppend) == null)  				{  					// Got an unexpected BT paragraph segment. Can't find a corresponding  					// vernacular paragraph.  					var sParaContents = btText;  					if (sParaContents != null && sParaContents.Length > 120)  					{  						sParaContents = sParaContents.Substring(0' 120) + "...";  					}  					throw new ScriptureUtilsException(  						SUE_ErrorCode.BackTransParagraphMismatch'  						sParaContents' string.Format(Properties.Resources.kstidBTNoCorrespondingParaDetails' m_vernParaStyleProxy.StyleId' targetRef.AsString)'  						null' null' null' false);  				}  				if (m_prevImportDomain == ImportDomain.Main)  				{  					m_iCurrSection = iSectionTmp;  				}  			}
Magic Number,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,CreateCmTranslationForPendingBT,The following statement contains a magic number: if (m_prevImportDomain == ImportDomain.BackTrans || (m_prevImportDomain == ImportDomain.Main && !m_settings.ImportTranslation))  			{  				var targetRef = (BtChapterNumPending(ws) && m_vernParaStyleProxy.Style.Structure == StructureValues.Body) ? new BCVRef(m_prevRef) : new BCVRef(m_currentRef);  				if (m_vernParaStyleProxy.Style.Context != ContextValues.Intro && targetRef.Verse == 0)  				{  					targetRef.Verse = 1;  				}    				// FindCorrespondingVernParaForSegment may change m_iSection.  				// However' if we're importing interleaved BT we want to keep  				// m_iSection at it's current value.  				var iSectionTmp = m_iCurrSection;  				if (FindCorrespondingVernParaForSegment(m_vernParaStyleProxy.Style' targetRef' out fAppend) == null)  				{  					// Got an unexpected BT paragraph segment. Can't find a corresponding  					// vernacular paragraph.  					var sParaContents = btText;  					if (sParaContents != null && sParaContents.Length > 120)  					{  						sParaContents = sParaContents.Substring(0' 120) + "...";  					}  					throw new ScriptureUtilsException(  						SUE_ErrorCode.BackTransParagraphMismatch'  						sParaContents' string.Format(Properties.Resources.kstidBTNoCorrespondingParaDetails' m_vernParaStyleProxy.StyleId' targetRef.AsString)'  						null' null' null' false);  				}  				if (m_prevImportDomain == ImportDomain.Main)  				{  					m_iCurrSection = iSectionTmp;  				}  			}
Magic Number,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,CheckDataForFootnoteMarker,The following statement contains a magic number: var segments = m_sSegmentText.TrimStart().Split(new[] {' '}' 2);
Missing Default,ParatextImport,ScrObjWrapper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ScrObjWrapper.cs,GetNextSegment,The following switch statement is missing a default case: switch (m_currentDomain)  				{  					case ImportDomain.Main:  					{  						if (LoadParatextBackTranslationProject())  							return GetNextSegment(out sText' out sMarker' out domain);  						goto case ImportDomain.BackTrans;  					}  					case ImportDomain.BackTrans:  					{  						if (LoadParatextNotesProject())  							return GetNextSegment(out sText' out sMarker' out domain);  						break;  					}  				}
Missing Default,ParatextImport,ScrObjWrapper,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ScrObjWrapper.cs,GetNextSegment,The following switch statement is missing a default case: switch (m_currentDomain)  				{  					case ImportDomain.Main:  					{  						m_currentDomain = ImportDomain.BackTrans;  						m_scSfmText = new SCScriptureText(m_settings' ImportDomain.BackTrans);  						// Now initialize the TextEnum with the range of scripture text we want  						m_scTextEnum = m_scSfmText.TextEnum(m_settings.StartRef' m_settings.EndRef);  						return GetNextSegment(out sText' out sMarker' out domain);  					}  					case ImportDomain.BackTrans:  					{  						m_currentDomain = ImportDomain.Annotations;  						m_scSfmText = new SCScriptureText(m_settings' ImportDomain.Annotations);  						// Now initialize the TextEnum with the range of scripture text we want  						m_scTextEnum = m_scSfmText.TextEnum(m_settings.StartRef' m_settings.EndRef);  						return GetNextSegment(out sText' out sMarker' out domain);  					}  				}
Missing Default,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,GetStyleProxy,The following switch statement is missing a default case: switch (m_importDomain)  			{  				case ImportDomain.Main:  					domain = MarkerDomain.Default;  					break;  				case ImportDomain.BackTrans:  					domain = MarkerDomain.BackTrans;  					break;  				case ImportDomain.Annotations:  					domain = MarkerDomain.Note;  					break;  			}
Missing Default,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,HandleSpecialTargets,The following switch statement is missing a default case: switch(m_styleProxy.MappingTarget)  			{  				case MappingTargetType.TEStyle:  					// TEStyle is not a special target  					break;    				case MappingTargetType.Figure:  					m_sSegmentText = EnsurePictureFilePathIsRooted(m_sSegmentText);  					if (m_importDomain == ImportDomain.BackTrans || (m_styleProxy.Domain & MarkerDomain.BackTrans) != 0)  					{  						// Save information about this picture caption back translation which will  						// be added at the end of the paragraph.  						m_BTPendingPictures.Add(new BTPictureInfo(m_sSegmentText' null' BackTransWS'  							SOWrapper.CurrentFileName' SOWrapper.CurrentLineNumber'  							m_sMarker + " " + m_sSegmentText' m_currentRef));  					}  					else  					{  						try  						{  							if (m_settings.ImportTranslation)  							{  								InsertPicture();  							}  						}  						catch (ArgumentException e)  						{  							throw new ScriptureUtilsException(SUE_ErrorCode.InvalidPictureParameters' SOWrapper.CurrentFileName' e);  						}  						if (m_styleProxy.EndMarker != null)  						{  							SetInCharacterStyle(); // treat this like a character style  						}  					}  					fFoundSpecialTarget = true;  					break;    				case MappingTargetType.FigureCaption:  					if (m_importDomain == ImportDomain.BackTrans || (m_styleProxy.Domain & MarkerDomain.BackTrans) != 0)  					{  						// Save information about this picture caption back translation which will  						// be added at the end of the paragraph.  						if (m_currBtPictureInfo == null)  						{  							m_currBtPictureInfo = new BTPictureInfo(m_sSegmentText' null' BackTransWS'  								SOWrapper.CurrentFileName' SOWrapper.CurrentLineNumber'  								m_sMarker + " " + m_sSegmentText' m_currentRef);  							m_BTPendingPictures.Add(m_currBtPictureInfo);  						}  						else  						{  							m_currBtPictureInfo.m_strbldrCaption.Append(m_sSegmentText);  						}  					}  					else  					{  						if (m_currPictureInfo != null && m_currPictureInfo.Caption != null)  						{  							InsertPicture(); // Already found a caption for the current picture; treat this as a new picture.  }  						if (m_currPictureInfo == null)  						{  							m_currPictureInfo = new ToolboxPictureInfo();  						}  						m_currPictureInfo.Caption = TsStringUtils.MakeIncStrBldr();  						m_currPictureInfo.Caption.SetIntPropValues((int)FwTextPropType.ktptWs' (int)FwTextPropVar.ktpvDefault' m_wsVern);  						m_currPictureInfo.Caption.Append(m_sSegmentText);  					}  					fProcessingPicture = fFoundSpecialTarget = true;  					break;    				case MappingTargetType.FigureCopyright:  					if (m_importDomain == ImportDomain.BackTrans || (m_styleProxy.Domain & MarkerDomain.BackTrans) != 0)  					{  						// Save information about this picture copyright back translation which will  						// be added at the end of the paragraph.  						if (m_currBtPictureInfo == null)  						{  							m_currBtPictureInfo = new BTPictureInfo(null' m_sSegmentText' BackTransWS'  								SOWrapper.CurrentFileName' SOWrapper.CurrentLineNumber'  								m_sMarker + " " + m_sSegmentText' m_currentRef);  							m_BTPendingPictures.Add(m_currBtPictureInfo);  						}  						else  						{  							m_currBtPictureInfo.m_copyright = m_sSegmentText;  						}  					}  					else  					{  						if (!string.IsNullOrEmpty(m_currPictureInfo?.Copyright))  						{  							InsertPicture(); // Already found a copyright for the current picture; treat this as a new picture.  						}  						if (m_currPictureInfo == null)  						{  							m_currPictureInfo = new ToolboxPictureInfo();  						}  						m_currPictureInfo.Copyright = m_sSegmentText;  					}  					fProcessingPicture = fFoundSpecialTarget = true;  					break;    				case MappingTargetType.FigureDescription:  					{  						var ws = m_styleProxy.WritingSystem <= 0 ? m_wsAnal : m_styleProxy.WritingSystem;  						if (m_currPictureInfo != null && m_currPictureInfo.HasDescriptionForWs(ws))  						{  							InsertPicture(); // Already found a description for the current picture; treat this as a new picture.  						}  						if (m_currPictureInfo == null)  						{  							m_currPictureInfo = new ToolboxPictureInfo();  						}  						m_currPictureInfo.AddDescriptionVariant(m_sSegmentText' ws);  						fProcessingPicture = fFoundSpecialTarget = true;  					}  					break;    				case MappingTargetType.FigureFilename:  					if (!string.IsNullOrEmpty(m_currPictureInfo?.PictureFilename))  					{  						InsertPicture(); // Already found a filename for the current picture; treat this as a new picture.  					}  					if (m_currPictureInfo == null)  					{  						m_currPictureInfo = new ToolboxPictureInfo();  					}    					if (!FileUtils.IsFilePathValid(m_sSegmentText))  					{  						throw new ScriptureUtilsException(SUE_ErrorCode.InvalidPictureFilename' SOWrapper.CurrentFileName'  							SOWrapper.CurrentLineNumber' m_sMarker + " " + m_sSegmentText' m_currentRef);  					}  					m_currPictureInfo.PictureFilename = EnsurePictureFilePathIsRooted(m_sSegmentText);  					fProcessingPicture = fFoundSpecialTarget = true;  					break;    				case MappingTargetType.FigureLayoutPosition:  					if (!string.IsNullOrEmpty(m_currPictureInfo?.LayoutPos))  					{  						InsertPicture(); // Already found a layout position for the current picture; treat this as a new picture.  					}  					if (m_currPictureInfo == null)  					{  						m_currPictureInfo = new ToolboxPictureInfo();  					}  					m_currPictureInfo.LayoutPos = m_sSegmentText;  					fProcessingPicture = fFoundSpecialTarget = true;  					break;    				case MappingTargetType.FigureRefRange:  					if (!string.IsNullOrEmpty(m_currPictureInfo?.LocationRange))  					{  						InsertPicture(); // Already found a location range for the current picture; treat this as a new picture.  					}  					if (m_currPictureInfo == null)  					{  						m_currPictureInfo = new ToolboxPictureInfo();  					}  					m_currPictureInfo.LocationRange = m_sSegmentText;  					fProcessingPicture = fFoundSpecialTarget = true;  					break;    				case MappingTargetType.FigureScale:  					if (m_currPictureInfo != null && !string.IsNullOrEmpty(m_currPictureInfo.ScaleFactor))  					{  						InsertPicture(); // Already found a scale factor for the current picture; treat this as a new picture.  					}  					if (m_currPictureInfo == null)  					{  						m_currPictureInfo = new ToolboxPictureInfo();  					}  					m_currPictureInfo.ScaleFactor = m_sSegmentText;  					fProcessingPicture = fFoundSpecialTarget = true;  					break;    				case MappingTargetType.TitleShort:  					{  						var ws = m_styleProxy.WritingSystem;    						if (ws == -1)  						{  							ws = GetWsForImportDomain();  						}    						CurrentBook?.Name.set_String(ws' TsStringUtils.MakeString(m_sSegmentText.Trim()' ws));    						// REVIEW: Should we call SetInCharStyle here?  						if (m_styleProxy.EndMarker != null)  						{  							m_fInCharStyle = true; // treat this like a character style  						}    						fFoundSpecialTarget = true;  					}  					break;    				case MappingTargetType.ChapterLabel:  					// TODO: TE-867 Handle chapter label pseudo style  					// REVIEW: Should we call SetInCharStyle here?  					if (m_styleProxy.EndMarker != null)  					{  						m_fInCharStyle = true; // treat this like a character style  					}    					fFoundSpecialTarget = true;  					break;  			}
Missing Default,ParatextImport,ParatextSfmImporter,C:\repos\sillsdev_FieldWorks\Src\ParatextImport\ParatextSfmImporter.cs,GetSegmentInfo,The following switch statement is missing a default case: switch (m_importDomain)  					{  						case ImportDomain.Main:  							m_currDomain = MarkerDomain.Default;  							break;  						case ImportDomain.BackTrans:  							m_currDomain = MarkerDomain.BackTrans;  							break;  						case ImportDomain.Annotations:  							m_currDomain = MarkerDomain.Note;  							break;  					}
