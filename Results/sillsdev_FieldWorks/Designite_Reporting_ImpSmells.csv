Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,InitializeComponent,The method has 129 lines of code.
Complex Method,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,ReportException,Cyclomatic complexity of the method is 8
Complex Method,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,ShowDialog,Cyclomatic complexity of the method is 9
Long Parameter List,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,ReportException,The method has 5 parameters. Parameters: error' applicationKey' emailAddress' parent' isLethal
Long Parameter List,SIL.Utils,UsageEmailDialog,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\UsageEmailDialog.cs,DoTrivialUsageReport,The method has 6 parameters. Parameters: applicationName' applicationKey' emailAddress' topMessage' addStats' launchNumber
Long Parameter List,SIL.Utils,UsageEmailDialog,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\UsageEmailDialog.cs,DoTrivialUsageReport,The method has 7 parameters. Parameters: applicationName' applicationKey' emailAddress' topMessage' addStats' launchNumber' assembly
Long Identifier,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,ReportException,The length of the parameter iSeparatorBetweenFileNameAndTopic is 33.
Long Identifier,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,,The length of the parameter m_originalHeightWithoutDetails is 30.
Long Statement,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ErrorReporter)); " is 133.
Long Statement,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,InitializeComponent,The length of the statement  "			this.m_notification.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192))))); " is 134.
Long Statement,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,InitializeComponent,The length of the statement  "			this.viewDetailsLink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.viewDetailsLink_LinkClicked); " is 128.
Long Statement,SIL.Utils,UsageEmailDialog,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\UsageEmailDialog.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UsageEmailDialog)); " is 136.
Complex Conditional,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,OnKeyDown,The conditional expression  "e.KeyCode == Keys.ShiftKey && m_isLethal && Visible && !labelAttemptToContinue.Visible"  is complex.
Empty Catch Block,SIL.Utils,UsageEmailDialog,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\UsageEmailDialog.cs,btnSend_Click,The method has an empty catch block.
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,InitializeComponent,The following statement contains a magic number: this.m_notification.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,InitializeComponent,The following statement contains a magic number: this.m_notification.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,InitializeComponent,The following statement contains a magic number: this.m_notification.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,ReportException,The following statement contains a magic number: if (!string.IsNullOrEmpty(error.HelpLink) && error.HelpLink.IndexOf("::/") > 0 &&  				!string.IsNullOrEmpty(error.Message))  			{  				s_fIgnoreReport = true; // This is presumably a hopelessly fatal error' so we  				// don't want to report any subsequent errors at all.  				// Look for the end of the basic message which will be terminated by two new lines or  				// two CRLF sequences.  				int lengthOfBasicMessage = error.Message.IndexOf("\r\n\r\n");  				if (lengthOfBasicMessage <= 0)  					lengthOfBasicMessage = error.Message.IndexOf("\n\n");  				if (lengthOfBasicMessage <= 0)  					lengthOfBasicMessage = error.Message.Length;    				int iSeparatorBetweenFileNameAndTopic = error.HelpLink.IndexOf("::/");  				string sHelpFile = error.HelpLink.Substring(0' iSeparatorBetweenFileNameAndTopic);  				string sHelpTopic = error.HelpLink.Substring(iSeparatorBetweenFileNameAndTopic + 3);    				string caption = ReportingStrings.kstidFieldWorksErrorCaption;  				string appExit = ReportingStrings.kstidFieldWorksErrorExitInfo;  				// TODO-Linux: MessageBox.Show doesn't implement help  				MessageBox.Show(parent' error.Message.Substring(0' lengthOfBasicMessage) + Environment.NewLine + appExit'  					caption' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1' 0'  					sHelpFile' HelpNavigator.Topic' sHelpTopic);  				if (Thread.CurrentThread.GetApartmentState() == ApartmentState.STA)  					ClipboardUtils.SetDataObject(error.Message' true);  				else  					Logger.WriteError(error);  				Application.Exit();  				return true;  			}
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,GatherData,The following statement contains a magic number: StringBuilder sb = new StringBuilder(m_details.Text.Length + m_reproduce.Text.Length + 50);
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,ShowDialog,The following statement contains a magic number: m_originalHeightWithoutDetails = Height - m_details.Height - 10;
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,ShowDialog,The following statement contains a magic number: if (m_fUserReport)  			{  				ControlBox = true;  				cancelButton.Visible = true;  				btnClose.Size = cancelButton.Size;  				btnClose.Left = cancelButton.Left - btnClose.Width - 15;  				if (m_fSuggestion)  				{  					Text = ReportingStrings.kstidMakeSuggestionCaption;  					m_notification.Text = ReportingStrings.kstidMakeSuggestionNotification;  					m_stepsLabel.Text = ReportingStrings.kstidGoalAndSuggestion;  					m_reproduce.Text = ReportingStrings.kstidSampleSuggestion;  				}  				else  				{  					Text = ReportingStrings.kstidReportProblemCaption;  					m_notification.Text = ReportingStrings.kstidReportProblemNotification;  					m_stepsLabel.Text = ReportingStrings.kstidProblemAndSteps;  					m_reproduce.Text = ReportingStrings.ksSampleProblemReport;  				}  				// Do this AFTER filling in the sample...it is disabled until they change something.  				btnClose.Enabled = false;  			}
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,ShowDialog,The following statement contains a magic number: if (!m_isLethal)  			{  				btnClose.Text = ReportingStrings.ks_Ok;  				BackColor = m_fSuggestion  					? Color.FromKnownColor(KnownColor.Control) // standard dialog background  					: Color.FromArgb(255' 255' 192);//yellow  				if (m_fReportDuplicateGuidsASAP)  				{  					BackColor = Color.FromArgb(200' 191' 231);  				}  				m_notification.BackColor = BackColor;  				UpdateCrashCount(applicationKey' "NumberOfAnnoyingCrashes");  			}  			else  			{  				UpdateCrashCount(applicationKey' "NumberOfSeriousCrashes");  			}
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,ShowDialog,The following statement contains a magic number: if (!m_isLethal)  			{  				btnClose.Text = ReportingStrings.ks_Ok;  				BackColor = m_fSuggestion  					? Color.FromKnownColor(KnownColor.Control) // standard dialog background  					: Color.FromArgb(255' 255' 192);//yellow  				if (m_fReportDuplicateGuidsASAP)  				{  					BackColor = Color.FromArgb(200' 191' 231);  				}  				m_notification.BackColor = BackColor;  				UpdateCrashCount(applicationKey' "NumberOfAnnoyingCrashes");  			}  			else  			{  				UpdateCrashCount(applicationKey' "NumberOfSeriousCrashes");  			}
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,ShowDialog,The following statement contains a magic number: if (!m_isLethal)  			{  				btnClose.Text = ReportingStrings.ks_Ok;  				BackColor = m_fSuggestion  					? Color.FromKnownColor(KnownColor.Control) // standard dialog background  					: Color.FromArgb(255' 255' 192);//yellow  				if (m_fReportDuplicateGuidsASAP)  				{  					BackColor = Color.FromArgb(200' 191' 231);  				}  				m_notification.BackColor = BackColor;  				UpdateCrashCount(applicationKey' "NumberOfAnnoyingCrashes");  			}  			else  			{  				UpdateCrashCount(applicationKey' "NumberOfSeriousCrashes");  			}
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,ShowDialog,The following statement contains a magic number: if (!m_isLethal)  			{  				btnClose.Text = ReportingStrings.ks_Ok;  				BackColor = m_fSuggestion  					? Color.FromKnownColor(KnownColor.Control) // standard dialog background  					: Color.FromArgb(255' 255' 192);//yellow  				if (m_fReportDuplicateGuidsASAP)  				{  					BackColor = Color.FromArgb(200' 191' 231);  				}  				m_notification.BackColor = BackColor;  				UpdateCrashCount(applicationKey' "NumberOfAnnoyingCrashes");  			}  			else  			{  				UpdateCrashCount(applicationKey' "NumberOfSeriousCrashes");  			}
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,ShowDialog,The following statement contains a magic number: if (!m_isLethal)  			{  				btnClose.Text = ReportingStrings.ks_Ok;  				BackColor = m_fSuggestion  					? Color.FromKnownColor(KnownColor.Control) // standard dialog background  					: Color.FromArgb(255' 255' 192);//yellow  				if (m_fReportDuplicateGuidsASAP)  				{  					BackColor = Color.FromArgb(200' 191' 231);  				}  				m_notification.BackColor = BackColor;  				UpdateCrashCount(applicationKey' "NumberOfAnnoyingCrashes");  			}  			else  			{  				UpdateCrashCount(applicationKey' "NumberOfSeriousCrashes");  			}
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,ShowDialog,The following statement contains a magic number: if (!m_isLethal)  			{  				btnClose.Text = ReportingStrings.ks_Ok;  				BackColor = m_fSuggestion  					? Color.FromKnownColor(KnownColor.Control) // standard dialog background  					: Color.FromArgb(255' 255' 192);//yellow  				if (m_fReportDuplicateGuidsASAP)  				{  					BackColor = Color.FromArgb(200' 191' 231);  				}  				m_notification.BackColor = BackColor;  				UpdateCrashCount(applicationKey' "NumberOfAnnoyingCrashes");  			}  			else  			{  				UpdateCrashCount(applicationKey' "NumberOfSeriousCrashes");  			}
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,SetDialogStringsForDuplicateGUIDsError,The following statement contains a magic number: btnClose.Left = cancelButton.Left - btnClose.Width - 15;
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,UpdateAppRuntime,The following statement contains a magic number: int cmin = csec / 60;
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,UpdateAppRuntime,The following statement contains a magic number: Reporting.ErrorReport.AddProperty("TotalRuntime"'  				String.Format("{0}:{1:d2}:{2:d2}"' cmin / 60' cmin % 60' csec % 60));
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,UpdateAppRuntime,The following statement contains a magic number: Reporting.ErrorReport.AddProperty("TotalRuntime"'  				String.Format("{0}:{1:d2}:{2:d2}"' cmin / 60' cmin % 60' csec % 60));
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,UpdateAppRuntime,The following statement contains a magic number: Reporting.ErrorReport.AddProperty("TotalRuntime"'  				String.Format("{0}:{1:d2}:{2:d2}"' cmin / 60' cmin % 60' csec % 60));
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,UpdateAppRuntime,The following statement contains a magic number: if (secBeforeCrash > 0)  			{  				int minBeforeCrash = secBeforeCrash / 60;  				Reporting.ErrorReport.AddProperty("RuntimeBeforeCrash"'  					String.Format("{0}:{1:d2}:{2:d2}"' minBeforeCrash / 60' minBeforeCrash % 60' secBeforeCrash % 60));  			}
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,UpdateAppRuntime,The following statement contains a magic number: if (secBeforeCrash > 0)  			{  				int minBeforeCrash = secBeforeCrash / 60;  				Reporting.ErrorReport.AddProperty("RuntimeBeforeCrash"'  					String.Format("{0}:{1:d2}:{2:d2}"' minBeforeCrash / 60' minBeforeCrash % 60' secBeforeCrash % 60));  			}
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,UpdateAppRuntime,The following statement contains a magic number: if (secBeforeCrash > 0)  			{  				int minBeforeCrash = secBeforeCrash / 60;  				Reporting.ErrorReport.AddProperty("RuntimeBeforeCrash"'  					String.Format("{0}:{1:d2}:{2:d2}"' minBeforeCrash / 60' minBeforeCrash % 60' secBeforeCrash % 60));  			}
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,UpdateAppRuntime,The following statement contains a magic number: if (secBeforeCrash > 0)  			{  				int minBeforeCrash = secBeforeCrash / 60;  				Reporting.ErrorReport.AddProperty("RuntimeBeforeCrash"'  					String.Format("{0}:{1:d2}:{2:d2}"' minBeforeCrash / 60' minBeforeCrash % 60' secBeforeCrash % 60));  			}
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,OnPaint,The following statement contains a magic number: if (m_showChips)  			{  				base.OnPaint(e);  				Random Rnd = new Random();  				int Number = Rnd.Next(30);  				for (int i = 10; i < Number; i++)  					e.Graphics.DrawImage(ReportingStrings.cc' new Point(Rnd.Next(Width)' Rnd.Next(Height)));  			}
Magic Number,SIL.Utils,ErrorReporter,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\ErrorReport.cs,OnPaint,The following statement contains a magic number: if (m_showChips)  			{  				base.OnPaint(e);  				Random Rnd = new Random();  				int Number = Rnd.Next(30);  				for (int i = 10; i < Number; i++)  					e.Graphics.DrawImage(ReportingStrings.cc' new Point(Rnd.Next(Width)' Rnd.Next(Height)));  			}
Magic Number,SIL.Utils,UsageEmailDialog,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\UsageEmailDialog.cs,DoTrivialUsageReport,The following statement contains a magic number: if (launchNumber == launchCount)  			{  				// Set the Application label to the name of the app  				if (assembly == null)  					assembly = Assembly.GetEntryAssembly();  				string version = Application.ProductVersion;  				if (assembly != null)  				{  					object[] attributes = assembly.GetCustomAttributes(typeof(AssemblyFileVersionAttribute)' false);  					version = (attributes != null && attributes.Length > 0) ?  						((AssemblyFileVersionAttribute)attributes[0]).Version : Application.ProductVersion;  				}    				using (UsageEmailDialog d = new UsageEmailDialog())  				{  					d.TopLineText = topMessage;  					d.EmailAddress = emailAddress;  					d.EmailSubject = string.Format("{0} {1} Report {2} Launches"' applicationName' version' launchCount);  					StringBuilder bldr = new StringBuilder();  					bldr.AppendFormat("<report app='{0}' version='{1}' linux='{2}'>"' applicationName'  						version' MiscUtils.IsUnix);  					bldr.AppendFormat("<stat type='launches' value='{0}'/>"' launchCount);  					if (launchCount > 1)  					{  						int val = (int)applicationKey.GetValue("NumberOfSeriousCrashes"' 0);  						bldr.AppendFormat("<stat type='NumberOfSeriousCrashes' value='{0}'/>"' val);  						val = (int)applicationKey.GetValue("NumberOfAnnoyingCrashes"' 0);  						bldr.AppendFormat("<stat type='NumberOfAnnoyingCrashes' value='{0}'/>"' val);  						int csec = (int)applicationKey.GetValue("TotalAppRuntime"' 0);  						int cmin = csec / 60;  						string sRuntime = String.Format("{0}:{1:d2}:{2:d2}"'  							cmin / 60' cmin % 60' csec % 60);  						bldr.AppendFormat("<stat type='TotalAppRuntime' value='{0}'/>"' sRuntime);  					}  					bldr.AppendFormat("</report>");  					d.Body = bldr.ToString();  					d.ShowDialog();  				}  			}
Magic Number,SIL.Utils,UsageEmailDialog,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\UsageEmailDialog.cs,DoTrivialUsageReport,The following statement contains a magic number: if (launchNumber == launchCount)  			{  				// Set the Application label to the name of the app  				if (assembly == null)  					assembly = Assembly.GetEntryAssembly();  				string version = Application.ProductVersion;  				if (assembly != null)  				{  					object[] attributes = assembly.GetCustomAttributes(typeof(AssemblyFileVersionAttribute)' false);  					version = (attributes != null && attributes.Length > 0) ?  						((AssemblyFileVersionAttribute)attributes[0]).Version : Application.ProductVersion;  				}    				using (UsageEmailDialog d = new UsageEmailDialog())  				{  					d.TopLineText = topMessage;  					d.EmailAddress = emailAddress;  					d.EmailSubject = string.Format("{0} {1} Report {2} Launches"' applicationName' version' launchCount);  					StringBuilder bldr = new StringBuilder();  					bldr.AppendFormat("<report app='{0}' version='{1}' linux='{2}'>"' applicationName'  						version' MiscUtils.IsUnix);  					bldr.AppendFormat("<stat type='launches' value='{0}'/>"' launchCount);  					if (launchCount > 1)  					{  						int val = (int)applicationKey.GetValue("NumberOfSeriousCrashes"' 0);  						bldr.AppendFormat("<stat type='NumberOfSeriousCrashes' value='{0}'/>"' val);  						val = (int)applicationKey.GetValue("NumberOfAnnoyingCrashes"' 0);  						bldr.AppendFormat("<stat type='NumberOfAnnoyingCrashes' value='{0}'/>"' val);  						int csec = (int)applicationKey.GetValue("TotalAppRuntime"' 0);  						int cmin = csec / 60;  						string sRuntime = String.Format("{0}:{1:d2}:{2:d2}"'  							cmin / 60' cmin % 60' csec % 60);  						bldr.AppendFormat("<stat type='TotalAppRuntime' value='{0}'/>"' sRuntime);  					}  					bldr.AppendFormat("</report>");  					d.Body = bldr.ToString();  					d.ShowDialog();  				}  			}
Magic Number,SIL.Utils,UsageEmailDialog,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\UsageEmailDialog.cs,DoTrivialUsageReport,The following statement contains a magic number: if (launchNumber == launchCount)  			{  				// Set the Application label to the name of the app  				if (assembly == null)  					assembly = Assembly.GetEntryAssembly();  				string version = Application.ProductVersion;  				if (assembly != null)  				{  					object[] attributes = assembly.GetCustomAttributes(typeof(AssemblyFileVersionAttribute)' false);  					version = (attributes != null && attributes.Length > 0) ?  						((AssemblyFileVersionAttribute)attributes[0]).Version : Application.ProductVersion;  				}    				using (UsageEmailDialog d = new UsageEmailDialog())  				{  					d.TopLineText = topMessage;  					d.EmailAddress = emailAddress;  					d.EmailSubject = string.Format("{0} {1} Report {2} Launches"' applicationName' version' launchCount);  					StringBuilder bldr = new StringBuilder();  					bldr.AppendFormat("<report app='{0}' version='{1}' linux='{2}'>"' applicationName'  						version' MiscUtils.IsUnix);  					bldr.AppendFormat("<stat type='launches' value='{0}'/>"' launchCount);  					if (launchCount > 1)  					{  						int val = (int)applicationKey.GetValue("NumberOfSeriousCrashes"' 0);  						bldr.AppendFormat("<stat type='NumberOfSeriousCrashes' value='{0}'/>"' val);  						val = (int)applicationKey.GetValue("NumberOfAnnoyingCrashes"' 0);  						bldr.AppendFormat("<stat type='NumberOfAnnoyingCrashes' value='{0}'/>"' val);  						int csec = (int)applicationKey.GetValue("TotalAppRuntime"' 0);  						int cmin = csec / 60;  						string sRuntime = String.Format("{0}:{1:d2}:{2:d2}"'  							cmin / 60' cmin % 60' csec % 60);  						bldr.AppendFormat("<stat type='TotalAppRuntime' value='{0}'/>"' sRuntime);  					}  					bldr.AppendFormat("</report>");  					d.Body = bldr.ToString();  					d.ShowDialog();  				}  			}
Magic Number,SIL.Utils,UsageEmailDialog,C:\repos\sillsdev_FieldWorks\Src\Utilities\Reporting\UsageEmailDialog.cs,DoTrivialUsageReport,The following statement contains a magic number: if (launchNumber == launchCount)  			{  				// Set the Application label to the name of the app  				if (assembly == null)  					assembly = Assembly.GetEntryAssembly();  				string version = Application.ProductVersion;  				if (assembly != null)  				{  					object[] attributes = assembly.GetCustomAttributes(typeof(AssemblyFileVersionAttribute)' false);  					version = (attributes != null && attributes.Length > 0) ?  						((AssemblyFileVersionAttribute)attributes[0]).Version : Application.ProductVersion;  				}    				using (UsageEmailDialog d = new UsageEmailDialog())  				{  					d.TopLineText = topMessage;  					d.EmailAddress = emailAddress;  					d.EmailSubject = string.Format("{0} {1} Report {2} Launches"' applicationName' version' launchCount);  					StringBuilder bldr = new StringBuilder();  					bldr.AppendFormat("<report app='{0}' version='{1}' linux='{2}'>"' applicationName'  						version' MiscUtils.IsUnix);  					bldr.AppendFormat("<stat type='launches' value='{0}'/>"' launchCount);  					if (launchCount > 1)  					{  						int val = (int)applicationKey.GetValue("NumberOfSeriousCrashes"' 0);  						bldr.AppendFormat("<stat type='NumberOfSeriousCrashes' value='{0}'/>"' val);  						val = (int)applicationKey.GetValue("NumberOfAnnoyingCrashes"' 0);  						bldr.AppendFormat("<stat type='NumberOfAnnoyingCrashes' value='{0}'/>"' val);  						int csec = (int)applicationKey.GetValue("TotalAppRuntime"' 0);  						int cmin = csec / 60;  						string sRuntime = String.Format("{0}:{1:d2}:{2:d2}"'  							cmin / 60' cmin % 60' csec % 60);  						bldr.AppendFormat("<stat type='TotalAppRuntime' value='{0}'/>"' sRuntime);  					}  					bldr.AppendFormat("</report>");  					d.Body = bldr.ToString();  					d.ShowDialog();  				}  			}
