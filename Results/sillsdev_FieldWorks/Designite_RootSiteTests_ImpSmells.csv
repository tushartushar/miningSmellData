Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The method has 123 lines of code.
Long Method,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The method has 213 lines of code.
Complex Method,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,Cyclomatic complexity of the method is 31
Long Parameter List,SIL.FieldWorks.Common.RootSites,DummyBasicView,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicView.cs,IsParagraphProps,The method has 6 parameters. Parameters: vwsel' hvoText' tagText' vqvps' ihvoAnchor' ihvoEnd
Long Parameter List,SIL.FieldWorks.Common.RootSites,DummyBasicView,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicView.cs,GetParagraphProps,The method has 7 parameters. Parameters: vwsel' hvoText' tagText' vqvps' ihvoFirst' ihvoLast' vqttp
Long Statement,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_InResponseToScrollingAndResizing,The length of the statement  "			// which now makes sure one screenful is expanded. Too small' and ScrollToEnd only has to expand the last lazy box rather " is 121.
Long Statement,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,GetParagraphProps_InPictureCaption,The length of the statement  "			mockedSelection.Expect(s => s.PropInfo(false' 0' out ignoreOut' out ignoreOut' out ignoreOut' out ignoreOut' out outPropStore)) " is 127.
Empty Catch Block,SIL.FieldWorks.Common.RootSites,DummyBasicView,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicView.cs,MakeRoot,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.RootSites,DummyFootnoteView,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,MakeRoot,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.RootSites,UndoTaskHelperTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\UndoTaskHelperTests.cs,EndUndoCalledAfterUnhandledException,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.RootSites,UndoTaskHelperTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\UndoTaskHelperTests.cs,EndUndoNotCalledAfterHandledException,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.RootSites,UndoTaskHelperTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\UndoTaskHelperTests.cs,AutomaticRollbackAfterException,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.RootSites,UndoTaskHelperTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\UndoTaskHelperTests.cs,AutomaticRollbackAfterException,The method has an empty catch block.
Magic Number,SIL.FieldWorks.Common.RootSites,BasicViewTestsBase,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\BasicViewTestsBase.cs,ShowForm,The following statement contains a magic number: int height = Platform.IsMono ? 300 : 307 - 25;
Magic Number,SIL.FieldWorks.Common.RootSites,BasicViewTestsBase,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\BasicViewTestsBase.cs,ShowForm,The following statement contains a magic number: int height = Platform.IsMono ? 300 : 307 - 25;
Magic Number,SIL.FieldWorks.Common.RootSites,BasicViewTestsBase,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\BasicViewTestsBase.cs,ShowForm,The following statement contains a magic number: int height = Platform.IsMono ? 300 : 307 - 25;
Magic Number,SIL.FieldWorks.Common.RootSites,BasicViewTestsBase,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\BasicViewTestsBase.cs,ShowForm,The following statement contains a magic number: m_basicView.Width = 300;
Magic Number,SIL.FieldWorks.Common.RootSites,DummyCollectorEnvVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\CollectorEnvTests.cs,Display,The following statement contains a magic number: switch (frag)  				{  					case 1: // A ScrBook; display the title.  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 2);  						break;  					case 2: // An StText; display the paragraphs.  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  						tss = TsStringUtils.MakeString(  							"Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  							frWs);  						vwenv.AddString(tss);  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 3);  						break;  					case 3: // StTxtPara' display details of our outer object  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  						tss = TsStringUtils.MakeString(  							"Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  							frWs);  						vwenv.AddString(tss);  						break;  					default:  						throw new ApplicationException("Unexpected frag in DummyCollectorEnvVc");  				}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyCollectorEnvVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\CollectorEnvTests.cs,Display,The following statement contains a magic number: switch (frag)  				{  					case 1: // A ScrBook; display the title.  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 2);  						break;  					case 2: // An StText; display the paragraphs.  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  						tss = TsStringUtils.MakeString(  							"Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  							frWs);  						vwenv.AddString(tss);  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 3);  						break;  					case 3: // StTxtPara' display details of our outer object  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  						tss = TsStringUtils.MakeString(  							"Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  							frWs);  						vwenv.AddString(tss);  						break;  					default:  						throw new ApplicationException("Unexpected frag in DummyCollectorEnvVc");  				}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyCollectorEnvVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\CollectorEnvTests.cs,Display,The following statement contains a magic number: switch (frag)  				{  					case 1: // A ScrBook; display the title.  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 2);  						break;  					case 2: // An StText; display the paragraphs.  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  						tss = TsStringUtils.MakeString(  							"Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  							frWs);  						vwenv.AddString(tss);  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 3);  						break;  					case 3: // StTxtPara' display details of our outer object  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  						tss = TsStringUtils.MakeString(  							"Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  							frWs);  						vwenv.AddString(tss);  						break;  					default:  						throw new ApplicationException("Unexpected frag in DummyCollectorEnvVc");  				}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyCollectorEnvVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\CollectorEnvTests.cs,Display,The following statement contains a magic number: switch (frag)  				{  					case 1: // A ScrBook; display the title.  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 2);  						break;  					case 2: // An StText; display the paragraphs.  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  						tss = TsStringUtils.MakeString(  							"Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  							frWs);  						vwenv.AddString(tss);  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 3);  						break;  					case 3: // StTxtPara' display details of our outer object  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  						tss = TsStringUtils.MakeString(  							"Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  							frWs);  						vwenv.AddString(tss);  						break;  					default:  						throw new ApplicationException("Unexpected frag in DummyCollectorEnvVc");  				}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,DummyBasicViewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\DummyBasicViewVc.cs,Display,The following statement contains a magic number: switch(frag)  			{  				case 1: // the root; display the subitems' first using non-lazy view' then lazy one.  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSeparateParas) == DisplayType.kBookFootnoteDetailsSeparateParas)  						vwenv.AddObjVecItems(m_flid' this' 10);  					if ((m_displayType & DisplayType.kBookFootnoteDetailsSinglePara) == DisplayType.kBookFootnoteDetailsSinglePara)  						vwenv.AddObjVecItems(m_flid' this' 11);  					else  					{  						if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						{  							vwenv.AddObjVecItems(m_flid' this' 3);  						}  						if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						{  							vwenv.AddObjVecItems(m_flid' this' 2);  						}  					}  					if ((m_displayType & DisplayType.kBookTitle) == DisplayType.kBookTitle)  						vwenv.AddObjProp(ScrBookTags.kflidTitle' this' 3);  					if (m_displayType == DisplayType.kOuterObjDetails)  						vwenv.AddObjVecItems(m_flid' this' 6);  					break;  				case 2: // An StText' display paragraphs lazily  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddLazyVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 3: // An StText' display paragraphs not lazily.  					if ((m_displayType & DisplayType.kWithTopMargin) == DisplayType.kWithTopMargin)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 4);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					if ((m_displayType & DisplayType.kDuplicateParagraphs) != 0)  						vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 5);  					break;  				case 4: // StTxtPara' display contents with top margin  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTop'  						(int)FwTextPropVar.ktpvMilliPoint' kMarginTop);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 5: // StTxtPara' display contents without top margin  					//vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize'  					//    (int)FwTextPropVar.ktpvMilliPoint' 15000);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.OpenMappedPara();  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					if ((m_displayType & DisplayType.kMappedPara) == DisplayType.kMappedPara)  						vwenv.CloseParagraph();  					break;  				case 6: // StTxtPara' display details of our outer object  					int hvoOuter' tag' ihvo;  					vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out hvoOuter' out tag' out ihvo);  					ITsString tss = TsStringUtils.MakeString("Hvo = " + hvoOuter + "; Tag = " + tag + "; Ihvo = " + ihvo'  						m_wsDefault);  					vwenv.AddString(tss);  					break;  				case ScrBookTags.kflidSections:  					vwenv.AddObjVecItems(ScrBookTags.kflidSections' this'  						ScrSectionTags.kflidContent);  					break;  				case ScrSectionTags.kflidHeading:  				case ScrSectionTags.kflidContent:  					if ((m_displayType & DisplayType.kNormal) == DisplayType.kNormal)  						vwenv.AddObjProp(frag' this' 3);  					if ((m_displayType & DisplayType.kLazy) == DisplayType.kLazy)  						vwenv.AddObjProp(frag' this' 2);  					break;  				case 7: // ScrBook  					vwenv.OpenDiv();  					vwenv.AddObjVecItems(ScrBookTags.kflidFootnotes' this' 8);  					vwenv.CloseDiv();  					break;  				case 8: // StFootnote  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 9: // StTxtPara  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					break;  				case 10:  					// Display a Footnote by displaying its "FootnoteMarker" in a paragraph  					// by itself' followed by the sequence of paragraphs.  					vwenv.AddStringProp(StFootnoteTags.kflidFootnoteMarker' null);  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this'  						9);  					break;  				case 11:  					// Display a Footnote by displaying its "FootnoteMarker" followed by the  					// contents of its first paragraph (similar to the way footnotes are displayed in  					// real life.  					vwenv.AddObjVecItems(StTextTags.kflidParagraphs' this' 12);  					break;  				case 12: // Footnote paragraph with marker  					vwenv.OpenMappedTaggedPara();  					// The footnote marker is not editable.  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);    					// add a read-only space after the footnote marker  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvEnum'  						(int)TptEditable.ktptNotEditable);  					vwenv.AddString(TsStringUtils.MakeString(" "' DefaultWs));  					vwenv.AddStringProp(StTxtParaTags.kflidContents' null);  					vwenv.CloseParagraph();  					break;  				default:  					throw new ApplicationException("Unexpected frag in DummyBasicViewVc");  			}
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,FixtureSetup,The following statement contains a magic number: ReflectionHelper.SetField(Type.GetType("SIL.LCModel.DomainImpl.ScrFootnote' SIL.LCModel"' true)'  				"s_maxAllowedParagraphs"' 5);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_InResponseToScrollingAndResizing,The following statement contains a magic number: ShowForm(Lng.English' DummyBasicViewVc.DisplayType.kAll' 150);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_InResponseToScrollingAndResizing,The following statement contains a magic number: int expectedHeight = 2 * (6 * m_basicView.SelectionHeight  				+ DummyBasicViewVc.kMarginTop * rcSrcRoot.Height / DummyBasicViewVc.kdzmpInch)  				+ 2 * (2 * DummyBasicViewVc.kEstimatedParaHeight * rcSrcRoot.Height / 72);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_InResponseToScrollingAndResizing,The following statement contains a magic number: int expectedHeight = 2 * (6 * m_basicView.SelectionHeight  				+ DummyBasicViewVc.kMarginTop * rcSrcRoot.Height / DummyBasicViewVc.kdzmpInch)  				+ 2 * (2 * DummyBasicViewVc.kEstimatedParaHeight * rcSrcRoot.Height / 72);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_InResponseToScrollingAndResizing,The following statement contains a magic number: int expectedHeight = 2 * (6 * m_basicView.SelectionHeight  				+ DummyBasicViewVc.kMarginTop * rcSrcRoot.Height / DummyBasicViewVc.kdzmpInch)  				+ 2 * (2 * DummyBasicViewVc.kEstimatedParaHeight * rcSrcRoot.Height / 72);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_InResponseToScrollingAndResizing,The following statement contains a magic number: int expectedHeight = 2 * (6 * m_basicView.SelectionHeight  				+ DummyBasicViewVc.kMarginTop * rcSrcRoot.Height / DummyBasicViewVc.kdzmpInch)  				+ 2 * (2 * DummyBasicViewVc.kEstimatedParaHeight * rcSrcRoot.Height / 72);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_InResponseToScrollingAndResizing,The following statement contains a magic number: int expectedHeight = 2 * (6 * m_basicView.SelectionHeight  				+ DummyBasicViewVc.kMarginTop * rcSrcRoot.Height / DummyBasicViewVc.kdzmpInch)  				+ 2 * (2 * DummyBasicViewVc.kEstimatedParaHeight * rcSrcRoot.Height / 72);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_InResponseToScrollingAndResizing,The following statement contains a magic number: expectedHeight = 4 * (6 * m_basicView.SelectionHeight  				+ DummyBasicViewVc.kMarginTop * rcSrcRoot.Height / DummyBasicViewVc.kdzmpInch);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_InResponseToScrollingAndResizing,The following statement contains a magic number: expectedHeight = 4 * (6 * m_basicView.SelectionHeight  				+ DummyBasicViewVc.kMarginTop * rcSrcRoot.Height / DummyBasicViewVc.kdzmpInch);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_InResponseToScrollingAndResizing,The following statement contains a magic number: int nNewWidth = m_basicView.SelectionWidth * 3 / 4;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_InResponseToScrollingAndResizing,The following statement contains a magic number: int nNewWidth = m_basicView.SelectionWidth * 3 / 4;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_InResponseToScrollingAndResizing,The following statement contains a magic number: expectedHeight = 4 * (12 * m_basicView.SelectionHeight  				+ DummyBasicViewVc.kMarginTop * rcSrcRoot.Height / DummyBasicViewVc.kdzmpInch);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_InResponseToScrollingAndResizing,The following statement contains a magic number: expectedHeight = 4 * (12 * m_basicView.SelectionHeight  				+ DummyBasicViewVc.kMarginTop * rcSrcRoot.Height / DummyBasicViewVc.kdzmpInch);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAtTop,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 0' 10);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAtTop,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 30' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAtTop,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' -30' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAtTop,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 30' 10);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAtTop,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 30' 10);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosInMiddle,The following statement contains a magic number: view.ScrollPosition = new Point(0' 100);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosInMiddle,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 0' 10);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosInMiddle,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 30' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosInMiddle,The following statement contains a magic number: nPos += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosInMiddle,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' -30' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosInMiddle,The following statement contains a magic number: nPos -= 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosInMiddle,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 30' nPos - 1);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosInMiddle,The following statement contains a magic number: nPos += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosInMiddle,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 30' nPos);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosInMiddle,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 30' nPos + 1);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: ShowForm(Lng.English' DummyBasicViewVc.DisplayType.kAll' 150);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: view.ScrollPosition = new Point(0' maxScrollPos - 15);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 0' 10);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 30' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' -30' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: nPos -= 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 30' nPos - 1);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: nPos += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 30' nPos);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' dydWindheight + 30' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' - (dydWindheight + 30)' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: nPos = Math.Max(0' nPos - dydWindheight - 30);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' dydWindheight + 30' nPos - 1);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAlmostAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' dydWindheight + 30' nPos);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 0' 10);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 30' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' -30' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAtEnd,The following statement contains a magic number: nPos -= 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 30' nPos - 1);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAtEnd,The following statement contains a magic number: nPos += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' 30' nPos);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_PosAtEnd,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 0' dydWindheight + 30' nPos);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_ScrollRangeLessThanClientRectangle,The following statement contains a magic number: nChange = view.DisplayRectangle.Height - dydWindheight / 2;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRange_VScroll_ScrollRangeLessThanClientRectangle,The following statement contains a magic number: nChange = view.DisplayRectangle.Height - dydWindheight / 2;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 10' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(2 * dxdWindwidth' 0' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += 2 * dxdWindwidth;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(-30' 0' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth -= 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(30' 10' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(30' 10' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: view.ScrollPosition = new Point(100' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 10' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(30' 0' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nPos += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(-30' 0' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth -= 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nPos -= 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(30' nPos - 1' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nPos += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(30' nPos' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(30' nPos + 1' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: view.ScrollPosition = new Point(scrollMax - 15' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 10' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(30' 0' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nPos += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(-30' 0' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth -= 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nPos -= 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(30' nPos - 1' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nPos += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(30' nPos' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(dxdWindwidth + 30' 0' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += dxdWindwidth + 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nPos += dxdWindwidth + 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(- (dxdWindwidth + 30)' 0' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth -= dxdWindwidth + 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nPos -= dxdWindwidth + 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(dxdWindwidth + 30' nPos - 1' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += dxdWindwidth + 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nPos += dxdWindwidth + 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(dxdWindwidth + 30' nPos' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += dxdWindwidth + 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(0' 10' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(30' 0' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nPos += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(-30' 0' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth -= 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nPos -= 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(30' nPos - 1' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nPos += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(30' nPos' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(dxdWindwidth + 30' nPos' 0' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nWidth += dxdWindwidth + 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nChange = view.DisplayRectangle.Width - dxdWindwidth / 2;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHScroll,The following statement contains a magic number: nChange = view.DisplayRectangle.Width - dxdWindwidth / 2;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHVScroll,The following statement contains a magic number: view.ScrollMinSize = new Size(2 * dxdWindwidth' view.AutoScrollMinSize.Height);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHVScroll,The following statement contains a magic number: view.ScrollPosition = new Point(10' maxYScroll);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHVScroll,The following statement contains a magic number: bool fRet = view.AdjustScrollRange(30' 0' -40' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHVScroll,The following statement contains a magic number: bool fRet = view.AdjustScrollRange(30' 0' -40' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHVScroll,The following statement contains a magic number: nWidth += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHVScroll,The following statement contains a magic number: nXPos += 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHVScroll,The following statement contains a magic number: nYPos -= 40;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHVScroll,The following statement contains a magic number: view.ScrollPosition = new Point(maxXScroll' 10);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHVScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(-30' 0' 40' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHVScroll,The following statement contains a magic number: fRet = view.AdjustScrollRange(-30' 0' 40' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHVScroll,The following statement contains a magic number: nWidth -= 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHVScroll,The following statement contains a magic number: nXPos -= 30;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,AdjustScrollRangeTestHVScroll,The following statement contains a magic number: nYPos += 40;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,IsParagraphProps_Basic,The following statement contains a magic number: rootBox.MakeTextSelection(ihvoRoot' clev' rgvsli' tag' cpropPrevious' ichInsert'  					ichInsert + 5' ws' fAssocPrev' ihvoEnd1' ttp' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,IsParagraphProps_Basic,The following statement contains a magic number: rgvsli[clev-1].ihvo = 2;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,GetParagraphProps,The following statement contains a magic number: rootBox.MakeTextSelection(ihvoRoot' clev' rgvsli' tag' cpropPrevious' ichInsert'  					ichInsert + 5' ws' fAssocPrev' ihvoEnd1' ttp' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,GetParagraphProps,The following statement contains a magic number: rgvsli[clev-1].ihvo = 2;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,GetParagraphProps_InPictureCaption,The following statement contains a magic number: mockedSelection.Expect(s => s.CLevels(true)).Return(2);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,GetParagraphProps_InPictureCaption,The following statement contains a magic number: mockedSelection.Expect(s => s.CLevels(false)).Return(2);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeTranslationssWhenParasMerge_BothParasHaveTranslations,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeTranslationssWhenParasMerge_BothParasHaveTranslations,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ich' 0' 0' true' 1' null'  				true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeTranslationsWhenParasMerge_FirstParaHasNoTranslations,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeTranslationsWhenParasMerge_FirstParaHasNoTranslations,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo' StTxtParaTags.kflidContents' 0' ich' 0' 0' true' 1' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,SplitBTs_BothParasHaveBt,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,SplitBTs_BothParasHaveBt,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ich' ich' 0' true' -1' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,SplitBTs_MidSegment_BothParasHaveBt,The following statement contains a magic number: AddSegmentFt(para' 2' "BT3"' Cache.DefaultAnalWs);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,SplitBTs_MidSegment_BothParasHaveBt,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,SplitBTs_MidSegment_BothParasHaveBt,The following statement contains a magic number: int ich = DummyBasicView.kFirstParaEng.Length + 5;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,SplitBTs_MidSegment_BothParasHaveBt,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ich' ich' 0' true' -1' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,SplitBTs_MidSegment_BothParasHaveBt,The following statement contains a magic number: Assert.AreEqual(DummyBasicView.kFirstParaEng + DummyBasicView.kSecondParaEng.Substring(0' 5)'  				para1.Contents.Text);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,SplitBTs_MidSegment_BothParasHaveBt,The following statement contains a magic number: Assert.AreEqual(DummyBasicView.kSecondParaEng.Substring(5) + DummyBasicView.kSecondParaEng'  				para2.Contents.Text);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_BothParasHaveBt,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_BothParasHaveBt,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ich' 0' 0' true' 1' null'  				true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_FirstParaHasNoBt,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_FirstParaHasNoBt,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ich' 0' 0' true' 1' null'  				true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_SecondParaHasNoBt,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_SecondParaHasNoBt,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ich' 0' 0' true' 1' null'  				true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_BothParasHaveBtMultiWs,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_BothParasHaveBtMultiWs,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ich' 0' 0' true' 1' null'  				true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_FirstParaHasSingleWsBtSecondHasMultiWs,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_FirstParaHasSingleWsBtSecondHasMultiWs,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ich' 0' 0' true' 1' null'  				true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_SecondParaHasSingleWsBtFirstHasMultiWs,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_SecondParaHasSingleWsBtFirstHasMultiWs,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ich' 0' 0' true' 1' null'  				true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,NoMergeBTsWhenSecondParaDeleted_AnchorInSurvivingPara,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,NoMergeBTsWhenSecondParaDeleted_AnchorInSurvivingPara,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ichEndPara1'  				ichEndPara2' 0' true' 1' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,NoMergeBTsWhenSecondParaDeleted_AnchorInDyingPara,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,NoMergeBTsWhenSecondParaDeleted_AnchorInDyingPara,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ichEndPara2'  				ichEndPara1' 0' true' 0' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,PreserveSecondBTWhenFirstParaDeleted,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,PreserveSecondBTWhenFirstParaDeleted,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' 0' 0' 0'  				true' 1' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_BothParasHaveBt_IP,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_BothParasHaveBt_IP,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' 0' 0' 0'  				true' -1' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_ThreeParasWithBt,The following statement contains a magic number: rootBox.PropChanged(text1.Hvo' StTextTags.kflidParagraphs' 1' 2' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_ThreeParasWithBt,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_ThreeParasWithBt,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ich' 0' 0' true' 2' null'  				true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_ThreeParasWithBt,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ich' 0' 0' true' 2' null'  				true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_ThreeParas_FromMiddleOfPara1ToMiddleOfPara2,The following statement contains a magic number: rootBox.PropChanged(text1.Hvo' StTextTags.kflidParagraphs' 1' 2' 0);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_ThreeParas_FromMiddleOfPara1ToMiddleOfPara2,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_ThreeParas_FromMiddleOfPara1ToMiddleOfPara2,The following statement contains a magic number: int ichAnchor = DummyBasicView.kFirstParaEng.Length - 2;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_ThreeParas_FromMiddleOfPara1ToMiddleOfPara2,The following statement contains a magic number: int ichEnd = 2;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_ThreeParas_FromMiddleOfPara1ToMiddleOfPara2,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ichAnchor' ichEnd' 0' true' 2' null'  				true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_ThreeParas_FromMiddleOfPara1ToMiddleOfPara2,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ichAnchor' ichEnd' 0' true' 2' null'  				true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_UseDeleteKey,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_UseDeleteKey,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ich' 0' 0' true' 1' null'  				true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_FirstParaHasNoBt_DelKey,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_FirstParaHasNoBt_DelKey,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ich' 0' 0' true' 1' null'  				true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_FromMiddleOfPara1ToMiddleOfPara2_aKey,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_FromMiddleOfPara1ToMiddleOfPara2_aKey,The following statement contains a magic number: int ichAnchor = DummyBasicView.kFirstParaEng.Length - 2;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_FromMiddleOfPara1ToMiddleOfPara2_aKey,The following statement contains a magic number: int ichEnd = 2;
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,MergeBTsWhenParasMerge_FromMiddleOfPara1ToMiddleOfPara2_aKey,The following statement contains a magic number: IVwSelection sel = rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' ichAnchor' ichEnd' 0' true' 1' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,LoseFocusToNonView_RangeSel,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,LoseFocusToNonView_RangeSel,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' 0' 3' 0' true' 0' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,LoseFocusToNonView_RangeSel,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' 0' 3' 0' true' 0' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,LoseFocusToView_RangeSel,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,LoseFocusToView_RangeSel,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' 0' 3' 0' true' 0' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,LoseFocusToView_RangeSel,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' 0' 3' 0' true' 0' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,LoseFocusToView_RangeSel_FlagSet,The following statement contains a magic number: SelLevInfo[] levelInfo = new SelLevInfo[2];
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,LoseFocusToView_RangeSel_FlagSet,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' 0' 3' 0' true' 0' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,MoreRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\MoreRootSiteTests.cs,LoseFocusToView_RangeSel_FlagSet,The following statement contains a magic number: rootBox.MakeTextSelection(0' 2' levelInfo'  				StTxtParaTags.kflidContents' 0' 0' 3' 0' true' 0' null' true);
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy,The following statement contains a magic number: m_pSettings.FromPage = 5;
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy,The following statement contains a magic number: m_pSettings.ToPage = 7;
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy,The following statement contains a magic number: DummyPrintRootSite pRootSite = new DummyPrintRootSite(10' m_pSettings);
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy,The following statement contains a magic number: Assert.AreEqual(5' pRootSite.NextPageToPrint);
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy,The following statement contains a magic number: Assert.AreEqual(6' pRootSite.NextPageToPrint);
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy,The following statement contains a magic number: Assert.AreEqual(7' pRootSite.NextPageToPrint);
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy_InvalidRange1,The following statement contains a magic number: m_pSettings.FromPage = 3;
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy_InvalidRange1,The following statement contains a magic number: m_pSettings.ToPage = 7;
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy_InvalidRange1,The following statement contains a magic number: DummyPrintRootSite pRootSite = new DummyPrintRootSite(5' m_pSettings);
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy_InvalidRange1,The following statement contains a magic number: Assert.AreEqual(3' pRootSite.NextPageToPrint);
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy_InvalidRange1,The following statement contains a magic number: Assert.AreEqual(4' pRootSite.NextPageToPrint);
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy_InvalidRange1,The following statement contains a magic number: Assert.AreEqual(5' pRootSite.NextPageToPrint);
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy_InvalidRange2,The following statement contains a magic number: m_pSettings.FromPage = 7;
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy_InvalidRange2,The following statement contains a magic number: m_pSettings.ToPage = 9;
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_OneCopy_InvalidRange2,The following statement contains a magic number: DummyPrintRootSite pRootSite = new DummyPrintRootSite(5' m_pSettings);
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_MultipleCopy,The following statement contains a magic number: m_pSettings.FromPage = 2;
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_MultipleCopy,The following statement contains a magic number: m_pSettings.ToPage = 4;
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_MultipleCopy,The following statement contains a magic number: m_pSettings.Copies = 3;
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_MultipleCopy,The following statement contains a magic number: DummyPrintRootSite pRootSite = new DummyPrintRootSite(10' m_pSettings);
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_MultipleCopy,The following statement contains a magic number: int[] ExpectedPages = new int []{2' 3' 4};
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_MultipleCopy,The following statement contains a magic number: int[] ExpectedPages = new int []{2' 3' 4};
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,CollationTest_MultipleCopy,The following statement contains a magic number: int[] ExpectedPages = new int []{2' 3' 4};
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,NonCollationTest_MultipleCopy,The following statement contains a magic number: m_pSettings.FromPage = 2;
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,NonCollationTest_MultipleCopy,The following statement contains a magic number: m_pSettings.ToPage = 4;
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,NonCollationTest_MultipleCopy,The following statement contains a magic number: m_pSettings.Copies = 3;
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,NonCollationTest_MultipleCopy,The following statement contains a magic number: int[] ExpectedPages = new int []{2' 2' 2' 3' 3' 3' 4' 4' 4};
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,NonCollationTest_MultipleCopy,The following statement contains a magic number: int[] ExpectedPages = new int []{2' 2' 2' 3' 3' 3' 4' 4' 4};
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,NonCollationTest_MultipleCopy,The following statement contains a magic number: int[] ExpectedPages = new int []{2' 2' 2' 3' 3' 3' 4' 4' 4};
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,NonCollationTest_MultipleCopy,The following statement contains a magic number: int[] ExpectedPages = new int []{2' 2' 2' 3' 3' 3' 4' 4' 4};
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,NonCollationTest_MultipleCopy,The following statement contains a magic number: int[] ExpectedPages = new int []{2' 2' 2' 3' 3' 3' 4' 4' 4};
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,NonCollationTest_MultipleCopy,The following statement contains a magic number: int[] ExpectedPages = new int []{2' 2' 2' 3' 3' 3' 4' 4' 4};
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,NonCollationTest_MultipleCopy,The following statement contains a magic number: int[] ExpectedPages = new int []{2' 2' 2' 3' 3' 3' 4' 4' 4};
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,NonCollationTest_MultipleCopy,The following statement contains a magic number: int[] ExpectedPages = new int []{2' 2' 2' 3' 3' 3' 4' 4' 4};
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,NonCollationTest_MultipleCopy,The following statement contains a magic number: int[] ExpectedPages = new int []{2' 2' 2' 3' 3' 3' 4' 4' 4};
Magic Number,SIL.FieldWorks.Common.RootSites,PrintRootSiteTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\PrintRootSiteTests.cs,NonCollationTest_MultipleCopy,The following statement contains a magic number: DummyPrintRootSite pRootSite = new DummyPrintRootSite(10' m_pSettings);
Magic Number,SIL.FieldWorks.Common.RootSites,RootsiteDummyViewTestsBase,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootsiteBasicViewTestsBase.cs,ShowForm,The following statement contains a magic number: m_basicView.Width = 300;
Magic Number,SIL.FieldWorks.Common.RootSites,RootsiteDummyViewTestsBase,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootsiteBasicViewTestsBase.cs,ShowForm,The following statement contains a magic number: m_basicView.Height = 307-25;
Magic Number,SIL.FieldWorks.Common.RootSites,RootsiteDummyViewTestsBase,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootsiteBasicViewTestsBase.cs,ShowForm,The following statement contains a magic number: m_basicView.Height = 307-25;
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: rootBox.Expect(r => r.Height).Return(1100);
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: rootBox.Expect(r => r.Width).Return(100);
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: PrepareView(stylePane' 50' 300' (IVwRootBox)rootBox);
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: PrepareView(stylePane' 50' 300' (IVwRootBox)rootBox);
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: PrepareView(draftPane' 150' 300' (IVwRootBox)rootBox);
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: PrepareView(draftPane' 150' 300' (IVwRootBox)rootBox);
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: PrepareView(btPane' 150' 300' (IVwRootBox)rootBox);
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: PrepareView(btPane' 150' 300' (IVwRootBox)rootBox);
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: btPane.ScrollMinSize = new Size(100' 1000);
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: btPane.ScrollMinSize = new Size(100' 1000);
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: btPane.ScrollPosition = new Point(0' 700);
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: btPane.AdjustScrollRange(null' 0' 0' 100' 500);
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: btPane.AdjustScrollRange(null' 0' 0' 100' 500);
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: Assert.AreEqual(1108' btPane.ScrollMinSize.Height' "Wrong ScrollMinSize");
Magic Number,SIL.FieldWorks.Common.RootSites,RootSiteGroupTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\RootSiteGroupTests.cs,AdjustScrollRange,The following statement contains a magic number: Assert.AreEqual(800' -btPane.ScrollPosition.Y' "Wrong scroll position");
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,FixtureSetup,The following statement contains a magic number: NonUndoableUnitOfWorkHelper.Do(m_actionHandler' () =>  			{  				Cache.ServiceLocator.WritingSystems.VernacularWritingSystems.Add(french);  				Cache.ServiceLocator.WritingSystems.CurrentVernacularWritingSystems.Add(french);    				// The test want two books.  				IScrBook gen = AddBookToMockedScripture(1' "GEN");  				AddTitleToMockedBook(gen' "This is Genesis");  				IScrBook exo = AddBookToMockedScripture(2' "EXO");  				AddTitleToMockedBook(exo' "This is Exodus");  			});
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,GetFootnoteMarkerFromGuid,The following statement contains a magic number: Assert.AreEqual(2' props.IntPropCount);
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,SpaceAfterFootnoteMarker,The following statement contains a magic number: selHelper.IchEnd = 5;
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,SpaceAfterFootnoteMarker,The following statement contains a magic number: SelLevInfo[] selLevInfo = new SelLevInfo[3];
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,SpaceAfterFootnoteMarker,The following statement contains a magic number: Assert.AreEqual(4' selHelper.GetNumberOfLevels(SelectionHelper.SelLimitType.End));
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,SpaceAfterFootnoteMarker,The following statement contains a magic number: Array.Copy(selHelper.GetLevelInfo(SelectionHelper.SelLimitType.End)' 1' selLevInfo' 0' 3);
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,SpaceAfterFootnoteMarker,The following statement contains a magic number: Assert.AreEqual("a "' tss.Text.Substring(0' 2));
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,SpaceAfterFootnoteMarker,The following statement contains a magic number: Assert.IsTrue(cttp >= 2);
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,ReadOnlySpaceAfterFootnoteMarker,The following statement contains a magic number: selHelper.IchEnd = 5;
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,ReadOnlySpaceAfterFootnoteMarker,The following statement contains a magic number: SelLevInfo[] selLevInfo = new SelLevInfo[3];
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,ReadOnlySpaceAfterFootnoteMarker,The following statement contains a magic number: Assert.AreEqual(4' selHelper.GetNumberOfLevels(SelectionHelper.SelLimitType.End));
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,ReadOnlySpaceAfterFootnoteMarker,The following statement contains a magic number: Array.Copy(selHelper.GetLevelInfo(SelectionHelper.SelLimitType.End)' 1' selLevInfo' 0' 3);
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,ReadOnlySpaceAfterFootnoteMarker,The following statement contains a magic number: Assert.AreEqual("a "' tss.Text.Substring(0' 2));
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,ReadOnlySpaceAfterFootnoteMarker,The following statement contains a magic number: Assert.IsTrue(cttp >= 3);
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,ReadOnlySpaceAfterFootnoteMarker,The following statement contains a magic number: Assert.IsTrue(SelectionHelper.IsEditable(vttp[2]' vvps[2])'  						"Footnote text is read-only");
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,ReadOnlySpaceAfterFootnoteMarker,The following statement contains a magic number: Assert.IsTrue(SelectionHelper.IsEditable(vttp[2]' vvps[2])'  						"Footnote text is read-only");
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,ReadOnlySpaceAfterFootnoteMarker,The following statement contains a magic number: Assert.IsTrue(SelectionHelper.IsEditable(vttp[3]' vvps[3])'  						"Footnote text is read-only");
Magic Number,SIL.FieldWorks.Common.RootSites,StVcTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,ReadOnlySpaceAfterFootnoteMarker,The following statement contains a magic number: Assert.IsTrue(SelectionHelper.IsEditable(vttp[3]' vvps[3])'  						"Footnote text is read-only");
Magic Number,SIL.FieldWorks.Common.RootSites,DummyFootnoteVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\StVcTests.cs,EstimateHeight,The following statement contains a magic number: switch ((FootnoteFrags)frag)  				{  					default:  						return 400;  				}
Magic Number,SIL.FieldWorks.Common.RootSites,UndoTaskHelperTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\UndoTaskHelperTests.cs,BeginAndEndUndoTask,The following statement contains a magic number: IScrBook book = Cache.ServiceLocator.GetInstance<IScrBookFactory>().Create(6);
Magic Number,SIL.FieldWorks.Common.RootSites,UndoTaskHelperTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\Common\RootSite\RootSiteTests\UndoTaskHelperTests.cs,BeginAndEndUndoTask,The following statement contains a magic number: book = Cache.ServiceLocator.GetInstance<IScrBookFactory>().Create(7);
