Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.Discourse,AdvancedMTDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\AdvancedMTDialog.cs,InitializeComponent,The method has 113 lines of code.
Long Method,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,Display,The method has 111 lines of code.
Complex Method,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,LoadFormatProps,Cyclomatic complexity of the method is 13
Complex Method,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,MakeTableAndRowWithStdWidths,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,SetRoot,Cyclomatic complexity of the method is 14
Complex Method,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,NextUnchartedInput,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,GetWordGroupCellsBorderingChOrph,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,FindWhereToAddWords,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,FindWhereToAddChOrph,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MakeCellContextMenu,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Discourse,MergeCellContentsMethod,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,Run,Cyclomatic complexity of the method is 13
Long Parameter List,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,AddIntPropPic,The method has 5 parameters. Parameters: tag' _vc' frag' nMin' nMax
Long Parameter List,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,OpenTable,The method has 9 parameters. Parameters: cCols' vlWidth' mpBorder' vwalign' frmpos' vwrule' mpSpacing' mpPadding' fSelectOneCol
Long Parameter List,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,AddPictureWithCaption,The method has 8 parameters. Parameters: _pict' tag' _ttpCaption' hvoCmFile' ws' dxmpWidth' dympHeight' _vwvc
Long Parameter List,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,FindWhereToAddChOrph,The method has 5 parameters. Parameters: curCell' iChOrphPara' beginChOrphOffset' whereToInsert' existingWordGroup
Long Parameter List,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MakeMoveItems,The method has 5 parameters. Parameters: srcCell' menu' forward' backward' mainLabel
Long Parameter List,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MakePreposedOrPostPosedMenuItem,The method has 6 parameters. Parameters: menu' srcCell' icolStart' icolLim' text' fMarkerPresent
Long Parameter List,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,ReportWarningAndUpdateCountsRemovingCellPart,The method has 5 parameters. Parameters: row' part' fReported' index' count
Long Parameter List,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MakePlItem,The method has 5 parameters. Parameters: clickHandler' cell' poss' markerRefs' format
Long Parameter List,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,ChangeRow,The method has 5 parameters. Parameters: partsToMove' rowSrc' rowDst' srcIndex' dstIndex
Long Parameter List,SIL.FieldWorks.Discourse,MakeMovedTextMethod,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MakeMovedTextMethod,The method has 5 parameters. Parameters: logic' movedTextCell' markerCell' begPoint' endPoint
Long Parameter List,SIL.FieldWorks.Discourse,DiscourseExportDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DiscourseExportDialog,The method has 5 parameters. Parameters: mediator' propertyTable' hvoRoot' vc' wsLineNumber
Long Parameter List,SIL.FieldWorks.Discourse,DiscourseExporter,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,DiscourseExporter,The method has 5 parameters. Parameters: cache' writer' hvoRoot' vc' wsLineNumber
Long Parameter List,SIL.FieldWorks.Discourse,DiscourseExporter,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,WriteStringProp,The method has 5 parameters. Parameters: tag' elementTag' alt' extraAttr' extraAttrVal
Long Parameter List,SIL.FieldWorks.Discourse,DiscourseExporter,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,WriteStringVal,The method has 5 parameters. Parameters: elementTag' ws' tss' extraAttr' extraAttrVal
Long Parameter List,SIL.FieldWorks.Discourse,InterlinRibbonDecorator,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\InterlinRibbonDecorator.cs,Replace,The method has 6 parameters. Parameters: hvoObj' tag' ihvoMin' ihvoLim' rghvo' chvo
Long Parameter List,SIL.FieldWorks.Discourse,MaxStringWidthForChartColumn,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\MaxStringWidthForChartColumn.cs,MaxStringWidthForChartColumn,The method has 6 parameters. Parameters: vc' stylesheet' sda' hvoRoot' graphics' icolumn
Long Identifier,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,,The length of the parameter m_fIsAnalysisWsGraphiteEnabled is 30.
Long Statement,SIL.FieldWorks.Discourse,AdvancedMTDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\AdvancedMTDialog.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AdvancedMTDialog)); " is 136.
Long Statement,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,LoadFormatProps,The length of the statement  "			var path = Path.Combine(FwDirectoryFinder.CodeDirectory' @"Language Explorer/Configuration/ConstituentChartStyleInfo.xml"); " is 123.
Long Statement,SIL.FieldWorks.Discourse,MakeCellsMethod,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ProcessCurrentCellPart,The length of the statement  "				//Debug.Fail(string.Format("Cell part : {0} Chart AllColumns length is: {1} ihvoNewCol is: {2}"' cellPart.Guid' m_chart.AllColumns.Length' ihvoNewCol)); " is 152.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,BuildBottomStuffUI,The length of the statement  "			m_buttonRow = new Panel { Height = new Button().Height' Dock = DockStyle.Top' BackColor = Color.FromKnownColor(KnownColor.ControlLight) }; " is 138.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,GetColumnWidths,The length of the statement  "			if (m_headerMainCols != null && m_headerMainCols.Columns.Count == m_allColumns.Length + ConstituentChartLogic.NumberOfExtraColumns) " is 131.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,SetRoot,The length of the statement  "				NonUndoableUnitOfWorkHelper.Do(m_cache.ActionHandlerAccessor' () => { m_template = m_cache.LangProject.GetDefaultChartTemplate(); }); " is 133.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,CreateChartInNonUndoableUOW,The length of the statement  "			NonUndoableUnitOfWorkHelper.Do(m_cache.ActionHandlerAccessor' () => { m_chart = m_serviceLocator.GetInstance<IDsConstChartFactory>().Create(m_cache.LangProject.DiscourseDataOA' RootStText' m_cache.LangProject.GetDefaultChartTemplate()); }); " is 240.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,DetectAndReportTemplateProblem,The length of the statement  "				MessageBox.Show(this' DiscourseStrings.ksNoColumns' DiscourseStrings.ksWarning' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 126.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,DetectAndReportTemplateProblem,The length of the statement  "				MessageBox.Show(this' DiscourseStrings.ksOnlyOneTemplateAllowed' DiscourseStrings.ksWarning' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 139.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,FindAndCleanUpMyChart,The length of the statement  "			foreach (var chart in m_cache.LangProject.DiscourseDataOA.ChartsOC.Cast<IDsConstChart>().Where(chart => chart.BasedOnRA != null && chart.BasedOnRA.Hvo == hvoStText)) " is 165.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,btnContextMenu_Click,The length of the statement  "			m_contextMenuStrip.Closed += contextMenuStrip_Closed; // dispose when no longer needed (but not sooner! needed after this returns) " is 130.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,GetLineChoices,The length of the statement  "				lineChoices = InterlinLineChoices.Restore(persist' m_cache.ServiceLocator.GetInstance<ILgWritingSystemFactory>()' m_cache.LangProject' m_cache.DefaultVernWs' m_cache.DefaultAnalWs); " is 181.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,itemAdvanced_Click,The length of the statement  "			// Maybe I need to make a temporary WordGroup that holds all the wordforms in the cell for dialog ribbon display purposes. " is 122.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MoveWordBack,The length of the statement  "				(listOfPartsInSrc.Count == ipartInCell + 1 || FindFirstWordGroup(listOfPartsInSrc.GetRange(ipartInCell + 1' listOfPartsInSrc.Count - 1)) == null)) " is 146.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MoveWordForward,The length of the statement  "				(listOfPartsInSrc.Count == 1 || (ipartInCell > 0 && FindLastWordGroup(listOfPartsInSrc.GetRange(0' ipartInCell - 1)) == null))) " is 127.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExportDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The length of the statement  "						//    using (TempFileCollection tempFiles = new TempFileCollection()) // wanted only to get the default temp file dir and name " is 126.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExportDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The length of the statement  "						//        styleFileTransform = XmlUtils.GetOptionalAttributeValue(implementation' "styleTransform"' styleFileTransform); " is 120.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExportDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The length of the statement  "						//        contentFileTransform = XmlUtils.GetOptionalAttributeValue(implementation' "contentTransform"' contentFileTransform); " is 126.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExportDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The length of the statement  "						//    exporter.PostProcess(rootDir + @"\Language Explorer\Export Templates\Interlinear\" + contentFileTransform' outPath' 1); " is 125.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExportDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The length of the statement  "						//            WriteFileToZipUncompressed("mimetype"' rootDir + @"\Language Explorer\Export Templates\Interlinear\mimetype"' zipFile); " is 133.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExportDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The length of the statement  "						//            WriteFileToZipUncompressed("META-INF/manifest.xml"' rootDir + @"\Language Explorer\Export Templates\Interlinear\manifest.xml"' zipFile); " is 150.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExporter,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,OpenTableCell,The length of the statement  "			if (m_titleStage == TitleStage.ktsStart && m_frags.Count > 0 && m_frags[m_frags.Count - 1] == ConstChartVc.kfragColumnGroupHeader) " is 130.
Long Statement,SIL.FieldWorks.Discourse,SelectClausesDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\SelectClausesDialog.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SelectClausesDialog)); " is 139.
Complex Conditional,SIL.FieldWorks.Discourse,ConstChartBody,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,GetCellInfo,The conditional expression  "m_hvoChart == 0 || AllColumns == null || e.Y > RootBox.Height || e.X > RootBox.Width"  is complex.
Complex Conditional,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,OnSizeChanged,The conditional expression  "m_mediator != null && m_columnWidths != null && m_chart != null && !HasPersistantColWidths"  is complex.
Complex Conditional,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MoveWordForward,The conditional expression  "srcWordGroup.GetOccurrences().Count == 1 &&  				(listOfPartsInSrc.Count == 1 || (ipartInCell > 0 && FindLastWordGroup(listOfPartsInSrc.GetRange(0' ipartInCell - 1)) == null))"  is complex.
Complex Conditional,SIL.FieldWorks.Discourse,DiscourseExporter,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,AddString,The conditional expression  "text == "\x200F" || text == "\x200E" || string.IsNullOrEmpty(text) || text == " ""  is complex.
Empty Catch Block,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,CleanupInvalidChartCells,The method has an empty catch block.
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,OnHandleCreated,The following statement contains a magic number: m_hoverButton.Height = pullDown.Height + 4;
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,OnHandleCreated,The following statement contains a magic number: m_hoverButton.Width = pullDown.Width + 4;
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,CalculateHoverButtonHorizPosition,The following statement contains a magic number: const int margin = 4;
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,SetColWidths,The following statement contains a magic number: lengths[0].nVal -= 1000;
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,OnMouseDown,The following statement contains a magic number: if (System.DateTime.Now.Ticks - m_ticksWhenContextMenuClosed > 50000) // 5ms!  			{  				// Consider bringing up another menu only if we weren't already showing one.  				// The above time test seems to be the only way to find out whether this click closed the last one.  				ChartLocation cell;  				int irow;  				if (GetCellInfo(e' out cell' out irow))  				{  					m_cellContextMenu = m_logic.MakeCellContextMenu(cell);  					m_cellContextMenu.Closed += m_cellContextMenu_Closed;  					m_cellContextMenu.Show(this' e.X' e.Y);  					return; // Don't call the base method' we don't want to make a selection.  				}  				if (cell != null && cell.IsValidLocation && cell.ColIndex >= AllColumns.Length)  				{  					// Click in Notes...make sure it has one.  					if (cell.Row.Notes == null || cell.Row.Notes.Length == 0)  					{  						NonUndoableUnitOfWorkHelper.Do(Cache.ActionHandlerAccessor' () =>  							{  								cell.Row.Notes =  									TsStringUtils.EmptyString(Cache.DefaultAnalWs);  							});  					}  				}  			}
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,GetCellInfo,The following statement contains a magic number: using (new HoldGraphics(this))  			{  				pt = PixelToView(new Point(e.X' e.Y));  				GetCoordRects(out rcSrcRoot' out rcDstRoot);  				var sel = RootBox.MakeSelAt(pt.X' pt.Y' rcSrcRoot' rcDstRoot' false);  				if (sel == null)  					return false;  				var info = new TextSelInfo(sel);  				if (info.Levels(false) < 2)  					return false;  				irow = GetIndexOfTopLevelObject(info' false);  				var chart = Cache.ServiceLocator.GetInstance<IDsConstChartRepository>().GetObject(m_hvoChart);  				if (irow < 0 || chart.RowsOS.Count <= irow)  					return false;  				var icol = m_logic.GetColumnFromPosition(e.X' m_chart.ColumnPositions) - 1;  				if (-1 < icol && icol < AllColumns.Length && e.Clicks > 0)  					icol = LogicalFromDisplay(icol); // if this is just a mouse move' use 'display' column  				clickedCell = new ChartLocation(chart.RowsOS[irow]' icol);  				// return true if we clicked on a valid template column (other than notes)  				// return false if we clicked on an 'other' column' like notes or row number?  				return -1 < icol && icol < AllColumns.Length;  			}
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,AdjustPrintDialog,The following statement contains a magic number: dlg.Document.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50' 50' 50' 50);
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,AdjustPrintDialog,The following statement contains a magic number: dlg.Document.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50' 50' 50' 50);
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,AdjustPrintDialog,The following statement contains a magic number: dlg.Document.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50' 50' 50' 50);
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,AdjustPrintDialog,The following statement contains a magic number: dlg.Document.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50' 50' 50' 50);
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,LoadFormatProps,The following statement contains a magic number: foreach (XmlNode item in doc.DocumentElement.ChildNodes)  			{  				if (item is XmlComment)  					continue;  				ITsPropsBldr bldr = TsStringUtils.MakePropsBldr();  				var color = XmlUtils.GetOptionalAttributeValue(item' "color"' null);  				if (color != null)  					bldr.SetIntPropValues((int)FwTextPropType.ktptForeColor' (int)FwTextPropVar.ktpvDefault'  						ColorVal(color.Trim()));  				var underlinecolor = XmlUtils.GetOptionalAttributeValue(item' "underlinecolor"' null);  				if (underlinecolor != null)  					bldr.SetIntPropValues((int)FwTextPropType.ktptUnderColor' (int)FwTextPropVar.ktpvDefault'  						ColorVal(underlinecolor.Trim()));  				var underline = XmlUtils.GetOptionalAttributeValue(item' "underline"' null);  				if (underline != null)  					bldr.SetIntPropValues((int)FwTextPropType.ktptUnderline' (int)FwTextPropVar.ktpvEnum'  						InterpretUnderlineType(underline.Trim()));  				var fontsize = XmlUtils.GetOptionalAttributeValue(item' "fontsize"' null);  				if (fontsize != null)  				{  					var sval = fontsize.Trim();  					if (sval[sval.Length - 1] == '%')  					{  						sval = sval.Substring(0' sval.Length - 1); // strip %  						var percent = Convert.ToInt32(sval);  						bldr.SetIntPropValues((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvRelative' percent * 100);  					}  					else  					{  						bldr.SetIntPropValues((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint'  							Convert.ToInt32(sval));  					}  				}  				var bold = XmlUtils.GetOptionalAttributeValue(item' "bold"' null);  				if (bold == "true")  				{  					bldr.SetIntPropValues((int)FwTextPropType.ktptBold' (int)FwTextPropVar.ktpvEnum'  						(int)FwTextToggleVal.kttvInvert);  				}  				var italic = XmlUtils.GetOptionalAttributeValue(item' "italic"' null);  				if (italic == "true")  				{  					bldr.SetIntPropValues((int)FwTextPropType.ktptItalic' (int)FwTextPropVar.ktpvEnum'  						(int)FwTextToggleVal.kttvInvert);  				}  				var brackets = XmlUtils.GetOptionalAttributeValue(item' "brackets"' null);  				if (brackets != null && brackets.Trim().Length == 2)  				{  					m_brackets[item.Name] = brackets.Trim();  				}  				m_formatProps[item.Name] = bldr.GetTextProps();  			}
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,LoadFormatProps,The following statement contains a magic number: foreach (XmlNode item in doc.DocumentElement.ChildNodes)  			{  				if (item is XmlComment)  					continue;  				ITsPropsBldr bldr = TsStringUtils.MakePropsBldr();  				var color = XmlUtils.GetOptionalAttributeValue(item' "color"' null);  				if (color != null)  					bldr.SetIntPropValues((int)FwTextPropType.ktptForeColor' (int)FwTextPropVar.ktpvDefault'  						ColorVal(color.Trim()));  				var underlinecolor = XmlUtils.GetOptionalAttributeValue(item' "underlinecolor"' null);  				if (underlinecolor != null)  					bldr.SetIntPropValues((int)FwTextPropType.ktptUnderColor' (int)FwTextPropVar.ktpvDefault'  						ColorVal(underlinecolor.Trim()));  				var underline = XmlUtils.GetOptionalAttributeValue(item' "underline"' null);  				if (underline != null)  					bldr.SetIntPropValues((int)FwTextPropType.ktptUnderline' (int)FwTextPropVar.ktpvEnum'  						InterpretUnderlineType(underline.Trim()));  				var fontsize = XmlUtils.GetOptionalAttributeValue(item' "fontsize"' null);  				if (fontsize != null)  				{  					var sval = fontsize.Trim();  					if (sval[sval.Length - 1] == '%')  					{  						sval = sval.Substring(0' sval.Length - 1); // strip %  						var percent = Convert.ToInt32(sval);  						bldr.SetIntPropValues((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvRelative' percent * 100);  					}  					else  					{  						bldr.SetIntPropValues((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint'  							Convert.ToInt32(sval));  					}  				}  				var bold = XmlUtils.GetOptionalAttributeValue(item' "bold"' null);  				if (bold == "true")  				{  					bldr.SetIntPropValues((int)FwTextPropType.ktptBold' (int)FwTextPropVar.ktpvEnum'  						(int)FwTextToggleVal.kttvInvert);  				}  				var italic = XmlUtils.GetOptionalAttributeValue(item' "italic"' null);  				if (italic == "true")  				{  					bldr.SetIntPropValues((int)FwTextPropType.ktptItalic' (int)FwTextPropVar.ktpvEnum'  						(int)FwTextToggleVal.kttvInvert);  				}  				var brackets = XmlUtils.GetOptionalAttributeValue(item' "brackets"' null);  				if (brackets != null && brackets.Trim().Length == 2)  				{  					m_brackets[item.Name] = brackets.Trim();  				}  				m_formatProps[item.Name] = bldr.GetTextProps();  			}
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ColorVal,The following statement contains a magic number: if (val[0] == '(')  			{  				int firstComma = val.IndexOf(''');  				int red = Convert.ToInt32(val.Substring(1' firstComma - 1));  				int secondComma = val.IndexOf('''' firstComma + 1);  				int green = Convert.ToInt32(val.Substring(firstComma + 1' secondComma - firstComma - 1));  				int blue = Convert.ToInt32(val.Substring(secondComma + 1' val.Length - secondComma - 2));  				return red + (blue * 256 + green) * 256;  			}
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ColorVal,The following statement contains a magic number: if (val[0] == '(')  			{  				int firstComma = val.IndexOf(''');  				int red = Convert.ToInt32(val.Substring(1' firstComma - 1));  				int secondComma = val.IndexOf('''' firstComma + 1);  				int green = Convert.ToInt32(val.Substring(firstComma + 1' secondComma - firstComma - 1));  				int blue = Convert.ToInt32(val.Substring(secondComma + 1' val.Length - secondComma - 2));  				return red + (blue * 256 + green) * 256;  			}
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ColorVal,The following statement contains a magic number: if (val[0] == '(')  			{  				int firstComma = val.IndexOf(''');  				int red = Convert.ToInt32(val.Substring(1' firstComma - 1));  				int secondComma = val.IndexOf('''' firstComma + 1);  				int green = Convert.ToInt32(val.Substring(firstComma + 1' secondComma - firstComma - 1));  				int blue = Convert.ToInt32(val.Substring(secondComma + 1' val.Length - secondComma - 2));  				return red + (blue * 256 + green) * 256;  			}
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ColorVal,The following statement contains a magic number: return col.R + (col.B * 256 + col.G) * 256;
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ColorVal,The following statement contains a magic number: return col.R + (col.B * 256 + col.G) * 256;
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,SetupAndOpenInnerPile,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing'  				(int)FwTextPropVar.ktpvMilliPoint' 5000);
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,SetupAndOpenInnerPile,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptMarginBottom'  				(int)FwTextPropVar.ktpvMilliPoint' 5000);
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,MakeTableAndRowWithStdWidths,The following statement contains a magic number: if (m_colWidths == null)  			{  				tableWidth.nVal = 10000; // 100%  				tableWidth.unit = VwUnit.kunPercent100;  			}  			else  			{  				tableWidth.nVal = 0;  				foreach (var w in m_colWidths)  					tableWidth.nVal += w.nVal;  				tableWidth.unit = VwUnit.kunPoint1000;  			}
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,MakeTableAndRowWithStdWidths,The following statement contains a magic number: vwenv.OpenTable(m_chart.AllColumns.Length + ConstituentChartLogic.NumberOfExtraColumns'  				tableWidth'  				1500' // borderWidth  				fRtL ? VwAlignment.kvaRight : VwAlignment.kvaLeft' // Handle RTL  				fpos'  				VwRule.kvrlNone'  				0' // cell spacing  				2000' // cell padding  				true);
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,MakeTableAndRowWithStdWidths,The following statement contains a magic number: vwenv.OpenTable(m_chart.AllColumns.Length + ConstituentChartLogic.NumberOfExtraColumns'  				tableWidth'  				1500' // borderWidth  				fRtL ? VwAlignment.kvaRight : VwAlignment.kvaLeft' // Handle RTL  				fpos'  				VwRule.kvrlNone'  				0' // cell spacing  				2000' // cell padding  				true);
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,MakeTableAndRowWithStdWidths,The following statement contains a magic number: if (!fHeader)  			{  				if (row.EndSentence)  				{  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderColor'  						(int)FwTextPropVar.ktpvDefault'  						(int)ColorUtil.ConvertColorToBGR(Color.Black));  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom'  						(int)FwTextPropVar.ktpvMilliPoint' 1000);  				}  				else  				{  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderColor'  						(int)FwTextPropVar.ktpvDefault'  						(int)ColorUtil.ConvertColorToBGR(Color.LightGray));  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom'  						(int)FwTextPropVar.ktpvMilliPoint' 500);  				}  			}
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,MakeTableAndRowWithStdWidths,The following statement contains a magic number: if (!fHeader)  			{  				if (row.EndSentence)  				{  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderColor'  						(int)FwTextPropVar.ktpvDefault'  						(int)ColorUtil.ConvertColorToBGR(Color.Black));  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom'  						(int)FwTextPropVar.ktpvMilliPoint' 1000);  				}  				else  				{  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderColor'  						(int)FwTextPropVar.ktpvDefault'  						(int)ColorUtil.ConvertColorToBGR(Color.LightGray));  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom'  						(int)FwTextPropVar.ktpvMilliPoint' 500);  				}  			}
Magic Number,SIL.FieldWorks.Discourse,MakeCellsMethod,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ProcessCurrentCellPart,The following statement contains a magic number: if (cellPart.MergesBefore)  			{  				// Make one cell covering all the columns not already occupied' up to and including the current one.  				// If in fact merging is occurring' align it in the appropriate cell.  				if (ccolsAvailableUpToCurrent > 1)  				{  					m_vwenv.set_IntProperty((int) FwTextPropType.ktptAlign' (int) FwTextPropVar.ktpvEnum'  											(int) FwTextAlign.ktalTrailing);  				}  				MakeDataCell(ccolsAvailableUpToCurrent);  				m_iLastColForWhichCellExists = ihvoNewCol;  			}  			else  			{  				// Not merging left' first fill in any extra' empty cells.  				MakeEmptyCells(ccolsAvailableUpToCurrent - 1);  				// We have created all cells before ihvoNewCol; need to decide how many to merge right.  				var ccolsNext = 1;  				if (cellPart.MergesAfter)  				{  					// Determine how MANY cells it can use. Find the next CellPart in a different column' if any.  					// It's column determines how many cells are empty. If it merges before' consider  					// giving it a column to merge.  					var iNextColumn = m_chart.AllColumns.Length; // by default can use all remaining columns.  					for (var icellPartNextCol = m_icellpart + 1; icellPartNextCol < m_cellparts.Length; icellPartNextCol++)  					{  						var hvoCellPartInNextCol = m_cellparts[icellPartNextCol];  						var nextColCellPart = m_partRepo.GetObject(hvoCellPartInNextCol);  						var hvoColContainingNextCellPart = nextColCellPart.ColumnRA.Hvo;  						if (hvoColContainingCellPart == hvoColContainingNextCellPart)  							continue;  						iNextColumn = GetIndexOfColumn(hvoColContainingNextCellPart);  						// But' if the next column merges before' and there are at least two empty column'  						// give it one of them.  						if (iNextColumn > ihvoNewCol + 2 && nextColCellPart.MergesBefore)  							iNextColumn--; // use one for the merge before.  						break; // found the first cell in a different column' stop.  					}  					ccolsNext = iNextColumn - ihvoNewCol;  				}  				MakeDataCell(ccolsNext);  				m_iLastColForWhichCellExists = ihvoNewCol + ccolsNext - 1;  			}
Magic Number,SIL.FieldWorks.Discourse,MakeCellsMethod,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,OpenRowNumberCell,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing'  								(int)FwTextPropVar.ktpvMilliPoint' 500);
Magic Number,SIL.FieldWorks.Discourse,MakeCellsMethod,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,OpenStandardCell,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing'  								(int)FwTextPropVar.ktpvMilliPoint'  								(fEndOfGroup ? 1500 : 500));
Magic Number,SIL.FieldWorks.Discourse,MakeCellsMethod,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,OpenStandardCell,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing'  								(int)FwTextPropVar.ktpvMilliPoint'  								(fEndOfGroup ? 1500 : 500));
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,RegurgitateIVwEnvCall,The following statement contains a magic number: switch (storedMethod.MethodType)  			{  				case DecoratorMethodTypes.AddObj:  					var hvo = (int)storedMethod.ParamArray[0];  					vc  = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int) storedMethod.ParamArray[2];  					m_vwEnv.AddObj(hvo' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjProp(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVec:  					tag = (int) storedMethod.ParamArray[0];  					vc = (IVwViewConstructor) storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVec(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVecItems:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVecItems(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddString:  					var tsStr = (ITsString)storedMethod.ParamArray[0];  					m_vwEnv.AddString(tsStr);  					break;  				case DecoratorMethodTypes.AddStringProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					m_vwEnv.AddStringProp(tag' vc);  					break;  				case DecoratorMethodTypes.CloseParagraph:  					m_vwEnv.CloseParagraph();  					break;  				case DecoratorMethodTypes.CloseTableCell:  					m_vwEnv.CloseTableCell();  					break;  				case DecoratorMethodTypes.NoteDependency:  					var _rghvo = (int[])storedMethod.ParamArray[0];  					var _rgtag = (int[])storedMethod.ParamArray[1];  					var chvo = (int) storedMethod.ParamArray[2];  					m_vwEnv.NoteDependency(_rghvo' _rgtag' chvo);  					break;  				case DecoratorMethodTypes.OpenParagraph:  					m_vwEnv.OpenParagraph();  					break;  				case DecoratorMethodTypes.OpenTableCell:  					var nRows = (int) storedMethod.ParamArray[0];  					var nCols = (int)storedMethod.ParamArray[1];  					m_vwEnv.OpenTableCell(nRows' nCols);  					break;  				case DecoratorMethodTypes.SetIntProperty:  					var tpt = (int)storedMethod.ParamArray[0];  					var tpv = (int)storedMethod.ParamArray[1];  					var nValue = (int)storedMethod.ParamArray[2];  					m_vwEnv.set_IntProperty(tpt' tpv' nValue);  					break;  				case DecoratorMethodTypes.PropsSetter:  					var value = (ITsTextProps) storedMethod.ParamArray[0];  					m_vwEnv.Props = value;  					break;  				default:  					Debug.Assert(false' "Unknown DecoratorMethodType!");  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,RegurgitateIVwEnvCall,The following statement contains a magic number: switch (storedMethod.MethodType)  			{  				case DecoratorMethodTypes.AddObj:  					var hvo = (int)storedMethod.ParamArray[0];  					vc  = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int) storedMethod.ParamArray[2];  					m_vwEnv.AddObj(hvo' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjProp(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVec:  					tag = (int) storedMethod.ParamArray[0];  					vc = (IVwViewConstructor) storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVec(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVecItems:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVecItems(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddString:  					var tsStr = (ITsString)storedMethod.ParamArray[0];  					m_vwEnv.AddString(tsStr);  					break;  				case DecoratorMethodTypes.AddStringProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					m_vwEnv.AddStringProp(tag' vc);  					break;  				case DecoratorMethodTypes.CloseParagraph:  					m_vwEnv.CloseParagraph();  					break;  				case DecoratorMethodTypes.CloseTableCell:  					m_vwEnv.CloseTableCell();  					break;  				case DecoratorMethodTypes.NoteDependency:  					var _rghvo = (int[])storedMethod.ParamArray[0];  					var _rgtag = (int[])storedMethod.ParamArray[1];  					var chvo = (int) storedMethod.ParamArray[2];  					m_vwEnv.NoteDependency(_rghvo' _rgtag' chvo);  					break;  				case DecoratorMethodTypes.OpenParagraph:  					m_vwEnv.OpenParagraph();  					break;  				case DecoratorMethodTypes.OpenTableCell:  					var nRows = (int) storedMethod.ParamArray[0];  					var nCols = (int)storedMethod.ParamArray[1];  					m_vwEnv.OpenTableCell(nRows' nCols);  					break;  				case DecoratorMethodTypes.SetIntProperty:  					var tpt = (int)storedMethod.ParamArray[0];  					var tpv = (int)storedMethod.ParamArray[1];  					var nValue = (int)storedMethod.ParamArray[2];  					m_vwEnv.set_IntProperty(tpt' tpv' nValue);  					break;  				case DecoratorMethodTypes.PropsSetter:  					var value = (ITsTextProps) storedMethod.ParamArray[0];  					m_vwEnv.Props = value;  					break;  				default:  					Debug.Assert(false' "Unknown DecoratorMethodType!");  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,RegurgitateIVwEnvCall,The following statement contains a magic number: switch (storedMethod.MethodType)  			{  				case DecoratorMethodTypes.AddObj:  					var hvo = (int)storedMethod.ParamArray[0];  					vc  = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int) storedMethod.ParamArray[2];  					m_vwEnv.AddObj(hvo' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjProp(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVec:  					tag = (int) storedMethod.ParamArray[0];  					vc = (IVwViewConstructor) storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVec(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVecItems:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVecItems(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddString:  					var tsStr = (ITsString)storedMethod.ParamArray[0];  					m_vwEnv.AddString(tsStr);  					break;  				case DecoratorMethodTypes.AddStringProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					m_vwEnv.AddStringProp(tag' vc);  					break;  				case DecoratorMethodTypes.CloseParagraph:  					m_vwEnv.CloseParagraph();  					break;  				case DecoratorMethodTypes.CloseTableCell:  					m_vwEnv.CloseTableCell();  					break;  				case DecoratorMethodTypes.NoteDependency:  					var _rghvo = (int[])storedMethod.ParamArray[0];  					var _rgtag = (int[])storedMethod.ParamArray[1];  					var chvo = (int) storedMethod.ParamArray[2];  					m_vwEnv.NoteDependency(_rghvo' _rgtag' chvo);  					break;  				case DecoratorMethodTypes.OpenParagraph:  					m_vwEnv.OpenParagraph();  					break;  				case DecoratorMethodTypes.OpenTableCell:  					var nRows = (int) storedMethod.ParamArray[0];  					var nCols = (int)storedMethod.ParamArray[1];  					m_vwEnv.OpenTableCell(nRows' nCols);  					break;  				case DecoratorMethodTypes.SetIntProperty:  					var tpt = (int)storedMethod.ParamArray[0];  					var tpv = (int)storedMethod.ParamArray[1];  					var nValue = (int)storedMethod.ParamArray[2];  					m_vwEnv.set_IntProperty(tpt' tpv' nValue);  					break;  				case DecoratorMethodTypes.PropsSetter:  					var value = (ITsTextProps) storedMethod.ParamArray[0];  					m_vwEnv.Props = value;  					break;  				default:  					Debug.Assert(false' "Unknown DecoratorMethodType!");  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,RegurgitateIVwEnvCall,The following statement contains a magic number: switch (storedMethod.MethodType)  			{  				case DecoratorMethodTypes.AddObj:  					var hvo = (int)storedMethod.ParamArray[0];  					vc  = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int) storedMethod.ParamArray[2];  					m_vwEnv.AddObj(hvo' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjProp(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVec:  					tag = (int) storedMethod.ParamArray[0];  					vc = (IVwViewConstructor) storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVec(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVecItems:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVecItems(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddString:  					var tsStr = (ITsString)storedMethod.ParamArray[0];  					m_vwEnv.AddString(tsStr);  					break;  				case DecoratorMethodTypes.AddStringProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					m_vwEnv.AddStringProp(tag' vc);  					break;  				case DecoratorMethodTypes.CloseParagraph:  					m_vwEnv.CloseParagraph();  					break;  				case DecoratorMethodTypes.CloseTableCell:  					m_vwEnv.CloseTableCell();  					break;  				case DecoratorMethodTypes.NoteDependency:  					var _rghvo = (int[])storedMethod.ParamArray[0];  					var _rgtag = (int[])storedMethod.ParamArray[1];  					var chvo = (int) storedMethod.ParamArray[2];  					m_vwEnv.NoteDependency(_rghvo' _rgtag' chvo);  					break;  				case DecoratorMethodTypes.OpenParagraph:  					m_vwEnv.OpenParagraph();  					break;  				case DecoratorMethodTypes.OpenTableCell:  					var nRows = (int) storedMethod.ParamArray[0];  					var nCols = (int)storedMethod.ParamArray[1];  					m_vwEnv.OpenTableCell(nRows' nCols);  					break;  				case DecoratorMethodTypes.SetIntProperty:  					var tpt = (int)storedMethod.ParamArray[0];  					var tpv = (int)storedMethod.ParamArray[1];  					var nValue = (int)storedMethod.ParamArray[2];  					m_vwEnv.set_IntProperty(tpt' tpv' nValue);  					break;  				case DecoratorMethodTypes.PropsSetter:  					var value = (ITsTextProps) storedMethod.ParamArray[0];  					m_vwEnv.Props = value;  					break;  				default:  					Debug.Assert(false' "Unknown DecoratorMethodType!");  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,RegurgitateIVwEnvCall,The following statement contains a magic number: switch (storedMethod.MethodType)  			{  				case DecoratorMethodTypes.AddObj:  					var hvo = (int)storedMethod.ParamArray[0];  					vc  = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int) storedMethod.ParamArray[2];  					m_vwEnv.AddObj(hvo' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjProp(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVec:  					tag = (int) storedMethod.ParamArray[0];  					vc = (IVwViewConstructor) storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVec(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVecItems:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVecItems(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddString:  					var tsStr = (ITsString)storedMethod.ParamArray[0];  					m_vwEnv.AddString(tsStr);  					break;  				case DecoratorMethodTypes.AddStringProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					m_vwEnv.AddStringProp(tag' vc);  					break;  				case DecoratorMethodTypes.CloseParagraph:  					m_vwEnv.CloseParagraph();  					break;  				case DecoratorMethodTypes.CloseTableCell:  					m_vwEnv.CloseTableCell();  					break;  				case DecoratorMethodTypes.NoteDependency:  					var _rghvo = (int[])storedMethod.ParamArray[0];  					var _rgtag = (int[])storedMethod.ParamArray[1];  					var chvo = (int) storedMethod.ParamArray[2];  					m_vwEnv.NoteDependency(_rghvo' _rgtag' chvo);  					break;  				case DecoratorMethodTypes.OpenParagraph:  					m_vwEnv.OpenParagraph();  					break;  				case DecoratorMethodTypes.OpenTableCell:  					var nRows = (int) storedMethod.ParamArray[0];  					var nCols = (int)storedMethod.ParamArray[1];  					m_vwEnv.OpenTableCell(nRows' nCols);  					break;  				case DecoratorMethodTypes.SetIntProperty:  					var tpt = (int)storedMethod.ParamArray[0];  					var tpv = (int)storedMethod.ParamArray[1];  					var nValue = (int)storedMethod.ParamArray[2];  					m_vwEnv.set_IntProperty(tpt' tpv' nValue);  					break;  				case DecoratorMethodTypes.PropsSetter:  					var value = (ITsTextProps) storedMethod.ParamArray[0];  					m_vwEnv.Props = value;  					break;  				default:  					Debug.Assert(false' "Unknown DecoratorMethodType!");  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,RegurgitateIVwEnvCall,The following statement contains a magic number: switch (storedMethod.MethodType)  			{  				case DecoratorMethodTypes.AddObj:  					var hvo = (int)storedMethod.ParamArray[0];  					vc  = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int) storedMethod.ParamArray[2];  					m_vwEnv.AddObj(hvo' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjProp(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVec:  					tag = (int) storedMethod.ParamArray[0];  					vc = (IVwViewConstructor) storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVec(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVecItems:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVecItems(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddString:  					var tsStr = (ITsString)storedMethod.ParamArray[0];  					m_vwEnv.AddString(tsStr);  					break;  				case DecoratorMethodTypes.AddStringProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					m_vwEnv.AddStringProp(tag' vc);  					break;  				case DecoratorMethodTypes.CloseParagraph:  					m_vwEnv.CloseParagraph();  					break;  				case DecoratorMethodTypes.CloseTableCell:  					m_vwEnv.CloseTableCell();  					break;  				case DecoratorMethodTypes.NoteDependency:  					var _rghvo = (int[])storedMethod.ParamArray[0];  					var _rgtag = (int[])storedMethod.ParamArray[1];  					var chvo = (int) storedMethod.ParamArray[2];  					m_vwEnv.NoteDependency(_rghvo' _rgtag' chvo);  					break;  				case DecoratorMethodTypes.OpenParagraph:  					m_vwEnv.OpenParagraph();  					break;  				case DecoratorMethodTypes.OpenTableCell:  					var nRows = (int) storedMethod.ParamArray[0];  					var nCols = (int)storedMethod.ParamArray[1];  					m_vwEnv.OpenTableCell(nRows' nCols);  					break;  				case DecoratorMethodTypes.SetIntProperty:  					var tpt = (int)storedMethod.ParamArray[0];  					var tpv = (int)storedMethod.ParamArray[1];  					var nValue = (int)storedMethod.ParamArray[2];  					m_vwEnv.set_IntProperty(tpt' tpv' nValue);  					break;  				case DecoratorMethodTypes.PropsSetter:  					var value = (ITsTextProps) storedMethod.ParamArray[0];  					m_vwEnv.Props = value;  					break;  				default:  					Debug.Assert(false' "Unknown DecoratorMethodType!");  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,OpenParagraph,The following statement contains a magic number: if (!m_fInRegurgitation)  			{  				m_numOfCalls += 3;  				m_calledMethods.Add(new StoredMethod(DecoratorMethodTypes.SetIntProperty'  									new object[] {  										(int) FwTextPropType.ktptRightToLeft'  										(int) FwTextPropVar.ktpvEnum'  										(int) FwTextToggleVal.kttvForceOn  									}));  				m_calledMethods.Add(new StoredMethod(DecoratorMethodTypes.SetIntProperty'  									new object[] {  										(int) FwTextPropType.ktptAlign'  										(int) FwTextPropVar.ktpvEnum'  										(int) FwTextAlign.ktalRight  									}));  			}  			else // Only count OpenParagraph if regurgitating' since other calls will be counted separately.  				m_numOfCalls++;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,BuildTopStuffUI,The following statement contains a magic number: m_headerMainCols = new ChartHeaderView(this) { Dock = DockStyle.Top'  				View = View.Details' Height = 22' Scrollable = false'  				AllowColumnReorder = false };
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,BuildBottomStuffUI,The following statement contains a magic number: m_toolTip = new ToolTip { AutoPopDelay = 5000' InitialDelay = 1000' ReshowDelay = 500' ShowAlways = true };
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,BuildBottomStuffUI,The following statement contains a magic number: m_toolTip = new ToolTip { AutoPopDelay = 5000' InitialDelay = 1000' ReshowDelay = 500' ShowAlways = true };
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,BuildBottomStuffUI,The following statement contains a magic number: m_toolTip = new ToolTip { AutoPopDelay = 5000' InitialDelay = 1000' ReshowDelay = 500' ShowAlways = true };
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,BuildBottomStuffUI,The following statement contains a magic number: m_bottomStuff = new Panel { Height = 100' Dock = DockStyle.Bottom };
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,m_headerMainCols_ColumnAutoResize,The following statement contains a magic number: if (colWidth == 0)  				// no content in this column' resize to header  				m_headerMainCols.AutoResizeColumn(icolChanged' ColumnHeaderAutoResizeStyle.HeaderSize);  			else  			{  				colWidth += kColPadding;  				int cLimit = maxWidth / 2;  				// limit resize to half of available width  				changingColHdr.Width = (colWidth > cLimit) ? cLimit : colWidth;  			}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,MpToPixelX,The following statement contains a magic number: return (int)(dxmp * m_dxpInch / 72000);
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,PixelToMpX,The following statement contains a magic number: return (int)(dx * 72000 / m_dxpInch);
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ComputeButtonWidths,The following statement contains a magic number: int cPairs = m_buttonRow.Controls.Count / 2;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ComputeButtonWidths,The following statement contains a magic number: int widthBtnContextMenu = SIL.FieldWorks.Resources.ResourceHelper.ButtonMenuArrowIcon.Width + 10;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ComputeButtonWidths,The following statement contains a magic number: while (ipair < cPairs)  			{  				Control c = m_buttonRow.Controls[ipair * 2];  				// main button  				c.Left = m_columnPositions[ipair + 1] + 2;  				// skip number column' fine tune  				c.Width = m_columnPositions[ipair + 2] - m_columnPositions[ipair + 1] - widthBtnContextMenu;  				// Redo button name in case some won't (or now will!) fit on the button  				c.Text = GetBtnName(m_headerMainCols.Columns[ipair + 1].Text' c.Width - ((c as Button).Image.Width * 2));  				Control c2 = m_buttonRow.Controls[ipair * 2 + 1];  				// pull-down  				c2.Left = c.Right;  				c2.Width = widthBtnContextMenu;  				ipair++;  			}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ComputeButtonWidths,The following statement contains a magic number: while (ipair < cPairs)  			{  				Control c = m_buttonRow.Controls[ipair * 2];  				// main button  				c.Left = m_columnPositions[ipair + 1] + 2;  				// skip number column' fine tune  				c.Width = m_columnPositions[ipair + 2] - m_columnPositions[ipair + 1] - widthBtnContextMenu;  				// Redo button name in case some won't (or now will!) fit on the button  				c.Text = GetBtnName(m_headerMainCols.Columns[ipair + 1].Text' c.Width - ((c as Button).Image.Width * 2));  				Control c2 = m_buttonRow.Controls[ipair * 2 + 1];  				// pull-down  				c2.Left = c.Right;  				c2.Width = widthBtnContextMenu;  				ipair++;  			}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ComputeButtonWidths,The following statement contains a magic number: while (ipair < cPairs)  			{  				Control c = m_buttonRow.Controls[ipair * 2];  				// main button  				c.Left = m_columnPositions[ipair + 1] + 2;  				// skip number column' fine tune  				c.Width = m_columnPositions[ipair + 2] - m_columnPositions[ipair + 1] - widthBtnContextMenu;  				// Redo button name in case some won't (or now will!) fit on the button  				c.Text = GetBtnName(m_headerMainCols.Columns[ipair + 1].Text' c.Width - ((c as Button).Image.Width * 2));  				Control c2 = m_buttonRow.Controls[ipair * 2 + 1];  				// pull-down  				c2.Left = c.Right;  				c2.Width = widthBtnContextMenu;  				ipair++;  			}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ComputeButtonWidths,The following statement contains a magic number: while (ipair < cPairs)  			{  				Control c = m_buttonRow.Controls[ipair * 2];  				// main button  				c.Left = m_columnPositions[ipair + 1] + 2;  				// skip number column' fine tune  				c.Width = m_columnPositions[ipair + 2] - m_columnPositions[ipair + 1] - widthBtnContextMenu;  				// Redo button name in case some won't (or now will!) fit on the button  				c.Text = GetBtnName(m_headerMainCols.Columns[ipair + 1].Text' c.Width - ((c as Button).Image.Width * 2));  				Control c2 = m_buttonRow.Controls[ipair * 2 + 1];  				// pull-down  				c2.Left = c.Right;  				c2.Width = widthBtnContextMenu;  				ipair++;  			}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ComputeButtonWidths,The following statement contains a magic number: while (ipair < cPairs)  			{  				Control c = m_buttonRow.Controls[ipair * 2];  				// main button  				c.Left = m_columnPositions[ipair + 1] + 2;  				// skip number column' fine tune  				c.Width = m_columnPositions[ipair + 2] - m_columnPositions[ipair + 1] - widthBtnContextMenu;  				// Redo button name in case some won't (or now will!) fit on the button  				c.Text = GetBtnName(m_headerMainCols.Columns[ipair + 1].Text' c.Width - ((c as Button).Image.Width * 2));  				Control c2 = m_buttonRow.Controls[ipair * 2 + 1];  				// pull-down  				c2.Left = c.Right;  				c2.Width = widthBtnContextMenu;  				ipair++;  			}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,SetupMoveHereButtonsToMatchTemplate,The following statement contains a magic number: while (m_MoveHereButtons.Count < m_allColumns.Length)  			{  				// Install MoveHere button  				var newButton = new Button();  				newButton.Click += new EventHandler(btnMoveHere_Click);  				var sColName = m_logic.GetColumnLabel(m_MoveHereButtons.Count);  				// Holds column name while setting buttons  				m_buttonRow.Controls.Add(newButton);  				// Enhance GordonM: This should deal in pixel length' not character length.  				// And column width needs to be known!  				newButton.Image = SIL.FieldWorks.Resources.ResourceHelper.MoveUpArrowIcon;  				newButton.ImageAlign = ContentAlignment.MiddleRight;    				// useable space is button width less (icon width * 2) because of centering  				var btnSpace = newButton.Width - (newButton.Image.Size.Width * 2);  				// useable pixel length on button  				newButton.TextAlign = ContentAlignment.MiddleCenter;  				newButton.Text = GetBtnName(sColName' btnSpace);    				// Set up the ToolTip text for the Button.  				m_toolTip.SetToolTip(newButton' String.Format(DiscourseStrings.ksMoveHereToolTip' sColName));    				m_MoveHereButtons.Add(newButton);    				// Install context menu button  				var newBtnContextMenu = new Button();  				newBtnContextMenu.Click += new EventHandler(btnContextMenu_Click);  				newBtnContextMenu.Image = SIL.FieldWorks.Resources.ResourceHelper.ButtonMenuArrowIcon;  				m_buttonRow.Controls.Add(newBtnContextMenu);  				m_ContextMenuButtons.Add(newBtnContextMenu);  			}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,GetColumnOfButton,The following statement contains a magic number: int icol = btn.Parent.Controls.IndexOf(btn) / 2;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,HighlightChOrphPossibles,The following statement contains a magic number: int[] currHighlightCells = new int[4];
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,HighlightChOrphPossibles,The following statement contains a magic number: currHighlightCells[2] = icurrRow;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,HighlightChOrphPossibles,The following statement contains a magic number: currHighlightCells[3] = icolFoll;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,DecipherRowLabel,The following statement contains a magic number: if (posFirstLetter == 0)  			{  				// Haven't yet found a letter! So this is only a number' no subclauses.  				try  				{  					row = Convert.ToInt32(rowLabel);  				}  				catch (Exception)  				{  					row = 1; // arbitrary' may arise e.g. from empty string following change of first analysis WS.  				}  				clause = 1;  			}  			else  			{  				row = Convert.ToInt32(rowLabel.Substring(0'posFirstLetter));  				if (posFirstLetter == (rowLabel.Length - 1))  				{  					// only one letter present; we assume no more than 2 letters  					// is it possible to have 53+ clauses in a Sentence?  					clause = Convert.ToInt32(rowLabel[posFirstLetter]) - Convert.ToInt32('a') + 1;  				}  				else  					clause = Convert.ToInt32(rowLabel[posFirstLetter + 1]) - Convert.ToInt32('a') + 27;  			}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,CalculateMyRowNums,The following statement contains a magic number: if (prevClauseNum > 26)  				result = Convert.ToString(prevSentNum) + "a" + Convert.ToChar(Convert.ToInt32('a')  																			  + prevClauseNum - 27);  			else  				result = Convert.ToString(prevSentNum) + Convert.ToChar(Convert.ToInt32('a')  																		+ prevClauseNum - 1);
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,CalculateMyRowNums,The following statement contains a magic number: if (prevClauseNum > 26)  				result = Convert.ToString(prevSentNum) + "a" + Convert.ToChar(Convert.ToInt32('a')  																			  + prevClauseNum - 27);  			else  				result = Convert.ToString(prevSentNum) + Convert.ToChar(Convert.ToInt32('a')  																		+ prevClauseNum - 1);
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MakeDepClauseItem,The following statement contains a magic number: for (var irow = irowSrc + 1; irow < Math.Min(irowSrc + kdepClauseRowLimit' m_chart.RowsOS.Count); irow++)  			{  				string label;  				switch (irow - irowSrc)  				{  					case 1: label = DiscourseStrings.ksNextClauseMenuItem; break;  					case 2: label = DiscourseStrings.ksNextTwoClausesMenuItem; break;  					default: label = String.Format(DiscourseStrings.ksNextNClausesMenuItem' (irow - irowSrc)); break;  				}  				depClauseRows.Add(m_chart.RowsOS[irow]);  				var item = new DepClauseMenuItem(label' srcCell' depClauseRows.ToArray());  				item.Click += new EventHandler(itemDC_Click);  				itemMDC.DropDownItems.Add(item);  				item.DepType = depType;  			}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,itemOther_Click,The following statement contains a magic number: using (var dlg = new SelectClausesDialog())  			{  				var items = new List<RowMenuItem>();  				var iSrc = item.RowSource.IndexInOwner;  				var iSelect = -1;  				for (var irow = Math.Max(iSrc - 10' 0); irow < Math.Min(iSrc + 20' m_chart.RowsOS.Count); irow++)  				{  					if (irow == iSrc)  					{  						iSelect = items.Count;  						continue;  					}  					items.Add(new RowMenuItem(m_chart.RowsOS[irow]));  				}  				dlg.SetRows(items);  				if (iSelect >= items.Count)  					iSelect = items.Count - 1;  				dlg.SelectedRow = items[iSelect];  				if (dlg.ShowDialog() == DialogResult.OK)  				{  					var outer = dlg.SelectedRow.Row;  					int index = outer.IndexInOwner;  					int start = iSrc + 1;  					int end = index;  					if (index < iSrc)  					{  						start = index;  						end = iSrc - 1;  					}  					var rows = new List<IConstChartRow>();  					for (var i = start; i <= end; i++)  						rows.Add(m_chart.RowsOS[i]);  					MakeDependentClauseMarker(item.SrcCell' rows.ToArray()' item.DepType);  				}  			}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,itemOther_Click,The following statement contains a magic number: using (var dlg = new SelectClausesDialog())  			{  				var items = new List<RowMenuItem>();  				var iSrc = item.RowSource.IndexInOwner;  				var iSelect = -1;  				for (var irow = Math.Max(iSrc - 10' 0); irow < Math.Min(iSrc + 20' m_chart.RowsOS.Count); irow++)  				{  					if (irow == iSrc)  					{  						iSelect = items.Count;  						continue;  					}  					items.Add(new RowMenuItem(m_chart.RowsOS[irow]));  				}  				dlg.SetRows(items);  				if (iSelect >= items.Count)  					iSelect = items.Count - 1;  				dlg.SelectedRow = items[iSelect];  				if (dlg.ShowDialog() == DialogResult.OK)  				{  					var outer = dlg.SelectedRow.Row;  					int index = outer.IndexInOwner;  					int start = iSrc + 1;  					int end = index;  					if (index < iSrc)  					{  						start = index;  						end = iSrc - 1;  					}  					var rows = new List<IConstChartRow>();  					for (var i = start; i <= end; i++)  						rows.Add(m_chart.RowsOS[i]);  					MakeDependentClauseMarker(item.SrcCell' rows.ToArray()' item.DepType);  				}  			}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,IsHighlightedCell,The following statement contains a magic number: if (IsChOrphActive)  			{  				int irowPrec = CurrHighlightCells[0];  				int irowFoll = CurrHighlightCells[2];  				if (irowPrec <= irow && irow <= irowFoll)  				{  					int icolPrec = CurrHighlightCells[1];  					int icolFoll = CurrHighlightCells[3];  					if (irowPrec == irowFoll)  						return (icolPrec <= icol && icol <= icolFoll);  					if (irow == irowPrec && icol >= icolPrec)  						return true;  					if (irow == irowFoll && icol <= icolFoll)  						return true;  				}  			}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,IsHighlightedCell,The following statement contains a magic number: if (IsChOrphActive)  			{  				int irowPrec = CurrHighlightCells[0];  				int irowFoll = CurrHighlightCells[2];  				if (irowPrec <= irow && irow <= irowFoll)  				{  					int icolPrec = CurrHighlightCells[1];  					int icolFoll = CurrHighlightCells[3];  					if (irowPrec == irowFoll)  						return (icolPrec <= icol && icol <= icolFoll);  					if (irow == irowPrec && icol >= icolPrec)  						return true;  					if (irow == irowFoll && icol <= icolFoll)  						return true;  				}  			}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,ConvertColumnIndexToFromRtL,The following statement contains a magic number: var diff = ((Single) imaxCol)/2 - (Single)icol;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,ConvertColumnIndexToFromRtL,The following statement contains a magic number: icol += (int)(diff * 2);
Magic Number,SIL.FieldWorks.Discourse,InterlinRibbon,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\InterlinRibbon.cs,GetScrollOffsets,The following statement contains a magic number: if (IsRightToLeft)  				dxd -= Width - RootBox.Width - 4;
Magic Number,SIL.FieldWorks.Discourse,InterlinRibbon,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\InterlinRibbon.cs,GetAvailWidth,The following statement contains a magic number: return 10000000;
Magic Number,SIL.FieldWorks.Discourse,RibbonVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\InterlinRibbon.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case InterlinRibbon.kfragRibbonWordforms:  					if (hvo == 0)  						return;  					if (m_ribbon.IsRightToLeft)  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft'  							(int)FwTextPropVar.ktpvEnum' (int)FwTextToggleVal.kttvForceOn);  						vwenv.set_IntProperty((int)FwTextPropType.ktptAlign'  							(int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  					}  					vwenv.OpenParagraph();  					vwenv.AddObjVecItems(m_ribbon.OccurenceListId' this' InterlinVc.kfragBundle);  					vwenv.CloseParagraph();  					break;  				case kfragBundle:  					// Review: will this lead to multiple spurious blue lines?  					var realHvo = (m_ribbon.Decorator as InterlinRibbonDecorator).OccurrenceFromHvo(hvo).Analysis.Hvo;  					if (m_ribbon.SelLimOccurrence != null && m_ribbon.SelLimOccurrence.Analysis.Hvo == realHvo)  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptPadTrailing'  							(int)FwTextPropVar.ktpvMilliPoint' 5000);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing'  							(int)FwTextPropVar.ktpvMilliPoint' 2000);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderColor'  							(int)FwTextPropVar.ktpvDefault'  							(int)ColorUtil.ConvertColorToBGR(Color.Blue));  					}  					base.Display(vwenv' hvo' frag);  					break;  				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,RibbonVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\InterlinRibbon.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case InterlinRibbon.kfragRibbonWordforms:  					if (hvo == 0)  						return;  					if (m_ribbon.IsRightToLeft)  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft'  							(int)FwTextPropVar.ktpvEnum' (int)FwTextToggleVal.kttvForceOn);  						vwenv.set_IntProperty((int)FwTextPropType.ktptAlign'  							(int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  					}  					vwenv.OpenParagraph();  					vwenv.AddObjVecItems(m_ribbon.OccurenceListId' this' InterlinVc.kfragBundle);  					vwenv.CloseParagraph();  					break;  				case kfragBundle:  					// Review: will this lead to multiple spurious blue lines?  					var realHvo = (m_ribbon.Decorator as InterlinRibbonDecorator).OccurrenceFromHvo(hvo).Analysis.Hvo;  					if (m_ribbon.SelLimOccurrence != null && m_ribbon.SelLimOccurrence.Analysis.Hvo == realHvo)  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptPadTrailing'  							(int)FwTextPropVar.ktpvMilliPoint' 5000);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing'  							(int)FwTextPropVar.ktpvMilliPoint' 2000);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderColor'  							(int)FwTextPropVar.ktpvDefault'  							(int)ColorUtil.ConvertColorToBGR(Color.Blue));  					}  					base.Display(vwenv' hvo' frag);  					break;  				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,DialogInterlinRibbon,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\InterlinRibbon.cs,DialogInterlinRibbon,The following statement contains a magic number: m_occurenceListId = -2012;
Missing Default,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MoveToColumn,The following switch statement is missing a default case: switch (addWhere)  				{  					case FindWhereToAddResult.kAppendToExisting:  						var endPoint = selectedWordforms[selectedWordforms.Length - 1];  						ExtendWordGroupForwardTo(wordGrpToAppendTo' endPoint);  						break;  					case FindWhereToAddResult.kInsertWordGrpInRow:  					case FindWhereToAddResult.kMakeNewRow:  						if (addWhere == FindWhereToAddResult.kMakeNewRow) // distinguishes from kInsertWordGrpInRow  							rowFinal = MakeNewRow();  						var finalCell = new ChartLocation(rowFinal' icol);  						MakeWordGroup(finalCell' position' selectedWordforms);  						break;  				}
Missing Default,SIL.FieldWorks.Discourse,ConstituentChartLogic,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MoveChOrphToColumn,The following switch statement is missing a default case: switch (result)  			{  				case FindWhereToAddResult.kInsertWordGrpInRow:  					// whereToInsert gives index in CCRow Cells sequence  					MakeWordGroup(finalCell' whereToInsert' selectedWords);  					break;  				case FindWhereToAddResult.kInsertChOrphInWordGrp: // fall through (shouldn't occur)  				case FindWhereToAddResult.kAppendToExisting:  					// whereToInsert gives index in existingWordGroup occurrences  					ExpandWordGroupToInclude(existingWordGroup' selectedWords' whereToInsert > 0);  					break;  			}
Missing Default,SIL.FieldWorks.Discourse,DiscourseExportDialog,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The following switch statement is missing a default case: switch (mode)  					{  						case "doNothing":  							break;  						case "applySingleTransform":  							string sTransform = Path.Combine(sTransformPath' transform);  							exporter.PostProcess(sTransform' outPath' 1);  							break;  						//case "openOffice":  						//    // Generate the styles first' based on the original export file.  						//    string styleFilePath;  						//    using (TempFileCollection tempFiles = new TempFileCollection()) // wanted only to get the default temp file dir and name  						//    {  						//        styleFilePath = tempFiles.AddExtension("xml"' false);  						//    }  						//    XslCompiledTransform xsl = new XslCompiledTransform();  						//    XmlNode implementation = XmlUtils.GetFirstNonCommentChild(ddNode);  						//    string styleFileTransform = "xml2OOStyles.xsl";  						//    if (implementation != null)  						//        styleFileTransform = XmlUtils.GetOptionalAttributeValue(implementation' "styleTransform"' styleFileTransform);  						//    xsl.Load(rootDir + @"\Language Explorer\Export Templates\Interlinear\" + styleFileTransform);  						//    xsl.Transform(outPath' styleFilePath);    						//    // Now generate the content. Do this after using outPath as the source above' because it renames the file.  						//    string contentFileTransform = "xml2OO.xsl";  						//    if (implementation != null)  						//        contentFileTransform = XmlUtils.GetOptionalAttributeValue(implementation' "contentTransform"' contentFileTransform);  						//    exporter.PostProcess(rootDir + @"\Language Explorer\Export Templates\Interlinear\" + contentFileTransform' outPath' 1);  						//    string intermediateFile = CollectorEnv.RenameOutputToPassN(outPath' 2);  						//    using (FileStream outFile = new FileStream(outPath' FileMode.Create))  						//    {  						//        using (ZipOutputStream zipFile = new ZipOutputStream(outFile))  						//        {  						//            WriteFileToZipUncompressed("mimetype"' rootDir + @"\Language Explorer\Export Templates\Interlinear\mimetype"' zipFile);  						//            WriteFileToZipUncompressed("META-INF/manifest.xml"' rootDir + @"\Language Explorer\Export Templates\Interlinear\manifest.xml"' zipFile);  						//            WriteFileToZip("styles.xml"' styleFilePath' zipFile);  						//            WriteFileToZip("content.xml"' intermediateFile' zipFile);  						//            zipFile.Finish();  						//            zipFile.Close();  						//        }  						//        outFile.Close();  						//    }  						//    File.Delete(styleFilePath);  						//    File.Delete(intermediateFile);  						//    //System.IO.File.Copy(rootDir + @"\Language Explorer\Export Templates\Interlinear\EmptyOfficeDoc.odt"'  						//    //    outPath);  						//    //ZipFile OOFile = new ZipFile(outPath' ZipConstants.GZIP' System.IO.FileMode.Open);  						//    //System.IO.File.Delete("content.xml");  						//    //System.IO.File.Move(intermediateFile' "content.xml");  						//    //OOFile.Add("content.xml");  						//    ////OOFile.AddAs("content.xml"' intermediateFile);  						//    //OOFile.Close();  						//    break;  					}
Missing Default,SIL.FieldWorks.Discourse,DiscourseExporter,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,AddStringProp,The following switch statement is missing a default case: switch (tag)  			{  				case ConstChartRowTags.kflidNotes:  					WriteStringProp(tag' "note"' 0);  					break;  				case ConstChartRowTags.kflidLabel:  					switch (TopFragment)  					{  						case ConstChartVc.kfragChartRow:  							WriteStringProp(tag' "rownum"' 0);  							break;  						case ConstChartVc.kfragComment:  							WriteStringProp(tag' "clauseMkr"' 0' "target"' m_sda.get_StringProp(m_hvoCurr' tag).Text);  							break;  					}  					break;  			}
Missing Default,SIL.FieldWorks.Discourse,DiscourseExporter,C:\repos\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,AddStringProp,The following switch statement is missing a default case: switch (TopFragment)  					{  						case ConstChartVc.kfragChartRow:  							WriteStringProp(tag' "rownum"' 0);  							break;  						case ConstChartVc.kfragComment:  							WriteStringProp(tag' "clauseMkr"' 0' "target"' m_sda.get_StringProp(m_hvoCurr' tag).Text);  							break;  					}
