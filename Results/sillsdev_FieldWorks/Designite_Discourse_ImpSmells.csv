Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.Discourse,AdvancedMTDialog,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\AdvancedMTDialog.cs,InitializeComponent,The method has 113 lines of code.
Long Method,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,Display,The method has 111 lines of code.
Complex Method,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,LoadFormatProps,Cyclomatic complexity of the method is 13
Complex Method,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,InterpretUnderlineType,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,Display,Cyclomatic complexity of the method is 21
Complex Method,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,MakeTableAndRowWithStdWidths,Cyclomatic complexity of the method is 14
Complex Method,SIL.FieldWorks.Discourse,MakeCellsMethod,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ProcessCurrentCellPart,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Discourse,MakeCellsMethod,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,AddCellPartToCell,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,RegurgitateIVwEnvCall,Cyclomatic complexity of the method is 14
Complex Method,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,SetRoot,Cyclomatic complexity of the method is 13
Complex Method,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,NextUnchartedInput,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,GetWordGroupCellsBorderingChOrph,Cyclomatic complexity of the method is 13
Complex Method,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,FindWhereToAddWords,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,FindWhereToAddChOrph,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MakeCellContextMenu,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,itemOther_Click,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Discourse,MergeCellContentsMethod,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,Run,Cyclomatic complexity of the method is 14
Long Parameter List,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,AddIntPropPic,The method has 5 parameters. Parameters: tag' _vc' frag' nMin' nMax
Long Parameter List,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,OpenTable,The method has 9 parameters. Parameters: cCols' vlWidth' mpBorder' vwalign' frmpos' vwrule' mpSpacing' mpPadding' fSelectOneCol
Long Parameter List,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,AddPictureWithCaption,The method has 8 parameters. Parameters: _pict' tag' _ttpCaption' hvoCmFile' ws' dxmpWidth' dympHeight' _vwvc
Long Parameter List,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,FindWhereToAddChOrph,The method has 5 parameters. Parameters: curCell' iChOrphPara' beginChOrphOffset' whereToInsert' existingWordGroup
Long Parameter List,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MakeMoveItems,The method has 5 parameters. Parameters: srcCell' menu' forward' backward' mainLabel
Long Parameter List,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MakePreposedOrPostPosedMenuItem,The method has 6 parameters. Parameters: menu' srcCell' icolStart' icolLim' text' fMarkerPresent
Long Parameter List,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,ReportWarningAndUpdateCountsRemovingCellPart,The method has 5 parameters. Parameters: row' part' fReported' index' count
Long Parameter List,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MakePlItem,The method has 5 parameters. Parameters: clickHandler' cell' poss' markerRefs' format
Long Parameter List,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,ChangeRow,The method has 5 parameters. Parameters: partsToMove' rowSrc' rowDst' srcIndex' dstIndex
Long Parameter List,SIL.FieldWorks.Discourse,MakeMovedTextMethod,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MakeMovedTextMethod,The method has 5 parameters. Parameters: logic' movedTextCell' markerCell' begPoint' endPoint
Long Parameter List,SIL.FieldWorks.Discourse,DiscourseExportDialog,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DiscourseExportDialog,The method has 5 parameters. Parameters: mediator' propertyTable' hvoRoot' vc' wsLineNumber
Long Parameter List,SIL.FieldWorks.Discourse,DiscourseExporter,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,DiscourseExporter,The method has 5 parameters. Parameters: cache' writer' hvoRoot' vc' wsLineNumber
Long Parameter List,SIL.FieldWorks.Discourse,DiscourseExporter,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,WriteStringProp,The method has 5 parameters. Parameters: tag' elementTag' alt' extraAttr' extraAttrVal
Long Parameter List,SIL.FieldWorks.Discourse,DiscourseExporter,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,WriteStringVal,The method has 5 parameters. Parameters: elementTag' ws' tss' extraAttr' extraAttrVal
Long Parameter List,SIL.FieldWorks.Discourse,InterlinRibbonDecorator,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\InterlinRibbonDecorator.cs,Replace,The method has 6 parameters. Parameters: hvoObj' tag' ihvoMin' ihvoLim' rghvo' chvo
Long Parameter List,SIL.FieldWorks.Discourse,MaxStringWidthForChartColumn,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\MaxStringWidthForChartColumn.cs,MaxStringWidthForChartColumn,The method has 6 parameters. Parameters: vc' stylesheet' sda' hvoRoot' graphics' icolumn
Long Identifier,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,,The length of the parameter m_fIsAnalysisWsGraphiteEnabled is 30.
Long Statement,SIL.FieldWorks.Discourse,AdvancedMTDialog,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\AdvancedMTDialog.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AdvancedMTDialog)); " is 136.
Long Statement,SIL.FieldWorks.Discourse,ConstChartBody,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,CalculateHoverButtonHorizPosition,The length of the statement  "			var horizPosition = m_chart.ColumnPositions[columnIndex + extraColumnLeft + (fRtl ? -1 : 1) + (m_chart.NotesColumnOnRight ? 0 : 1)] + fudgeFactor; " is 146.
Long Statement,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,LoadFormatProps,The length of the statement  "				var path = Path.Combine(FwDirectoryFinder.CodeDirectory' @"Language Explorer/Configuration/ConstituentChartStyleInfo.xml"); " is 123.
Long Statement,SIL.FieldWorks.Discourse,MakeCellsMethod,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ProcessCurrentCellPart,The length of the statement  "					//Debug.Fail(string.Format("Cell part : {0} Chart AllColumns length is: {1} ihvoNewCol is: {2}"' cellPart.Guid' m_chart.AllColumns.Length' ihvoNewCol)); " is 152.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,BuildBottomStuffUI,The length of the statement  "			m_buttonRow = new Panel { Height = new Button().Height' Dock = DockStyle.Top' BackColor = Color.FromKnownColor(KnownColor.ControlLight) }; " is 138.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,GetColumnWidths,The length of the statement  "			if (m_headerMainCols != null && m_headerMainCols.Controls.Count == m_allColumns.Length + ConstituentChartLogic.NumberOfExtraColumns) " is 132.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,TemplateSelectionChanged,The length of the statement  "			foreach (var chart in Cache.LangProject.DiscourseDataOA.ChartsOC.Cast<IDsConstChart>().Where(chart => chart.BasedOnRA != null && chart.BasedOnRA == RootStText && chart.TemplateRA == template)) " is 192.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,CreateChartInNonUndoableUOW,The length of the statement  "			NonUndoableUnitOfWorkHelper.Do(Cache.ActionHandlerAccessor' () => { m_chart = m_serviceLocator.GetInstance<IDsConstChartFactory>().Create(Cache.LangProject.DiscourseDataOA' RootStText' Cache.LangProject.GetDefaultChartTemplate()); }); " is 234.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,DetectAndReportTemplateProblem,The length of the statement  "				MessageBox.Show(this' DiscourseStrings.ksNoColumns' DiscourseStrings.ksWarning' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 126.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,FindAndCleanUpMyChart,The length of the statement  "			foreach (var chart in Cache.LangProject.DiscourseDataOA.ChartsOC.Cast<IDsConstChart>().Where(chart => chart.BasedOnRA != null && chart.BasedOnRA.Hvo == hvoStText)) " is 163.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,btnContextMenu_Click,The length of the statement  "			m_contextMenuStrip.Closed += contextMenuStrip_Closed; // dispose when no longer needed (but not sooner! needed after this returns) " is 130.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,TryRestoreLineChoices,The length of the statement  "					Cache.LangProject' Cache.DefaultVernWs' Cache.DefaultAnalWs' InterlinLineChoices.InterlinMode.Analyze' PropertyTable' ConfigPropName); " is 134.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,GetLineChoices,The length of the statement  "			var result = new InterlinLineChoices(Cache.LangProject' Cache.DefaultVernWs' Cache.DefaultAnalWs' InterlinLineChoices.InterlinMode.Chart); " is 138.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,GetLineChoices,The length of the statement  "			lineChoices = InterlinLineChoices.Restore(persist' Cache.ServiceLocator.GetInstance<ILgWritingSystemFactory>()' Cache.LangProject' Cache.DefaultVernWs' Cache.DefaultAnalWs' InterlinLineChoices.InterlinMode.Chart' PropertyTable' ConfigPropName); " is 244.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,itemAdvanced_Click,The length of the statement  "			// Maybe I need to make a temporary WordGroup that holds all the wordforms in the cell for dialog ribbon display purposes. " is 122.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MoveWordBack,The length of the statement  "				(listOfPartsInSrc.Count == ipartInCell + 1 || FindFirstWordGroup(listOfPartsInSrc.GetRange(ipartInCell + 1' listOfPartsInSrc.Count - 1)) == null)) " is 146.
Long Statement,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MoveWordForward,The length of the statement  "				(listOfPartsInSrc.Count == 1 || (ipartInCell > 0 && FindLastWordGroup(listOfPartsInSrc.GetRange(0' ipartInCell - 1)) == null))) " is 127.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExportDialog,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The length of the statement  "						//    using (TempFileCollection tempFiles = new TempFileCollection()) // wanted only to get the default temp file dir and name " is 126.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExportDialog,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The length of the statement  "						//        styleFileTransform = XmlUtils.GetOptionalAttributeValue(implementation' "styleTransform"' styleFileTransform); " is 120.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExportDialog,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The length of the statement  "						//        contentFileTransform = XmlUtils.GetOptionalAttributeValue(implementation' "contentTransform"' contentFileTransform); " is 126.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExportDialog,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The length of the statement  "						//    exporter.PostProcess(rootDir + @"\Language Explorer\Export Templates\Interlinear\" + contentFileTransform' outPath' 1); " is 125.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExportDialog,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The length of the statement  "						//            WriteFileToZipUncompressed("mimetype"' rootDir + @"\Language Explorer\Export Templates\Interlinear\mimetype"' zipFile); " is 133.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExportDialog,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The length of the statement  "						//            WriteFileToZipUncompressed("META-INF/manifest.xml"' rootDir + @"\Language Explorer\Export Templates\Interlinear\manifest.xml"' zipFile); " is 150.
Long Statement,SIL.FieldWorks.Discourse,DiscourseExporter,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,OpenTableCell,The length of the statement  "			if (m_titleStage == TitleStage.ktsStart && m_frags.Count > 0 && m_frags[m_frags.Count - 1] == ConstChartVc.kfragColumnGroupHeader) " is 130.
Long Statement,SIL.FieldWorks.Discourse,SelectClausesDialog,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\SelectClausesDialog.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SelectClausesDialog)); " is 139.
Complex Conditional,SIL.FieldWorks.Discourse,ConstChartBody,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,GetCellInfo,The conditional expression  "m_hvoChart == 0 || AllColumns == null || e.Y > RootBox.Height || e.X > RootBox.Width"  is complex.
Complex Conditional,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,OnSizeChanged,The conditional expression  "m_mediator != null && m_columnWidths != null && m_chart != null && !HasPersistantColWidths"  is complex.
Complex Conditional,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MoveWordForward,The conditional expression  "srcWordGroup.GetOccurrences().Count == 1 &&  				(listOfPartsInSrc.Count == 1 || (ipartInCell > 0 && FindLastWordGroup(listOfPartsInSrc.GetRange(0' ipartInCell - 1)) == null))"  is complex.
Complex Conditional,SIL.FieldWorks.Discourse,DiscourseExporter,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,AddString,The conditional expression  "text == "\x200F" || text == "\x200E" || string.IsNullOrEmpty(text) || text == " ""  is complex.
Empty Catch Block,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,CleanupInvalidChartCells,The method has an empty catch block.
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,OnHandleCreated,The following statement contains a magic number: m_hoverButton.Height = pullDown.Height + 4;
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,OnHandleCreated,The following statement contains a magic number: m_hoverButton.Width = pullDown.Width + 4;
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,CalculateHoverButtonHorizPosition,The following statement contains a magic number: const int margin = 4;
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,SetColWidths,The following statement contains a magic number: lengths[0].nVal -= 1000;
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,GetCellInfo,The following statement contains a magic number: info.Levels(false) < 2
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,AdjustPrintDialog,The following statement contains a magic number: dlg.Document.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50' 50' 50' 50);
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,AdjustPrintDialog,The following statement contains a magic number: dlg.Document.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50' 50' 50' 50);
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,AdjustPrintDialog,The following statement contains a magic number: dlg.Document.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50' 50' 50' 50);
Magic Number,SIL.FieldWorks.Discourse,ConstChartBody,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,AdjustPrintDialog,The following statement contains a magic number: dlg.Document.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50' 50' 50' 50);
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,LoadFormatProps,The following statement contains a magic number: bldr.SetIntPropValues((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvRelative' percent * 100);
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,LoadFormatProps,The following statement contains a magic number: brackets != null && brackets.Trim().Length == 2
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ColorVal,The following statement contains a magic number: int blue = Convert.ToInt32(val.Substring(secondComma + 1' val.Length - secondComma - 2));
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ColorVal,The following statement contains a magic number: return red + (blue * 256 + green) * 256;
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ColorVal,The following statement contains a magic number: return red + (blue * 256 + green) * 256;
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ColorVal,The following statement contains a magic number: return col.R + (col.B * 256 + col.G) * 256;
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,ColorVal,The following statement contains a magic number: return col.R + (col.B * 256 + col.G) * 256;
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,SetupAndOpenInnerPile,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing'  					(int)FwTextPropVar.ktpvMilliPoint' 5000);
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,SetupAndOpenInnerPile,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptMarginBottom'  					(int)FwTextPropVar.ktpvMilliPoint' 5000);
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,MakeTableAndRowWithStdWidths,The following statement contains a magic number: tableWidth.nVal = 10000;
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,MakeTableAndRowWithStdWidths,The following statement contains a magic number: vwenv.OpenTable(m_body.AllColumns.Length + ConstituentChartLogic.NumberOfExtraColumns'  					tableWidth'  					1500' // borderWidth  					fRtL ? VwAlignment.kvaRight : VwAlignment.kvaLeft' // Handle RTL  					fpos'  					VwRule.kvrlNone'  					0' // cell spacing  					2000' // cell padding  					true);
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,MakeTableAndRowWithStdWidths,The following statement contains a magic number: vwenv.OpenTable(m_body.AllColumns.Length + ConstituentChartLogic.NumberOfExtraColumns'  					tableWidth'  					1500' // borderWidth  					fRtL ? VwAlignment.kvaRight : VwAlignment.kvaLeft' // Handle RTL  					fpos'  					VwRule.kvrlNone'  					0' // cell spacing  					2000' // cell padding  					true);
Magic Number,SIL.FieldWorks.Discourse,ConstChartVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,MakeTableAndRowWithStdWidths,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom'  							(int)FwTextPropVar.ktpvMilliPoint' 1000);
Magic Number,SIL.FieldWorks.Discourse,MakeCellsMethod,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,OpenRowNumberCell,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing'  					(int)FwTextPropVar.ktpvMilliPoint' 500);
Magic Number,SIL.FieldWorks.Discourse,MakeCellsMethod,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,OpenNoteCell,The following statement contains a magic number: m_vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing'  						(int)FwTextPropVar.ktpvMilliPoint' 1500);
Magic Number,SIL.FieldWorks.Discourse,MakeCellsMethod,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,OpenStandardCell,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing'  					(int)FwTextPropVar.ktpvMilliPoint'  					(fEndOfGroup ? 1500 : 500));
Magic Number,SIL.FieldWorks.Discourse,MakeCellsMethod,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartBody.cs,OpenStandardCell,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing'  					(int)FwTextPropVar.ktpvMilliPoint'  					(fEndOfGroup ? 1500 : 500));
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,RegurgitateIVwEnvCall,The following statement contains a magic number: switch (storedMethod.MethodType)  			{  				case DecoratorMethodTypes.AddObj:  					var hvo = (int)storedMethod.ParamArray[0];  					vc  = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int) storedMethod.ParamArray[2];  					m_vwEnv.AddObj(hvo' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjProp(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVec:  					tag = (int) storedMethod.ParamArray[0];  					vc = (IVwViewConstructor) storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVec(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVecItems:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVecItems(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddString:  					var tsStr = (ITsString)storedMethod.ParamArray[0];  					m_vwEnv.AddString(tsStr);  					break;  				case DecoratorMethodTypes.AddStringProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					m_vwEnv.AddStringProp(tag' vc);  					break;  				case DecoratorMethodTypes.CloseParagraph:  					m_vwEnv.CloseParagraph();  					break;  				case DecoratorMethodTypes.CloseTableCell:  					m_vwEnv.CloseTableCell();  					break;  				case DecoratorMethodTypes.NoteDependency:  					var _rghvo = (int[])storedMethod.ParamArray[0];  					var _rgtag = (int[])storedMethod.ParamArray[1];  					var chvo = (int) storedMethod.ParamArray[2];  					m_vwEnv.NoteDependency(_rghvo' _rgtag' chvo);  					break;  				case DecoratorMethodTypes.OpenParagraph:  					m_vwEnv.OpenParagraph();  					break;  				case DecoratorMethodTypes.OpenTableCell:  					var nRows = (int) storedMethod.ParamArray[0];  					var nCols = (int)storedMethod.ParamArray[1];  					m_vwEnv.OpenTableCell(nRows' nCols);  					break;  				case DecoratorMethodTypes.SetIntProperty:  					var tpt = (int)storedMethod.ParamArray[0];  					var tpv = (int)storedMethod.ParamArray[1];  					var nValue = (int)storedMethod.ParamArray[2];  					m_vwEnv.set_IntProperty(tpt' tpv' nValue);  					break;  				case DecoratorMethodTypes.PropsSetter:  					var value = (ITsTextProps) storedMethod.ParamArray[0];  					m_vwEnv.Props = value;  					break;  				default:  					Debug.Assert(false' "Unknown DecoratorMethodType!");  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,RegurgitateIVwEnvCall,The following statement contains a magic number: switch (storedMethod.MethodType)  			{  				case DecoratorMethodTypes.AddObj:  					var hvo = (int)storedMethod.ParamArray[0];  					vc  = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int) storedMethod.ParamArray[2];  					m_vwEnv.AddObj(hvo' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjProp(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVec:  					tag = (int) storedMethod.ParamArray[0];  					vc = (IVwViewConstructor) storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVec(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVecItems:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVecItems(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddString:  					var tsStr = (ITsString)storedMethod.ParamArray[0];  					m_vwEnv.AddString(tsStr);  					break;  				case DecoratorMethodTypes.AddStringProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					m_vwEnv.AddStringProp(tag' vc);  					break;  				case DecoratorMethodTypes.CloseParagraph:  					m_vwEnv.CloseParagraph();  					break;  				case DecoratorMethodTypes.CloseTableCell:  					m_vwEnv.CloseTableCell();  					break;  				case DecoratorMethodTypes.NoteDependency:  					var _rghvo = (int[])storedMethod.ParamArray[0];  					var _rgtag = (int[])storedMethod.ParamArray[1];  					var chvo = (int) storedMethod.ParamArray[2];  					m_vwEnv.NoteDependency(_rghvo' _rgtag' chvo);  					break;  				case DecoratorMethodTypes.OpenParagraph:  					m_vwEnv.OpenParagraph();  					break;  				case DecoratorMethodTypes.OpenTableCell:  					var nRows = (int) storedMethod.ParamArray[0];  					var nCols = (int)storedMethod.ParamArray[1];  					m_vwEnv.OpenTableCell(nRows' nCols);  					break;  				case DecoratorMethodTypes.SetIntProperty:  					var tpt = (int)storedMethod.ParamArray[0];  					var tpv = (int)storedMethod.ParamArray[1];  					var nValue = (int)storedMethod.ParamArray[2];  					m_vwEnv.set_IntProperty(tpt' tpv' nValue);  					break;  				case DecoratorMethodTypes.PropsSetter:  					var value = (ITsTextProps) storedMethod.ParamArray[0];  					m_vwEnv.Props = value;  					break;  				default:  					Debug.Assert(false' "Unknown DecoratorMethodType!");  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,RegurgitateIVwEnvCall,The following statement contains a magic number: switch (storedMethod.MethodType)  			{  				case DecoratorMethodTypes.AddObj:  					var hvo = (int)storedMethod.ParamArray[0];  					vc  = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int) storedMethod.ParamArray[2];  					m_vwEnv.AddObj(hvo' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjProp(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVec:  					tag = (int) storedMethod.ParamArray[0];  					vc = (IVwViewConstructor) storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVec(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVecItems:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVecItems(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddString:  					var tsStr = (ITsString)storedMethod.ParamArray[0];  					m_vwEnv.AddString(tsStr);  					break;  				case DecoratorMethodTypes.AddStringProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					m_vwEnv.AddStringProp(tag' vc);  					break;  				case DecoratorMethodTypes.CloseParagraph:  					m_vwEnv.CloseParagraph();  					break;  				case DecoratorMethodTypes.CloseTableCell:  					m_vwEnv.CloseTableCell();  					break;  				case DecoratorMethodTypes.NoteDependency:  					var _rghvo = (int[])storedMethod.ParamArray[0];  					var _rgtag = (int[])storedMethod.ParamArray[1];  					var chvo = (int) storedMethod.ParamArray[2];  					m_vwEnv.NoteDependency(_rghvo' _rgtag' chvo);  					break;  				case DecoratorMethodTypes.OpenParagraph:  					m_vwEnv.OpenParagraph();  					break;  				case DecoratorMethodTypes.OpenTableCell:  					var nRows = (int) storedMethod.ParamArray[0];  					var nCols = (int)storedMethod.ParamArray[1];  					m_vwEnv.OpenTableCell(nRows' nCols);  					break;  				case DecoratorMethodTypes.SetIntProperty:  					var tpt = (int)storedMethod.ParamArray[0];  					var tpv = (int)storedMethod.ParamArray[1];  					var nValue = (int)storedMethod.ParamArray[2];  					m_vwEnv.set_IntProperty(tpt' tpv' nValue);  					break;  				case DecoratorMethodTypes.PropsSetter:  					var value = (ITsTextProps) storedMethod.ParamArray[0];  					m_vwEnv.Props = value;  					break;  				default:  					Debug.Assert(false' "Unknown DecoratorMethodType!");  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,RegurgitateIVwEnvCall,The following statement contains a magic number: switch (storedMethod.MethodType)  			{  				case DecoratorMethodTypes.AddObj:  					var hvo = (int)storedMethod.ParamArray[0];  					vc  = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int) storedMethod.ParamArray[2];  					m_vwEnv.AddObj(hvo' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjProp(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVec:  					tag = (int) storedMethod.ParamArray[0];  					vc = (IVwViewConstructor) storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVec(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVecItems:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVecItems(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddString:  					var tsStr = (ITsString)storedMethod.ParamArray[0];  					m_vwEnv.AddString(tsStr);  					break;  				case DecoratorMethodTypes.AddStringProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					m_vwEnv.AddStringProp(tag' vc);  					break;  				case DecoratorMethodTypes.CloseParagraph:  					m_vwEnv.CloseParagraph();  					break;  				case DecoratorMethodTypes.CloseTableCell:  					m_vwEnv.CloseTableCell();  					break;  				case DecoratorMethodTypes.NoteDependency:  					var _rghvo = (int[])storedMethod.ParamArray[0];  					var _rgtag = (int[])storedMethod.ParamArray[1];  					var chvo = (int) storedMethod.ParamArray[2];  					m_vwEnv.NoteDependency(_rghvo' _rgtag' chvo);  					break;  				case DecoratorMethodTypes.OpenParagraph:  					m_vwEnv.OpenParagraph();  					break;  				case DecoratorMethodTypes.OpenTableCell:  					var nRows = (int) storedMethod.ParamArray[0];  					var nCols = (int)storedMethod.ParamArray[1];  					m_vwEnv.OpenTableCell(nRows' nCols);  					break;  				case DecoratorMethodTypes.SetIntProperty:  					var tpt = (int)storedMethod.ParamArray[0];  					var tpv = (int)storedMethod.ParamArray[1];  					var nValue = (int)storedMethod.ParamArray[2];  					m_vwEnv.set_IntProperty(tpt' tpv' nValue);  					break;  				case DecoratorMethodTypes.PropsSetter:  					var value = (ITsTextProps) storedMethod.ParamArray[0];  					m_vwEnv.Props = value;  					break;  				default:  					Debug.Assert(false' "Unknown DecoratorMethodType!");  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,RegurgitateIVwEnvCall,The following statement contains a magic number: switch (storedMethod.MethodType)  			{  				case DecoratorMethodTypes.AddObj:  					var hvo = (int)storedMethod.ParamArray[0];  					vc  = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int) storedMethod.ParamArray[2];  					m_vwEnv.AddObj(hvo' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjProp(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVec:  					tag = (int) storedMethod.ParamArray[0];  					vc = (IVwViewConstructor) storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVec(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVecItems:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVecItems(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddString:  					var tsStr = (ITsString)storedMethod.ParamArray[0];  					m_vwEnv.AddString(tsStr);  					break;  				case DecoratorMethodTypes.AddStringProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					m_vwEnv.AddStringProp(tag' vc);  					break;  				case DecoratorMethodTypes.CloseParagraph:  					m_vwEnv.CloseParagraph();  					break;  				case DecoratorMethodTypes.CloseTableCell:  					m_vwEnv.CloseTableCell();  					break;  				case DecoratorMethodTypes.NoteDependency:  					var _rghvo = (int[])storedMethod.ParamArray[0];  					var _rgtag = (int[])storedMethod.ParamArray[1];  					var chvo = (int) storedMethod.ParamArray[2];  					m_vwEnv.NoteDependency(_rghvo' _rgtag' chvo);  					break;  				case DecoratorMethodTypes.OpenParagraph:  					m_vwEnv.OpenParagraph();  					break;  				case DecoratorMethodTypes.OpenTableCell:  					var nRows = (int) storedMethod.ParamArray[0];  					var nCols = (int)storedMethod.ParamArray[1];  					m_vwEnv.OpenTableCell(nRows' nCols);  					break;  				case DecoratorMethodTypes.SetIntProperty:  					var tpt = (int)storedMethod.ParamArray[0];  					var tpv = (int)storedMethod.ParamArray[1];  					var nValue = (int)storedMethod.ParamArray[2];  					m_vwEnv.set_IntProperty(tpt' tpv' nValue);  					break;  				case DecoratorMethodTypes.PropsSetter:  					var value = (ITsTextProps) storedMethod.ParamArray[0];  					m_vwEnv.Props = value;  					break;  				default:  					Debug.Assert(false' "Unknown DecoratorMethodType!");  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,RegurgitateIVwEnvCall,The following statement contains a magic number: switch (storedMethod.MethodType)  			{  				case DecoratorMethodTypes.AddObj:  					var hvo = (int)storedMethod.ParamArray[0];  					vc  = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int) storedMethod.ParamArray[2];  					m_vwEnv.AddObj(hvo' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjProp(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVec:  					tag = (int) storedMethod.ParamArray[0];  					vc = (IVwViewConstructor) storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVec(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddObjVecItems:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					frag = (int)storedMethod.ParamArray[2];  					m_vwEnv.AddObjVecItems(tag' vc' frag);  					break;  				case DecoratorMethodTypes.AddString:  					var tsStr = (ITsString)storedMethod.ParamArray[0];  					m_vwEnv.AddString(tsStr);  					break;  				case DecoratorMethodTypes.AddStringProp:  					tag = (int)storedMethod.ParamArray[0];  					vc = (IVwViewConstructor)storedMethod.ParamArray[1];  					m_vwEnv.AddStringProp(tag' vc);  					break;  				case DecoratorMethodTypes.CloseParagraph:  					m_vwEnv.CloseParagraph();  					break;  				case DecoratorMethodTypes.CloseTableCell:  					m_vwEnv.CloseTableCell();  					break;  				case DecoratorMethodTypes.NoteDependency:  					var _rghvo = (int[])storedMethod.ParamArray[0];  					var _rgtag = (int[])storedMethod.ParamArray[1];  					var chvo = (int) storedMethod.ParamArray[2];  					m_vwEnv.NoteDependency(_rghvo' _rgtag' chvo);  					break;  				case DecoratorMethodTypes.OpenParagraph:  					m_vwEnv.OpenParagraph();  					break;  				case DecoratorMethodTypes.OpenTableCell:  					var nRows = (int) storedMethod.ParamArray[0];  					var nCols = (int)storedMethod.ParamArray[1];  					m_vwEnv.OpenTableCell(nRows' nCols);  					break;  				case DecoratorMethodTypes.SetIntProperty:  					var tpt = (int)storedMethod.ParamArray[0];  					var tpv = (int)storedMethod.ParamArray[1];  					var nValue = (int)storedMethod.ParamArray[2];  					m_vwEnv.set_IntProperty(tpt' tpv' nValue);  					break;  				case DecoratorMethodTypes.PropsSetter:  					var value = (ITsTextProps) storedMethod.ParamArray[0];  					m_vwEnv.Props = value;  					break;  				default:  					Debug.Assert(false' "Unknown DecoratorMethodType!");  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,ChartRowEnvDecorator,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstChartRowDecorator.cs,OpenParagraph,The following statement contains a magic number: m_numOfCalls += 3;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,OnLayout,The following statement contains a magic number: m_topBottomSplit.SplitterDistance = (int) (Height * .9);
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,BuildTopStuffUI,The following statement contains a magic number: m_headerMainCols = new ChartHeaderView(this) { Dock = DockStyle.Top' Height = 22 };
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,TemplateSelectionPanel_Layout,The following statement contains a magic number: templateButton.Width = new Button().Width * 2;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,BuildBottomStuffUI,The following statement contains a magic number: m_toolTip = new ToolTip { AutoPopDelay = 5000' InitialDelay = 1000' ReshowDelay = 500' ShowAlways = true };
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,BuildBottomStuffUI,The following statement contains a magic number: m_toolTip = new ToolTip { AutoPopDelay = 5000' InitialDelay = 1000' ReshowDelay = 500' ShowAlways = true };
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,BuildBottomStuffUI,The following statement contains a magic number: m_toolTip = new ToolTip { AutoPopDelay = 5000' InitialDelay = 1000' ReshowDelay = 500' ShowAlways = true };
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,BuildBottomStuffUI,The following statement contains a magic number: m_bottomStuff.Height = 100;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,MpToPixelX,The following statement contains a magic number: return (int)(dxmp * m_dxpInch / 72000);
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,PixelToMpX,The following statement contains a magic number: return (int)(dx * 72000 / m_dxpInch);
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ComputeButtonWidths,The following statement contains a magic number: int cPairs = m_buttonRow.Controls.Count / 2;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ComputeButtonWidths,The following statement contains a magic number: int widthBtnContextMenu = SIL.FieldWorks.Resources.ResourceHelper.ButtonMenuArrowIcon.Width + 10;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ComputeButtonWidths,The following statement contains a magic number: Control c = m_buttonRow.Controls[ipair * 2];
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ComputeButtonWidths,The following statement contains a magic number: c.Left = m_columnPositions[ipair + offset] + 2;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ComputeButtonWidths,The following statement contains a magic number: c.Text = GetBtnName(m_headerMainCols[ipair + offset].Text' c.Width - ((c as Button).Image.Width * 2));
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ComputeButtonWidths,The following statement contains a magic number: Control c2 = m_buttonRow.Controls[ipair * 2 + 1];
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,SetupMoveHereButtonsToMatchTemplate,The following statement contains a magic number: var btnSpace = newButton.Width - (newButton.Image.Size.Width * 2);
Magic Number,SIL.FieldWorks.Discourse,ConstituentChart,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,GetColumnOfButton,The following statement contains a magic number: int icol = btn.Parent.Controls.IndexOf(btn) / 2;
Magic Number,SIL.FieldWorks.Discourse,ChartHeaderView,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,UpdatePositions,The following statement contains a magic number: Controls.Count < 2
Magic Number,SIL.FieldWorks.Discourse,ChartHeaderView,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,OnControlAdded,The following statement contains a magic number: newColumn.Height = 22;
Magic Number,SIL.FieldWorks.Discourse,ChartHeaderView,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,OnColumnDoubleClick,The following statement contains a magic number: m_origMouseLeft < 3
Magic Number,SIL.FieldWorks.Discourse,ChartHeaderView,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,OnColumnMouseMove,The following statement contains a magic number: (e.X < 3 && header != this[0]) || (e.X > header.Width - 3)
Magic Number,SIL.FieldWorks.Discourse,ChartHeaderView,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,OnColumnMouseMove,The following statement contains a magic number: (e.X < 3 && header != this[0]) || (e.X > header.Width - 3)
Magic Number,SIL.FieldWorks.Discourse,ChartHeaderView,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,ResizeColumn,The following statement contains a magic number: m_origMouseLeft < 3
Magic Number,SIL.FieldWorks.Discourse,ChartHeaderView,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,MoveColumn,The following statement contains a magic number: header.Left < m_origHeaderLeft - 20
Magic Number,SIL.FieldWorks.Discourse,ChartHeaderView,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChart.cs,OnMouseMove,The following statement contains a magic number: e.X < this[Controls.Count - 1].Right + 3
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,HighlightChOrphPossibles,The following statement contains a magic number: int[] currHighlightCells = new int[4];
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,HighlightChOrphPossibles,The following statement contains a magic number: currHighlightCells[2] = icurrRow;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,HighlightChOrphPossibles,The following statement contains a magic number: currHighlightCells[3] = icolFoll;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,ClauseNumberFromLabel,The following statement contains a magic number: int current = Convert.ToInt32(value[0] - 'a' + 1) * (int)Math.Pow(26' value.Length - 1);
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,LabelFromClauseNumber,The following statement contains a magic number: value < 26
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,LabelFromClauseNumber,The following statement contains a magic number: char c = Convert.ToChar(value % 26);
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,LabelFromClauseNumber,The following statement contains a magic number: return LabelFromClauseNumber(value / 26) + Convert.ToChar(c + 'a');
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MakeDepClauseItem,The following statement contains a magic number: switch (irow - irowSrc)  				{  					case 1: label = DiscourseStrings.ksNextClauseMenuItem; break;  					case 2: label = DiscourseStrings.ksNextTwoClausesMenuItem; break;  					default: label = String.Format(DiscourseStrings.ksNextNClausesMenuItem' (irow - irowSrc)); break;  				}
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,itemOther_Click,The following statement contains a magic number: irow < Math.Min(iSrc + 20' m_chart.RowsOS.Count)
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,IsHighlightedCell,The following statement contains a magic number: int irowFoll = CurrHighlightCells[2];
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,IsHighlightedCell,The following statement contains a magic number: int icolFoll = CurrHighlightCells[3];
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,ConvertColumnIndexToFromRtL,The following statement contains a magic number: var diff = ((Single) imaxCol)/2 - (Single)icol;
Magic Number,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,ConvertColumnIndexToFromRtL,The following statement contains a magic number: icol += (int)(diff * 2);
Magic Number,SIL.FieldWorks.Discourse,InterlinRibbon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\InterlinRibbon.cs,GetScrollOffsets,The following statement contains a magic number: dxd -= Width - RootBox.Width - 4;
Magic Number,SIL.FieldWorks.Discourse,InterlinRibbon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\InterlinRibbon.cs,GetAvailWidth,The following statement contains a magic number: return 10000000;
Magic Number,SIL.FieldWorks.Discourse,RibbonVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\InterlinRibbon.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case InterlinRibbon.kfragRibbonWordforms:  					if (hvo == 0)  						return;  					if (m_ribbon.IsRightToLeft)  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft'  							(int)FwTextPropVar.ktpvEnum' (int)FwTextToggleVal.kttvForceOn);  						vwenv.set_IntProperty((int)FwTextPropType.ktptAlign'  							(int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  					}    					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading'  						(int)FwTextPropVar.ktpvMilliPoint' 10000);    					vwenv.OpenDiv();  					vwenv.OpenParagraph();  					AddLabelPile(vwenv' m_cache' true' ShowMorphBundles);  					vwenv.AddObjVecItems(m_ribbon.OccurenceListId' this' InterlinVc.kfragBundle);  					vwenv.CloseParagraph();  					vwenv.CloseDiv();  					break;  				case kfragBundle:  					// Review: will this lead to multiple spurious blue lines?  					var realHvo = (m_ribbon.Decorator as InterlinRibbonDecorator).OccurrenceFromHvo(hvo).Analysis.Hvo;  					if (m_ribbon.SelLimOccurrence != null && m_ribbon.SelLimOccurrence.Analysis.Hvo == realHvo)  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptPadTrailing'  							(int)FwTextPropVar.ktpvMilliPoint' 5000);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing'  							(int)FwTextPropVar.ktpvMilliPoint' 2000);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderColor'  							(int)FwTextPropVar.ktpvDefault'  							(int)ColorUtil.ConvertColorToBGR(Color.Blue));  					}  					base.Display(vwenv' hvo' frag);  					break;  				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,RibbonVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\InterlinRibbon.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case InterlinRibbon.kfragRibbonWordforms:  					if (hvo == 0)  						return;  					if (m_ribbon.IsRightToLeft)  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft'  							(int)FwTextPropVar.ktpvEnum' (int)FwTextToggleVal.kttvForceOn);  						vwenv.set_IntProperty((int)FwTextPropType.ktptAlign'  							(int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  					}    					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading'  						(int)FwTextPropVar.ktpvMilliPoint' 10000);    					vwenv.OpenDiv();  					vwenv.OpenParagraph();  					AddLabelPile(vwenv' m_cache' true' ShowMorphBundles);  					vwenv.AddObjVecItems(m_ribbon.OccurenceListId' this' InterlinVc.kfragBundle);  					vwenv.CloseParagraph();  					vwenv.CloseDiv();  					break;  				case kfragBundle:  					// Review: will this lead to multiple spurious blue lines?  					var realHvo = (m_ribbon.Decorator as InterlinRibbonDecorator).OccurrenceFromHvo(hvo).Analysis.Hvo;  					if (m_ribbon.SelLimOccurrence != null && m_ribbon.SelLimOccurrence.Analysis.Hvo == realHvo)  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptPadTrailing'  							(int)FwTextPropVar.ktpvMilliPoint' 5000);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing'  							(int)FwTextPropVar.ktpvMilliPoint' 2000);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderColor'  							(int)FwTextPropVar.ktpvDefault'  							(int)ColorUtil.ConvertColorToBGR(Color.Blue));  					}  					base.Display(vwenv' hvo' frag);  					break;  				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,RibbonVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\InterlinRibbon.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case InterlinRibbon.kfragRibbonWordforms:  					if (hvo == 0)  						return;  					if (m_ribbon.IsRightToLeft)  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptRightToLeft'  							(int)FwTextPropVar.ktpvEnum' (int)FwTextToggleVal.kttvForceOn);  						vwenv.set_IntProperty((int)FwTextPropType.ktptAlign'  							(int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  					}    					vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading'  						(int)FwTextPropVar.ktpvMilliPoint' 10000);    					vwenv.OpenDiv();  					vwenv.OpenParagraph();  					AddLabelPile(vwenv' m_cache' true' ShowMorphBundles);  					vwenv.AddObjVecItems(m_ribbon.OccurenceListId' this' InterlinVc.kfragBundle);  					vwenv.CloseParagraph();  					vwenv.CloseDiv();  					break;  				case kfragBundle:  					// Review: will this lead to multiple spurious blue lines?  					var realHvo = (m_ribbon.Decorator as InterlinRibbonDecorator).OccurrenceFromHvo(hvo).Analysis.Hvo;  					if (m_ribbon.SelLimOccurrence != null && m_ribbon.SelLimOccurrence.Analysis.Hvo == realHvo)  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptPadTrailing'  							(int)FwTextPropVar.ktpvMilliPoint' 5000);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing'  							(int)FwTextPropVar.ktpvMilliPoint' 2000);  						vwenv.set_IntProperty((int)FwTextPropType.ktptBorderColor'  							(int)FwTextPropVar.ktpvDefault'  							(int)ColorUtil.ConvertColorToBGR(Color.Blue));  					}  					base.Display(vwenv' hvo' frag);  					break;  				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.Discourse,DialogInterlinRibbon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\InterlinRibbon.cs,DialogInterlinRibbon,The following statement contains a magic number: m_occurenceListId = -2012;
Missing Default,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MoveToColumn,The following switch statement is missing a default case: switch (addWhere)  				{  					case FindWhereToAddResult.kAppendToExisting:  						var endPoint = selectedWordforms[selectedWordforms.Length - 1];  						ExtendWordGroupForwardTo(wordGrpToAppendTo' endPoint);  						break;  					case FindWhereToAddResult.kInsertWordGrpInRow:  					case FindWhereToAddResult.kMakeNewRow:  						if (addWhere == FindWhereToAddResult.kMakeNewRow) // distinguishes from kInsertWordGrpInRow  							rowFinal = MakeNewRow();  						var finalCell = new ChartLocation(rowFinal' icol);  						MakeWordGroup(finalCell' position' selectedWordforms);  						break;  				}
Missing Default,SIL.FieldWorks.Discourse,ConstituentChartLogic,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\ConstituentChartLogic.cs,MoveChOrphToColumn,The following switch statement is missing a default case: switch (result)  			{  				case FindWhereToAddResult.kInsertWordGrpInRow:  					// whereToInsert gives index in CCRow Cells sequence  					MakeWordGroup(finalCell' whereToInsert' selectedWords);  					break;  				case FindWhereToAddResult.kInsertChOrphInWordGrp: // fall through (shouldn't occur)  				case FindWhereToAddResult.kAppendToExisting:  					// whereToInsert gives index in existingWordGroup occurrences  					ExpandWordGroupToInclude(existingWordGroup' selectedWords' whereToInsert > 0);  					break;  			}
Missing Default,SIL.FieldWorks.Discourse,DiscourseExportDialog,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExportDialog.cs,DoExport,The following switch statement is missing a default case: switch (mode)  					{  						case "doNothing":  							break;  						case "applySingleTransform":  							string sTransform = Path.Combine(sTransformPath' transform);  							exporter.PostProcess(sTransform' outPath' 1);  							break;  						//case "openOffice":  						//    // Generate the styles first' based on the original export file.  						//    string styleFilePath;  						//    using (TempFileCollection tempFiles = new TempFileCollection()) // wanted only to get the default temp file dir and name  						//    {  						//        styleFilePath = tempFiles.AddExtension("xml"' false);  						//    }  						//    XslCompiledTransform xsl = new XslCompiledTransform();  						//    XmlNode implementation = XmlUtils.GetFirstNonCommentChild(ddNode);  						//    string styleFileTransform = "xml2OOStyles.xsl";  						//    if (implementation != null)  						//        styleFileTransform = XmlUtils.GetOptionalAttributeValue(implementation' "styleTransform"' styleFileTransform);  						//    xsl.Load(rootDir + @"\Language Explorer\Export Templates\Interlinear\" + styleFileTransform);  						//    xsl.Transform(outPath' styleFilePath);    						//    // Now generate the content. Do this after using outPath as the source above' because it renames the file.  						//    string contentFileTransform = "xml2OO.xsl";  						//    if (implementation != null)  						//        contentFileTransform = XmlUtils.GetOptionalAttributeValue(implementation' "contentTransform"' contentFileTransform);  						//    exporter.PostProcess(rootDir + @"\Language Explorer\Export Templates\Interlinear\" + contentFileTransform' outPath' 1);  						//    string intermediateFile = CollectorEnv.RenameOutputToPassN(outPath' 2);  						//    using (FileStream outFile = new FileStream(outPath' FileMode.Create))  						//    {  						//        using (ZipOutputStream zipFile = new ZipOutputStream(outFile))  						//        {  						//            WriteFileToZipUncompressed("mimetype"' rootDir + @"\Language Explorer\Export Templates\Interlinear\mimetype"' zipFile);  						//            WriteFileToZipUncompressed("META-INF/manifest.xml"' rootDir + @"\Language Explorer\Export Templates\Interlinear\manifest.xml"' zipFile);  						//            WriteFileToZip("styles.xml"' styleFilePath' zipFile);  						//            WriteFileToZip("content.xml"' intermediateFile' zipFile);  						//            zipFile.Finish();  						//            zipFile.Close();  						//        }  						//        outFile.Close();  						//    }  						//    File.Delete(styleFilePath);  						//    File.Delete(intermediateFile);  						//    //System.IO.File.Copy(rootDir + @"\Language Explorer\Export Templates\Interlinear\EmptyOfficeDoc.odt"'  						//    //    outPath);  						//    //ZipFile OOFile = new ZipFile(outPath' ZipConstants.GZIP' System.IO.FileMode.Open);  						//    //System.IO.File.Delete("content.xml");  						//    //System.IO.File.Move(intermediateFile' "content.xml");  						//    //OOFile.Add("content.xml");  						//    ////OOFile.AddAs("content.xml"' intermediateFile);  						//    //OOFile.Close();  						//    break;  					}
Missing Default,SIL.FieldWorks.Discourse,DiscourseExporter,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,AddStringProp,The following switch statement is missing a default case: switch (tag)  			{  				case ConstChartRowTags.kflidNotes:  					WriteStringProp(tag' "note"' 0);  					break;  				case ConstChartRowTags.kflidLabel:  					switch (TopFragment)  					{  						case ConstChartVc.kfragChartRow:  							WriteStringProp(tag' "rownum"' 0);  							break;  						case ConstChartVc.kfragComment:  							WriteStringProp(tag' "clauseMkr"' 0' "target"' m_sda.get_StringProp(m_hvoCurr' tag).Text);  							break;  					}  					break;  			}
Missing Default,SIL.FieldWorks.Discourse,DiscourseExporter,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\Discourse\DiscourseExporter.cs,AddStringProp,The following switch statement is missing a default case: switch (TopFragment)  					{  						case ConstChartVc.kfragChartRow:  							WriteStringProp(tag' "rownum"' 0);  							break;  						case ConstChartVc.kfragComment:  							WriteStringProp(tag' "clauseMkr"' 0' "target"' m_sda.get_StringProp(m_hvoCurr' tag).Text);  							break;  					}
