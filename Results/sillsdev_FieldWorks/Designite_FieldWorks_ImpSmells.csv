Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,Main,The method has 193 lines of code.
Long Method,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,ShowWelcomeDialog,The method has 156 lines of code.
Long Method,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,MoveProjectFolders,The method has 113 lines of code.
Long Method,SIL.FieldWorks,WelcomeToFieldWorksDlg,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\WelcomeToFieldWorksDlg.Designer.cs,InitializeComponent,The method has 190 lines of code.
Complex Method,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,Main,Cyclomatic complexity of the method is 14
Complex Method,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,MustCopyFoldersAndFiles,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,SetupErrorReportInformation,Cyclomatic complexity of the method is 8
Long Parameter List,SIL.FieldWorks,WindowsInstallerQuery,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,MsiGetFeatureInfo,The method has 7 parameters. Parameters: hProduct' szFeature' lpAttributes' lpTitleBuf' cchTitleBuf' lpHelpBuf' cchHelpBuf
Long Parameter List,SIL.FieldWorks.LexicalProvider,LexicalProviderImpl,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderImpl.cs,AddGlossToSense,The method has 6 parameters. Parameters: type' lexicalForm' homograph' senseId' language' text
Long Parameter List,SIL.FieldWorks.LexicalProvider,LexicalProviderImpl,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderImpl.cs,RemoveGloss,The method has 5 parameters. Parameters: type' lexicalForm' homograph' senseId' language
Long Parameter List,SIL.FieldWorks.LexicalProvider,ILexicalProvider,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\ILexicalProvider.cs,AddGlossToSense,The method has 6 parameters. Parameters: type' lexicalForm' homograph' senseId' language' text
Long Parameter List,SIL.FieldWorks.LexicalProvider,ILexicalProvider,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\ILexicalProvider.cs,RemoveGloss,The method has 5 parameters. Parameters: type' lexicalForm' homograph' senseId' language
Long Parameter List,SIL.FieldWorks.PaObjects,PaLexicalInfo,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\PaObjects\PaLexicalInfo.cs,ShowOpenProject,The method has 5 parameters. Parameters: owner' dialogBounds' dialogSplitterPos' name' server
Long Parameter List,SIL.FieldWorks.PaObjects,PaLexicalInfo,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\PaObjects\PaLexicalInfo.cs,InternalInitialize,The method has 5 parameters. Parameters: name' server' loadOnlyWs' timeToWaitForProcessStart' timeToWaitForLoadingData
Long Parameter List,SIL.FieldWorks.PaObjects,PaLexicalInfo,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\PaObjects\PaLexicalInfo.cs,LoadFwDataForPa,The method has 7 parameters. Parameters: requestor' name' server' loadOnlyWs' timeToWaitForLoadingData' newProcessStarted' foundFwProcess
Long Identifier,SIL.FieldWorks,WelcomeToFieldWorksDlg,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\WelcomeToFieldWorksDlg.Designer.cs,,The length of the parameter m_sampleOrLastProjectLinkLabel is 30.
Long Identifier,SIL.FieldWorks.LexicalProvider,LexicalServiceProvider,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalServiceProvider.cs,,The length of the parameter kSupportedLexicalProviderVersion is 32.
Long Statement,SIL.FieldWorks,MoveProjectsDlg,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\MoveProjectsDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MoveProjectsDlg)); " is 135.
Long Statement,SIL.FieldWorks,ProjectId,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ProjectId.cs,CleanUpNameForType,The length of the statement  "			if (SysPath.GetExtension(name) != ext && (FileUtils.SimilarFileExists(name + ext) || !FileUtils.SimilarFileExists(name))) " is 121.
Long Statement,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,Main,The length of the statement  "					reportingSettings.OkToPingBasicUsageData = feedbackEnvVar.ToLower().Equals("true") || feedbackEnvVar.ToLower().Equals("yes"); " is 125.
Long Statement,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,EnsureValidLinkedFilesFolder,The length of the statement  "				MessageBox.Show(String.Format(Properties.Resources.ksInvalidLinkedFilesFolder' linkedFilesFolder)' Properties.Resources.ksErrorCaption); " is 136.
Long Statement,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,ShowWelcomeDialog,The length of the statement  "				using (WelcomeToFieldWorksDlg dlg = new WelcomeToFieldWorksDlg(helpTopicProvider' exception' s_noPreviousReportingSettings)) " is 124.
Long Statement,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,UpdateProjectsLocation,The length of the statement  "				ExecuteWithAllFwProcessesShutDown(() => MoveProjectFolders(oldFolderForProjects' newFolderForProjects' projectPath' oldProjectId)); " is 131.
Long Statement,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,MoveProjectFolders,The length of the statement  "				progressDlg.Title = string.Format(Properties.Resources.ksMovingProjectsCaption' oldFolderForProjects' newFolderForProjects); " is 124.
Long Statement,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,IsFieldWorksProjectFolder,The length of the statement  "			var projectFileName = Path.ChangeExtension(Path.Combine(projectFolder' projectName)' LcmFileHelper.ksFwDataXmlFileExtension); " is 125.
Long Statement,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,RestoreCurrentProject,The length of the statement  "						var restoreService = new ProjectRestoreService(restoreSettings.Settings' s_ui' FwDirectoryFinder.ConverterConsoleExe' FwDirectoryFinder.DbExe); " is 143.
Long Statement,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,RestoreCurrentProject,The length of the statement  "						if (RestoreProjectDlg.HandleRestoreFileErrors(null' restoreSettings.Settings.Backup.File' () => DoRestore(restoreService))) " is 123.
Long Statement,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,BackupProjectForRestore,The length of the statement  "						if (MessageBox.Show(msg' FwCoreDlgs.FwCoreDlgs.ksWarning' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) != DialogResult.Yes) " is 127.
Long Statement,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,CreateLcmSettings,The length of the statement  "				sharedXmlBackendCommitLogSize = (int) FwRegistryHelper.FieldWorksRegistryKey.GetValue("SharedXMLBackendCommitLogSize"' 0); " is 122.
Long Statement,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,CreateLcmSettings,The length of the statement  "				sharedXmlBackendCommitLogSize = (int) FwRegistryHelper.FieldWorksRegistryKeyLocalMachine.GetValue("SharedXMLBackendCommitLogSize"' 0); " is 134.
Long Statement,SIL.FieldWorks,WelcomeToFieldWorksDlg,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\WelcomeToFieldWorksDlg.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(WelcomeToFieldWorksDlg)); " is 142.
Long Statement,SIL.FieldWorks,WelcomeToFieldWorksDlg,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\WelcomeToFieldWorksDlg.Designer.cs,InitializeComponent,The length of the statement  "			this.m_openSampleOrLastProjectLink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.m_openProjectLink_LinkClicked); " is 144.
Long Statement,SIL.FieldWorks.LexicalProvider,LexicalProviderImpl,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderImpl.cs,ShowEntry,The length of the statement  "					LexEntryUi.DisplayEntry(FieldWorks.Cache' mediator' propertyTable' propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")' " is 131.
Long Statement,SIL.FieldWorks.LexicalProvider,LexicalProviderImpl,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderImpl.cs,ShowRelatedWords,The length of the statement  "					LexEntryUi.DisplayRelatedEntries(FieldWorks.Cache' mediator' propertyTable' propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")' " is 140.
Long Statement,SIL.FieldWorks.LexicalProvider,LexicalProviderImpl,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderImpl.cs,AddGlossToSense,The length of the statement  "						dbAnalysis.ApprovalStatusIcon = (int)Opinions.approves; // Assume the analysis from the external application is user approved " is 125.
Long Statement,SIL.FieldWorks.LexicalProvider,LexicalServiceProvider,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalServiceProvider.cs,GetProviderLocation,The length of the statement  "				var url = LexicalProviderManager.UrlPrefix + LexicalProviderManager.FixPipeHandle(FwUtils.GeneratePipeHandle(projhandle + ":LP")); " is 130.
Complex Conditional,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,SafelyReportException,The conditional expression  "parent != null && parent.App != null && parent.App == s_flexApp && s_flexAppKey != null"  is complex.
Complex Conditional,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,DetermineProject,The conditional expression  "(String.IsNullOrEmpty(projId.Name) || projectOpenError != null) &&  				previousStartupStatus != StartupStatus.Failed && !String.IsNullOrEmpty(latestProject)"  is complex.
Complex Conditional,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,DetermineProject,The conditional expression  "fOpenLastEditedProject && projId.IsValid && projectOpenError == null  				&& previousStartupStatus == StartupStatus.Successful"  is complex.
Empty Catch Block,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,StartFwApp,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,DisplayError,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,ShutdownApp,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,RecordLastAppForProject,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,RecordLastAppForProject,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,RecordLastAppForProject,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,RunOnRemoteClients,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,WriteExecutablePathSettingForDevs,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,ReopenProject,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks,RemoteRequest,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\RemoteRequest.cs,BringMainFormToFront,The method has an empty catch block.
Magic Number,SIL.FieldWorks,ApplicationBusyDialog,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ApplicationBusyDialog.cs,WaitForOtherApp,The following statement contains a magic number: do  			{  				Application.DoEvents();    				Thread.Sleep(333);    				if (m_fCancelPressed)  					break;  				switch (m_whatToWaitFor)  				{  					case WaitFor.WindowToActivate:  						readyToRoll = (m_appToStart.MainWindows.Count > 0);  						break;  					case WaitFor.OtherBusyApp:  						readyToRoll = !DataUpdateMonitor.IsUpdateInProgress();  						break;  					case WaitFor.ModalDialogsToClose:  						readyToRoll = !m_appToWaitFor.IsModalDialogOpen;  						break;  				}  			}  			while (!readyToRoll);
Magic Number,SIL.FieldWorks,ApplicationBusyDialog,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ApplicationBusyDialog.cs,InitializeComponent,The following statement contains a magic number: this.m_btnCancel.Location = new System.Drawing.Point(290' 75);
Magic Number,SIL.FieldWorks,ApplicationBusyDialog,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ApplicationBusyDialog.cs,InitializeComponent,The following statement contains a magic number: this.m_btnCancel.Location = new System.Drawing.Point(290' 75);
Magic Number,SIL.FieldWorks,ApplicationBusyDialog,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ApplicationBusyDialog.cs,InitializeComponent,The following statement contains a magic number: this.m_btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks,ApplicationBusyDialog,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ApplicationBusyDialog.cs,InitializeComponent,The following statement contains a magic number: this.m_btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks,ApplicationBusyDialog,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ApplicationBusyDialog.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Location = new System.Drawing.Point(12' 9);
Magic Number,SIL.FieldWorks,ApplicationBusyDialog,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ApplicationBusyDialog.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Location = new System.Drawing.Point(12' 9);
Magic Number,SIL.FieldWorks,ApplicationBusyDialog,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ApplicationBusyDialog.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Size = new System.Drawing.Size(631' 63);
Magic Number,SIL.FieldWorks,ApplicationBusyDialog,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ApplicationBusyDialog.cs,InitializeComponent,The following statement contains a magic number: this.m_lblMessage.Size = new System.Drawing.Size(631' 63);
Magic Number,SIL.FieldWorks,ApplicationBusyDialog,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ApplicationBusyDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(655' 105);
Magic Number,SIL.FieldWorks,ApplicationBusyDialog,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ApplicationBusyDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(655' 105);
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,Main,The following statement contains a magic number: Icu.Wrapper.ConfineIcuVersions(54);
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,Main,The following statement contains a magic number: try  			{  #region Initialize XULRunner - required to use the geckofx WebBrowser Control (GeckoWebBrowser).  				var exePath = Path.GetDirectoryName(Application.ExecutablePath);  				Xpcom.Initialize(Path.Combine(exePath' "Firefox"));  				GeckoPreferences.User["gfx.font_rendering.graphite.enabled"] = true;  				// Set default browser for XWebBrowser to use GeckoFX.  				// This can still be changed per instance by passing a parameter to the constructor.  				XWebBrowser.DefaultBrowserType = XWebBrowser.BrowserType.GeckoFx;  #endregion Initialize XULRunner    				Logger.WriteEvent("Starting app");  				SetGlobalExceptionHandler();  				SetupErrorReportInformation();    				// Invoke does nothing directly' but causes BroadcastEventWindow to be initialized  				// on this thread to prevent race conditions on shutdown.See TE-975  				// See http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=911603&SiteID=1  				// TODO-Linux: uses mono feature that is not implemented. What are the implications of this? Review.  				if (MiscUtils.IsDotNet)  					SystemEvents.InvokeOnEventsThread(new Action(DoNothing));    				s_threadHelper = new ThreadHelper();    				// ENHANCE (TimS): Another idea for ensuring that we have only one process started for  				// this project is to use a Mutex. They can be used for cross-process resource access  				// and would probably be less error-prone then our current implementation since it  				// doesn't use TCP connections which can get hampered by firewalls. We would probably still  				// need our current listener functionality for communicating with the other FW process'  				// so it may not buy us much.  				// See http://kristofverbiest.blogspot.com/2008/11/creating-single-instance-application.html.    				// Make sure we do this ASAP. If another FieldWorks.exe is started we need  				// to make sure it can find this one to ask about its project. (FWR-595)  				CreateRemoteRequestListener();    #if DEBUG  				WriteExecutablePathSettingForDevs();  #endif    				if (IsInSingleFWProccessMode())  				{  					Logger.WriteEvent("Exiting: Detected single process mode");  					return 0;  				}    				if (MigrateProjectsTo70())  				{  					Logger.WriteEvent("Migration to Version 7 was still needed.");  				}    				// Enable visual styles. Ignored on Windows 2000. Needs to be called before  				// we create any controls! Unfortunately' this alone is not good enough. We  				// also need to use a manifest' because some ListView and TreeView controls  				// in native code do not have icons if we just use this method. This is caused  				// by a bug in XP.  				Application.EnableVisualStyles();    				// Set ICU_DATA environment variable  				SetIcuDataDirEnvironmentVariable();    				// initialize ICU  				LCModel.Core.Text.Icu.InitIcuDataDir();    				// initialize the SLDR  				Sldr.Initialize();    				// initialize Palaso keyboarding  				KeyboardController.Initialize();    				FwAppArgs appArgs = new FwAppArgs(rgArgs);  				s_noUserInterface = appArgs.NoUserInterface;  				s_appServerMode = appArgs.AppServerMode;    				s_ui = new FwLcmUI(GetHelpTopicProvider()' s_threadHelper);    				s_appSettings = new FwApplicationSettings();  				s_appSettings.DeleteCorruptedSettingsFilesIfPresent();  				s_appSettings.UpgradeIfNecessary();    				ReportingSettings reportingSettings = s_appSettings.Reporting;  				if (reportingSettings == null)  				{  					// Note: to simulate this' currently it works to delete all subfolders of  					// (e.g.) C:\Users\thomson\AppData\Local\SIL\FieldWorks.exe_Url_tdkbegygwiuamaf3mokxurci022yv1kn  					// That guid may depend on version or something similar; it's some artifact of how the Settings persists.  					s_noPreviousReportingSettings = true;  					reportingSettings = new ReportingSettings();  					s_appSettings.Reporting = reportingSettings; //to avoid a defect in Settings rely on the Save in the code below  				}    				// Allow develpers and testers to avoid cluttering our analytics by setting an environment variable (FEEDBACK = false)  				string feedbackEnvVar = Environment.GetEnvironmentVariable("FEEDBACK");  				if (feedbackEnvVar != null)  				{  					reportingSettings.OkToPingBasicUsageData = feedbackEnvVar.ToLower().Equals("true") || feedbackEnvVar.ToLower().Equals("yes");  				}    				// Note that in FLEx we are using this flag to indicate whether we can send usage data at all.  				// Despite its name' Cambell says this is the original intent (I think there may have been  				// some thought of adding flags one day to control sending more detailed info' but if 'basic  				// navigation' is suppressed nothing is sent). May want to consider renaming to something like  				// OkToPingAtAll' but that affects other Palaso clients.  				// The usage reporter does not currently send anything at all if the flag is false' but to make  				// sure' we don't even initialize reporting if it is false.  				// (Note however that it starts out true. Thus' typically a few pings will be sent  				// on the very first startup' before the user gets a chance to disable it.)  				if (reportingSettings.OkToPingBasicUsageData)  				{  					UsageReporter.Init(reportingSettings' "flex.palaso.org"' "UA-39238981-3"'  #if DEBUG  						true  #else  						false  #endif  						);  					// Init updates various things in the ReportingSettings' such as the number of times  					// the application has been launched and the 'previous' version.  					s_appSettings.Save();  				}    				// e.g. the first time the user runs FW9' we need to copy a bunch of registry keys  				// from HKCU/Software/SIL/FieldWorks/7.0 -> FieldWorks/9 or  				// from HKCU/Software/SIL/FieldWorks/8 -> FieldWorks/9  				FwRegistryHelper.UpgradeUserSettingsIfNeeded();    				if (appArgs.ShowHelp)  				{  					ShowCommandLineHelp();  					return 0;  				}  				else if (!string.IsNullOrEmpty(appArgs.ChooseProjectFile))  				{  					ProjectId projId = ChooseLangProject(null' GetHelpTopicProvider());  					if (projId == null)  						return 1; // User probably canceled  					try  					{  						// Use PipeHandle because this will probably be used to locate a named pipe using  						// PipeHandle as the identifier.  						File.WriteAllText(appArgs.ChooseProjectFile' projId.Handle' Encoding.UTF8);  					}  					catch (Exception e)  					{  						Logger.WriteError(e);  						return 2;  					}  					return 0;  				}    				if (!SetUICulture(appArgs))  					return 0; // Error occurred and user chose not to continue.    				if (FwRegistryHelper.FieldWorksRegistryKeyLocalMachine == null && FwRegistryHelper.FieldWorksRegistryKey == null)  				{  					// See LT-14461. Some users have managed to get their computers into a state where  					// neither HKML nor HKCU registry entries can be read. We don't know how this is possible.  					// This is so far the best we can do.  					var expected = "HKEY_LOCAL_MACHINE/Software/SIL/FieldWorks/" + FwRegistryHelper.FieldWorksRegistryKeyName;  					MessageBoxUtils.Show(string.Format(Properties.Resources.ksHklmProblem' expected)' Properties.Resources.ksHklmCaption);  					return 0;  				}    				s_fwManager = new FieldWorksManager();    				if (!string.IsNullOrEmpty(appArgs.BackupFile))  				{  					LaunchRestoreFromCommandLine(appArgs);  					if (s_flexApp == null)  						return 0; // Restore was cancelled or failed' or another process took care of it.  					if (!string.IsNullOrEmpty(s_LinkDirChangedTo))  					{  						NonUndoableUnitOfWorkHelper.Do(s_cache.ActionHandlerAccessor'  							() => s_cache.LangProject.LinkedFilesRootDir = s_LinkDirChangedTo);  					}  				}  				else if (!LaunchApplicationFromCommandLine(appArgs))  					return 0; // Didn't launch' but probably not a serious error    				// Create a listener for this project for applications using FLEx as a LexicalProvider.  				LexicalProviderManager.StartLexicalServiceProvider(s_projectId' s_cache);    				if (MiscUtils.IsMono)  					UglyHackForXkbIndicator();    				// Application was started successfully' so start the message loop  				Application.Run();  			}  			catch (ApplicationException ex)  			{  				MessageBox.Show(ex.Message' FwUtils.ksSuiteName);  				return 2;  			}  			catch (Exception ex)  			{  				SafelyReportException(ex' s_activeMainWnd' true);  				return 2;  			}  			finally  			{  				StaticDispose();  				if (Xpcom.IsInitialized)  				{  					// The following line appears to be necessary to keep Xpcom.Shutdown()  					// from triggering a scary looking "double free or corruption" message most  					// of the time.  But the Xpcom.Shutdown() appears to be needed to keep the  					// program from hanging around sometimes after it supposedly exits.  					// Doing the shutdown here seems cleaner than using an ApplicationExit  					// delegate.  					var foo = new GeckoWebBrowser();  					Xpcom.Shutdown(); // REVIEW pH 2016.07: likely not necessary with Gecko45  				}  			}
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,Main,The following statement contains a magic number: try  			{  #region Initialize XULRunner - required to use the geckofx WebBrowser Control (GeckoWebBrowser).  				var exePath = Path.GetDirectoryName(Application.ExecutablePath);  				Xpcom.Initialize(Path.Combine(exePath' "Firefox"));  				GeckoPreferences.User["gfx.font_rendering.graphite.enabled"] = true;  				// Set default browser for XWebBrowser to use GeckoFX.  				// This can still be changed per instance by passing a parameter to the constructor.  				XWebBrowser.DefaultBrowserType = XWebBrowser.BrowserType.GeckoFx;  #endregion Initialize XULRunner    				Logger.WriteEvent("Starting app");  				SetGlobalExceptionHandler();  				SetupErrorReportInformation();    				// Invoke does nothing directly' but causes BroadcastEventWindow to be initialized  				// on this thread to prevent race conditions on shutdown.See TE-975  				// See http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=911603&SiteID=1  				// TODO-Linux: uses mono feature that is not implemented. What are the implications of this? Review.  				if (MiscUtils.IsDotNet)  					SystemEvents.InvokeOnEventsThread(new Action(DoNothing));    				s_threadHelper = new ThreadHelper();    				// ENHANCE (TimS): Another idea for ensuring that we have only one process started for  				// this project is to use a Mutex. They can be used for cross-process resource access  				// and would probably be less error-prone then our current implementation since it  				// doesn't use TCP connections which can get hampered by firewalls. We would probably still  				// need our current listener functionality for communicating with the other FW process'  				// so it may not buy us much.  				// See http://kristofverbiest.blogspot.com/2008/11/creating-single-instance-application.html.    				// Make sure we do this ASAP. If another FieldWorks.exe is started we need  				// to make sure it can find this one to ask about its project. (FWR-595)  				CreateRemoteRequestListener();    #if DEBUG  				WriteExecutablePathSettingForDevs();  #endif    				if (IsInSingleFWProccessMode())  				{  					Logger.WriteEvent("Exiting: Detected single process mode");  					return 0;  				}    				if (MigrateProjectsTo70())  				{  					Logger.WriteEvent("Migration to Version 7 was still needed.");  				}    				// Enable visual styles. Ignored on Windows 2000. Needs to be called before  				// we create any controls! Unfortunately' this alone is not good enough. We  				// also need to use a manifest' because some ListView and TreeView controls  				// in native code do not have icons if we just use this method. This is caused  				// by a bug in XP.  				Application.EnableVisualStyles();    				// Set ICU_DATA environment variable  				SetIcuDataDirEnvironmentVariable();    				// initialize ICU  				LCModel.Core.Text.Icu.InitIcuDataDir();    				// initialize the SLDR  				Sldr.Initialize();    				// initialize Palaso keyboarding  				KeyboardController.Initialize();    				FwAppArgs appArgs = new FwAppArgs(rgArgs);  				s_noUserInterface = appArgs.NoUserInterface;  				s_appServerMode = appArgs.AppServerMode;    				s_ui = new FwLcmUI(GetHelpTopicProvider()' s_threadHelper);    				s_appSettings = new FwApplicationSettings();  				s_appSettings.DeleteCorruptedSettingsFilesIfPresent();  				s_appSettings.UpgradeIfNecessary();    				ReportingSettings reportingSettings = s_appSettings.Reporting;  				if (reportingSettings == null)  				{  					// Note: to simulate this' currently it works to delete all subfolders of  					// (e.g.) C:\Users\thomson\AppData\Local\SIL\FieldWorks.exe_Url_tdkbegygwiuamaf3mokxurci022yv1kn  					// That guid may depend on version or something similar; it's some artifact of how the Settings persists.  					s_noPreviousReportingSettings = true;  					reportingSettings = new ReportingSettings();  					s_appSettings.Reporting = reportingSettings; //to avoid a defect in Settings rely on the Save in the code below  				}    				// Allow develpers and testers to avoid cluttering our analytics by setting an environment variable (FEEDBACK = false)  				string feedbackEnvVar = Environment.GetEnvironmentVariable("FEEDBACK");  				if (feedbackEnvVar != null)  				{  					reportingSettings.OkToPingBasicUsageData = feedbackEnvVar.ToLower().Equals("true") || feedbackEnvVar.ToLower().Equals("yes");  				}    				// Note that in FLEx we are using this flag to indicate whether we can send usage data at all.  				// Despite its name' Cambell says this is the original intent (I think there may have been  				// some thought of adding flags one day to control sending more detailed info' but if 'basic  				// navigation' is suppressed nothing is sent). May want to consider renaming to something like  				// OkToPingAtAll' but that affects other Palaso clients.  				// The usage reporter does not currently send anything at all if the flag is false' but to make  				// sure' we don't even initialize reporting if it is false.  				// (Note however that it starts out true. Thus' typically a few pings will be sent  				// on the very first startup' before the user gets a chance to disable it.)  				if (reportingSettings.OkToPingBasicUsageData)  				{  					UsageReporter.Init(reportingSettings' "flex.palaso.org"' "UA-39238981-3"'  #if DEBUG  						true  #else  						false  #endif  						);  					// Init updates various things in the ReportingSettings' such as the number of times  					// the application has been launched and the 'previous' version.  					s_appSettings.Save();  				}    				// e.g. the first time the user runs FW9' we need to copy a bunch of registry keys  				// from HKCU/Software/SIL/FieldWorks/7.0 -> FieldWorks/9 or  				// from HKCU/Software/SIL/FieldWorks/8 -> FieldWorks/9  				FwRegistryHelper.UpgradeUserSettingsIfNeeded();    				if (appArgs.ShowHelp)  				{  					ShowCommandLineHelp();  					return 0;  				}  				else if (!string.IsNullOrEmpty(appArgs.ChooseProjectFile))  				{  					ProjectId projId = ChooseLangProject(null' GetHelpTopicProvider());  					if (projId == null)  						return 1; // User probably canceled  					try  					{  						// Use PipeHandle because this will probably be used to locate a named pipe using  						// PipeHandle as the identifier.  						File.WriteAllText(appArgs.ChooseProjectFile' projId.Handle' Encoding.UTF8);  					}  					catch (Exception e)  					{  						Logger.WriteError(e);  						return 2;  					}  					return 0;  				}    				if (!SetUICulture(appArgs))  					return 0; // Error occurred and user chose not to continue.    				if (FwRegistryHelper.FieldWorksRegistryKeyLocalMachine == null && FwRegistryHelper.FieldWorksRegistryKey == null)  				{  					// See LT-14461. Some users have managed to get their computers into a state where  					// neither HKML nor HKCU registry entries can be read. We don't know how this is possible.  					// This is so far the best we can do.  					var expected = "HKEY_LOCAL_MACHINE/Software/SIL/FieldWorks/" + FwRegistryHelper.FieldWorksRegistryKeyName;  					MessageBoxUtils.Show(string.Format(Properties.Resources.ksHklmProblem' expected)' Properties.Resources.ksHklmCaption);  					return 0;  				}    				s_fwManager = new FieldWorksManager();    				if (!string.IsNullOrEmpty(appArgs.BackupFile))  				{  					LaunchRestoreFromCommandLine(appArgs);  					if (s_flexApp == null)  						return 0; // Restore was cancelled or failed' or another process took care of it.  					if (!string.IsNullOrEmpty(s_LinkDirChangedTo))  					{  						NonUndoableUnitOfWorkHelper.Do(s_cache.ActionHandlerAccessor'  							() => s_cache.LangProject.LinkedFilesRootDir = s_LinkDirChangedTo);  					}  				}  				else if (!LaunchApplicationFromCommandLine(appArgs))  					return 0; // Didn't launch' but probably not a serious error    				// Create a listener for this project for applications using FLEx as a LexicalProvider.  				LexicalProviderManager.StartLexicalServiceProvider(s_projectId' s_cache);    				if (MiscUtils.IsMono)  					UglyHackForXkbIndicator();    				// Application was started successfully' so start the message loop  				Application.Run();  			}  			catch (ApplicationException ex)  			{  				MessageBox.Show(ex.Message' FwUtils.ksSuiteName);  				return 2;  			}  			catch (Exception ex)  			{  				SafelyReportException(ex' s_activeMainWnd' true);  				return 2;  			}  			finally  			{  				StaticDispose();  				if (Xpcom.IsInitialized)  				{  					// The following line appears to be necessary to keep Xpcom.Shutdown()  					// from triggering a scary looking "double free or corruption" message most  					// of the time.  But the Xpcom.Shutdown() appears to be needed to keep the  					// program from hanging around sometimes after it supposedly exits.  					// Doing the shutdown here seems cleaner than using an ApplicationExit  					// delegate.  					var foo = new GeckoWebBrowser();  					Xpcom.Shutdown(); // REVIEW pH 2016.07: likely not necessary with Gecko45  				}  			}
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,Main,The following statement contains a magic number: try  			{  #region Initialize XULRunner - required to use the geckofx WebBrowser Control (GeckoWebBrowser).  				var exePath = Path.GetDirectoryName(Application.ExecutablePath);  				Xpcom.Initialize(Path.Combine(exePath' "Firefox"));  				GeckoPreferences.User["gfx.font_rendering.graphite.enabled"] = true;  				// Set default browser for XWebBrowser to use GeckoFX.  				// This can still be changed per instance by passing a parameter to the constructor.  				XWebBrowser.DefaultBrowserType = XWebBrowser.BrowserType.GeckoFx;  #endregion Initialize XULRunner    				Logger.WriteEvent("Starting app");  				SetGlobalExceptionHandler();  				SetupErrorReportInformation();    				// Invoke does nothing directly' but causes BroadcastEventWindow to be initialized  				// on this thread to prevent race conditions on shutdown.See TE-975  				// See http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=911603&SiteID=1  				// TODO-Linux: uses mono feature that is not implemented. What are the implications of this? Review.  				if (MiscUtils.IsDotNet)  					SystemEvents.InvokeOnEventsThread(new Action(DoNothing));    				s_threadHelper = new ThreadHelper();    				// ENHANCE (TimS): Another idea for ensuring that we have only one process started for  				// this project is to use a Mutex. They can be used for cross-process resource access  				// and would probably be less error-prone then our current implementation since it  				// doesn't use TCP connections which can get hampered by firewalls. We would probably still  				// need our current listener functionality for communicating with the other FW process'  				// so it may not buy us much.  				// See http://kristofverbiest.blogspot.com/2008/11/creating-single-instance-application.html.    				// Make sure we do this ASAP. If another FieldWorks.exe is started we need  				// to make sure it can find this one to ask about its project. (FWR-595)  				CreateRemoteRequestListener();    #if DEBUG  				WriteExecutablePathSettingForDevs();  #endif    				if (IsInSingleFWProccessMode())  				{  					Logger.WriteEvent("Exiting: Detected single process mode");  					return 0;  				}    				if (MigrateProjectsTo70())  				{  					Logger.WriteEvent("Migration to Version 7 was still needed.");  				}    				// Enable visual styles. Ignored on Windows 2000. Needs to be called before  				// we create any controls! Unfortunately' this alone is not good enough. We  				// also need to use a manifest' because some ListView and TreeView controls  				// in native code do not have icons if we just use this method. This is caused  				// by a bug in XP.  				Application.EnableVisualStyles();    				// Set ICU_DATA environment variable  				SetIcuDataDirEnvironmentVariable();    				// initialize ICU  				LCModel.Core.Text.Icu.InitIcuDataDir();    				// initialize the SLDR  				Sldr.Initialize();    				// initialize Palaso keyboarding  				KeyboardController.Initialize();    				FwAppArgs appArgs = new FwAppArgs(rgArgs);  				s_noUserInterface = appArgs.NoUserInterface;  				s_appServerMode = appArgs.AppServerMode;    				s_ui = new FwLcmUI(GetHelpTopicProvider()' s_threadHelper);    				s_appSettings = new FwApplicationSettings();  				s_appSettings.DeleteCorruptedSettingsFilesIfPresent();  				s_appSettings.UpgradeIfNecessary();    				ReportingSettings reportingSettings = s_appSettings.Reporting;  				if (reportingSettings == null)  				{  					// Note: to simulate this' currently it works to delete all subfolders of  					// (e.g.) C:\Users\thomson\AppData\Local\SIL\FieldWorks.exe_Url_tdkbegygwiuamaf3mokxurci022yv1kn  					// That guid may depend on version or something similar; it's some artifact of how the Settings persists.  					s_noPreviousReportingSettings = true;  					reportingSettings = new ReportingSettings();  					s_appSettings.Reporting = reportingSettings; //to avoid a defect in Settings rely on the Save in the code below  				}    				// Allow develpers and testers to avoid cluttering our analytics by setting an environment variable (FEEDBACK = false)  				string feedbackEnvVar = Environment.GetEnvironmentVariable("FEEDBACK");  				if (feedbackEnvVar != null)  				{  					reportingSettings.OkToPingBasicUsageData = feedbackEnvVar.ToLower().Equals("true") || feedbackEnvVar.ToLower().Equals("yes");  				}    				// Note that in FLEx we are using this flag to indicate whether we can send usage data at all.  				// Despite its name' Cambell says this is the original intent (I think there may have been  				// some thought of adding flags one day to control sending more detailed info' but if 'basic  				// navigation' is suppressed nothing is sent). May want to consider renaming to something like  				// OkToPingAtAll' but that affects other Palaso clients.  				// The usage reporter does not currently send anything at all if the flag is false' but to make  				// sure' we don't even initialize reporting if it is false.  				// (Note however that it starts out true. Thus' typically a few pings will be sent  				// on the very first startup' before the user gets a chance to disable it.)  				if (reportingSettings.OkToPingBasicUsageData)  				{  					UsageReporter.Init(reportingSettings' "flex.palaso.org"' "UA-39238981-3"'  #if DEBUG  						true  #else  						false  #endif  						);  					// Init updates various things in the ReportingSettings' such as the number of times  					// the application has been launched and the 'previous' version.  					s_appSettings.Save();  				}    				// e.g. the first time the user runs FW9' we need to copy a bunch of registry keys  				// from HKCU/Software/SIL/FieldWorks/7.0 -> FieldWorks/9 or  				// from HKCU/Software/SIL/FieldWorks/8 -> FieldWorks/9  				FwRegistryHelper.UpgradeUserSettingsIfNeeded();    				if (appArgs.ShowHelp)  				{  					ShowCommandLineHelp();  					return 0;  				}  				else if (!string.IsNullOrEmpty(appArgs.ChooseProjectFile))  				{  					ProjectId projId = ChooseLangProject(null' GetHelpTopicProvider());  					if (projId == null)  						return 1; // User probably canceled  					try  					{  						// Use PipeHandle because this will probably be used to locate a named pipe using  						// PipeHandle as the identifier.  						File.WriteAllText(appArgs.ChooseProjectFile' projId.Handle' Encoding.UTF8);  					}  					catch (Exception e)  					{  						Logger.WriteError(e);  						return 2;  					}  					return 0;  				}    				if (!SetUICulture(appArgs))  					return 0; // Error occurred and user chose not to continue.    				if (FwRegistryHelper.FieldWorksRegistryKeyLocalMachine == null && FwRegistryHelper.FieldWorksRegistryKey == null)  				{  					// See LT-14461. Some users have managed to get their computers into a state where  					// neither HKML nor HKCU registry entries can be read. We don't know how this is possible.  					// This is so far the best we can do.  					var expected = "HKEY_LOCAL_MACHINE/Software/SIL/FieldWorks/" + FwRegistryHelper.FieldWorksRegistryKeyName;  					MessageBoxUtils.Show(string.Format(Properties.Resources.ksHklmProblem' expected)' Properties.Resources.ksHklmCaption);  					return 0;  				}    				s_fwManager = new FieldWorksManager();    				if (!string.IsNullOrEmpty(appArgs.BackupFile))  				{  					LaunchRestoreFromCommandLine(appArgs);  					if (s_flexApp == null)  						return 0; // Restore was cancelled or failed' or another process took care of it.  					if (!string.IsNullOrEmpty(s_LinkDirChangedTo))  					{  						NonUndoableUnitOfWorkHelper.Do(s_cache.ActionHandlerAccessor'  							() => s_cache.LangProject.LinkedFilesRootDir = s_LinkDirChangedTo);  					}  				}  				else if (!LaunchApplicationFromCommandLine(appArgs))  					return 0; // Didn't launch' but probably not a serious error    				// Create a listener for this project for applications using FLEx as a LexicalProvider.  				LexicalProviderManager.StartLexicalServiceProvider(s_projectId' s_cache);    				if (MiscUtils.IsMono)  					UglyHackForXkbIndicator();    				// Application was started successfully' so start the message loop  				Application.Run();  			}  			catch (ApplicationException ex)  			{  				MessageBox.Show(ex.Message' FwUtils.ksSuiteName);  				return 2;  			}  			catch (Exception ex)  			{  				SafelyReportException(ex' s_activeMainWnd' true);  				return 2;  			}  			finally  			{  				StaticDispose();  				if (Xpcom.IsInitialized)  				{  					// The following line appears to be necessary to keep Xpcom.Shutdown()  					// from triggering a scary looking "double free or corruption" message most  					// of the time.  But the Xpcom.Shutdown() appears to be needed to keep the  					// program from hanging around sometimes after it supposedly exits.  					// Doing the shutdown here seems cleaner than using an ApplicationExit  					// delegate.  					var foo = new GeckoWebBrowser();  					Xpcom.Shutdown(); // REVIEW pH 2016.07: likely not necessary with Gecko45  				}  			}
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,CommitAndDisposeCache,The following statement contains a magic number: try  			{  				s_cache.ServiceLocator.GetInstance<IUndoStackManager>().StopSaveTimer();  				s_cache.ServiceLocator.GetInstance<IUndoStackManager>().Save();  				if (s_doingRename)  				{  					progressDlg.Message = Properties.Resources.kstidRenamingProject;  					// Give the disk and system time to update. For some reason this is  					// needed after doing a save.  					Thread.Sleep(2000);  					s_renameSuccessful = s_cache.RenameDatabase(s_renameNewName);  			}  			}  			finally  			{  				// Even if an exception is thrown during saving' we still want to dispose of  				// the cache (we'll probably be disposing it later anyways). (FWR-3179)  				s_cache.Dispose();  				s_cache = null; // Don't try to use it again  			}
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,HandleTopLevelError,The following statement contains a magic number: if (DisplayError(eventArgs.Exception' false))  			{  				FwApp.InCrashedState = true;  				Application.Exit();    				// just to be sure  				Thread.Sleep(5000); // 5s  				using (var process = Process.GetCurrentProcess())  					process.Kill();  			}
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,CheckForMovingExternalLinkDirectory,The following statement contains a magic number: if (launchesFlex != 9)  				return;
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,IsInSingleFWProccessMode,The following statement contains a magic number: return RunOnRemoteClients(kFwRemoteRequest' requestor =>  			{  				Func<bool> invoker = requestor.InSingleProcessMode;  				IAsyncResult ar = invoker.BeginInvoke(null' null);  				while (!ar.IsCompleted)  				{  					if (!ar.AsyncWaitHandle.WaitOne(9000' false))  						return false; // Just continue on  				}  				// We can now ask for the answer.  				if (invoker.EndInvoke(ar))  				{  					requestor.BringMainFormToFront();  					return true; // Should kill this process  				}  				return false; // Need to check the other FW processes  			});
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,TryFindExistingProcess,The following statement contains a magic number: return RunOnRemoteClients(kFwRemoteRequest' requestor =>  			{  				ProjectMatch isMyProject;  				Func<ProjectId' FwAppArgs' ProjectMatch> invoker = requestor.HandleOpenProjectRequest;  				var start = DateTime.Now;  				do  				{  					IAsyncResult ar = invoker.BeginInvoke(project' args' null' null);  					while (!ar.IsCompleted)  					{  						s_fWaitingForUserOrOtherFw = true;  						// Wait until this process knows which project it is loading.  						if (!ar.AsyncWaitHandle.WaitOne(9000' false))  						{  							// timed out.  							if (MessageBox.Show(Properties.Resources.kstidFieldWorksDidNotRespond' Properties.Resources.kstidStartupProblem'  								MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.No)  							{  								return true;  							}  						}  					}  					// We can now ask for the answer.  					isMyProject = invoker.EndInvoke(ar);    					if (isMyProject == ProjectMatch.SingleProcessMode)  					{  						Logger.WriteEvent("WEIRD! Detected single FW process mode while this process is trying to open a project.");  						Debug.Fail("We don't think this can happen' but it's no big deal.");  						return true; // Should kill this process  					}  					if (DateTime.Now - start > new TimeSpan(0' 0' 10))  					{  						// Some other process apparently keeps telling us it doesn't know. It's probably stuck in this same loop'  						// waiting for us!  						MessageBox.Show(Properties.Resources.kstidFieldWorksRespondedNotSure' Properties.Resources.kstidStartupProblem'  							MessageBoxButtons.OK' MessageBoxIcon.Warning);  						return true; // pretends some other process has the project opened and is handling the request; this process will quit  					}  				} while (isMyProject == ProjectMatch.DontKnowYet);    				s_fWaitingForUserOrOtherFw = false;  				return (isMyProject == ProjectMatch.ItsMyProject);  			});
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,TryFindExistingProcess,The following statement contains a magic number: return RunOnRemoteClients(kFwRemoteRequest' requestor =>  			{  				ProjectMatch isMyProject;  				Func<ProjectId' FwAppArgs' ProjectMatch> invoker = requestor.HandleOpenProjectRequest;  				var start = DateTime.Now;  				do  				{  					IAsyncResult ar = invoker.BeginInvoke(project' args' null' null);  					while (!ar.IsCompleted)  					{  						s_fWaitingForUserOrOtherFw = true;  						// Wait until this process knows which project it is loading.  						if (!ar.AsyncWaitHandle.WaitOne(9000' false))  						{  							// timed out.  							if (MessageBox.Show(Properties.Resources.kstidFieldWorksDidNotRespond' Properties.Resources.kstidStartupProblem'  								MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.No)  							{  								return true;  							}  						}  					}  					// We can now ask for the answer.  					isMyProject = invoker.EndInvoke(ar);    					if (isMyProject == ProjectMatch.SingleProcessMode)  					{  						Logger.WriteEvent("WEIRD! Detected single FW process mode while this process is trying to open a project.");  						Debug.Fail("We don't think this can happen' but it's no big deal.");  						return true; // Should kill this process  					}  					if (DateTime.Now - start > new TimeSpan(0' 0' 10))  					{  						// Some other process apparently keeps telling us it doesn't know. It's probably stuck in this same loop'  						// waiting for us!  						MessageBox.Show(Properties.Resources.kstidFieldWorksRespondedNotSure' Properties.Resources.kstidStartupProblem'  							MessageBoxButtons.OK' MessageBoxIcon.Warning);  						return true; // pretends some other process has the project opened and is handling the request; this process will quit  					}  				} while (isMyProject == ProjectMatch.DontKnowYet);    				s_fWaitingForUserOrOtherFw = false;  				return (isMyProject == ProjectMatch.ItsMyProject);  			});
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,CreateRemoteRequestListener,The following statement contains a magic number: IDictionary dict = new Hashtable(2);
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,CreateRemoteRequestListener,The following statement contains a magic number: int maxPort = kStartingPort + 100;
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,RunOnRemoteClients,The following statement contains a magic number: int maxPort = kStartingPort + processes.Count * 4;
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,CreateRequestor,The following statement contains a magic number: if (!ar.AsyncWaitHandle.WaitOne(1000' false))  				return null;
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,SetupErrorReportInformation,The following statement contains a magic number: ulong mem = MiscUtils.GetPhysicalMemoryBytes() / 1048576;
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,SetupErrorReportInformation,The following statement contains a magic number: diskFree /= 1073742;
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,SetupErrorReportInformation,The following statement contains a magic number: diskSize /= 1073742;
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,SetupErrorReportInformation,The following statement contains a magic number: using (Bitmap bm = new Bitmap(10' 10))  			{    				ErrorReporter.AddProperty("ScreenDpiX"' bm.HorizontalResolution.ToString());  				ErrorReporter.AddProperty("ScreenDpiY"' bm.VerticalResolution.ToString());  			}
Magic Number,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,SetupErrorReportInformation,The following statement contains a magic number: using (Bitmap bm = new Bitmap(10' 10))  			{    				ErrorReporter.AddProperty("ScreenDpiX"' bm.HorizontalResolution.ToString());  				ErrorReporter.AddProperty("ScreenDpiY"' bm.VerticalResolution.ToString());  			}
Magic Number,SIL.FieldWorks.LexicalProvider,LexicalProviderManager,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderManager.cs,StartProvider,The following statement contains a magic number: try  			{  				providerHost = new ServiceHost(provider);  				// Named pipes are better for Windows...don't tie up a dedicated port and perform better.  				// However' Mono does not yet support them' so on Mono we use a different binding.  				// Note that any attempt to unify these will require parallel changes in Paratext  				// and some sort of coordinated release of the new versions.  #if __MonoCS__  				BasicHttpBinding binding = new BasicHttpBinding();  #else  				NetNamedPipeBinding binding = new NetNamedPipeBinding();  				binding.Security.Mode = NetNamedPipeSecurityMode.None;  #endif  				binding.MaxBufferSize *= 4;  				binding.MaxReceivedMessageSize *= 4;  				binding.MaxBufferPoolSize *= 2;  				binding.ReaderQuotas.MaxBytesPerRead *= 4;  				binding.ReaderQuotas.MaxArrayLength *= 4;  				binding.ReaderQuotas.MaxDepth *= 4;  				binding.ReaderQuotas.MaxNameTableCharCount *= 4;  				binding.ReaderQuotas.MaxStringContentLength *= 4;    				providerHost.AddServiceEndpoint(providerType' binding' sNamedPipe);  				providerHost.Open();  			}  			catch (Exception e)  			{  				Logger.WriteError(e);  				providerHost = null;  				if (ScriptureProvider.IsInstalled)  				{  					MessageBox.Show(PtCommunicationProb' PtCommunicationProbTitle'  						MessageBoxButtons.OK' MessageBoxIcon.Information);  				}  				return;  			}
Magic Number,SIL.FieldWorks.LexicalProvider,LexicalProviderManager,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderManager.cs,StartProvider,The following statement contains a magic number: try  			{  				providerHost = new ServiceHost(provider);  				// Named pipes are better for Windows...don't tie up a dedicated port and perform better.  				// However' Mono does not yet support them' so on Mono we use a different binding.  				// Note that any attempt to unify these will require parallel changes in Paratext  				// and some sort of coordinated release of the new versions.  #if __MonoCS__  				BasicHttpBinding binding = new BasicHttpBinding();  #else  				NetNamedPipeBinding binding = new NetNamedPipeBinding();  				binding.Security.Mode = NetNamedPipeSecurityMode.None;  #endif  				binding.MaxBufferSize *= 4;  				binding.MaxReceivedMessageSize *= 4;  				binding.MaxBufferPoolSize *= 2;  				binding.ReaderQuotas.MaxBytesPerRead *= 4;  				binding.ReaderQuotas.MaxArrayLength *= 4;  				binding.ReaderQuotas.MaxDepth *= 4;  				binding.ReaderQuotas.MaxNameTableCharCount *= 4;  				binding.ReaderQuotas.MaxStringContentLength *= 4;    				providerHost.AddServiceEndpoint(providerType' binding' sNamedPipe);  				providerHost.Open();  			}  			catch (Exception e)  			{  				Logger.WriteError(e);  				providerHost = null;  				if (ScriptureProvider.IsInstalled)  				{  					MessageBox.Show(PtCommunicationProb' PtCommunicationProbTitle'  						MessageBoxButtons.OK' MessageBoxIcon.Information);  				}  				return;  			}
Magic Number,SIL.FieldWorks.LexicalProvider,LexicalProviderManager,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderManager.cs,StartProvider,The following statement contains a magic number: try  			{  				providerHost = new ServiceHost(provider);  				// Named pipes are better for Windows...don't tie up a dedicated port and perform better.  				// However' Mono does not yet support them' so on Mono we use a different binding.  				// Note that any attempt to unify these will require parallel changes in Paratext  				// and some sort of coordinated release of the new versions.  #if __MonoCS__  				BasicHttpBinding binding = new BasicHttpBinding();  #else  				NetNamedPipeBinding binding = new NetNamedPipeBinding();  				binding.Security.Mode = NetNamedPipeSecurityMode.None;  #endif  				binding.MaxBufferSize *= 4;  				binding.MaxReceivedMessageSize *= 4;  				binding.MaxBufferPoolSize *= 2;  				binding.ReaderQuotas.MaxBytesPerRead *= 4;  				binding.ReaderQuotas.MaxArrayLength *= 4;  				binding.ReaderQuotas.MaxDepth *= 4;  				binding.ReaderQuotas.MaxNameTableCharCount *= 4;  				binding.ReaderQuotas.MaxStringContentLength *= 4;    				providerHost.AddServiceEndpoint(providerType' binding' sNamedPipe);  				providerHost.Open();  			}  			catch (Exception e)  			{  				Logger.WriteError(e);  				providerHost = null;  				if (ScriptureProvider.IsInstalled)  				{  					MessageBox.Show(PtCommunicationProb' PtCommunicationProbTitle'  						MessageBoxButtons.OK' MessageBoxIcon.Information);  				}  				return;  			}
Magic Number,SIL.FieldWorks.LexicalProvider,LexicalProviderManager,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderManager.cs,StartProvider,The following statement contains a magic number: try  			{  				providerHost = new ServiceHost(provider);  				// Named pipes are better for Windows...don't tie up a dedicated port and perform better.  				// However' Mono does not yet support them' so on Mono we use a different binding.  				// Note that any attempt to unify these will require parallel changes in Paratext  				// and some sort of coordinated release of the new versions.  #if __MonoCS__  				BasicHttpBinding binding = new BasicHttpBinding();  #else  				NetNamedPipeBinding binding = new NetNamedPipeBinding();  				binding.Security.Mode = NetNamedPipeSecurityMode.None;  #endif  				binding.MaxBufferSize *= 4;  				binding.MaxReceivedMessageSize *= 4;  				binding.MaxBufferPoolSize *= 2;  				binding.ReaderQuotas.MaxBytesPerRead *= 4;  				binding.ReaderQuotas.MaxArrayLength *= 4;  				binding.ReaderQuotas.MaxDepth *= 4;  				binding.ReaderQuotas.MaxNameTableCharCount *= 4;  				binding.ReaderQuotas.MaxStringContentLength *= 4;    				providerHost.AddServiceEndpoint(providerType' binding' sNamedPipe);  				providerHost.Open();  			}  			catch (Exception e)  			{  				Logger.WriteError(e);  				providerHost = null;  				if (ScriptureProvider.IsInstalled)  				{  					MessageBox.Show(PtCommunicationProb' PtCommunicationProbTitle'  						MessageBoxButtons.OK' MessageBoxIcon.Information);  				}  				return;  			}
Magic Number,SIL.FieldWorks.LexicalProvider,LexicalProviderManager,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderManager.cs,StartProvider,The following statement contains a magic number: try  			{  				providerHost = new ServiceHost(provider);  				// Named pipes are better for Windows...don't tie up a dedicated port and perform better.  				// However' Mono does not yet support them' so on Mono we use a different binding.  				// Note that any attempt to unify these will require parallel changes in Paratext  				// and some sort of coordinated release of the new versions.  #if __MonoCS__  				BasicHttpBinding binding = new BasicHttpBinding();  #else  				NetNamedPipeBinding binding = new NetNamedPipeBinding();  				binding.Security.Mode = NetNamedPipeSecurityMode.None;  #endif  				binding.MaxBufferSize *= 4;  				binding.MaxReceivedMessageSize *= 4;  				binding.MaxBufferPoolSize *= 2;  				binding.ReaderQuotas.MaxBytesPerRead *= 4;  				binding.ReaderQuotas.MaxArrayLength *= 4;  				binding.ReaderQuotas.MaxDepth *= 4;  				binding.ReaderQuotas.MaxNameTableCharCount *= 4;  				binding.ReaderQuotas.MaxStringContentLength *= 4;    				providerHost.AddServiceEndpoint(providerType' binding' sNamedPipe);  				providerHost.Open();  			}  			catch (Exception e)  			{  				Logger.WriteError(e);  				providerHost = null;  				if (ScriptureProvider.IsInstalled)  				{  					MessageBox.Show(PtCommunicationProb' PtCommunicationProbTitle'  						MessageBoxButtons.OK' MessageBoxIcon.Information);  				}  				return;  			}
Magic Number,SIL.FieldWorks.LexicalProvider,LexicalProviderManager,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderManager.cs,StartProvider,The following statement contains a magic number: try  			{  				providerHost = new ServiceHost(provider);  				// Named pipes are better for Windows...don't tie up a dedicated port and perform better.  				// However' Mono does not yet support them' so on Mono we use a different binding.  				// Note that any attempt to unify these will require parallel changes in Paratext  				// and some sort of coordinated release of the new versions.  #if __MonoCS__  				BasicHttpBinding binding = new BasicHttpBinding();  #else  				NetNamedPipeBinding binding = new NetNamedPipeBinding();  				binding.Security.Mode = NetNamedPipeSecurityMode.None;  #endif  				binding.MaxBufferSize *= 4;  				binding.MaxReceivedMessageSize *= 4;  				binding.MaxBufferPoolSize *= 2;  				binding.ReaderQuotas.MaxBytesPerRead *= 4;  				binding.ReaderQuotas.MaxArrayLength *= 4;  				binding.ReaderQuotas.MaxDepth *= 4;  				binding.ReaderQuotas.MaxNameTableCharCount *= 4;  				binding.ReaderQuotas.MaxStringContentLength *= 4;    				providerHost.AddServiceEndpoint(providerType' binding' sNamedPipe);  				providerHost.Open();  			}  			catch (Exception e)  			{  				Logger.WriteError(e);  				providerHost = null;  				if (ScriptureProvider.IsInstalled)  				{  					MessageBox.Show(PtCommunicationProb' PtCommunicationProbTitle'  						MessageBoxButtons.OK' MessageBoxIcon.Information);  				}  				return;  			}
Magic Number,SIL.FieldWorks.LexicalProvider,LexicalProviderManager,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderManager.cs,StartProvider,The following statement contains a magic number: try  			{  				providerHost = new ServiceHost(provider);  				// Named pipes are better for Windows...don't tie up a dedicated port and perform better.  				// However' Mono does not yet support them' so on Mono we use a different binding.  				// Note that any attempt to unify these will require parallel changes in Paratext  				// and some sort of coordinated release of the new versions.  #if __MonoCS__  				BasicHttpBinding binding = new BasicHttpBinding();  #else  				NetNamedPipeBinding binding = new NetNamedPipeBinding();  				binding.Security.Mode = NetNamedPipeSecurityMode.None;  #endif  				binding.MaxBufferSize *= 4;  				binding.MaxReceivedMessageSize *= 4;  				binding.MaxBufferPoolSize *= 2;  				binding.ReaderQuotas.MaxBytesPerRead *= 4;  				binding.ReaderQuotas.MaxArrayLength *= 4;  				binding.ReaderQuotas.MaxDepth *= 4;  				binding.ReaderQuotas.MaxNameTableCharCount *= 4;  				binding.ReaderQuotas.MaxStringContentLength *= 4;    				providerHost.AddServiceEndpoint(providerType' binding' sNamedPipe);  				providerHost.Open();  			}  			catch (Exception e)  			{  				Logger.WriteError(e);  				providerHost = null;  				if (ScriptureProvider.IsInstalled)  				{  					MessageBox.Show(PtCommunicationProb' PtCommunicationProbTitle'  						MessageBoxButtons.OK' MessageBoxIcon.Information);  				}  				return;  			}
Magic Number,SIL.FieldWorks.LexicalProvider,LexicalProviderManager,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderManager.cs,StartProvider,The following statement contains a magic number: try  			{  				providerHost = new ServiceHost(provider);  				// Named pipes are better for Windows...don't tie up a dedicated port and perform better.  				// However' Mono does not yet support them' so on Mono we use a different binding.  				// Note that any attempt to unify these will require parallel changes in Paratext  				// and some sort of coordinated release of the new versions.  #if __MonoCS__  				BasicHttpBinding binding = new BasicHttpBinding();  #else  				NetNamedPipeBinding binding = new NetNamedPipeBinding();  				binding.Security.Mode = NetNamedPipeSecurityMode.None;  #endif  				binding.MaxBufferSize *= 4;  				binding.MaxReceivedMessageSize *= 4;  				binding.MaxBufferPoolSize *= 2;  				binding.ReaderQuotas.MaxBytesPerRead *= 4;  				binding.ReaderQuotas.MaxArrayLength *= 4;  				binding.ReaderQuotas.MaxDepth *= 4;  				binding.ReaderQuotas.MaxNameTableCharCount *= 4;  				binding.ReaderQuotas.MaxStringContentLength *= 4;    				providerHost.AddServiceEndpoint(providerType' binding' sNamedPipe);  				providerHost.Open();  			}  			catch (Exception e)  			{  				Logger.WriteError(e);  				providerHost = null;  				if (ScriptureProvider.IsInstalled)  				{  					MessageBox.Show(PtCommunicationProb' PtCommunicationProbTitle'  						MessageBoxButtons.OK' MessageBoxIcon.Information);  				}  				return;  			}
Magic Number,SIL.FieldWorks.PaObjects,PaLexicalInfo,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\PaObjects\PaLexicalInfo.cs,LoadFwDataForPa,The following statement contains a magic number: do  			{  				IAsyncResult ar = invoker.BeginInvoke(name' server' null' null);  				if (!ar.AsyncWaitHandle.WaitOne(endTime - DateTime.Now' false))  					return false;    				// Get the return value of the ShouldWait method.  				shouldWait = invoker.EndInvoke(ar);  				if (shouldWait)  				{  					if (timeToWaitForLoadingData > 0 && DateTime.Now > endTime)  						return false;    					Thread.Sleep(100);  				}  			} while (shouldWait);
Missing Default,SIL.FieldWorks,ApplicationBusyDialog,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ApplicationBusyDialog.cs,WaitForOtherApp,The following switch statement is missing a default case: switch (m_whatToWaitFor)  			{  				case WaitFor.WindowToActivate:  					m_lblMessage.Text = string.Format(Properties.Resources.kstidThisApplicationIsBusy'  						m_appToStart.ApplicationName' m_appToStart.Cache.ProjectId.Name);  					break;  				case WaitFor.OtherBusyApp:  					m_lblMessage.Text = string.Format(Properties.Resources.kstidOtherApplicationBusy'  						m_appToStart.ApplicationName' m_appToStart.Cache.ProjectId.Name' m_appToWaitFor.ApplicationName);  					break;  				case WaitFor.ModalDialogsToClose:  					m_lblMessage.Text = string.Format(Properties.Resources.kstidOtherApplicationHasDialog'  						m_appToStart.ApplicationName' m_appToStart.Cache.ProjectId.Name' m_appToWaitFor.ApplicationName);  					break;  			}
Missing Default,SIL.FieldWorks,ApplicationBusyDialog,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ApplicationBusyDialog.cs,WaitForOtherApp,The following switch statement is missing a default case: switch (m_whatToWaitFor)  				{  					case WaitFor.WindowToActivate:  						readyToRoll = (m_appToStart.MainWindows.Count > 0);  						break;  					case WaitFor.OtherBusyApp:  						readyToRoll = !DataUpdateMonitor.IsUpdateInProgress();  						break;  					case WaitFor.ModalDialogsToClose:  						readyToRoll = !m_appToWaitFor.IsModalDialogOpen;  						break;  				}
Missing Default,SIL.FieldWorks,ProjectId,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\ProjectId.cs,GetType,The following switch statement is missing a default case: switch (ext)  // Includes period.  				{  					case LcmFileHelper.ksFwDataXmlFileExtension:  						return BackendProviderType.kXML;  				}
Missing Default,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,ShowWelcomeDialog,The following switch statement is missing a default case: switch (dlg.DlgResult)  					{  						case WelcomeToFieldWorksDlg.ButtonPress.New:  							projectToTry = CreateNewProject(dlg' app' helpTopicProvider);  							Debug.Assert(projectToTry == null || projectToTry.IsValid);  							break;  						case WelcomeToFieldWorksDlg.ButtonPress.Open:  							projectToTry = ChooseLangProject(null' helpTopicProvider);  							try  							{  								if (projectToTry != null)  									projectToTry.AssertValid();  							}  							catch (StartupException e)  							{  								exception = e;  							}  							break;  						case WelcomeToFieldWorksDlg.ButtonPress.Link:  							// LT-13943 - this guard keeps the projectToTry from getting blasted by a null when it has  							// a useful projectId (like the initial sample db the first time FLEx is run).  							if (lastProjectId != null && !lastProjectId.Equals(projectToTry))  								projectToTry = lastProjectId; // just making sure!  							Debug.Assert(projectToTry.IsValid);  							break;  						case WelcomeToFieldWorksDlg.ButtonPress.Restore:  							s_allowFinalShutdown = false;  							RestoreProject(null' app);  							s_allowFinalShutdown = true;  							projectToTry = s_projectId; // Restore probably used this process  							break;  						case WelcomeToFieldWorksDlg.ButtonPress.Exit:  							return null; // Should cause the FW process to exit later  						case WelcomeToFieldWorksDlg.ButtonPress.Receive:  							if (!FwNewLangProject.CheckProjectDirectory(null' helpTopicProvider))  								break;  							ObtainedProjectType obtainedProjectType;  							projectToTry = null; // If the user cancels the send/receive' this null will result in a return to the welcome dialog.  							// Hard to say what Form.ActiveForm is here. The splash and welcome dlgs are both gone.  							var projectDataPathname = ObtainProjectMethod.ObtainProjectFromAnySource(Form.ActiveForm'  								helpTopicProvider' out obtainedProjectType);  							if (!string.IsNullOrEmpty(projectDataPathname))  							{  								projectToTry = new ProjectId(BackendProviderType.kXML' projectDataPathname);  								var activeWindow = startingApp.ActiveMainWindow;  								if (activeWindow != null)  								{  									var activeWindowInterface = (IFwMainWnd)activeWindow;  									activeWindowInterface.PropTable.SetProperty("LastBridgeUsed"'  										obtainedProjectType == ObtainedProjectType.Lift ? "LiftBridge" : "FLExBridge"'  										PropertyTable.SettingsGroup.LocalSettings'  										true);  								}  							}  							break;  						case WelcomeToFieldWorksDlg.ButtonPress.Import:  							projectToTry = CreateNewProject(dlg' app' helpTopicProvider);  							if (projectToTry != null)  							{  							var projectLaunched = LaunchProject(args' ref projectToTry);  								if (projectLaunched)  							{  								s_projectId = projectToTry; // Window is open on this project' we must not try to initialize it again.  								var mainWindow = Form.ActiveForm;  									if (mainWindow is IxWindow)  								{  										((IxWindow) mainWindow).Mediator.SendMessage("SFMImport"' null);  								}  								else  								{  									return null;  								}  							}  							else  							{  								return null;  							}  							}  							break;  					}
Missing Default,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,CreateNewProject,The following switch statement is missing a default case: switch (dlg.DisplayDialog(dialogOwner))  				{  					case DialogResult.OK:  						if (dlg.IsProjectNew)  							return new ProjectId(dlg.GetDatabaseFile());  						else  						{  							// The user tried to create a new project which already exists and  							// then choose to open the project. Therefore open the project and return  							// null for the ProjectId so the caller of this method does not try to  							// create a new project.  							ProjectId projectId = new ProjectId(dlg.GetDatabaseFile());  							OpenExistingProject(projectId' app' dialogOwner);  							return null;  						}  					case DialogResult.Abort:  						// If we get an Abort it means that we got an exception in the dialog (e.g.  						// in the OnLoad method). We can't just catch that exception here (probably  						// because of the extra message loop the dialog has)' so we close the dialog  						// and return Abort.  						MessageBox.Show(dialogOwner'  							ResourceHelper.GetResourceString("kstidNewProjError")'  							ResourceHelper.GetResourceString("kstidMiscError"));  						break;  				}
Missing Default,SIL.FieldWorks,FieldWorks,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\FieldWorks.cs,GetDriveMountList,The following switch statement is missing a default case: switch (d.DriveType)  				{  					case DriveType.Fixed:  					case DriveType.Network:  					case DriveType.Removable:  						if (MiscUtils.IsUnix)  							driveMounts.Add(d.Name + (d.Name.EndsWith("/") ? "" : "/"));	// ensure terminated with a slash  						else  							driveMounts.Add(d.Name.ToLowerInvariant());		// Windows produces C:\ D:\ etc.  						break;  				}
Missing Default,SIL.FieldWorks.LexicalProvider,LexicalProviderImpl,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderImpl.cs,LexemeTypeAndMorphTypeMatch,The following switch statement is missing a default case: switch (type)  			{  				case LexemeType.Prefix: return morphType.IsPrefixishType;  				case LexemeType.Suffix: return morphType.IsSuffixishType;  				case LexemeType.Stem: return morphType.IsStemType &&  					morphType.Guid != MoMorphTypeTags.kguidMorphPhrase &&  					morphType.Guid != MoMorphTypeTags.kguidMorphDiscontiguousPhrase;  				case LexemeType.Phrase:  					return morphType.Guid == MoMorphTypeTags.kguidMorphPhrase ||  						morphType.Guid == MoMorphTypeTags.kguidMorphDiscontiguousPhrase;  			}
Missing Default,SIL.FieldWorks.LexicalProvider,LexicalProviderImpl,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderImpl.cs,GetMorphTypeForLexemeType,The following switch statement is missing a default case: switch (type)  			{  				case LexemeType.Prefix: return repo.GetObject(MoMorphTypeTags.kguidMorphPrefix);  				case LexemeType.Suffix: return repo.GetObject(MoMorphTypeTags.kguidMorphSuffix);  				case LexemeType.Phrase: return repo.GetObject(MoMorphTypeTags.kguidMorphPhrase);  				case LexemeType.Stem: return repo.GetObject(MoMorphTypeTags.kguidMorphStem);  			}
Missing Default,SIL.FieldWorks.LexicalProvider,LexicalProviderImpl,C:\repos\sillsdev_FieldWorks\Src\Common\FieldWorks\LexicalProvider\LexicalProviderImpl.cs,GetLexemeTypeForMorphType,The following switch statement is missing a default case: switch (type.Guid.ToString())  			{  				case MoMorphTypeTags.kMorphCircumfix:  				case MoMorphTypeTags.kMorphInfix:  				case MoMorphTypeTags.kMorphInfixingInterfix:  				case MoMorphTypeTags.kMorphSimulfix:  				case MoMorphTypeTags.kMorphSuprafix:  				case MoMorphTypeTags.kMorphClitic:  				case MoMorphTypeTags.kMorphProclitic:  					// These don't map neatly to a lexeme type' so we just return prefix  					return LexemeType.Prefix;    				case MoMorphTypeTags.kMorphEnclitic:  					// This one also isn't a great match' but there is no better choice  					return LexemeType.Suffix;    				case MoMorphTypeTags.kMorphPrefix:  				case MoMorphTypeTags.kMorphPrefixingInterfix:  					return LexemeType.Prefix;    				case MoMorphTypeTags.kMorphSuffix:  				case MoMorphTypeTags.kMorphSuffixingInterfix:  					return LexemeType.Suffix;    				case MoMorphTypeTags.kMorphPhrase:  				case MoMorphTypeTags.kMorphDiscontiguousPhrase:  					return LexemeType.Phrase;    				case MoMorphTypeTags.kMorphStem:  				case MoMorphTypeTags.kMorphRoot:  				case MoMorphTypeTags.kMorphBoundRoot:  				case MoMorphTypeTags.kMorphBoundStem:  				case MoMorphTypeTags.kMorphParticle:  					return LexemeType.Stem;  			}
