Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceView.cs,Display,The method has 100 lines of code.
Long Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,RefreshList,The method has 106 lines of code.
Long Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ProcessSubpartNode,The method has 122 lines of code.
Long Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,AddSimpleNode,The method has 217 lines of code.
Long Method,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The method has 313 lines of code.
Long Method,SIL.FieldWorks.Common.Framework.DetailControls,GenDateChooserDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GenDateChooserDlg.cs,InitializeComponent,The method has 152 lines of code.
Long Method,SIL.FieldWorks.Common.Framework.DetailControls,MorphTypeAtomicLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MorphTypeAtomicLauncher.cs,HandleChooser,The method has 107 lines of code.
Long Method,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,ConnectToRealCache,The method has 122 lines of code.
Long Method,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,Install,The method has 102 lines of code.
Long Method,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObject,The method has 147 lines of code.
Long Method,SIL.FieldWorks.Common.Framework.DetailControls,SliceFactory,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceFactory.cs,Create,The method has 288 lines of code.
Long Method,SIL.FieldWorks.Common.Framework.DetailControls,SliceTreeNode,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceTreeNode.cs,HandlePaint,The method has 107 lines of code.
Long Method,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceView.cs,Display,The method has 112 lines of code.
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,RefreshList,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,CreateSlices,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,GetTemplateForObjLayout,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ApplyLayout,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,EnsureCustomFields,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,AddSimpleNode,Cyclomatic complexity of the method is 12
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,OnLayout,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,HandleLayout1,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,SetDefaultCurrentSlice,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,FocusFirstPossibleSlice,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,OnDemoteItemInVector,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,EquivalentKeys,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,DerivMSAReferenceSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DerivMSAReferenceSlice.cs,OnReferenceChanged,Cyclomatic complexity of the method is 13
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,GhostStringSliceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GhostStringSlice.cs,RestoreSelection,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,InflMSAReferenceSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\InflMSAReferenceSlice.cs,OnReferenceChanged,Cyclomatic complexity of the method is 12
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,MorphTypeAtomicLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MorphTypeAtomicLauncher.cs,CheckForAffixDataLoss,Cyclomatic complexity of the method is 12
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,MSAReferenceComboBoxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MSAReferenceComboBoxSlice.cs,m_MSAPopupTreeManager_AfterSelect,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,HandleSelectionChange,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,ConnectToRealCache,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityAutoComplete,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityAutoComplete.cs,CreateSearcher,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,Install,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,GetSeqContext,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,HandleInsertCommand,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObjectIfPossible,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObject,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,FocusSliceOrChild,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,GetCanMergeNow,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,ReplacePartWithNewAttribute,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,StringSliceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\StringSlice.cs,HandleSelectionChange,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.Framework.DetailControls,SummarySlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummarySlice.cs,OnDemoteSubitemInVector,Cyclomatic complexity of the method is 8
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceLauncher.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferencePOSSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferencePOSSlice.cs,AtomicReferencePOSSlice,The method has 5 parameters. Parameters: cache' obj' flid' mediator' propertyTable
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferencePOSSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferencePOSSlice.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,AutomicReferencePOSDisabledSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferencePOSSlice.cs,AutomicReferencePOSDisabledSlice,The method has 5 parameters. Parameters: cache' obj' flid' mediator' propertyTable
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceSlice.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceView.cs,Initialize,The method has 7 parameters. Parameters: rootObj' rootFlid' rootFieldName' cache' displayNameProperty' mediator' displayWs
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,CheckboxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\BasicTypeSlices.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,CheckboxRefreshSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\BasicTypeSlices.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DateSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\BasicTypeSlices.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,ButtonLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ButtonLauncher.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,MakeInflAffixEntryChooserCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ChooserCommand.cs,MakeInflAffixEntryChooserCommand,The method has 7 parameters. Parameters: cache' fCloseBeforeExecuting' sLabel' fPrefix' slot' mediator' propertyTable
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,MakeInflAffixSlotChooserCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ChooserCommand.cs,MakeInflAffixSlotChooserCommand,The method has 7 parameters. Parameters: cache' fCloseBeforeExecuting' sLabel' posHvo' fOptional' mediator' propertyTable
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ShowObject,The method has 5 parameters. Parameters: root' layoutName' layoutChoiceField' descendant' suppressFocusChange
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,CreateSlicesFor,The method has 9 parameters. Parameters: obj' parentSlice' layoutName' layoutChoiceField' indent' insertPosition' path' reuseMap' unifyWith
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ApplyLayout,The method has 7 parameters. Parameters: obj' parentSlice' template' indent' insertPosition' path' reuseMap
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ApplyLayout,The method has 9 parameters. Parameters: obj' parentSlice' template' indent' insertPosition' path' reuseMap' isTestOnly' testResult
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ProcessPartRefNode,The method has 8 parameters. Parameters: partRef' path' reuseMap' obj' parentSlice' indent' insPos' isTestOnly
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ProcessPartChildren,The method has 11 parameters. Parameters: part' path' reuseMap' obj' parentSlice' indent' insPos' isTestOnly' parameter' fVisIfData' caller
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ProcessSubpartNode,The method has 11 parameters. Parameters: node' path' reuseMap' obj' parentSlice' indent' insertPosition' fTestOnly' parameter' fVisIfData' caller
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,AddAtomicNode,The method has 12 parameters. Parameters: path' node' reuseMap' flid' obj' parentSlice' indent' insertPosition' fTestOnly' layoutName' fVisIfData' caller
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,MakeGhostSlice,The method has 9 parameters. Parameters: path' node' reuseMap' obj' parentSlice' flidEmptyProp' caller' indent' insertPosition
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,AddSeqNode,The method has 12 parameters. Parameters: path' node' reuseMap' flid' obj' parentSlice' indent' insertPosition' fTestOnly' layoutName' fVisIfData' caller
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,AddSimpleNode,The method has 12 parameters. Parameters: path' node' reuseMap' editor' flid' obj' parentSlice' indent' insPos' fTestOnly' fVisIfData' caller
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,GetLabelAbbr,The method has 5 parameters. Parameters: caller' node' obj' label' attr
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ApplyChildren,The method has 7 parameters. Parameters: obj' parentSlice' template' indent' insertPosition' path' reuseMap
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,DummyObjectSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,DummyObjectSlice,The method has 9 parameters. Parameters: indent' node' path' obj' flid' ihvoMin' layoutName' layoutChoiceField' caller
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,EnumComboSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\EnumComboSlice.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainSelectionUtility,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,UpdateDomainTreeLabels,The method has 5 parameters. Parameters: labels' displayUsage' domainTree' stylesheet' selectedItems
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,GhostStringSliceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GhostStringSlice.cs,RestoreSelection,The method has 6 parameters. Parameters: ich' datatree' key' hvoNewObj' flidStringProp' ws
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,MorphTypeAtomicLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MorphTypeAtomicLauncher.cs,SwapValues,The method has 5 parameters. Parameters: entry' origForm' newForm' type' rgmsaOld
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,MorphTypeChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MorphTypeChooser.cs,MorphTypeChooser,The method has 8 parameters. Parameters: persistProvider' labels' fieldName' obj' displayNameProperty' flid' sShowAllTypes' helpTopicProvider
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,MSAReferenceComboBoxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MSAReferenceComboBoxSlice.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,ContextInfo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MultiLevelConc.cs,ContextInfo,The method has 5 parameters. Parameters: hvo' flid' offset' length' fAllowEdit
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,MultiStringSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MultiStringSlice.cs,MultiStringSlice,The method has 7 parameters. Parameters: obj' flid' ws' wsOptional' forceIncludeEnglish' editable' spellCheck
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,MultiStringSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MultiStringSlice.cs,Reuse,The method has 7 parameters. Parameters: obj' flid' ws' wsOptional' forceIncludeEnglish' editable' spellCheck
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceLauncher.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,GetSelectedStringRep,The method has 5 parameters. Parameters: tss' vwsel' hvoDummyObj' ichAnchor' ichEnd
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceSda,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,CacheReplace,The method has 6 parameters. Parameters: hvoObj' tag' ihvoMin' ihvoLim' _rghvo' chvo
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityAtomicReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityAtomicReferenceLauncher.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityAtomicReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityAtomicReferenceLauncher.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityAutoComplete,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityAutoComplete.cs,PossibilityAutoComplete,The method has 7 parameters. Parameters: cache' mediator' propertyTable' list' control' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityVectorReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityVectorReferenceLauncher.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityVectorReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityVectorReferenceLauncher.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,ReferenceViewBase,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ReferenceViewBase.cs,Initialize,The method has 6 parameters. Parameters: rootObj' rootFlid' rootFieldName' cache' displayNameProperty' mediator
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,SimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SimpleListChooser.cs,SimpleListChooser,The method has 7 parameters. Parameters: cache' persistProvider' helpTopicProvider' labels' currentObj' fieldName' nullLabel
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,SimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SimpleListChooser.cs,SimpleListChooser,The method has 8 parameters. Parameters: cache' persistProvider' helpTopicProvider' labels' currentObj' fieldName' nullLabel' stylesheet
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,SimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SimpleListChooser.cs,SimpleListChooser,The method has 6 parameters. Parameters: cache' persistProvider' helpTopicProvider' labels' currentObj' fieldName
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,SimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SimpleListChooser.cs,SimpleListChooser,The method has 5 parameters. Parameters: persistProvider' labels' fieldName' stylesheet' helpTopicProvider
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,SimpleListChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SimpleListChooser.cs,SimpleListChooser,The method has 6 parameters. Parameters: persistProvider' labels' fieldName' cache' chosenObjs' helpTopicProvider
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,GenerateChildren,The method has 8 parameters. Parameters: node' caller' obj' indent' insPos' path' reuseMap' fUsePersistentExpansion
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,CreateIndentedNodes,The method has 7 parameters. Parameters: caller' obj' indent' insPos' path' reuseMap' node
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObjectIfPossible,The method has 5 parameters. Parameters: newObjectClassId' ownerClassId' fieldName' slice' recomputeVirtual
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObjectIntoVirtualBackref,The method has 6 parameters. Parameters: cache' mediator' propertyTable' hvoSlice' clidNewObj' flid
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,SliceFactory,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceFactory.cs,Create,The method has 10 parameters. Parameters: cache' editor' flid' node' obj' persistenceProvider' mediator' propertyTable' caller' reuseMap
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,SliceFactory,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceFactory.cs,SetConfigurationDisplayPropertyIfNeeded,The method has 6 parameters. Parameters: configurationNode' cmObject' cmObjectCustomFieldFlid' mainCacheAccessor' fdoServiceLocator' metadataCache
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,ObjectDragInfo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceTreeNode.cs,ObjectDragInfo,The method has 5 parameters. Parameters: hvoSrcOwner' flidSrc' ihvoSrcStart' ihvoSrcEnd' label
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,StTextSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\StTextSlice.cs,GetWordLimitsOfSelection,The method has 6 parameters. Parameters: ichMin' ichLim' hvo' tag' ws' tss
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,ParaNodeInfo,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\TwoLevelConc.cs,ParaNodeInfo,The method has 5 parameters. Parameters: flidList' startOffsets' sda' hvoHeadObj' flid
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceLauncher.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceView.cs,Initialize,The method has 7 parameters. Parameters: rootObj' rootFlid' rootFieldName' cache' displayNameProperty' mediator' displayWs
Long Parameter List,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceView.cs,DeleteObjectFromVector,The method has 5 parameters. Parameters: sel' cvsli' hvoObj' undoText' redoText
Long Identifier,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,,The length of the parameter m_autoCustomFieldNodesDocument is 30.
Long Identifier,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,,The length of the parameter m_fCurrentContentControlObjectTriggered is 39.
Long Identifier,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,GetTsStringOfEnvironment,The length of the parameter localDummyHvoOfAnEnvironmentInEntry is 35.
Long Identifier,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,GetStringOfEnvironment,The length of the parameter localDummyHvoOfAnEnvironmentInEntry is 35.
Long Identifier,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,ConnectToRealCache,The length of the parameter allAvailablePhoneEnvironmentsInProject is 38.
Long Identifier,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,ConnectToRealCache,The length of the parameter envsBeingRequestedForThisEntry is 30.
Long Identifier,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,ConnectToRealCache,The length of the parameter countOfExistingEnvironmentsInDatabaseForEntry is 45.
Long Identifier,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,ConnectToRealCache,The length of the parameter existingListOfEnvironmentHvosInDatabaseForEntry is 47.
Long Identifier,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,ConnectToRealCache,The length of the parameter newListOfEnvironmentHvosForEntry is 32.
Long Identifier,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,EnvsBeingRequestedForThisEntry,The length of the parameter envsBeingRequestedForThisEntry is 30.
Long Identifier,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,EnvsBeingRequestedForThisEntry,The length of the parameter countOfDummyEnvsForTypingNewEnvs is 32.
Long Identifier,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,EnvsBeingRequestedForThisEntry,The length of the parameter localDummyHvoOfAnEnvironmentInEntry is 35.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,AutoDataTreeMenuHandler,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AutoMenuHandler.cs,HandleCreateMenuItem,The length of the statement  "				cache.DomainDataByFlid.PropChanged(null' (int)PropChangeType.kpctNotifyAll' hvoOwner' (int)(cpi.flid)' ihvoPosition' 1' 0); " is 123.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,ButtonLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ButtonLauncher.cs,CheckDisposed,The length of the statement  "				throw new ObjectDisposedException("ButtonLauncher"' "This object is being used after it has been disposed: this is an Error."); " is 127.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,ButtonLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ButtonLauncher.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ButtonLauncher)); " is 134.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,ButtonLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ButtonLauncher.cs,InitializeComponent,The length of the statement  "			this.imageList1.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageList1.ImageStream"))); " is 120.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,MakeInflAffixSlotChooserCommand,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ChooserCommand.cs,Execute,The length of the statement  "			// Ideally we would make both part of the same UOW. However the code is in two distinct DLLs (see MorphologyEditor.dll). " is 120.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,ConfigureWritingSystemsDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ConfigureWritingSystemsDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ConfigureWritingSystemsDlg)); " is 146.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,InstallSlice,The length of the statement  "				(slice.ConfigurationNode != null && slice.ConfigurationNode.OuterXml != null ? slice.ConfigurationNode.OuterXml : "(DummySlice?)")' " is 131.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,PropChanged,The length of the statement  "			else if (m_cache.DomainDataByFlid.GetActionHandler() != null && m_cache.DomainDataByFlid.GetActionHandler().IsUndoOrRedoInProgress) " is 131.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,Reset,The length of the statement  "				foreach (var slice in slices) //inform all the slices they are about to be discarded' remove the trees handler from them " is 120.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ShowObject,The length of the statement  "			if (m_root == root && layoutName == m_rootLayoutName && layoutChoiceField == m_layoutChoiceField && m_descendant == descendant) " is 127.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ShowObject,The length of the statement  "			m_fShowAllFields = m_propertyTable.GetBoolProperty("ShowHiddenFields-" + toolName' false' PropertyTable.SettingsGroup.LocalSettings); " is 133.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ShowObject,The length of the statement  "			m_propertyTable.SetPropertyPersistence("ShowHiddenFields-" + toolName' true' PropertyTable.SettingsGroup.LocalSettings); " is 120.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ShowObject,The length of the statement  "			m_currentSlicePartName = m_propertyTable.GetStringProperty(m_sPartNameProperty' null' PropertyTable.SettingsGroup.LocalSettings); " is 129.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ShowObject,The length of the statement  "			m_currentSliceObjGuid = m_propertyTable.GetValue(m_sObjGuidProperty' PropertyTable.SettingsGroup.LocalSettings' Guid.Empty); " is 124.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ShowObject,The length of the statement  "					if (root != descendant && (m_currentSliceNew == null || m_currentSliceNew.IsDisposed || m_currentSliceNew.Object != descendant)) " is 128.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,CheckDisposed,The length of the statement  "				throw new ObjectDisposedException("DataTree"' "This object is being used after it has been disposed: this is an Error."); " is 121.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,CreateSlices,The length of the statement  "			//Debug.WriteLine("CreateSlices took " + watch.ElapsedMilliseconds + " ms. Originally had " + oldSliceCount + " controls; now " + Slices.Count); " is 144.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,FindPersistableParent,The length of the statement  "				throw new ApplicationException(string.Format("Invalid configuration file. No parent with a ref attribute was found.{0}{1}"' " is 123.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,CheckCustomFieldsSibling,The length of the statement  "			if (paramAttr != null && refAttr != null && paramAttr.Value == target && sibling.Name == "part" && refAttr.Value == "Custom") " is 125.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,AddAtomicNode,The length of the statement  "				insertPosition = CreateSlicesFor(innerObj' parentSlice' layoutOverride' layoutChoiceField' indent' insertPosition' path' reuseMap' caller); " is 139.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,AddSimpleNode,The length of the statement  "					var fieldType = (CellarPropertyType)(realSda.MetaDataCache.GetFieldType(flid) & (int)CellarPropertyTypeFilter.VirtualMask); " is 123.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,AddSimpleNode,The length of the statement  "				slice = SliceFactory.Create(m_cache' editor' flid' node' obj' PersistenceProvder' m_mediator' m_propertyTable' caller' reuseMap); " is 129.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,EnsureValidIndexForReusedSlice,The length of the statement  "			Debug.Assert(slice.IndexInContainer == insertPosition' String.Format("EnsureValideIndexFOrReusedSlice: slice '{0}' at index({1}) should have been inserted in index({2})"' " is 170.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,HandleLayout1,The length of the statement  "				//Debug.WriteLine(String.Format("DataTree.HandleLayout1({3}'{4}): fSliceIsVisible = {5}' i = {0}' defHeight = {1}' yTop = {2}' desiredWidth = {7}' tci.Config = {6}"' " is 165.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,MakeSliceVisible,The length of the statement  "					(tci.ConfigurationNode != null && tci.ConfigurationNode.OuterXml != null ? tci.ConfigurationNode.OuterXml : "(DummySlice?)")' " is 125.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,OnDisplayShowHiddenFields,The length of the statement  "				display.Checked = m_propertyTable.GetBoolProperty("ShowHiddenFields-" + toolName' false' PropertyTable.SettingsGroup.LocalSettings); " is 132.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,OnPropertyChanged,The length of the statement  "				m_propertyTable.SetProperty(name' !oldShowValue' PropertyTable.SettingsGroup.LocalSettings' true); // update the pane bar check box. " is 132.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,SetDefaultCurrentSlice,The length of the statement  "				if (!suppressFocusChange && !m_currentSlice.Focused && m_fCurrentContentControlObjectTriggered)	// probably coming from m_currentSliceNew " is 137.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,OnDisplayInsertItemViaBackrefVector,The length of the statement  "			if (restrictToTool != null && restrictToTool != m_propertyTable.GetStringProperty("currentContentControl"' String.Empty)) " is 121.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,OnInsertItemViaBackrefVector,The length of the statement  "			if (restrictToTool != null && restrictToTool != m_propertyTable.GetStringProperty("currentContentControl"' String.Empty)) " is 121.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DummyObjectSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,Dispose,The length of the statement  "			//Debug.WriteLineIf(!disposing' "****************** " + GetType().Name + "(DummyObjectSlice) 'disposing' is false. ******************"); " is 136.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTreeImages,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTreeImages.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DataTreeImages)); " is 134.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,DataTreeImages,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTreeImages.cs,InitializeComponent,The length of the statement  "			this.nodeImages.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("nodeImages.ImageStream"))); " is 120.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,UpdateDomainTreeAndListLabels,The length of the statement  "			SemanticDomainSelectionUtility.UpdateDomainTreeLabels(labels' displayUsageCheckBox.Checked' domainTree' m_stylesheet' m_selectedItems); " is 135.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,UpdateDomainTreeAndListLabels,The length of the statement  "				selectedDomainsList.Items.Add(SemanticDomainSelectionUtility.CreateLabelListItem(selectedItem' m_stylesheet' true' false)); " is 123.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SemanticDomainsChooser)); " is 142.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			this.editDomainsLinkPanel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 156.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			this.editDomainslinklabel.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.OnEditDomainsLinkClicked); " is 130.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			this.domainTree.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 146.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			this.searchTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 146.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			this.domainList.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 146.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			this.displayUsagePanel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 153.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			this.buttonPanel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 147.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			this.selectedDomainsList.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 155.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			this.selectedDomainsList.ItemChecked += new System.Windows.Forms.ItemCheckedEventHandler(this.OnSelectedDomainItemChecked); " is 123.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			this.button1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 139.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 151.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The length of the statement  "			this.btnCancelSearch.BackgroundImage = ((System.Drawing.Image)(resources.GetObject("btnCancelSearch.BackgroundImage"))); " is 120.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,GenDateChooserDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GenDateChooserDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GenDateChooserDlg)); " is 137.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,GenDateChooserDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GenDateChooserDlg.cs,InitializeComponent,The length of the statement  "			this.m_precisionComboBox.SelectedIndexChanged += new System.EventHandler(this.m_precisionComboBox_SelectedIndexChanged); " is 120.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,GenDateSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GenDateSlice.cs,FinishInit,The length of the statement  "			((GenDateLauncher)Control).Initialize(m_cache' m_obj' m_flid' m_fieldName' m_persistenceProvider' Mediator' m_propertyTable' " is 124.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,GhostReferenceVectorSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GhostReferenceVectorSlice.cs,GetFieldId,The length of the statement  "			return cache.MetaDataCacheAccessor.GetFieldId(XmlUtils.GetMandatoryAttributeValue(configurationParameters' "ghostClass")' " is 121.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,GhostReferenceVectorSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GhostReferenceVectorSlice.cs,FinishInit,The length of the statement  "			((GhostReferenceVectorLauncher)Control).Initialize(m_cache' m_obj' m_flid' m_fieldName' m_persistenceProvider' m_mediator' m_propertyTable' DisplayNameProperty' BestWsName); " is 173.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,GhostStringSliceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GhostStringSlice.cs,MakeRoot,The length of the statement  "				m_sda = new GhostDaDecorator(m_cache.DomainDataByFlid as ISilDataAccessManaged' TsStringUtils.EmptyString(m_wsToCreate)' m_clidDst); " is 132.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,GhostStringSliceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GhostStringSlice.cs,MakeRealObject,The length of the statement  "				UndoableUnitOfWorkHelper.DoUsingNewOrCurrentUOW(sUndo' sRedo' m_cache.ServiceLocator.GetInstance<IActionHandler>()' () => " is 121.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,MorphTypeAtomicLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MorphTypeAtomicLauncher.cs,HandleChooser,The length of the statement  "										MessageBoxIcon.Question' MessageBoxDefaultButton.Button1' 0' m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider").HelpFile' " is 136.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,MSAReferenceComboBoxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MSAReferenceComboBoxSlice.cs,m_tree_DropDown,The length of the statement  "			m_MSAPopupTreeManager.LoadPopupTree(0); // load the tree for real' with up-to-date list of available MSAs (see LT-5041). " is 120.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,MultiStringSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MultiStringSlice.cs,OnPropertyChanged,The length of the statement  "					string singlePropertySequenceValue = m_propertyTable.GetStringProperty("SelectedWritingSystemHvosForCurrentContextMenu"' null); " is 127.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,ConnectToRealCache,The length of the statement  "			// before undoing anything else. Currently Undo within the slice is not this well integrated. However' doing some editing " is 121.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,ConnectToRealCache,The length of the statement  "			// in the slice and then Undoing or Redoing a previous command DOES save the changes in the slice; I think OnLeave() must " is 121.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PhoneEnvReferenceView)); " is 141.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,PictureSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PictureSlice.cs,showProperties,The length of the statement  "			using (var dlg = new PicturePropertiesDialog(m_cache' pic' m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")' app' true)) " is 137.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,PictureSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PictureSlice.cs,showProperties,The length of the statement  "						UndoableUnitOfWorkHelper.Do(DetailControlsStrings.ksUndoUpdatePicture' DetailControlsStrings.ksRedoUpdatePicture' m_obj' () => " is 126.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityAtomicReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityAtomicReferenceLauncher.cs,Initialize,The length of the statement  "			m_autoComplete = new PossibilityAutoComplete(cache' mediator' propertyTable' (ICmPossibilityList) obj.ReferenceTargetOwner(flid)' " is 129.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityAtomicReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityAtomicReferenceLauncher.cs,OnLeave,The length of the statement  "				if (AllowEmptyItem && m_atomicRefView.RootBox.DataAccess.get_StringProp(m_obj.Hvo' PossibilityAtomicReferenceView.kflidFake).Length == 0 && Target != null) " is 155.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityAtomicReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityAtomicReferenceView.cs,SetRootBoxObj,The length of the statement  "						ObjectLabel label = ObjectLabel.CreateObjectLabel(m_cache' list.PossibilitiesOS[0]' m_displayNameProperty' m_displayWs); " is 120.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityAutoComplete,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityAutoComplete.cs,CreateSearcher,The length of the statement  "				foreach (int ws in WritingSystemServices.GetWritingSystemIdsFromLabel(m_cache' m_displayWs' m_cache.ServiceLocator.WritingSystemManager.UserWritingSystem' " is 154.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityAutoComplete,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityAutoComplete.cs,CreateSearcher,The length of the statement  "				foreach (int ws in WritingSystemServices.GetWritingSystemIdsFromLabel(m_cache' m_displayWs' m_cache.ServiceLocator.WritingSystemManager.UserWritingSystem' " is 154.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityVectorReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityVectorReferenceLauncher.cs,Initialize,The length of the statement  "			m_autoComplete = new PossibilityAutoComplete(cache' mediator' propertyTable' (ICmPossibilityList) obj.ReferenceTargetOwner(flid)' " is 129.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityVectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityVectorReferenceView.cs,ReloadVector,The length of the statement  "						ObjectLabel label = ObjectLabel.CreateObjectLabel(m_cache' list.PossibilitiesOS[0]' m_displayNameProperty' m_displayWs); " is 120.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityVectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityVectorReferenceView.cs,GetDataAccess,The length of the statement  "				m_sda = new SdaDecorator((ISilDataAccessManaged) m_cache.DomainDataByFlid' m_cache' m_displayNameProperty' m_displayWs); " is 120.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,OverrideBackColor,The length of the statement  "				Control.BackColor = backColorName == "Control" ? Color.FromKnownColor(KnownColor.ControlLight) : Color.FromName(backColorName); " is 127.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,Install,The length of the statement  "				throw new InvalidOperationException("The slice '" + GetType().Name + "' must be placed in the Parent.Controls property before installing it."); " is 143.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,Dispose,The length of the statement  "			Debug.WriteLineIf(!disposing' "****************** Missing Dispose() call for " + GetType().Name + ". ******************"); " is 122.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,GetGeneratedHelpTopicId,The length of the statement  "			className = fieldName.StartsWith("Translation")&& (ownerClassName == "LexExtendedNote" || (Object.Owner != null && Object.Owner.ClassName == "LexExtendedNote")) ? "LexExtendedNote" : className; " is 193.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObjectIfPossible,The length of the statement  "			if ((ownerClassId > 0 && IsOrInheritsFrom((slice.Object.ClassID)' ownerClassId)) // For adding senses using the simple edit mode' no matter where the cursor is. " is 160.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObject,The length of the statement  "				using (CmObjectUi uiObj = CmObjectUi.CreateNewUiObject(m_mediator' m_propertyTable' newObjectClassId' hvoOwner' flid' insertionPosition)) " is 137.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObject,The length of the statement  "					//			cache.DomainDataByFlid.PropChanged(null' (int)PropChangeType.kpctNotifyAll' hvoOwner' (int)(cpi.flid)' ihvoPosition' 1' 0); " is 128.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,HandleDeleteCommand,The length of the statement  "				throw new ConfigurationException("Slice:GetObjectHvoForMenusToOperateOn is either messed up or should not have been called' because it could not find the object to be deleted."' m_configurationNode); " is 199.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,HandleMergeCommand,The length of the statement  "				throw new ConfigurationException("Slice:GetObjectHvoForMenusToOperateOn is either messed up or should not have been called' because it could not find the object to be merged."' m_configurationNode); " is 198.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,HandleSplitCommand,The length of the statement  "				throw new ConfigurationException("Slice:GetObjectHvoForMenusToOperateOn is either messed up or should not have been called' because it could not find the object to be moved to a copy of its owner."' m_configurationNode); " is 220.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,HandleCopyCommand,The length of the statement  "				throw new ConfigurationException("OriginalSlice:GetObjectHvoForMenusToOperateOn is either messed up or should not have been called' because it could not find the object to be moved to a copy of its owner."' m_configurationNode); " is 228.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,HandleCopyCommand,The length of the statement  "				throw new ConfigurationException("NewSlice:GetObjectHvoForMenusToOperateOn is either messed up or should not have been called' because it could not find the object to be moved to a copy of its owner."' m_configurationNode); " is 223.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SliceFactory,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceFactory.cs,GetWs,The length of the statement  "						throw new ApplicationException("ws must be 'vernacular'' 'analysis'' 'pronunciation''  or 'reversal';" + " it said '" + wsSpec + "'."); " is 135.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SliceFactory,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceFactory.cs,Create,The length of the statement  "					slice = (Slice)DynamicLoader.CreateObject(node' cache' editor' flid' node' obj' persistenceProvider' GetWs(cache' propertyTable' node)); " is 136.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SliceFactory,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceFactory.cs,Create,The length of the statement  "						ReferenceVectorDisabledSlice rvSlice = reuseMap.GetSliceToReuse("ReferenceVectorDisabledSlice") as ReferenceVectorDisabledSlice; " is 128.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SliceFactory,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceFactory.cs,MakeAutoCustomSlice,The length of the statement  "					SetConfigurationDisplayPropertyIfNeeded(configurationNode' obj' flid' cache.MainCacheAccessor' cache.LangProject.Services' cache.MetaDataCacheAccessor); " is 152.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SliceFactory,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceFactory.cs,SetDisplayPropertyInXMLConfiguration,The length of the statement  "			var displayPropertyAttribute = configurationNode.OwnerDocument.CreateNode(XmlNodeType.Attribute' "displayProperty"' ""); " is 120.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SliceTreeNode,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceTreeNode.cs,TestDropEffects,The length of the statement  "					flidDst = (int)Slice.ContainingDataTree.Cache.DomainDataByFlid.MetaDataCache.GetFieldId2(Slice.Object.ClassID' firstChild.Attributes["field"].Value' true); " is 155.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SliceTreeNode,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceTreeNode.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SliceTreeNode)); " is 133.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,StringSliceVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\StringSlice.cs,NameOfWs,The length of the statement  "				WritingSystemServices.FindOrCreateWritingSystem(m_cache' FwDirectoryFinder.TemplateDirectory' sWs' false' false' out wsys); " is 123.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,StTextSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\StTextSlice.cs,FinishInit,The length of the statement  "			((StTextView) RootSite).Init(Mediator' textHvo == 0 ? null : m_cache.ServiceLocator.GetInstance<IStTextRepository>().GetObject(textHvo)' m_ws); " is 143.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,StTextSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\StTextSlice.cs,OnEnter,The length of the statement  "					sda.SetString(hvoStTxtPara' StTxtParaTags.kflidContents' TsStringUtils.EmptyString(m_ws == 0 ? m_cache.DefaultAnalWs : m_ws)); " is 126.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,SummaryCommandControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummaryCommandControl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SummaryCommandControl)); " is 141.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceView.cs,ReloadVector,The length of the statement  "			m_rootb.SetRootObject(m_rootObj == null ? 0 : m_rootObj.Hvo' m_VectorReferenceVc' kfragTargetVector' m_rootb.Stylesheet); " is 121.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceView.cs,MoveItem,The length of the statement  "			UndoableUnitOfWorkHelper.Do(DetailControlsStrings.ksUndoReorder' DetailControlsStrings.ksRedoReorder' Cache.ActionHandlerAccessor' " is 130.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceView.cs,RemoveOrdering,The length of the statement  "			UndoableUnitOfWorkHelper.Do(DetailControlsStrings.ksUndoAlphabeticalOrder' DetailControlsStrings.ksRedoAlphabeticalOrder' " is 121.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceView.cs,PrepareForMoveItem,The length of the statement  "			//the index (ihvo) set by this method is the index of the visible items' any logic using this index must also deal with only the visible items " is 142.
Long Statement,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceView.cs,AddHiddenItems,The length of the statement  "			items.AddRange(GetHiddenItemList()); //add the parent (invisible) reference and any other invisibles back into the collection " is 125.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceSlice.cs,PropChanged,The conditional expression  "m_flid == PartOfSpeechTags.kflidDefaultInflectionClass &&  				cvIns == 0 && cvDel > 0 &&  				(tag == PartOfSpeechTags.kflidInflectionClasses ||  				 tag == MoInflClassTags.kflidSubclasses) &&  				((IPartOfSpeech)m_obj).DefaultInflectionClassRA == null"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceView.cs,HandleSelectionChange,The conditional expression  "hvoObj == hvoObjWhole && hvoObjEnd == hvoObjEndWhole &&  					(ichAnchor != ichAnchorWhole || ichEnd != ichEndWhole)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The conditional expression  "rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E'"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,PropChanged,The conditional expression  "type == CellarPropertyType.OwningCollection ||  						type == CellarPropertyType.OwningSequence ||  						type == CellarPropertyType.ReferenceCollection ||  						type == CellarPropertyType.ReferenceSequence"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ShowObject,The conditional expression  "m_root == root && layoutName == m_rootLayoutName && layoutChoiceField == m_layoutChoiceField && m_descendant == descendant"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ShowObject,The conditional expression  "root != descendant && (m_currentSliceNew == null || m_currentSliceNew.IsDisposed || m_currentSliceNew.Object != descendant)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,RefreshList,The conditional expression  "slice.GetType() == oldType &&  							slice.CallerNode == xnCaller &&  							slice.ConfigurationNode == xnConfig &&  							guidSlice == m_currentSliceObjGuid &&  							slice.Label == sLabel"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,IsChildSlice,The conditional expression  "x != y && !(x is int && y is int && ((int)x) == ((int)y))"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,CheckCustomFieldsSibling,The conditional expression  "paramAttr != null && refAttr != null && paramAttr.Value == target && sibling.Name == "part" && refAttr.Value == "Custom""  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,GetFlidFromNode,The conditional expression  "(node.Name == "if" || node.Name == "ifnot") &&  				(XmlUtils.GetOptionalAttributeValue(node' "target"' "this").ToLower() != "this" ||  				(attrName != null && attrName.IndexOf('/') != -1))"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,AddSeqNode,The conditional expression  "cobj < kInstantSliceMax ||	// This may be a little on the small side  				m_currentObjectFlids.Contains(flid) ||  				(!String.IsNullOrEmpty(m_currentSlicePartName) && m_currentSliceObjGuid != Guid.Empty && m_currentSliceNew == null)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,DisplayJumpToToolAndFilterAnthroItem,The conditional expression  "display.Group != null && display.Group.IsContextMenu &&  				!String.IsNullOrEmpty(display.Group.Id) &&  				!display.Group.Id.StartsWith("mnuReferenceChoices")"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,OnDisplayJumpToTool,The conditional expression  "display.Group != null && display.Group.IsContextMenu &&  				!String.IsNullOrEmpty(display.Group.Id) &&  				!display.Group.Id.StartsWith("mnuDataTree")"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,DerivMSAReferenceSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DerivMSAReferenceSlice.cs,OnReferenceChanged,The conditional expression  "otherSlice == null || (otherSlice.Indent == Indent && idxOther > 0 && otherSlice.Object == Object)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,DerivMSAReferenceSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DerivMSAReferenceSlice.cs,OnReferenceChanged,The conditional expression  "otherSlice == null  					|| (otherSlice.Indent == Indent && idxOther > 0 && otherSlice.Object == Object)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,InflMSAReferenceSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\InflMSAReferenceSlice.cs,OnReferenceChanged,The conditional expression  "idxOther >= 0  					&& (otherSlice == null  						|| (otherSlice.Indent == Indent && idxOther > 0 && otherSlice.Object == Object))"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,InflMSAReferenceSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\InflMSAReferenceSlice.cs,OnReferenceChanged,The conditional expression  "idxOther < ContainingDataTree.Slices.Count  					&& (otherSlice == null  						|| (otherSlice.Indent == Indent && idxOther > 0 && otherSlice.Object == Object))"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,MorphTypeAtomicLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MorphTypeAtomicLauncher.cs,CheckForAffixDataLoss,The conditional expression  "msaInfl.AffixCategoryRA != null ||  						msaInfl.FromProdRestrictRC.Count > 0 ||  						msaInfl.SlotsRC.Count > 0 ||  						msaInfl.InflFeatsOA != null"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,MorphTypeAtomicLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MorphTypeAtomicLauncher.cs,CheckForAffixDataLoss,The conditional expression  "msaDeriv.AffixCategoryRA != null ||  						msaDeriv.FromInflectionClassRA != null ||  						msaDeriv.FromPartOfSpeechRA != null ||  						msaDeriv.FromProdRestrictRC.Count > 0 ||  						msaDeriv.FromStemNameRA != null ||  						msaDeriv.StratumRA != null ||  						msaDeriv.ToInflectionClassRA != null ||  						msaDeriv.ToProdRestrictRC.Count > 0 ||  						msaDeriv.FromMsFeaturesOA != null ||  						msaDeriv.ToMsFeaturesOA != null"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,MorphTypeAtomicLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MorphTypeAtomicLauncher.cs,CheckForAffixDataLoss,The conditional expression  "msaStep.InflectionClassRA != null ||  						msaStep.ProdRestrictRC.Count > 0 ||  						msaStep.InflFeatsOA != null ||  						msaStep.MsFeaturesOA != null"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,MorphTypeAtomicLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MorphTypeAtomicLauncher.cs,CheckForAffixDataLoss,The conditional expression  "fLoseInflCls || fLoseInfixLoc || fLoseGramInfo || fLoseRule"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,MorphTypeAtomicLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MorphTypeAtomicLauncher.cs,CheckForStemDataLoss,The conditional expression  "msa != null &&  					(msa.FromPartsOfSpeechRC.Count > 0 ||  					msa.InflectionClassRA != null ||  					msa.ProdRestrictRC.Count > 0 ||  					msa.StratumRA != null ||  					msa.MsFeaturesOA != null)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,MorphTypeAtomicLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MorphTypeAtomicLauncher.cs,IsStemType,The conditional expression  "(type.Guid == MoMorphTypeTags.kguidMorphBoundRoot) ||  				(type.Guid == MoMorphTypeTags.kguidMorphBoundStem) ||  				(type.Guid == MoMorphTypeTags.kguidMorphEnclitic) ||  				(type.Guid == MoMorphTypeTags.kguidMorphParticle) ||  				(type.Guid == MoMorphTypeTags.kguidMorphProclitic) ||  				(type.Guid == MoMorphTypeTags.kguidMorphRoot) ||  				(type.Guid == MoMorphTypeTags.kguidMorphStem) ||  				(type.Guid == MoMorphTypeTags.kguidMorphClitic) ||  				(type.Guid == MoMorphTypeTags.kguidMorphPhrase) ||  				(type.Guid == MoMorphTypeTags.kguidMorphDiscontiguousPhrase)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,MSAReferenceComboBoxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MSAReferenceComboBoxSlice.cs,SplitContPanel2_SizeChanged,The conditional expression  "(dxPanelWidth < m_tree.Width && dxPanelWidth >= 80) ||  				(dxPanelWidth > m_tree.Width && dxPanelWidth <= m_treeBaseWidth)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,MSAReferenceComboBoxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MSAReferenceComboBoxSlice.cs,Dispose,The conditional expression  "SplitCont != null && !SplitCont.IsDisposed &&  					SplitCont.Panel2 != null && !SplitCont.Panel2.IsDisposed"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,ListHashCodeProvider,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ObjSeqHashMap.cs,Equals,The conditional expression  "x != y && !(x is int && y is int && ((int)x) == ((int)y))"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,HandleSelectionChange,The conditional expression  "m_hvoOldSelection < 0 &&  				(hvoObj != m_hvoOldSelection || (tssOldSel != null && tssOldSel.Length > 0))"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObjectIfPossible,The conditional expression  "(ownerClassId > 0 && IsOrInheritsFrom((slice.Object.ClassID)' ownerClassId)) // For adding senses using the simple edit mode' no matter where the cursor is.  				|| slice.Object == Object  				//|| slice.Object == ContainingDataTree.Root)  				|| slice.Object.Equals(ContainingDataTree.Root)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,StartsWith,The conditional expression  "x != y && !(x is int && y is int && ((int)x) == ((int)y))"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,ReplacePartWithNewAttribute,The conditional expression  "slice.Key != null && slice.Key.Length >= 0 && slice.Key[0] == rootKey && rootKey != newLayout"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,SliceFactory,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceFactory.cs,SetConfigurationDisplayPropertyIfNeeded,The conditional expression  "!(fieldType == (int)CellarPropertyType.ReferenceCollection ||  				fieldType == (int)CellarPropertyType.OwningCollection ||  				fieldType == (int)CellarPropertyType.ReferenceSequence ||  				fieldType == (int)CellarPropertyType.OwningSequence)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceView.cs,HandleSelectionChange,The conditional expression  "hvoObj == hvoObjWhole && hvoObjEnd == hvoObjEndWhole &&  					(ichAnchor != ichAnchorWhole || ichEnd != ichEndWhole)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceView.cs,DeleteObjectFromVector,The conditional expression  "hvoObj == hvoObjWhole && hvoObjEnd == hvoObjEndWhole &&  					ichAnchor == ichAnchorWhole && ichEnd == ichEndWhole"  is complex.
Empty Catch Block,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,MakeSquigglyLine,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Framework.DetailControls,PictureSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PictureSlice.cs,InstallPicture,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Framework.DetailControls,StringSliceVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\StringSlice.cs,DoHotLinkAction,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.Framework.DetailControls,StringSliceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\StringSlice.cs,SelectAt,The method has an empty catch block.
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_atomicRefView.Size = new System.Drawing.Size(250' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_atomicRefView.Size = new System.Drawing.Size(250' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_atomicRefView.TabIndex = 2;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(250' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(250' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferencePOSSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferencePOSSlice.cs,AtomicReferencePOSSlice,The following statement contains a magic number: m_tree.Font = new Font(defAnalWs.DefaultFontName' 10);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferencePOSSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferencePOSSlice.cs,AtomicReferencePOSSlice,The following statement contains a magic number: m_tree.Width = 200;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceSlice.cs,OnViewSizeChanged,The following statement contains a magic number: int hNew = Math.Max(h1' hMin) + 3;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceSlice.cs,OnSizeChanged,The following statement contains a magic number: int hNew = Math.Max(h1' ContainingDataTree.GetMinFieldHeight()) + 3;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(232' 18);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(232' 18);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AtomicReferenceVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AtomicReferenceView.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case AtomicReferenceView.kFragAtomicRef:  					// Display a paragraph with a single item.  					int hvoProp = HvoOfObjectToDisplay(vwenv' hvo);  					if (hvoProp == 0)  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptForeColor'  							(int)FwTextPropVar.ktpvDefault'  							(int)ColorUtil.ConvertColorToBGR(Color.Gray));  						vwenv.set_IntProperty((int)FwTextPropType.ktptLeadingIndent'  							(int)FwTextPropVar.ktpvMilliPoint' 18000);  						vwenv.set_IntProperty((int)FwTextPropType.ktptAlign'  							(int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);    						//vwenv.AddString(m_cache.MakeUserTss("Click to select -->"));  						vwenv.NoteDependency(new int[] {hvo}' new int[] {m_flid}' 1);  					}  					else  					{  						vwenv.OpenParagraph();		// vwenv.OpenMappedPara();  						DisplayObjectProperty(vwenv' hvoProp);  						vwenv.CloseParagraph();  					}  					break;  				case AtomicReferenceView.kFragObjName:  					// Display one reference.  				{  					ILgWritingSystemFactory wsf =  						m_cache.WritingSystemFactory;    					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvDefault'  						(int)TptEditable.ktptNotEditable);  					ITsString tss;  					Debug.Assert(hvo != 0);  					// Use reflection to get a prebuilt name if we can.  Otherwise  					// settle for piecing together a string.  					Debug.Assert(m_cache != null);  					var obj = m_cache.ServiceLocator.GetInstance<ICmObjectRepository>().GetObject(hvo);  					Debug.Assert(obj != null);  					Type type = obj.GetType();  					System.Reflection.PropertyInfo pi = type.GetProperty("TsName"'  						System.Reflection.BindingFlags.Instance |  						System.Reflection.BindingFlags.Public |  						System.Reflection.BindingFlags.FlattenHierarchy);  					if (pi != null)  					{  						tss = (ITsString)pi.GetValue(obj' null);  					}  					else  					{  						if (!string.IsNullOrEmpty(m_displayNameProperty))  						{  							pi = type.GetProperty(m_displayNameProperty'  								System.Reflection.BindingFlags.Instance |  								System.Reflection.BindingFlags.Public |  								System.Reflection.BindingFlags.FlattenHierarchy);  						}  						int ws = wsf.GetWsFromStr(obj.SortKeyWs);  						if (ws == 0)  							ws = m_cache.ServiceLocator.WritingSystems.DefaultAnalysisWritingSystem.Handle;  						if (pi != null)  						{  							object info = pi.GetValue(obj' null);  							// handle the object type  							if (info is String)  								tss = TsStringUtils.MakeString((string) info' ws);  							else if (info is IMultiUnicode)  							{  								var accessor = info as IMultiUnicode;  								tss = accessor.get_String(ws); // try the requested one (or default analysis)  								if (tss == null || tss.Length == 0)  									tss = accessor.BestAnalysisVernacularAlternative; // get something  							}  							else if (info is ITsString)  								tss = (ITsString)info;  							else  								tss = null;  						}  						else  						{  							tss = obj.ShortNameTSS; // prefer this' which is hopefully smart about wss.  							if (tss == null || tss.Length == 0)  							{  								tss = TsStringUtils.MakeString(obj.ShortName' ws);  							}  						}  					}  					if (!string.IsNullOrEmpty(TextStyle))  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' TextStyle);    					}  					vwenv.AddString(tss);  				}  					break;  				default:  					throw new ArgumentException(  						"Don't know what to do with the given frag."' "frag");  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(208' 32);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(208' 32);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,InitializeComponent,The following statement contains a magic number: this.m_view.Size = new System.Drawing.Size(250' 24);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,InitializeComponent,The following statement contains a magic number: this.m_view.Size = new System.Drawing.Size(250' 24);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(250' 24);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(250' 24);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,IsWavFile,The following statement contains a magic number: using (FileStream fs = File.OpenRead(sFilename))  			{  				int cbFile = (int)fs.Length;  				byte[] rgb = new byte[12];  				fs.Read(rgb' 0' 12);  				fs.Close();  				if (rgb[0] == 'R' && rgb[1] == 'I' && rgb[2] == 'F' && rgb[3] == 'F' &&  				rgb[8] == 'W' && rgb[9] == 'A' && rgb[10] == 'V' && rgb[11] == 'E')  				{  					int cbSize = rgb[4] + (rgb[5] << 8) + (rgb[6] << 16) + (rgb[7] << 24);  					return cbSize == cbFile - 8;  				}  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(168' 24);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(168' 24);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,AudioVisualVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\AudioVisualSlice.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case AudioVisualView.kfragPathname:  					// Display the filename.  					ILgWritingSystemFactory wsf =  						m_cache.WritingSystemFactory;  					vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  						(int)FwTextPropVar.ktpvDefault'  						(int)TptEditable.ktptNotEditable);  					Debug.Assert(hvo != 0);  					Debug.Assert(m_cache != null);  					var file = m_cache.ServiceLocator.GetInstance<ICmFileRepository>().GetObject(hvo);  					Debug.Assert(file != null);  					string path = file.AbsoluteInternalPath;  					ITsString tss = TsStringUtils.MakeString(path' m_cache.WritingSystemFactory.UserWs);  					vwenv.OpenParagraph();  					vwenv.NoteDependency( new [] { m_cache.LangProject.Hvo' file.Hvo}'  						new [] {LangProjectTags.kflidLinkedFilesRootDir' CmFileTags.kflidInternalPath}' 2);  					vwenv.AddString(tss);  					vwenv.CloseParagraph();  					break;    				default:  					throw new ArgumentException(  						"Don't know what to do with the given frag."' "frag");  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,CheckboxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\BasicTypeSlices.cs,CheckboxSlice,The following statement contains a magic number: m_cb.Width = 20;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,CheckboxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\BasicTypeSlices.cs,CheckboxSlice,The following statement contains a magic number: m_cb.Height = 20;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,CheckboxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\BasicTypeSlices.cs,Install,The following statement contains a magic number: if (m_cb.Width != 20)  				m_cb.Width = 20;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,CheckboxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\BasicTypeSlices.cs,Install,The following statement contains a magic number: if (m_cb.Width != 20)  				m_cb.Width = 20;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,CheckboxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\BasicTypeSlices.cs,OnSizeChanged,The following statement contains a magic number: if (m_cb.Width != 20)  				m_cb.Width = 20;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,CheckboxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\BasicTypeSlices.cs,OnSizeChanged,The following statement contains a magic number: if (m_cb.Width != 20)  				m_cb.Width = 20;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,CheckboxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\BasicTypeSlices.cs,UpdateDisplayFromDatabase,The following statement contains a magic number: if (m_cb.Width != 20)  				m_cb.Width = 20;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,CheckboxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\BasicTypeSlices.cs,UpdateDisplayFromDatabase,The following statement contains a magic number: if (m_cb.Width != 20)  				m_cb.Width = 20;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DateSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\BasicTypeSlices.cs,DateSlice,The following statement contains a magic number: Control.Size = new System.Drawing.Size(128' 16);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DateSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\BasicTypeSlices.cs,DateSlice,The following statement contains a magic number: Control.Size = new System.Drawing.Size(128' 16);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ButtonLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ButtonLauncher.cs,ButtonLauncher,The following statement contains a magic number: if (!Application.RenderWithVisualStyles)  			{  				m_btnLauncher.ImageIndex = 2;  				m_btnLauncher.BackColor = System.Drawing.SystemColors.Control;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ButtonLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ButtonLauncher.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName(2' "ellipsis.bmp");
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,InitializeComponent,The following statement contains a magic number: try  			{  				DeepSuspendLayout();  				// NB: The ArrayList created here can hold disparate objects' such as XmlNodes and ints.  				if (m_root != null)  					CreateSlicesFor(m_root' null' null' null' 0' 0' new ArrayList(20)' new ObjSeqHashMap()' null);  			}  			finally  			{  				DeepResumeLayout();  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,CreateSlices,The following statement contains a magic number: try  			{  				// Bizarrely' calling Hide has been known to cause OnEnter to be called in a slice; we need to suppress this'  				// hence guarding it by setting ConstructingSlices.  				Hide();  				if (m_currentSlice != null)  					m_currentSlice.SetCurrentState(false); // needs to know no longer current' may want to save something.  				m_currentSlice = null;  				if (differentObject)  					m_currentSliceNew = null;  				//if (differentObject)  				//	Slices.Clear();  				var dummySlices = new List<Slice>(Slices.Count);  				foreach (Slice slice in Slices)  				{  					slice.Visible = false;  					if (slice.Key != null) // dummy slices may not have keys and shouldn't be reused.  						previousSlices.Add(slice.Key' slice);  					else  						dummySlices.Add(slice);  				}  				bool gonnerHasToolTip = false; // Does any goner have one?  				// Get rid of the dummies we aren't going to remove.  				foreach (Slice slice in dummySlices)  				{  					gonnerHasToolTip |= slice.ToolTip != null;  					RemoveSlice(slice);  				}  				previousSlices.ClearUnwantedPart(differentObject);  				CreateSlicesFor(m_root' null' m_rootLayoutName' m_layoutChoiceField' 0' 0' new ArrayList(20)' previousSlices' null);  				// Clear out any slices NOT reused. RemoveSlice both  				// removes them from the DataTree's controls collection and disposes them.  				foreach (Slice gonner in previousSlices.Values)  				{  					gonnerHasToolTip |= gonner.ToolTip != null;  					RemoveSlice(gonner);  				}  				if (gonnerHasToolTip)  				{  					// Since the dumb MS ToolTip class can't just remove one'  					// we have to remove them all and re-add the remaining ones  					// in order to have it really turn loose of the SliceTreeNode.  					m_tooltip.RemoveAll();  					foreach (Slice keeper in Slices)  						SetToolTip(keeper);  				}  				ResetTabIndices(0);  			}  			finally  			{  				ConstructingSlices = false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,HandlePaintLinesBetweenSlices,The following statement contains a magic number: using (var thinPen = new Pen(Color.LightGray' 1))  			using (var thickPen = new Pen(Color.LightGray' 1 + HeavyweightRuleThickness))  			{  			for (int i = 0; i < Slices.Count; i++)  			{  				var slice = Slices[i] as Slice;  				if (slice == null)  						continue;  					// shouldn't be visible  				Slice nextSlice = null;  				if (i < Slices.Count - 1)  					nextSlice = Slices[i + 1] as Slice;  				Pen linePen = thinPen;  				Point loc = slice.Location;  				int yPos = loc.Y + slice.Height;  				int xPos = loc.X + slice.LabelIndent();    				if (nextSlice != null)  				{  					// Skip drawing line between two adjacent summaries.  					//					if (nextSlice is SummarySlice && slice is SummarySlice)  					//						continue;  					//drop the next line unless the next slice is going to be a header' too  					// (as is the case with empty sections)' or isn't indented (as for the line following  					// the empty 'Subclasses' heading in each inflection class).  					if (XmlUtils.GetOptionalBooleanAttributeValue(slice.ConfigurationNode' "header"' false)  						&& nextSlice.Weight != ObjectWeight.heavy && IsChildSlice(slice' nextSlice))  						continue;    					//LT-11962 Improvements to display in Info tab.  					// (remove the line directly below the Notebook Record header)  					if (XmlUtils.GetOptionalBooleanAttributeValue(slice.ConfigurationNode' "skipSpacerLine"' false) &&  						slice is SummarySlice)  						continue;    					// Check for attribute that the next slice should be grouped with the current slice  					// regardless of whether they represent the same object.  					bool fSameObject = XmlUtils.GetOptionalBooleanAttributeValue(nextSlice.ConfigurationNode' "sameObject"' false);    					xPos = Math.Min(xPos' loc.X + nextSlice.LabelIndent());  					if (nextSlice.Weight == ObjectWeight.heavy)  					{  						linePen = thickPen;  						// Enhance JohnT: if HeavyweightRuleThickness is not even' may need to  						// add one more pixel here.  						yPos += HeavyweightRuleThickness / 2;  							yPos += HeavyweightRuleAboveMargin;  							//jh added  					}  					else if (fSameObject ||  						nextSlice.Weight == ObjectWeight.light ||  						SameSourceObject(slice' nextSlice))  					{  						xPos = SliceSplitPositionBase + Math.Min(slice.LabelIndent()' nextSlice.LabelIndent());  					}  					gr.DrawLine(linePen' xPos' yPos' width' yPos);  				}  			}  		}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,InterpretLabelAttribute,The following statement contains a magic number: if (label != null && label.Length > 7 && label.Substring(0'7).ToLower() == "$owner.")  			{  				string subfield = label.Substring(7);  				var owner = obj.Owner;  				IFwMetaDataCache mdc = Cache.DomainDataByFlid.MetaDataCache;  				int flidSubfield = GetFlidIfPossible(owner.ClassID' subfield' mdc as IFwMetaDataCacheManaged);  				if (flidSubfield != 0)  				{  					var type = (CellarPropertyType)Cache.DomainDataByFlid.MetaDataCache.GetFieldType(flidSubfield);  					switch (type)  					{  					default:  						Debug.Assert(type == CellarPropertyType.Unicode);  						break;  					case CellarPropertyType.MultiString:  						label = Cache.DomainDataByFlid.get_MultiStringAlt(owner.Hvo'  							flidSubfield'  							Cache.ServiceLocator.WritingSystems.DefaultAnalysisWritingSystem.Handle).Text;  						break;  					case CellarPropertyType.MultiUnicode:  						label = Cache.DomainDataByFlid.get_MultiStringAlt(owner.Hvo'  							flidSubfield'  							Cache.ServiceLocator.WritingSystems.DefaultAnalysisWritingSystem.Handle).Text;  						break;  					case CellarPropertyType.String:  						label = Cache.DomainDataByFlid.get_StringProp(owner.Hvo' flidSubfield).Text;  						break;  					case CellarPropertyType.Unicode:  						label = Cache.DomainDataByFlid.get_UnicodeProp(owner.Hvo' flidSubfield);  						break;  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,InterpretLabelAttribute,The following statement contains a magic number: if (label != null && label.Length > 7 && label.Substring(0'7).ToLower() == "$owner.")  			{  				string subfield = label.Substring(7);  				var owner = obj.Owner;  				IFwMetaDataCache mdc = Cache.DomainDataByFlid.MetaDataCache;  				int flidSubfield = GetFlidIfPossible(owner.ClassID' subfield' mdc as IFwMetaDataCacheManaged);  				if (flidSubfield != 0)  				{  					var type = (CellarPropertyType)Cache.DomainDataByFlid.MetaDataCache.GetFieldType(flidSubfield);  					switch (type)  					{  					default:  						Debug.Assert(type == CellarPropertyType.Unicode);  						break;  					case CellarPropertyType.MultiString:  						label = Cache.DomainDataByFlid.get_MultiStringAlt(owner.Hvo'  							flidSubfield'  							Cache.ServiceLocator.WritingSystems.DefaultAnalysisWritingSystem.Handle).Text;  						break;  					case CellarPropertyType.MultiUnicode:  						label = Cache.DomainDataByFlid.get_MultiStringAlt(owner.Hvo'  							flidSubfield'  							Cache.ServiceLocator.WritingSystems.DefaultAnalysisWritingSystem.Handle).Text;  						break;  					case CellarPropertyType.String:  						label = Cache.DomainDataByFlid.get_StringProp(owner.Hvo' flidSubfield).Text;  						break;  					case CellarPropertyType.Unicode:  						label = Cache.DomainDataByFlid.get_UnicodeProp(owner.Hvo' flidSubfield);  						break;  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,InterpretLabelAttribute,The following statement contains a magic number: if (label != null && label.Length > 7 && label.Substring(0'7).ToLower() == "$owner.")  			{  				string subfield = label.Substring(7);  				var owner = obj.Owner;  				IFwMetaDataCache mdc = Cache.DomainDataByFlid.MetaDataCache;  				int flidSubfield = GetFlidIfPossible(owner.ClassID' subfield' mdc as IFwMetaDataCacheManaged);  				if (flidSubfield != 0)  				{  					var type = (CellarPropertyType)Cache.DomainDataByFlid.MetaDataCache.GetFieldType(flidSubfield);  					switch (type)  					{  					default:  						Debug.Assert(type == CellarPropertyType.Unicode);  						break;  					case CellarPropertyType.MultiString:  						label = Cache.DomainDataByFlid.get_MultiStringAlt(owner.Hvo'  							flidSubfield'  							Cache.ServiceLocator.WritingSystems.DefaultAnalysisWritingSystem.Handle).Text;  						break;  					case CellarPropertyType.MultiUnicode:  						label = Cache.DomainDataByFlid.get_MultiStringAlt(owner.Hvo'  							flidSubfield'  							Cache.ServiceLocator.WritingSystems.DefaultAnalysisWritingSystem.Handle).Text;  						break;  					case CellarPropertyType.String:  						label = Cache.DomainDataByFlid.get_StringProp(owner.Hvo' flidSubfield).Text;  						break;  					case CellarPropertyType.Unicode:  						label = Cache.DomainDataByFlid.get_UnicodeProp(owner.Hvo' flidSubfield);  						break;  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,AddSimpleNode,The following statement contains a magic number: if (fVisIfData) // Contains the tests to see if usable data is inside the field (for all types of fields)  			{  				if (editor != null && editor == "custom")  				{  					Type typeFound;  					System.Reflection.MethodInfo mi =  						XmlUtils.GetStaticMethod(node' "assemblyPath"' "class"' "ShowSliceForVisibleIfData"' out typeFound);  					if (mi != null)  					{  						var parameters = new object[2];  						parameters[0] = node;  						parameters[1] = obj;  						object result = mi.Invoke(typeFound'  							System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public |  							System.Reflection.BindingFlags.NonPublic' null' parameters' null);  						if (!(bool)result)  							return NodeTestResult.kntrNothing;  					}  				}  				else if (flid == 0 && editor != null && editor == "autocustom")  				{  					flid = SliceFactory.GetCustomFieldFlid(caller' realSda.MetaDataCache' obj);  				}    				if (flid != 0)  				{  					var fieldType = (CellarPropertyType)(realSda.MetaDataCache.GetFieldType(flid) & (int)CellarPropertyTypeFilter.VirtualMask);  					switch (fieldType)  					{  						default: // if we don't know how to check' make it visible.  							break;  							// These cases are a bit tricky. We're duplicating some information here about how the slices  							// interpret their ws parameter. Don't see how to avoid it' though' without creating the slices even if not needed.  						case CellarPropertyType.MultiString:  						case CellarPropertyType.MultiUnicode:  							string ws = XmlUtils.GetOptionalAttributeValue(node' "ws"' null);  							switch (ws)  							{  								case "vernacular":  									if (realSda.get_MultiStringAlt(obj.Hvo' flid'  										wsContainer.DefaultVernacularWritingSystem.Handle).Length == 0)  										return NodeTestResult.kntrNothing;  									break;  								case "analysis":  									if (realSda.get_MultiStringAlt(obj.Hvo'  										flid'  										wsContainer.DefaultAnalysisWritingSystem.Handle).Length == 0)  										return NodeTestResult.kntrNothing;  									break;  								default:  									if (editor == "jtview")  									{  										if (realSda.get_MultiStringAlt(obj.Hvo'  											flid'  											wsContainer.DefaultAnalysisWritingSystem.Handle).Length == 0)  											return NodeTestResult.kntrNothing;  									}  									// try one of the magic ones for multistring  									int wsMagic = WritingSystemServices.GetMagicWsIdFromName(ws);  									if (wsMagic == 0 && editor == "autocustom")  									{  										wsMagic = realSda.MetaDataCache.GetFieldWs(flid);  									}  									if (wsMagic == 0 && editor != "autocustom")  										break; // not recognized' treat as visible  									var rgws = WritingSystemServices.GetWritingSystemList(m_cache' wsMagic' false).ToArray();  									bool anyNonEmpty = false;  									foreach (CoreWritingSystemDefinition wsInst in rgws)  									{  										if (realSda.get_MultiStringAlt(obj.Hvo' flid' wsInst.Handle).Length != 0)  										{  											anyNonEmpty = true;  											break;  										}  									}  									if (!anyNonEmpty)  										return NodeTestResult.kntrNothing;  									break;  							}  							break;  						case CellarPropertyType.String:  							if (realSda.get_StringProp(obj.Hvo' flid).Length == 0)  								return NodeTestResult.kntrNothing;  							break;  						case CellarPropertyType.Unicode:  							string val = realSda.get_UnicodeProp(obj.Hvo' flid);  							if (string.IsNullOrEmpty(val))  								return NodeTestResult.kntrNothing;  							break;  							// Usually' the header nodes for sequences and atomic object props  							// have no editor. But sometimes they may have a jtview summary  							// or the like. If an object-prop flid is specified' check it'  							// in case we want to suppress the whole header.  						case CellarPropertyType.OwningAtomic:  						case CellarPropertyType.ReferenceAtomic:  							int hvoT = realSda.get_ObjectProp(obj.Hvo' flid);  							if (hvoT == 0)  								return NodeTestResult.kntrNothing;  							var objt = m_cache.ServiceLocator.GetInstance<ICmObjectRepository>().GetObject(hvoT);  							if (objt.ClassID == StTextTags.kClassId) // if clid is an sttext clid  							{  								var txt = (IStText) objt;  								// Test if the StText has only one paragraph  								int cpara = txt.ParagraphsOS.Count;  								if (cpara == 1)  								{  									// Tests if paragraph is empty  									ITsString tss = ((IStTxtPara) txt.ParagraphsOS[0]).Contents;  									if (tss == null || tss.Length == 0)  										return NodeTestResult.kntrNothing;  								}  							}  							break;  						case CellarPropertyType.ReferenceCollection:  							// Currently this special case is only needed for ReferenceCollection (specifically for PublishIn).  							// We can broaden it if necessary' but why take the time to look for it elsewhere?  							int visibilityFlid = flid;  							string visField = XmlUtils.GetOptionalAttributeValue(node' "visField");  							if (visField != null)  							{  								int clsid = Cache.MetaDataCacheAccessor.GetOwnClsId(flid);  								visibilityFlid = Cache.MetaDataCacheAccessor.GetFieldId2(clsid' visField' true);  							}  							if (realSda.get_VecSize(obj.Hvo' visibilityFlid) == 0)  								return NodeTestResult.kntrNothing;  							break;  						case CellarPropertyType.OwningCollection:  						case CellarPropertyType.OwningSequence:    						case CellarPropertyType.ReferenceSequence:  							if (realSda.get_VecSize(obj.Hvo' flid) == 0)  								return NodeTestResult.kntrNothing;  							break;  					}  				}  				else if (editor == null)  				{  					// may be a summary node for a sequence or atomic node. Suppress it as well as the prop.  					XmlNode child = null;  					int cnodes = 0;  					foreach (XmlNode n in node.ChildNodes)  					{  						if (node is XmlComment)  							continue;  						cnodes++;  						if (cnodes > 1)  							break;  						child = n;  					}  					if (child != null && cnodes == 1) // exactly one non-comment child  					{  						int flidChild = GetFlidFromNode(child' obj);  						// If it's an obj or seq node and the property is empty' we'll show nothing.  						if (flidChild != 0)  						{  							if ((child.Name == "seq" || child.Name == "obj")  								&& realSda.get_VecSize(obj.Hvo' flidChild) == 0)  							{  								return NodeTestResult.kntrNothing;  							}  						}  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,OnLayout,The following statement contains a magic number: for (int i = 0; i < 3; i++)  			//for ( ; ; )  			{  				int clientWidth = ClientRectangle.Width;  				// Somehow this sometimes changes the scroll position.  				// This might be reasonable if it changed the range' but it does it other times.  				// I can't figure out why' so just force it back if it does. Grrrr!  				Point aspOld = AutoScrollPosition;  				base.OnLayout(levent);  				if (AutoScrollPosition != aspOld)  					AutoScrollPosition = new Point (-aspOld.X' -aspOld.Y);    				if (smallestSize.IsEmpty || ClientSize.Width < smallestSize.Width)  					smallestSize = ClientSize;  				// If that changed the width of our client rectangle we definitely need to  				// call HandleLayout1 again.  				fNeedInternalLayout |= (clientWidth != ClientRectangle.Width);  				if (!fNeedInternalLayout)  					return;    				fNeedInternalLayout = false; // don't need to do again unless client rect width changes.  				Rectangle clipRect = ClientRectangle;  				clipRect.Offset(-AutoScrollPosition.X' -AutoScrollPosition.Y);  				m_layoutState = LayoutStates.klsDoingLayout;  				int yTop;  				try  				{  					yTop = HandleLayout1(true' clipRect);  				}  				finally  				{  					if (m_layoutState == LayoutStates.klsDoingLayout)  						m_layoutState = LayoutStates.klsNormal;  				}  				if (yTop != AutoScrollMinSize.Height)  				{  					AutoScrollMinSize = new Size(0' yTop);  					// If we don't do this' the system thinks only the previously hidden part of the  					// data pane was affected' whereas all of it may have been if control heights  					// changed.  					// (I suppose there could be a pathological case where two slices changed heigtht  					// by opposite amounts and we need this redraw even though the height did not change'  					// but it seems very unlikely.)  					Invalidate();  				}  				// Do the BASE.layout AGAIN...this seems to be the only way to get the scroll bars to  				// apppear and disappear as required by more or less slices...  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,GetMinFieldHeight,The following statement contains a magic number: return 18;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ScrollCurrentAndIfPossibleSectionIntoView,The following statement contains a magic number: try  			{  				HandleLayout1(false' new Rectangle(0' Math.Max(0' CurrentSlice.Top - ClientRectangle.Height)'  					ClientRectangle.Width' ClientRectangle.Height * 2));  			}  			finally  			{  				m_layoutState = LayoutStates.klsNormal;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ScrollCurrentAndIfPossibleSectionIntoView,The following statement contains a magic number: if (previousSummary.Top < 0 && CurrentSlice.Bottom - previousSummary.Top < ClientRectangle.Height - 20)  				ScrollControlIntoView(previousSummary);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ScrollCurrentAndIfPossibleSectionIntoView,The following statement contains a magic number: while (lastChildIndex < Slices.Count && Slice.StartsWith(((Slice)Slices[lastChildIndex]).Key' previousSummary.Key)  				&& Slices[lastChildIndex].Bottom - previousSummary.Top < ClientRectangle.Height - 20)  				lastChildIndex++;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,SetDefaultCurrentSlice,The following statement contains a magic number: if (sliceToSetAsCurrent != null)  			{  				CurrentSlice = sliceToSetAsCurrent;  				if (!suppressFocusChange && !m_currentSlice.Focused && m_fCurrentContentControlObjectTriggered)	// probably coming from m_currentSliceNew  				{  					// For string type slices' place cursor at end of (top) line.  This works  					// more reliably than putting it at the beginning for some reason' and makes  					// more sense in some circumstances (especially in the conversion from a ghost  					// slice to a string type slice).  					if (m_currentSlice is MultiStringSlice)  					{  						var mss = (MultiStringSlice) m_currentSlice;  						mss.SelectAt(mss.WritingSystemsSelectedForDisplay.First().Handle' 99999);  					}  					else if (m_currentSlice is StringSlice)  					{  						((StringSlice) m_currentSlice).SelectAt(99999);  					}  					m_currentSlice.TakeFocus(false);  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,SetDefaultCurrentSlice,The following statement contains a magic number: if (sliceToSetAsCurrent != null)  			{  				CurrentSlice = sliceToSetAsCurrent;  				if (!suppressFocusChange && !m_currentSlice.Focused && m_fCurrentContentControlObjectTriggered)	// probably coming from m_currentSliceNew  				{  					// For string type slices' place cursor at end of (top) line.  This works  					// more reliably than putting it at the beginning for some reason' and makes  					// more sense in some circumstances (especially in the conversion from a ghost  					// slice to a string type slice).  					if (m_currentSlice is MultiStringSlice)  					{  						var mss = (MultiStringSlice) m_currentSlice;  						mss.SelectAt(mss.WritingSystemsSelectedForDisplay.First().Handle' 99999);  					}  					else if (m_currentSlice is StringSlice)  					{  						((StringSlice) m_currentSlice).SelectAt(99999);  					}  					m_currentSlice.TakeFocus(false);  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,DataTreeImages,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTreeImages.cs,InitializeComponent,The following statement contains a magic number: this.nodeImages.Images.SetKeyName(2' "");
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,EnumComboSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\EnumComboSlice.cs,EnumComboSlice,The following statement contains a magic number: m_combo.Font = new Font(MiscUtils.StandardSansSerif' 10);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,EnumComboSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\EnumComboSlice.cs,PopulateCombo,The following statement contains a magic number: m_comboWidth = width + 25;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,EnumComboSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\EnumComboSlice.cs,PopulateCombo,The following statement contains a magic number: m_combo.MaxDropDownItems = Math.Min(m_combo.Items.Count' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,FwCancelSearchButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\FwCancelSearchButton.cs,Init,The following statement contains a magic number: Size = new Size(25' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,FwCancelSearchButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\FwCancelSearchButton.cs,Init,The following statement contains a magic number: Size = new Size(25' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,Initialize,The following statement contains a magic number: m_SearchTimer = new SearchTimer(this' 500' SearchSemanticDomains' new List<Control> {domainTree' domainList});
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainsLinkPanel.Location = new System.Drawing.Point(8' 367);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainsLinkPanel.Location = new System.Drawing.Point(8' 367);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainsLinkPanel.Padding = new System.Windows.Forms.Padding(5' 0' 0' 0);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainsLinkPanel.Size = new System.Drawing.Size(305' 40);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainsLinkPanel.Size = new System.Drawing.Size(305' 40);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainsLinkPanel.TabIndex = 5;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainsLinkPic.Location = new System.Drawing.Point(8' 3);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainsLinkPic.Location = new System.Drawing.Point(8' 3);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainsLinkPic.Size = new System.Drawing.Size(16' 16);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainsLinkPic.Size = new System.Drawing.Size(16' 16);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainsLinkPic.TabIndex = 5;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainslinklabel.Location = new System.Drawing.Point(30' 4);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainslinklabel.Location = new System.Drawing.Point(30' 4);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainslinklabel.Size = new System.Drawing.Size(116' 13);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainslinklabel.Size = new System.Drawing.Size(116' 13);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.editDomainslinklabel.TabIndex = 4;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.domainTree.Size = new System.Drawing.Size(304' 148);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.domainTree.Size = new System.Drawing.Size(304' 148);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.domainTree.TabIndex = 6;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.searchTextBox.Size = new System.Drawing.Size(278' 24);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.searchTextBox.Size = new System.Drawing.Size(278' 24);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.searchTextBox.TabIndex = 7;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.domainList.Size = new System.Drawing.Size(304' 148);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.domainList.Size = new System.Drawing.Size(304' 148);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.domainList.TabIndex = 8;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader1.Width = 305;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.displayUsagePanel.Location = new System.Drawing.Point(8' 338);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.displayUsagePanel.Location = new System.Drawing.Point(8' 338);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.displayUsagePanel.Padding = new System.Windows.Forms.Padding(5' 0' 0' 0);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.displayUsagePanel.Size = new System.Drawing.Size(305' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.displayUsagePanel.Size = new System.Drawing.Size(305' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.displayUsagePanel.TabIndex = 6;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.displayUsageCheckBox.Location = new System.Drawing.Point(8' 3);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.displayUsageCheckBox.Location = new System.Drawing.Point(8' 3);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.displayUsageCheckBox.Size = new System.Drawing.Size(126' 17);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.displayUsageCheckBox.Size = new System.Drawing.Size(126' 17);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.buttonPanel.Location = new System.Drawing.Point(8' 400);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.buttonPanel.Location = new System.Drawing.Point(8' 400);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.buttonPanel.Padding = new System.Windows.Forms.Padding(0' 2' 0' 0);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.buttonPanel.Size = new System.Drawing.Size(305' 34);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.buttonPanel.Size = new System.Drawing.Size(305' 34);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.buttonPanel.TabIndex = 7;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.buttonHelp.Location = new System.Drawing.Point(227' 5);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.buttonHelp.Location = new System.Drawing.Point(227' 5);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.buttonHelp.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.buttonHelp.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.buttonHelp.TabIndex = 9;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(146' 5);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(146' 5);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 2;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(65' 5);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(65' 5);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.selectedDomainsList.Size = new System.Drawing.Size(304' 146);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.selectedDomainsList.Size = new System.Drawing.Size(304' 146);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.selectedDomainsList.TabIndex = 9;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader2.Width = 305;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(214' 340);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(214' 340);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(100' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(100' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 10;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(8' 4);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(8' 4);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(305' 26);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(305' 26);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 12;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(8' 34);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(8' 34);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(307' 298);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(307' 298);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 148;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 13;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.btnCancelSearch.Location = new System.Drawing.Point(278' 1);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.btnCancelSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.btnCancelSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.btnCancelSearch.TabIndex = 11;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(322' 445);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(322' 445);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(338' 483);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SemanticDomainsChooser,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SemanticDomainsChooser.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(338' 483);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,GenDateChooserDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GenDateChooserDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_yearUpDown.Maximum = new decimal(new int[] {  			9999'  			0'  			0'  			0});
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,GenDateChooserDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GenDateChooserDlg.cs,OnLoad,The following statement contains a magic number: if (m_calendar.Bottom > m_okButton.Top)  			{  				this.Height = 337;  				m_calendar.Left = 43;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,GenDateChooserDlg,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GenDateChooserDlg.cs,OnLoad,The following statement contains a magic number: if (m_calendar.Bottom > m_okButton.Top)  			{  				this.Height = 337;  				m_calendar.Left = 43;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,GenDateLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GenDateLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_panel.Size = new System.Drawing.Size(22' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,GenDateLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GenDateLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_panel.Size = new System.Drawing.Size(22' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,GenDateLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GenDateLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_genDateTextBox.Size = new System.Drawing.Size(150' 13);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,GenDateLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GenDateLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_genDateTextBox.Size = new System.Drawing.Size(150' 13);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,GenDateLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GenDateLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(150' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,GenDateLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GenDateLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(150' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,GhostStringSliceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GhostStringSlice.cs,MakeRealObject,The following statement contains a magic number: switch (typeOwning)  				{  					default:  						if (m_flidEmptyProp != RnGenericRecTags.kflidText)  							throw new Exception("ghost string property must be owning object property");  						break;  					case CellarPropertyType.OwningAtomic:  						ord = -2;  						break;  					case CellarPropertyType.OwningCollection:  						ord = -1;  						break;  					case CellarPropertyType.OwningSequence:  						// ord = 0 set above (inserting the first and only object at position 0).  						break;  				}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,GhostStringSliceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\GhostStringSlice.cs,RestoreSelection,The following statement contains a magic number: foreach (Slice slice in datatree.Slices)  				{  					if (slice.Key.Length < key.Length + 2)  						continue;  					if (!StartsWith(slice.Key' key))  						continue;  					object nextKeyItem = slice.Key[key.Length]; // should be hvoNewObj  					if (!(nextKeyItem is int))  						continue;  					if ((int)nextKeyItem != hvoNewObj)  						continue;  					XmlNode lastKeyNode = slice.Key[slice.Key.Length - 1] as XmlNode;  					if (lastKeyNode == null)  						continue;  					if (lastKeyNode.Name != "slice")  						continue;  					if (slice is StringSlice)  					{  						StringSlice ss = slice as StringSlice;  						if (ss.FieldId != flidStringProp)  							continue;  						if (ss.WritingSystemId != ws)  							continue;  						// For SelectAt to work' the rootbox must be constructed and visible.  						GetSliceReadyToFocus(ss);  						ss.SelectAt(ich);  						ss.Control.Focus();  						break;  					}  					else if (slice is MultiStringSlice)  					{  						MultiStringSlice mss = slice as MultiStringSlice;  						if (mss.FieldId != flidStringProp)  							continue;  						// Enhance JohnT: add functions to MultiStringSlice and LabeledMultiStringControl  						// so we can check that it's displaying the right writing systems.  						// For SelectAt to work' the rootbox must be constructed and visible.  						GetSliceReadyToFocus(mss);  						mss.SelectAt(ws' ich);  						mss.Control.Focus();  						break;  					}  					else if (slice is StTextSlice)  					{  						var stslice = (StTextSlice) slice;  						GetSliceReadyToFocus(stslice);  						stslice.SelectAt(ich);  						slice.Control.Focus();  						break;  					}  				}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,MSAReferenceComboBoxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MSAReferenceComboBoxSlice.cs,MSAReferenceComboBoxSlice,The following statement contains a magic number: m_tree.Font = new System.Drawing.Font(defAnalWs.DefaultFontName' 10);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,MSAReferenceComboBoxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MSAReferenceComboBoxSlice.cs,MSAReferenceComboBoxSlice,The following statement contains a magic number: m_tree.Width = 240;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,MSAReferenceComboBoxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MSAReferenceComboBoxSlice.cs,SplitContPanel2_SizeChanged,The following statement contains a magic number: if ((dxPanelWidth < m_tree.Width && dxPanelWidth >= 80) ||  				(dxPanelWidth > m_tree.Width && dxPanelWidth <= m_treeBaseWidth))  			{  				m_tree.Width = dxPanelWidth;  			}  			else if (m_tree.Width != m_treeBaseWidth && dxPanelWidth >= 80)  			{  				m_tree.Width = Math.Min(m_treeBaseWidth' dxPanelWidth);  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,MSAReferenceComboBoxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MSAReferenceComboBoxSlice.cs,SplitContPanel2_SizeChanged,The following statement contains a magic number: if ((dxPanelWidth < m_tree.Width && dxPanelWidth >= 80) ||  				(dxPanelWidth > m_tree.Width && dxPanelWidth <= m_treeBaseWidth))  			{  				m_tree.Width = dxPanelWidth;  			}  			else if (m_tree.Width != m_treeBaseWidth && dxPanelWidth >= 80)  			{  				m_tree.Width = Math.Min(m_treeBaseWidth' dxPanelWidth);  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ContextVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MultiLevelConc.cs,Display,The following statement contains a magic number: vwenv.OpenConcPara(m_info.ContextStringStartOffset'  					m_info.ContextStringStartOffset + m_info.ContextStringLength'  					VwConcParaOpts.kcpoDefault'  					72 * 2 * 1000);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ContextVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MultiLevelConc.cs,Display,The following statement contains a magic number: vwenv.OpenConcPara(m_info.ContextStringStartOffset'  					m_info.ContextStringStartOffset + m_info.ContextStringLength'  					VwConcParaOpts.kcpoDefault'  					72 * 2 * 1000);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ContextVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MultiLevelConc.cs,Display,The following statement contains a magic number: vwenv.OpenConcPara(m_info.ContextStringStartOffset'  					m_info.ContextStringStartOffset + m_info.ContextStringLength'  					VwConcParaOpts.kcpoDefault'  					72 * 2 * 1000);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_phoneEnvRefView.Size = new System.Drawing.Size(150' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_phoneEnvRefView.Size = new System.Drawing.Size(150' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_phoneEnvRefView.TabIndex = 2;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(150' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(150' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceSlice.cs,OnSizeChanged,The following statement contains a magic number: if (rs.RootBox != null)  			{  				// Allow it to be the height it wants + fluff to get rid of scroll bar.  				// Adjust our own height to suit.  				// Note that this may produce a recursive call!  				this.Height = rs.RootBox.Height + 8;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceSlice.cs,OnViewSizeChanged,The following statement contains a magic number: int hNew = Math.Max(h1' hMin) + 3;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,HandleSelectionChange,The following statement contains a magic number: m_rootb.PropChanged(m_rootObj.Hvo' kMainObjEnvironments' count - 1' 2' 1);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,MakeSquigglyLine,The following statement contains a magic number: bldr.SetIntPropValues(pos' len' (int)FwTextPropType.ktptUnderColor'  				(int)FwTextPropVar.ktpvDefault'  				col.R + (col.B * 256 + col.G) * 256);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PhoneEnvReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PhoneEnvReferenceView.cs,MakeSquigglyLine,The following statement contains a magic number: bldr.SetIntPropValues(pos' len' (int)FwTextPropType.ktptUnderColor'  				(int)FwTextPropVar.ktpvDefault'  				col.R + (col.B * 256 + col.G) * 256);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PictureSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PictureSlice.cs,OnSizeChanged,The following statement contains a magic number: int height = Math.Min(idealHeight' ContainingDataTree.Height / 3);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PictureSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PictureSlice.cs,OnSizeChanged,The following statement contains a magic number: if (m_fThumbnail && height > 80)  				height = 80;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PictureSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PictureSlice.cs,OnSizeChanged,The following statement contains a magic number: if (m_fThumbnail && height > 80)  				height = 80;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityAutoComplete,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityAutoComplete.cs,PerformUpdate,The following statement contains a magic number: try  			{  				m_changingSelection = true;  				try  				{  					m_listBox.BeginUpdate();  					m_listBox.Items.Clear();  					// TODO: sort the results  					foreach (ICmPossibility poss in m_searcher.Search(0' (ITsString) param))  					{  						// Every so often see whether the user has typed something that makes our search irrelevant.  						if (ShouldAbort())  							return false;    						m_listBox.Items.Add(ObjectLabel.CreateObjectLabel(m_cache' poss' m_displayNameProperty' m_displayWs));  					}  				}  				finally  				{  					m_listBox.EndUpdate();  				}    				if (m_listBox.Items.Count > 0)  				{  					m_listBox.AdjustSize(500' 400);  					m_listBox.SelectedIndex = 0;  					m_listBox.Launch(m_control.RectangleToScreen(m_control.Bounds)' Screen.GetWorkingArea(m_control));  				}  				else  				{  					m_listBox.HideForm();  				}  			}  			finally  			{  				m_changingSelection = false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityAutoComplete,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityAutoComplete.cs,PerformUpdate,The following statement contains a magic number: try  			{  				m_changingSelection = true;  				try  				{  					m_listBox.BeginUpdate();  					m_listBox.Items.Clear();  					// TODO: sort the results  					foreach (ICmPossibility poss in m_searcher.Search(0' (ITsString) param))  					{  						// Every so often see whether the user has typed something that makes our search irrelevant.  						if (ShouldAbort())  							return false;    						m_listBox.Items.Add(ObjectLabel.CreateObjectLabel(m_cache' poss' m_displayNameProperty' m_displayWs));  					}  				}  				finally  				{  					m_listBox.EndUpdate();  				}    				if (m_listBox.Items.Count > 0)  				{  					m_listBox.AdjustSize(500' 400);  					m_listBox.SelectedIndex = 0;  					m_listBox.Launch(m_control.RectangleToScreen(m_control.Bounds)' Screen.GetWorkingArea(m_control));  				}  				else  				{  					m_listBox.HideForm();  				}  			}  			finally  			{  				m_changingSelection = false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityAutoComplete,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityAutoComplete.cs,CreateSearcher,The following statement contains a magic number: for (; m_curPossIndex < m_possibilities.Count; m_curPossIndex++)  			{  				// Every so often see whether the user has typed something that makes our search irrelevant.  				if (control++ % 50 == 0 && ShouldAbort())  					return;    				ICmPossibility poss = m_possibilities[m_curPossIndex];  				ITsString name = null;  				foreach (int ws in WritingSystemServices.GetWritingSystemIdsFromLabel(m_cache' m_displayWs' m_cache.ServiceLocator.WritingSystemManager.UserWritingSystem'  					poss.Hvo' CmPossibilityTags.kflidName' null))  				{  					ITsString tss = poss.Name.StringOrNull(ws);  					if (tss != null && tss.Length > 0)  					{  						name = tss;  						m_searcher.Add(poss' 0' tss);  						break;  					}  				}    				foreach (int ws in WritingSystemServices.GetWritingSystemIdsFromLabel(m_cache' m_displayWs' m_cache.ServiceLocator.WritingSystemManager.UserWritingSystem'  					poss.Hvo' CmPossibilityTags.kflidAbbreviation' null))  				{  					ITsString tss = poss.Abbreviation.StringOrNull(ws);  					if (tss != null && tss.Length > 0)  					{  						m_searcher.Add(poss' 0' tss);  						if (name != null)  						{  							var tisb = TsStringUtils.MakeIncStrBldr();  							tisb.AppendTsString(tss);  							tisb.AppendTsString(TsStringUtils.MakeString(" - "' m_cache.DefaultUserWs));  							tisb.AppendTsString(name);  							m_searcher.Add(poss' 0' tisb.GetString());  						}  						break;  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ReferenceComboBoxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ReferenceComboBoxSlice.cs,ReferenceComboBoxSlice,The following statement contains a magic number: m_combo.Font = new System.Drawing.Font(  				cache.ServiceLocator.WritingSystems.DefaultVernacularWritingSystem.DefaultFontName'  				10);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ReferenceComboBoxSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ReferenceComboBoxSlice.cs,ReferenceComboBoxSlice,The following statement contains a magic number: m_combo.Width = 200;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ReferenceVectorSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ReferenceVectorSlice.cs,OnSizeChanged,The following statement contains a magic number: int hNew = Math.Max(h1' ContainingDataTree.GetMinFieldHeight()) + 3;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ReferenceVectorSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\ReferenceVectorSlice.cs,OnViewSizeChanged,The following statement contains a magic number: int hNew = Math.Max(h1' hMin) + 3;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,Install,The following statement contains a magic number: if (!string.IsNullOrEmpty(Label))  			{  				// Susanna wanted to try five' rather than the default of four  				// to see if wider and still invisble made it easier to work with.  				// It may end up being made visible in a light grey color' but then it would  				// go back to the default of four.  				// Being visible at four may be too overpowering' so we may have to  				// manually draw a thin line to give the user a que as to where the splitter bar is.  				// Then' if it gets to be visible' we will probably need to add a bit of padding between  				// the line and the main slice content' or its text will be connected to the line.  				sc.SplitterWidth = 5;    				// It was hard-coded to 40' but it isn't right for indented slices'  				// as they then can be shrunk so narrow as to completely cover up their label.  				sc.Panel1MinSize = (20 * (Indent + 1)) + 20;  				sc.Panel2MinSize = 0; // min size of right pane  				// This makes the splitter essentially invisible.  				sc.BackColor = Color.FromKnownColor(KnownColor.Window); //to make it invisible  				treeNode.MouseEnter += treeNode_MouseEnter;  				treeNode.MouseLeave += treeNode_MouseLeave;  				treeNode.MouseHover += treeNode_MouseEnter;  			}  			else  			{  				// SummarySlice is one of these kinds of Slices.  				//Debug.WriteLine("Slice gets no usable splitter: " + GetType().Name);  				sc.SplitterWidth = 1;  				sc.Panel1MinSize = LabelIndent();  				sc.SplitterDistance = LabelIndent();  				sc.IsSplitterFixed = true;  				// Just in case it was previously installed with a different label.  				treeNode.MouseEnter -= treeNode_MouseEnter;  				treeNode.MouseLeave -= treeNode_MouseLeave;  				treeNode.MouseHover -= treeNode_MouseEnter;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,Install,The following statement contains a magic number: if (!string.IsNullOrEmpty(Label))  			{  				// Susanna wanted to try five' rather than the default of four  				// to see if wider and still invisble made it easier to work with.  				// It may end up being made visible in a light grey color' but then it would  				// go back to the default of four.  				// Being visible at four may be too overpowering' so we may have to  				// manually draw a thin line to give the user a que as to where the splitter bar is.  				// Then' if it gets to be visible' we will probably need to add a bit of padding between  				// the line and the main slice content' or its text will be connected to the line.  				sc.SplitterWidth = 5;    				// It was hard-coded to 40' but it isn't right for indented slices'  				// as they then can be shrunk so narrow as to completely cover up their label.  				sc.Panel1MinSize = (20 * (Indent + 1)) + 20;  				sc.Panel2MinSize = 0; // min size of right pane  				// This makes the splitter essentially invisible.  				sc.BackColor = Color.FromKnownColor(KnownColor.Window); //to make it invisible  				treeNode.MouseEnter += treeNode_MouseEnter;  				treeNode.MouseLeave += treeNode_MouseLeave;  				treeNode.MouseHover += treeNode_MouseEnter;  			}  			else  			{  				// SummarySlice is one of these kinds of Slices.  				//Debug.WriteLine("Slice gets no usable splitter: " + GetType().Name);  				sc.SplitterWidth = 1;  				sc.Panel1MinSize = LabelIndent();  				sc.SplitterDistance = LabelIndent();  				sc.IsSplitterFixed = true;  				// Just in case it was previously installed with a different label.  				treeNode.MouseEnter -= treeNode_MouseEnter;  				treeNode.MouseLeave -= treeNode_MouseLeave;  				treeNode.MouseHover -= treeNode_MouseEnter;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,Install,The following statement contains a magic number: if (!string.IsNullOrEmpty(Label))  			{  				// Susanna wanted to try five' rather than the default of four  				// to see if wider and still invisble made it easier to work with.  				// It may end up being made visible in a light grey color' but then it would  				// go back to the default of four.  				// Being visible at four may be too overpowering' so we may have to  				// manually draw a thin line to give the user a que as to where the splitter bar is.  				// Then' if it gets to be visible' we will probably need to add a bit of padding between  				// the line and the main slice content' or its text will be connected to the line.  				sc.SplitterWidth = 5;    				// It was hard-coded to 40' but it isn't right for indented slices'  				// as they then can be shrunk so narrow as to completely cover up their label.  				sc.Panel1MinSize = (20 * (Indent + 1)) + 20;  				sc.Panel2MinSize = 0; // min size of right pane  				// This makes the splitter essentially invisible.  				sc.BackColor = Color.FromKnownColor(KnownColor.Window); //to make it invisible  				treeNode.MouseEnter += treeNode_MouseEnter;  				treeNode.MouseLeave += treeNode_MouseLeave;  				treeNode.MouseHover += treeNode_MouseEnter;  			}  			else  			{  				// SummarySlice is one of these kinds of Slices.  				//Debug.WriteLine("Slice gets no usable splitter: " + GetType().Name);  				sc.SplitterWidth = 1;  				sc.Panel1MinSize = LabelIndent();  				sc.SplitterDistance = LabelIndent();  				sc.IsSplitterFixed = true;  				// Just in case it was previously installed with a different label.  				treeNode.MouseEnter -= treeNode_MouseEnter;  				treeNode.MouseLeave -= treeNode_MouseLeave;  				treeNode.MouseHover -= treeNode_MouseEnter;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,GetBranchHeight,The following statement contains a magic number: return Convert.ToInt32((m_fontLabel.GetHeight() + 1.0) / 2.0);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,Expand,The following statement contains a magic number: try  			{  				ContainingDataTree.DeepSuspendLayout();  				XmlNode caller = null;  				if (Key.Length > 1)  					caller = Key[Key.Length - 2] as XmlNode;  				int insPos = iSlice + 1;  				CreateIndentedNodes(caller' m_obj' Indent' ref insPos' new ArrayList(Key)' new ObjSeqHashMap()' m_configurationNode);    				Expansion = DataTree.TreeItemState.ktisExpanded;  				if (m_propertyTable != null)  				{  					m_propertyTable.SetProperty(ExpansionStateKey' true' true);  				}  			}  			finally  			{  				ContainingDataTree.DeepResumeLayout();  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObjectIfPossible,The following statement contains a magic number: if ((ownerClassId > 0 && IsOrInheritsFrom((slice.Object.ClassID)' ownerClassId)) // For adding senses using the simple edit mode' no matter where the cursor is.  				|| slice.Object == Object  				//|| slice.Object == ContainingDataTree.Root)  				|| slice.Object.Equals(ContainingDataTree.Root)) // Other cases.  			{  				// The slice's object has an acceptable type provided it implements the required field.  				// See if the current slice's object has the field named.  				int flid = slice.GetFlid(fieldName);  				var mdc = Cache.MetaDataCacheAccessor as IFwMetaDataCacheManaged;  				int flidT = ContainingDataTree.GetFlidIfPossible(ownerClassId' fieldName' mdc);  				if (flidT != 0 && flid != flidT)  					flid = flidT;  				if (flid == 0)  					return false;  				// Found a suitable slice. Do the insertion.  				int insertionPosition;		// causes return false if not changed.  				if (m_cache.IsReferenceProperty(flid))  				{  					insertionPosition = InsertObjectIntoVirtualBackref(Cache' m_mediator' m_propertyTable' slice.Object.Hvo'  						newObjectClassId' flid);  				}  				else  				{  					insertionPosition = slice.InsertObject(flid' newObjectClassId);  				}  				if (insertionPosition < 0)  					return insertionPosition == -2;		// -2 keeps dlg for adding subPOSes from firing for each slice when cancelled.  				if (String.IsNullOrEmpty(recomputeVirtual))  					return true;  				// Figure the things to recompute.  				string[] parts = recomputeVirtual.Split('.');  				if (parts.Length != 2)  				{  					Debug.Assert(parts.Length == 2);  					return true; // but fairly harmless to ignore  				}    				return true;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObjectIfPossible,The following statement contains a magic number: if ((ownerClassId > 0 && IsOrInheritsFrom((slice.Object.ClassID)' ownerClassId)) // For adding senses using the simple edit mode' no matter where the cursor is.  				|| slice.Object == Object  				//|| slice.Object == ContainingDataTree.Root)  				|| slice.Object.Equals(ContainingDataTree.Root)) // Other cases.  			{  				// The slice's object has an acceptable type provided it implements the required field.  				// See if the current slice's object has the field named.  				int flid = slice.GetFlid(fieldName);  				var mdc = Cache.MetaDataCacheAccessor as IFwMetaDataCacheManaged;  				int flidT = ContainingDataTree.GetFlidIfPossible(ownerClassId' fieldName' mdc);  				if (flidT != 0 && flid != flidT)  					flid = flidT;  				if (flid == 0)  					return false;  				// Found a suitable slice. Do the insertion.  				int insertionPosition;		// causes return false if not changed.  				if (m_cache.IsReferenceProperty(flid))  				{  					insertionPosition = InsertObjectIntoVirtualBackref(Cache' m_mediator' m_propertyTable' slice.Object.Hvo'  						newObjectClassId' flid);  				}  				else  				{  					insertionPosition = slice.InsertObject(flid' newObjectClassId);  				}  				if (insertionPosition < 0)  					return insertionPosition == -2;		// -2 keeps dlg for adding subPOSes from firing for each slice when cancelled.  				if (String.IsNullOrEmpty(recomputeVirtual))  					return true;  				// Figure the things to recompute.  				string[] parts = recomputeVirtual.Split('.');  				if (parts.Length != 2)  				{  					Debug.Assert(parts.Length == 2);  					return true; // but fairly harmless to ignore  				}    				return true;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObjectIfPossible,The following statement contains a magic number: if ((ownerClassId > 0 && IsOrInheritsFrom((slice.Object.ClassID)' ownerClassId)) // For adding senses using the simple edit mode' no matter where the cursor is.  				|| slice.Object == Object  				//|| slice.Object == ContainingDataTree.Root)  				|| slice.Object.Equals(ContainingDataTree.Root)) // Other cases.  			{  				// The slice's object has an acceptable type provided it implements the required field.  				// See if the current slice's object has the field named.  				int flid = slice.GetFlid(fieldName);  				var mdc = Cache.MetaDataCacheAccessor as IFwMetaDataCacheManaged;  				int flidT = ContainingDataTree.GetFlidIfPossible(ownerClassId' fieldName' mdc);  				if (flidT != 0 && flid != flidT)  					flid = flidT;  				if (flid == 0)  					return false;  				// Found a suitable slice. Do the insertion.  				int insertionPosition;		// causes return false if not changed.  				if (m_cache.IsReferenceProperty(flid))  				{  					insertionPosition = InsertObjectIntoVirtualBackref(Cache' m_mediator' m_propertyTable' slice.Object.Hvo'  						newObjectClassId' flid);  				}  				else  				{  					insertionPosition = slice.InsertObject(flid' newObjectClassId);  				}  				if (insertionPosition < 0)  					return insertionPosition == -2;		// -2 keeps dlg for adding subPOSes from firing for each slice when cancelled.  				if (String.IsNullOrEmpty(recomputeVirtual))  					return true;  				// Figure the things to recompute.  				string[] parts = recomputeVirtual.Split('.');  				if (parts.Length != 2)  				{  					Debug.Assert(parts.Length == 2);  					return true; // but fairly harmless to ignore  				}    				return true;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObjectIntoVirtualBackref,The following statement contains a magic number: if (metadata.get_IsVirtual(flid))  			{  				var sliceObj = cache.ServiceLocator.GetInstance<ICmObjectRepository>().GetObject(hvoSlice);  				int clidSlice = sliceObj.ClassID;  				if (clidNewObj == LexEntryTags.kClassId &&  					clidSlice == LexEntryTags.kClassId)  				{  					if (metadata.GetFieldName(flid) == "VariantFormEntryBackRefs")  					{  						using (var dlg = new InsertVariantDlg())  						{  							var entOld = (ILexEntry) sliceObj;  							dlg.SetHelpTopic("khtpInsertVariantDlg");  							dlg.SetDlgInfo(cache' mediator' propertyTable' entOld);  							if (dlg.ShowDialog() == DialogResult.OK && dlg.NewlyCreatedVariantEntryRefResult)  							{  								return entOld.VariantFormEntryBackRefs.Count();  							}  							// say we've handled this.  							return -2;  						}  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObject,The following statement contains a magic number: int clidOfFlid = flid / 1000;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObject,The following statement contains a magic number: try  			{  				dtContainer.SetCurrentObjectFlids(hvoOwner' flid);  				var fieldType = (CellarPropertyType) m_cache.MetaDataCacheAccessor.GetFieldType(flid);  				switch (fieldType)  				{  					case CellarPropertyType.OwningCollection:  						insertionPosition = -1;  						break;    					case CellarPropertyType.OwningAtomic:  						insertionPosition = -2;  						break;  				}  				using (CmObjectUi uiObj = CmObjectUi.CreateNewUiObject(m_mediator' m_propertyTable' newObjectClassId' hvoOwner' flid' insertionPosition))  				{  					// If uiObj is null' typically CreateNewUiObject displayed a dialog and the user cancelled.  					// We return -1 to make the caller give up trying to insert' so we don't get another dialog if  					// there is another slice that could insert this kind of object.  					// If 'this' isDisposed' typically the inserted object occupies a place in the record list for  					// this view' and inserting an object caused the list to be refreshed and all slices for this  					// record to be disposed. In that case' we won't be able to find a child of this to activate'  					// so we'll just settle for having created the object.  					// Enhance JohnT: possibly we could load information from the slice into local variables before  					// calling CreateNewUiObject so that we could do a better job of picking the slice to focus  					// after an insert which disposes 'this'. Or perhaps we could improve the refresh list process  					// so that it more successfully restores the current item without disposing of all the slices.  					if (IsDisposed)  						return -1;  					if (uiObj == null)  						return -2; // Nothing created.    					switch (fieldType)  					{  						case CellarPropertyType.OwningCollection:  							// order is not fully predicatable' figure where it DID show up.  							insertionPosition = m_cache.DomainDataByFlid.GetObjIndex(hvoOwner' flid' uiObj.Object.Hvo);  							break;    						case CellarPropertyType.OwningAtomic:  							insertionPosition = 0;  							break;  					}    					//			if (ihvoPosition == ClassAndPropInfo.kposNotSet && cpi.fieldType == DataTree.kcptOwningSequence)  					//			{  					//				// insert at end of sequence.  					//				ihvoPosition = cache.DomainDataByFlid.get_VecSize(hvoOwner' (int)cpi.flid);  					//			} // otherwise we already worked out the position or it doesn't matter  					//			// Note: ihvoPosition ignored if sequence(?) or atomic.  					//			int hvoNew = cache.CreateObject((int)(cpi.signatureClsid)' hvoOwner' (int)(cpi.flid)' ihvoPosition);  					//			cache.DomainDataByFlid.PropChanged(null' (int)PropChangeType.kpctNotifyAll' hvoOwner' (int)(cpi.flid)' ihvoPosition' 1' 0);  					if (hvoOwner == Object.Hvo && Expansion == DataTree.TreeItemState.ktisCollapsed)  					{  						// We added something to the object of the current slice...almost certainly it  						// will be something that will display under this node...if it is still collapsed'  						// expand it to show the thing inserted.  						TreeNode.ToggleExpansion(IndexInContainer);  					}  					Slice child = ExpandSubItem(uiObj.Object.Hvo);  					if (child != null)  						child.FocusSliceOrChild();  					else  					{  						// If possible' jump to the newly inserted sub item.  						if (m_mediator.BroadcastMessageUntilHandled("JumpToRecord"' uiObj.Object.Hvo))  							return insertionPosition;  						// If we haven't found a slice...common now' because there's rarely a need to expand anything...  						// and some slice was added' focus it.  						foreach (Slice slice in Parent.Controls)  						{  							if (!slices.Contains(slice))  							{  								slice.FocusSliceOrChild();  								break;  							}  						}  					}  				}  			}  			finally  			{  				dtContainer.ClearCurrentObjectFlids();  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObject,The following statement contains a magic number: try  			{  				dtContainer.SetCurrentObjectFlids(hvoOwner' flid);  				var fieldType = (CellarPropertyType) m_cache.MetaDataCacheAccessor.GetFieldType(flid);  				switch (fieldType)  				{  					case CellarPropertyType.OwningCollection:  						insertionPosition = -1;  						break;    					case CellarPropertyType.OwningAtomic:  						insertionPosition = -2;  						break;  				}  				using (CmObjectUi uiObj = CmObjectUi.CreateNewUiObject(m_mediator' m_propertyTable' newObjectClassId' hvoOwner' flid' insertionPosition))  				{  					// If uiObj is null' typically CreateNewUiObject displayed a dialog and the user cancelled.  					// We return -1 to make the caller give up trying to insert' so we don't get another dialog if  					// there is another slice that could insert this kind of object.  					// If 'this' isDisposed' typically the inserted object occupies a place in the record list for  					// this view' and inserting an object caused the list to be refreshed and all slices for this  					// record to be disposed. In that case' we won't be able to find a child of this to activate'  					// so we'll just settle for having created the object.  					// Enhance JohnT: possibly we could load information from the slice into local variables before  					// calling CreateNewUiObject so that we could do a better job of picking the slice to focus  					// after an insert which disposes 'this'. Or perhaps we could improve the refresh list process  					// so that it more successfully restores the current item without disposing of all the slices.  					if (IsDisposed)  						return -1;  					if (uiObj == null)  						return -2; // Nothing created.    					switch (fieldType)  					{  						case CellarPropertyType.OwningCollection:  							// order is not fully predicatable' figure where it DID show up.  							insertionPosition = m_cache.DomainDataByFlid.GetObjIndex(hvoOwner' flid' uiObj.Object.Hvo);  							break;    						case CellarPropertyType.OwningAtomic:  							insertionPosition = 0;  							break;  					}    					//			if (ihvoPosition == ClassAndPropInfo.kposNotSet && cpi.fieldType == DataTree.kcptOwningSequence)  					//			{  					//				// insert at end of sequence.  					//				ihvoPosition = cache.DomainDataByFlid.get_VecSize(hvoOwner' (int)cpi.flid);  					//			} // otherwise we already worked out the position or it doesn't matter  					//			// Note: ihvoPosition ignored if sequence(?) or atomic.  					//			int hvoNew = cache.CreateObject((int)(cpi.signatureClsid)' hvoOwner' (int)(cpi.flid)' ihvoPosition);  					//			cache.DomainDataByFlid.PropChanged(null' (int)PropChangeType.kpctNotifyAll' hvoOwner' (int)(cpi.flid)' ihvoPosition' 1' 0);  					if (hvoOwner == Object.Hvo && Expansion == DataTree.TreeItemState.ktisCollapsed)  					{  						// We added something to the object of the current slice...almost certainly it  						// will be something that will display under this node...if it is still collapsed'  						// expand it to show the thing inserted.  						TreeNode.ToggleExpansion(IndexInContainer);  					}  					Slice child = ExpandSubItem(uiObj.Object.Hvo);  					if (child != null)  						child.FocusSliceOrChild();  					else  					{  						// If possible' jump to the newly inserted sub item.  						if (m_mediator.BroadcastMessageUntilHandled("JumpToRecord"' uiObj.Object.Hvo))  							return insertionPosition;  						// If we haven't found a slice...common now' because there's rarely a need to expand anything...  						// and some slice was added' focus it.  						foreach (Slice slice in Parent.Controls)  						{  							if (!slices.Contains(slice))  							{  								slice.FocusSliceOrChild();  								break;  							}  						}  					}  				}  			}  			finally  			{  				dtContainer.ClearCurrentObjectFlids();  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,FocusSliceOrChild,The following statement contains a magic number: if (sliceRetVal != null)  			{  				int xDataTreeHeight = containingDT.Height;  				Point ptScrollPos = containingDT.AutoScrollPosition;  				int delta = (xDataTreeHeight / 4) - sliceRetVal.Location.Y;  				if (delta < 0)  					containingDT.AutoScrollPosition = new Point(-ptScrollPos.X' -ptScrollPos.Y - delta);  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,GetCloseSlices,The following statement contains a magic number: int limit = Math.Min(Math.Max(index' count - index)' 40);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,GetCanMergeNow,The following statement contains a magic number: if (owner.IsFieldRequired(flid)  				&& vectorSize < 2)  				return false;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,GetCanSplitNow,The following statement contains a magic number: return (vectorSize >= 2);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SliceTreeNode,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceTreeNode.cs,HandlePaint,The following statement contains a magic number: using (Pen linePen = new Pen(lineColor' 1))  			{  			linePen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;  				using (Pen boxLinePen = new Pen(lineColor' 1))  				using (Brush backgroundBrush = new SolidBrush(Slice.ContainingDataTree.BackColor))  				using (Brush lineBrush = new SolidBrush(lineColor))  				{  			int nIndent = Slice.Indent;  			DataTree.TreeItemState tis = Slice.Expansion;  			// Drawing within a control that covers the tree node portion of this slice' we always  			// draw relative to a top-of-slice that is 0. I'm keeping the variable just in case  			// we ever go back to drawing in the parent window.  			int ypTopOfSlice = 0;  			// int ypTopOfNextSlice = this.Height; // CS2019  			int iSlice = Slice.ContainingDataTree.Slices.IndexOf(Slice);  			// Go through the indents. This used to draw the correct tree structure at each level.  			// Now we leave out the structue' but this figures out some stuff we need if we end up  			// drawing a box. This could be optimized if we really never want the tree diagram.  			for (int nInd = 0; nInd <= nIndent; ++nInd)  			{  				// int ypTreeTop = ypTopOfSlice; // CS2019  				int xpBoxLeft = kdxpLeftMargin + nInd * kdxpIndDist;  				int xpBoxCtr = xpBoxLeft + kdxpBoxCtr;  				// Enhance JohnT: 2nd argument of max should be label height.  				int dypBranchHeight = Slice.GetBranchHeight();  				int dypLeftOver = Math.Max(kdypBoxHeight / 2' dypBranchHeight) - kdypBoxHeight / 2;  				int ypBoxTop = ypTopOfSlice + dypLeftOver;  				int ypBoxCtr = ypBoxTop + kdypBoxHeight / 2;  				// int xpRtLineEnd = xpBoxCtr + kdxpLongLineLen; // CS2019    				// There are two possible locations for the start and stop points for the  				// vertical line. That will produce three different results which I have  				// attempted to illustrate below. In case that's unclear they are:  				// an L - shaped right angle' a T - shape rotated counter-clockwise by  				// 90 degrees and an inverted L shape (i.e. flipped vertically).  				//  				// |_  > ypStart = top of field' ypStop = center point of +/- box.  				// |-  > ypStart = top of field' ypStop = bottom of field.  				// |  > ypStart = center point of +/- box' ypStop = bottom of field.  				//  				// Draw the vertical line.  				bool fMoreFieldsAtLevel = (Slice.ContainingDataTree.NextFieldAtIndent(nInd' iSlice) != 0);    				// Process a terminal level with a box.  				if (ShowPlusMinus && nInd == nIndent && tis != DataTree.TreeItemState.ktisFixed)  				{  					// Draw the box.  					Rectangle rcBox = new Rectangle(xpBoxLeft' ypBoxTop' kdxpBoxWid' kdypBoxHeight);  					gr.FillRectangle(lineBrush' rcBox);  					// Erase the inside of the box as we may have drawn dotted lines there.  					rcBox.Inflate(-1' -1);  					gr.FillRectangle(backgroundBrush' rcBox);    					if (tis != DataTree.TreeItemState.ktisCollapsedEmpty)  					{  						// Draw the minus sign.  						int xpLeftMinus = xpBoxLeft + 1 + kdzpIconGap;  						gr.DrawLine(boxLinePen' xpLeftMinus' ypBoxCtr' xpLeftMinus + kdxpIconWid - 1' ypBoxCtr);    						if (tis == DataTree.TreeItemState.ktisCollapsed)  						{  							// Draw the vertical part of the plus' if we are collapsed.  							int ypTopPlus = ypBoxTop + 1 + kdzpIconGap;  							gr.DrawLine(boxLinePen' xpBoxCtr' ypTopPlus' xpBoxCtr' ypTopPlus + kdypIconHeight - 1);  						}  					}  				}  			}    			//			// If the height of the slice is greater then one line (1.5 * LabelHeight) and  			//			// the slice has a child' then we need to draw a line to that child. (fixes a  			//			// gap that appears otherwise)  			//			int left = kdxpLeftMargin + (nIndent + 1) * kdxpIndDist;  			//			int center = left + kdxpBoxCtr;  			//			bool fHasChildren = (m_slice.Diagram.NextFieldAtIndent(nIndent + 1' iSlice) != 0);  			//			if (fHasChildren && Height > m_slice.LabelHeight * 1.5)  			//			{  			//				gr.DrawLine(linePen' center' ypTopOfSlice + m_slice.LabelHeight'  			//					center' ypTopOfNextSlice);  			//			}    			if (ShowingContextIcon)  			{  				// Show context menu icon  				gr.DrawImage(ResourceHelper.BlueCircleDownArrow' 2' 1);  			}    			//			int xIndent = m_slice.LabelIndent();  			//			int lineWidth = 1;  			//			Slice nextSlice = m_slice.ContainingDataTree.Slices[m_slice.IndexInContainer + 1] as Slice;  			//			int yPos = this.Height - 1;  			//			if (nextSlice.Weight == ObjectWeight.heavy)  			//			{  			//				lineWidth += DataTree.HeavyweightObjectExtra;  			//				//yPos -= DataTree.HeavyweightObjectExtra / 2;  			//			}  			//			Pen borderPen = new Pen(Color.LightGray' lineWidth);  			//			gr.DrawLine(borderPen' xIndent' yPos' this.Width' yPos);    			Slice.DrawLabel(ypTopOfSlice' gr' pea.ClipRectangle.Width);  		}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SliceTreeNode,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceTreeNode.cs,HandlePaint,The following statement contains a magic number: using (Pen linePen = new Pen(lineColor' 1))  			{  			linePen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;  				using (Pen boxLinePen = new Pen(lineColor' 1))  				using (Brush backgroundBrush = new SolidBrush(Slice.ContainingDataTree.BackColor))  				using (Brush lineBrush = new SolidBrush(lineColor))  				{  			int nIndent = Slice.Indent;  			DataTree.TreeItemState tis = Slice.Expansion;  			// Drawing within a control that covers the tree node portion of this slice' we always  			// draw relative to a top-of-slice that is 0. I'm keeping the variable just in case  			// we ever go back to drawing in the parent window.  			int ypTopOfSlice = 0;  			// int ypTopOfNextSlice = this.Height; // CS2019  			int iSlice = Slice.ContainingDataTree.Slices.IndexOf(Slice);  			// Go through the indents. This used to draw the correct tree structure at each level.  			// Now we leave out the structue' but this figures out some stuff we need if we end up  			// drawing a box. This could be optimized if we really never want the tree diagram.  			for (int nInd = 0; nInd <= nIndent; ++nInd)  			{  				// int ypTreeTop = ypTopOfSlice; // CS2019  				int xpBoxLeft = kdxpLeftMargin + nInd * kdxpIndDist;  				int xpBoxCtr = xpBoxLeft + kdxpBoxCtr;  				// Enhance JohnT: 2nd argument of max should be label height.  				int dypBranchHeight = Slice.GetBranchHeight();  				int dypLeftOver = Math.Max(kdypBoxHeight / 2' dypBranchHeight) - kdypBoxHeight / 2;  				int ypBoxTop = ypTopOfSlice + dypLeftOver;  				int ypBoxCtr = ypBoxTop + kdypBoxHeight / 2;  				// int xpRtLineEnd = xpBoxCtr + kdxpLongLineLen; // CS2019    				// There are two possible locations for the start and stop points for the  				// vertical line. That will produce three different results which I have  				// attempted to illustrate below. In case that's unclear they are:  				// an L - shaped right angle' a T - shape rotated counter-clockwise by  				// 90 degrees and an inverted L shape (i.e. flipped vertically).  				//  				// |_  > ypStart = top of field' ypStop = center point of +/- box.  				// |-  > ypStart = top of field' ypStop = bottom of field.  				// |  > ypStart = center point of +/- box' ypStop = bottom of field.  				//  				// Draw the vertical line.  				bool fMoreFieldsAtLevel = (Slice.ContainingDataTree.NextFieldAtIndent(nInd' iSlice) != 0);    				// Process a terminal level with a box.  				if (ShowPlusMinus && nInd == nIndent && tis != DataTree.TreeItemState.ktisFixed)  				{  					// Draw the box.  					Rectangle rcBox = new Rectangle(xpBoxLeft' ypBoxTop' kdxpBoxWid' kdypBoxHeight);  					gr.FillRectangle(lineBrush' rcBox);  					// Erase the inside of the box as we may have drawn dotted lines there.  					rcBox.Inflate(-1' -1);  					gr.FillRectangle(backgroundBrush' rcBox);    					if (tis != DataTree.TreeItemState.ktisCollapsedEmpty)  					{  						// Draw the minus sign.  						int xpLeftMinus = xpBoxLeft + 1 + kdzpIconGap;  						gr.DrawLine(boxLinePen' xpLeftMinus' ypBoxCtr' xpLeftMinus + kdxpIconWid - 1' ypBoxCtr);    						if (tis == DataTree.TreeItemState.ktisCollapsed)  						{  							// Draw the vertical part of the plus' if we are collapsed.  							int ypTopPlus = ypBoxTop + 1 + kdzpIconGap;  							gr.DrawLine(boxLinePen' xpBoxCtr' ypTopPlus' xpBoxCtr' ypTopPlus + kdypIconHeight - 1);  						}  					}  				}  			}    			//			// If the height of the slice is greater then one line (1.5 * LabelHeight) and  			//			// the slice has a child' then we need to draw a line to that child. (fixes a  			//			// gap that appears otherwise)  			//			int left = kdxpLeftMargin + (nIndent + 1) * kdxpIndDist;  			//			int center = left + kdxpBoxCtr;  			//			bool fHasChildren = (m_slice.Diagram.NextFieldAtIndent(nIndent + 1' iSlice) != 0);  			//			if (fHasChildren && Height > m_slice.LabelHeight * 1.5)  			//			{  			//				gr.DrawLine(linePen' center' ypTopOfSlice + m_slice.LabelHeight'  			//					center' ypTopOfNextSlice);  			//			}    			if (ShowingContextIcon)  			{  				// Show context menu icon  				gr.DrawImage(ResourceHelper.BlueCircleDownArrow' 2' 1);  			}    			//			int xIndent = m_slice.LabelIndent();  			//			int lineWidth = 1;  			//			Slice nextSlice = m_slice.ContainingDataTree.Slices[m_slice.IndexInContainer + 1] as Slice;  			//			int yPos = this.Height - 1;  			//			if (nextSlice.Weight == ObjectWeight.heavy)  			//			{  			//				lineWidth += DataTree.HeavyweightObjectExtra;  			//				//yPos -= DataTree.HeavyweightObjectExtra / 2;  			//			}  			//			Pen borderPen = new Pen(Color.LightGray' lineWidth);  			//			gr.DrawLine(borderPen' xIndent' yPos' this.Width' yPos);    			Slice.DrawLabel(ypTopOfSlice' gr' pea.ClipRectangle.Width);  		}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SliceTreeNode,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceTreeNode.cs,HandlePaint,The following statement contains a magic number: using (Pen linePen = new Pen(lineColor' 1))  			{  			linePen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;  				using (Pen boxLinePen = new Pen(lineColor' 1))  				using (Brush backgroundBrush = new SolidBrush(Slice.ContainingDataTree.BackColor))  				using (Brush lineBrush = new SolidBrush(lineColor))  				{  			int nIndent = Slice.Indent;  			DataTree.TreeItemState tis = Slice.Expansion;  			// Drawing within a control that covers the tree node portion of this slice' we always  			// draw relative to a top-of-slice that is 0. I'm keeping the variable just in case  			// we ever go back to drawing in the parent window.  			int ypTopOfSlice = 0;  			// int ypTopOfNextSlice = this.Height; // CS2019  			int iSlice = Slice.ContainingDataTree.Slices.IndexOf(Slice);  			// Go through the indents. This used to draw the correct tree structure at each level.  			// Now we leave out the structue' but this figures out some stuff we need if we end up  			// drawing a box. This could be optimized if we really never want the tree diagram.  			for (int nInd = 0; nInd <= nIndent; ++nInd)  			{  				// int ypTreeTop = ypTopOfSlice; // CS2019  				int xpBoxLeft = kdxpLeftMargin + nInd * kdxpIndDist;  				int xpBoxCtr = xpBoxLeft + kdxpBoxCtr;  				// Enhance JohnT: 2nd argument of max should be label height.  				int dypBranchHeight = Slice.GetBranchHeight();  				int dypLeftOver = Math.Max(kdypBoxHeight / 2' dypBranchHeight) - kdypBoxHeight / 2;  				int ypBoxTop = ypTopOfSlice + dypLeftOver;  				int ypBoxCtr = ypBoxTop + kdypBoxHeight / 2;  				// int xpRtLineEnd = xpBoxCtr + kdxpLongLineLen; // CS2019    				// There are two possible locations for the start and stop points for the  				// vertical line. That will produce three different results which I have  				// attempted to illustrate below. In case that's unclear they are:  				// an L - shaped right angle' a T - shape rotated counter-clockwise by  				// 90 degrees and an inverted L shape (i.e. flipped vertically).  				//  				// |_  > ypStart = top of field' ypStop = center point of +/- box.  				// |-  > ypStart = top of field' ypStop = bottom of field.  				// |  > ypStart = center point of +/- box' ypStop = bottom of field.  				//  				// Draw the vertical line.  				bool fMoreFieldsAtLevel = (Slice.ContainingDataTree.NextFieldAtIndent(nInd' iSlice) != 0);    				// Process a terminal level with a box.  				if (ShowPlusMinus && nInd == nIndent && tis != DataTree.TreeItemState.ktisFixed)  				{  					// Draw the box.  					Rectangle rcBox = new Rectangle(xpBoxLeft' ypBoxTop' kdxpBoxWid' kdypBoxHeight);  					gr.FillRectangle(lineBrush' rcBox);  					// Erase the inside of the box as we may have drawn dotted lines there.  					rcBox.Inflate(-1' -1);  					gr.FillRectangle(backgroundBrush' rcBox);    					if (tis != DataTree.TreeItemState.ktisCollapsedEmpty)  					{  						// Draw the minus sign.  						int xpLeftMinus = xpBoxLeft + 1 + kdzpIconGap;  						gr.DrawLine(boxLinePen' xpLeftMinus' ypBoxCtr' xpLeftMinus + kdxpIconWid - 1' ypBoxCtr);    						if (tis == DataTree.TreeItemState.ktisCollapsed)  						{  							// Draw the vertical part of the plus' if we are collapsed.  							int ypTopPlus = ypBoxTop + 1 + kdzpIconGap;  							gr.DrawLine(boxLinePen' xpBoxCtr' ypTopPlus' xpBoxCtr' ypTopPlus + kdypIconHeight - 1);  						}  					}  				}  			}    			//			// If the height of the slice is greater then one line (1.5 * LabelHeight) and  			//			// the slice has a child' then we need to draw a line to that child. (fixes a  			//			// gap that appears otherwise)  			//			int left = kdxpLeftMargin + (nIndent + 1) * kdxpIndDist;  			//			int center = left + kdxpBoxCtr;  			//			bool fHasChildren = (m_slice.Diagram.NextFieldAtIndent(nIndent + 1' iSlice) != 0);  			//			if (fHasChildren && Height > m_slice.LabelHeight * 1.5)  			//			{  			//				gr.DrawLine(linePen' center' ypTopOfSlice + m_slice.LabelHeight'  			//					center' ypTopOfNextSlice);  			//			}    			if (ShowingContextIcon)  			{  				// Show context menu icon  				gr.DrawImage(ResourceHelper.BlueCircleDownArrow' 2' 1);  			}    			//			int xIndent = m_slice.LabelIndent();  			//			int lineWidth = 1;  			//			Slice nextSlice = m_slice.ContainingDataTree.Slices[m_slice.IndexInContainer + 1] as Slice;  			//			int yPos = this.Height - 1;  			//			if (nextSlice.Weight == ObjectWeight.heavy)  			//			{  			//				lineWidth += DataTree.HeavyweightObjectExtra;  			//				//yPos -= DataTree.HeavyweightObjectExtra / 2;  			//			}  			//			Pen borderPen = new Pen(Color.LightGray' lineWidth);  			//			gr.DrawLine(borderPen' xIndent' yPos' this.Width' yPos);    			Slice.DrawLabel(ypTopOfSlice' gr' pea.ClipRectangle.Width);  		}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SliceTreeNode,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceTreeNode.cs,HandlePaint,The following statement contains a magic number: using (Pen linePen = new Pen(lineColor' 1))  			{  			linePen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;  				using (Pen boxLinePen = new Pen(lineColor' 1))  				using (Brush backgroundBrush = new SolidBrush(Slice.ContainingDataTree.BackColor))  				using (Brush lineBrush = new SolidBrush(lineColor))  				{  			int nIndent = Slice.Indent;  			DataTree.TreeItemState tis = Slice.Expansion;  			// Drawing within a control that covers the tree node portion of this slice' we always  			// draw relative to a top-of-slice that is 0. I'm keeping the variable just in case  			// we ever go back to drawing in the parent window.  			int ypTopOfSlice = 0;  			// int ypTopOfNextSlice = this.Height; // CS2019  			int iSlice = Slice.ContainingDataTree.Slices.IndexOf(Slice);  			// Go through the indents. This used to draw the correct tree structure at each level.  			// Now we leave out the structue' but this figures out some stuff we need if we end up  			// drawing a box. This could be optimized if we really never want the tree diagram.  			for (int nInd = 0; nInd <= nIndent; ++nInd)  			{  				// int ypTreeTop = ypTopOfSlice; // CS2019  				int xpBoxLeft = kdxpLeftMargin + nInd * kdxpIndDist;  				int xpBoxCtr = xpBoxLeft + kdxpBoxCtr;  				// Enhance JohnT: 2nd argument of max should be label height.  				int dypBranchHeight = Slice.GetBranchHeight();  				int dypLeftOver = Math.Max(kdypBoxHeight / 2' dypBranchHeight) - kdypBoxHeight / 2;  				int ypBoxTop = ypTopOfSlice + dypLeftOver;  				int ypBoxCtr = ypBoxTop + kdypBoxHeight / 2;  				// int xpRtLineEnd = xpBoxCtr + kdxpLongLineLen; // CS2019    				// There are two possible locations for the start and stop points for the  				// vertical line. That will produce three different results which I have  				// attempted to illustrate below. In case that's unclear they are:  				// an L - shaped right angle' a T - shape rotated counter-clockwise by  				// 90 degrees and an inverted L shape (i.e. flipped vertically).  				//  				// |_  > ypStart = top of field' ypStop = center point of +/- box.  				// |-  > ypStart = top of field' ypStop = bottom of field.  				// |  > ypStart = center point of +/- box' ypStop = bottom of field.  				//  				// Draw the vertical line.  				bool fMoreFieldsAtLevel = (Slice.ContainingDataTree.NextFieldAtIndent(nInd' iSlice) != 0);    				// Process a terminal level with a box.  				if (ShowPlusMinus && nInd == nIndent && tis != DataTree.TreeItemState.ktisFixed)  				{  					// Draw the box.  					Rectangle rcBox = new Rectangle(xpBoxLeft' ypBoxTop' kdxpBoxWid' kdypBoxHeight);  					gr.FillRectangle(lineBrush' rcBox);  					// Erase the inside of the box as we may have drawn dotted lines there.  					rcBox.Inflate(-1' -1);  					gr.FillRectangle(backgroundBrush' rcBox);    					if (tis != DataTree.TreeItemState.ktisCollapsedEmpty)  					{  						// Draw the minus sign.  						int xpLeftMinus = xpBoxLeft + 1 + kdzpIconGap;  						gr.DrawLine(boxLinePen' xpLeftMinus' ypBoxCtr' xpLeftMinus + kdxpIconWid - 1' ypBoxCtr);    						if (tis == DataTree.TreeItemState.ktisCollapsed)  						{  							// Draw the vertical part of the plus' if we are collapsed.  							int ypTopPlus = ypBoxTop + 1 + kdzpIconGap;  							gr.DrawLine(boxLinePen' xpBoxCtr' ypTopPlus' xpBoxCtr' ypTopPlus + kdypIconHeight - 1);  						}  					}  				}  			}    			//			// If the height of the slice is greater then one line (1.5 * LabelHeight) and  			//			// the slice has a child' then we need to draw a line to that child. (fixes a  			//			// gap that appears otherwise)  			//			int left = kdxpLeftMargin + (nIndent + 1) * kdxpIndDist;  			//			int center = left + kdxpBoxCtr;  			//			bool fHasChildren = (m_slice.Diagram.NextFieldAtIndent(nIndent + 1' iSlice) != 0);  			//			if (fHasChildren && Height > m_slice.LabelHeight * 1.5)  			//			{  			//				gr.DrawLine(linePen' center' ypTopOfSlice + m_slice.LabelHeight'  			//					center' ypTopOfNextSlice);  			//			}    			if (ShowingContextIcon)  			{  				// Show context menu icon  				gr.DrawImage(ResourceHelper.BlueCircleDownArrow' 2' 1);  			}    			//			int xIndent = m_slice.LabelIndent();  			//			int lineWidth = 1;  			//			Slice nextSlice = m_slice.ContainingDataTree.Slices[m_slice.IndexInContainer + 1] as Slice;  			//			int yPos = this.Height - 1;  			//			if (nextSlice.Weight == ObjectWeight.heavy)  			//			{  			//				lineWidth += DataTree.HeavyweightObjectExtra;  			//				//yPos -= DataTree.HeavyweightObjectExtra / 2;  			//			}  			//			Pen borderPen = new Pen(Color.LightGray' lineWidth);  			//			gr.DrawLine(borderPen' xIndent' yPos' this.Width' yPos);    			Slice.DrawLabel(ypTopOfSlice' gr' pea.ClipRectangle.Width);  		}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SliceTreeNode,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SliceTreeNode.cs,OnMouseDown,The following statement contains a magic number: if (meArgs.Button.Equals(MouseButtons.Right) || (ShowingContextIcon && meArgs.X < 20))  			{  				//begin test (JDH)  				Point p = new Point(meArgs.X'meArgs.Y);  				if (Slice.HandleMouseDown(p))  				{  					return;  				}  				//end test  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,StringSliceVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\StringSlice.cs,DisplayWithWritingSystemLabel,The following statement contains a magic number: vlTable.nVal = 10000;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,StringSliceVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\StringSlice.cs,DisplayWithWritingSystemLabel,The following statement contains a magic number: vlColWs.nVal = dxs + 5000;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,StringSliceVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\StringSlice.cs,DisplayWithWritingSystemLabel,The following statement contains a magic number: vwenv.OpenTable(2' // Two columns.  					vlTable' // Table uses 100% of available width.  					0' // Border thickness.  					VwAlignment.kvaLeft' // Default alignment.  					VwFramePosition.kvfpVoid' // No border.  					VwRule.kvrlNone' // No rules between cells.  					0' // No forced space between cells.  					0' // No padding inside cells.  					false);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,StringSliceVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\StringSlice.cs,DisplayWithWritingSystemLabel,The following statement contains a magic number: vwenv.set_IntProperty((int) FwTextPropType.ktptPadTop' (int) FwTextPropVar.ktpvMilliPoint' 2000);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,StTextSlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\StTextSlice.cs,OnEnter,The following statement contains a magic number: if (view.StText == null)  			{  				int textHvo = 0;  				NonUndoableUnitOfWorkHelper.Do(m_cache.ServiceLocator.GetInstance<IActionHandler>()' () =>  				{  					var sda = m_cache.DomainDataByFlid;  					textHvo = sda.MakeNewObject(StTextTags.kClassId' m_obj.Hvo' m_flid' -2);  					var hvoStTxtPara = sda.MakeNewObject(StTxtParaTags.kClassId' textHvo' StTextTags.kflidParagraphs' 0);  					sda.SetString(hvoStTxtPara' StTxtParaTags.kflidContents' TsStringUtils.EmptyString(m_ws == 0 ? m_cache.DefaultAnalWs : m_ws));  				});  				view.StText = m_cache.ServiceLocator.GetInstance<IStTextRepository>().GetObject(textHvo);  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SummaryCommandControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummaryCommandControl.cs,SummaryCommandControl,The following statement contains a magic number: m_hotLinkFont = new Font(MiscUtils.StandardSansSerif' (float)10.0' FontStyle.Underline);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SummaryCommandControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummaryCommandControl.cs,SummaryCommandControl,The following statement contains a magic number: m_timer.Interval = 400;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SummaryCommandControl,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummaryCommandControl.cs,OnLayout,The following statement contains a magic number: try  			{  				m_fInLayout = true;  				// Clear out old collection of menu items'  				// since we are fixin to reset the menu.  				m_buttonMenuItems.Clear();  				m_menu = m_slice.RetrieveContextMenuForHotlinks();  				if (m_menu == null)  					return;    				int availButtonWidth = this.Width - 2;  				for (int i = 0; i < m_menu.MenuItems.Count; i++)  				{  					MenuItem item = m_menu.MenuItems[i];  					string label = item.Text.Replace("_"'"");  					int width = (int)(g.MeasureString(label' m_hotLinkFont).Width);  					if (width + kGapInBetweenButtons > availButtonWidth)  						break;  					m_buttonMenuItems.Add(item);  					availButtonWidth -= width + kGapInBetweenButtons;  				}  				m_firstButtonOffset = availButtonWidth;  				m_buttonDrawnEnabled = new bool[m_buttonMenuItems.Count];  			}  			finally  			{  				m_fInLayout = false;  				g.Dispose();  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SummarySlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummarySlice.cs,AdjustMainViewWidth,The following statement contains a magic number: if (rootb != null && m_lastWidth != Width)  			{  				m_lastWidth = Width; // only set this if we actually adjust the layout.  				Control.SuspendLayout();  				m_view.Width = Width;  				m_view.PerformLayout();  				// Some layouts don't work with adding only 4 to the root box width' so we'll  				// add a little more.  See the later comments on LT-4821.  				m_view.Width = Math.Min(Width' rootb.Width + 20);  				Control.ResumeLayout();  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SummarySlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummarySlice.cs,OnMoveItemDownInVector,The following statement contains a magic number: UndoableUnitOfWorkHelper.DoUsingNewOrCurrentUOW(Resources.DetailControlsStrings.ksUndoMoveDown'  				Resources.DetailControlsStrings.ksRedoMoveDown' Cache.ActionHandlerAccessor' () =>  				{  					// idxOrig + 2 looks strange' but it's the correct value to make this work.  					recOwner.SubRecordsOS.MoveTo(idxOrig' idxOrig' recOwner.SubRecordsOS' idxOrig + 2);  				});
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,SummarySlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummarySlice.cs,OnDemoteSubitemInVector,The following statement contains a magic number: if (Object.Owner is IRnGenericRec)  			{  				IRnGenericRec recOwner = Object.Owner as IRnGenericRec;  				if (recOwner.SubRecordsOS.Count == 2)  				{  					if (Object.OwnOrd == 0)  						newOwner = recOwner.SubRecordsOS[1];  					else  						newOwner = recOwner.SubRecordsOS[0];  				}  				else  				{  					List<IRnGenericRec> owners = new List<IRnGenericRec>();  					foreach (var recT in recOwner.SubRecordsOS)  					{  						if (recT != rec)  							owners.Add(recT);  					}  					newOwner = ContainingDataTree.ChooseNewOwner(owners.ToArray()'  						Resources.DetailControlsStrings.ksChooseOwnerOfDemotedSubrecord);  				}  			}  			else  			{  				return false;  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ExpandCollapseButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummarySlice.cs,OnPaint,The following statement contains a magic number: if (renderer != null)  			{  				if (renderer.IsBackgroundPartiallyTransparent())  					renderer.DrawParentBackground(e.Graphics' ClientRectangle' this);  				renderer.DrawBackground(e.Graphics' ClientRectangle' e.ClipRectangle);  			}  			else  			{  				using (var boxLinePen = new Pen(SystemColors.ControlDark' 1))  				{  					e.Graphics.DrawRectangle(boxLinePen' ClientRectangle);  					int ctrY = ClientRectangle.Y + (ClientRectangle.Height / 2);  					// Draw the minus sign.  					e.Graphics.DrawLine(boxLinePen' ClientRectangle.X + 2' ctrY' ClientRectangle.X + ClientRectangle.Width - 2' ctrY);  					if (!m_opened)  					{  						// Draw the vertical part of the plus' if we are collapsed.  						int ctrX = ClientRectangle.X + (ClientRectangle.Width / 2);  						e.Graphics.DrawLine(boxLinePen' ctrX' ClientRectangle.Y + 4' ctrX' ClientRectangle.Y + ClientRectangle.Height - 4);  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ExpandCollapseButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummarySlice.cs,OnPaint,The following statement contains a magic number: if (renderer != null)  			{  				if (renderer.IsBackgroundPartiallyTransparent())  					renderer.DrawParentBackground(e.Graphics' ClientRectangle' this);  				renderer.DrawBackground(e.Graphics' ClientRectangle' e.ClipRectangle);  			}  			else  			{  				using (var boxLinePen = new Pen(SystemColors.ControlDark' 1))  				{  					e.Graphics.DrawRectangle(boxLinePen' ClientRectangle);  					int ctrY = ClientRectangle.Y + (ClientRectangle.Height / 2);  					// Draw the minus sign.  					e.Graphics.DrawLine(boxLinePen' ClientRectangle.X + 2' ctrY' ClientRectangle.X + ClientRectangle.Width - 2' ctrY);  					if (!m_opened)  					{  						// Draw the vertical part of the plus' if we are collapsed.  						int ctrX = ClientRectangle.X + (ClientRectangle.Width / 2);  						e.Graphics.DrawLine(boxLinePen' ctrX' ClientRectangle.Y + 4' ctrX' ClientRectangle.Y + ClientRectangle.Height - 4);  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ExpandCollapseButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummarySlice.cs,OnPaint,The following statement contains a magic number: if (renderer != null)  			{  				if (renderer.IsBackgroundPartiallyTransparent())  					renderer.DrawParentBackground(e.Graphics' ClientRectangle' this);  				renderer.DrawBackground(e.Graphics' ClientRectangle' e.ClipRectangle);  			}  			else  			{  				using (var boxLinePen = new Pen(SystemColors.ControlDark' 1))  				{  					e.Graphics.DrawRectangle(boxLinePen' ClientRectangle);  					int ctrY = ClientRectangle.Y + (ClientRectangle.Height / 2);  					// Draw the minus sign.  					e.Graphics.DrawLine(boxLinePen' ClientRectangle.X + 2' ctrY' ClientRectangle.X + ClientRectangle.Width - 2' ctrY);  					if (!m_opened)  					{  						// Draw the vertical part of the plus' if we are collapsed.  						int ctrX = ClientRectangle.X + (ClientRectangle.Width / 2);  						e.Graphics.DrawLine(boxLinePen' ctrX' ClientRectangle.Y + 4' ctrX' ClientRectangle.Y + ClientRectangle.Height - 4);  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ExpandCollapseButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummarySlice.cs,OnPaint,The following statement contains a magic number: if (renderer != null)  			{  				if (renderer.IsBackgroundPartiallyTransparent())  					renderer.DrawParentBackground(e.Graphics' ClientRectangle' this);  				renderer.DrawBackground(e.Graphics' ClientRectangle' e.ClipRectangle);  			}  			else  			{  				using (var boxLinePen = new Pen(SystemColors.ControlDark' 1))  				{  					e.Graphics.DrawRectangle(boxLinePen' ClientRectangle);  					int ctrY = ClientRectangle.Y + (ClientRectangle.Height / 2);  					// Draw the minus sign.  					e.Graphics.DrawLine(boxLinePen' ClientRectangle.X + 2' ctrY' ClientRectangle.X + ClientRectangle.Width - 2' ctrY);  					if (!m_opened)  					{  						// Draw the vertical part of the plus' if we are collapsed.  						int ctrX = ClientRectangle.X + (ClientRectangle.Width / 2);  						e.Graphics.DrawLine(boxLinePen' ctrX' ClientRectangle.Y + 4' ctrX' ClientRectangle.Y + ClientRectangle.Height - 4);  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ExpandCollapseButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummarySlice.cs,OnPaint,The following statement contains a magic number: if (renderer != null)  			{  				if (renderer.IsBackgroundPartiallyTransparent())  					renderer.DrawParentBackground(e.Graphics' ClientRectangle' this);  				renderer.DrawBackground(e.Graphics' ClientRectangle' e.ClipRectangle);  			}  			else  			{  				using (var boxLinePen = new Pen(SystemColors.ControlDark' 1))  				{  					e.Graphics.DrawRectangle(boxLinePen' ClientRectangle);  					int ctrY = ClientRectangle.Y + (ClientRectangle.Height / 2);  					// Draw the minus sign.  					e.Graphics.DrawLine(boxLinePen' ClientRectangle.X + 2' ctrY' ClientRectangle.X + ClientRectangle.Width - 2' ctrY);  					if (!m_opened)  					{  						// Draw the vertical part of the plus' if we are collapsed.  						int ctrX = ClientRectangle.X + (ClientRectangle.Width / 2);  						e.Graphics.DrawLine(boxLinePen' ctrX' ClientRectangle.Y + 4' ctrX' ClientRectangle.Y + ClientRectangle.Height - 4);  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ExpandCollapseButton,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummarySlice.cs,OnPaint,The following statement contains a magic number: if (renderer != null)  			{  				if (renderer.IsBackgroundPartiallyTransparent())  					renderer.DrawParentBackground(e.Graphics' ClientRectangle' this);  				renderer.DrawBackground(e.Graphics' ClientRectangle' e.ClipRectangle);  			}  			else  			{  				using (var boxLinePen = new Pen(SystemColors.ControlDark' 1))  				{  					e.Graphics.DrawRectangle(boxLinePen' ClientRectangle);  					int ctrY = ClientRectangle.Y + (ClientRectangle.Height / 2);  					// Draw the minus sign.  					e.Graphics.DrawLine(boxLinePen' ClientRectangle.X + 2' ctrY' ClientRectangle.X + ClientRectangle.Width - 2' ctrY);  					if (!m_opened)  					{  						// Draw the vertical part of the plus' if we are collapsed.  						int ctrX = ClientRectangle.X + (ClientRectangle.Width / 2);  						e.Graphics.DrawLine(boxLinePen' ctrX' ClientRectangle.Y + 4' ctrX' ClientRectangle.Y + ClientRectangle.Height - 4);  					}  				}  			}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,LiteralLabelView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummarySlice.cs,MakeRoot,The following statement contains a magic number: m_rootb.SetRootObject(1' m_vc' 2' StyleSheet);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ConcVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\TwoLevelConc.cs,Display,The following statement contains a magic number: switch(frag)  				{  					case 1:  					{  						// The top-level.  						// Enhance JohnT: add a property setting to make the key bold  						// Roughly' vwenv.set_IntProperty(ktptBold' ktpvEnum' kttvForceOn);  						// If we can get an hvo and flid' display that property of that object.  						int flid = 0;  						if (hvo != 0)  						{  							flid = m_cp.FlidFor(m_index' hvo);  						}  						if (flid != 0)  						{  							// Warning (JohnT): this option not yet tested...  							vwenv.AddStringProp(flid' this);  							return;  						}  						else  						{  							// Otherwise display a literal string straight from the policy object.  							vwenv.AddString(m_cp.KeyFor(m_index' hvo));  						}    						if (m_fExpanded)  						{  							vwenv.AddLazyVecItems(m_ni.ListFlid' this' 2);  						}  						break;  					}  					case 2:  					{  						// One line of context.    						// Figure the index of this object in the next object out (the root).  						int hvoOuter' tagOuter' ihvo;  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1'  							out hvoOuter' out tagOuter' out ihvo);  						int ichKey = m_ni.ContextStringStartOffset(ihvo' hvo);  						int cchKey = m_ni.ContextStringLength(ihvo' hvo);  						// Enhance JohnT: make the alignment position a function of window width.  						// Enhance JohnT: change background if this is the selected context line.  						vwenv.OpenConcPara(ichKey' ichKey + cchKey'  							VwConcParaOpts.kcpoDefault'  							72 * 2 * 1000); // 72 pts per inch * 2 inches * 1000 -> 2" in millipoints.  						int flidKey = m_ni.ContextStringFlid(ihvo' hvo);  						if (flidKey == 0)  						{  							// Not tested yet.  							vwenv.AddString(m_ni.ContextString(ihvo' hvo));  						}  						else  						{  							vwenv.AddStringProp(flidKey' this);  						}  						vwenv.CloseParagraph();  						break;  					}  				}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ConcVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\TwoLevelConc.cs,Display,The following statement contains a magic number: switch(frag)  				{  					case 1:  					{  						// The top-level.  						// Enhance JohnT: add a property setting to make the key bold  						// Roughly' vwenv.set_IntProperty(ktptBold' ktpvEnum' kttvForceOn);  						// If we can get an hvo and flid' display that property of that object.  						int flid = 0;  						if (hvo != 0)  						{  							flid = m_cp.FlidFor(m_index' hvo);  						}  						if (flid != 0)  						{  							// Warning (JohnT): this option not yet tested...  							vwenv.AddStringProp(flid' this);  							return;  						}  						else  						{  							// Otherwise display a literal string straight from the policy object.  							vwenv.AddString(m_cp.KeyFor(m_index' hvo));  						}    						if (m_fExpanded)  						{  							vwenv.AddLazyVecItems(m_ni.ListFlid' this' 2);  						}  						break;  					}  					case 2:  					{  						// One line of context.    						// Figure the index of this object in the next object out (the root).  						int hvoOuter' tagOuter' ihvo;  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1'  							out hvoOuter' out tagOuter' out ihvo);  						int ichKey = m_ni.ContextStringStartOffset(ihvo' hvo);  						int cchKey = m_ni.ContextStringLength(ihvo' hvo);  						// Enhance JohnT: make the alignment position a function of window width.  						// Enhance JohnT: change background if this is the selected context line.  						vwenv.OpenConcPara(ichKey' ichKey + cchKey'  							VwConcParaOpts.kcpoDefault'  							72 * 2 * 1000); // 72 pts per inch * 2 inches * 1000 -> 2" in millipoints.  						int flidKey = m_ni.ContextStringFlid(ihvo' hvo);  						if (flidKey == 0)  						{  							// Not tested yet.  							vwenv.AddString(m_ni.ContextString(ihvo' hvo));  						}  						else  						{  							vwenv.AddStringProp(flidKey' this);  						}  						vwenv.CloseParagraph();  						break;  					}  				}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ConcVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\TwoLevelConc.cs,Display,The following statement contains a magic number: switch(frag)  				{  					case 1:  					{  						// The top-level.  						// Enhance JohnT: add a property setting to make the key bold  						// Roughly' vwenv.set_IntProperty(ktptBold' ktpvEnum' kttvForceOn);  						// If we can get an hvo and flid' display that property of that object.  						int flid = 0;  						if (hvo != 0)  						{  							flid = m_cp.FlidFor(m_index' hvo);  						}  						if (flid != 0)  						{  							// Warning (JohnT): this option not yet tested...  							vwenv.AddStringProp(flid' this);  							return;  						}  						else  						{  							// Otherwise display a literal string straight from the policy object.  							vwenv.AddString(m_cp.KeyFor(m_index' hvo));  						}    						if (m_fExpanded)  						{  							vwenv.AddLazyVecItems(m_ni.ListFlid' this' 2);  						}  						break;  					}  					case 2:  					{  						// One line of context.    						// Figure the index of this object in the next object out (the root).  						int hvoOuter' tagOuter' ihvo;  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1'  							out hvoOuter' out tagOuter' out ihvo);  						int ichKey = m_ni.ContextStringStartOffset(ihvo' hvo);  						int cchKey = m_ni.ContextStringLength(ihvo' hvo);  						// Enhance JohnT: make the alignment position a function of window width.  						// Enhance JohnT: change background if this is the selected context line.  						vwenv.OpenConcPara(ichKey' ichKey + cchKey'  							VwConcParaOpts.kcpoDefault'  							72 * 2 * 1000); // 72 pts per inch * 2 inches * 1000 -> 2" in millipoints.  						int flidKey = m_ni.ContextStringFlid(ihvo' hvo);  						if (flidKey == 0)  						{  							// Not tested yet.  							vwenv.AddString(m_ni.ContextString(ihvo' hvo));  						}  						else  						{  							vwenv.AddStringProp(flidKey' this);  						}  						vwenv.CloseParagraph();  						break;  					}  				}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ConcVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\TwoLevelConc.cs,Display,The following statement contains a magic number: switch(frag)  				{  					case 1:  					{  						// The top-level.  						// Enhance JohnT: add a property setting to make the key bold  						// Roughly' vwenv.set_IntProperty(ktptBold' ktpvEnum' kttvForceOn);  						// If we can get an hvo and flid' display that property of that object.  						int flid = 0;  						if (hvo != 0)  						{  							flid = m_cp.FlidFor(m_index' hvo);  						}  						if (flid != 0)  						{  							// Warning (JohnT): this option not yet tested...  							vwenv.AddStringProp(flid' this);  							return;  						}  						else  						{  							// Otherwise display a literal string straight from the policy object.  							vwenv.AddString(m_cp.KeyFor(m_index' hvo));  						}    						if (m_fExpanded)  						{  							vwenv.AddLazyVecItems(m_ni.ListFlid' this' 2);  						}  						break;  					}  					case 2:  					{  						// One line of context.    						// Figure the index of this object in the next object out (the root).  						int hvoOuter' tagOuter' ihvo;  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1'  							out hvoOuter' out tagOuter' out ihvo);  						int ichKey = m_ni.ContextStringStartOffset(ihvo' hvo);  						int cchKey = m_ni.ContextStringLength(ihvo' hvo);  						// Enhance JohnT: make the alignment position a function of window width.  						// Enhance JohnT: change background if this is the selected context line.  						vwenv.OpenConcPara(ichKey' ichKey + cchKey'  							VwConcParaOpts.kcpoDefault'  							72 * 2 * 1000); // 72 pts per inch * 2 inches * 1000 -> 2" in millipoints.  						int flidKey = m_ni.ContextStringFlid(ihvo' hvo);  						if (flidKey == 0)  						{  							// Not tested yet.  							vwenv.AddString(m_ni.ContextString(ihvo' hvo));  						}  						else  						{  							vwenv.AddStringProp(flidKey' this);  						}  						vwenv.CloseParagraph();  						break;  					}  				}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,ConcVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\TwoLevelConc.cs,Display,The following statement contains a magic number: switch(frag)  				{  					case 1:  					{  						// The top-level.  						// Enhance JohnT: add a property setting to make the key bold  						// Roughly' vwenv.set_IntProperty(ktptBold' ktpvEnum' kttvForceOn);  						// If we can get an hvo and flid' display that property of that object.  						int flid = 0;  						if (hvo != 0)  						{  							flid = m_cp.FlidFor(m_index' hvo);  						}  						if (flid != 0)  						{  							// Warning (JohnT): this option not yet tested...  							vwenv.AddStringProp(flid' this);  							return;  						}  						else  						{  							// Otherwise display a literal string straight from the policy object.  							vwenv.AddString(m_cp.KeyFor(m_index' hvo));  						}    						if (m_fExpanded)  						{  							vwenv.AddLazyVecItems(m_ni.ListFlid' this' 2);  						}  						break;  					}  					case 2:  					{  						// One line of context.    						// Figure the index of this object in the next object out (the root).  						int hvoOuter' tagOuter' ihvo;  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1'  							out hvoOuter' out tagOuter' out ihvo);  						int ichKey = m_ni.ContextStringStartOffset(ihvo' hvo);  						int cchKey = m_ni.ContextStringLength(ihvo' hvo);  						// Enhance JohnT: make the alignment position a function of window width.  						// Enhance JohnT: change background if this is the selected context line.  						vwenv.OpenConcPara(ichKey' ichKey + cchKey'  							VwConcParaOpts.kcpoDefault'  							72 * 2 * 1000); // 72 pts per inch * 2 inches * 1000 -> 2" in millipoints.  						int flidKey = m_ni.ContextStringFlid(ihvo' hvo);  						if (flidKey == 0)  						{  							// Not tested yet.  							vwenv.AddString(m_ni.ContextString(ihvo' hvo));  						}  						else  						{  							vwenv.AddStringProp(flidKey' this);  						}  						vwenv.CloseParagraph();  						break;  					}  				}
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_vectorRefView.Size = new System.Drawing.Size(250' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_vectorRefView.Size = new System.Drawing.Size(250' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.m_vectorRefView.TabIndex = 2;
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(250' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceLauncher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(250' 20);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(232' 40);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceView,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(232' 40);
Magic Number,SIL.FieldWorks.Common.Framework.DetailControls,VectorReferenceVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\VectorReferenceView.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case VectorReferenceView.kfragTargetVector:  					// Check for an empty vector.  					if (hvo == 0 || m_cache.DomainDataByFlid.get_VecSize(hvo' m_flid) == 0)  					{  						vwenv.set_IntProperty((int)FwTextPropType.ktptForeColor'  							(int)FwTextPropVar.ktpvDefault'  							(int)ColorUtil.ConvertColorToBGR(Color.Gray));  						vwenv.set_IntProperty((int)FwTextPropType.ktptLeadingIndent'  							(int)FwTextPropVar.ktpvMilliPoint' 18000);  						vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  							(int)FwTextPropVar.ktpvDefault'  							(int)TptEditable.ktptNotEditable);  						vwenv.set_IntProperty((int)FwTextPropType.ktptAlign'  							(int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  						//vwenv.AddString(m_cache.MakeUserTss("Click to select -->"));  						if (hvo != 0)  							vwenv.NoteDependency(new[] { hvo }' new[] { m_flid }' 1);  					}  					else  					{  						if (!string.IsNullOrEmpty(TextStyle))  						{  							vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' TextStyle);  						}  						vwenv.OpenParagraph();  						vwenv.AddObjVec(m_flid' this' frag);  						vwenv.CloseParagraph();  					}  					break;  				case VectorReferenceView.kfragTargetObj:  					// Display one object from the vector.  					{  						ILgWritingSystemFactory wsf =  							m_cache.WritingSystemFactory;    						vwenv.set_IntProperty((int)FwTextPropType.ktptEditable'  							(int)FwTextPropVar.ktpvDefault'  							(int)TptEditable.ktptNotEditable);  						ITsString tss;  						Debug.Assert(hvo != 0);  #if USEBESTWS  					if (m_displayWs != null && m_displayWs.StartsWith("best"))  					{  						// The flid can be a variety of types' so deal with those.  						Debug.WriteLine("Using 'best ws': " + m_displayWs);  						int magicWsId = LgWritingSystem.GetMagicWsIdFromName(m_displayWs);  						int actualWS = m_cache.LanguageProject.ActualWs(magicWsId' hvo' m_flid);  						Debug.WriteLine("Actual ws: " + actualWS.ToString());  					}  					else  					{  #endif  						// Use reflection to get a prebuilt name if we can.  Otherwise  						// settle for piecing together a string.  						Debug.Assert(m_cache != null);  						var obj = m_cache.ServiceLocator.GetInstance<ICmObjectRepository>().GetObject(hvo);  						Debug.Assert(obj != null);  						Type type = obj.GetType();  						System.Reflection.PropertyInfo pi = type.GetProperty("TsName"'  							System.Reflection.BindingFlags.Instance |  							System.Reflection.BindingFlags.Public |  							System.Reflection.BindingFlags.FlattenHierarchy);  						if (pi != null)  						{  							tss = (ITsString)pi.GetValue(obj' null);  						}  						else  						{  							if (!string.IsNullOrEmpty(m_displayNameProperty))  							{  								pi = type.GetProperty(m_displayNameProperty'  									System.Reflection.BindingFlags.Instance |  									System.Reflection.BindingFlags.Public |  									System.Reflection.BindingFlags.FlattenHierarchy);  							}  							int ws = wsf.GetWsFromStr(obj.SortKeyWs);  							if (ws == 0)  								ws = m_cache.ServiceLocator.WritingSystems.DefaultAnalysisWritingSystem.Handle;  							if (pi != null)  							{  								object s = pi.GetValue(obj' null);  								if (s is ITsString)  									tss = (ITsString)s;  								else  									tss = TsStringUtils.MakeString((string)s' ws);  							}  							else  							{  								// ShortNameTss sometimes gets PropChanged' so worth letting the view know that's  								// what we're inserting.  								var flid = Cache.MetaDataCacheAccessor.GetFieldId2(obj.ClassID' "ShortNameTSS"' true);  								vwenv.AddStringProp(flid' this);  								break;  							}  #if USEBESTWS  						}  #endif  						}  						if (!string.IsNullOrEmpty(TextStyle))  						{  							vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' TextStyle);  						}  						vwenv.AddString(tss);  					}  					break;  				default:  					throw new ArgumentException(  						"Don't know what to do with the given frag."' "frag");  			}
Missing Default,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,GetTemplateForObjLayout,The following switch statement is missing a default case: switch (wss)  					{  						case WritingSystemServices.kwsVerns:  							layoutName = "CmPossibilityV";  							break;  						case WritingSystemServices.kwsAnals:  							layoutName = "CmPossibilityA";  							break;  						case WritingSystemServices.kwsAnalVerns:  							layoutName = "CmPossibilityAV";  							break;  						case WritingSystemServices.kwsVernAnals:  							layoutName = "CmPossibilityVA";  							break;  					}
Missing Default,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,ProcessPartRefNode,The following switch statement is missing a default case: switch (partRef.Name)  			{  				case "sublayout":  					// a sublayout simply includes another layout within the current layout' the layout is  					// located by name and choice field  					string layoutName = XmlUtils.GetOptionalAttributeValue(partRef' "name");  					string layoutChoiceField = XmlUtils.GetOptionalAttributeValue(partRef' "layoutChoiceField");  					XmlNode template = GetTemplateForObjLayout(obj' layoutName' layoutChoiceField);  					path.Add(partRef);  					path.Add(template);  					insPos = ApplyLayout(obj' parentSlice' template' indent' insPos' path' reuseMap' isTestOnly' out ntr);  					path.RemoveAt(path.Count - 1);  					path.RemoveAt(path.Count - 1);  					break;    				case "part":  					// If the previously selected slice doesn't display in this refresh' we try for the next  					// visible slice instead.  So m_fSetCurrentSliceNew might still be set.  See LT-9010.  					string partName = XmlUtils.GetMandatoryAttributeValue(partRef' "ref");  					if (!m_fSetCurrentSliceNew && m_currentSlicePartName != null && obj.Guid == m_currentSliceObjGuid)  					{  						for (int clid = obj.ClassID; clid != 0; clid = m_mdc.GetBaseClsId(clid))  						{  							string sFullPartName = String.Format("{0}-Detail-{1}"' m_mdc.GetClassName(clid)' partName);  							if (m_currentSlicePartName == sFullPartName)  							{  								m_fSetCurrentSliceNew = true;  								break;  							}  						}  					}  					string visibility = "always";  					if (!m_fShowAllFields)  					{  						visibility = XmlUtils.GetOptionalAttributeValue(partRef' "visibility"' "always");  						if (visibility == "never")  							return NodeTestResult.kntrNothing;  						Debug.Assert(visibility == "always" || visibility == "ifdata");  					}    					// Use the part inventory to find the indicated part.  					int classId = obj.ClassID;  					XmlNode part;  					for (;;)  					{  						string classname = m_mdc.GetClassName(classId);  						// Inventory of parts has key ID. The ID is made up of the class name' "-Detail-"' partname.  						string key = classname + "-Detail-" + partName;  						part = m_partInventory.GetElement("part"' new[] {key});    						if (part != null)  							break;  						if (classId == 0) // we've just tried CmObject.  						{  							Debug.WriteLine("Warning: No matching part found for " + classname + "-Detail-" + partName);  							// Just omit the missing part.  							return NodeTestResult.kntrNothing;  						}  						// Otherwise try superclass.  						classId = m_mdc.GetBaseClsId(classId);  					}  					string parameter = XmlUtils.GetOptionalAttributeValue(partRef' "param"' null);  					// If you are wondering why we put the partref in the key' one reason is that it may be needed  					// when expanding a collapsed slice.  					path.Add(partRef);  					ntr = ProcessPartChildren(part' path' reuseMap' obj' parentSlice' indent' ref insPos' isTestOnly'  						parameter' visibility == "ifdata"' partRef);  					path.RemoveAt(path.Count - 1);  					break;  			}
Missing Default,SIL.FieldWorks.Common.Framework.DetailControls,DataTree,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\DataTree.cs,GetGuidForJumpToTool,The following switch statement is missing a default case: switch (className)  					{  						case "LexEntry":  							if (m_root != null && m_root.ClassID == LexEntryTags.kClassId)  							{  								if (cmd.Id == "CmdRootEntryJumpToConcordance")  								{  									return m_root.Guid;  								}    								if (targetObject.ClassID == LexEntryRefTags.kClassId)  									return cmd.TargetId;    								if (targetObject.ClassID == LexEntryTags.kClassId)  									return targetObject.Guid;    								var lexEntry = targetObject.OwnerOfClass<ILexEntry>();  								return lexEntry == null ? cmd.TargetId : lexEntry.Guid;  							}  							break;  						case "LexSense":  							if (targetObject.ClassID == LexSenseTags.kClassId)  							{  								if (((ILexSense)targetObject).Entry == m_root)  									return targetObject.Guid;  							}  							break;  						case "MoForm":  							if (m_cache.ClassIsOrInheritsFrom(targetObject.ClassID' MoFormTags.kClassId))  							{  								if (flidSlice == MoFormTags.kflidForm)  									return targetObject.Guid;  							}  							break;  					}
Missing Default,SIL.FieldWorks.Common.Framework.DetailControls,MorphTypeAtomicLauncher,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\MorphTypeAtomicLauncher.cs,CheckForAffixDataLoss,The following switch statement is missing a default case: switch (affix.ClassID)  			{  				case MoAffixProcessTags.kClassId:  					fLoseRule = true;  					break;    				case MoAffixAllomorphTags.kClassId:  					var allo = (IMoAffixAllomorph) affix;  					fLoseInfixLoc = allo.PositionRS.Count > 0;  					fLoseGramInfo = allo.MsEnvPartOfSpeechRA != null || allo.MsEnvFeaturesOA != null;  					break;  			}
Missing Default,SIL.FieldWorks.Common.Framework.DetailControls,PossibilityAutoComplete,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\PossibilityAutoComplete.cs,HandleKeyDown,The following switch statement is missing a default case: switch (e.KeyCode)  			{  				case Keys.Up:  					try  					{  						m_changingSelection = true;  						m_listBox.SelectedIndex = Math.Max(m_listBox.SelectedIndex - 1' 0);  						m_listBox.ScrollHighlightIntoView();  					}  					finally  					{  						m_changingSelection = false;  					}  					e.Handled = true;  					break;    				case Keys.Down:  					try  					{  						m_changingSelection = true;  						m_listBox.SelectedIndex = Math.Min(m_listBox.SelectedIndex + 1' m_listBox.Items.Count - 1);  						m_listBox.ScrollHighlightIntoView();  					}  					finally  					{  						m_changingSelection = false;  					}  					e.Handled = true;  					break;  			}
Missing Default,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObject,The following switch statement is missing a default case: switch (fieldType)  				{  					case CellarPropertyType.OwningCollection:  						insertionPosition = -1;  						break;    					case CellarPropertyType.OwningAtomic:  						insertionPosition = -2;  						break;  				}
Missing Default,SIL.FieldWorks.Common.Framework.DetailControls,Slice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\Slice.cs,InsertObject,The following switch statement is missing a default case: switch (fieldType)  					{  						case CellarPropertyType.OwningCollection:  							// order is not fully predicatable' figure where it DID show up.  							insertionPosition = m_cache.DomainDataByFlid.GetObjIndex(hvoOwner' flid' uiObj.Object.Hvo);  							break;    						case CellarPropertyType.OwningAtomic:  							insertionPosition = 0;  							break;  					}
Missing Default,SIL.FieldWorks.Common.Framework.DetailControls,SummarySlice,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\SummarySlice.cs,m_button_Click,The following switch statement is missing a default case: switch (Expansion)  			{  				case DataTree.TreeItemState.ktisCollapsed:  					Expand();  					break;  				case DataTree.TreeItemState.ktisExpanded:  					Collapse();  					break;  			}
Missing Default,SIL.FieldWorks.Common.Framework.DetailControls,ConcVc,C:\repos\sillsdev_FieldWorks\Src\Common\Controls\DetailControls\TwoLevelConc.cs,Display,The following switch statement is missing a default case: switch(frag)  				{  					case 1:  					{  						// The top-level.  						// Enhance JohnT: add a property setting to make the key bold  						// Roughly' vwenv.set_IntProperty(ktptBold' ktpvEnum' kttvForceOn);  						// If we can get an hvo and flid' display that property of that object.  						int flid = 0;  						if (hvo != 0)  						{  							flid = m_cp.FlidFor(m_index' hvo);  						}  						if (flid != 0)  						{  							// Warning (JohnT): this option not yet tested...  							vwenv.AddStringProp(flid' this);  							return;  						}  						else  						{  							// Otherwise display a literal string straight from the policy object.  							vwenv.AddString(m_cp.KeyFor(m_index' hvo));  						}    						if (m_fExpanded)  						{  							vwenv.AddLazyVecItems(m_ni.ListFlid' this' 2);  						}  						break;  					}  					case 2:  					{  						// One line of context.    						// Figure the index of this object in the next object out (the root).  						int hvoOuter' tagOuter' ihvo;  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1'  							out hvoOuter' out tagOuter' out ihvo);  						int ichKey = m_ni.ContextStringStartOffset(ihvo' hvo);  						int cchKey = m_ni.ContextStringLength(ihvo' hvo);  						// Enhance JohnT: make the alignment position a function of window width.  						// Enhance JohnT: change background if this is the selected context line.  						vwenv.OpenConcPara(ichKey' ichKey + cchKey'  							VwConcParaOpts.kcpoDefault'  							72 * 2 * 1000); // 72 pts per inch * 2 inches * 1000 -> 2" in millipoints.  						int flidKey = m_ni.ContextStringFlid(ihvo' hvo);  						if (flidKey == 0)  						{  							// Not tested yet.  							vwenv.AddString(m_ni.ContextString(ihvo' hvo));  						}  						else  						{  							vwenv.AddStringProp(flidKey' this);  						}  						vwenv.CloseParagraph();  						break;  					}  				}
