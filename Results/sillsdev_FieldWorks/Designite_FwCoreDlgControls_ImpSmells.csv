Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.FwCoreDlgControls,ConfigSenseLayout,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigSenseLayout.cs,InitializeComponent,The method has 140 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,InitializeComponent,The method has 200 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,InitializeComponent,The method has 135 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FwGeneralTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwGeneralTab.cs,InitializeComponent,The method has 126 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,SaveToDB,The method has 181 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,OnClick,The method has 125 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,InitializeComponent,The method has 157 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,InitializeComponent,The method has 253 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The method has 310 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,InitializeComponent,The method has 134 lines of code.
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,AppendUnderline,Cyclomatic complexity of the method is 14
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboFontPosition_SelectedIndexChanged,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetUnderlineType,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,UpdateForStyle,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,SaveToInfo,Cyclomatic complexity of the method is 13
Complex Method,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AddBorderInfo,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AddBulletInfo,Cyclomatic complexity of the method is 12
Complex Method,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendParagraphInfo,Cyclomatic complexity of the method is 15
Complex Method,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,SaveToDB,Cyclomatic complexity of the method is 31
Complex Method,SIL.FieldWorks.FwCoreDlgControls,BaseStyleListHelper,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\BaseStyleListHelper.cs,Dispose,Cyclomatic complexity of the method is 17
Complex Method,SIL.FieldWorks.FwCoreDlgControls,BaseStyleListHelper,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\BaseStyleListHelper.cs,OkToAddItem,Cyclomatic complexity of the method is 13
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseFeatureString,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,OnClick,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,UpdateForStyle,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,UpdateBulletInfo,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,ValueChanged,Cyclomatic complexity of the method is 19
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,Cyclomatic complexity of the method is 14
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,Cyclomatic complexity of the method is 22
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.FwCoreDlgControls,LocaleMenuButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\LocaleMenuButton.cs,OnClick,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,CheckValid,Cyclomatic complexity of the method is 20
Long Parameter List,SIL.FieldWorks.FwCoreDlgControls,IFontDialog,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\IFontDialog.cs,Initialize,The method has 6 parameters. Parameters: fontInfo' fAllowSubscript' ws' wsf' styleSheet' fAlwaysDisableFontFeatures
Long Identifier,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,,The length of the parameter m_fIgnoreWsSelectedIndexChange is 30.
Long Identifier,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,,The length of the parameter dyxGapBetweenLeftCheckboxAndPreviewPane is 39.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,ConfigParentNode,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigParentNode.cs,SetDetails,The length of the statement  "					new Point(m_lblMoreDetail.Location.X' m_lblMoreDetail.Location.Y + m_lblMoreDetail.Height + m_lblMoreDetail.Padding.Bottom + 1) : " is 129.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,ConfigParentNode,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigParentNode.cs,SetDetails,The length of the statement  "					new Point(m_tbMoreDetail.Location.X' m_tbMoreDetail.Location.Y + m_tbMoreDetail.Height + m_tbMoreDetail.Padding.Bottom + 1); " is 124.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,ConfigParentNode,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigParentNode.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ConfigParentNode)); " is 136.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,ConfigParentNode,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigParentNode.cs,InitializeComponent,The length of the statement  "			this.m_lnkConfigureNow.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.m_lnkConfigureNow_LinkClicked); " is 132.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,ConfigSenseLayout,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigSenseLayout.cs,m_tb_TextChanged,The length of the statement  "				MessageBox.Show(FwCoreDlgControls.ksIllegalXmlChars' FwCoreDlgControls.ksWarning' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 128.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,ConfigSenseLayout,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigSenseLayout.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ConfigSenseLayout)); " is 137.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwFontAttributes)); " is 136.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,InitializeComponent,The length of the statement  "			this.m_cboUnderlineStyle.DrawItemForeground += new System.Windows.Forms.DrawItemEventHandler(this.m_cboUnderlineStyle_DrawItemForeground); " is 138.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwFontTab)); " is 129.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,InitializeComponent,The length of the statement  "			this.m_lstWritingSystems.SelectedIndexChanged += new System.EventHandler(this.m_lstWritingSystems_SelectedIndexChanged); " is 120.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwGeneralTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwGeneralTab.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwGeneralTab)); " is 132.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,DefaultFontsControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\DefaultFontsControl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DefaultFontsControl)); " is 139.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,DefaultFontsControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\DefaultFontsControl.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetShowHelp(this.m_defaultFontComboBox' ((bool)(resources.GetObject("m_defaultFontComboBox.ShowHelp")))); " is 125.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,DefaultFontsControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\DefaultFontsControl.cs,InitializeComponent,The length of the statement  "			this.m_defaultFontComboBox.SelectedIndexChanged += new System.EventHandler(this.m_defaultFontComboBox_SelectedIndexChanged); " is 124.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,DefaultFontsControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\DefaultFontsControl.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetHelpString(this.m_defaultFontFeaturesButton' resources.GetString("m_defaultFontFeaturesButton.HelpString")); " is 131.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,DefaultFontsControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\DefaultFontsControl.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetShowHelp(this.m_defaultFontFeaturesButton' ((bool)(resources.GetObject("m_defaultFontFeaturesButton.ShowHelp")))); " is 137.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,DefaultFontsControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\DefaultFontsControl.cs,InitializeComponent,The length of the statement  "			this.m_defaultFontFeaturesButton.FontFeatureSelected += new System.EventHandler(this.m_defaultFontFeaturesButton_FontFeatureSelected); " is 134.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,SaveToInfo,The length of the statement  "				Debug.Assert(false' "Somehow' the Border tab has been asked to write its data to a character-based style [" + styleInfo.Name + "]."); " is 133.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwBorderTab)); " is 131.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,InitializeComponent,The length of the statement  "			this.m_cboWidth.DrawItemBackground += new System.Windows.Forms.DrawItemEventHandler(this.m_cboWidth_DrawItemBackground); " is 120.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,InitializeComponent,The length of the statement  "			this.m_cboWidth.DrawItemForeground += new System.Windows.Forms.DrawItemEventHandler(this.m_cboWidth_DrawItemForeground); " is 120.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,SaveToInfo,The length of the statement  "				Debug.Assert(false' "Somehow' the Bullets tab has been asked to write its data to a character-based style [" + styleInfo.Name + "]."); " is 134.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwBulletsTab)); " is 132.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The length of the statement  "				Debug.Assert(false' "Somehow' the Paragraph tab has been asked to write its data to a character-based style [" + styleInfo.Name + "]."); " is 136.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwParagraphTab)); " is 134.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RegionVariantControl)); " is 140.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetShowHelp(this.m_regionAbbrevLabel' ((bool)(resources.GetObject("m_regionAbbrevLabel.ShowHelp")))); " is 121.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetShowHelp(this.m_variantAbbrevLabel' ((bool)(resources.GetObject("m_variantAbbrevLabel.ShowHelp")))); " is 123.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetShowHelp(this.m_scriptAbbrevLabel' ((bool)(resources.GetObject("m_scriptAbbrevLabel.ShowHelp")))); " is 121.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,m_variantName_TextChanged,The length of the statement  "				m_variantAbbrev.Enabled = variantSubtag.IsPrivateUse && !StandardSubtags.CommonPrivateUseVariants.Contains(variantSubtag); " is 122.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,m_cboFontNames_SelectedIndexChanged,The conditional expression  "(m_cboFontNames.SelectedIndex == 0 && inheritedFontInfo.m_fontName.IsInherited) ||  				(inheritedFontInfo.m_fontName.ValueIsSet &&  				(m_cboFontNames.Text == inheritedFontInfo.m_fontName.Value ||  				inheritedFontInfo.m_features.ValueIsSet && inheritedFontInfo.m_features.Value == null))"  is complex.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,BaseStyleListHelper,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\BaseStyleListHelper.cs,OkToAddItem,The conditional expression  "!m_unionIncludeAndTypeFilter && m_includedContexts != null &&  				m_includedContexts.Count > 0 && !m_includedContexts.Contains(item.Context)"  is complex.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,BaseStyleListHelper,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\BaseStyleListHelper.cs,OkToAddItem,The conditional expression  "m_unionIncludeAndTypeFilter && m_includedContexts != null &&  				m_includedContexts.Count > 0 && m_includedContexts.Contains(item.Context)"  is complex.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,OnClick,The conditional expression  "cValueIds == 2 &&  					(valueIds[0] == 0 || valueIds[1] == 0) &&  					valueIds[0] + valueIds[1] == 1"  is complex.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawBorders,The conditional expression  "(fLeadingBorderOn && !DefaultTextDirectionRtoL) ||  						(fTrailingBorderOn && DefaultTextDirectionRtoL)"  is complex.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawBorders,The conditional expression  "(fLeadingBorderOn && DefaultTextDirectionRtoL) ||  						(fTrailingBorderOn && !DefaultTextDirectionRtoL)"  is complex.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,HandleKeyPress,The conditional expression  "e.KeyChar != (int)Keys.Back && e.KeyChar != (int)Keys.Return && e.KeyChar != (int)Keys.Delete  				&& !IsValidAbbrChar(e.KeyChar)"  is complex.
Magic Number,SIL.FieldWorks.FwCoreDlgControls,BlueCircleButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\BlueCircleButton.cs,BlueCircleButton,The following statement contains a magic number: Height = m_blueCircle.Height + 3;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,BlueCircleButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\BlueCircleButton.cs,BlueCircleButton,The following statement contains a magic number: Width = m_blueCircle.Width + 3;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,ConfigSenseLayout,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigSenseLayout.cs,From96dpiY,The following statement contains a magic number: return (int)Math.Round(input * g.DpiY / 96.0);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,ToString,The following statement contains a magic number: AppendToString(text' string.Format(FwCoreDlgControls.ksXPt' fontInfo.m_fontSize.Value / 1000));
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,AppendFontOffset,The following statement contains a magic number: AppendToString(text' string.Format(FwCoreDlgControls.ksRaisedXpt' value / 1000));
Magic Number,SIL.FieldWorks.FwCoreDlgControls,BulletsPreview,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsPreview.cs,GetAvailWidth,The following statement contains a magic number: return ClientRectangle.Width - (HorizMargin * 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,BulletsPreviewVc,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsPreview.cs,Display,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptSpaceBefore'  				(int)FwTextPropVar.ktpvMilliPoint' 10000);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboFontPosition_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 0: // Unspecified  					m_nudPositionAmount.MeasureValue = 0;  					m_nudPositionAmount.Text = string.Empty;  					break;  				case 1: // Normal  					m_nudPositionAmount.MeasureValue = 0;  					break;  				case 2: // Raised  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = 3000;  					else if (m_nudPositionAmount.MeasureValue < 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  				case 3: // Lowered  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = -3000;  					else if (m_nudPositionAmount.MeasureValue > 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboFontPosition_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 0: // Unspecified  					m_nudPositionAmount.MeasureValue = 0;  					m_nudPositionAmount.Text = string.Empty;  					break;  				case 1: // Normal  					m_nudPositionAmount.MeasureValue = 0;  					break;  				case 2: // Raised  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = 3000;  					else if (m_nudPositionAmount.MeasureValue < 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  				case 3: // Lowered  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = -3000;  					else if (m_nudPositionAmount.MeasureValue > 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboFontPosition_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 0: // Unspecified  					m_nudPositionAmount.MeasureValue = 0;  					m_nudPositionAmount.Text = string.Empty;  					break;  				case 1: // Normal  					m_nudPositionAmount.MeasureValue = 0;  					break;  				case 2: // Raised  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = 3000;  					else if (m_nudPositionAmount.MeasureValue < 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  				case 3: // Lowered  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = -3000;  					else if (m_nudPositionAmount.MeasureValue > 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboFontPosition_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 0: // Unspecified  					m_nudPositionAmount.MeasureValue = 0;  					m_nudPositionAmount.Text = string.Empty;  					break;  				case 1: // Normal  					m_nudPositionAmount.MeasureValue = 0;  					break;  				case 2: // Raised  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = 3000;  					else if (m_nudPositionAmount.MeasureValue < 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  				case 3: // Lowered  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = -3000;  					else if (m_nudPositionAmount.MeasureValue > 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetUnderlineType,The following statement contains a magic number: switch (m_cboUnderlineStyle.AdjustedSelectedIndex)  				{  					case 1: underlineType = FwUnderlineType.kuntNone; break;  					case 2: underlineType = FwUnderlineType.kuntSingle; break;  					case 3: underlineType = FwUnderlineType.kuntDouble; break;  					case 4: underlineType = FwUnderlineType.kuntDotted; break;  					case 5: underlineType = FwUnderlineType.kuntDashed; break;  					case 6: underlineType = FwUnderlineType.kuntStrikethrough; break;  					case -1: break; // nothing selected  					default:  						Debug.Assert(false' "Unknown underline style");  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetUnderlineType,The following statement contains a magic number: switch (m_cboUnderlineStyle.AdjustedSelectedIndex)  				{  					case 1: underlineType = FwUnderlineType.kuntNone; break;  					case 2: underlineType = FwUnderlineType.kuntSingle; break;  					case 3: underlineType = FwUnderlineType.kuntDouble; break;  					case 4: underlineType = FwUnderlineType.kuntDotted; break;  					case 5: underlineType = FwUnderlineType.kuntDashed; break;  					case 6: underlineType = FwUnderlineType.kuntStrikethrough; break;  					case -1: break; // nothing selected  					default:  						Debug.Assert(false' "Unknown underline style");  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetUnderlineType,The following statement contains a magic number: switch (m_cboUnderlineStyle.AdjustedSelectedIndex)  				{  					case 1: underlineType = FwUnderlineType.kuntNone; break;  					case 2: underlineType = FwUnderlineType.kuntSingle; break;  					case 3: underlineType = FwUnderlineType.kuntDouble; break;  					case 4: underlineType = FwUnderlineType.kuntDotted; break;  					case 5: underlineType = FwUnderlineType.kuntDashed; break;  					case 6: underlineType = FwUnderlineType.kuntStrikethrough; break;  					case -1: break; // nothing selected  					default:  						Debug.Assert(false' "Unknown underline style");  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetUnderlineType,The following statement contains a magic number: switch (m_cboUnderlineStyle.AdjustedSelectedIndex)  				{  					case 1: underlineType = FwUnderlineType.kuntNone; break;  					case 2: underlineType = FwUnderlineType.kuntSingle; break;  					case 3: underlineType = FwUnderlineType.kuntDouble; break;  					case 4: underlineType = FwUnderlineType.kuntDotted; break;  					case 5: underlineType = FwUnderlineType.kuntDashed; break;  					case 6: underlineType = FwUnderlineType.kuntStrikethrough; break;  					case -1: break; // nothing selected  					default:  						Debug.Assert(false' "Unknown underline style");  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetUnderlineType,The following statement contains a magic number: switch (m_cboUnderlineStyle.AdjustedSelectedIndex)  				{  					case 1: underlineType = FwUnderlineType.kuntNone; break;  					case 2: underlineType = FwUnderlineType.kuntSingle; break;  					case 3: underlineType = FwUnderlineType.kuntDouble; break;  					case 4: underlineType = FwUnderlineType.kuntDotted; break;  					case 5: underlineType = FwUnderlineType.kuntDashed; break;  					case 6: underlineType = FwUnderlineType.kuntStrikethrough; break;  					case -1: break; // nothing selected  					default:  						Debug.Assert(false' "Unknown underline style");  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetFontPosition,The following statement contains a magic number: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 2: fontPos = m_nudPositionAmount.MeasureValue; break;  				case 3: fontPos = m_nudPositionAmount.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetFontPosition,The following statement contains a magic number: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 2: fontPos = m_nudPositionAmount.MeasureValue; break;  				case 3: fontPos = m_nudPositionAmount.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,UpdateForStyle,The following statement contains a magic number: switch (fontInfo.m_underline.Value)  				{  					case FwUnderlineType.kuntNone:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 1; break;  					case FwUnderlineType.kuntSingle:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 2; break;  					case FwUnderlineType.kuntDouble:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 3; break;  					case FwUnderlineType.kuntDotted:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 4; break;  					case FwUnderlineType.kuntDashed:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 5; break;  					case FwUnderlineType.kuntStrikethrough:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 6; break;  					default:  						Debug.Assert(false' "Unknown underline type");  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,UpdateForStyle,The following statement contains a magic number: switch (fontInfo.m_underline.Value)  				{  					case FwUnderlineType.kuntNone:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 1; break;  					case FwUnderlineType.kuntSingle:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 2; break;  					case FwUnderlineType.kuntDouble:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 3; break;  					case FwUnderlineType.kuntDotted:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 4; break;  					case FwUnderlineType.kuntDashed:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 5; break;  					case FwUnderlineType.kuntStrikethrough:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 6; break;  					default:  						Debug.Assert(false' "Unknown underline type");  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,UpdateForStyle,The following statement contains a magic number: switch (fontInfo.m_underline.Value)  				{  					case FwUnderlineType.kuntNone:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 1; break;  					case FwUnderlineType.kuntSingle:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 2; break;  					case FwUnderlineType.kuntDouble:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 3; break;  					case FwUnderlineType.kuntDotted:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 4; break;  					case FwUnderlineType.kuntDashed:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 5; break;  					case FwUnderlineType.kuntStrikethrough:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 6; break;  					default:  						Debug.Assert(false' "Unknown underline type");  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,UpdateForStyle,The following statement contains a magic number: switch (fontInfo.m_underline.Value)  				{  					case FwUnderlineType.kuntNone:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 1; break;  					case FwUnderlineType.kuntSingle:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 2; break;  					case FwUnderlineType.kuntDouble:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 3; break;  					case FwUnderlineType.kuntDotted:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 4; break;  					case FwUnderlineType.kuntDashed:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 5; break;  					case FwUnderlineType.kuntStrikethrough:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 6; break;  					default:  						Debug.Assert(false' "Unknown underline type");  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,UpdateForStyle,The following statement contains a magic number: switch (fontInfo.m_underline.Value)  				{  					case FwUnderlineType.kuntNone:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 1; break;  					case FwUnderlineType.kuntSingle:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 2; break;  					case FwUnderlineType.kuntDouble:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 3; break;  					case FwUnderlineType.kuntDotted:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 4; break;  					case FwUnderlineType.kuntDashed:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 5; break;  					case FwUnderlineType.kuntStrikethrough:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 6; break;  					default:  						Debug.Assert(false' "Unknown underline type");  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,InitializeComponent,The following statement contains a magic number: this.m_nudPositionAmount.MeasureMax = 100000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,InitializeComponent,The following statement contains a magic number: this.m_nudPositionAmount.MeasureMin = -100000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,m_cboFontSize_TextUpdate,The following statement contains a magic number: correctedText.Length == 3
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,UpdateForStyle,The following statement contains a magic number: m_cboFontSize.Text = (fontInfo.m_fontSize.Value / 1000).ToString();
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,SaveToInfo,The following statement contains a magic number: fontInfo.m_fontSize.Save(newInherit' fontSize * 1000)
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AddBorderInfo,The following statement contains a magic number: string sWidth = ((double)width / 1000).ToString("0.##");
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendParagraphInfo,The following statement contains a magic number: switch (info.m_lineHeight)  					{  						case 10000: AppendItem(text' FwCoreDlgControls.ksSingleSpacing); break;  						case 15000: AppendItem(text' FwCoreDlgControls.ksPlusSpacing); break;  						case 20000: AppendItem(text' FwCoreDlgControls.ksDoubleSpacing); break;  					}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendParagraphInfo,The following statement contains a magic number: switch (info.m_lineHeight)  					{  						case 10000: AppendItem(text' FwCoreDlgControls.ksSingleSpacing); break;  						case 15000: AppendItem(text' FwCoreDlgControls.ksPlusSpacing); break;  						case 20000: AppendItem(text' FwCoreDlgControls.ksDoubleSpacing); break;  					}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendParagraphInfo,The following statement contains a magic number: switch (info.m_lineHeight)  					{  						case 10000: AppendItem(text' FwCoreDlgControls.ksSingleSpacing); break;  						case 15000: AppendItem(text' FwCoreDlgControls.ksPlusSpacing); break;  						case 20000: AppendItem(text' FwCoreDlgControls.ksDoubleSpacing); break;  					}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendItem,The following statement contains a magic number: text.Length > 2 && text[text.Length - 2] != '+'
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendItem,The following statement contains a magic number: text.Length > 2 && text[text.Length - 2] != '+'
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseNextFid,The following statement contains a magic number: fid = fid * 10 + (stFeatures[ich] - '0');
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseQuotedValue,The following statement contains a magic number: ib < 4
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseQuotedValue,The following statement contains a magic number: return bVals[0] << 24 | bVals[1] << 16 | bVals[2] << 8 | bVals[3];
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseQuotedValue,The following statement contains a magic number: return bVals[0] << 24 | bVals[1] << 16 | bVals[2] << 8 | bVals[3];
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseQuotedValue,The following statement contains a magic number: return bVals[0] << 24 | bVals[1] << 16 | bVals[2] << 8 | bVals[3];
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseQuotedValue,The following statement contains a magic number: return bVals[0] << 24 | bVals[1] << 16 | bVals[2] << 8 | bVals[3];
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseQuotedValue,The following statement contains a magic number: return bVals[0] << 24 | bVals[1] << 16 | bVals[2] << 8 | bVals[3];
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,OnClick,The following statement contains a magic number: cValueIds == 2 &&  					(valueIds[0] == 0 || valueIds[1] == 0) &&  					valueIds[0] + valueIds[1] == 1
Magic Number,SIL.FieldWorks.FwCoreDlgControls,HoldDummyGraphics,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,HoldDummyGraphics,The following statement contains a magic number: chrp.szFaceName = new ushort[32];
Magic Number,SIL.FieldWorks.FwCoreDlgControls,HoldDummyGraphics,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,HoldDummyGraphics,The following statement contains a magic number: ich < 32
Magic Number,SIL.FieldWorks.FwCoreDlgControls,HoldDummyGraphics,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,HoldDummyGraphics,The following statement contains a magic number: fontName.Length < 32
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_pnlBorderPreview_Paint,The following statement contains a magic number: drawRect.Inflate(-7' -7);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_pnlBorderPreview_Paint,The following statement contains a magic number: drawRect.Inflate(-7' -7);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_pnlBorderPreview_Paint,The following statement contains a magic number: const int tickSize = 7;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_pnlBorderPreview_Paint,The following statement contains a magic number: drawRect.Inflate(-3' -3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_pnlBorderPreview_Paint,The following statement contains a magic number: drawRect.Inflate(-3' -3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemBackground,The following statement contains a magic number: DrawRectangle(e.Graphics' e.Bounds' SystemPens.Highlight' 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: RectangleF textRect = new RectangleF(drawRect.X + 1' drawRect.Y + 1' drawRect.Width - 2' drawRect.Height - 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: RectangleF textRect = new RectangleF(drawRect.X + 1' drawRect.Y + 1' drawRect.Width - 2' drawRect.Height - 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: e.Graphics.FillRectangle(new SolidBrush(m_cboColor.ColorValue)'  					e.Bounds.X + (e.Bounds.Width * 4 / 10)' e.Bounds.Y + (e.Bounds.Height - sampleHeight) / 2'  					(e.Bounds.Width * 6 / 10) - 3' sampleHeight);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: e.Graphics.FillRectangle(new SolidBrush(m_cboColor.ColorValue)'  					e.Bounds.X + (e.Bounds.Width * 4 / 10)' e.Bounds.Y + (e.Bounds.Height - sampleHeight) / 2'  					(e.Bounds.Width * 6 / 10) - 3' sampleHeight);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: e.Graphics.FillRectangle(new SolidBrush(m_cboColor.ColorValue)'  					e.Bounds.X + (e.Bounds.Width * 4 / 10)' e.Bounds.Y + (e.Bounds.Height - sampleHeight) / 2'  					(e.Bounds.Width * 6 / 10) - 3' sampleHeight);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: e.Graphics.FillRectangle(new SolidBrush(m_cboColor.ColorValue)'  					e.Bounds.X + (e.Bounds.Width * 4 / 10)' e.Bounds.Y + (e.Bounds.Height - sampleHeight) / 2'  					(e.Bounds.Width * 6 / 10) - 3' sampleHeight);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: e.Graphics.FillRectangle(new SolidBrush(m_cboColor.ColorValue)'  					e.Bounds.X + (e.Bounds.Width * 4 / 10)' e.Bounds.Y + (e.Bounds.Height - sampleHeight) / 2'  					(e.Bounds.Width * 6 / 10) - 3' sampleHeight);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: e.Graphics.FillRectangle(new SolidBrush(m_cboColor.ColorValue)'  					e.Bounds.X + (e.Bounds.Width * 4 / 10)' e.Bounds.Y + (e.Bounds.Height - sampleHeight) / 2'  					(e.Bounds.Width * 6 / 10) - 3' sampleHeight);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-2' -2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-2' -2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-2' -2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-2' -2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: DrawRectangle(g' drawRect' SystemPens.Highlight' 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-3' -3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-3' -3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-3' -3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-3' -3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,CalcBorderWidth,The following statement contains a magic number: return (int)(s_borderSizes[index] * (int)g.DpiY / 72000) + 1;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawTextLines,The following statement contains a magic number: const int lineHeight = 5;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawTextLines,The following statement contains a magic number: const int lineSpacing = 2;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawTextLines,The following statement contains a magic number: lineRect.X += 10;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawTextLines,The following statement contains a magic number: lineRect.Width -= 10;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawTextLines,The following statement contains a magic number: lineRect.Width -= 10;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawTextLines,The following statement contains a magic number: drawRect.Height <= (lineHeight * 2) + lineSpacing
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,UpdateForStyle,The following statement contains a magic number: maxWidth = 500;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,GetNumberSchemeIndexForType,The following statement contains a magic number: switch (bulletType)  			{  				case VwBulNum.kvbnArabic: return 0;  				case VwBulNum.kvbnRomanUpper: return 1;  				case VwBulNum.kvbnRomanLower: return 2;  				case VwBulNum.kvbnLetterUpper: return 3;  				case VwBulNum.kvbnLetterLower: return 4;  				case VwBulNum.kvbnArabic01: return 5;  				default:  					return m_kDefaultNumberIndex;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,GetNumberSchemeIndexForType,The following statement contains a magic number: switch (bulletType)  			{  				case VwBulNum.kvbnArabic: return 0;  				case VwBulNum.kvbnRomanUpper: return 1;  				case VwBulNum.kvbnRomanLower: return 2;  				case VwBulNum.kvbnLetterUpper: return 3;  				case VwBulNum.kvbnLetterLower: return 4;  				case VwBulNum.kvbnArabic01: return 5;  				default:  					return m_kDefaultNumberIndex;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,GetNumberSchemeIndexForType,The following statement contains a magic number: switch (bulletType)  			{  				case VwBulNum.kvbnArabic: return 0;  				case VwBulNum.kvbnRomanUpper: return 1;  				case VwBulNum.kvbnRomanLower: return 2;  				case VwBulNum.kvbnLetterUpper: return 3;  				case VwBulNum.kvbnLetterLower: return 4;  				case VwBulNum.kvbnArabic01: return 5;  				default:  					return m_kDefaultNumberIndex;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,GetNumberSchemeIndexForType,The following statement contains a magic number: switch (bulletType)  			{  				case VwBulNum.kvbnArabic: return 0;  				case VwBulNum.kvbnRomanUpper: return 1;  				case VwBulNum.kvbnRomanLower: return 2;  				case VwBulNum.kvbnLetterUpper: return 3;  				case VwBulNum.kvbnLetterLower: return 4;  				case VwBulNum.kvbnArabic01: return 5;  				default:  					return m_kDefaultNumberIndex;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,DataChange,The following statement contains a magic number: propsBldr.SetIntPropValues((int)FwTextPropType.ktptSpaceBefore'  					(int)FwTextPropVar.ktpvMilliPoint' 6000);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,m_cboNumberScheme_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboNumberScheme.SelectedIndex)  			{  				case 0:		// 1' 2' 3'  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;    				case 1:		// I' II' III (Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.Roman;  					break;    				case 2:		// i' ii' iii (lower case Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.RomanLowerCase;  					break;    				case 3:		// A' B' C  					m_nudStartAt.Mode = DataUpDownMode.Letters;  					break;    				case 4:		// a' b' c  					m_nudStartAt.Mode = DataUpDownMode.LettersLowerCase;  					break;    				case 5:		// 01' 02' 03  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,m_cboNumberScheme_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboNumberScheme.SelectedIndex)  			{  				case 0:		// 1' 2' 3'  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;    				case 1:		// I' II' III (Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.Roman;  					break;    				case 2:		// i' ii' iii (lower case Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.RomanLowerCase;  					break;    				case 3:		// A' B' C  					m_nudStartAt.Mode = DataUpDownMode.Letters;  					break;    				case 4:		// a' b' c  					m_nudStartAt.Mode = DataUpDownMode.LettersLowerCase;  					break;    				case 5:		// 01' 02' 03  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,m_cboNumberScheme_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboNumberScheme.SelectedIndex)  			{  				case 0:		// 1' 2' 3'  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;    				case 1:		// I' II' III (Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.Roman;  					break;    				case 2:		// i' ii' iii (lower case Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.RomanLowerCase;  					break;    				case 3:		// A' B' C  					m_nudStartAt.Mode = DataUpDownMode.Letters;  					break;    				case 4:		// a' b' c  					m_nudStartAt.Mode = DataUpDownMode.LettersLowerCase;  					break;    				case 5:		// 01' 02' 03  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,m_cboNumberScheme_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboNumberScheme.SelectedIndex)  			{  				case 0:		// 1' 2' 3'  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;    				case 1:		// I' II' III (Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.Roman;  					break;    				case 2:		// i' ii' iii (lower case Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.RomanLowerCase;  					break;    				case 3:		// A' B' C  					m_nudStartAt.Mode = DataUpDownMode.Letters;  					break;    				case 4:		// a' b' c  					m_nudStartAt.Mode = DataUpDownMode.LettersLowerCase;  					break;    				case 5:		// 01' 02' 03  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudStartAt.MaxValue = 3000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,m_pnlPreview_Paint,The following statement contains a magic number: drawRect.Inflate(-4' -4);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,m_pnlPreview_Paint,The following statement contains a magic number: drawRect.Inflate(-4' -4);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,m_pnlPreview_Paint,The following statement contains a magic number: DrawAdjacentPreview(2' ref drawRect' e.Graphics);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,m_pnlPreview_Paint,The following statement contains a magic number: DrawAdjacentPreview(3' ref drawRect' e.Graphics);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: switch (styleInfo.IAlignment.Value)  			{  				case FwTextAlign.ktalLeading: m_cboAlignment.AdjustedSelectedIndex = 1; break;  				case FwTextAlign.ktalLeft: m_cboAlignment.AdjustedSelectedIndex = 2; break;  				case FwTextAlign.ktalCenter: m_cboAlignment.AdjustedSelectedIndex = 3; break;  				case FwTextAlign.ktalRight: m_cboAlignment.AdjustedSelectedIndex = 4; break;  				case FwTextAlign.ktalTrailing: m_cboAlignment.AdjustedSelectedIndex = 5; break;  				case FwTextAlign.ktalJustify: m_cboAlignment.AdjustedSelectedIndex = 6; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: switch (styleInfo.IAlignment.Value)  			{  				case FwTextAlign.ktalLeading: m_cboAlignment.AdjustedSelectedIndex = 1; break;  				case FwTextAlign.ktalLeft: m_cboAlignment.AdjustedSelectedIndex = 2; break;  				case FwTextAlign.ktalCenter: m_cboAlignment.AdjustedSelectedIndex = 3; break;  				case FwTextAlign.ktalRight: m_cboAlignment.AdjustedSelectedIndex = 4; break;  				case FwTextAlign.ktalTrailing: m_cboAlignment.AdjustedSelectedIndex = 5; break;  				case FwTextAlign.ktalJustify: m_cboAlignment.AdjustedSelectedIndex = 6; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: switch (styleInfo.IAlignment.Value)  			{  				case FwTextAlign.ktalLeading: m_cboAlignment.AdjustedSelectedIndex = 1; break;  				case FwTextAlign.ktalLeft: m_cboAlignment.AdjustedSelectedIndex = 2; break;  				case FwTextAlign.ktalCenter: m_cboAlignment.AdjustedSelectedIndex = 3; break;  				case FwTextAlign.ktalRight: m_cboAlignment.AdjustedSelectedIndex = 4; break;  				case FwTextAlign.ktalTrailing: m_cboAlignment.AdjustedSelectedIndex = 5; break;  				case FwTextAlign.ktalJustify: m_cboAlignment.AdjustedSelectedIndex = 6; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: switch (styleInfo.IAlignment.Value)  			{  				case FwTextAlign.ktalLeading: m_cboAlignment.AdjustedSelectedIndex = 1; break;  				case FwTextAlign.ktalLeft: m_cboAlignment.AdjustedSelectedIndex = 2; break;  				case FwTextAlign.ktalCenter: m_cboAlignment.AdjustedSelectedIndex = 3; break;  				case FwTextAlign.ktalRight: m_cboAlignment.AdjustedSelectedIndex = 4; break;  				case FwTextAlign.ktalTrailing: m_cboAlignment.AdjustedSelectedIndex = 5; break;  				case FwTextAlign.ktalJustify: m_cboAlignment.AdjustedSelectedIndex = 6; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: switch (styleInfo.IAlignment.Value)  			{  				case FwTextAlign.ktalLeading: m_cboAlignment.AdjustedSelectedIndex = 1; break;  				case FwTextAlign.ktalLeft: m_cboAlignment.AdjustedSelectedIndex = 2; break;  				case FwTextAlign.ktalCenter: m_cboAlignment.AdjustedSelectedIndex = 3; break;  				case FwTextAlign.ktalRight: m_cboAlignment.AdjustedSelectedIndex = 4; break;  				case FwTextAlign.ktalTrailing: m_cboAlignment.AdjustedSelectedIndex = 5; break;  				case FwTextAlign.ktalJustify: m_cboAlignment.AdjustedSelectedIndex = 6; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: m_nudSpacingAt.MeasureMin = 1000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 1: newAlignment = FwTextAlign.ktalLeading; break;  				case 2: newAlignment = FwTextAlign.ktalLeft; break;  				case 3: newAlignment = FwTextAlign.ktalCenter; break;  				case 4: newAlignment = FwTextAlign.ktalRight; break;  				case 5: newAlignment = FwTextAlign.ktalTrailing; break;  				case 6: newAlignment = FwTextAlign.ktalJustify; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 1: newAlignment = FwTextAlign.ktalLeading; break;  				case 2: newAlignment = FwTextAlign.ktalLeft; break;  				case 3: newAlignment = FwTextAlign.ktalCenter; break;  				case 4: newAlignment = FwTextAlign.ktalRight; break;  				case 5: newAlignment = FwTextAlign.ktalTrailing; break;  				case 6: newAlignment = FwTextAlign.ktalJustify; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 1: newAlignment = FwTextAlign.ktalLeading; break;  				case 2: newAlignment = FwTextAlign.ktalLeft; break;  				case 3: newAlignment = FwTextAlign.ktalCenter; break;  				case 4: newAlignment = FwTextAlign.ktalRight; break;  				case 5: newAlignment = FwTextAlign.ktalTrailing; break;  				case 6: newAlignment = FwTextAlign.ktalJustify; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 1: newAlignment = FwTextAlign.ktalLeading; break;  				case 2: newAlignment = FwTextAlign.ktalLeft; break;  				case 3: newAlignment = FwTextAlign.ktalCenter; break;  				case 4: newAlignment = FwTextAlign.ktalRight; break;  				case 5: newAlignment = FwTextAlign.ktalTrailing; break;  				case 6: newAlignment = FwTextAlign.ktalJustify; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 1: newAlignment = FwTextAlign.ktalLeading; break;  				case 2: newAlignment = FwTextAlign.ktalLeft; break;  				case 3: newAlignment = FwTextAlign.ktalCenter; break;  				case 4: newAlignment = FwTextAlign.ktalRight; break;  				case 5: newAlignment = FwTextAlign.ktalTrailing; break;  				case 6: newAlignment = FwTextAlign.ktalJustify; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboSpecialIndentation.AdjustedSelectedIndex)  			{  				case 2: newValue = m_nudIndentBy.MeasureValue; break;  				case 3: newValue = -m_nudIndentBy.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboSpecialIndentation.AdjustedSelectedIndex)  			{  				case 2: newValue = m_nudIndentBy.MeasureValue; break;  				case 3: newValue = -m_nudIndentBy.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: newLineHeight.m_relative = (index <= 3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (index)  			{  				case 1:  // single spacing  					newLineHeight.m_lineHeight = 10000; break;  				case 2: // 1.5 spacing  					newLineHeight.m_lineHeight = 15000; break;  				case 3: // double spacing  					newLineHeight.m_lineHeight = 20000; break;  				case kAtLeastIndex: // at least  					newLineHeight.m_lineHeight = m_nudSpacingAt.MeasureValue; break;  				case kExactlyIndex: // exactly  					newLineHeight.m_lineHeight = -m_nudSpacingAt.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (index)  			{  				case 1:  // single spacing  					newLineHeight.m_lineHeight = 10000; break;  				case 2: // 1.5 spacing  					newLineHeight.m_lineHeight = 15000; break;  				case 3: // double spacing  					newLineHeight.m_lineHeight = 20000; break;  				case kAtLeastIndex: // at least  					newLineHeight.m_lineHeight = m_nudSpacingAt.MeasureValue; break;  				case kExactlyIndex: // exactly  					newLineHeight.m_lineHeight = -m_nudSpacingAt.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (index)  			{  				case 1:  // single spacing  					newLineHeight.m_lineHeight = 10000; break;  				case 2: // 1.5 spacing  					newLineHeight.m_lineHeight = 15000; break;  				case 3: // double spacing  					newLineHeight.m_lineHeight = 20000; break;  				case kAtLeastIndex: // at least  					newLineHeight.m_lineHeight = m_nudSpacingAt.MeasureValue; break;  				case kExactlyIndex: // exactly  					newLineHeight.m_lineHeight = -m_nudSpacingAt.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (index)  			{  				case 1:  // single spacing  					newLineHeight.m_lineHeight = 10000; break;  				case 2: // 1.5 spacing  					newLineHeight.m_lineHeight = 15000; break;  				case 3: // double spacing  					newLineHeight.m_lineHeight = 20000; break;  				case kAtLeastIndex: // at least  					newLineHeight.m_lineHeight = m_nudSpacingAt.MeasureValue; break;  				case kExactlyIndex: // exactly  					newLineHeight.m_lineHeight = -m_nudSpacingAt.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (index)  			{  				case 1:  // single spacing  					newLineHeight.m_lineHeight = 10000; break;  				case 2: // 1.5 spacing  					newLineHeight.m_lineHeight = 15000; break;  				case 3: // double spacing  					newLineHeight.m_lineHeight = 20000; break;  				case kAtLeastIndex: // at least  					newLineHeight.m_lineHeight = m_nudSpacingAt.MeasureValue; break;  				case kExactlyIndex: // exactly  					newLineHeight.m_lineHeight = -m_nudSpacingAt.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawAdjacentPreview,The following statement contains a magic number: lineRect.X += 10;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawAdjacentPreview,The following statement contains a magic number: lineRect.Width -= 10;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: i == 2
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: switch (m_cboLineSpacing.AdjustedSelectedIndex)  				{  					case 0: // unspecified  						Debug.Fail("Unspecified should never be selected.");  						break;    					case 1: // single  						break;    					case 2: // 1.5  						bottomSpace += (kLineSpacing / 2);  						break;    					case 3: // double  						bottomSpace += kLineSpacing;  						break;    					case kAtLeastIndex: // at least  					case kExactlyIndex: // exactly  						// only adjust for this at values above 12pt.  						int spaceAt = (m_nudSpacingAt.MeasureValue - 12000) / kmptPerPixel;  						if (spaceAt > 0)  							bottomSpace += spaceAt;  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: switch (m_cboLineSpacing.AdjustedSelectedIndex)  				{  					case 0: // unspecified  						Debug.Fail("Unspecified should never be selected.");  						break;    					case 1: // single  						break;    					case 2: // 1.5  						bottomSpace += (kLineSpacing / 2);  						break;    					case 3: // double  						bottomSpace += kLineSpacing;  						break;    					case kAtLeastIndex: // at least  					case kExactlyIndex: // exactly  						// only adjust for this at values above 12pt.  						int spaceAt = (m_nudSpacingAt.MeasureValue - 12000) / kmptPerPixel;  						if (spaceAt > 0)  							bottomSpace += spaceAt;  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: switch (m_cboLineSpacing.AdjustedSelectedIndex)  				{  					case 0: // unspecified  						Debug.Fail("Unspecified should never be selected.");  						break;    					case 1: // single  						break;    					case 2: // 1.5  						bottomSpace += (kLineSpacing / 2);  						break;    					case 3: // double  						bottomSpace += kLineSpacing;  						break;    					case kAtLeastIndex: // at least  					case kExactlyIndex: // exactly  						// only adjust for this at values above 12pt.  						int spaceAt = (m_nudSpacingAt.MeasureValue - 12000) / kmptPerPixel;  						if (spaceAt > 0)  							bottomSpace += spaceAt;  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: switch (m_cboLineSpacing.AdjustedSelectedIndex)  				{  					case 0: // unspecified  						Debug.Fail("Unspecified should never be selected.");  						break;    					case 1: // single  						break;    					case 2: // 1.5  						bottomSpace += (kLineSpacing / 2);  						break;    					case 3: // double  						bottomSpace += kLineSpacing;  						break;    					case kAtLeastIndex: // at least  					case kExactlyIndex: // exactly  						// only adjust for this at values above 12pt.  						int spaceAt = (m_nudSpacingAt.MeasureValue - 12000) / kmptPerPixel;  						if (spaceAt > 0)  							bottomSpace += spaceAt;  						break;  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: Rectangle lineBackground = new Rectangle(  					drawRect.X + leftIndent' drawRect.Y' drawRect.Width - leftIndent - rightIndent'  					(lineRect.Bottom - drawRect.Y) + + bottomSpace + ((i < 2) ? kLineSpacing : 0));
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: i < 3
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,CalculateFirstLineRect,The following statement contains a magic number: m_cboSpecialIndentation.AdjustedSelectedIndex == 2
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,CalculateFirstLineRect,The following statement contains a magic number: AdjustLineForFudge(ref lineRect' 24);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,CalculateFollowingLineRect,The following statement contains a magic number: m_cboSpecialIndentation.AdjustedSelectedIndex == 3
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,CalculateFollowingLineRect,The following statement contains a magic number: AdjustLineForFudge(ref lineRect' 36);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,CalculateFollowingLineRect,The following statement contains a magic number: lineNumber == 2
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudIndentBy.MeasureMax = 216000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudRightIndentation.MeasureMax = 216000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudLeftIndentation.MeasureMax = 216000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudSpacingAt.MeasureMax = 50000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudAfter.MeasureIncrementFactor = ((uint)(6u));
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudAfter.MeasureMax = 50000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudBefore.MeasureIncrementFactor = ((uint)(6u));
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudBefore.MeasureMax = 50000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,OverflowContextMenuStrip,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\LocaleMenuButton.cs,CalculateOverflow,The following statement contains a magic number: overflowIndex < totalItems - 2
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleComboListHelper,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\StyleComboListHelper.cs,StyleComboListHelper,The following statement contains a magic number: comboBox.MaxDropDownItems = 30;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleComboListHelper,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\StyleComboListHelper.cs,CtrlDrawItem,The following statement contains a magic number: rc.X += 2;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleComboListHelper,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\StyleComboListHelper.cs,CtrlDrawItem,The following statement contains a magic number: e.Graphics.DrawImage(icon' rc.Left' rc.Top + (rc.Height - icon.Height) / 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleListBoxHelper,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\StyleListBoxHelper.cs,CtrlDrawItem,The following statement contains a magic number: rc.X += 2;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleListBoxHelper,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\StyleListBoxHelper.cs,CtrlDrawItem,The following statement contains a magic number: rc.Width -= 2;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleListBoxHelper,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\StyleListBoxHelper.cs,CtrlDrawItem,The following statement contains a magic number: e.Graphics.DrawImage(icon' rc.Left' rc.Top + (rc.Height - icon.Height) / 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,UpDownMeasureControl,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\UpDownMeasureControl.cs,NudgeValue,The following statement contains a magic number: double incrUnits = Math.Round(m_mptValue / MeasureIncrement' 5);
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,AppendUnderline,The following switch statement is missing a default case: switch (fontInfo.m_underline.Value)  					{  						case FwUnderlineType.kuntNone:  							sUnder = String.Format(FwCoreDlgControls.ksNoColorUnderline' sColor);  							break;  						case FwUnderlineType.kuntSingle:  							sUnder = String.Format(FwCoreDlgControls.ksSingleColorUnderline' sColor);  							break;  						case FwUnderlineType.kuntDouble:  							sUnder = String.Format(FwCoreDlgControls.ksDoubleColorUnderline' sColor);  							break;  						case FwUnderlineType.kuntDotted:  							sUnder = String.Format(FwCoreDlgControls.ksDottedColorUnderline' sColor);  							break;  						case FwUnderlineType.kuntDashed:  							sUnder = String.Format(FwCoreDlgControls.ksDashedColorUnderline' sColor);  							break;  						case FwUnderlineType.kuntStrikethrough:  							sUnder = String.Format(FwCoreDlgControls.ksColorStrikethrough' sColor);  							break;  					}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,AppendUnderline,The following switch statement is missing a default case: switch (fontInfo.m_underline.Value)  				{  					case FwUnderlineType.kuntNone:  						sUnder = FwCoreDlgControls.ksNoUnderline;  						break;  					case FwUnderlineType.kuntSingle:  						sUnder = FwCoreDlgControls.ksSingleUnderline;  						break;  					case FwUnderlineType.kuntDouble:  						sUnder = FwCoreDlgControls.ksDoubleUnderline;  						break;  					case FwUnderlineType.kuntDotted:  						sUnder = FwCoreDlgControls.ksDottedUnderline;  						break;  					case FwUnderlineType.kuntDashed:  						sUnder = FwCoreDlgControls.ksDashedUnderline;  						break;  					case FwUnderlineType.kuntStrikethrough:  						sUnder = FwCoreDlgControls.ksStrikethrough;  						break;  				}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,AppendSuperSub,The following switch statement is missing a default case: switch (value)  			{  				case FwSuperscriptVal.kssvOff:  					AppendToString(text' FwCoreDlgControls.ksNoSuperSubscript);  					break;  				case FwSuperscriptVal.kssvSub:  					AppendToString(text' FwCoreDlgControls.ksSubscript);  					break;  				case FwSuperscriptVal.kssvSuper:  					AppendToString(text' FwCoreDlgControls.ksSuperscript);  					break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboFontPosition_SelectedIndexChanged,The following switch statement is missing a default case: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 0: // Unspecified  					m_nudPositionAmount.MeasureValue = 0;  					m_nudPositionAmount.Text = string.Empty;  					break;  				case 1: // Normal  					m_nudPositionAmount.MeasureValue = 0;  					break;  				case 2: // Raised  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = 3000;  					else if (m_nudPositionAmount.MeasureValue < 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  				case 3: // Lowered  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = -3000;  					else if (m_nudPositionAmount.MeasureValue > 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following switch statement is missing a default case: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetFontPosition,The following switch statement is missing a default case: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 2: fontPos = m_nudPositionAmount.MeasureValue; break;  				case 3: fontPos = m_nudPositionAmount.MeasureValue; break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,CheckSuperSubBoxes,The following switch statement is missing a default case: switch (fontInfo.m_superSub.Value)  				{  					case FwSuperscriptVal.kssvOff:  						m_chkSubscript.CheckState = CheckState.Unchecked;  						m_chkSuperscript.CheckState = CheckState.Unchecked;  						break;    					case FwSuperscriptVal.kssvSub:  						m_chkSubscript.CheckState = CheckState.Checked;  						m_chkSuperscript.CheckState = CheckState.Unchecked;  						break;    					case FwSuperscriptVal.kssvSuper:  						m_chkSubscript.CheckState = CheckState.Unchecked;  						m_chkSuperscript.CheckState = CheckState.Checked;  						break;  				}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendParagraphInfo,The following switch statement is missing a default case: switch (info.m_lineHeight)  					{  						case 10000: AppendItem(text' FwCoreDlgControls.ksSingleSpacing); break;  						case 15000: AppendItem(text' FwCoreDlgControls.ksPlusSpacing); break;  						case 20000: AppendItem(text' FwCoreDlgControls.ksDoubleSpacing); break;  					}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendRtl,The following switch statement is missing a default case: switch (m_rtl.Value)  			{  				case TriStateBool.triTrue:  					AppendItem(text' FwCoreDlgControls.ksRightToLeft); break;  				case TriStateBool.triFalse:  					AppendItem(text' FwCoreDlgControls.ksLeftToRight); break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendAlignment,The following switch statement is missing a default case: switch (m_alignment.Value)  			{  				case FwTextAlign.ktalCenter:  					AppendItem(text' FwCoreDlgControls.ksCenter);  					break;  				case FwTextAlign.ktalJustify:  					AppendItem(text' FwCoreDlgControls.ksJustify);  					break;  				case FwTextAlign.ktalLeading:  					AppendItem(text' FwCoreDlgControls.ksLeading);  					break;  				case FwTextAlign.ktalLeft:  					AppendItem(text' FwCoreDlgControls.ksLeft);  					break;  				case FwTextAlign.ktalRight:  					AppendItem(text' FwCoreDlgControls.ksRight);  					break;  				case FwTextAlign.ktalTrailing:  					AppendItem(text' FwCoreDlgControls.ksTrailing);  					break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,OnClick,The following switch statement is missing a default case: switch (valueLabelT.ToLowerInvariant())  					{  						case "true":  						case "yes":  						case "on":  						case "":  						{  							switch (valueLabelF.ToLowerInvariant())  							{  								case "false":  								case "no":  								case "off":  								case "":  									fBinary = true;  									break;  							}  						}  							break;  					}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,OnClick,The following switch statement is missing a default case: switch (valueLabelF.ToLowerInvariant())  							{  								case "false":  								case "no":  								case "off":  								case "":  									fBinary = true;  									break;  							}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,UpdateBulletInfo,The following switch statement is missing a default case: switch (m_cboNumberScheme.SelectedIndex)  				{  					case 0: bulInfo.m_numberScheme = VwBulNum.kvbnArabic; break;  					case 1: bulInfo.m_numberScheme = VwBulNum.kvbnRomanUpper; break;  					case 2: bulInfo.m_numberScheme = VwBulNum.kvbnRomanLower; break;  					case 3: bulInfo.m_numberScheme = VwBulNum.kvbnLetterUpper; break;  					case 4: bulInfo.m_numberScheme = VwBulNum.kvbnLetterLower; break;  					case 5: bulInfo.m_numberScheme = VwBulNum.kvbnArabic01; break;  				}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,m_cboNumberScheme_SelectedIndexChanged,The following switch statement is missing a default case: switch (m_cboNumberScheme.SelectedIndex)  			{  				case 0:		// 1' 2' 3'  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;    				case 1:		// I' II' III (Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.Roman;  					break;    				case 2:		// i' ii' iii (lower case Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.RomanLowerCase;  					break;    				case 3:		// A' B' C  					m_nudStartAt.Mode = DataUpDownMode.Letters;  					break;    				case 4:		// a' b' c  					m_nudStartAt.Mode = DataUpDownMode.LettersLowerCase;  					break;    				case 5:		// 01' 02' 03  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following switch statement is missing a default case: switch (styleInfo.IAlignment.Value)  			{  				case FwTextAlign.ktalLeading: m_cboAlignment.AdjustedSelectedIndex = 1; break;  				case FwTextAlign.ktalLeft: m_cboAlignment.AdjustedSelectedIndex = 2; break;  				case FwTextAlign.ktalCenter: m_cboAlignment.AdjustedSelectedIndex = 3; break;  				case FwTextAlign.ktalRight: m_cboAlignment.AdjustedSelectedIndex = 4; break;  				case FwTextAlign.ktalTrailing: m_cboAlignment.AdjustedSelectedIndex = 5; break;  				case FwTextAlign.ktalJustify: m_cboAlignment.AdjustedSelectedIndex = 6; break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following switch statement is missing a default case: switch(info.m_lineHeight)  				{  					case 10000:	// single spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 1;  						break;  					case 15000:	// 1.5 line spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 2;  						break;  					case 20000:	// double spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 3;  						break;  				}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following switch statement is missing a default case: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 1: newAlignment = FwTextAlign.ktalLeading; break;  				case 2: newAlignment = FwTextAlign.ktalLeft; break;  				case 3: newAlignment = FwTextAlign.ktalCenter; break;  				case 4: newAlignment = FwTextAlign.ktalRight; break;  				case 5: newAlignment = FwTextAlign.ktalTrailing; break;  				case 6: newAlignment = FwTextAlign.ktalJustify; break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following switch statement is missing a default case: switch (m_cboSpecialIndentation.AdjustedSelectedIndex)  			{  				case 2: newValue = m_nudIndentBy.MeasureValue; break;  				case 3: newValue = -m_nudIndentBy.MeasureValue; break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following switch statement is missing a default case: switch (index)  			{  				case 1:  // single spacing  					newLineHeight.m_lineHeight = 10000; break;  				case 2: // 1.5 spacing  					newLineHeight.m_lineHeight = 15000; break;  				case 3: // double spacing  					newLineHeight.m_lineHeight = 20000; break;  				case kAtLeastIndex: // at least  					newLineHeight.m_lineHeight = m_nudSpacingAt.MeasureValue; break;  				case kExactlyIndex: // exactly  					newLineHeight.m_lineHeight = -m_nudSpacingAt.MeasureValue; break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following switch statement is missing a default case: switch (m_cboLineSpacing.AdjustedSelectedIndex)  				{  					case 0: // unspecified  						Debug.Fail("Unspecified should never be selected.");  						break;    					case 1: // single  						break;    					case 2: // 1.5  						bottomSpace += (kLineSpacing / 2);  						break;    					case 3: // double  						bottomSpace += kLineSpacing;  						break;    					case kAtLeastIndex: // at least  					case kExactlyIndex: // exactly  						// only adjust for this at values above 12pt.  						int spaceAt = (m_nudSpacingAt.MeasureValue - 12000) / kmptPerPixel;  						if (spaceAt > 0)  							bottomSpace += spaceAt;  						break;  				}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following switch statement is missing a default case: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
