Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.FwCoreDlgControls,ConfigSenseLayout,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigSenseLayout.cs,InitializeComponent,The method has 140 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,InitializeComponent,The method has 200 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,InitializeComponent,The method has 135 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FwGeneralTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwGeneralTab.cs,InitializeComponent,The method has 126 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,SaveToDB,The method has 181 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,OnClick,The method has 124 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,InitializeComponent,The method has 157 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,InitializeComponent,The method has 253 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The method has 310 lines of code.
Long Method,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,InitializeComponent,The method has 134 lines of code.
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,SaveToInfo,Cyclomatic complexity of the method is 13
Complex Method,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendParagraphInfo,Cyclomatic complexity of the method is 12
Complex Method,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,SaveToDB,Cyclomatic complexity of the method is 27
Complex Method,SIL.FieldWorks.FwCoreDlgControls,BaseStyleListHelper,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\BaseStyleListHelper.cs,Dispose,Cyclomatic complexity of the method is 17
Complex Method,SIL.FieldWorks.FwCoreDlgControls,BaseStyleListHelper,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\BaseStyleListHelper.cs,OkToAddItem,Cyclomatic complexity of the method is 12
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseFeatureString,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,OnClick,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,ValueChanged,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,Cyclomatic complexity of the method is 15
Complex Method,SIL.FieldWorks.FwCoreDlgControls,LocaleMenuButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\LocaleMenuButton.cs,OnClick,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,CheckValid,Cyclomatic complexity of the method is 20
Long Parameter List,SIL.FieldWorks.FwCoreDlgControls,IFontDialog,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\IFontDialog.cs,Initialize,The method has 6 parameters. Parameters: fontInfo' fAllowSubscript' ws' wsf' styleSheet' fAlwaysDisableFontFeatures
Long Identifier,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,,The length of the parameter m_fIgnoreWsSelectedIndexChange is 30.
Long Identifier,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,,The length of the parameter dyxGapBetweenLeftCheckboxAndPreviewPane is 39.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,ConfigParentNode,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigParentNode.cs,SetDetails,The length of the statement  "					new Point(m_lblMoreDetail.Location.X' m_lblMoreDetail.Location.Y + m_lblMoreDetail.Height + m_lblMoreDetail.Padding.Bottom + 1) : " is 129.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,ConfigParentNode,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigParentNode.cs,SetDetails,The length of the statement  "					new Point(m_tbMoreDetail.Location.X' m_tbMoreDetail.Location.Y + m_tbMoreDetail.Height + m_tbMoreDetail.Padding.Bottom + 1); " is 124.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,ConfigParentNode,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigParentNode.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ConfigParentNode)); " is 136.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,ConfigParentNode,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigParentNode.cs,InitializeComponent,The length of the statement  "			this.m_lnkConfigureNow.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.m_lnkConfigureNow_LinkClicked); " is 132.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,ConfigSenseLayout,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigSenseLayout.cs,m_tb_TextChanged,The length of the statement  "				MessageBox.Show(FwCoreDlgControls.ksIllegalXmlChars' FwCoreDlgControls.ksWarning' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 128.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,ConfigSenseLayout,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigSenseLayout.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ConfigSenseLayout)); " is 137.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwFontAttributes)); " is 136.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,InitializeComponent,The length of the statement  "			this.m_cboUnderlineStyle.DrawItemForeground += new System.Windows.Forms.DrawItemEventHandler(this.m_cboUnderlineStyle_DrawItemForeground); " is 138.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwFontTab)); " is 129.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,InitializeComponent,The length of the statement  "			this.m_lstWritingSystems.SelectedIndexChanged += new System.EventHandler(this.m_lstWritingSystems_SelectedIndexChanged); " is 120.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwGeneralTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwGeneralTab.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwGeneralTab)); " is 132.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,DefaultFontsControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\DefaultFontsControl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DefaultFontsControl)); " is 139.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,DefaultFontsControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\DefaultFontsControl.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetShowHelp(this.m_defaultFontComboBox' ((bool)(resources.GetObject("m_defaultFontComboBox.ShowHelp")))); " is 125.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,DefaultFontsControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\DefaultFontsControl.cs,InitializeComponent,The length of the statement  "			this.m_defaultFontComboBox.SelectedIndexChanged += new System.EventHandler(this.m_defaultFontComboBox_SelectedIndexChanged); " is 124.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,DefaultFontsControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\DefaultFontsControl.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetHelpString(this.m_defaultFontFeaturesButton' resources.GetString("m_defaultFontFeaturesButton.HelpString")); " is 131.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,DefaultFontsControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\DefaultFontsControl.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetShowHelp(this.m_defaultFontFeaturesButton' ((bool)(resources.GetObject("m_defaultFontFeaturesButton.ShowHelp")))); " is 137.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,DefaultFontsControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\DefaultFontsControl.cs,InitializeComponent,The length of the statement  "			this.m_defaultFontFeaturesButton.FontFeatureSelected += new System.EventHandler(this.m_defaultFontFeaturesButton_FontFeatureSelected); " is 134.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,SaveToInfo,The length of the statement  "				Debug.Assert(false' "Somehow' the Border tab has been asked to write its data to a character-based style [" + styleInfo.Name + "]."); " is 133.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwBorderTab)); " is 131.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,InitializeComponent,The length of the statement  "			this.m_cboWidth.DrawItemBackground += new System.Windows.Forms.DrawItemEventHandler(this.m_cboWidth_DrawItemBackground); " is 120.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,InitializeComponent,The length of the statement  "			this.m_cboWidth.DrawItemForeground += new System.Windows.Forms.DrawItemEventHandler(this.m_cboWidth_DrawItemForeground); " is 120.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,SaveToInfo,The length of the statement  "				Debug.Assert(false' "Somehow' the Bullets tab has been asked to write its data to a character-based style [" + styleInfo.Name + "]."); " is 134.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwBulletsTab)); " is 132.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The length of the statement  "				Debug.Assert(false' "Somehow' the Paragraph tab has been asked to write its data to a character-based style [" + styleInfo.Name + "]."); " is 136.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FwParagraphTab)); " is 134.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RegionVariantControl)); " is 140.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetShowHelp(this.m_regionAbbrevLabel' ((bool)(resources.GetObject("m_regionAbbrevLabel.ShowHelp")))); " is 121.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetShowHelp(this.m_variantAbbrevLabel' ((bool)(resources.GetObject("m_variantAbbrevLabel.ShowHelp")))); " is 123.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetShowHelp(this.m_scriptAbbrevLabel' ((bool)(resources.GetObject("m_scriptAbbrevLabel.ShowHelp")))); " is 121.
Long Statement,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,m_variantName_TextChanged,The length of the statement  "				m_variantAbbrev.Enabled = variantSubtag.IsPrivateUse && !StandardSubtags.CommonPrivateUseVariants.Contains(variantSubtag); " is 122.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,m_cboFontNames_SelectedIndexChanged,The conditional expression  "(m_cboFontNames.SelectedIndex == 0 && inheritedFontInfo.m_fontName.IsInherited) ||  				(inheritedFontInfo.m_fontName.ValueIsSet &&  				(m_cboFontNames.Text == inheritedFontInfo.m_fontName.Value ||  				inheritedFontInfo.m_features.ValueIsSet && inheritedFontInfo.m_features.Value == null))"  is complex.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,BaseStyleListHelper,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\BaseStyleListHelper.cs,OkToAddItem,The conditional expression  "!m_unionIncludeAndTypeFilter && m_includedContexts != null &&  				m_includedContexts.Count > 0 && !m_includedContexts.Contains(item.Context)"  is complex.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,BaseStyleListHelper,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\BaseStyleListHelper.cs,OkToAddItem,The conditional expression  "m_unionIncludeAndTypeFilter && m_includedContexts != null &&  				m_includedContexts.Count > 0 && m_includedContexts.Contains(item.Context)"  is complex.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,OnClick,The conditional expression  "cValueIds == 2 &&  					(valueIds[0] == 0 || valueIds[1] == 0) &&  					valueIds[0] + valueIds[1] == 1"  is complex.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawBorders,The conditional expression  "(fLeadingBorderOn && !DefaultTextDirectionRtoL) ||  						(fTrailingBorderOn && DefaultTextDirectionRtoL)"  is complex.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawBorders,The conditional expression  "(fLeadingBorderOn && DefaultTextDirectionRtoL) ||  						(fTrailingBorderOn && !DefaultTextDirectionRtoL)"  is complex.
Complex Conditional,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,HandleKeyPress,The conditional expression  "e.KeyChar != (int)Keys.Back && e.KeyChar != (int)Keys.Return && e.KeyChar != (int)Keys.Delete  				&& !IsValidAbbrChar(e.KeyChar)"  is complex.
Magic Number,SIL.FieldWorks.FwCoreDlgControls,BlueCircleButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\BlueCircleButton.cs,BlueCircleButton,The following statement contains a magic number: Height = m_blueCircle.Height + 3;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,BlueCircleButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\BlueCircleButton.cs,BlueCircleButton,The following statement contains a magic number: Width = m_blueCircle.Width + 3;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,ConfigSenseLayout,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\ConfigSenseLayout.cs,From96dpiY,The following statement contains a magic number: using (var g = CreateGraphics())  			{  				return (int)Math.Round(input * g.DpiY / 96.0);  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,ToString,The following statement contains a magic number: if (fontInfo.m_fontSize.IsExplicit || fForceMinimumDescription)  				AppendToString(text' string.Format(FwCoreDlgControls.ksXPt' fontInfo.m_fontSize.Value / 1000));
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,AppendFontOffset,The following statement contains a magic number: if (value > 0)  				AppendToString(text' string.Format(FwCoreDlgControls.ksRaisedXpt' value / 1000));  			else if (value < 0)  				AppendToString(text' string.Format(FwCoreDlgControls.ksLoweredXpt' -value / 1000));  			else  				AppendToString(text' FwCoreDlgControls.ksNotRaisedLowered);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,AppendFontOffset,The following statement contains a magic number: if (value > 0)  				AppendToString(text' string.Format(FwCoreDlgControls.ksRaisedXpt' value / 1000));  			else if (value < 0)  				AppendToString(text' string.Format(FwCoreDlgControls.ksLoweredXpt' -value / 1000));  			else  				AppendToString(text' FwCoreDlgControls.ksNotRaisedLowered);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,BulletsPreview,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsPreview.cs,GetAvailWidth,The following statement contains a magic number: return ClientRectangle.Width - (HorizMargin * 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,BulletsPreviewVc,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsPreview.cs,Display,The following statement contains a magic number: vwenv.set_IntProperty((int)FwTextPropType.ktptSpaceBefore'  				(int)FwTextPropVar.ktpvMilliPoint' 10000);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,BulletsPreviewVc,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsPreview.cs,AddPreviewPara,The following statement contains a magic number: if (props != null)  				vwenv.Props = props;  			else if (fAddSpaceBefore)  			{  				vwenv.set_IntProperty((int)FwTextPropType.ktptSpaceBefore'  					(int)FwTextPropVar.ktpvMilliPoint' 6000);  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboFontPosition_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 0: // Unspecified  					m_nudPositionAmount.MeasureValue = 0;  					m_nudPositionAmount.Text = string.Empty;  					break;  				case 1: // Normal  					m_nudPositionAmount.MeasureValue = 0;  					break;  				case 2: // Raised  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = 3000;  					else if (m_nudPositionAmount.MeasureValue < 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  				case 3: // Lowered  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = -3000;  					else if (m_nudPositionAmount.MeasureValue > 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboFontPosition_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 0: // Unspecified  					m_nudPositionAmount.MeasureValue = 0;  					m_nudPositionAmount.Text = string.Empty;  					break;  				case 1: // Normal  					m_nudPositionAmount.MeasureValue = 0;  					break;  				case 2: // Raised  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = 3000;  					else if (m_nudPositionAmount.MeasureValue < 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  				case 3: // Lowered  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = -3000;  					else if (m_nudPositionAmount.MeasureValue > 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboFontPosition_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 0: // Unspecified  					m_nudPositionAmount.MeasureValue = 0;  					m_nudPositionAmount.Text = string.Empty;  					break;  				case 1: // Normal  					m_nudPositionAmount.MeasureValue = 0;  					break;  				case 2: // Raised  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = 3000;  					else if (m_nudPositionAmount.MeasureValue < 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  				case 3: // Lowered  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = -3000;  					else if (m_nudPositionAmount.MeasureValue > 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboFontPosition_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 0: // Unspecified  					m_nudPositionAmount.MeasureValue = 0;  					m_nudPositionAmount.Text = string.Empty;  					break;  				case 1: // Normal  					m_nudPositionAmount.MeasureValue = 0;  					break;  				case 2: // Raised  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = 3000;  					else if (m_nudPositionAmount.MeasureValue < 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  				case 3: // Lowered  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = -3000;  					else if (m_nudPositionAmount.MeasureValue > 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,SetPositionCombo,The following statement contains a magic number: if (m_nudPositionAmount.MeasureValue == 0) // Normal  				m_cboFontPosition.AdjustedSelectedIndex = 1;  			else if (m_nudPositionAmount.MeasureValue > 0) // Raised  				m_cboFontPosition.AdjustedSelectedIndex = 2;  			else if (m_nudPositionAmount.MeasureValue < 0) // Lowered  				m_cboFontPosition.AdjustedSelectedIndex = 3;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,SetPositionCombo,The following statement contains a magic number: if (m_nudPositionAmount.MeasureValue == 0) // Normal  				m_cboFontPosition.AdjustedSelectedIndex = 1;  			else if (m_nudPositionAmount.MeasureValue > 0) // Raised  				m_cboFontPosition.AdjustedSelectedIndex = 2;  			else if (m_nudPositionAmount.MeasureValue < 0) // Lowered  				m_cboFontPosition.AdjustedSelectedIndex = 3;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following statement contains a magic number: using (Pen pen = new Pen(e.ForeColor))  			{  				const int lineMargin = 1;  				switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetUnderlineType,The following statement contains a magic number: if (!fIsInherited)  			{  				switch (m_cboUnderlineStyle.AdjustedSelectedIndex)  				{  					case 1: underlineType = FwUnderlineType.kuntNone; break;  					case 2: underlineType = FwUnderlineType.kuntSingle; break;  					case 3: underlineType = FwUnderlineType.kuntDouble; break;  					case 4: underlineType = FwUnderlineType.kuntDotted; break;  					case 5: underlineType = FwUnderlineType.kuntDashed; break;  					case 6: underlineType = FwUnderlineType.kuntStrikethrough; break;  					case -1: break; // nothing selected  					default:  						Debug.Assert(false' "Unknown underline style");  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetUnderlineType,The following statement contains a magic number: if (!fIsInherited)  			{  				switch (m_cboUnderlineStyle.AdjustedSelectedIndex)  				{  					case 1: underlineType = FwUnderlineType.kuntNone; break;  					case 2: underlineType = FwUnderlineType.kuntSingle; break;  					case 3: underlineType = FwUnderlineType.kuntDouble; break;  					case 4: underlineType = FwUnderlineType.kuntDotted; break;  					case 5: underlineType = FwUnderlineType.kuntDashed; break;  					case 6: underlineType = FwUnderlineType.kuntStrikethrough; break;  					case -1: break; // nothing selected  					default:  						Debug.Assert(false' "Unknown underline style");  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetUnderlineType,The following statement contains a magic number: if (!fIsInherited)  			{  				switch (m_cboUnderlineStyle.AdjustedSelectedIndex)  				{  					case 1: underlineType = FwUnderlineType.kuntNone; break;  					case 2: underlineType = FwUnderlineType.kuntSingle; break;  					case 3: underlineType = FwUnderlineType.kuntDouble; break;  					case 4: underlineType = FwUnderlineType.kuntDotted; break;  					case 5: underlineType = FwUnderlineType.kuntDashed; break;  					case 6: underlineType = FwUnderlineType.kuntStrikethrough; break;  					case -1: break; // nothing selected  					default:  						Debug.Assert(false' "Unknown underline style");  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetUnderlineType,The following statement contains a magic number: if (!fIsInherited)  			{  				switch (m_cboUnderlineStyle.AdjustedSelectedIndex)  				{  					case 1: underlineType = FwUnderlineType.kuntNone; break;  					case 2: underlineType = FwUnderlineType.kuntSingle; break;  					case 3: underlineType = FwUnderlineType.kuntDouble; break;  					case 4: underlineType = FwUnderlineType.kuntDotted; break;  					case 5: underlineType = FwUnderlineType.kuntDashed; break;  					case 6: underlineType = FwUnderlineType.kuntStrikethrough; break;  					case -1: break; // nothing selected  					default:  						Debug.Assert(false' "Unknown underline style");  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetUnderlineType,The following statement contains a magic number: if (!fIsInherited)  			{  				switch (m_cboUnderlineStyle.AdjustedSelectedIndex)  				{  					case 1: underlineType = FwUnderlineType.kuntNone; break;  					case 2: underlineType = FwUnderlineType.kuntSingle; break;  					case 3: underlineType = FwUnderlineType.kuntDouble; break;  					case 4: underlineType = FwUnderlineType.kuntDotted; break;  					case 5: underlineType = FwUnderlineType.kuntDashed; break;  					case 6: underlineType = FwUnderlineType.kuntStrikethrough; break;  					case -1: break; // nothing selected  					default:  						Debug.Assert(false' "Unknown underline style");  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetFontPosition,The following statement contains a magic number: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 2: fontPos = m_nudPositionAmount.MeasureValue; break;  				case 3: fontPos = m_nudPositionAmount.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetFontPosition,The following statement contains a magic number: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 2: fontPos = m_nudPositionAmount.MeasureValue; break;  				case 3: fontPos = m_nudPositionAmount.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,UpdateForStyle,The following statement contains a magic number: if (!m_cboUnderlineStyle.SetInheritableProp(fontInfo.m_underline))  			{  				switch (fontInfo.m_underline.Value)  				{  					case FwUnderlineType.kuntNone:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 1; break;  					case FwUnderlineType.kuntSingle:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 2; break;  					case FwUnderlineType.kuntDouble:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 3; break;  					case FwUnderlineType.kuntDotted:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 4; break;  					case FwUnderlineType.kuntDashed:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 5; break;  					case FwUnderlineType.kuntStrikethrough:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 6; break;  					default:  						Debug.Assert(false' "Unknown underline type");  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,UpdateForStyle,The following statement contains a magic number: if (!m_cboUnderlineStyle.SetInheritableProp(fontInfo.m_underline))  			{  				switch (fontInfo.m_underline.Value)  				{  					case FwUnderlineType.kuntNone:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 1; break;  					case FwUnderlineType.kuntSingle:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 2; break;  					case FwUnderlineType.kuntDouble:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 3; break;  					case FwUnderlineType.kuntDotted:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 4; break;  					case FwUnderlineType.kuntDashed:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 5; break;  					case FwUnderlineType.kuntStrikethrough:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 6; break;  					default:  						Debug.Assert(false' "Unknown underline type");  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,UpdateForStyle,The following statement contains a magic number: if (!m_cboUnderlineStyle.SetInheritableProp(fontInfo.m_underline))  			{  				switch (fontInfo.m_underline.Value)  				{  					case FwUnderlineType.kuntNone:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 1; break;  					case FwUnderlineType.kuntSingle:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 2; break;  					case FwUnderlineType.kuntDouble:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 3; break;  					case FwUnderlineType.kuntDotted:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 4; break;  					case FwUnderlineType.kuntDashed:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 5; break;  					case FwUnderlineType.kuntStrikethrough:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 6; break;  					default:  						Debug.Assert(false' "Unknown underline type");  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,UpdateForStyle,The following statement contains a magic number: if (!m_cboUnderlineStyle.SetInheritableProp(fontInfo.m_underline))  			{  				switch (fontInfo.m_underline.Value)  				{  					case FwUnderlineType.kuntNone:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 1; break;  					case FwUnderlineType.kuntSingle:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 2; break;  					case FwUnderlineType.kuntDouble:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 3; break;  					case FwUnderlineType.kuntDotted:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 4; break;  					case FwUnderlineType.kuntDashed:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 5; break;  					case FwUnderlineType.kuntStrikethrough:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 6; break;  					default:  						Debug.Assert(false' "Unknown underline type");  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,UpdateForStyle,The following statement contains a magic number: if (!m_cboUnderlineStyle.SetInheritableProp(fontInfo.m_underline))  			{  				switch (fontInfo.m_underline.Value)  				{  					case FwUnderlineType.kuntNone:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 1; break;  					case FwUnderlineType.kuntSingle:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 2; break;  					case FwUnderlineType.kuntDouble:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 3; break;  					case FwUnderlineType.kuntDotted:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 4; break;  					case FwUnderlineType.kuntDashed:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 5; break;  					case FwUnderlineType.kuntStrikethrough:  						m_cboUnderlineStyle.AdjustedSelectedIndex = 6; break;  					default:  						Debug.Assert(false' "Unknown underline type");  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,InitializeComponent,The following statement contains a magic number: this.m_nudPositionAmount.MeasureMax = 100000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,InitializeComponent,The following statement contains a magic number: this.m_nudPositionAmount.MeasureMin = -100000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,m_cboFontSize_TextUpdate,The following statement contains a magic number: foreach (char ch in m_cboFontSize.Text)  			{  				// limit the text to 3 characters.  				if (correctedText.Length == 3)  				{  					change = true;  					break;  				}  				// make sure the text has all digits.  				if (Char.IsDigit(ch))  					correctedText.Append(ch);  				else  					change = true;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,UpdateForStyle,The following statement contains a magic number: if (!m_cboFontSize.SetInheritableProp(fontInfo.m_fontSize))  				m_cboFontSize.Text = (fontInfo.m_fontSize.Value / 1000).ToString();
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwFontTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontTab.cs,SaveToInfo,The following statement contains a magic number: if (fontInfo.m_fontSize.Save(newInherit' fontSize * 1000))  				styleInfo.Dirty = true;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AddBorderInfo,The following statement contains a magic number: string sWidth = ((double)width / 1000).ToString("0.##");
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendParagraphInfo,The following statement contains a magic number: if (m_lineSpacing.IsExplicit)  			{  				LineHeightInfo info = m_lineSpacing.Value;  				if (info.m_relative)  				{  					switch (info.m_lineHeight)  					{  						case 10000: AppendItem(text' FwCoreDlgControls.ksSingleSpacing); break;  						case 15000: AppendItem(text' FwCoreDlgControls.ksPlusSpacing); break;  						case 20000: AppendItem(text' FwCoreDlgControls.ksDoubleSpacing); break;  					}  				}  				else  				{  					if (info.m_lineHeight < 0)  						AppendMeasure(text' FwCoreDlgControls.ksExactSpacing' -info.m_lineHeight);  					else  						AppendMeasure(text' FwCoreDlgControls.ksAtLeastSpacing' info.m_lineHeight);  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendParagraphInfo,The following statement contains a magic number: if (m_lineSpacing.IsExplicit)  			{  				LineHeightInfo info = m_lineSpacing.Value;  				if (info.m_relative)  				{  					switch (info.m_lineHeight)  					{  						case 10000: AppendItem(text' FwCoreDlgControls.ksSingleSpacing); break;  						case 15000: AppendItem(text' FwCoreDlgControls.ksPlusSpacing); break;  						case 20000: AppendItem(text' FwCoreDlgControls.ksDoubleSpacing); break;  					}  				}  				else  				{  					if (info.m_lineHeight < 0)  						AppendMeasure(text' FwCoreDlgControls.ksExactSpacing' -info.m_lineHeight);  					else  						AppendMeasure(text' FwCoreDlgControls.ksAtLeastSpacing' info.m_lineHeight);  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendParagraphInfo,The following statement contains a magic number: if (m_lineSpacing.IsExplicit)  			{  				LineHeightInfo info = m_lineSpacing.Value;  				if (info.m_relative)  				{  					switch (info.m_lineHeight)  					{  						case 10000: AppendItem(text' FwCoreDlgControls.ksSingleSpacing); break;  						case 15000: AppendItem(text' FwCoreDlgControls.ksPlusSpacing); break;  						case 20000: AppendItem(text' FwCoreDlgControls.ksDoubleSpacing); break;  					}  				}  				else  				{  					if (info.m_lineHeight < 0)  						AppendMeasure(text' FwCoreDlgControls.ksExactSpacing' -info.m_lineHeight);  					else  						AppendMeasure(text' FwCoreDlgControls.ksAtLeastSpacing' info.m_lineHeight);  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendItem,The following statement contains a magic number: if (text.Length > 2 && text[text.Length - 2] != '+')  				text.Append(FwCoreDlgControls.kstidItemSeparator);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendItem,The following statement contains a magic number: if (text.Length > 2 && text[text.Length - 2] != '+')  				text.Append(FwCoreDlgControls.kstidItemSeparator);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseNextFid,The following statement contains a magic number: for (;  				ich < stFeatures.Length && stFeatures[ich] >= '0' && stFeatures[ich] <= '9';  				++ich)  			{  				fid = fid * 10 + (stFeatures[ich] - '0');  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseQuotedValue,The following statement contains a magic number: for (ib = 0' ich = ichMin + 1; ich < stFeatures.Length; ++ich' ++ib)  			{  				if (stFeatures[ich] == '"')  					break;  				if (ib < 4)  					bVals[ib] = (byte)stFeatures[ich];  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseQuotedValue,The following statement contains a magic number: return bVals[0] << 24 | bVals[1] << 16 | bVals[2] << 8 | bVals[3];
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseQuotedValue,The following statement contains a magic number: return bVals[0] << 24 | bVals[1] << 16 | bVals[2] << 8 | bVals[3];
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseQuotedValue,The following statement contains a magic number: return bVals[0] << 24 | bVals[1] << 16 | bVals[2] << 8 | bVals[3];
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseQuotedValue,The following statement contains a magic number: return bVals[0] << 24 | bVals[1] << 16 | bVals[2] << 8 | bVals[3];
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,ParseQuotedValue,The following statement contains a magic number: return bVals[0] << 24 | bVals[1] << 16 | bVals[2] << 8 | bVals[3];
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,OnClick,The following statement contains a magic number: for (int ifeat = 0; ifeat < m_ids.Length; ++ifeat)  			{  				int id = m_ids[ifeat];  				if (id == kGrLangFeature)  					continue; // Don't show Graphite built-in 'lang' feature.  				string label;  				m_featureEngine.GetFeatureLabel(id' kUiCodePage' out label);  				if (label.Length == 0)  				{  					//Create backup default string' ie' "Feature #1".  					label = string.Format(FwCoreDlgControls.kstidFeature' id);  				}  				int cValueIds;  				int nDefault;  				int [] valueIds;  				using (ArrayPtr valueIdsM = MarshalEx.ArrayToNative<int>(kMaxValPerFeat))  				{  					m_featureEngine.GetFeatureValues(id' kMaxValPerFeat' valueIdsM'  						out cValueIds' out nDefault);  					valueIds = MarshalEx.NativeToArray<int>(valueIdsM' cValueIds);  				}  				// If we know a value for this feature' use it. Otherwise init to default.  				int featureValue = nDefault;  				if (m_values[ifeat] != Int32.MaxValue)  					featureValue = m_values[ifeat];    				// Decide whether to just use a check mark' or have a submenu. Default is sub.  				bool fBinary = false;  				if (cValueIds == 2 &&  					(valueIds[0] == 0 || valueIds[1] == 0) &&  					valueIds[0] + valueIds[1] == 1)  				{  					// Minimum requirement is that there are two states and the values have  					// ids of 0 and 1. We further require that the actual values belong to a  					// natural boolean set.  					string valueLabelT; // Label corresponding to 'true' etc' the checked value  					m_featureEngine.GetFeatureValueLabel(id' 1' kUiCodePage' out valueLabelT);  					string valueLabelF; // Label corresponding to 'false' etc' the unchecked val.  					m_featureEngine.GetFeatureValueLabel(id' 0' kUiCodePage' out valueLabelF);    					// Enhance: these should be based on a resource' or something that depends  					// on the code page' if the code page is ever not constant.  					switch (valueLabelT.ToLowerInvariant())  					{  						case "true":  						case "yes":  						case "on":  						case "":  						{  							switch (valueLabelF.ToLowerInvariant())  							{  								case "false":  								case "no":  								case "off":  								case "":  									fBinary = true;  									break;  							}  						}  							break;  					}  				}  				if (fBinary)  				{  					FontFeatureMenuItem item = new FontFeatureMenuItem(label' ifeat' this);  					item.Checked = featureValue == 1;  					menu.MenuItems.Add(item);  				}  				else if (cValueIds > 0)  				{  					FontFeatureMenuItem menuSub = new FontFeatureMenuItem(label' ifeat' this);  					for (int ival = 0; ival < valueIds.Length; ++ival)  					{  						string valueLabel;  						m_featureEngine.GetFeatureValueLabel(id' valueIds[ival]'  							kUiCodePage' out valueLabel);  						if (valueLabel.Length == 0)  						{  							// Create backup default string.  							valueLabel = string.Format(FwCoreDlgControls.kstidFeatureValue'  								valueIds[ival]);  						}  						FontFeatureMenuItem itemSub =  							new FontFeatureMenuItem(valueLabel' valueIds[ival]' this);  						itemSub.Checked = valueIds[ival] == featureValue;  						menuSub.MenuItems.Add(itemSub);  					}  					menu.MenuItems.Add(menuSub);  				}  				//				if (fBinary)  				//				{  				//					...  				//					Assert(vnMenuMap.Size() == cItems);  				//					vnMenuMap.Push((ifeat << 16) | 0x0000FFFF);  				//					cItems++;  				//				}  				//				else if (cn > 0)  				//				{  				//					Assert(cn < 0x0000FFFF);  				//					HMENU hmenuSub = ::CreatePopupMenu();  				//					::AppendMenu(hmenu' MF_POPUP' (UINT_PTR)hmenuSub' strFeat.Chars());  				//					for (int in = 0; in < cn; in++)  				//					{  				//  				//						Assert(vnMenuMap.Size() == cItems);  				//						vnMenuMap.Push((ifeat << 16) | in);  				//						cItems++;  				//					}  				//				}  				//				else  				//				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,HoldDummyGraphics,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,HoldDummyGraphics,The following statement contains a magic number: chrp.szFaceName = new ushort[32];
Magic Number,SIL.FieldWorks.FwCoreDlgControls,HoldDummyGraphics,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,HoldDummyGraphics,The following statement contains a magic number: for (int ich = 0; ich < fontName.Length; ++ich)  				{  					if (ich < 32)  						chrp.szFaceName[ich] = fontName[ich];  				}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,HoldDummyGraphics,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,HoldDummyGraphics,The following statement contains a magic number: if (fontName.Length < 32)  					chrp.szFaceName[fontName.Length] = 0;  				else  					chrp.szFaceName[31] = 0;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,HoldDummyGraphics,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,HoldDummyGraphics,The following statement contains a magic number: if (fontName.Length < 32)  					chrp.szFaceName[fontName.Length] = 0;  				else  					chrp.szFaceName[31] = 0;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_pnlBorderPreview_Paint,The following statement contains a magic number: drawRect.Inflate(-7' -7);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_pnlBorderPreview_Paint,The following statement contains a magic number: drawRect.Inflate(-7' -7);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_pnlBorderPreview_Paint,The following statement contains a magic number: const int tickSize = 7;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_pnlBorderPreview_Paint,The following statement contains a magic number: drawRect.Inflate(-3' -3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_pnlBorderPreview_Paint,The following statement contains a magic number: drawRect.Inflate(-3' -3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemBackground,The following statement contains a magic number: if ((e.State & DrawItemState.Selected) != 0)  				DrawRectangle(e.Graphics' e.Bounds' SystemPens.Highlight' 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: RectangleF textRect = new RectangleF(drawRect.X + 1' drawRect.Y + 1' drawRect.Width - 2' drawRect.Height - 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: RectangleF textRect = new RectangleF(drawRect.X + 1' drawRect.Y + 1' drawRect.Width - 2' drawRect.Height - 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: if (index != 0)  			{  				int sampleHeight = CalcBorderWidth(index' e.Graphics);  				e.Graphics.FillRectangle(new SolidBrush(m_cboColor.ColorValue)'  					e.Bounds.X + (e.Bounds.Width * 4 / 10)' e.Bounds.Y + (e.Bounds.Height - sampleHeight) / 2'  					(e.Bounds.Width * 6 / 10) - 3' sampleHeight);  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: if (index != 0)  			{  				int sampleHeight = CalcBorderWidth(index' e.Graphics);  				e.Graphics.FillRectangle(new SolidBrush(m_cboColor.ColorValue)'  					e.Bounds.X + (e.Bounds.Width * 4 / 10)' e.Bounds.Y + (e.Bounds.Height - sampleHeight) / 2'  					(e.Bounds.Width * 6 / 10) - 3' sampleHeight);  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: if (index != 0)  			{  				int sampleHeight = CalcBorderWidth(index' e.Graphics);  				e.Graphics.FillRectangle(new SolidBrush(m_cboColor.ColorValue)'  					e.Bounds.X + (e.Bounds.Width * 4 / 10)' e.Bounds.Y + (e.Bounds.Height - sampleHeight) / 2'  					(e.Bounds.Width * 6 / 10) - 3' sampleHeight);  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: if (index != 0)  			{  				int sampleHeight = CalcBorderWidth(index' e.Graphics);  				e.Graphics.FillRectangle(new SolidBrush(m_cboColor.ColorValue)'  					e.Bounds.X + (e.Bounds.Width * 4 / 10)' e.Bounds.Y + (e.Bounds.Height - sampleHeight) / 2'  					(e.Bounds.Width * 6 / 10) - 3' sampleHeight);  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: if (index != 0)  			{  				int sampleHeight = CalcBorderWidth(index' e.Graphics);  				e.Graphics.FillRectangle(new SolidBrush(m_cboColor.ColorValue)'  					e.Bounds.X + (e.Bounds.Width * 4 / 10)' e.Bounds.Y + (e.Bounds.Height - sampleHeight) / 2'  					(e.Bounds.Width * 6 / 10) - 3' sampleHeight);  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,m_cboWidth_DrawItemForeground,The following statement contains a magic number: if (index != 0)  			{  				int sampleHeight = CalcBorderWidth(index' e.Graphics);  				e.Graphics.FillRectangle(new SolidBrush(m_cboColor.ColorValue)'  					e.Bounds.X + (e.Bounds.Width * 4 / 10)' e.Bounds.Y + (e.Bounds.Height - sampleHeight) / 2'  					(e.Bounds.Width * 6 / 10) - 3' sampleHeight);  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-2' -2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-2' -2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-2' -2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-2' -2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: if (ButtonSelected(button))  				DrawRectangle(g' drawRect' SystemPens.Highlight' 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-3' -3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-3' -3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-3' -3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,NoneAll_Paint,The following statement contains a magic number: drawRect.Inflate(-3' -3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,CalcBorderWidth,The following statement contains a magic number: return (int)(s_borderSizes[index] * (int)g.DpiY / 72000) + 1;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawTextLines,The following statement contains a magic number: const int lineHeight = 5;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawTextLines,The following statement contains a magic number: const int lineSpacing = 2;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawTextLines,The following statement contains a magic number: while (drawRect.Height > lineHeight)  			{  				Rectangle lineRect = new Rectangle(drawRect.X' drawRect.Y' drawRect.Width' lineHeight);    				// for the first line' indent the left edge  				if (firstLine)  				{  					lineRect.X += 10;  					lineRect.Width -= 10;  					firstLine = false;  				}    				// for the last line' indent the right edge  				if (drawRect.Height <= (lineHeight * 2) + lineSpacing)  					lineRect.Width -= 10;    				g.FillRectangle(SystemBrushes.GrayText' lineRect);  				drawRect.Y += lineHeight + lineSpacing;  				drawRect.Height -= lineHeight + lineSpacing;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawTextLines,The following statement contains a magic number: while (drawRect.Height > lineHeight)  			{  				Rectangle lineRect = new Rectangle(drawRect.X' drawRect.Y' drawRect.Width' lineHeight);    				// for the first line' indent the left edge  				if (firstLine)  				{  					lineRect.X += 10;  					lineRect.Width -= 10;  					firstLine = false;  				}    				// for the last line' indent the right edge  				if (drawRect.Height <= (lineHeight * 2) + lineSpacing)  					lineRect.Width -= 10;    				g.FillRectangle(SystemBrushes.GrayText' lineRect);  				drawRect.Y += lineHeight + lineSpacing;  				drawRect.Height -= lineHeight + lineSpacing;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawTextLines,The following statement contains a magic number: while (drawRect.Height > lineHeight)  			{  				Rectangle lineRect = new Rectangle(drawRect.X' drawRect.Y' drawRect.Width' lineHeight);    				// for the first line' indent the left edge  				if (firstLine)  				{  					lineRect.X += 10;  					lineRect.Width -= 10;  					firstLine = false;  				}    				// for the last line' indent the right edge  				if (drawRect.Height <= (lineHeight * 2) + lineSpacing)  					lineRect.Width -= 10;    				g.FillRectangle(SystemBrushes.GrayText' lineRect);  				drawRect.Y += lineHeight + lineSpacing;  				drawRect.Height -= lineHeight + lineSpacing;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,DrawTextLines,The following statement contains a magic number: while (drawRect.Height > lineHeight)  			{  				Rectangle lineRect = new Rectangle(drawRect.X' drawRect.Y' drawRect.Width' lineHeight);    				// for the first line' indent the left edge  				if (firstLine)  				{  					lineRect.X += 10;  					lineRect.Width -= 10;  					firstLine = false;  				}    				// for the last line' indent the right edge  				if (drawRect.Height <= (lineHeight * 2) + lineSpacing)  					lineRect.Width -= 10;    				g.FillRectangle(SystemBrushes.GrayText' lineRect);  				drawRect.Y += lineHeight + lineSpacing;  				drawRect.Height -= lineHeight + lineSpacing;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBorderTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBorderTab.cs,UpdateForStyle,The following statement contains a magic number: if (maxWidth == 0)  			{  				// 1/2 pt is the default value to display' even though 0 is the default value  				maxWidth = 500;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,UpdateBulletInfo,The following statement contains a magic number: if (m_rbNone.Checked)  				bulInfo.m_numberScheme = VwBulNum.kvbnNone;  			else if (m_rbBullet.Checked)  			{  				if (m_tbBulletCustom.Text.Length > 0)  				{  					bulInfo.m_bulletCustom = m_tbBulletCustom.Text;  					bulInfo.FontInfo = m_BulletsFontInfo;  					bulInfo.m_numberScheme = (VwBulNum) ((int) VwBulNum.kvbnBulletBase);  				}  				else  				{  					bulInfo.m_numberScheme = (VwBulNum) ((int) VwBulNum.kvbnBulletBase + m_cboBulletScheme.SelectedIndex);  					bulInfo.FontInfo = m_BulletsFontInfo;  				}  			}  			else if (m_rbNumber.Checked)  			{  				switch (m_cboNumberScheme.SelectedIndex)  				{  					case 0: bulInfo.m_numberScheme = VwBulNum.kvbnArabic; break;  					case 1: bulInfo.m_numberScheme = VwBulNum.kvbnRomanUpper; break;  					case 2: bulInfo.m_numberScheme = VwBulNum.kvbnRomanLower; break;  					case 3: bulInfo.m_numberScheme = VwBulNum.kvbnLetterUpper; break;  					case 4: bulInfo.m_numberScheme = VwBulNum.kvbnLetterLower; break;  					case 5: bulInfo.m_numberScheme = VwBulNum.kvbnArabic01; break;  				}  				bulInfo.m_start = m_nudStartAt.Value;  				bulInfo.m_textBefore = m_tbTextBefore.Text;  				bulInfo.m_textAfter = m_tbTextAfter.Text;  				bulInfo.FontInfo = m_NumberFontInfo;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,UpdateBulletInfo,The following statement contains a magic number: if (m_rbNone.Checked)  				bulInfo.m_numberScheme = VwBulNum.kvbnNone;  			else if (m_rbBullet.Checked)  			{  				if (m_tbBulletCustom.Text.Length > 0)  				{  					bulInfo.m_bulletCustom = m_tbBulletCustom.Text;  					bulInfo.FontInfo = m_BulletsFontInfo;  					bulInfo.m_numberScheme = (VwBulNum) ((int) VwBulNum.kvbnBulletBase);  				}  				else  				{  					bulInfo.m_numberScheme = (VwBulNum) ((int) VwBulNum.kvbnBulletBase + m_cboBulletScheme.SelectedIndex);  					bulInfo.FontInfo = m_BulletsFontInfo;  				}  			}  			else if (m_rbNumber.Checked)  			{  				switch (m_cboNumberScheme.SelectedIndex)  				{  					case 0: bulInfo.m_numberScheme = VwBulNum.kvbnArabic; break;  					case 1: bulInfo.m_numberScheme = VwBulNum.kvbnRomanUpper; break;  					case 2: bulInfo.m_numberScheme = VwBulNum.kvbnRomanLower; break;  					case 3: bulInfo.m_numberScheme = VwBulNum.kvbnLetterUpper; break;  					case 4: bulInfo.m_numberScheme = VwBulNum.kvbnLetterLower; break;  					case 5: bulInfo.m_numberScheme = VwBulNum.kvbnArabic01; break;  				}  				bulInfo.m_start = m_nudStartAt.Value;  				bulInfo.m_textBefore = m_tbTextBefore.Text;  				bulInfo.m_textAfter = m_tbTextAfter.Text;  				bulInfo.FontInfo = m_NumberFontInfo;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,UpdateBulletInfo,The following statement contains a magic number: if (m_rbNone.Checked)  				bulInfo.m_numberScheme = VwBulNum.kvbnNone;  			else if (m_rbBullet.Checked)  			{  				if (m_tbBulletCustom.Text.Length > 0)  				{  					bulInfo.m_bulletCustom = m_tbBulletCustom.Text;  					bulInfo.FontInfo = m_BulletsFontInfo;  					bulInfo.m_numberScheme = (VwBulNum) ((int) VwBulNum.kvbnBulletBase);  				}  				else  				{  					bulInfo.m_numberScheme = (VwBulNum) ((int) VwBulNum.kvbnBulletBase + m_cboBulletScheme.SelectedIndex);  					bulInfo.FontInfo = m_BulletsFontInfo;  				}  			}  			else if (m_rbNumber.Checked)  			{  				switch (m_cboNumberScheme.SelectedIndex)  				{  					case 0: bulInfo.m_numberScheme = VwBulNum.kvbnArabic; break;  					case 1: bulInfo.m_numberScheme = VwBulNum.kvbnRomanUpper; break;  					case 2: bulInfo.m_numberScheme = VwBulNum.kvbnRomanLower; break;  					case 3: bulInfo.m_numberScheme = VwBulNum.kvbnLetterUpper; break;  					case 4: bulInfo.m_numberScheme = VwBulNum.kvbnLetterLower; break;  					case 5: bulInfo.m_numberScheme = VwBulNum.kvbnArabic01; break;  				}  				bulInfo.m_start = m_nudStartAt.Value;  				bulInfo.m_textBefore = m_tbTextBefore.Text;  				bulInfo.m_textAfter = m_tbTextAfter.Text;  				bulInfo.FontInfo = m_NumberFontInfo;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,UpdateBulletInfo,The following statement contains a magic number: if (m_rbNone.Checked)  				bulInfo.m_numberScheme = VwBulNum.kvbnNone;  			else if (m_rbBullet.Checked)  			{  				if (m_tbBulletCustom.Text.Length > 0)  				{  					bulInfo.m_bulletCustom = m_tbBulletCustom.Text;  					bulInfo.FontInfo = m_BulletsFontInfo;  					bulInfo.m_numberScheme = (VwBulNum) ((int) VwBulNum.kvbnBulletBase);  				}  				else  				{  					bulInfo.m_numberScheme = (VwBulNum) ((int) VwBulNum.kvbnBulletBase + m_cboBulletScheme.SelectedIndex);  					bulInfo.FontInfo = m_BulletsFontInfo;  				}  			}  			else if (m_rbNumber.Checked)  			{  				switch (m_cboNumberScheme.SelectedIndex)  				{  					case 0: bulInfo.m_numberScheme = VwBulNum.kvbnArabic; break;  					case 1: bulInfo.m_numberScheme = VwBulNum.kvbnRomanUpper; break;  					case 2: bulInfo.m_numberScheme = VwBulNum.kvbnRomanLower; break;  					case 3: bulInfo.m_numberScheme = VwBulNum.kvbnLetterUpper; break;  					case 4: bulInfo.m_numberScheme = VwBulNum.kvbnLetterLower; break;  					case 5: bulInfo.m_numberScheme = VwBulNum.kvbnArabic01; break;  				}  				bulInfo.m_start = m_nudStartAt.Value;  				bulInfo.m_textBefore = m_tbTextBefore.Text;  				bulInfo.m_textAfter = m_tbTextAfter.Text;  				bulInfo.FontInfo = m_NumberFontInfo;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,GetNumberSchemeIndexForType,The following statement contains a magic number: switch (bulletType)  			{  				case VwBulNum.kvbnArabic: return 0;  				case VwBulNum.kvbnRomanUpper: return 1;  				case VwBulNum.kvbnRomanLower: return 2;  				case VwBulNum.kvbnLetterUpper: return 3;  				case VwBulNum.kvbnLetterLower: return 4;  				case VwBulNum.kvbnArabic01: return 5;  				default:  					return m_kDefaultNumberIndex;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,GetNumberSchemeIndexForType,The following statement contains a magic number: switch (bulletType)  			{  				case VwBulNum.kvbnArabic: return 0;  				case VwBulNum.kvbnRomanUpper: return 1;  				case VwBulNum.kvbnRomanLower: return 2;  				case VwBulNum.kvbnLetterUpper: return 3;  				case VwBulNum.kvbnLetterLower: return 4;  				case VwBulNum.kvbnArabic01: return 5;  				default:  					return m_kDefaultNumberIndex;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,GetNumberSchemeIndexForType,The following statement contains a magic number: switch (bulletType)  			{  				case VwBulNum.kvbnArabic: return 0;  				case VwBulNum.kvbnRomanUpper: return 1;  				case VwBulNum.kvbnRomanLower: return 2;  				case VwBulNum.kvbnLetterUpper: return 3;  				case VwBulNum.kvbnLetterLower: return 4;  				case VwBulNum.kvbnArabic01: return 5;  				default:  					return m_kDefaultNumberIndex;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,GetNumberSchemeIndexForType,The following statement contains a magic number: switch (bulletType)  			{  				case VwBulNum.kvbnArabic: return 0;  				case VwBulNum.kvbnRomanUpper: return 1;  				case VwBulNum.kvbnRomanLower: return 2;  				case VwBulNum.kvbnLetterUpper: return 3;  				case VwBulNum.kvbnLetterLower: return 4;  				case VwBulNum.kvbnArabic01: return 5;  				default:  					return m_kDefaultNumberIndex;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,DataChange,The following statement contains a magic number: propsBldr.SetIntPropValues((int)FwTextPropType.ktptSpaceBefore'  					(int)FwTextPropVar.ktpvMilliPoint' 6000);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,m_cboNumberScheme_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboNumberScheme.SelectedIndex)  			{  				case 0:		// 1' 2' 3'  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;    				case 1:		// I' II' III (Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.Roman;  					break;    				case 2:		// i' ii' iii (lower case Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.RomanLowerCase;  					break;    				case 3:		// A' B' C  					m_nudStartAt.Mode = DataUpDownMode.Letters;  					break;    				case 4:		// a' b' c  					m_nudStartAt.Mode = DataUpDownMode.LettersLowerCase;  					break;    				case 5:		// 01' 02' 03  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,m_cboNumberScheme_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboNumberScheme.SelectedIndex)  			{  				case 0:		// 1' 2' 3'  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;    				case 1:		// I' II' III (Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.Roman;  					break;    				case 2:		// i' ii' iii (lower case Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.RomanLowerCase;  					break;    				case 3:		// A' B' C  					m_nudStartAt.Mode = DataUpDownMode.Letters;  					break;    				case 4:		// a' b' c  					m_nudStartAt.Mode = DataUpDownMode.LettersLowerCase;  					break;    				case 5:		// 01' 02' 03  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,m_cboNumberScheme_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboNumberScheme.SelectedIndex)  			{  				case 0:		// 1' 2' 3'  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;    				case 1:		// I' II' III (Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.Roman;  					break;    				case 2:		// i' ii' iii (lower case Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.RomanLowerCase;  					break;    				case 3:		// A' B' C  					m_nudStartAt.Mode = DataUpDownMode.Letters;  					break;    				case 4:		// a' b' c  					m_nudStartAt.Mode = DataUpDownMode.LettersLowerCase;  					break;    				case 5:		// 01' 02' 03  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,m_cboNumberScheme_SelectedIndexChanged,The following statement contains a magic number: switch (m_cboNumberScheme.SelectedIndex)  			{  				case 0:		// 1' 2' 3'  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;    				case 1:		// I' II' III (Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.Roman;  					break;    				case 2:		// i' ii' iii (lower case Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.RomanLowerCase;  					break;    				case 3:		// A' B' C  					m_nudStartAt.Mode = DataUpDownMode.Letters;  					break;    				case 4:		// a' b' c  					m_nudStartAt.Mode = DataUpDownMode.LettersLowerCase;  					break;    				case 5:		// 01' 02' 03  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudStartAt.MaxValue = 3000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,ValueChanged,The following statement contains a magic number: if (sender is UpDownMeasureControl)  			{  				UpDownMeasureControl ctrl = (UpDownMeasureControl)sender;  				if (ctrl.Text == string.Empty)  				{  					// When numerical values in the special indentation and line spacing controls are reset'  					// the values should be set in the associated combobox to unspecified -- this will  					// cause this event handler to fire again and reset both the combo box and the numeric  					// value to the inherited value.  					if (ctrl == m_nudIndentBy)  					{  						m_cboSpecialIndentation.AdjustedSelectedIndex = 0;  						return;  					}  					if (ctrl == m_nudSpacingAt)  					{  						m_cboLineSpacing.AdjustedSelectedIndex = 0;  						return;  					}    					m_dontUpdateInheritance = true;  					if (m_currentStyleInfo.Inherits)  					{  						InheritableStyleProp<int> prop;  						int inheritedValue;  						if (ctrl == m_nudLeftIndentation)  						{  							prop = m_currentStyleInfo.ILeadingIndent;  							inheritedValue = m_currentStyleInfo.BasedOnStyle.LeadingIndent;  						}  						else if (ctrl == m_nudRightIndentation)  						{  							prop = m_currentStyleInfo.ITrailingIndent;  							inheritedValue = m_currentStyleInfo.BasedOnStyle.TrailingIndent;  						}  						else if (ctrl == m_nudBefore)  						{  							prop = m_currentStyleInfo.ISpaceBefore;  							inheritedValue = m_currentStyleInfo.BasedOnStyle.SpaceBefore;  						}  						else if (ctrl == m_nudAfter)  						{  							prop = m_currentStyleInfo.ISpaceAfter;  							inheritedValue = m_currentStyleInfo.BasedOnStyle.SpaceAfter;  						}  						else  							throw new Exception("Somebody added a new nud control");    						prop.ResetToInherited(inheritedValue);  						ctrl.ForeColor = GetCtrlForeColorForProp(prop);  						ctrl.MeasureValue = prop.Value;  					}  					else  					{  						ctrl.MeasureValue = ctrl.MeasureValue;  					}  					m_dontUpdateInheritance = false;  				}  			}  			else if (sender == m_cboLineSpacing)  			{  				if (m_cboLineSpacing.AdjustedSelectedIndex == kAtLeastIndex)  					m_nudSpacingAt.MeasureMin = 0;  				else if (m_cboLineSpacing.AdjustedSelectedIndex == kExactlyIndex)  					m_nudSpacingAt.MeasureMin = 1000;    				//Enable/Disable the line spacing size combo box  				//when the appropriate kind of line spacing is selected in the m_cboLineSpacing combobox  				var index = m_cboLineSpacing.AdjustedSelectedIndex;  				m_nudSpacingAt.Enabled = (index == kAtLeastIndex || index == kExactlyIndex) &&  					!IsInherited(m_cboLineSpacing);  			}  			else if (sender == m_cboDirection)  			{  				ChangeDirectionLabels(  					(TriStateBool)m_cboDirection.AdjustedSelectedIndex == TriStateBool.triTrue);  			}  			else if (sender == m_cboSpecialIndentation)  			{  				//Enable/Disable the indentation size combo box when the appropriate kind of indentation  				// is selected in the m_cboSpecialIndentation combobox.  If (unspecified) is selected  				// then m_cboSpecialIndentation is Inherited and thus we want the size comboBox disabled.  				var index = m_cboSpecialIndentation.AdjustedSelectedIndex;  				m_nudIndentBy.Enabled = (index == kFirstLineIndex || index == kHangingIndex) && !IsInherited(m_cboSpecialIndentation);  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,m_pnlPreview_Paint,The following statement contains a magic number: drawRect.Inflate(-4' -4);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,m_pnlPreview_Paint,The following statement contains a magic number: drawRect.Inflate(-4' -4);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,m_pnlPreview_Paint,The following statement contains a magic number: DrawAdjacentPreview(2' ref drawRect' e.Graphics);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,m_pnlPreview_Paint,The following statement contains a magic number: DrawAdjacentPreview(3' ref drawRect' e.Graphics);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: switch (styleInfo.IAlignment.Value)  			{  				case FwTextAlign.ktalLeading: m_cboAlignment.AdjustedSelectedIndex = 1; break;  				case FwTextAlign.ktalLeft: m_cboAlignment.AdjustedSelectedIndex = 2; break;  				case FwTextAlign.ktalCenter: m_cboAlignment.AdjustedSelectedIndex = 3; break;  				case FwTextAlign.ktalRight: m_cboAlignment.AdjustedSelectedIndex = 4; break;  				case FwTextAlign.ktalTrailing: m_cboAlignment.AdjustedSelectedIndex = 5; break;  				case FwTextAlign.ktalJustify: m_cboAlignment.AdjustedSelectedIndex = 6; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: switch (styleInfo.IAlignment.Value)  			{  				case FwTextAlign.ktalLeading: m_cboAlignment.AdjustedSelectedIndex = 1; break;  				case FwTextAlign.ktalLeft: m_cboAlignment.AdjustedSelectedIndex = 2; break;  				case FwTextAlign.ktalCenter: m_cboAlignment.AdjustedSelectedIndex = 3; break;  				case FwTextAlign.ktalRight: m_cboAlignment.AdjustedSelectedIndex = 4; break;  				case FwTextAlign.ktalTrailing: m_cboAlignment.AdjustedSelectedIndex = 5; break;  				case FwTextAlign.ktalJustify: m_cboAlignment.AdjustedSelectedIndex = 6; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: switch (styleInfo.IAlignment.Value)  			{  				case FwTextAlign.ktalLeading: m_cboAlignment.AdjustedSelectedIndex = 1; break;  				case FwTextAlign.ktalLeft: m_cboAlignment.AdjustedSelectedIndex = 2; break;  				case FwTextAlign.ktalCenter: m_cboAlignment.AdjustedSelectedIndex = 3; break;  				case FwTextAlign.ktalRight: m_cboAlignment.AdjustedSelectedIndex = 4; break;  				case FwTextAlign.ktalTrailing: m_cboAlignment.AdjustedSelectedIndex = 5; break;  				case FwTextAlign.ktalJustify: m_cboAlignment.AdjustedSelectedIndex = 6; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: switch (styleInfo.IAlignment.Value)  			{  				case FwTextAlign.ktalLeading: m_cboAlignment.AdjustedSelectedIndex = 1; break;  				case FwTextAlign.ktalLeft: m_cboAlignment.AdjustedSelectedIndex = 2; break;  				case FwTextAlign.ktalCenter: m_cboAlignment.AdjustedSelectedIndex = 3; break;  				case FwTextAlign.ktalRight: m_cboAlignment.AdjustedSelectedIndex = 4; break;  				case FwTextAlign.ktalTrailing: m_cboAlignment.AdjustedSelectedIndex = 5; break;  				case FwTextAlign.ktalJustify: m_cboAlignment.AdjustedSelectedIndex = 6; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: switch (styleInfo.IAlignment.Value)  			{  				case FwTextAlign.ktalLeading: m_cboAlignment.AdjustedSelectedIndex = 1; break;  				case FwTextAlign.ktalLeft: m_cboAlignment.AdjustedSelectedIndex = 2; break;  				case FwTextAlign.ktalCenter: m_cboAlignment.AdjustedSelectedIndex = 3; break;  				case FwTextAlign.ktalRight: m_cboAlignment.AdjustedSelectedIndex = 4; break;  				case FwTextAlign.ktalTrailing: m_cboAlignment.AdjustedSelectedIndex = 5; break;  				case FwTextAlign.ktalJustify: m_cboAlignment.AdjustedSelectedIndex = 6; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: if (styleInfo.IFirstLineIndent.Value == 0)  				m_cboSpecialIndentation.AdjustedSelectedIndex = 1;	// none  			else if (styleInfo.IFirstLineIndent.Value > 0)  				m_cboSpecialIndentation.AdjustedSelectedIndex = 2;	// first line  			else  				m_cboSpecialIndentation.AdjustedSelectedIndex = 3;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: if (styleInfo.IFirstLineIndent.Value == 0)  				m_cboSpecialIndentation.AdjustedSelectedIndex = 1;	// none  			else if (styleInfo.IFirstLineIndent.Value > 0)  				m_cboSpecialIndentation.AdjustedSelectedIndex = 2;	// first line  			else  				m_cboSpecialIndentation.AdjustedSelectedIndex = 3;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: if (!info.m_relative)  			{  				if (info.m_lineHeight < 0)  				{  					// Exact line spacing  					m_cboLineSpacing.AdjustedSelectedIndex = kExactlyIndex;  					m_nudSpacingAt.MeasureMin = 1000;  				}  				else  				{  					// at least line spacing  					m_cboLineSpacing.AdjustedSelectedIndex = kAtLeastIndex;  					m_nudSpacingAt.MeasureMin = 0;  				}    				m_nudSpacingAt.MeasureValue = Math.Abs(info.m_lineHeight);  			}  			else  			{  				switch(info.m_lineHeight)  				{  					case 10000:	// single spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 1;  						break;  					case 15000:	// 1.5 line spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 2;  						break;  					case 20000:	// double spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 3;  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: if (!info.m_relative)  			{  				if (info.m_lineHeight < 0)  				{  					// Exact line spacing  					m_cboLineSpacing.AdjustedSelectedIndex = kExactlyIndex;  					m_nudSpacingAt.MeasureMin = 1000;  				}  				else  				{  					// at least line spacing  					m_cboLineSpacing.AdjustedSelectedIndex = kAtLeastIndex;  					m_nudSpacingAt.MeasureMin = 0;  				}    				m_nudSpacingAt.MeasureValue = Math.Abs(info.m_lineHeight);  			}  			else  			{  				switch(info.m_lineHeight)  				{  					case 10000:	// single spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 1;  						break;  					case 15000:	// 1.5 line spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 2;  						break;  					case 20000:	// double spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 3;  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: if (!info.m_relative)  			{  				if (info.m_lineHeight < 0)  				{  					// Exact line spacing  					m_cboLineSpacing.AdjustedSelectedIndex = kExactlyIndex;  					m_nudSpacingAt.MeasureMin = 1000;  				}  				else  				{  					// at least line spacing  					m_cboLineSpacing.AdjustedSelectedIndex = kAtLeastIndex;  					m_nudSpacingAt.MeasureMin = 0;  				}    				m_nudSpacingAt.MeasureValue = Math.Abs(info.m_lineHeight);  			}  			else  			{  				switch(info.m_lineHeight)  				{  					case 10000:	// single spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 1;  						break;  					case 15000:	// 1.5 line spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 2;  						break;  					case 20000:	// double spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 3;  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: if (!info.m_relative)  			{  				if (info.m_lineHeight < 0)  				{  					// Exact line spacing  					m_cboLineSpacing.AdjustedSelectedIndex = kExactlyIndex;  					m_nudSpacingAt.MeasureMin = 1000;  				}  				else  				{  					// at least line spacing  					m_cboLineSpacing.AdjustedSelectedIndex = kAtLeastIndex;  					m_nudSpacingAt.MeasureMin = 0;  				}    				m_nudSpacingAt.MeasureValue = Math.Abs(info.m_lineHeight);  			}  			else  			{  				switch(info.m_lineHeight)  				{  					case 10000:	// single spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 1;  						break;  					case 15000:	// 1.5 line spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 2;  						break;  					case 20000:	// double spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 3;  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: if (!info.m_relative)  			{  				if (info.m_lineHeight < 0)  				{  					// Exact line spacing  					m_cboLineSpacing.AdjustedSelectedIndex = kExactlyIndex;  					m_nudSpacingAt.MeasureMin = 1000;  				}  				else  				{  					// at least line spacing  					m_cboLineSpacing.AdjustedSelectedIndex = kAtLeastIndex;  					m_nudSpacingAt.MeasureMin = 0;  				}    				m_nudSpacingAt.MeasureValue = Math.Abs(info.m_lineHeight);  			}  			else  			{  				switch(info.m_lineHeight)  				{  					case 10000:	// single spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 1;  						break;  					case 15000:	// 1.5 line spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 2;  						break;  					case 20000:	// double spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 3;  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following statement contains a magic number: if (!info.m_relative)  			{  				if (info.m_lineHeight < 0)  				{  					// Exact line spacing  					m_cboLineSpacing.AdjustedSelectedIndex = kExactlyIndex;  					m_nudSpacingAt.MeasureMin = 1000;  				}  				else  				{  					// at least line spacing  					m_cboLineSpacing.AdjustedSelectedIndex = kAtLeastIndex;  					m_nudSpacingAt.MeasureMin = 0;  				}    				m_nudSpacingAt.MeasureValue = Math.Abs(info.m_lineHeight);  			}  			else  			{  				switch(info.m_lineHeight)  				{  					case 10000:	// single spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 1;  						break;  					case 15000:	// 1.5 line spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 2;  						break;  					case 20000:	// double spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 3;  						break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 1: newAlignment = FwTextAlign.ktalLeading; break;  				case 2: newAlignment = FwTextAlign.ktalLeft; break;  				case 3: newAlignment = FwTextAlign.ktalCenter; break;  				case 4: newAlignment = FwTextAlign.ktalRight; break;  				case 5: newAlignment = FwTextAlign.ktalTrailing; break;  				case 6: newAlignment = FwTextAlign.ktalJustify; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 1: newAlignment = FwTextAlign.ktalLeading; break;  				case 2: newAlignment = FwTextAlign.ktalLeft; break;  				case 3: newAlignment = FwTextAlign.ktalCenter; break;  				case 4: newAlignment = FwTextAlign.ktalRight; break;  				case 5: newAlignment = FwTextAlign.ktalTrailing; break;  				case 6: newAlignment = FwTextAlign.ktalJustify; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 1: newAlignment = FwTextAlign.ktalLeading; break;  				case 2: newAlignment = FwTextAlign.ktalLeft; break;  				case 3: newAlignment = FwTextAlign.ktalCenter; break;  				case 4: newAlignment = FwTextAlign.ktalRight; break;  				case 5: newAlignment = FwTextAlign.ktalTrailing; break;  				case 6: newAlignment = FwTextAlign.ktalJustify; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 1: newAlignment = FwTextAlign.ktalLeading; break;  				case 2: newAlignment = FwTextAlign.ktalLeft; break;  				case 3: newAlignment = FwTextAlign.ktalCenter; break;  				case 4: newAlignment = FwTextAlign.ktalRight; break;  				case 5: newAlignment = FwTextAlign.ktalTrailing; break;  				case 6: newAlignment = FwTextAlign.ktalJustify; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 1: newAlignment = FwTextAlign.ktalLeading; break;  				case 2: newAlignment = FwTextAlign.ktalLeft; break;  				case 3: newAlignment = FwTextAlign.ktalCenter; break;  				case 4: newAlignment = FwTextAlign.ktalRight; break;  				case 5: newAlignment = FwTextAlign.ktalTrailing; break;  				case 6: newAlignment = FwTextAlign.ktalJustify; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboSpecialIndentation.AdjustedSelectedIndex)  			{  				case 2: newValue = m_nudIndentBy.MeasureValue; break;  				case 3: newValue = -m_nudIndentBy.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (m_cboSpecialIndentation.AdjustedSelectedIndex)  			{  				case 2: newValue = m_nudIndentBy.MeasureValue; break;  				case 3: newValue = -m_nudIndentBy.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: newLineHeight.m_relative = (index <= 3);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (index)  			{  				case 1:  // single spacing  					newLineHeight.m_lineHeight = 10000; break;  				case 2: // 1.5 spacing  					newLineHeight.m_lineHeight = 15000; break;  				case 3: // double spacing  					newLineHeight.m_lineHeight = 20000; break;  				case kAtLeastIndex: // at least  					newLineHeight.m_lineHeight = m_nudSpacingAt.MeasureValue; break;  				case kExactlyIndex: // exactly  					newLineHeight.m_lineHeight = -m_nudSpacingAt.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (index)  			{  				case 1:  // single spacing  					newLineHeight.m_lineHeight = 10000; break;  				case 2: // 1.5 spacing  					newLineHeight.m_lineHeight = 15000; break;  				case 3: // double spacing  					newLineHeight.m_lineHeight = 20000; break;  				case kAtLeastIndex: // at least  					newLineHeight.m_lineHeight = m_nudSpacingAt.MeasureValue; break;  				case kExactlyIndex: // exactly  					newLineHeight.m_lineHeight = -m_nudSpacingAt.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (index)  			{  				case 1:  // single spacing  					newLineHeight.m_lineHeight = 10000; break;  				case 2: // 1.5 spacing  					newLineHeight.m_lineHeight = 15000; break;  				case 3: // double spacing  					newLineHeight.m_lineHeight = 20000; break;  				case kAtLeastIndex: // at least  					newLineHeight.m_lineHeight = m_nudSpacingAt.MeasureValue; break;  				case kExactlyIndex: // exactly  					newLineHeight.m_lineHeight = -m_nudSpacingAt.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (index)  			{  				case 1:  // single spacing  					newLineHeight.m_lineHeight = 10000; break;  				case 2: // 1.5 spacing  					newLineHeight.m_lineHeight = 15000; break;  				case 3: // double spacing  					newLineHeight.m_lineHeight = 20000; break;  				case kAtLeastIndex: // at least  					newLineHeight.m_lineHeight = m_nudSpacingAt.MeasureValue; break;  				case kExactlyIndex: // exactly  					newLineHeight.m_lineHeight = -m_nudSpacingAt.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following statement contains a magic number: switch (index)  			{  				case 1:  // single spacing  					newLineHeight.m_lineHeight = 10000; break;  				case 2: // 1.5 spacing  					newLineHeight.m_lineHeight = 15000; break;  				case 3: // double spacing  					newLineHeight.m_lineHeight = 20000; break;  				case kAtLeastIndex: // at least  					newLineHeight.m_lineHeight = m_nudSpacingAt.MeasureValue; break;  				case kExactlyIndex: // exactly  					newLineHeight.m_lineHeight = -m_nudSpacingAt.MeasureValue; break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawAdjacentPreview,The following statement contains a magic number: for (int i = 0; i < lineCount; i++)  			{  				Rectangle lineRect = new Rectangle(drawRect.X' drawRect.Y' drawRect.Width' kLineHeight);  				// For the first line' indent the "paragraph"  				if (i == 0)  				{  					if (!RtoL)  						lineRect.X += 10;  					lineRect.Width -= 10;  				}  				g.FillRectangle(SystemBrushes.GrayText' lineRect);  				drawRect.Y += (kLineHeight + kLineSpacing);  				drawRect.Height -= (kLineHeight + kLineSpacing);  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawAdjacentPreview,The following statement contains a magic number: for (int i = 0; i < lineCount; i++)  			{  				Rectangle lineRect = new Rectangle(drawRect.X' drawRect.Y' drawRect.Width' kLineHeight);  				// For the first line' indent the "paragraph"  				if (i == 0)  				{  					if (!RtoL)  						lineRect.X += 10;  					lineRect.Width -= 10;  				}  				g.FillRectangle(SystemBrushes.GrayText' lineRect);  				drawRect.Y += (kLineHeight + kLineSpacing);  				drawRect.Height -= (kLineHeight + kLineSpacing);  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: for (int i = 0; i < 3; i++)  			{  				Rectangle lineRect;    				// Perform first line adjustments  				if (i == 0)  					lineRect = CalculateFirstLineRect(drawRect);  				else  					lineRect = CalculateFollowingLineRect(drawRect' i);    				// Handle the left and right indentation  				int leftIndent = m_nudLeftIndentation.MeasureValue / kmptPerPixel;  				if (!RtoL)  					lineRect.X += leftIndent;  				lineRect.Width -= leftIndent;    				int rightIndent = m_nudRightIndentation.MeasureValue / kmptPerPixel;  				if (RtoL)  					lineRect.X += rightIndent;  				lineRect.Width -= rightIndent;    				// On the last line' we need to add the paragraph trailing space to the background  				// and adjust the drawRect with it too.  				int bottomSpace = 0;  				if (i == 2)  					bottomSpace = m_nudAfter.MeasureValue / kmptPerPixel;    				// If the line spacing is other than single' then adjust the bottom space  				switch (m_cboLineSpacing.AdjustedSelectedIndex)  				{  					case 0: // unspecified  						Debug.Fail("Unspecified should never be selected.");  						break;    					case 1: // single  						break;    					case 2: // 1.5  						bottomSpace += (kLineSpacing / 2);  						break;    					case 3: // double  						bottomSpace += kLineSpacing;  						break;    					case kAtLeastIndex: // at least  					case kExactlyIndex: // exactly  						// only adjust for this at values above 12pt.  						int spaceAt = (m_nudSpacingAt.MeasureValue - 12000) / kmptPerPixel;  						if (spaceAt > 0)  							bottomSpace += spaceAt;  						break;  				}    				// Draw the background and the line  				Rectangle lineBackground = new Rectangle(  					drawRect.X + leftIndent' drawRect.Y' drawRect.Width - leftIndent - rightIndent'  					(lineRect.Bottom - drawRect.Y) + + bottomSpace + ((i < 2) ? kLineSpacing : 0));  				g.FillRectangle(new SolidBrush(m_cboBackground.ColorValue)' lineBackground);  				g.FillRectangle(SystemBrushes.WindowText' lineRect);    				// Adjust the drawRect to remove the space for the line just drawn  				int rectAdjust = (lineRect.Bottom + kLineSpacing + bottomSpace) - drawRect.Y;  				drawRect.Y += rectAdjust;  				drawRect.Height -= rectAdjust;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: for (int i = 0; i < 3; i++)  			{  				Rectangle lineRect;    				// Perform first line adjustments  				if (i == 0)  					lineRect = CalculateFirstLineRect(drawRect);  				else  					lineRect = CalculateFollowingLineRect(drawRect' i);    				// Handle the left and right indentation  				int leftIndent = m_nudLeftIndentation.MeasureValue / kmptPerPixel;  				if (!RtoL)  					lineRect.X += leftIndent;  				lineRect.Width -= leftIndent;    				int rightIndent = m_nudRightIndentation.MeasureValue / kmptPerPixel;  				if (RtoL)  					lineRect.X += rightIndent;  				lineRect.Width -= rightIndent;    				// On the last line' we need to add the paragraph trailing space to the background  				// and adjust the drawRect with it too.  				int bottomSpace = 0;  				if (i == 2)  					bottomSpace = m_nudAfter.MeasureValue / kmptPerPixel;    				// If the line spacing is other than single' then adjust the bottom space  				switch (m_cboLineSpacing.AdjustedSelectedIndex)  				{  					case 0: // unspecified  						Debug.Fail("Unspecified should never be selected.");  						break;    					case 1: // single  						break;    					case 2: // 1.5  						bottomSpace += (kLineSpacing / 2);  						break;    					case 3: // double  						bottomSpace += kLineSpacing;  						break;    					case kAtLeastIndex: // at least  					case kExactlyIndex: // exactly  						// only adjust for this at values above 12pt.  						int spaceAt = (m_nudSpacingAt.MeasureValue - 12000) / kmptPerPixel;  						if (spaceAt > 0)  							bottomSpace += spaceAt;  						break;  				}    				// Draw the background and the line  				Rectangle lineBackground = new Rectangle(  					drawRect.X + leftIndent' drawRect.Y' drawRect.Width - leftIndent - rightIndent'  					(lineRect.Bottom - drawRect.Y) + + bottomSpace + ((i < 2) ? kLineSpacing : 0));  				g.FillRectangle(new SolidBrush(m_cboBackground.ColorValue)' lineBackground);  				g.FillRectangle(SystemBrushes.WindowText' lineRect);    				// Adjust the drawRect to remove the space for the line just drawn  				int rectAdjust = (lineRect.Bottom + kLineSpacing + bottomSpace) - drawRect.Y;  				drawRect.Y += rectAdjust;  				drawRect.Height -= rectAdjust;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: for (int i = 0; i < 3; i++)  			{  				Rectangle lineRect;    				// Perform first line adjustments  				if (i == 0)  					lineRect = CalculateFirstLineRect(drawRect);  				else  					lineRect = CalculateFollowingLineRect(drawRect' i);    				// Handle the left and right indentation  				int leftIndent = m_nudLeftIndentation.MeasureValue / kmptPerPixel;  				if (!RtoL)  					lineRect.X += leftIndent;  				lineRect.Width -= leftIndent;    				int rightIndent = m_nudRightIndentation.MeasureValue / kmptPerPixel;  				if (RtoL)  					lineRect.X += rightIndent;  				lineRect.Width -= rightIndent;    				// On the last line' we need to add the paragraph trailing space to the background  				// and adjust the drawRect with it too.  				int bottomSpace = 0;  				if (i == 2)  					bottomSpace = m_nudAfter.MeasureValue / kmptPerPixel;    				// If the line spacing is other than single' then adjust the bottom space  				switch (m_cboLineSpacing.AdjustedSelectedIndex)  				{  					case 0: // unspecified  						Debug.Fail("Unspecified should never be selected.");  						break;    					case 1: // single  						break;    					case 2: // 1.5  						bottomSpace += (kLineSpacing / 2);  						break;    					case 3: // double  						bottomSpace += kLineSpacing;  						break;    					case kAtLeastIndex: // at least  					case kExactlyIndex: // exactly  						// only adjust for this at values above 12pt.  						int spaceAt = (m_nudSpacingAt.MeasureValue - 12000) / kmptPerPixel;  						if (spaceAt > 0)  							bottomSpace += spaceAt;  						break;  				}    				// Draw the background and the line  				Rectangle lineBackground = new Rectangle(  					drawRect.X + leftIndent' drawRect.Y' drawRect.Width - leftIndent - rightIndent'  					(lineRect.Bottom - drawRect.Y) + + bottomSpace + ((i < 2) ? kLineSpacing : 0));  				g.FillRectangle(new SolidBrush(m_cboBackground.ColorValue)' lineBackground);  				g.FillRectangle(SystemBrushes.WindowText' lineRect);    				// Adjust the drawRect to remove the space for the line just drawn  				int rectAdjust = (lineRect.Bottom + kLineSpacing + bottomSpace) - drawRect.Y;  				drawRect.Y += rectAdjust;  				drawRect.Height -= rectAdjust;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: for (int i = 0; i < 3; i++)  			{  				Rectangle lineRect;    				// Perform first line adjustments  				if (i == 0)  					lineRect = CalculateFirstLineRect(drawRect);  				else  					lineRect = CalculateFollowingLineRect(drawRect' i);    				// Handle the left and right indentation  				int leftIndent = m_nudLeftIndentation.MeasureValue / kmptPerPixel;  				if (!RtoL)  					lineRect.X += leftIndent;  				lineRect.Width -= leftIndent;    				int rightIndent = m_nudRightIndentation.MeasureValue / kmptPerPixel;  				if (RtoL)  					lineRect.X += rightIndent;  				lineRect.Width -= rightIndent;    				// On the last line' we need to add the paragraph trailing space to the background  				// and adjust the drawRect with it too.  				int bottomSpace = 0;  				if (i == 2)  					bottomSpace = m_nudAfter.MeasureValue / kmptPerPixel;    				// If the line spacing is other than single' then adjust the bottom space  				switch (m_cboLineSpacing.AdjustedSelectedIndex)  				{  					case 0: // unspecified  						Debug.Fail("Unspecified should never be selected.");  						break;    					case 1: // single  						break;    					case 2: // 1.5  						bottomSpace += (kLineSpacing / 2);  						break;    					case 3: // double  						bottomSpace += kLineSpacing;  						break;    					case kAtLeastIndex: // at least  					case kExactlyIndex: // exactly  						// only adjust for this at values above 12pt.  						int spaceAt = (m_nudSpacingAt.MeasureValue - 12000) / kmptPerPixel;  						if (spaceAt > 0)  							bottomSpace += spaceAt;  						break;  				}    				// Draw the background and the line  				Rectangle lineBackground = new Rectangle(  					drawRect.X + leftIndent' drawRect.Y' drawRect.Width - leftIndent - rightIndent'  					(lineRect.Bottom - drawRect.Y) + + bottomSpace + ((i < 2) ? kLineSpacing : 0));  				g.FillRectangle(new SolidBrush(m_cboBackground.ColorValue)' lineBackground);  				g.FillRectangle(SystemBrushes.WindowText' lineRect);    				// Adjust the drawRect to remove the space for the line just drawn  				int rectAdjust = (lineRect.Bottom + kLineSpacing + bottomSpace) - drawRect.Y;  				drawRect.Y += rectAdjust;  				drawRect.Height -= rectAdjust;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: for (int i = 0; i < 3; i++)  			{  				Rectangle lineRect;    				// Perform first line adjustments  				if (i == 0)  					lineRect = CalculateFirstLineRect(drawRect);  				else  					lineRect = CalculateFollowingLineRect(drawRect' i);    				// Handle the left and right indentation  				int leftIndent = m_nudLeftIndentation.MeasureValue / kmptPerPixel;  				if (!RtoL)  					lineRect.X += leftIndent;  				lineRect.Width -= leftIndent;    				int rightIndent = m_nudRightIndentation.MeasureValue / kmptPerPixel;  				if (RtoL)  					lineRect.X += rightIndent;  				lineRect.Width -= rightIndent;    				// On the last line' we need to add the paragraph trailing space to the background  				// and adjust the drawRect with it too.  				int bottomSpace = 0;  				if (i == 2)  					bottomSpace = m_nudAfter.MeasureValue / kmptPerPixel;    				// If the line spacing is other than single' then adjust the bottom space  				switch (m_cboLineSpacing.AdjustedSelectedIndex)  				{  					case 0: // unspecified  						Debug.Fail("Unspecified should never be selected.");  						break;    					case 1: // single  						break;    					case 2: // 1.5  						bottomSpace += (kLineSpacing / 2);  						break;    					case 3: // double  						bottomSpace += kLineSpacing;  						break;    					case kAtLeastIndex: // at least  					case kExactlyIndex: // exactly  						// only adjust for this at values above 12pt.  						int spaceAt = (m_nudSpacingAt.MeasureValue - 12000) / kmptPerPixel;  						if (spaceAt > 0)  							bottomSpace += spaceAt;  						break;  				}    				// Draw the background and the line  				Rectangle lineBackground = new Rectangle(  					drawRect.X + leftIndent' drawRect.Y' drawRect.Width - leftIndent - rightIndent'  					(lineRect.Bottom - drawRect.Y) + + bottomSpace + ((i < 2) ? kLineSpacing : 0));  				g.FillRectangle(new SolidBrush(m_cboBackground.ColorValue)' lineBackground);  				g.FillRectangle(SystemBrushes.WindowText' lineRect);    				// Adjust the drawRect to remove the space for the line just drawn  				int rectAdjust = (lineRect.Bottom + kLineSpacing + bottomSpace) - drawRect.Y;  				drawRect.Y += rectAdjust;  				drawRect.Height -= rectAdjust;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: for (int i = 0; i < 3; i++)  			{  				Rectangle lineRect;    				// Perform first line adjustments  				if (i == 0)  					lineRect = CalculateFirstLineRect(drawRect);  				else  					lineRect = CalculateFollowingLineRect(drawRect' i);    				// Handle the left and right indentation  				int leftIndent = m_nudLeftIndentation.MeasureValue / kmptPerPixel;  				if (!RtoL)  					lineRect.X += leftIndent;  				lineRect.Width -= leftIndent;    				int rightIndent = m_nudRightIndentation.MeasureValue / kmptPerPixel;  				if (RtoL)  					lineRect.X += rightIndent;  				lineRect.Width -= rightIndent;    				// On the last line' we need to add the paragraph trailing space to the background  				// and adjust the drawRect with it too.  				int bottomSpace = 0;  				if (i == 2)  					bottomSpace = m_nudAfter.MeasureValue / kmptPerPixel;    				// If the line spacing is other than single' then adjust the bottom space  				switch (m_cboLineSpacing.AdjustedSelectedIndex)  				{  					case 0: // unspecified  						Debug.Fail("Unspecified should never be selected.");  						break;    					case 1: // single  						break;    					case 2: // 1.5  						bottomSpace += (kLineSpacing / 2);  						break;    					case 3: // double  						bottomSpace += kLineSpacing;  						break;    					case kAtLeastIndex: // at least  					case kExactlyIndex: // exactly  						// only adjust for this at values above 12pt.  						int spaceAt = (m_nudSpacingAt.MeasureValue - 12000) / kmptPerPixel;  						if (spaceAt > 0)  							bottomSpace += spaceAt;  						break;  				}    				// Draw the background and the line  				Rectangle lineBackground = new Rectangle(  					drawRect.X + leftIndent' drawRect.Y' drawRect.Width - leftIndent - rightIndent'  					(lineRect.Bottom - drawRect.Y) + + bottomSpace + ((i < 2) ? kLineSpacing : 0));  				g.FillRectangle(new SolidBrush(m_cboBackground.ColorValue)' lineBackground);  				g.FillRectangle(SystemBrushes.WindowText' lineRect);    				// Adjust the drawRect to remove the space for the line just drawn  				int rectAdjust = (lineRect.Bottom + kLineSpacing + bottomSpace) - drawRect.Y;  				drawRect.Y += rectAdjust;  				drawRect.Height -= rectAdjust;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following statement contains a magic number: for (int i = 0; i < 3; i++)  			{  				Rectangle lineRect;    				// Perform first line adjustments  				if (i == 0)  					lineRect = CalculateFirstLineRect(drawRect);  				else  					lineRect = CalculateFollowingLineRect(drawRect' i);    				// Handle the left and right indentation  				int leftIndent = m_nudLeftIndentation.MeasureValue / kmptPerPixel;  				if (!RtoL)  					lineRect.X += leftIndent;  				lineRect.Width -= leftIndent;    				int rightIndent = m_nudRightIndentation.MeasureValue / kmptPerPixel;  				if (RtoL)  					lineRect.X += rightIndent;  				lineRect.Width -= rightIndent;    				// On the last line' we need to add the paragraph trailing space to the background  				// and adjust the drawRect with it too.  				int bottomSpace = 0;  				if (i == 2)  					bottomSpace = m_nudAfter.MeasureValue / kmptPerPixel;    				// If the line spacing is other than single' then adjust the bottom space  				switch (m_cboLineSpacing.AdjustedSelectedIndex)  				{  					case 0: // unspecified  						Debug.Fail("Unspecified should never be selected.");  						break;    					case 1: // single  						break;    					case 2: // 1.5  						bottomSpace += (kLineSpacing / 2);  						break;    					case 3: // double  						bottomSpace += kLineSpacing;  						break;    					case kAtLeastIndex: // at least  					case kExactlyIndex: // exactly  						// only adjust for this at values above 12pt.  						int spaceAt = (m_nudSpacingAt.MeasureValue - 12000) / kmptPerPixel;  						if (spaceAt > 0)  							bottomSpace += spaceAt;  						break;  				}    				// Draw the background and the line  				Rectangle lineBackground = new Rectangle(  					drawRect.X + leftIndent' drawRect.Y' drawRect.Width - leftIndent - rightIndent'  					(lineRect.Bottom - drawRect.Y) + + bottomSpace + ((i < 2) ? kLineSpacing : 0));  				g.FillRectangle(new SolidBrush(m_cboBackground.ColorValue)' lineBackground);  				g.FillRectangle(SystemBrushes.WindowText' lineRect);    				// Adjust the drawRect to remove the space for the line just drawn  				int rectAdjust = (lineRect.Bottom + kLineSpacing + bottomSpace) - drawRect.Y;  				drawRect.Y += rectAdjust;  				drawRect.Height -= rectAdjust;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,CalculateFirstLineRect,The following statement contains a magic number: if (m_cboSpecialIndentation.AdjustedSelectedIndex == 2)  			{  				mpt = m_nudIndentBy.MeasureValue;  				if (!RtoL)  					lineRect.X += (mpt / kmptPerPixel);  				lineRect.Width -= (mpt / kmptPerPixel);  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,CalculateFirstLineRect,The following statement contains a magic number: AdjustLineForFudge(ref lineRect' 24);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,CalculateFollowingLineRect,The following statement contains a magic number: if (m_cboSpecialIndentation.AdjustedSelectedIndex == 3)  			{  				int mpt = m_nudIndentBy.MeasureValue;  				if (!RtoL)  					lineRect.X += (mpt / kmptPerPixel);  				lineRect.Width -= (mpt / kmptPerPixel);  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,CalculateFollowingLineRect,The following statement contains a magic number: if (lineNumber == 2)  				AdjustLineForFudge(ref lineRect' 36);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,CalculateFollowingLineRect,The following statement contains a magic number: if (lineNumber == 2)  				AdjustLineForFudge(ref lineRect' 36);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following statement contains a magic number: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudIndentBy.MeasureMax = 216000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudRightIndentation.MeasureMax = 216000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudLeftIndentation.MeasureMax = 216000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudSpacingAt.MeasureMax = 50000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudAfter.MeasureMax = 50000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,InitializeComponent,The following statement contains a magic number: this.m_nudBefore.MeasureMax = 50000;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,OverflowContextMenuStrip,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\LocaleMenuButton.cs,CalculateOverflow,The following statement contains a magic number: for (; overflowIndex < totalItems - 2; ++overflowIndex)  			{  				ToolStripItem current = items[overflowIndex];  				ToolStripItem next = items[overflowIndex + 1];  				if (!current.Available)  					continue;    				height += GetTotalHeight(current);    				if (height + GetTotalHeight(next) + contextMenu.Padding.Bottom > maxHeight)  				{  					overflowNeeded = true;  					break;  				}  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,m_scriptName_TextChanged,The following statement contains a magic number: if (string.IsNullOrEmpty(scriptName))  			{  				ScriptName = "";  				m_scriptAbbrev.Text = "";  				m_scriptAbbrev.Enabled = false;  			}  			else  			{  				m_scriptAbbrev.Text = CultureInfo.InvariantCulture.TextInfo.ToTitleCase(GetValidAbbr(scriptName' 4));  				m_scriptAbbrev.Enabled = m_scriptName.Enabled; // true except for Zxxx for audio  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,m_regionName_TextChanged,The following statement contains a magic number: if (string.IsNullOrEmpty(regionName))  			{  				m_regionAbbrev.Text = "";  				m_regionAbbrev.Enabled = false;  			}  			else  			{  				m_regionAbbrev.Enabled = true;  				m_regionAbbrev.Text = GetValidAbbr(regionName' 2).ToUpperInvariant();  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,RegionVariantControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\RegionVariantControl.cs,m_variantName_TextChanged,The following statement contains a magic number: if (selIndex >= 0)  			{  				m_variantName.SelectedIndex = selIndex;  				m_variantAbbrev.Enabled = true;  				var variantSubtag = (VariantSubtag) m_variantName.Items[selIndex];  				if (variantSubtag == WellKnownSubtags.IpaPhonemicPrivateUse || variantSubtag == WellKnownSubtags.IpaPhoneticPrivateUse)  					m_variantAbbrev.Text = WellKnownSubtags.IpaVariant + "-x-" + variantSubtag.Code;  				else  					m_variantAbbrev.Text = variantSubtag.IsPrivateUse ? "x-" : variantSubtag.Code;  				m_variantAbbrev.Enabled = variantSubtag.IsPrivateUse && !StandardSubtags.CommonPrivateUseVariants.Contains(variantSubtag);  			}  			else if (string.IsNullOrEmpty(variantName))  			{  				m_variantAbbrev.Enabled = false;  				m_variantAbbrev.Text = "";  			}  			else  			{  				m_variantAbbrev.Enabled = true;  				m_variantAbbrev.Text = GetValidAbbr(variantName' 8).ToLowerInvariant();  			}
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleComboListHelper,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\StyleComboListHelper.cs,StyleComboListHelper,The following statement contains a magic number: comboBox.MaxDropDownItems = 30;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleComboListHelper,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\StyleComboListHelper.cs,CtrlDrawItem,The following statement contains a magic number: rc.X += 2;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleComboListHelper,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\StyleComboListHelper.cs,CtrlDrawItem,The following statement contains a magic number: if ((e.State & DrawItemState.ComboBoxEdit) == 0)  				e.Graphics.DrawImage(icon' rc.Left' rc.Top + (rc.Height - icon.Height) / 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleListBoxHelper,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\StyleListBoxHelper.cs,CtrlDrawItem,The following statement contains a magic number: rc.X += 2;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleListBoxHelper,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\StyleListBoxHelper.cs,CtrlDrawItem,The following statement contains a magic number: rc.Width -= 2;
Magic Number,SIL.FieldWorks.FwCoreDlgControls,StyleListBoxHelper,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleLists\StyleListBoxHelper.cs,CtrlDrawItem,The following statement contains a magic number: if ((e.State & DrawItemState.ComboBoxEdit) == 0)  				e.Graphics.DrawImage(icon' rc.Left' rc.Top + (rc.Height - icon.Height) / 2);
Magic Number,SIL.FieldWorks.FwCoreDlgControls,UpDownMeasureControl,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\UpDownMeasureControl.cs,NudgeValue,The following statement contains a magic number: double incrUnits = Math.Round(m_mptValue / MeasureIncrement' 5);
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,AppendUnderline,The following switch statement is missing a default case: switch (fontInfo.m_underline.Value)  					{  						case FwUnderlineType.kuntNone:  							sUnder = String.Format(FwCoreDlgControls.ksNoColorUnderline' sColor);  							break;  						case FwUnderlineType.kuntSingle:  							sUnder = String.Format(FwCoreDlgControls.ksSingleColorUnderline' sColor);  							break;  						case FwUnderlineType.kuntDouble:  							sUnder = String.Format(FwCoreDlgControls.ksDoubleColorUnderline' sColor);  							break;  						case FwUnderlineType.kuntDotted:  							sUnder = String.Format(FwCoreDlgControls.ksDottedColorUnderline' sColor);  							break;  						case FwUnderlineType.kuntDashed:  							sUnder = String.Format(FwCoreDlgControls.ksDashedColorUnderline' sColor);  							break;  						case FwUnderlineType.kuntStrikethrough:  							sUnder = String.Format(FwCoreDlgControls.ksColorStrikethrough' sColor);  							break;  					}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,AppendUnderline,The following switch statement is missing a default case: switch (fontInfo.m_underline.Value)  				{  					case FwUnderlineType.kuntNone:  						sUnder = FwCoreDlgControls.ksNoUnderline;  						break;  					case FwUnderlineType.kuntSingle:  						sUnder = FwCoreDlgControls.ksSingleUnderline;  						break;  					case FwUnderlineType.kuntDouble:  						sUnder = FwCoreDlgControls.ksDoubleUnderline;  						break;  					case FwUnderlineType.kuntDotted:  						sUnder = FwCoreDlgControls.ksDottedUnderline;  						break;  					case FwUnderlineType.kuntDashed:  						sUnder = FwCoreDlgControls.ksDashedUnderline;  						break;  					case FwUnderlineType.kuntStrikethrough:  						sUnder = FwCoreDlgControls.ksStrikethrough;  						break;  				}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FontInfoExtensions,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontInfoExtensions.cs,AppendSuperSub,The following switch statement is missing a default case: switch (value)  			{  				case FwSuperscriptVal.kssvOff:  					AppendToString(text' FwCoreDlgControls.ksNoSuperSubscript);  					break;  				case FwSuperscriptVal.kssvSub:  					AppendToString(text' FwCoreDlgControls.ksSubscript);  					break;  				case FwSuperscriptVal.kssvSuper:  					AppendToString(text' FwCoreDlgControls.ksSuperscript);  					break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboFontPosition_SelectedIndexChanged,The following switch statement is missing a default case: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 0: // Unspecified  					m_nudPositionAmount.MeasureValue = 0;  					m_nudPositionAmount.Text = string.Empty;  					break;  				case 1: // Normal  					m_nudPositionAmount.MeasureValue = 0;  					break;  				case 2: // Raised  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = 3000;  					else if (m_nudPositionAmount.MeasureValue < 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  				case 3: // Lowered  					if (m_nudPositionAmount.MeasureValue == 0)  						m_nudPositionAmount.MeasureValue = -3000;  					else if (m_nudPositionAmount.MeasureValue > 0)  						m_nudPositionAmount.MeasureValue *= -1;  					break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,m_cboUnderlineStyle_DrawItemForeground,The following switch statement is missing a default case: switch (e.Index + (ShowingInheritedProperties ? 0 : 1))  				{  					case 0:  					case 1:  					case 6:  						string text = (string)m_cboUnderlineStyle.Items[e.Index];  						e.Graphics.DrawString(text' e.Font' new SolidBrush(e.ForeColor)'  						new RectangleF(e.Bounds.X' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height));  						break;    					case 2:  						// single underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 3:  						// double underline  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 - 1);  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2 + 1);  						break;    					case 4:  						// dotted underline  						pen.DashStyle = DashStyle.Dot;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;    					case 5:  						// dashed underline  						pen.DashStyle = DashStyle.Dash;  						e.Graphics.DrawLine(pen'  						e.Bounds.X + lineMargin' e.Bounds.Y + e.Bounds.Height / 2'  						e.Bounds.Right - lineMargin' e.Bounds.Y + e.Bounds.Height / 2);  						break;  				}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,GetFontPosition,The following switch statement is missing a default case: switch (m_cboFontPosition.AdjustedSelectedIndex)  			{  				case 2: fontPos = m_nudPositionAmount.MeasureValue; break;  				case 3: fontPos = m_nudPositionAmount.MeasureValue; break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwFontAttributes,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwFontAttributes.cs,CheckSuperSubBoxes,The following switch statement is missing a default case: switch (fontInfo.m_superSub.Value)  				{  					case FwSuperscriptVal.kssvOff:  						m_chkSubscript.CheckState = CheckState.Unchecked;  						m_chkSuperscript.CheckState = CheckState.Unchecked;  						break;    					case FwSuperscriptVal.kssvSub:  						m_chkSubscript.CheckState = CheckState.Checked;  						m_chkSuperscript.CheckState = CheckState.Unchecked;  						break;    					case FwSuperscriptVal.kssvSuper:  						m_chkSubscript.CheckState = CheckState.Unchecked;  						m_chkSuperscript.CheckState = CheckState.Checked;  						break;  				}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendParagraphInfo,The following switch statement is missing a default case: switch (info.m_lineHeight)  					{  						case 10000: AppendItem(text' FwCoreDlgControls.ksSingleSpacing); break;  						case 15000: AppendItem(text' FwCoreDlgControls.ksPlusSpacing); break;  						case 20000: AppendItem(text' FwCoreDlgControls.ksDoubleSpacing); break;  					}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendRtl,The following switch statement is missing a default case: switch (m_rtl.Value)  			{  				case TriStateBool.triTrue:  					AppendItem(text' FwCoreDlgControls.ksRightToLeft); break;  				case TriStateBool.triFalse:  					AppendItem(text' FwCoreDlgControls.ksLeftToRight); break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,StyleInfo,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\StyleInfo.cs,AppendAlignment,The following switch statement is missing a default case: switch (m_alignment.Value)  			{  				case FwTextAlign.ktalCenter:  					AppendItem(text' FwCoreDlgControls.ksCenter);  					break;  				case FwTextAlign.ktalJustify:  					AppendItem(text' FwCoreDlgControls.ksJustify);  					break;  				case FwTextAlign.ktalLeading:  					AppendItem(text' FwCoreDlgControls.ksLeading);  					break;  				case FwTextAlign.ktalLeft:  					AppendItem(text' FwCoreDlgControls.ksLeft);  					break;  				case FwTextAlign.ktalRight:  					AppendItem(text' FwCoreDlgControls.ksRight);  					break;  				case FwTextAlign.ktalTrailing:  					AppendItem(text' FwCoreDlgControls.ksTrailing);  					break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,OnClick,The following switch statement is missing a default case: switch (valueLabelT.ToLowerInvariant())  					{  						case "true":  						case "yes":  						case "on":  						case "":  						{  							switch (valueLabelF.ToLowerInvariant())  							{  								case "false":  								case "no":  								case "off":  								case "":  									fBinary = true;  									break;  							}  						}  							break;  					}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FontFeaturesButton,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FontFeaturesButton.cs,OnClick,The following switch statement is missing a default case: switch (valueLabelF.ToLowerInvariant())  							{  								case "false":  								case "no":  								case "off":  								case "":  									fBinary = true;  									break;  							}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,UpdateBulletInfo,The following switch statement is missing a default case: switch (m_cboNumberScheme.SelectedIndex)  				{  					case 0: bulInfo.m_numberScheme = VwBulNum.kvbnArabic; break;  					case 1: bulInfo.m_numberScheme = VwBulNum.kvbnRomanUpper; break;  					case 2: bulInfo.m_numberScheme = VwBulNum.kvbnRomanLower; break;  					case 3: bulInfo.m_numberScheme = VwBulNum.kvbnLetterUpper; break;  					case 4: bulInfo.m_numberScheme = VwBulNum.kvbnLetterLower; break;  					case 5: bulInfo.m_numberScheme = VwBulNum.kvbnArabic01; break;  				}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwBulletsTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwBulletsTab.cs,m_cboNumberScheme_SelectedIndexChanged,The following switch statement is missing a default case: switch (m_cboNumberScheme.SelectedIndex)  			{  				case 0:		// 1' 2' 3'  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;    				case 1:		// I' II' III (Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.Roman;  					break;    				case 2:		// i' ii' iii (lower case Roman numerals)  					m_nudStartAt.Mode = DataUpDownMode.RomanLowerCase;  					break;    				case 3:		// A' B' C  					m_nudStartAt.Mode = DataUpDownMode.Letters;  					break;    				case 4:		// a' b' c  					m_nudStartAt.Mode = DataUpDownMode.LettersLowerCase;  					break;    				case 5:		// 01' 02' 03  					m_nudStartAt.Mode = DataUpDownMode.Normal;  					break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following switch statement is missing a default case: switch (styleInfo.IAlignment.Value)  			{  				case FwTextAlign.ktalLeading: m_cboAlignment.AdjustedSelectedIndex = 1; break;  				case FwTextAlign.ktalLeft: m_cboAlignment.AdjustedSelectedIndex = 2; break;  				case FwTextAlign.ktalCenter: m_cboAlignment.AdjustedSelectedIndex = 3; break;  				case FwTextAlign.ktalRight: m_cboAlignment.AdjustedSelectedIndex = 4; break;  				case FwTextAlign.ktalTrailing: m_cboAlignment.AdjustedSelectedIndex = 5; break;  				case FwTextAlign.ktalJustify: m_cboAlignment.AdjustedSelectedIndex = 6; break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,UpdateForStyle,The following switch statement is missing a default case: switch(info.m_lineHeight)  				{  					case 10000:	// single spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 1;  						break;  					case 15000:	// 1.5 line spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 2;  						break;  					case 20000:	// double spacing  						m_cboLineSpacing.AdjustedSelectedIndex = 3;  						break;  				}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following switch statement is missing a default case: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 1: newAlignment = FwTextAlign.ktalLeading; break;  				case 2: newAlignment = FwTextAlign.ktalLeft; break;  				case 3: newAlignment = FwTextAlign.ktalCenter; break;  				case 4: newAlignment = FwTextAlign.ktalRight; break;  				case 5: newAlignment = FwTextAlign.ktalTrailing; break;  				case 6: newAlignment = FwTextAlign.ktalJustify; break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following switch statement is missing a default case: switch (m_cboSpecialIndentation.AdjustedSelectedIndex)  			{  				case 2: newValue = m_nudIndentBy.MeasureValue; break;  				case 3: newValue = -m_nudIndentBy.MeasureValue; break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,SaveToInfo,The following switch statement is missing a default case: switch (index)  			{  				case 1:  // single spacing  					newLineHeight.m_lineHeight = 10000; break;  				case 2: // 1.5 spacing  					newLineHeight.m_lineHeight = 15000; break;  				case 3: // double spacing  					newLineHeight.m_lineHeight = 20000; break;  				case kAtLeastIndex: // at least  					newLineHeight.m_lineHeight = m_nudSpacingAt.MeasureValue; break;  				case kExactlyIndex: // exactly  					newLineHeight.m_lineHeight = -m_nudSpacingAt.MeasureValue; break;  			}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,DrawParaPreview,The following switch statement is missing a default case: switch (m_cboLineSpacing.AdjustedSelectedIndex)  				{  					case 0: // unspecified  						Debug.Fail("Unspecified should never be selected.");  						break;    					case 1: // single  						break;    					case 2: // 1.5  						bottomSpace += (kLineSpacing / 2);  						break;    					case 3: // double  						bottomSpace += kLineSpacing;  						break;    					case kAtLeastIndex: // at least  					case kExactlyIndex: // exactly  						// only adjust for this at values above 12pt.  						int spaceAt = (m_nudSpacingAt.MeasureValue - 12000) / kmptPerPixel;  						if (spaceAt > 0)  							bottomSpace += spaceAt;  						break;  				}
Missing Default,SIL.FieldWorks.FwCoreDlgControls,FwParagraphTab,C:\repos\sillsdev_FieldWorks\Src\FwCoreDlgs\FwCoreDlgControls\FwParagraphTab.cs,AdjustLineForFudge,The following switch statement is missing a default case: switch (m_cboAlignment.AdjustedSelectedIndex)  			{  				case 0: // unspecified: Get from the inherited stuff -- this should probably never happen  					break;    				case 1: // leading  					if (RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 2: // left  					lineRect.Width -= lineFudge;  					break;    				case 3: // centered  					lineRect.X += lineFudge / 2;  					lineRect.Width -= lineFudge;  					break;    				case 4: // right  					lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 5: // trailing  					if (!RtoL)  						lineRect.X += lineFudge;  					lineRect.Width -= lineFudge;  					break;    				case 6: // justified  					break;  			}
