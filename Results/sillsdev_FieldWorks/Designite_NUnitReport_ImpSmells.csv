Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NUnitReport,ReportGenerator,C:\repos\sillsdev_FieldWorks\Build\Src\NUnitReport\ReportGenerator.cs,ParseArgs,Cyclomatic complexity of the method is 9
Long Statement,NUnitReport,Program,C:\repos\sillsdev_FieldWorks\Build\Src\NUnitReport\Program.cs,GenerateUsageReport,The length of the statement  "			Console.WriteLine("'projectname'.dll-nunit-output.xml for each test project name. A build with /p:action=test or /p:action=cover is a prereq."); " is 144.
Long Statement,NUnitReport,StubBuildEngine,C:\repos\sillsdev_FieldWorks\Build\Src\NUnitReport\StubBuildEngine.cs,MessageIsImportantEnough,The length of the statement  "				(Verbosity == LoggerVerbosity.Normal || Verbosity == LoggerVerbosity.Detailed || Verbosity == LoggerVerbosity.Diagnostic)) " is 122.
Complex Conditional,NUnitReport,StubBuildEngine,C:\repos\sillsdev_FieldWorks\Build\Src\NUnitReport\StubBuildEngine.cs,MessageIsImportantEnough,The conditional expression  "messageImportance == MessageImportance.Normal &&  				(Verbosity == LoggerVerbosity.Normal || Verbosity == LoggerVerbosity.Detailed || Verbosity == LoggerVerbosity.Diagnostic)"  is complex.
Magic Number,NUnitReport,ReportGenerator,C:\repos\sillsdev_FieldWorks\Build\Src\NUnitReport\ReportGenerator.cs,RunDotCover,The following statement contains a magic number: try  			{  				process.Start();  				process.WaitForExit(30 * 60 * 1000);  			}  			catch (Exception ex)  			{  				throw new Exception(String.Format("Got exception starting {0}"' process.StartInfo.FileName)' ex);  			}
Magic Number,NUnitReport,ReportGenerator,C:\repos\sillsdev_FieldWorks\Build\Src\NUnitReport\ReportGenerator.cs,RunDotCover,The following statement contains a magic number: try  			{  				process.Start();  				process.WaitForExit(30 * 60 * 1000);  			}  			catch (Exception ex)  			{  				throw new Exception(String.Format("Got exception starting {0}"' process.StartInfo.FileName)' ex);  			}
Magic Number,NUnitReport,ReportGenerator,C:\repos\sillsdev_FieldWorks\Build\Src\NUnitReport\ReportGenerator.cs,RunDotCover,The following statement contains a magic number: try  			{  				process.Start();  				process.WaitForExit(30 * 60 * 1000);  			}  			catch (Exception ex)  			{  				throw new Exception(String.Format("Got exception starting {0}"' process.StartInfo.FileName)' ex);  			}
Magic Number,NUnitReport,ReportGenerator,C:\repos\sillsdev_FieldWorks\Build\Src\NUnitReport\ReportGenerator.cs,RunDotCover,The following statement contains a magic number: try  			{  				process.Start();  				process.WaitForExit(30 * 60 * 1000);  			}  			catch (Exception ex)  			{  				throw new Exception(String.Format("Got exception starting {0}"' process.StartInfo.FileName)' ex);  			}
Magic Number,NUnitReport,ReportGenerator,C:\repos\sillsdev_FieldWorks\Build\Src\NUnitReport\ReportGenerator.cs,RunDotCover,The following statement contains a magic number: try  			{  				process.Start();  				process.WaitForExit(30 * 60 * 1000);  			}  			catch (Exception ex)  			{  				throw new Exception(String.Format("Got exception starting {0}"' process.StartInfo.FileName)' ex);  			}
Magic Number,NUnitReport,ReportGenerator,C:\repos\sillsdev_FieldWorks\Build\Src\NUnitReport\ReportGenerator.cs,RunDotCover,The following statement contains a magic number: try  			{  				process.Start();  				process.WaitForExit(30 * 60 * 1000);  			}  			catch (Exception ex)  			{  				throw new Exception(String.Format("Got exception starting {0}"' process.StartInfo.FileName)' ex);  			}
Missing Default,NUnitReport,ReportGenerator,C:\repos\sillsdev_FieldWorks\Build\Src\NUnitReport\ReportGenerator.cs,GenerateReport,The following switch statement is missing a default case: switch (m_reportType)  			{  				case ReportType.NUnit:  				{  					var reportTask = new GenerateNUnitReports();  					reportTask.HostObject = this;  					reportTask.BuildEngine = new StubBuildEngine(m_verbosity);  					reportTask.Log.InitializeLifetimeService();  					reportTask.ReportFiles = DelimitedStringFromListOfProjects();  					reportTask.Execute();  					break;  				}  				case ReportType.DotCover:  				{  					CompileDotCoverReport();  					break;  				}  			}
