Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoReferenceVectorElement,The method has 126 lines of code.
Long Method,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoObjectVectorElement,The method has 115 lines of code.
Long Method,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoChildren,The method has 107 lines of code.
Complex Method,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DumpObject,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoCustomElements,Cyclomatic complexity of the method is 12
Complex Method,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoMultilingualStringElement,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetDesiredWritingSystemsList,Cyclomatic complexity of the method is 13
Complex Method,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoNumberElement,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,WriteLiftTsStringContent,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoReferenceObjVectorElement,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoReferenceVectorElement,Cyclomatic complexity of the method is 19
Complex Method,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,ProcessSingleLexReferences,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,IsOwningField,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,GetFxtFieldNode,Cyclomatic complexity of the method is 8
Long Parameter List,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,writeCustomStringAlternativeToSFM,The method has 5 parameters. Parameters: currentObject' flid' ws' name' contentsStream
Long Parameter List,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,TryWriteStringAlternative,The method has 6 parameters. Parameters: orange' ws' name' internalElementName' contentsStream' fLeadingNewline
Long Parameter List,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,WriteString,The method has 5 parameters. Parameters: s' name' ws' internalElementName' contentsStream
Long Parameter List,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,WriteStringXml,The method has 5 parameters. Parameters: s' name' ws' internalElementName' contentsStream
Long Parameter List,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,WriteTsStringXml,The method has 5 parameters. Parameters: tss' name' ws' internalElementName' contentsStream
Long Parameter List,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetRefPropertyData,The method has 5 parameters. Parameters: property' wsProp' hvo' labelWs' sData
Long Parameter List,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,UpdateOwningAtomic,The method has 5 parameters. Parameters: sClassName' flid' sFieldName' hvoItem' fxtResult
Long Parameter List,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,GetFxtFieldNodeForOwningAtomic,The method has 6 parameters. Parameters: sFieldName' ksObjAtomic' ksGroup' sClassName' sFxtParentName' searchPropsFound
Long Parameter List,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,UpdateReferenceAtomic,The method has 5 parameters. Parameters: sClassName' flid' sFieldName' hvoItem' fxtResult
Long Parameter List,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,UpdateOwningVector,The method has 6 parameters. Parameters: sClassName' flid' sFieldName' hvoItem' fieldType' fxtResult
Long Parameter List,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,UpdateReferenceVector,The method has 5 parameters. Parameters: sClassName' flid' sFieldName' hvoItem' fxtResult
Long Parameter List,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,HandleVectorAdditions,The method has 7 parameters. Parameters: fxtResult' resultNode' sFxtItemLabel' hvosResult' hvosDatabase' sParentName' fIsRefVector
Long Parameter List,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,InsertReferencedItemInResult,The method has 5 parameters. Parameters: hvo' resultNode' sParentName' sFxtItemLabel' obj
Long Parameter List,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,HandleOwningVectorDeletions,The method has 5 parameters. Parameters: fxtResult' resultNode' hvosResult' hvosDatabase' flid
Long Parameter List,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,GetFxtNodeAndFxtItemLabel,The method has 7 parameters. Parameters: sClassName' flid' sFieldName' fieldType' sResultOwningElementName' fIsRefVector' sFxtItemLabel
Long Parameter List,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,GetFxtFieldNode,The method has 5 parameters. Parameters: sClassName' searchProps' sResultOwningElementName' searchPropsFound' sAttrValueFound
Long Identifier,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,,The length of the parameter m_requireClassTemplatesForEverything is 36.
Long Identifier,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,,The length of the parameter m_doUseBaseClassTemplatesIfNeeded is 33.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoTemplateElement,The length of the statement  "			string style = XmlUtils.GetOptionalAttributeValue(m_templateRootNode' "writingSystemAttributeStyle"' WritingSystemAttrStyles.FieldWorks.ToString()); " is 148.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoTemplateElement,The length of the statement  "			string sFormatOutput = XmlUtils.GetOptionalAttributeValue(m_templateRootNode' "stringFormatOutputStyle"' StringFormatOutputStyle.None.ToString()); " is 146.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FindClassTemplateNode,The length of the statement  "			} while (m_doUseBaseClassTemplatesIfNeeded && searchType != typeof(object) && !m_classNameToclassNode.ContainsKey(sSearchKey)); " is 127.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DumpObject,The length of the statement  "						using (var writer = XmlWriter.Create(contentsStream' new XmlWriterSettings { OmitXmlDeclaration = true' ConformanceLevel = ConformanceLevel.Fragment })) " is 152.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,CollectCallElementAttributes,The length of the statement  "				return;//	throw new RuntimeConfigurationException("Did not find a <class> element matching the root object type of "+className+"."); " is 132.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoCallElement,The length of the statement  "				return;//	throw new RuntimeConfigurationException("Did not find a <class> element matching the root object type of "+className+"."); " is 132.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetIntValueForTest,The length of the statement  "					throw new ApplicationException(string.Format("There was an error while trying to get the property {0}. One thing that has caused this in the past has been a database which was not migrated properly."' sField)' error); " is 217.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetStringValueForTest,The length of the statement  "					throw new ApplicationException(string.Format("There was an error while trying to get the property {0}. One thing that has caused this in the past has been a database which was not migrated properly."' sField)' error); " is 217.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetObjectForTest,The length of the statement  "					throw new ApplicationException(string.Format("There was an error while trying to get the property {0}. One thing that has caused this in the past has been a database which was not migrated properly."' sField)' error); " is 217.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,WriteStringXml,The length of the statement  "			using (var writer = XmlWriter.Create(contentsStream' new XmlWriterSettings { OmitXmlDeclaration = true' ConformanceLevel = ConformanceLevel.Fragment })) " is 152.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,WriteTsStringXml,The length of the statement  "			using (var writer = XmlWriter.Create(contentsStream' new XmlWriterSettings { OmitXmlDeclaration = true' ConformanceLevel = ConformanceLevel.Fragment })) " is 152.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoStringElement,The length of the statement  "				using (var writer = XmlWriter.Create(contentsStream' new XmlWriterSettings { OmitXmlDeclaration = true' ConformanceLevel = ConformanceLevel.Fragment })) " is 152.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,WriteStringOutput,The length of the statement  "			using (var writer = XmlWriter.Create(outputStream' new XmlWriterSettings {OmitXmlDeclaration = true' ConformanceLevel = ConformanceLevel.Fragment})) " is 148.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoReferenceVectorElement,The length of the statement  "					throw new ConfigurationException ("There is no field named '" + field + "' in "+currentObject.GetType().ToString()+". Remember that fields are the actual CELLAR names' so they do not have FDO suffixes like OA or RS."); " is 218.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetSingleWritingSystemDescriptor,The length of the statement  "							"Cannot understand this writing system name. Use 'analysis'' 'vernacular'' or one of the SpecialWritingSystemCodes."' e); " is 121.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetProperty,The length of the statement  "			PropertyInfo info = type.GetProperty(property' BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy); " is 124.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetProperty,The length of the statement  "				throw new ConfigurationException("There is no public property named '" + property + "' in " + type.ToString() + ". Remember' properties often end in a two-character suffix such as OA'OS'RA' or RS."); " is 199.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetProperty,The length of the statement  "				throw new ApplicationException (string.Format("There was an error while trying to get the property {0}. One thing that has caused this in the past has been a database which was not migrated properly."' property)' error); " is 220.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetMethodResult,The length of the statement  "				throw new ApplicationException (string.Format("There was an error while executing the method {0}."' methodName)' error); " is 120.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetStringOfProperty,The length of the statement  "					SpecialWritingSystemCodes code = (SpecialWritingSystemCodes)Enum.Parse(typeof (SpecialWritingSystemCodes)' alternative.ToString()); " is 131.
Long Statement,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetStringOfProperty,The length of the statement  "			throw new ConfigurationException ("Sorry' XDumper can not yet handle attributes of this class: '"+type.ToString()+"'."); " is 120.
Long Statement,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,UpdateOwningAtomic,The length of the statement  "			XmlNode fxtFieldNode = GetFxtFieldNodeForOwningAtomic(sFieldName' ksObjAtomic' ksGroup' sClassName' out sFxtParentName' out searchPropsFound); " is 142.
Long Statement,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,UpdateReferenceAtomic,The length of the statement  "			XmlNode fxtFieldNode = GetFxtFieldNode(sClassName' searchPropsList' out sFxtParentName' out searchPropsFound' out sAttrValueFound); " is 131.
Long Statement,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,UpdateOwningVector,The length of the statement  "			XmlNode fxtFieldNode = GetFxtNodeAndFxtItemLabel(sClassName' flid' sFieldName' fieldType' out sResultOwningElementName' out fIsRefVector' out sFxtItemLabel); " is 157.
Long Statement,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,UpdateOwningVector,The length of the statement  "			HandleVectorAdditions(fxtResult' resultNode' sFxtItemLabel' hvosResult' hvosDatabase' sResultOwningElementName' fIsRefVector); " is 126.
Long Statement,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,HandleDaughterDeletions,The length of the statement  "					// remember the nodes to delete and then delete them later; if we delete them now' we delete a node in the foreach loop! " is 120.
Long Statement,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,GetHvosInDatabase,The length of the statement  "				return m_cache.ServiceLocator.GetInstance<IPhEnvironmentRepository>().AllValidInstances().Select(env => env.Hvo).ToList(); " is 122.
Long Statement,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,GetFxtFieldNode,The length of the statement  "			return GetFxtFieldNode(sClassName' searchProps' out sResultOwningElementName' out searchPropsFound' out sAttrValuefound); " is 121.
Long Statement,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,GetFxtFieldNode,The length of the statement  "			return GetFxtFieldNode(sClassName' searchProps' out sResultOwningElementName' out searchPropsFound' out sAttrValuefound); " is 121.
Long Statement,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,GetFxtFieldNode,The length of the statement  "				throw new XUpdaterException("Could not find class " + sClassName + " in FXT document " + m_sTemplateFilePath + " while getting field node."); " is 141.
Long Statement,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,GetFxtFieldNode,The length of the statement  "				fieldNode = GetFxtFieldNode(nameAttr.InnerText' searchProps' out sResultOwningElementName' out searchPropsFound' out sAttrValueFound); " is 134.
Long Statement,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,UpdateString,The length of the statement  "			fxtFieldNode = GetFxtFieldNode(sClassName' searchPropsList' out sResultOwningElementName' out searchPropsFound' out sAttrValueFound); " is 133.
Complex Conditional,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoCustomElements,The conditional expression  "(sType == "simplestring" &&  						cpt != CellarPropertyType.Unicode &&  						cpt != CellarPropertyType.String) ||  						(sType == "mlstring" &&  						cpt != CellarPropertyType.MultiString &&  						cpt != CellarPropertyType.MultiUnicode)"  is complex.
Complex Conditional,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoReferenceObjVectorElement,The conditional expression  "sVirtual == "true" || sVirtual == "t" || sVirtual == "yes" || sVirtual == "y""  is complex.
Complex Conditional,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,PropertyIsRealSeqOrCollection,The conditional expression  "property != null && property.Length > 2 &&  				(property.EndsWith("OC") || property.EndsWith("OS"))"  is complex.
Complex Conditional,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoObjectVectorElement,The conditional expression  "(fTryVirtual && m_flidVirtual != 0 && m_sdaVirtual != null) ||  				PropertyIsRealSeqOrCollection(currentObject' property' out flid)"  is complex.
Empty Catch Block,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,PropertyIsRealSeqOrCollection,The method has an empty catch block.
Empty Catch Block,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetCustomFieldValue,The method has an empty catch block.
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoTemplateElement,The following statement contains a magic number: if (!String.IsNullOrEmpty(sProgressMsgId) && SetProgressMessage != null)  			{  				var ma = new ProgressMessageArgs  					{  						MessageId = sProgressMsgId'  						Max = XmlUtils.GetOptionalIntegerValue(m_templateRootNode' "progressMax"' 20)  					};  				SetProgressMessage.Invoke(this' ma);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,IntEqualsTestPasses,The following statement contains a magic number: int intValue = XmlUtils.GetOptionalIntegerValue(node' "intequals"' -2);
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,IntEqualsTestPasses,The following statement contains a magic number: int intValue2 = XmlUtils.GetOptionalIntegerValue(node' "intequals"' -3);
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,LengthEqualsTestPasses,The following statement contains a magic number: int intValue = XmlUtils.GetOptionalIntegerValue(node' "lengthequals"' -2);
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,LengthEqualsTestPasses,The following statement contains a magic number: int intValue2 = XmlUtils.GetOptionalIntegerValue(node' "lengthequals"' -3);
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetFlidAndHvo,The following statement contains a magic number: if (xa == null)  			{  				string sClass = XmlUtils.GetOptionalAttributeValue(node' "class");  				string sFieldPath = XmlUtils.GetOptionalAttributeValue(node' "field");  				string[] rgsFields = sFieldPath.Split(new char[] { '/' });  				for (int i = 0; i < rgsFields.Length; i++)  				{  					if (i > 0)  					{  						hvo = currentObject.Cache.DomainDataByFlid.get_ObjectProp(hvo' flid);  						if (hvo == 0)  							return -1;  					}  					if (sClass == null || sClass.Length == 0)  					{  						flid = GetFieldId2(m_cmObjectRepository.GetObject(hvo).ClassID' rgsFields[i]' true);  					}  					else  					{  						flid = GetFieldId(sClass' rgsFields[i]' true);  						if (flid != 0)  						{  							// And cache it for next time if possible...  							// Can only do this if it doesn't depend on the current object.  							// (Hence we only do this here where there was an explicit "class" attribute'  							// not in the branch where we looked up the class on the object.)  							XmlNode xmldocT = node;  							while (xmldocT != null && !(xmldocT is XmlDocument))  								xmldocT = xmldocT.ParentNode;  							if (xmldocT != null)  							{  								XmlDocument xmldoc = (XmlDocument)xmldocT;  								XmlAttribute xaT = xmldoc.CreateAttribute("flid");  								xaT.Value = flid.ToString();  								node.Attributes.Prepend(xaT);  							}  						}  					}  					sClass = null;  				}  			}  			else  			{  				flid = Convert.ToInt32(xa.Value' 10);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetFieldId2,The following statement contains a magic number: if (fieldName.EndsWith("RC") || fieldName.EndsWith("RS") || fieldName.EndsWith("RA"))  				fieldName = fieldName.Remove(fieldName.Length - 2);  			else if (fieldName.EndsWith("OC") || fieldName.EndsWith("OS") || fieldName.EndsWith("OA"))  				fieldName = fieldName.Remove(fieldName.Length - 2);
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetFieldId2,The following statement contains a magic number: if (fieldName.EndsWith("RC") || fieldName.EndsWith("RS") || fieldName.EndsWith("RA"))  				fieldName = fieldName.Remove(fieldName.Length - 2);  			else if (fieldName.EndsWith("OC") || fieldName.EndsWith("OS") || fieldName.EndsWith("OA"))  				fieldName = fieldName.Remove(fieldName.Length - 2);
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DetermineCustomFields,The following statement contains a magic number: for (int i = 0; i < flids.Length; ++i)  			{  				int flid = flids[i];  				if (m_mdc.IsCustom(flid))  				{  					string sField = m_mdc.GetFieldName(flid);  					int clid = flid / 1000;  					int[] clids = m_mdc.GetAllSubclasses(clid);  					for (int j = 0; j < clids.Length; ++j)  					{  						string sClass = m_mdc.GetClassName(clids[j]);  						string sKey = String.Format("{0}_{1}"' sClass' sField);  						m_customFlidMap.Add(sKey' flid);  					}  					string sfMarker = String.Format("z{0}"' m_cCustom.ToString());  					m_customSfms.Add(flid' sfMarker);  					++m_cCustom;  				}  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following statement contains a magic number: if (node.NodeType == XmlNodeType.Text)  			{  				StringBuilder sb = new StringBuilder();  				int type = m_mdc.GetFieldType(flid);  				string sType = type.ToString();  				// unfortunately' the kcpt values coincide with some kclid values' so we can't  				// use the neat' easy trick to convert from the integer to the string that we  				// use for the ws value.  :-(  				switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}  				sb.AppendFormat("Type={0}"' sType);  				int ws = m_mdc.GetFieldWs(flid);  				if (ws < 0)  				{  					sb.AppendFormat("; WsSelector={0}"' WritingSystemServices.GetMagicWsNameFromId(ws));  				}  				else if (ws > 0)  				{  					sb.AppendFormat("; WsSelector={0}"'  						m_cache.WritingSystemFactory.GetStrFromWs(ws));  				}  				int clidDst = m_mdc.GetDstClsId(flid);  				if (clidDst > 0)  				{  					sb.AppendFormat("; DstCls={0}"' m_mdc.GetClassName(clidDst));  				}  				node.Value = node.Value.Replace("${definition}"' sb.ToString());  			}  			else  			{  				foreach (XmlNode xn in node.ChildNodes)  					FillInCustomFieldDefinition(xn' flid);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoNumberElement,The following statement contains a magic number: if (ifnotequalVal != null)  			{  				int n = Convert.ToInt32(ifnotequalVal' 10);  				if (nVal == n)  					return;  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoNumberElement,The following statement contains a magic number: if (iflessVal != null)  			{  				int n = Convert.ToInt32(iflessVal' 10);  				if (nVal >= n)  					return;  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoNumberElement,The following statement contains a magic number: if (ifgreaterVal != null)  			{  				int n = Convert.ToInt32(ifgreaterVal' 10);  				if (nVal <= n)  					return;  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,PropertyIsRealSeqOrCollection,The following statement contains a magic number: if (property != null && property.Length > 2 &&  				(property.EndsWith("OC") || property.EndsWith("OS")))  			{  				string propName = property.Substring(0' property.Length - 2);  				try  				{  					flid = GetFieldId2(currentObject.ClassID' propName' true);  					return true;  				}  				catch  				{  				}  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,PropertyIsRealSeqOrCollection,The following statement contains a magic number: if (property != null && property.Length > 2 &&  				(property.EndsWith("OC") || property.EndsWith("OS")))  			{  				string propName = property.Substring(0' property.Length - 2);  				try  				{  					flid = GetFieldId2(currentObject.ClassID' propName' true);  					return true;  				}  				catch  				{  				}  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetProperty,The following statement contains a magic number: if (info == null && property.EndsWith(".Hvo"))  			{  				fWantHvo = true;  				string realprop = property.Substring(0' property.Length - 4);  				info = type.GetProperty(realprop' BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy);  			}
Magic Number,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetStringOfProperty,The following statement contains a magic number: if (propertyObject is IMultiUnicode)  			{  				var accessor = (IMultiUnicode)propertyObject;    				if (alternative <= (int)SpecialWritingSystemCodes.BestAnalysis)  				{  					SpecialWritingSystemCodes code = (SpecialWritingSystemCodes)Enum.Parse(typeof (SpecialWritingSystemCodes)' alternative.ToString());  					return ConvertNoneFoundStringToBlank(accessor.GetAlternative(code));  				}  				else  				{  					ITsString tss = accessor.get_String(alternative);  					if (tss.Length == 0)  						return null;  					else  						return tss.Text;  				}  			}  			else if (propertyObject is IMultiStringAccessor)  			{  				var accessor = (IMultiStringAccessor) propertyObject;  				if (alternative <= (int)SpecialWritingSystemCodes.BestAnalysis)  				{  					return ConvertNoneFoundStringToBlank(accessor.BestAnalysisAlternative.Text);  				}  				else  				{  					ITsString tss = accessor.get_String(alternative);  					if (tss.Length == 0)  						return null;  					else  						return tss.Text;  				}  			}  			else if (type == typeof(Dictionary<string' string>))  			{  				Dictionary<string' string> dict = (Dictionary<string' string>)propertyObject;  				string value;    				CoreWritingSystemDefinition ws = FindWritingSystem(alternative);  				if (dict.TryGetValue(ws.Abbreviation' out value))  				{  					return value;  				}  				else  				{  					return null;  				}  			}  			else if (type == typeof(String))  			{  				return propertyObject.ToString();  			}  			else if (propertyObject is ITsString)  			{  				ITsString contents = (ITsString)propertyObject;  				return contents.Text;  			}  			else if (type == typeof(int))  			{  				return propertyObject.ToString();  			}  			else if (type == typeof(bool))  			{  				return ((bool)propertyObject) ? "1" : "0";  			}  			else if (type == typeof(DateTime))  			{  				var dt = (DateTime)propertyObject;  				if (dt.Year > 1900)		// Converting 1/1/1 to local time crashes.  					dt = dt.ToLocalTime();  				string s;  				if(alternative==1)  					s = dt.ToString("yyyy-MM-dd");  				else  					s = dt.ToString("dd/MMM/yyyy");  				return s;  			}  			else if (type == typeof(Guid))  			{  				return propertyObject.ToString();  			}  			else if (propertyObject is CoreWritingSystemDefinition)  			{  				return ((CoreWritingSystemDefinition) propertyObject).Id;  			}
Magic Number,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,GetFxtFieldNodeForOwningAtomic,The following statement contains a magic number: string[] asAttributeValues = new string[3];
Magic Number,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,GetFxtFieldNodeForOwningAtomic,The following statement contains a magic number: List<FXTElementSearchProperties> searchPropsList = new List<FXTElementSearchProperties>(2);
Magic Number,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,UpdateReferenceAtomic,The following statement contains a magic number: string[] asAttributeValues = new string[2];
Magic Number,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,UpdateReferenceAtomic,The following statement contains a magic number: List<FXTElementSearchProperties> searchPropsList = new List<FXTElementSearchProperties>(2);
Magic Number,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,GetFxtNodeAndFxtItemLabel,The following statement contains a magic number: List<FXTElementSearchProperties> searchPropsList = new List<FXTElementSearchProperties>(2);
Magic Number,SIL.FieldWorks.Common.FXT,XUpdater,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XUpdater.cs,UpdateString,The following statement contains a magic number: List<FXTElementSearchProperties> searchPropsList = new List<FXTElementSearchProperties>(2);
Missing Default,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,FillInCustomFieldDefinition,The following switch statement is missing a default case: switch (type)  				{  					case 0: sType = "Nil"; break;  					case 1: sType = "Boolean"; break;  					case 2: sType = "Integer"; break;  					case 3: sType = "Numeric"; break;  					case 4: sType = "Float"; break;  					case 5: sType = "Time"; break;  					case 6: sType = "Guid"; break;  					case 7: sType = "Image"; break;  					case 8: sType = "GenDate"; break;  					case 9: sType = "Binary"; break;  					case 13: sType = "String"; break;  					case 14: sType = "MultiString"; break;  					case 15: sType = "Unicode"; break;  					case 16: sType = "MultiUnicode"; break;  					case 23: sType = "OwningAtom"; break;  					case 24: sType = "ReferenceAtom"; break;  					case 25: sType = "OwningCollection"; break;  					case 26: sType = "ReferenceCollection"; break;  					case 27: sType = "OwningSequence"; break;  					case 28: sType = "ReferenceSequence"; break;  				}
Missing Default,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,DoCustomStringElement,The following switch statement is missing a default case: switch (cpt)  			{  			case CellarPropertyType.Unicode:  				s = m_cache.DomainDataByFlid.get_UnicodeProp(currentObject.Hvo' flid);  				break;  			case CellarPropertyType.String:  				ITsString tss = m_cache.DomainDataByFlid.get_StringProp(currentObject.Hvo' flid);  				if (tss != null)  					s = tss.Text;  				break;  			}
Missing Default,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,WriteStringStartElements,The following switch statement is missing a default case: switch (m_writingSystemAttrStyle)  				{  					case WritingSystemAttrStyles.LIFT:  						writer.WriteAttributeString("lang"' ws.Id);  						break;  					case WritingSystemAttrStyles.FieldWorks:  						writer.WriteAttributeString("ws"' ws.Abbreviation);  						break;  				}
Missing Default,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,PropertyIsVirtual,The following switch statement is missing a default case: switch (property)  				{  					case "TypeName":  					case "TypeAbbreviation":  					case "CrossReference":  					case "CrossReferenceGloss":  						return true;  				}
Missing Default,SIL.FieldWorks.Common.FXT,XDumper,C:\repos\sillsdev_FieldWorks\Src\FXT\FxtDll\XDumper.cs,GetCustomFieldValue,The following switch statement is missing a default case: switch (type)  					{  						case CellarPropertyType.String:  							return m_cache.DomainDataByFlid.get_StringProp(target.Hvo' flid);  						case CellarPropertyType.MultiUnicode:  						case CellarPropertyType.MultiString:  							return m_cache.DomainDataByFlid.get_MultiStringProp(target.Hvo' flid);  					}
