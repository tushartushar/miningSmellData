Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.ParatextLexiconPlugin,ChooseFdoProjectForm,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\ChooseFdoProjectForm.cs,InitializeComponent,The method has 160 lines of code.
Complex Method,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,GetMatchingEntryFromStemmer,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,PropChanged,Cyclomatic complexity of the method is 16
Long Parameter List,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,ChooseFdoProjectForm,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\ChooseFdoProjectForm.cs,btnOk_Click,The length of the statement  "				if (!m_cacheCache.Contains(m_selectedItem.ToString()) && ProjectLockingService.IsProjectLocked(m_selectedItem.FullName)) " is 120.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,ChooseFdoProjectForm,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\ChooseFdoProjectForm.cs,btnBrowse_Click,The length of the statement  "				openDialog.InitialDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)' "My FieldWorks"' "Backups"); " is 137.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,ChooseFdoProjectForm,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\ChooseFdoProjectForm.cs,radio_CheckedChanged,The length of the statement  "			btnOk.Enabled = (radioExisting.Checked && listBox.SelectedIndex > -1) || (radioRestore.Checked && textBoxProjectName.Text.Any()); " is 129.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,ChooseFdoProjectForm,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\ChooseFdoProjectForm.cs,AddProject,The length of the statement  "			LanguageProjectInfo existingItem = listBox.Items.Cast<LanguageProjectInfo>().FirstOrDefault(item => item.ToString() == languageProjectInfo.ToString()); " is 151.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,ChooseFdoProjectForm,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\ChooseFdoProjectForm.cs,SetupRestore,The length of the statement  "				MessageBox.Show(Strings.ksBackupFileProblemText' Strings.ksBackupFileProblemCaption' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 135.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,ChooseFdoProjectForm,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\ChooseFdoProjectForm.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ChooseFdoProjectForm)); " is 140.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexEntryLexeme,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexEntryLexeme.cs,GetLexReferenceName,The length of the statement  "				case LexRefTypeTags.MappingTypes.kmtEntryOrSenseAsymmetricPair: // Entry or sense Pair with different Forward/Reverse names " is 123.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,FindMatchingLexemes,The length of the statement  "				.FindEntriesForWordform(m_cache' TsStringUtils.MakeString(wordForm.Normalize(NormalizationForm.FormD)' DefaultVernWs)' null' ref duplicates) " is 140.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,GetWordAnalyses,The length of the statement  "			foreach (IWfiAnalysis analysis in wordform.AnalysesOC.Where(a => a.MorphBundlesOS.Count > 0 && a.ApprovalStatusIcon == (int) Opinions.approves)) " is 144.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,RemoveWordAnalysis,The length of the statement  "			foreach (IWfiAnalysis analysis in wordform.AnalysesOC.Where(a => a.MorphBundlesOS.Count > 0 && a.ApprovalStatusIcon == (int) Opinions.approves)) " is 144.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,CreateEntryIndexIfNeeded,The length of the statement  "				string form = entry.LexemeFormOA == null ? string.Empty : entry.LexemeFormOA.Form.VernacularDefaultWritingSystem.Text ?? string.Empty; " is 134.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,TryGetEntry,The length of the statement  "			entry = GetMatchingEntries(key.Type' key.LexicalForm).FirstOrDefault(e => m_homographNumbers.GetOrCreateValue(e).Number == key.Homograph); " is 138.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,CreateEntry,The length of the statement  "			ILexEntry entry = m_cache.ServiceLocator.GetInstance<ILexEntryFactory>().Create(GetMorphTypeForLexemeType(key.Type)' tss' (ITsString) null' msa); " is 145.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,GetEntryLexeme,The length of the statement  "			string form = entry.LexemeFormOA == null ? string.Empty : entry.LexemeFormOA.Form.VernacularDefaultWritingSystem.Text ?? string.Empty; " is 134.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,FilesToRestoreAreOlder,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FilesToRestoreAreOlder.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FilesToRestoreAreOlder)); " is 142.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,FwLexiconPlugin,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FwLexiconPlugin.cs,GetFdoLexicon,The length of the statement  "				var newLexicon = new FdoLexicon(scrTextName' projectId' fdoCache' fdoCache.ServiceLocator.WritingSystemManager.GetWsFromStr(langId)); " is 133.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,FwLexiconPlugin,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FwLexiconPlugin.cs,TryGetLcmCache,The length of the statement  "				var path = Path.Combine(ParatextLexiconPluginDirectoryFinder.ProjectsDirectory' projectId' projectId + LcmFileHelper.ksFwDataXmlFileExtension); " is 143.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,FdoWordformLexeme,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoWordformLexeme.cs,AddSense,The length of the statement  "					analysis.ApprovalStatusIcon = (int) Opinions.approves; // Assume the analysis from the external application is user approved " is 124.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,FdoWordformLexeme,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoWordformLexeme.cs,AddSense,The length of the statement  "					IMoStemAllomorph morph = m_lexicon.Cache.ServiceLocator.GetInstance<IMoStemAllomorphRepository>().AllInstances().FirstOrDefault(allo => " is 135.
Long Statement,SIL.FieldWorks.ParatextLexiconPlugin,ProjectExistsForm,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\ProjectExistsForm.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ProjectExistsForm)); " is 137.
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,ChooseFdoProjectForm,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\ChooseFdoProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Controls.Add(this.btnBrowse' 2' 0);
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,ChooseFdoProjectForm,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\ChooseFdoProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel2.SetRowSpan(this.panel1' 2);
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,GetMatchingEntryFromStemmer,The following statement contains a magic number: m_stemmer = new PoorMansStemmer<string' char>(s => s) {NormalizeScores = true' WeightScores = false' Threshold = 0.12};
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,FdoWordAnalysis,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoWordAnalysis.cs,GetHashCode,The following statement contains a magic number: return m_lexemes.Aggregate(23' (code' lexeme) => code * 31 + lexeme.GetHashCode());
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,FdoWordAnalysis,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoWordAnalysis.cs,GetHashCode,The following statement contains a magic number: return m_lexemes.Aggregate(23' (code' lexeme) => code * 31 + lexeme.GetHashCode());
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,LexemeKey,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\LexemeKey.cs,LexemeKey,The following statement contains a magic number: Debug.Assert(match.Groups[2].Value.IsNormalized()' "Key lexical forms should always be in composed form");
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,LexemeKey,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\LexemeKey.cs,LexemeKey,The following statement contains a magic number: m_lexicalForm = match.Groups[2].Value;
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,LexemeKey,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\LexemeKey.cs,LexemeKey,The following statement contains a magic number: m_homograph = match.Groups[3].Length > 0 ? Int32.Parse(match.Groups[3].Value.Substring(1)' CultureInfo.InvariantCulture) : 1;
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,LexemeKey,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\LexemeKey.cs,LexemeKey,The following statement contains a magic number: m_homograph = match.Groups[3].Length > 0 ? Int32.Parse(match.Groups[3].Value.Substring(1)' CultureInfo.InvariantCulture) : 1;
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,LexemeKey,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\LexemeKey.cs,GetHashCode,The following statement contains a magic number: int code = 23;
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,LexemeKey,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\LexemeKey.cs,GetHashCode,The following statement contains a magic number: code = code * 31 + m_type.GetHashCode();
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,LexemeKey,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\LexemeKey.cs,GetHashCode,The following statement contains a magic number: code = code * 31 + m_lexicalForm.GetHashCode();
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,LexemeKey,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\LexemeKey.cs,GetHashCode,The following statement contains a magic number: code = code * 31 + m_homograph.GetHashCode();
Magic Number,SIL.FieldWorks.ParatextLexiconPlugin,ParatextLexiconPluginDirectoryFinder,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\ParatextLexiconPluginDirectoryFinder.cs,GetDirectory,The following statement contains a magic number: return dir.Length > 2 ? dir : dir + Path.DirectorySeparatorChar;
Missing Default,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexEntryLexeme,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexEntryLexeme.cs,GetLexReferenceName,The following switch statement is missing a default case: switch (mappingType)  			{  				case LexRefTypeTags.MappingTypes.kmtSenseTree:  				case LexRefTypeTags.MappingTypes.kmtEntryTree:  				case LexRefTypeTags.MappingTypes.kmtEntryOrSenseTree:  				case LexRefTypeTags.MappingTypes.kmtSenseAsymmetricPair: // Sense Pair with different Forward/Reverse names  				case LexRefTypeTags.MappingTypes.kmtEntryAsymmetricPair: // Entry Pair with different Forward/Reverse names  				case LexRefTypeTags.MappingTypes.kmtEntryOrSenseAsymmetricPair: // Entry or sense Pair with different Forward/Reverse names  					if (lexRef.TargetsRS.Count > 0)  					{  						ICmObject firstObj = lexRef.TargetsRS[0];  						ILexEntry firstEntry = null;  						switch (firstObj.ClassID)  						{  							case LexEntryTags.kClassId:  								firstEntry = (ILexEntry) firstObj;  								break;  							case LexSenseTags.kClassId:  								firstEntry = firstObj.OwnerOfClass<ILexEntry>();  								break;  						}    						if (firstEntry != lexEntry)  						{  							name = lexRefType.ReverseName.BestAnalysisAlternative.Text;  							if (string.IsNullOrEmpty(name))  								name = lexRefType.ReverseAbbreviation.BestAnalysisAlternative.Text;  						}    						if (mappingType == LexRefTypeTags.MappingTypes.kmtSenseTree  							|| mappingType == LexRefTypeTags.MappingTypes.kmtEntryTree  							|| mappingType == LexRefTypeTags.MappingTypes.kmtEntryOrSenseTree)  						{  							parentEntry = firstEntry;  						}  					}  					break;  			}
Missing Default,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexEntryLexeme,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexEntryLexeme.cs,GetLexReferenceName,The following switch statement is missing a default case: switch (firstObj.ClassID)  						{  							case LexEntryTags.kClassId:  								firstEntry = (ILexEntry) firstObj;  								break;  							case LexSenseTags.kClassId:  								firstEntry = firstObj.OwnerOfClass<ILexEntry>();  								break;  						}
Missing Default,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,GetLexemeTypeForMorphType,The following switch statement is missing a default case: switch (type.Guid.ToString())  				{  					case MoMorphTypeTags.kMorphCircumfix:  					case MoMorphTypeTags.kMorphInfix:  					case MoMorphTypeTags.kMorphInfixingInterfix:  					case MoMorphTypeTags.kMorphSimulfix:  					case MoMorphTypeTags.kMorphSuprafix:  					case MoMorphTypeTags.kMorphClitic:  					case MoMorphTypeTags.kMorphProclitic:  						// These don't map neatly to a lexeme type' so we just return prefix  						return LexemeType.Prefix;    					case MoMorphTypeTags.kMorphEnclitic:  						// This one also isn't a great match' but there is no better choice  						return LexemeType.Suffix;    					case MoMorphTypeTags.kMorphPrefix:  					case MoMorphTypeTags.kMorphPrefixingInterfix:  						return LexemeType.Prefix;    					case MoMorphTypeTags.kMorphSuffix:  					case MoMorphTypeTags.kMorphSuffixingInterfix:  						return LexemeType.Suffix;    					case MoMorphTypeTags.kMorphPhrase:  					case MoMorphTypeTags.kMorphDiscontiguousPhrase:  						return LexemeType.Phrase;    					case MoMorphTypeTags.kMorphStem:  					case MoMorphTypeTags.kMorphRoot:  					case MoMorphTypeTags.kMorphBoundRoot:  					case MoMorphTypeTags.kMorphBoundStem:  					case MoMorphTypeTags.kMorphParticle:  						return LexemeType.Stem;  				}
Missing Default,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,GetMorphTypeForLexemeType,The following switch statement is missing a default case: switch (type)  			{  				case LexemeType.Prefix: return repo.GetObject(MoMorphTypeTags.kguidMorphPrefix);  				case LexemeType.Suffix: return repo.GetObject(MoMorphTypeTags.kguidMorphSuffix);  				case LexemeType.Phrase: return repo.GetObject(MoMorphTypeTags.kguidMorphPhrase);  				case LexemeType.Stem: return repo.GetObject(MoMorphTypeTags.kguidMorphStem);  			}
Missing Default,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,PropChanged,The following switch statement is missing a default case: switch (obj.ClassID)  			{  				case LexDbTags.kClassId:  					if (tag == m_cache.ServiceLocator.GetInstance<Virtuals>().LexDbEntries)  					{  						if (!UpdatingEntries)  							m_entryIndex = null;  						m_stemmer = null;  					}  					break;    				case MoStemAllomorphTags.kClassId:  					if (tag == MoFormTags.kflidForm)  					{  						if (!UpdatingEntries && obj.OwningFlid == LexEntryTags.kflidLexemeForm)  							m_entryIndex = null;  						m_stemmer = null;  					}  					break;    				case MoAffixAllomorphTags.kClassId:  					if (!UpdatingEntries && obj.OwningFlid == LexEntryTags.kflidLexemeForm && tag == MoFormTags.kflidForm)  						m_entryIndex = null;  					break;    				case LexEntryTags.kClassId:  					var entry = (ILexEntry) obj;  					switch (tag)  					{  						case LexEntryTags.kflidLexemeForm:  							if (!UpdatingEntries)  								m_entryIndex = null;  							if (entry.LexemeFormOA is IMoStemAllomorph)  								m_stemmer = null;  							break;    						case LexEntryTags.kflidAlternateForms:  							if (entry.LexemeFormOA is IMoStemAllomorph)  								m_stemmer = null;  							break;  					}  					break;    				case MoMorphDataTags.kClassId:  					if (tag == MoMorphDataTags.kflidParserParameters)  					{  						if (m_parser != null)  						{  							m_parser.Dispose();  							m_parser = null;  						}  					}  					break;  			}
Missing Default,SIL.FieldWorks.ParatextLexiconPlugin,FdoLexicon,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\FdoLexicon.cs,PropChanged,The following switch statement is missing a default case: switch (tag)  					{  						case LexEntryTags.kflidLexemeForm:  							if (!UpdatingEntries)  								m_entryIndex = null;  							if (entry.LexemeFormOA is IMoStemAllomorph)  								m_stemmer = null;  							break;    						case LexEntryTags.kflidAlternateForms:  							if (entry.LexemeFormOA is IMoStemAllomorph)  								m_stemmer = null;  							break;  					}
Missing Default,SIL.FieldWorks.ParatextLexiconPlugin,ParatextLexiconPluginLcmUI,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\ParatextLexiconPluginLcmUI.cs,CannotRestoreLinkedFilesToOriginalLocation,The following switch statement is missing a default case: switch (result)  			{  				case DialogResult.Yes:  					return YesNoCancel.OkYes;  				case DialogResult.No:  					return YesNoCancel.OkNo;  			}
Missing Default,SIL.FieldWorks.ParatextLexiconPlugin,ParatextLexiconPluginLcmUI,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\FwParatextLexiconPlugin\ParatextLexiconPluginLcmUI.cs,DisplayMessage,The following switch statement is missing a default case: switch (type)  			{  				case MessageType.Error:  					icon = MessageBoxIcon.Error;  					break;  				case MessageType.Info:  					icon = MessageBoxIcon.Information;  					break;  				case MessageType.Warning:  					icon = MessageBoxIcon.Warning;  					break;  			}
