Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.CacheLight,MetaDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\MetaDataCache.cs,InitXml,The method has 172 lines of code.
Long Method,SIL.FieldWorks.CacheLight,RealCacheLoader,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealCacheLoader.cs,LoadCache,The method has 116 lines of code.
Long Method,SIL.FieldWorks.CacheLight,RealCacheLoader,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealCacheLoader.cs,LoadObject,The method has 135 lines of code.
Long Method,SIL.FieldWorks.CacheLight,TsStringfactory,C:\repos\sillsdev_FieldWorks\Src\CacheLight\TsStringfactory.cs,ProcessRunElement,The method has 124 lines of code.
Complex Method,SIL.FieldWorks.CacheLight,MetaDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\MetaDataCache.cs,GetFields,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.CacheLight,RealCacheLoader,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealCacheLoader.cs,Dispose,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.CacheLight,RealCacheLoader,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealCacheLoader.cs,LoadCache,Cyclomatic complexity of the method is 8
Long Parameter List,SIL.FieldWorks.CacheLight,MetaDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\MetaDataCache.cs,InstallField,The method has 5 parameters. Parameters: mcr' clid' fieldName' flid' mfr
Long Parameter List,SIL.FieldWorks.CacheLight,MetaDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\MetaDataCache.cs,GetFields,The method has 5 parameters. Parameters: clid' includeSuperclasses' fieldTypes' countFlidMax' flids
Long Parameter List,SIL.FieldWorks.CacheLight,RealCacheLoader,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealCacheLoader.cs,LoadCmObjectProperties,The method has 6 parameters. Parameters: objectNode' owner' owningFlid' ord' clid' objects
Long Parameter List,SIL.FieldWorks.CacheLight,RealDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealDataCache.cs,UnicodePropRgch,The method has 5 parameters. Parameters: obj' tag' rgch' cchMax' cch
Long Parameter List,SIL.FieldWorks.CacheLight,RealDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealDataCache.cs,BinaryPropRgb,The method has 5 parameters. Parameters: obj' tag' rgb' cbMax' cb
Long Parameter List,SIL.FieldWorks.CacheLight,RealDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealDataCache.cs,VecProp,The method has 5 parameters. Parameters: hvo' tag' chvoMax' chvo' rghvo
Long Parameter List,SIL.FieldWorks.CacheLight,RealDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealDataCache.cs,CacheReplace,The method has 6 parameters. Parameters: hvoObj' tag' ihvoMin' ihvoLim' rghvo' chvo
Long Parameter List,SIL.FieldWorks.CacheLight,RealDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealDataCache.cs,MoveOwnSeq,The method has 7 parameters. Parameters: hvoSrcOwner' tagSrc' ihvoStart' ihvoEnd' hvoDstOwner' tagDst' ihvoDstStart
Long Parameter List,SIL.FieldWorks.CacheLight,RealDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealDataCache.cs,MoveOwn,The method has 6 parameters. Parameters: hvoSrcOwner' tagSrc' hvo' hvoDstOwner' tagDst' ihvoDstStart
Long Parameter List,SIL.FieldWorks.CacheLight,RealDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealDataCache.cs,Replace,The method has 6 parameters. Parameters: hvoObj' tag' ihvoMin' ihvoLim' rghvo' chvo
Long Parameter List,SIL.FieldWorks.CacheLight,RealDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealDataCache.cs,InsertRelExtra,The method has 5 parameters. Parameters: hvoSrc' tag' ihvo' hvoDst' bstrExtra
Long Parameter List,SIL.FieldWorks.CacheLight,RealDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealDataCache.cs,InsertNew,The method has 5 parameters. Parameters: hvoObj' tag' ihvo' chvo' _ss
Long Parameter List,SIL.FieldWorks.CacheLight,RealDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealDataCache.cs,PropChanged,The method has 7 parameters. Parameters: _nchng' _ct' hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.CacheLight,RealDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealDataCache.cs,MoveString,The method has 10 parameters. Parameters: hvoSource' flidSrc' wsSrc' ichMin' ichLim' hvoDst' flidDst' wsDst' ichDest' fDstIsNew
Long Statement,SIL.FieldWorks.CacheLight,RealCacheLoader,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealCacheLoader.cs,LoadObject,The length of the statement  "						// "<Str><Run ws=\"eZPI\">Te mgyeey ne la Benit nuu Pwert. Za men gun men inbitar xmig men ne la Jasint nuu San José. Za Benit. Weey Benit mël. Weey Benit mëlbyuu ne ygued Benit lo xmig Benit' Jasint. Chene wdxiin Benit ruxyuu Jasint' re Benit:</Run></Str>" " is 257.
Long Statement,SIL.FieldWorks.CacheLight,TsStringfactory,C:\repos\sillsdev_FieldWorks\Src\CacheLight\TsStringfactory.cs,ProcessRunElement,The length of the statement  "Stephen McCon...	The relevant source file is FwXmlString.cpp in {FW}/Src/Cellar.  Unfortunately' this area is somewhat of a mess. " is 129.
Long Statement,SIL.FieldWorks.CacheLight,TsStringfactory,C:\repos\sillsdev_FieldWorks\Src\CacheLight\TsStringfactory.cs,ProcessRunElement,The length of the statement  "Randy Regnier		If I understand it right' the various attrs will control some properties for the ts string' such as ws' bold' etc' right? " is 136.
Long Statement,SIL.FieldWorks.CacheLight,TsStringfactory,C:\repos\sillsdev_FieldWorks\Src\CacheLight\TsStringfactory.cs,ProcessRunElement,The length of the statement  "Stephen McCon...	You could look at FwXmlImportData::ProcessStringStartTag(const XML_Char *' const XML_Char **) in FwXmlString.cpp to see how the attributes are scanned and stored when reading in a string in the various C++ XML parsers. " is 235.
Long Statement,SIL.FieldWorks.CacheLight,TsStringfactory,C:\repos\sillsdev_FieldWorks\Src\CacheLight\TsStringfactory.cs,ProcessRunElement,The length of the statement  "Stephen McCon...	(Of course' that calls all sorts of other methods to do the work' which you may have to look at as well) " is 121.
Long Statement,SIL.FieldWorks.CacheLight,TsStringfactory,C:\repos\sillsdev_FieldWorks\Src\CacheLight\TsStringfactory.cs,ProcessRunElement,The length of the statement  "						// <Run ws=\"en\" fontsize=\"16000\" forecolor=\"blue\" fontFamily=\"SILDoulos PigLatinDemo\">Welcome to WorldPad!</Run> " is 120.
Magic Number,SIL.FieldWorks.CacheLight,MetaDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\MetaDataCache.cs,MakeFlidKey,The following statement contains a magic number: return String.Format("{0}{1}{2}"' (clid >> 16)' (clid & 0xffff)' fieldname);
Magic Number,SIL.FieldWorks.CacheLight,MetaDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\MetaDataCache.cs,InitXml,The following statement contains a magic number: using (TextReader xmlStream = FileUtils.OpenFileForRead(pathname' Encoding.UTF8))  			{  				doc.Load(xmlStream);  				var classes = doc.SelectNodes("EntireModel");  				if (classes.Count == 0)  					throw new ArgumentException("No classes found.");  				if (clearPrevCache)  				{  					m_metaFieldRecords.Clear();  					m_metaClassRecords.Clear();  					m_nameToClid.Clear();  					m_nameToFlid.Clear();  				}    				InitBaseClassMetaFields(doc);    				int clid;  				int flid;  				MetaClassRec mcr;  				MetaFieldRec mfr;    				// Spin through each module now.  				foreach (XmlNode newClassNode in doc.DocumentElement)  				{  					clid = XmlUtils.GetMandatoryIntegerAttributeValue(newClassNode' "num");  					if (clid > 0) // Basic initialization has already happened for the base class.  					{  						var newClassName = XmlUtils.GetMandatoryAttributeValue(newClassNode' "id");  						// Check to see if the class already exists.  						if (m_nameToClid.ContainsKey(newClassName))  							throw new ArgumentException("Duplicate Cellar Class named; " + newClassName);    						mcr = new MetaClassRec(XmlUtils.GetOptionalAttributeValue(newClassNode' "base"' newClassName)'  							XmlUtils.GetBooleanAttributeValue(newClassNode' "abstract")' newClassName);  						m_metaClassRecords[clid] = mcr;  						m_nameToClid[newClassName] = clid;  					}  					else  						mcr = m_metaClassRecords[clid];    					// Spin through the properties now.  					var flidBase = clid * 1000;  					foreach (XmlNode fieldNode in newClassNode.SelectNodes("props/*"))  					{  						flid = flidBase + XmlUtils.GetMandatoryIntegerAttributeValue(fieldNode' "num");  						mfr = new MetaFieldRec  						{  							m_fieldName = XmlUtils.GetMandatoryAttributeValue(fieldNode' "id")'  							m_ownClsid = clid'  							m_sig = XmlUtils.GetMandatoryAttributeValue(fieldNode' "sig")  						};    						if (m_nameToClid.ContainsKey(mfr.m_sig))  						{  							mfr.m_dstClsid = m_nameToClid[mfr.m_sig];  							mfr.m_sig = null;  						}    						// /basic | props/owning | props/rel  						switch (fieldNode.Name)  						{  							default:  								break;  							case "basic":  								switch (mfr.m_sig)  								{  									case "TextPropBinary":  										mfr.m_fieldType = CellarPropertyType.Binary;  										break;  									case "Boolean":  										mfr.m_fieldType = CellarPropertyType.Boolean;  										break;  									case "Integer":  										mfr.m_fieldType = CellarPropertyType.Integer;  										break;  									case "Time":  										mfr.m_fieldType = CellarPropertyType.Time;  										break;  									case "String":  										mfr.m_fieldType = CellarPropertyType.String;  										break;  									case "MultiString":  										mfr.m_fieldType = CellarPropertyType.MultiString;  										break;  									case "Unicode":  										mfr.m_fieldType = CellarPropertyType.Unicode;  										break;  									case "MultiUnicode":  										mfr.m_fieldType = CellarPropertyType.MultiUnicode;  										break;  									case "Guid":  										mfr.m_fieldType = CellarPropertyType.Guid;  										break;  									case "Image":  										mfr.m_fieldType = CellarPropertyType.Image;  										break;  									case "GenDate":  										mfr.m_fieldType = CellarPropertyType.GenDate;  										break;  									case "Binary":  										mfr.m_fieldType = CellarPropertyType.Binary;  										break;  									case "Numeric":  										mfr.m_fieldType = CellarPropertyType.Numeric;  										break;  									case "Float":  										mfr.m_fieldType = CellarPropertyType.Float;  										break;  								}  								mfr.m_sig = null;  								break;  							case "owning":  								switch (XmlUtils.GetMandatoryAttributeValue(fieldNode' "card"))  								{  									case "atomic":  										mfr.m_fieldType = CellarPropertyType.OwningAtomic;  										break;  									case "col":  										mfr.m_fieldType = CellarPropertyType.OwningCollection;  										break;  									case "seq":  										mfr.m_fieldType = CellarPropertyType.OwningSequence;  										break;  								}  								break;  							case "rel":  								switch (XmlUtils.GetMandatoryAttributeValue(fieldNode' "card"))  								{  									case "atomic":  										mfr.m_fieldType = CellarPropertyType.ReferenceAtomic;  										break;  									case "col":  										mfr.m_fieldType = CellarPropertyType.ReferenceCollection;  										break;  									case "seq":  										mfr.m_fieldType = CellarPropertyType.ReferenceSequence;  										break;  								}  								break;  						}  						// Add mfr.  						InstallField(mcr' clid' mfr.m_fieldName' flid' mfr);  					}  				}    				// Some mfr objects may not have been able to set their m_dstClsid member'  				// if the referenced class had not been loaded yet.  				// So' try to connect them now.  				// If the client is using multiple files' they may not be set until the last file is loaded.  				foreach (var kvp in m_metaFieldRecords)  				{  					mfr = kvp.Value;  					if (mfr.m_sig == null || !m_nameToClid.ContainsKey(mfr.m_sig)) continue;    					mfr.m_dstClsid = m_nameToClid[mfr.m_sig];  					mfr.m_sig = null;  				}    				// Get direct subclass ids.  				// Also set the superclass id.  				foreach (var kvp in m_metaClassRecords)  				{  					mcr = kvp.Value;  					var clidChild = kvp.Key;  					var clidBase = m_nameToClid[mcr.m_superclassName];  					mcr.m_baseClsid = clidBase;  					if (clidChild == clidBase)  						continue; // CmObject.  					if (!m_metaClassRecords.ContainsKey(clidBase)) continue;    					var recBase = m_metaClassRecords[clidBase];  					recBase.m_directSubclasses.Add(clidChild);  				}  			}
Magic Number,SIL.FieldWorks.CacheLight,RealDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealDataCache.cs,MakeNewObject,The following statement contains a magic number: switch (ord)  			{  				case -1: // Collection  					int c = get_VecSize(hvoOwner' tag);  					Replace(hvoOwner' tag' c' c' new[] { hvoNew }' 1);  					break;  				case -2: // Atomic  					SetObjProp(hvoOwner' tag' hvoNew);  					CacheIntProp(hvoNew' (int)CmObjectFields.kflidCmObject_OwnOrd' 0);  					break;  				default: // Sequence  					Debug.Assert(ord >= 0);  					Replace(hvoOwner' tag' ord' ord' new[] { hvoNew }' 1);  					break;  			}
Missing Default,SIL.FieldWorks.CacheLight,MetaDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\MetaDataCache.cs,IsObjectFieldType,The following switch statement is missing a default case: switch (type)  			{  				case CellarPropertyType.OwningAtomic:  				case CellarPropertyType.OwningCollection:  				case CellarPropertyType.OwningSequence:  				case CellarPropertyType.ReferenceAtomic:  				case CellarPropertyType.ReferenceCollection:  				case CellarPropertyType.ReferenceSequence:  					isObjectFT = true;  					break;  			}
Missing Default,SIL.FieldWorks.CacheLight,MetaDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\MetaDataCache.cs,InitXml,The following switch statement is missing a default case: switch (mfr.m_sig)  								{  									case "TextPropBinary":  										mfr.m_fieldType = CellarPropertyType.Binary;  										break;  									case "Boolean":  										mfr.m_fieldType = CellarPropertyType.Boolean;  										break;  									case "Integer":  										mfr.m_fieldType = CellarPropertyType.Integer;  										break;  									case "Time":  										mfr.m_fieldType = CellarPropertyType.Time;  										break;  									case "String":  										mfr.m_fieldType = CellarPropertyType.String;  										break;  									case "MultiString":  										mfr.m_fieldType = CellarPropertyType.MultiString;  										break;  									case "Unicode":  										mfr.m_fieldType = CellarPropertyType.Unicode;  										break;  									case "MultiUnicode":  										mfr.m_fieldType = CellarPropertyType.MultiUnicode;  										break;  									case "Guid":  										mfr.m_fieldType = CellarPropertyType.Guid;  										break;  									case "Image":  										mfr.m_fieldType = CellarPropertyType.Image;  										break;  									case "GenDate":  										mfr.m_fieldType = CellarPropertyType.GenDate;  										break;  									case "Binary":  										mfr.m_fieldType = CellarPropertyType.Binary;  										break;  									case "Numeric":  										mfr.m_fieldType = CellarPropertyType.Numeric;  										break;  									case "Float":  										mfr.m_fieldType = CellarPropertyType.Float;  										break;  								}
Missing Default,SIL.FieldWorks.CacheLight,MetaDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\MetaDataCache.cs,InitXml,The following switch statement is missing a default case: switch (XmlUtils.GetMandatoryAttributeValue(fieldNode' "card"))  								{  									case "atomic":  										mfr.m_fieldType = CellarPropertyType.OwningAtomic;  										break;  									case "col":  										mfr.m_fieldType = CellarPropertyType.OwningCollection;  										break;  									case "seq":  										mfr.m_fieldType = CellarPropertyType.OwningSequence;  										break;  								}
Missing Default,SIL.FieldWorks.CacheLight,MetaDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\MetaDataCache.cs,InitXml,The following switch statement is missing a default case: switch (XmlUtils.GetMandatoryAttributeValue(fieldNode' "card"))  								{  									case "atomic":  										mfr.m_fieldType = CellarPropertyType.ReferenceAtomic;  										break;  									case "col":  										mfr.m_fieldType = CellarPropertyType.ReferenceCollection;  										break;  									case "seq":  										mfr.m_fieldType = CellarPropertyType.ReferenceSequence;  										break;  								}
Missing Default,SIL.FieldWorks.CacheLight,RealCacheLoader,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealCacheLoader.cs,LoadObject,The following switch statement is missing a default case: switch (flidType)  				{  					case CellarPropertyType.Boolean:  						// <System18><Boolean val="true"/></System18>  						m_realDataCache.CacheBooleanProp(hvo' flid' bool.Parse(fieldNode.FirstChild.Attributes["val"].Value));  						break;  					case CellarPropertyType.Integer:  						// <Type18><Integer val="1"/></Type18>  						m_realDataCache.CacheIntProp(hvo' flid' Int32.Parse(fieldNode.FirstChild.Attributes["val"].Value));  						break;  					case CellarPropertyType.Numeric:  						break;  					case CellarPropertyType.Float:  						break;  					case CellarPropertyType.Time:  						// <LastModified24><Time val="2005-11-18 02:48:33.000"/></LastModified24>  						var valTime = DateTime.Parse(fieldNode.FirstChild.Attributes["val"].Value);  						m_realDataCache.CacheTimeProp(hvo' flid' valTime.Ticks);  						break;  					case CellarPropertyType.Guid:  						if (flid != (int)CmObjectFields.kflidCmObject_Guid)  						{  							// <App18><Guid val="5EA62D01-7A78-11D4-8078-0000C0FB81B5"/></App18>  							var id = fieldNode.FirstChild.Attributes["val"].Value;  							m_realDataCache.CacheGuidProp(hvo' flid' new Guid(id));  						}  						break;  					case CellarPropertyType.Image:  						break;  					case CellarPropertyType.GenDate:  						// <DateOfEvent4006><GenDate val=\"193112111\" /></DateOfEvent4006>  						break;  					case CellarPropertyType.Binary:  						// <Details18><Binary>03000000</Binary></Details18>  						// <Details18><Binary>05000000\r\n</Binary></Details18>  						break;  					case CellarPropertyType.String:  						// "<Str><Run ws=\"eZPI\">Te mgyeey ne la Benit nuu Pwert. Za men gun men inbitar xmig men ne la Jasint nuu San José. Za Benit. Weey Benit mël. Weey Benit mëlbyuu ne ygued Benit lo xmig Benit' Jasint. Chene wdxiin Benit ruxyuu Jasint' re Benit:</Run></Str>"  						foreach (XmlNode strNode in fieldNode.ChildNodes)  						{  							var tssStr = m_tsf.CreateFromStr(strNode);  							m_realDataCache.CacheStringProp(hvo' flid' tssStr);  						}  						// CacheStringProp(hvo' tag' tss);  						break;  					case CellarPropertyType.MultiString: // <AStr>  						foreach (XmlNode aStrAlt in fieldNode.ChildNodes)  						{  							int wsAStr;  							var tssAlt = m_tsf.CreateFromAStr(aStrAlt' out wsAStr);  							m_realDataCache.CacheStringAlt(hvo' flid' wsAStr' tssAlt);  						}  						break;  					case CellarPropertyType.Unicode:  						string unicodeText = fieldNode.FirstChild.InnerText;  						m_realDataCache.CacheUnicodeProp(hvo' flid' unicodeText' unicodeText.Length);  						break;  					case CellarPropertyType.MultiUnicode: // <AUni>  						foreach (XmlNode uniNode in fieldNode.ChildNodes)  						{  							var ws = m_wsCache[uniNode.Attributes["ws"].Value];  							var uniText = uniNode.InnerText;  							m_realDataCache.CacheStringAlt(hvo' flid' ws' TsStringUtils.MakeString(uniText' ws));  						}  						break;    					// Cases for regular objects.  					case CellarPropertyType.OwningAtomic:  						XmlNode atomicOwnedObject = fieldNode.FirstChild;  						ownedHvo = LoadCmObjectProperties(atomicOwnedObject' hvo' flid' 0' out ownedClid' objects);  						LoadObject(atomicOwnedObject' ownedHvo' ownedClid' objects);  						m_realDataCache.CacheObjProp(hvo' flid' ownedHvo);  						break;  					case CellarPropertyType.ReferenceAtomic:  						/* Some are simple Guid links' but others contain more info.  						<Category5059>  							<Link target="I751B8DE1-089B-42B1-A35E-62CF838A27A3" ws="en" abbr="N" name="noun"/>  						</Category5059>  						<Morph5112>  							<Link target="I9370DD7D-978D-484D-B304-B5D4700BAA30"/>  						</Morph5112>  						*/  						// Defer caching references' until all objects are loaded.  						m_delayedAtomicReferences[new HvoFlidKey(hvo' flid)] = fieldNode.FirstChild;  						break;  					case CellarPropertyType.OwningCollection: // Fall through.  					case CellarPropertyType.OwningSequence:  						var hvos = new List<int>();  						var newOrd = 0;  						foreach (XmlNode obj in fieldNode.ChildNodes)  						{  							ownedHvo = LoadCmObjectProperties(obj' hvo' flid' newOrd' out ownedClid' objects);  							LoadObject(obj' ownedHvo' ownedClid' objects);  							hvos.Add(ownedHvo);  							if (flidType == CellarPropertyType.OwningSequence)  								newOrd++;  						}  						m_realDataCache.CacheVecProp(hvo' flid' hvos.ToArray()' hvos.Count);  						break;  					case CellarPropertyType.ReferenceCollection: // Fall through.  					case CellarPropertyType.ReferenceSequence:  						// <Link target="ID75F7FB5-BABD-4D60-B57F-E188BEF264B7" />  						// Defer caching references' until all objects are loaded.  						var list = new List<XmlNode>();  						m_delayedVecterReferences[new HvoFlidKey(hvo' flid)] = list;  						foreach (XmlNode linkNode in fieldNode.ChildNodes)  							list.Add(linkNode);  						break;  				}
Missing Default,SIL.FieldWorks.CacheLight,RealDataCache,C:\repos\sillsdev_FieldWorks\Src\CacheLight\RealDataCache.cs,get_Prop,The following switch statement is missing a default case: switch ((CellarPropertyType)fieldType)  				{  					case CellarPropertyType.Boolean:  						result = m_boolCache[key];  						break;  					case CellarPropertyType.Integer:  						result = m_intCache[key];  						break;  					case CellarPropertyType.Numeric:  						break; // m_intCache.ContainsKey(key);  					case CellarPropertyType.Float:  						break; // m_intCache.ContainsKey(key);  					case CellarPropertyType.Time:  						result = m_longCache[key];  						break;  					case CellarPropertyType.Guid:  						result = m_guidCache[key];  						break;  					case CellarPropertyType.Image:  						break; //  m_intCache.ContainsKey(key);  					case CellarPropertyType.GenDate:  						break; //  m_intCache.ContainsKey(key);  					case CellarPropertyType.Binary:  						break;  					case CellarPropertyType.String:  						result = m_basicITsStringCache[key];  						break;  					case CellarPropertyType.MultiUnicode:  					case CellarPropertyType.MultiString:  						result = get_MultiStringProp(hvo' tag);  						break;  					case CellarPropertyType.Unicode:  						result = m_basicStringCache[key];  						break;    					case CellarPropertyType.OwningAtomic: // Fall through  					case CellarPropertyType.ReferenceAtomic:  						return m_intCache[key];    					case CellarPropertyType.OwningCollection:  					case CellarPropertyType.ReferenceCollection:  					case CellarPropertyType.OwningSequence:  					case CellarPropertyType.ReferenceSequence:  						result = m_vectorCache[key];  						break;  				}
