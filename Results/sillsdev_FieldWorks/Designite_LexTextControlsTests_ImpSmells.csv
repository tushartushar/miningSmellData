Implementation smell,Namespace,Class,File,Method,Description
Long Method,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddLexEntries,The method has 119 lines of code.
Long Method,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The method has 151 lines of code.
Long Method,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport2,The method has 116 lines of code.
Long Method,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport5_CustomFieldsStringsAndMultiUnicode,The method has 125 lines of code.
Long Method,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyCustomField,The method has 100 lines of code.
Long Method,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftImport_ExampleCustomFieldUpdatedDuringMerge,The method has 168 lines of code.
Complex Method,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExportRanges,Cyclomatic complexity of the method is 8
Complex Method,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExport,Cyclomatic complexity of the method is 8
Complex Method,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyEntryCustomFields,Cyclomatic complexity of the method is 11
Complex Method,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExtraSenseStuff,Cyclomatic complexity of the method is 12
Complex Method,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyCustomStTextForEntryTest,Cyclomatic complexity of the method is 9
Complex Method,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,Cyclomatic complexity of the method is 9
Complex Method,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyCustomField,Cyclomatic complexity of the method is 16
Complex Method,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyCmPossibilityCustomFields,Cyclomatic complexity of the method is 10
Complex Method,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyLiftRangesFile,Cyclomatic complexity of the method is 9
Complex Method,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifySecondLexEntry,Cyclomatic complexity of the method is 15
Long Parameter List,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,MakeCustomField,The method has 5 parameters. Parameters: customFieldName' classId' ws' fieldType' listGuid
Long Parameter List,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyRelation,The method has 5 parameters. Parameters: relation' type' complexFormType' isPrimary' target
Long Parameter List,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TryImport,The method has 5 parameters. Parameters: sOrigFile' sOrigRangesFile' mergeStyle' expectedCount' trustModificationTimes
Long Parameter List,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyListItem,The method has 5 parameters. Parameters: listItem' itemName' itemGuid' itemAbbrev' itemDesc
Long Parameter List,LexTextControlsTests,MessageCapture,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerTests.cs,Show,The method has 5 parameters. Parameters: owner' text' caption' buttons' icon
Long Parameter List,LexTextControlsTests,MessageCapture,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerTests.cs,Show,The method has 10 parameters. Parameters: owner' text' caption' buttons' icon' defaultButton' options' helpFilePath' navigator' param
Long Identifier,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,,The length of the parameter someNumbered_OutOfOrder_Subentry is 32.
Long Identifier,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,,The length of the parameter refsToHomograph1OrBlankBothWork is 31.
Long Identifier,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,,The length of the parameter sfmDataWithVariantsAndMainEntryLinks is 36.
Long Identifier,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,,The length of the parameter sfmDataWithMinorBeforeMainEntryLinks is 36.
Long Identifier,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,,The length of the parameter sfmDataWithBlankPosFollowingRealPos is 35.
Long Identifier,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,,The length of the parameter m_customFieldExampleSentencesIds is 32.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportLexRefType_NonAsciiCharactersDoNotCauseDuplication,The length of the parameter liftWithSenseUsingNonAsciiRelation is 34.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport_BlankReversalsAreSkippedButNonBlanksAreImported,The length of the parameter liftDataWithOneEmptyAndOneNonEmptyReversal is 42.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport_BlankReversalsAreSkippedButNonBlanksAreImported,The length of the parameter liftFileWithOneEmptyAndOneNonEmptyReversal is 42.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftImport_UnknownExampleTraitCreatesResidue,The length of the parameter lifDataWithExampleWithUnnkownTrait is 34.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftImport_ExampleCustomFieldUpdatedDuringMerge,The length of the parameter lifDataWithExampleWithPendingStatus is 35.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftImport_ExampleCustomFieldUpdatedDuringMerge,The length of the parameter lifDataWithExampleWithConfirmedStatus is 37.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,,The length of the parameter rangeWithOneCustomAndOneDefault is 31.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,,The length of the parameter twoEntryWithVariantComplexFormLift is 34.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,,The length of the parameter twoEntryWithVariantRefRemovedLift is 33.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,,The length of the parameter twoEntryWithVariantRemovedLift is 30.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,,The length of the parameter twoEntryWithVariantComplexFormAndNewItemLift is 44.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,,The length of the parameter twoEntryWithDerivativeComplexFormLift is 37.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,,The length of the parameter twoEntryWithDerivativeComplexFormRemovedLift is 44.
Long Identifier,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,,The length of the parameter m_customFieldExampleSentencesIds is 32.
Long Statement,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddLexEntries,The length of the statement  "						"<lift-residue id=\"songanganya & nganga_63698066-52d6-46bd-8438-64ce2a820dc6\" dateCreated=\"2008-04-27T22:41:26Z\" dateModified=\"2007-07-02T17:00:00Z\"></lift-residue>"; " is 172.
Long Statement,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,MakeComplexFormEntryRef,The length of the statement  "				m_cache.LangProject.LexDbOA.ComplexEntryTypesOA = m_cache.ServiceLocator.GetInstance<ICmPossibilityListFactory>().Create(); " is 123.
Long Statement,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddCustomFieldsInLexEntry,The length of the statement  "			fd = MakeCustomField("CustomField3-LexEntry CmPossibilitySemanticDomain"' LexEntryTags.kClassId' WritingSystemServices.kwsAnal' " is 127.
Long Statement,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddCustomFieldsInLexEntry,The length of the statement  "			fd = MakeCustomField("CustomField5-LexEntry CmPossibilityCustomList"' LexEntryTags.kClassId' WritingSystemServices.kwsAnal' " is 123.
Long Statement,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddCustomFieldSimpleString,The length of the statement  "			bldr.SetIntPropValues(5' 10' (int)FwTextPropType.ktptWs' (int)FwTextPropVar.ktpvDefault' ws == m_cache.DefaultVernWs ? m_cache.DefaultAnalWs : m_cache.DefaultVernWs); " is 166.
Long Statement,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,LiftExport_MultipleReferencesToSameMediaFileCausesNoDuplication,The length of the statement  "				m_cache.LangProject.PicturesOC.First().FilesOC.Add(pronunFile); // maybe not quite appropriate' but has to be owned somewhere. " is 126.
Long Statement,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,LiftExport_MultipleReferencesToSameMediaFileCausesNoDuplication,The length of the statement  "				VerifyAudio(Path.GetFileNameWithoutExtension(kpronunciationFileName) + "_1" + Path.GetExtension(kpronunciationFileName)' false); " is 128.
Long Statement,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExportRanges,The length of the statement  "			Assert.IsNotNull(unreferencedCustomFieldList' "Custom possibility list that is not referred to by a custom field not exported"); " is 128.
Long Statement,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExampleSentenceCustomFields,The length of the statement  "						var tssMultiString = m_cache.DomainDataByFlid.get_MultiStringProp(sense.ExamplesOS[0].Hvo' m_customFieldExampleSentencesIds[1]); " is 128.
Long Statement,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyForm,The length of the statement  "						Assert.That(wsCode' Is.EqualTo(baseLang)); // could be some other reason for a span' in which case it will have the default ws. " is 127.
Long Statement,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,LiftExportRanges_PartOfSpeechCatalogIdIsExported,The length of the statement  "			AssertThatXmlIn.Dom(xdocRangeFile).HasAtLeastOneMatchForXpath("//range[@id='grammatical-info']/range-element/trait[@name='catalog-source-id']"); " is 144.
Long Statement,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddStTextCustomFieldAndData,The length of the statement  "			para3.Contents = TsStringUtils.MakeString("CiCi pizza is cheap' but not really gourmet when it comes to pizza."' m_cache.DefaultAnalWs); " is 136.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotDuplicateTreeRelations,The length of the statement  "			Assert.AreEqual(bodySense.LexSenseReferences.First()' legSense.LexSenseReferences.First()' "LexReferences of Body and Leg should match."); " is 138.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotDuplicateTreeRelations,The length of the statement  "			CollectionAssert.Contains(armSense.LexSenseReferences' legSense.LexSenseReferences.First()' "Arm LexReferences should include the single Leg LexReference"); " is 156.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotConfuseModifiedTreeRelations,The length of the statement  "			Assert.AreEqual(cSense.LexSenseReferences.First()' dSense.LexSenseReferences.First()' "c and d should be in the same relation"); " is 128.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomPairReferenceTypeWorks,The length of the statement  "			Assert.That(aSense.LexSenseReferences.First().TargetsRS.Contains(bSense)' "The Twin/Twain relationship failed to contain 'Bother' and 'me'"); " is 141.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomPairReferenceTypeWorks,The length of the statement  "			Assert.That(bSense.LexSenseReferences.First().TargetsRS.Contains(aSense)' "The Twin/Twain relationship failed to contain 'Bother' and 'me'"); " is 141.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomPairReferenceTypeWorks,The length of the statement  "			Assert.AreEqual(aSense.LexSenseReferences.First()' bSense.LexSenseReferences.First()' "aSense and bSense should share the same LexSenseReference."); " is 148.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomRangesIgnoresNonCustomRanges,The length of the statement  "			var logFile = TryImport(sOrigFile' CreateInputRangesFile(rangeWithOneCustomAndOneDefault)' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2); " is 135.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomReferenceTypeWithMultipleWsWorks,The length of the statement  "			Cache.LangProject.AddToCurrentVernacularWritingSystems(Cache.WritingSystemFactory.get_Engine("sen") as CoreWritingSystemDefinition); " is 132.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomReferenceTypeWithMultipleWsWorks,The length of the statement  "			Cache.LangProject.AddToCurrentVernacularWritingSystems(Cache.WritingSystemFactory.get_Engine("arb") as CoreWritingSystemDefinition); " is 132.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomReferenceTypeWithMultipleWsWorks,The length of the statement  "			var queueType = refTypeRepo.AllInstances().FirstOrDefault(refType => refType.Name.BestAnalysisAlternative.Text.Equals("queue")); " is 128.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomReferenceTypeWithMultipleWsWorks,The length of the statement  "			Assert.That(queueType != null && queueType.MembersOC.Contains(bSense.LexSenseReferences.First())' "Queue incorrectly imported."); " is 129.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomReferenceTypeWithMultipleWsWorks,The length of the statement  "			Assert.That(queueType.MappingType == (int)LexRefTypeTags.MappingTypes.kmtSenseSequence' "Queue imported with wrong type."); " is 123.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomReferenceTypeWithMultipleWsWorks,The length of the statement  "			Assert.That(queueType.Description.get_String(Cache.WritingSystemFactory.GetWsFromStr("en")).Text.Equals("Get in line.")); " is 121.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestReplaceSynonymWithAntonymWorks,The length of the statement  "			var synType = refTypeRepo.AllInstances().FirstOrDefault(refType => refType.Name.BestAnalysisAlternative.Text.Equals("Synonyms")); " is 129.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestReplaceSynonymWithAntonymWorks,The length of the statement  "			Assert.That(synType != null && synType.MembersOC.Contains(aSense.LexSenseReferences.First())' "Synonym incorrectly imported."); " is 127.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestReplaceSynonymWithAntonymWorks,The length of the statement  "			var antType = refTypeRepo.AllInstances().FirstOrDefault(refType => refType.Name.BestAnalysisAlternative.Text.Equals("Antonym")); " is 128.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestReplaceSynonymWithAntonymWorks,The length of the statement  "			Assert.That(antType != null && antType.MembersOC.Contains(bSense.LexSenseReferences.First())' "Antonym incorrectly imported."); " is 127.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestDeleteRelationRefOnVariantComplexFormWorks,The length of the statement  "			Assert.AreEqual(1' eEntry.VariantEntryRefs.Count()' "No VariantEntryRefs found when expected' import of lift data during test setup failed."); " is 142.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestDeleteRelationRefOnVariantComplexFormWorks,The length of the statement  "			Assert.AreEqual(1' aEntry.VariantFormEntries.Count()' "Variant form Entry not found when expected' import of lift data during test setup failed."); " is 147.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestDeleteRelationRefOnVariantComplexFormWorks,The length of the statement  "			Assert.AreEqual(0' aEntry.VariantFormEntries.Count()' "VariantForm Entry was not deleted during lift import."); // The reference was removed so the Entries collection should be empty " is 182.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestDeleteVariantComplexFormWorks,The length of the statement  "			Assert.AreEqual(1' eEntry.VariantEntryRefs.Count()' "No VariantEntryRefs found when expected' import of lift data during test setup failed."); " is 142.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestDeleteVariantComplexFormWorks,The length of the statement  "			Assert.AreEqual(1' aEntry.VariantFormEntries.Count()' "Variant form Entry not found when expected' import of lift data during test setup failed."); " is 147.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestVariantComplexFormNotDeletedWhenUnTouchedWorks,The length of the statement  "			Assert.AreEqual(1' eEntry.VariantEntryRefs.Count()' "No VariantEntryRefs found when expected' import of lift data during test setup failed."); " is 142.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestVariantComplexFormNotDeletedWhenUnTouchedWorks,The length of the statement  "			Assert.AreEqual(1' aEntry.VariantFormEntries.Count()' "Variant form Entry not found when expected' import of lift data during test setup failed."); " is 147.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestDeleteDerivativeComplexFormWorks,The length of the statement  "			Assert.AreEqual(1' eEntry.ComplexFormEntryRefs.Count()' "No ComplexFormEntryRefs found when expected' import of lift data during test setup failed."); " is 150.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestDeleteDerivativeComplexFormWorks,The length of the statement  "			Assert.AreEqual(1' aEntry.ComplexFormEntries.Count()' "No ComplexEntries found when expected' import of lift data during test setup failed."); " is 142.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportLexRefType_NonAsciiCharactersDoNotCauseDuplication,The length of the statement  "			Assert.AreEqual(refTypeCountBeforeImport' Cache.LangProject.LexDbOA.ReferencesOA.PossibilitiesOS.Count' "Relation duplicated on import"); " is 137.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestSetup,The length of the statement  "			CoreWritingSystemDefinition audioWs = writingSystemManager.Create(languageSubtag' WellKnownSubtags.AudioScript' null' new VariantSubtag[] {WellKnownSubtags.AudioPrivateUse}); " is 174.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The length of the statement  "			Assert.That(messageCapture.Messages' Has.Count.EqualTo(0)' "we should not message about an empty-string ref in <relation>"); " is 124.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The length of the statement  "			Assert.AreEqual("Noun"' (sense0.MorphoSyntaxAnalysisRA as IMoStemMsa).PartOfSpeechRA.Name.AnalysisDefaultWritingSystem.Text); " is 125.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The length of the statement  "			Assert.That(sense0.PicturesOS[0].PictureFileRA.InternalPath' Is.EqualTo(Path.Combine(LcmFileHelper.ksPicturesDir' "Desert.jpg"))); " is 130.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The length of the statement  "			Assert.That(sense0.PicturesOS[1].PictureFileRA.InternalPath' Is.EqualTo(Path.Combine(LcmFileHelper.ksPicturesDir' myPicRelativePath))); " is 135.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The length of the statement  "			Assert.AreEqual("Noun"' (sense0.MorphoSyntaxAnalysisRA as IMoStemMsa).PartOfSpeechRA.Name.AnalysisDefaultWritingSystem.Text); " is 125.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The length of the statement  "			Assert.AreEqual("niño".Normalize(NormalizationForm.FormD)' entry.LexemeFormOA.Form.VernacularDefaultWritingSystem.Text); " is 120.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The length of the statement  "			Assert.AreEqual("Noun"' (sense0.MorphoSyntaxAnalysisRA as IMoStemMsa).PartOfSpeechRA.Name.AnalysisDefaultWritingSystem.Text); " is 125.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The length of the statement  "			Assert.AreEqual("niña".Normalize(NormalizationForm.FormD)' entry.LexemeFormOA.Form.VernacularDefaultWritingSystem.Text); " is 120.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The length of the statement  "			Assert.AreEqual("Noun"' (sense0.MorphoSyntaxAnalysisRA as IMoStemMsa).PartOfSpeechRA.Name.AnalysisDefaultWritingSystem.Text); " is 125.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport2,The length of the statement  "			Assert.AreEqual("Noun"' (sense.MorphoSyntaxAnalysisRA as IMoStemMsa).PartOfSpeechRA.Name.AnalysisDefaultWritingSystem.Text); " is 124.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport2,The length of the statement  "			Assert.AreEqual("Adjective"' (sense.MorphoSyntaxAnalysisRA as IMoStemMsa).PartOfSpeechRA.Name.AnalysisDefaultWritingSystem.Text); " is 129.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport2,The length of the statement  "			Assert.AreEqual("Noun"' (sense.MorphoSyntaxAnalysisRA as IMoStemMsa).PartOfSpeechRA.Name.AnalysisDefaultWritingSystem.Text); " is 124.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportOutOfOrderRelation,The length of the statement  "			Assert.That(targets.First()' Is.EqualTo(lexEntry.SensesOS[1])' "Targets should be ordered according to Order attribute"); " is 121.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport3,The length of the statement  "			Assert.AreEqual("Noun"' (sense.MorphoSyntaxAnalysisRA as IMoStemMsa).PartOfSpeechRA.Name.AnalysisDefaultWritingSystem.Text); " is 124.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport3,The length of the statement  "			Assert.AreEqual("<lift-residue><trait name=\"paradigm\" value=\"sing\" />" + Environment.NewLine + "</lift-residue>"' allo.LiftResidue); " is 136.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport3,The length of the statement  "			Assert.AreEqual("Adjective"' (sense.MorphoSyntaxAnalysisRA as IMoStemMsa).PartOfSpeechRA.Name.AnalysisDefaultWritingSystem.Text); " is 129.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport3,The length of the statement  "			Assert.AreEqual("Noun"' (sense.MorphoSyntaxAnalysisRA as IMoStemMsa).PartOfSpeechRA.Name.AnalysisDefaultWritingSystem.Text); " is 124.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftDoesNotImportTabs,The length of the statement  "			Assert.That(entry.SensesOS[0].Definition.AnalysisDefaultWritingSystem.Text' Is.EqualTo("\u2028 male adult human link")); " is 120.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport4,The length of the statement  "			Assert.That(messageCapture.Messages[0]' Is.StringContaining("nonsence_object_ID")' "inability to link up bad ref should be reported in message box"); " is 149.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport_InflectionFieldRangeDoesNotCauseError,The length of the statement  "				"<entry dateCreated=\"2013-01-29T08:53:26Z\" dateModified=\"2013-01-29T08:10:28Z\" id=\"baba_aef5e807-c841-4f35-9591-c8a998dc2465\" guid=\"aef5e807-c841-4f35-9591-c8a998dc2465\">"' " is 180.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport_BlankReversalsAreSkippedButNonBlanksAreImported,The length of the statement  "			Assert.That(sense.ReferringReversalIndexEntries.Count' Is.EqualTo(1)' "Empty reversal should not have been imported but non empty should."); " is 140.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport_DateAndWesayIdAloneShouldNotChangeDate,The length of the statement  "			"<entry dateCreated=\"" + entry.DateCreated.ToUniversalTime().ToString("yyyy-MM-ddTHH':'mm':'ssZ") + "\" dateModified=\"" " is 121.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport_DateAndWesayIdAloneShouldNotChangeDate,The length of the statement  "			 + entry.DateModified.ToUniversalTime().ToString("yyyy-MM-ddTHH':'mm':'ssZ") + "\" id=\"some entry_" +  entry.Guid + "\" guid=\"" + entry.Guid + "\">"' " is 150.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport_DateAndWesayIdAloneShouldNotChangeDate,The length of the statement  "			Assert.AreEqual(entry.DateModified.Millisecond' entryModifiedMs' "Modification time lost milliseconds on a 'no-op' merge"); " is 123.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport_PronunciationLanguageAddedToPronunciationAndVernacularLists,The length of the statement  "			AssertThatXmlIn.File(logFile).HasSpecifiedNumberOfMatchesForXpath("//li[contains(.' 'Naxi (International Phonetic Alphabet) (nbf-fonipa)')]"' 1); " is 145.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport_PronunciationLanguageAddedToPronunciationAndVernacularLists,The length of the statement  "			Assert.AreEqual(Cache.LangProject.CurrentPronunciationWritingSystems.Count' 1' "IPA from pronunciation was not added to pronunciation writing systems"); " is 152.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport_PronunciationLanguageAddedToPronunciationAndVernacularLists,The length of the statement  "			Assert.AreEqual(Cache.LangProject.VernacularWritingSystems.Count' 2' "IPA from pronunciation was not added to vernacular writing systems"); " is 139.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyCmPossibilityLists,The length of the statement  "			Assert.AreEqual("49343092-A48B-4c73-92B5-7603DF372D8B".ToLowerInvariant()' morphType.Guid.ToString().ToLowerInvariant()); " is 121.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyCmPossibilityLists,The length of the statement  "			Assert.AreEqual("Does this thing kling or clingy thingy."' morphType.Description.BestAnalysisVernacularAlternative.Text); " is 121.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport8CustomStText,The length of the statement  "			Assert.IsTrue(tss.Equals(para.Contents)' "The first paragraph (second entry) contents should have all its formatting."); " is 120.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport8CustomStText,The length of the statement  "			Assert.IsTrue(tss.Equals(para.Contents)' "The second paragraph (second entry) contents should have all its formatting."); " is 121.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport8CustomStText,The length of the statement  "			Assert.IsTrue(tss.Equals(para.Contents)' "The third paragraph (second entry) contents should have all its formatting."); " is 120.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImportOfCustomList,The length of the statement  "			Assert.Throws<KeyNotFoundException>(() => Cache.ServiceLocator.ObjectRepository.GetObject(new Guid(customListItemGuid))); " is 121.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImportChangingAffixToStem,The length of the statement  "			Assert.That(entry.AlternateFormsOS.First()' Is.InstanceOf(typeof(IMoStemAllomorph))' "affix should be changed to stem"); " is 120.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftImport_UnknownExampleTraitCreatesResidue,The length of the statement  "			"<entry dateCreated=\"2011-03-01T18:09:46Z\" dateModified=\"2011-03-01T18:30:07Z\" guid=\"ecfbe958-36a1-4b82-bb69-ca5210355400\" id=\"hombre_ecfbe958-36a1-4b82-bb69-ca5210355400\">"' " is 182.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftImport_ExampleCustomFieldUpdatedDuringMerge,The length of the statement  "				@"<form lang=""qaa-x-spec""><text>Class=LexEntry; Type=ReferenceAtom; WsSelector=kwsAnal; DstCls=CmPossibility; range=status</text></form>"' " is 140.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftImport_ExampleCustomFieldUpdatedDuringMerge,The length of the statement  "				@"<form lang=""qaa-x-spec""><text>Class=LexExampleSentence; Type=ReferenceAtom; WsSelector=kwsAnal; DstCls=CmPossibility; range=status</text></form>"' " is 150.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftImport_ExampleCustomFieldUpdatedDuringMerge,The length of the statement  "				@"<entry dateCreated=""2013-07-14T21:32:58Z"" dateModified=""2013-07-14T21:46:21Z"" id=""tester_edae30f5-49f0-4025-97ce-3a2022bf7fa3"" guid=""edae30f5-49f0-4025-97ce-3a2022bf7fa3"">"' " is 183.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftImport_ExampleCustomFieldUpdatedDuringMerge,The length of the statement  "				@"<form lang=""qaa-x-spec""><text>Class=LexEntry; Type=ReferenceAtom; WsSelector=kwsAnal; DstCls=CmPossibility; range=status</text></form>"' " is 140.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftImport_ExampleCustomFieldUpdatedDuringMerge,The length of the statement  "				@"<form lang=""qaa-x-spec""><text>Class=LexExampleSentence; Type=ReferenceAtom; WsSelector=kwsAnal; DstCls=CmPossibility; range=status</text></form>"' " is 150.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftImport_ExampleCustomFieldUpdatedDuringMerge,The length of the statement  "				@"<entry dateCreated=""2014-07-14T21:32:58Z"" dateModified=""2014-07-14T21:46:21Z"" id=""tester_edae30f5-49f0-4025-97ce-3a2022bf7fa3"" guid=""edae30f5-49f0-4025-97ce-3a2022bf7fa3"">"' " is 183.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftImport_ExampleCustomFieldUpdatedDuringMerge,The length of the statement  "			var confirmed = Cache.ServiceLocator.GetInstance<ICmPossibilityFactory>().Create(new Guid("bd80cd3e-ea5e-11de-9871-0013722f8dec")' statusList); " is 143.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftImport_ExampleCustomFieldUpdatedDuringMerge,The length of the statement  "			var pending = Cache.ServiceLocator.GetInstance<ICmPossibilityFactory>().Create(new Guid("bd964254-ea5e-11de-8cdf-0013722f8dec")' statusList); " is 141.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,ImportRangeWithNoId_DoesNotDuplicate_ButDoesLoadData,The length of the statement  "			Assert.That(Cache.LangProject.LexDbOA.ReferencesOA.PossibilitiesOS' Has.Count.EqualTo(1)' "Should start out with just the one LRT"); " is 132.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,ImportRangeWithNoId_DoesNotDuplicate_ButDoesLoadData,The length of the statement  "			Assert.That(Cache.LangProject.LexDbOA.ReferencesOA.PossibilitiesOS' Has.Count.EqualTo(1)' "Should have merged import with LexRefType from input"); " is 146.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,ImportRangeWithNoId_DoesNotDuplicateGuids_AnthroCode,The length of the statement  "			Assert.That(Cache.LangProject.AnthroListOA.PossibilitiesOS' Has.Count.EqualTo(1)' "Should start out with just the one ANT"); " is 124.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,ImportRangeWithNoId_DoesNotDuplicateGuids_AnthroCode,The length of the statement  "			Assert.That(Cache.LangProject.AnthroListOA.PossibilitiesOS' Has.Count.EqualTo(1)' "Should have merged import with ICmAnthroItem from input"); " is 141.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,ImportRangeWithExistingObject_DoesNotDuplicate_UnifiesData,The length of the statement  "			Assert.That(Cache.LangProject.LexDbOA.ReferencesOA.PossibilitiesOS' Has.Count.EqualTo(1)' "Should start out with just the one LRT"); " is 132.
Long Statement,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,ImportRangeWithExistingObject_DoesNotDuplicate_UnifiesData,The length of the statement  "			Assert.That(Cache.LangProject.LexDbOA.ReferencesOA.PossibilitiesOS' Has.Count.EqualTo(1)' "Should have merged import with LexRefType from input"); " is 146.
Long Statement,LexTextControlsTests,MasterCategoryTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MasterCategoryTests.cs,MasterCategoryWithGuidNode_MakesPosWithRightGuid,The length of the statement  "				@"<eticPOSList xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:rdfs='http://www.w3.org/2000/01/rdf-schema#' xmlns:owl='http://www.w3.org/2002/07/owl#'> " is 165.
Long Statement,LexTextControlsTests,MasterCategoryTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MasterCategoryTests.cs,MasterCategoryWithGuidNode_MakesPosWithRightGuid,The length of the statement  "	  <def ws='en'>An adjective is a part of speech whose members modify nouns. An adjective specifies the attributes of a noun referent. Note: this is one case among many. Adjectives are a class of modifiers.</def> " is 209.
Long Statement,LexTextControlsTests,MasterCategoryTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MasterCategoryTests.cs,MasterCategoryWithGuidNode_MakesPosWithRightGuid,The length of the statement  "	  <def ws='en'>An adposition is a part of speech whose members are of a closed set and occur before or after a complement composed of a noun phrase' noun' pronoun' or clause that functions as a noun phrase and forms a single structure with the complement to express its grammatical and semantic relation to another unit within a clause.</def> " is 340.
Long Statement,LexTextControlsTests,MasterCategoryTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MasterCategoryTests.cs,MasterCategoryWithGuidNode_MakesPosWithRightGuid,The length of the statement  "			// Not checking the third one because it is non-standard guid for an imaginary POS; negligible chance it already exists. " is 120.
Long Statement,LexTextControlsTests,MasterCategoryTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MasterCategoryTests.cs,MasterCategoryWithGuidNode_MakesPosWithRightGuid,The length of the statement  "			var mcGrandChild = MasterCategoryListDlg.MasterCategory.Create(new HashSet<IPartOfSpeech> {adposition' postPosition}' grandChildItem' Cache); " is 141.
Long Statement,LexTextControlsTests,MasterCategoryTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MasterCategoryTests.cs,MasterCategoryWithGuidNode_ValidatePosInReversalGuid,The length of the statement  "				@"<eticPOSList xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:rdfs='http://www.w3.org/2000/01/rdf-schema#' xmlns:owl='http://www.w3.org/2002/07/owl#'> " is 165.
Long Statement,LexTextControlsTests,MasterCategoryTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MasterCategoryTests.cs,MasterCategoryWithGuidNode_ValidatePosInReversalGuid,The length of the statement  "					  <def ws='en'>An adjective is a part of speech whose members modify nouns. An adjective specifies the attributes of a noun referent. Note: this is one case among many. Adjectives are a class of modifiers.</def> " is 209.
Long Statement,LexTextControlsTests,MasterCategoryTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MasterCategoryTests.cs,MasterCategoryWithGuidNode_ValidatePosInReversalGuid,The length of the statement  "					  <def ws='en'>An adposition is a part of speech whose members are of a closed set and occur before or after a complement composed of a noun phrase' noun' pronoun' or clause that functions as a noun phrase and forms a single structure with the complement to express its grammatical and semantic relation to another unit within a clause.</def> " is 340.
Long Statement,LexTextControlsTests,WordsSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\WordsSfmImportTests.cs,BasicConversion,The length of the statement  "			mappings.Add(new InterlinearMapping { Marker = "lx"' Destination = InterlinDestination.Wordform' WritingSystem = "qaa-x-kal" }); " is 128.
Long Statement,LexTextControlsTests,WordsSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\WordsSfmImportTests.cs,BasicConversion,The length of the statement  "			mappings.Add(new InterlinearMapping { Marker = "ge"' Destination = InterlinDestination.WordGloss' WritingSystem = "en" }); " is 122.
Long Statement,LexTextControlsTests,WordsSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\WordsSfmImportTests.cs,WordsWithoutGlosses,The length of the statement  "			mappings.Add(new InterlinearMapping { Marker = "lx"' Destination = InterlinDestination.Wordform' WritingSystem = "qaa-x-kal" }); " is 128.
Long Statement,LexTextControlsTests,WordsSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\WordsSfmImportTests.cs,WordsWithoutGlosses,The length of the statement  "			mappings.Add(new InterlinearMapping { Marker = "ge"' Destination = InterlinDestination.WordGloss' WritingSystem = "en" }); " is 122.
Long Statement,SIL.FieldWorks.LexText.Controls,MsaInflectionFeatureListDlgTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MsaInflectionFeatureListDlgTests.cs,TestFeatureStructureContent,The length of the statement  "				Assert.AreEqual("subject agreement"' complex.FeatureRA.Name.AnalysisDefaultWritingSystem.Text' "Expected complex feature name"); " is 128.
Complex Conditional,SIL.FieldWorks.LexText.Controls,MsaInflectionFeatureListDlgTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MsaInflectionFeatureListDlgTests.cs,TestFeatureStructureContent,The conditional expression  "!(((closed.FeatureRA.Name.AnalysisDefaultWritingSystem.Text == "gender") &&  							(closed.ValueRA.Name.AnalysisDefaultWritingSystem.Text == "feminine gender")) ||  						  ((closed.FeatureRA.Name.AnalysisDefaultWritingSystem.Text == "person") &&  							(closed.ValueRA.Name.AnalysisDefaultWritingSystem.Text == "first person")))"  is complex.
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_AllNumbered_OutOfOrder,The following statement contains a magic number: DoImport(allNumbered_OutOfOrder' MakeDefaultFields()' 6);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_AllNumbered_OutOfOrder,The following statement contains a magic number: VerifyHomographNumber("two"' 2);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_AllNumbered_OutOfOrder,The following statement contains a magic number: VerifyHomographNumber("three"' 3);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_AllNumbered_OutOfOrder,The following statement contains a magic number: VerifyHomographXRef("bahaa"' 3);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_AllNumbered_OutOfOrder,The following statement contains a magic number: VerifyHomographXRef("bahaaaa"' 2);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_SomeNumbered_OutOfOrder_Subentry,The following statement contains a magic number: DoImport(someNumbered_OutOfOrder_Subentry' MakeDefaultFields()' 5);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_SomeNumbered_OutOfOrder_Subentry,The following statement contains a magic number: VerifyHomographNumber("twoB"' 2);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_SomeNumbered_OutOfOrder_Subentry,The following statement contains a magic number: VerifyHomographNumber("threeB"' 3);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_NoneNumberedTwoSubentries,The following statement contains a magic number: DoImport(noneNumberedTwoSubentries' MakeDefaultFields()' 5);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_NoneNumberedTwoSubentries,The following statement contains a magic number: VerifyHomographNumber("twoC"' 2);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_NoneNumberedTwoSubentries,The following statement contains a magic number: VerifyHomographNumber("threeC"' 3);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_RefsToSubentry,The following statement contains a magic number: DoImport(refsToSubentry' MakeDefaultFields()' 7);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_RefsToSubentry,The following statement contains a magic number: VerifyHomographNumber("twoD"' 2);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_RefsToSubentry,The following statement contains a magic number: VerifyHomographNumber("threeD"' 3);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_RefsToHomograph1OrBlankBothWork,The following statement contains a magic number: DoImport(refsToHomograph1OrBlankBothWork' MakeDefaultFields()' 8);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_RefsToHomograph1OrBlankBothWork,The following statement contains a magic number: VerifyHomographNumber("test a2"' 2);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportHomographs_RefsToHomograph1OrBlankBothWork,The following statement contains a magic number: VerifyHomographNumber("test b2"' 2);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportVariantsAndMainEntryRefs_DoesNotDuplicateEntries,The following statement contains a magic number: DoImport(sfmDataWithVariantsAndMainEntryLinks' MakeDefaultFields()' 3);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportMinorBeforeMain_DoesNotDuplicateEntries,The following statement contains a magic number: DoImport(sfmDataWithMinorBeforeMainEntryLinks' MakeDefaultFields()' 2);
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,ImportBlankPsAfterNonBlank_DoesNotDropBlankPosAndDupPrevious,The following statement contains a magic number: Assert.AreEqual(2' entry.SensesOS.Count()' "Import should have resulted in two senses");
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,DoImport,The following statement contains a magic number: sut.Import(new DummyProgressDlg()' new object[]  				{  					true' // run to completion  					5' // last step to execute => all of them  					0' // phase already completed  					phase1Output'  					3' // lex entries in file  					false' // don't want to display import report  					""' // phase 1 html report' only used in generating messages' I think.  					LexImport.s_sPhase1FileName' // required always  					true // create entries for missing link targets  				});
Magic Number,LexTextControlsTests,LexImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LexImportTests.cs,DoImport,The following statement contains a magic number: sut.Import(new DummyProgressDlg()' new object[]  				{  					true' // run to completion  					5' // last step to execute => all of them  					0' // phase already completed  					phase1Output'  					3' // lex entries in file  					false' // don't want to display import report  					""' // phase 1 html report' only used in generating messages' I think.  					LexImport.s_sPhase1FileName' // required always  					true // create entries for missing link targets  				});
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddLexEntries,The following statement contains a magic number: NonUndoableUnitOfWorkHelper.Do(m_cache.ActionHandlerAccessor' () =>  				{  					m_entryTest = entryFact.Create("test & trouble"' "trials & tribulations"' msaNoun);  					m_entryTest.CitationForm.VernacularDefaultWritingSystem =  						TsStringUtils.MakeString("citation"' m_cache.DefaultVernWs);  					m_entryTest.Bibliography.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("bibliography entry"' m_cache.DefaultAnalWs);    					var dialectFactory = Cache.ServiceLocator.GetInstance<ICmPossibilityFactory>();  					var dialectLabel = dialectFactory.Create(Guid.NewGuid()' Cache.LangProject.LexDbOA.DialectLabelsOA);  					dialectLabel.Name.set_String(Cache.DefaultAnalWs' "east");  					dialectLabel.Abbreviation.set_String(Cache.DefaultAnalWs' "e");  					m_entryTest.DialectLabelsRS.Add(dialectLabel);    					m_entryTest.Comment.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("I like this comment."' m_cache.DefaultAnalWs);  					m_entryTest.LiteralMeaning.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("Literally we need this."' m_cache.DefaultAnalWs);  					m_entryTest.Restrictions.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("There are some restrictions on where this can be used."'  														m_cache.DefaultAnalWs);  					m_entryTest.SummaryDefinition.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("In summary dot dot dot."' m_cache.DefaultAnalWs);  					m_entryTest.DoNotPublishInRC.Add(m_mapPublications["Main Dictionary"]);    					var tssDefn = TsStringUtils.MakeString("Definition for sense.\x2028Another para of defn"' m_cache.DefaultAnalWs);  					var bldr = tssDefn.GetBldr();  					int len = bldr.Length;  					var otherFileFolder = Path.Combine(MockLinkedFilesFolder' LcmFileHelper.ksOtherLinkedFilesDir);  					var otherFilePath = Path.Combine(otherFileFolder' kotherLinkedFileName);  					CreateDummyFile(otherFilePath);  					var mockStyle = new MockStyle() { Name = "hyperlink" };  					StringServices.MarkTextInBldrAsHyperlink(bldr' len - 4' len' otherFilePath' mockStyle' MockLinkedFilesFolder);    					var ls = m_entryTest.SensesOS[0];  					ls.Definition.AnalysisDefaultWritingSystem = bldr.GetString();  					ls.AnthroNote.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("Anthro Note."' m_cache.DefaultAnalWs);  					ls.Bibliography.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("sense Bibliography"' m_cache.DefaultAnalWs);  					ls.DiscourseNote.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("sense Discoursing away..."' m_cache.DefaultAnalWs);  					ls.EncyclopedicInfo.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("sense EncyclopedicInfo"' m_cache.DefaultAnalWs);  					ls.GeneralNote.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("sense GeneralNote"' m_cache.DefaultAnalWs);  					ls.GrammarNote.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("sense GrammarNote"' m_cache.DefaultAnalWs);  					ls.PhonologyNote.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("sense PhonologyNote"' m_cache.DefaultAnalWs);  					ls.Restrictions.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("sense Restrictions"' m_cache.DefaultAnalWs);  					ls.SemanticsNote.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("sense SemanticsNote"' m_cache.DefaultAnalWs);  					ls.SocioLinguisticsNote.AnalysisDefaultWritingSystem =  						TsStringUtils.MakeString("sense SocioLinguisticsNote"' m_cache.DefaultAnalWs);  					ls.DoNotPublishInRC.Add(m_mapPublications["School"]);  					m_entryTest.LiftResidue =  						"<lift-residue id=\"songanganya & nganga_63698066-52d6-46bd-8438-64ce2a820dc6\" dateCreated=\"2008-04-27T22:41:26Z\" dateModified=\"2007-07-02T17:00:00Z\"></lift-residue>";    					//Add an academic domain to the sense.  					ICmPossibility possibility;  					AddAcademicDomain(ls' "rhetoric");  					AddAcademicDomain(ls' "computer science");  					AddAcademicDomain(ls' "medicine");    					m_entryThis = entryFact.Create("this"' "this"' msaPronoun);  					m_entryIs = entryFact.Create("is"' "to.be"' msaVerb);    					var picFolder = m_cache.ServiceLocator.GetInstance<ICmFolderFactory>().Create();  					m_cache.LangProject.PicturesOC.Add(picFolder);    					// Verify that picture files get copied to the right places' and how we handle various  					// kinds of source location.  					var picturesFolderPath = Path.Combine(MockLinkedFilesFolder' "Pictures");  					Directory.CreateDirectory(picturesFolderPath);  					var subfolder = Path.Combine(picturesFolderPath' ksubFolderName);    					MakePicture(picFolder' Path.Combine(picturesFolderPath' kpictureOfTestFileName));  					MakePicture(picFolder' Path.Combine(MockLinkedFilesFolder' kpictureOfTestFileName));  					MakePicture(picFolder' Path.Combine(subfolder' kotherPicOfTestFileName));  					m_tempPictureFilePath = Path.GetTempFileName();  					MakePicture(picFolder' m_tempPictureFilePath);    					// See if we can export audio writing system stuff.  					var audioFolderPath = Path.Combine(MockLinkedFilesFolder' LcmFileHelper.ksMediaDir);  					CreateDummyFile(Path.Combine(audioFolderPath' kaudioFileName));  					m_entryTest.SensesOS[0].Definition.set_String(m_audioWsCode' kaudioFileName);    					// Lexeme form is a special case  					CreateDummyFile(Path.Combine(audioFolderPath' klexemeFormFileName));  					m_entryTest.LexemeFormOA.Form.set_String(m_audioWsCode' klexemeFormFileName);  					// Citation form is written in a different way. Test it too.  					CreateDummyFile(Path.Combine(audioFolderPath' kcitationFormFileName));  					m_entryTest.CitationForm.set_String(m_audioWsCode' kcitationFormFileName);  					// Set this as a value later' when we create custom fields.  					CreateDummyFile(Path.Combine(audioFolderPath' kcustomMultiFileName));    					// Try a pronunciation media file.  					var pronunciationPath = Path.Combine(audioFolderPath' kpronunciationFileName);  					CreateDummyFile(pronunciationPath);  					var pronunciation = m_cache.ServiceLocator.GetInstance<ILexPronunciationFactory>().Create();  					m_entryTest.PronunciationsOS.Add(pronunciation);  					var media = m_cache.ServiceLocator.GetInstance<ICmMediaFactory>().Create();  					pronunciation.MediaFilesOS.Add(media);  					var pronunFile = m_cache.ServiceLocator.GetInstance<ICmFileFactory>().Create();  					picFolder.FilesOC.Add(pronunFile); // maybe not quite appropriate' but has to be owned somewhere.  					media.MediaFileRA = pronunFile;  					pronunFile.InternalPath = Path.Combine(LcmFileHelper.ksMediaDir' kpronunciationFileName);    					// We should be able to export LexEntryRefs. BaseForm is a special case.  					var entryUn = entryFact.Create("un"' "not"' new SandboxGenericMSA() { MsaType = MsaType.kDeriv });  					var entryBelieve = entryFact.Create("believe"' "believe"' msaVerb);  					var entryIng = entryFact.Create("ing"' "with property"' new SandboxGenericMSA() { MsaType = MsaType.kDeriv });  					m_entryUnbelieving = entryFact.Create("unbelieving"' "not believing"' msaNoun); // not really a noun' I know  					var ler1 = MakeComplexFormEntryRef(m_entryUnbelieving' new[] { entryUn' entryBelieve' entryIng }'  						"Compound");  					ler1.PrimaryLexemesRS.Add(entryBelieve);  					var ler2 = MakeComplexFormEntryRef(m_entryUnbelieving' new[] { entryBelieve }' "BaseForm");  					ler2.PrimaryLexemesRS.Add(entryBelieve);    					var otherFolderPath = Path.Combine(MockLinkedFilesFolder' "Others");    					// one of these is an example and won't be published in either Publication  					AddCustomFields();  					// Add a custom list that has no custom field associated with it.  					AddCustomList(m_CustomPossListUnreferenced);  				});
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddCustomFieldsInLexEntry,The following statement contains a magic number: var listRefCollectionItems = new int[3];
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddCustomFieldsInLexEntry,The following statement contains a magic number: i == 3
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddCustomFieldsInLexEntry,The following statement contains a magic number: m_sda.Replace(m_entryTest.Hvo' fd.Id' 0' 0' listRefCollectionItems' 3);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddCustomFieldSimpleString,The following statement contains a magic number: bldr.SetIntPropValues(5' 10' (int)FwTextPropType.ktptWs' (int)FwTextPropVar.ktpvDefault' ws == m_cache.DefaultVernWs ? m_cache.DefaultAnalWs : m_cache.DefaultVernWs);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddCustomFieldSimpleString,The following statement contains a magic number: bldr.SetIntPropValues(5' 10' (int)FwTextPropType.ktptWs' (int)FwTextPropVar.ktpvDefault' ws == m_cache.DefaultVernWs ? m_cache.DefaultAnalWs : m_cache.DefaultVernWs);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddCustomFieldsInLexSense,The following statement contains a magic number: m_cache.DomainDataByFlid.SetInt(m_entryTest.SensesOS[0].Hvo' fd.Id' 5);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddCustomFieldMultistringText,The following statement contains a magic number: bldr.SetIntPropValues(5' 10' (int) FwTextPropType.ktptWs' (int) FwTextPropVar.ktpvDefault' m_cache.DefaultVernWs);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddCustomFieldMultistringText,The following statement contains a magic number: bldr.SetIntPropValues(5' 10' (int) FwTextPropType.ktptWs' (int) FwTextPropVar.ktpvDefault' m_cache.DefaultVernWs);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExportRanges,The following statement contains a magic number: Assert.AreEqual(14' ranges.Count);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExportRanges,The following statement contains a magic number: Assert.IsTrue(rangeElements.Count == 2);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExportRanges,The following statement contains a magic number: Assert.IsTrue(rangeElements.Count == 2);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExportRanges,The following statement contains a magic number: Assert.IsTrue(rangeElements.Count == 6);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExportRanges,The following statement contains a magic number: VerifyExportRangeElement(rangeElements[2]' acDomItem2);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExportRanges,The following statement contains a magic number: VerifyExportRangeElement(rangeElements[3]' acDomItem3);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExportRanges,The following statement contains a magic number: VerifyExportRangeElement(rangeElements[4]' acDomItem4);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExportRanges,The following statement contains a magic number: VerifyExportRangeElement(rangeElements[5]' acDomItem5);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExportRanges,The following statement contains a magic number: Assert.IsTrue(rangeElements.Count == 2);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExport,The following statement contains a magic number: Assert.AreEqual(7' repoEntry.Count' "Should have 7 lex entries");
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExport,The following statement contains a magic number: Assert.AreEqual(7' repoSense.Count' "Each entry has one sense for a total of 7");
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExport,The following statement contains a magic number: Assert.AreEqual(7' entries.Count' "LIFT file should contain 7 entries");
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExport,The following statement contains a magic number: Assert.Greater(300' delta.TotalSeconds);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExport,The following statement contains a magic number: Assert.Greater(300' delta.TotalSeconds);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExport,The following statement contains a magic number: Assert.AreEqual(9' traitlist.Count);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyPublishInExport,The following statement contains a magic number: Assert.AreEqual(2' dnpiNodes.Count' "Should contain both publications");
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyLexEntryRefs,The following statement contains a magic number: Assert.That(relations' Has.Count.EqualTo(4));
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyLexEntryRefs,The following statement contains a magic number: VerifyRelation(relations[2]' "_component-lexeme"' "Compound"' false' "ing");
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyLexEntryRefs,The following statement contains a magic number: VerifyRelation(relations[3]' "BaseForm"' "BaseForm"' true' "believe");
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyEntryExtraStuff,The following statement contains a magic number: VerifyMultiStringAlt(citations[0]' m_cache.DefaultVernWs' 2' entry.CitationForm.VernacularDefaultWritingSystem);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyEntryExtraStuff,The following statement contains a magic number: Assert.AreEqual(3' notes.Count);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyEntryExtraStuff,The following statement contains a magic number: VerifyMultiStringAlt(xlf' m_audioWsCode' 2' TsStringUtils.MakeString(klexemeFormFileName' m_audioWsCode));
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyEntryExtraStuff,The following statement contains a magic number: VerifyMultiStringAlt(citations[0]' m_audioWsCode' 2' TsStringUtils.MakeString(kcitationFormFileName' m_audioWsCode));
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyEntryCustomFields,The following statement contains a magic number: Assert.AreEqual(5' xfields.Count);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyEntryCustomFields,The following statement contains a magic number: var genDate = sda.get_GenDateProp(m_entryTest.Hvo' m_customFieldEntryIds[2]);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExtraSenseStuff,The following statement contains a magic number: VerifyMultiStringAlt(xdefs[0]' m_cache.DefaultAnalWs' 2' sense.Definition.AnalysisDefaultWritingSystem);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExtraSenseStuff,The following statement contains a magic number: VerifyMultiStringAlt(xdefs[0]' m_audioWsCode' 2' TsStringUtils.MakeString(kaudioFileName' m_audioWsCode));
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExtraSenseStuff,The following statement contains a magic number: Assert.AreEqual(10' xnotes.Count);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifySenseCustomFields,The following statement contains a magic number: Assert.AreEqual(5' xtraits.Count);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyExampleSentenceCustomFields,The following statement contains a magic number: Assert.AreEqual(2' xfields.Count);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyMultiStringAnalVern,The following statement contains a magic number: Assert.AreEqual(expectCustom ? 3 : 2' xforms.Count);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyMultiStringAnalVern,The following statement contains a magic number: Assert.AreEqual(expectCustom ? 3 : 2' xforms.Count);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyMultiStringAnalVern,The following statement contains a magic number: sLang = XmlUtils.GetOptionalAttributeValue(xforms[2]' "lang");
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyMultiStringAnalVern,The following statement contains a magic number: sText = xforms[2].FirstChild.InnerText;
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddStTextCustomFieldAndData,The following statement contains a magic number: var hvoText = m_cache.DomainDataByFlid.MakeNewObject(StTextTags.kClassId' m_entryTest.Hvo' m_flidLongText' -2);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,AddStTextCustomFieldAndData,The following statement contains a magic number: hvoText = m_cache.DomainDataByFlid.MakeNewObject(StTextTags.kClassId' m_entryThis.Hvo' m_flidLongText' -2);
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyCustomStTextForEntryTest,The following statement contains a magic number: Assert.AreEqual(5' xspans.Count' "We should have 5 span elements inside the \"Long Text\" field.");
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyCustomStTextForEntryTest,The following statement contains a magic number: switch (i)  				{  					case 0:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.IsNull(sLang);  						Assert.AreEqual("Bulleted Text"' sClass);  						VerifyFirstParagraph(xe' sLangExpected);  						break;  					case 1:  						Assert.IsNotNull(xt);  						Assert.AreEqual("\u2029"' xt.InnerText);  						break;  					case 2:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("Why is there air?  "' xe.InnerXml);  						break;  					case 3:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.AreEqual("Strong"' sClass);  						Assert.AreEqual("Which way is up?"' xe.InnerXml);  						break;  					case 4:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("  Inquiring minds want to know!"' xe.InnerXml);  						break;  					case 5:  						Assert.IsNotNull(xt);  						Assert.AreEqual("\u2029"' xt.InnerText);  						break;  					case 6:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.IsNull(sLang);  						Assert.AreEqual("Canadian Bacon"' sClass);  						VerifyThirdParagraph(xe' sLangExpected);  						break;  				}
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyCustomStTextForEntryTest,The following statement contains a magic number: switch (i)  				{  					case 0:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.IsNull(sLang);  						Assert.AreEqual("Bulleted Text"' sClass);  						VerifyFirstParagraph(xe' sLangExpected);  						break;  					case 1:  						Assert.IsNotNull(xt);  						Assert.AreEqual("\u2029"' xt.InnerText);  						break;  					case 2:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("Why is there air?  "' xe.InnerXml);  						break;  					case 3:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.AreEqual("Strong"' sClass);  						Assert.AreEqual("Which way is up?"' xe.InnerXml);  						break;  					case 4:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("  Inquiring minds want to know!"' xe.InnerXml);  						break;  					case 5:  						Assert.IsNotNull(xt);  						Assert.AreEqual("\u2029"' xt.InnerText);  						break;  					case 6:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.IsNull(sLang);  						Assert.AreEqual("Canadian Bacon"' sClass);  						VerifyThirdParagraph(xe' sLangExpected);  						break;  				}
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyCustomStTextForEntryTest,The following statement contains a magic number: switch (i)  				{  					case 0:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.IsNull(sLang);  						Assert.AreEqual("Bulleted Text"' sClass);  						VerifyFirstParagraph(xe' sLangExpected);  						break;  					case 1:  						Assert.IsNotNull(xt);  						Assert.AreEqual("\u2029"' xt.InnerText);  						break;  					case 2:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("Why is there air?  "' xe.InnerXml);  						break;  					case 3:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.AreEqual("Strong"' sClass);  						Assert.AreEqual("Which way is up?"' xe.InnerXml);  						break;  					case 4:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("  Inquiring minds want to know!"' xe.InnerXml);  						break;  					case 5:  						Assert.IsNotNull(xt);  						Assert.AreEqual("\u2029"' xt.InnerText);  						break;  					case 6:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.IsNull(sLang);  						Assert.AreEqual("Canadian Bacon"' sClass);  						VerifyThirdParagraph(xe' sLangExpected);  						break;  				}
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyCustomStTextForEntryTest,The following statement contains a magic number: switch (i)  				{  					case 0:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.IsNull(sLang);  						Assert.AreEqual("Bulleted Text"' sClass);  						VerifyFirstParagraph(xe' sLangExpected);  						break;  					case 1:  						Assert.IsNotNull(xt);  						Assert.AreEqual("\u2029"' xt.InnerText);  						break;  					case 2:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("Why is there air?  "' xe.InnerXml);  						break;  					case 3:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.AreEqual("Strong"' sClass);  						Assert.AreEqual("Which way is up?"' xe.InnerXml);  						break;  					case 4:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("  Inquiring minds want to know!"' xe.InnerXml);  						break;  					case 5:  						Assert.IsNotNull(xt);  						Assert.AreEqual("\u2029"' xt.InnerText);  						break;  					case 6:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.IsNull(sLang);  						Assert.AreEqual("Canadian Bacon"' sClass);  						VerifyThirdParagraph(xe' sLangExpected);  						break;  				}
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyCustomStTextForEntryTest,The following statement contains a magic number: switch (i)  				{  					case 0:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.IsNull(sLang);  						Assert.AreEqual("Bulleted Text"' sClass);  						VerifyFirstParagraph(xe' sLangExpected);  						break;  					case 1:  						Assert.IsNotNull(xt);  						Assert.AreEqual("\u2029"' xt.InnerText);  						break;  					case 2:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("Why is there air?  "' xe.InnerXml);  						break;  					case 3:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.AreEqual("Strong"' sClass);  						Assert.AreEqual("Which way is up?"' xe.InnerXml);  						break;  					case 4:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("  Inquiring minds want to know!"' xe.InnerXml);  						break;  					case 5:  						Assert.IsNotNull(xt);  						Assert.AreEqual("\u2029"' xt.InnerText);  						break;  					case 6:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.IsNull(sLang);  						Assert.AreEqual("Canadian Bacon"' sClass);  						VerifyThirdParagraph(xe' sLangExpected);  						break;  				}
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyCustomStTextForEntryTest,The following statement contains a magic number: Assert.AreEqual(7' i' "There should be exactly 7 child nodes of the text element.");
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyFirstParagraph,The following statement contains a magic number: switch (i)  				{  					case 0:  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("This is a "' xe.InnerXml);  						break;  					case 1:  						Assert.AreEqual(sLangExpected' sLang);  						Assert.AreEqual("Emphasized Text"' sClass);  						Assert.AreEqual("test"' xe.InnerXml);  						break;  					case 2:  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual(".  This is only a test!"' xe.InnerXml);  						break;  				}
Magic Number,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyFirstParagraph,The following statement contains a magic number: Assert.AreEqual(3' i' "There should be exactly 3 child nodes of the first paragraph.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotDuplicateSequenceRelations,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepNew' 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotDuplicateSequenceRelations,The following statement contains a magic number: Assert.AreEqual(2' coldSense.LexSenseReferences.First().TargetsRS.Count'  								 "Incorrect number of references' part relations not imported correctly.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotDuplicateSequenceRelations,The following statement contains a magic number: TryImport(sNewFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotDuplicateSequenceRelations,The following statement contains a magic number: Assert.AreEqual(2' coldSense.LexSenseReferences.First().TargetsRS.Count'  								 "Incorrect number of references' part relations not imported correctly.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotDuplicateSequenceRelations,The following statement contains a magic number: Assert.AreEqual(2' coolerSense.LexSenseReferences.First().TargetsRS.Count'  								 "Incorrect number of targets in the leg sense.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportRemovesItemFromComponentRelation,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepNew' 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportRemovesItemFromComponentRelation,The following statement contains a magic number: Assert.AreEqual(3' coldEntry.LexEntryReferences.ElementAt(0).TargetsRS.Count'  								 "Incorrect number of component references.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportRemovesItemFromComponentRelation,The following statement contains a magic number: logFile = TryImport(sNewFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportRemovesItemFromComponentRelation,The following statement contains a magic number: Assert.AreEqual(2' coldEntry.LexEntryReferences.ElementAt(0).TargetsRS.Count'  								 "Incorrect number of component references.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotSplitComponentCollection,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepNew' 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotSplitComponentCollection,The following statement contains a magic number: Assert.AreEqual(3' todoEntry.LexEntryReferences.First().TargetsRS.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportWarnsOnNonSubsetCollectionMerge,The following statement contains a magic number: TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepNew' 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportWarnsOnNonSubsetCollectionMerge,The following statement contains a magic number: var logFile = TryImport(sMergeFile' null' FlexLiftMerger.MergeStyle.MsKeepNew' 4);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportWarnsOnNonSubsetCollectionMerge,The following statement contains a magic number: Assert.AreEqual(3' todoEntry.LexEntryReferences.First().TargetsRS.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotSplitComplexForms_LT12948,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepNew' 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotSplitComplexForms_LT12948,The following statement contains a magic number: Assert.AreEqual(2' todoEntry.ComplexFormEntryRefs.First().ComponentLexemesRS.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportSplitsDifferingComplexFormsByType_LT12948,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepNew' 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportSplitsDifferingComplexFormsByType_LT12948,The following statement contains a magic number: Assert.AreEqual(2' todoEntry.ComplexFormEntryRefs.First().ComponentLexemesRS.Count' "Wrong number of Components.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestMergeWithDiffComponentListKeepOld,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepNew' 4);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestMergeWithDiffComponentListKeepOld,The following statement contains a magic number: TryImport(sNewFile' null' FlexLiftMerger.MergeStyle.MsKeepNew' 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestMergeWithDiffComponentListKeepOld,The following statement contains a magic number: Assert.AreEqual(2' todoEntry.ComplexFormEntryRefs.First().ComponentLexemesRS.Count' "Incorrect number of components.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotSplitSynonyms_LT12948,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepNew' 5);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotSplitSynonyms_LT12948,The following statement contains a magic number: Assert.AreEqual(3' bungaloSense.LexSenseReferences.First().TargetsRS.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotSplitSynonyms_LT12948,The following statement contains a magic number: Assert.AreEqual(2' bobEntry.LexEntryReferences.First().TargetsRS.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotDuplicateTreeRelations,The following statement contains a magic number: var logFile = TryImport(sOrigFile' CreateInputRangesFile(treeLiftRange)' FlexLiftMerger.MergeStyle.MsKeepNew' 4);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotDuplicateTreeRelations,The following statement contains a magic number: Assert.AreEqual(2' bodySense.LexSenseReferences.First().TargetsRS.Count'  								 "Incorrect number of references' part relations not imported correctly.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotDuplicateTreeRelations,The following statement contains a magic number: TryImport(sNewFile' CreateInputRangesFile(treeLiftRange)' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 4);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotDuplicateTreeRelations,The following statement contains a magic number: Assert.AreEqual(3' bodySense.LexSenseReferences.First().TargetsRS.Count'  								 "Incorrect number of references' part relations not imported correctly.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotDuplicateTreeRelations,The following statement contains a magic number: Assert.AreEqual(3' legSense.LexSenseReferences.First().TargetsRS.Count'  								 "Incorrect number of targets in the leg sense.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotConfuseModifiedTreeRelations,The following statement contains a magic number: var logFile = TryImport(sOrigFile' CreateInputRangesFile(treeLiftRange)' FlexLiftMerger.MergeStyle.MsKeepNew' 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotConfuseModifiedTreeRelations,The following statement contains a magic number: Assert.AreEqual(3' aSense.LexSenseReferences.First().TargetsRS.Count'  								 "Incorrect number of references' part relations not imported correctly.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotConfuseModifiedTreeRelations,The following statement contains a magic number: TryImport(sNewFile' CreateInputRangesFile(treeLiftRange)' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 4);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotConfuseModifiedTreeRelations,The following statement contains a magic number: Assert.AreEqual(2' aSense.LexSenseReferences.First().TargetsRS.Count'  								 "Incorrect number of references' part relations not imported correctly.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportDoesNotConfuseModifiedTreeRelations,The following statement contains a magic number: Assert.AreEqual(2' cSense.LexSenseReferences.First().TargetsRS.Count'  								 "Incorrect number of targets in the c senses reference.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomPairReferenceTypeWorks,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomPairReferenceTypeWorks,The following statement contains a magic number: logFile = TryImport(sNewFile' CreateInputRangesFile(newWithPairRange)' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomRangesIgnoresNonCustomRanges,The following statement contains a magic number: var logFile = TryImport(sOrigFile' CreateInputRangesFile(rangeWithOneCustomAndOneDefault)' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomReferenceTypeWithMultipleWsWorks,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomReferenceTypeWithMultipleWsWorks,The following statement contains a magic number: logFile = TryImport(sNewFile' CreateInputRangesFile(newWithRelationRange)' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomReferenceTypeWithMultipleWsWorks,The following statement contains a magic number: Assert.That(queueType.Description.StringCount == 2' "One writing system didn't import");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomReferenceTypeWithMultipleWsWorks,The following statement contains a magic number: Assert.That(queueType.Name.StringCount == 2' "One writing system didn't import");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportCustomReferenceTypeWithMultipleWsWorks,The following statement contains a magic number: Assert.That(queueType.Abbreviation.StringCount == 2' "One writing system didn't import");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestReplaceSynonymWithAntonymWorks,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestReplaceSynonymWithAntonymWorks,The following statement contains a magic number: logFile = TryImport(sNewFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestDeleteRelationRefOnVariantComplexFormWorks,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestDeleteRelationRefOnVariantComplexFormWorks,The following statement contains a magic number: logFile = TryImport(sNewFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestDeleteVariantComplexFormWorks,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestDeleteVariantComplexFormWorks,The following statement contains a magic number: logFile = TryImport(sNewFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestVariantComplexFormNotDeletedWhenUnTouchedWorks,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestVariantComplexFormNotDeletedWhenUnTouchedWorks,The following statement contains a magic number: logFile = TryImport(sNewFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestDeleteDerivativeComplexFormWorks,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestDeleteDerivativeComplexFormWorks,The following statement contains a magic number: logFile = TryImport(sNewFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,CreateInputFile,The following statement contains a magic number: var path = Path.Combine(LiftFolder' String.Format("LiftTest{0}.lift"' TestNameRandomizer.Next(1000)));
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,CreateInputRangesFile,The following statement contains a magic number: var path = Path.Combine(LiftFolder' String.Format("LiftTest{0}.lift-ranges"' TestNameRandomizer.Next(1000)));
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The following statement contains a magic number: var logFile = TryImport(sOrigFile' 4);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The following statement contains a magic number: Assert.AreEqual(4' repoEntry.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The following statement contains a magic number: Assert.AreEqual(4' repoSense.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The following statement contains a magic number: Assert.AreEqual(2' sense0.SemanticDomainsRC.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The following statement contains a magic number: Assert.That(sense0.PicturesOS.Count' Is.EqualTo(2));
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The following statement contains a magic number: Assert.AreEqual(2' sense0.SemanticDomainsRC.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The following statement contains a magic number: Assert.AreEqual(2' sense0.SemanticDomainsRC.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport1,The following statement contains a magic number: Assert.AreEqual(2' sense0.SemanticDomainsRC.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport2,The following statement contains a magic number: var logFile = TryImport(sOrigFile' 4);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport2,The following statement contains a magic number: Assert.AreEqual(4' repoEntry.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport2,The following statement contains a magic number: Assert.AreEqual(3' repoSense.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport2,The following statement contains a magic number: Assert.AreEqual(2' entry.EntryRefsOS.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport2,The following statement contains a magic number: Assert.AreEqual(2' lexref.ComponentLexemesRS.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport2,The following statement contains a magic number: Assert.AreEqual(2' lexref.PrimaryLexemesRS.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportOutOfOrderRelation,The following statement contains a magic number: Assert.AreEqual(2' repoSense.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestImportOutOfOrderRelation,The following statement contains a magic number: Assert.That(targets' Has.Count.EqualTo(2));
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport3,The following statement contains a magic number: var logFile = TryImport(sOrigFile' 4);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport3,The following statement contains a magic number: Assert.AreEqual(4' repoEntry.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport3,The following statement contains a magic number: Assert.AreEqual(3' repoSense.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport3,The following statement contains a magic number: Assert.AreEqual(2' lexref.ComponentLexemesRS.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftDataImportDoesNotDuplicateVariants,The following statement contains a magic number: var logFile = TryImport(sOrigFile' 4);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftDataImportDoesNotDuplicateVariants,The following statement contains a magic number: logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepNew' 4);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftDataImportDoesNotDuplicateVariants,The following statement contains a magic number: Assert.AreEqual(4' repoEntry.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,LiftDataImportDoesNotDuplicateVariants,The following statement contains a magic number: Assert.AreEqual(3' repoSense.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport4,The following statement contains a magic number: const int idxModifiedLine = 19;
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport5_CustomFieldsStringsAndMultiUnicode,The following statement contains a magic number: var logFile = TryImport(sOrigFile' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport5_CustomFieldsStringsAndMultiUnicode,The following statement contains a magic number: Assert.AreEqual(2' repoEntry.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport5_CustomFieldsStringsAndMultiUnicode,The following statement contains a magic number: Assert.AreEqual(2' repoSense.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport6_CustomFieldsNumberGenDate,The following statement contains a magic number: var customData = new CustomFieldData()  			{  				CustomFieldname = "CustmFldExample Int"'  				CustomFieldType = CellarPropertyType.Integer'  				IntegerValue = 24  			};
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyCustomFieldsEntry,The following statement contains a magic number: var customData = new CustomFieldData()  				{  					CustomFieldname = "CustomFldEntry Number"'  					CustomFieldType = CellarPropertyType.Integer'  					IntegerValue = 13  				};
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyCustomFieldsSense,The following statement contains a magic number: var customData = new CustomFieldData()  			{  				CustomFieldname = "CustmFldSense Int"'  				CustomFieldType = CellarPropertyType.Integer'  				IntegerValue = 1319  			};
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyCustomFieldsAllomorph,The following statement contains a magic number: var customData = new CustomFieldData()  			{  				CustomFieldname = "CustmFldAllomorph Int"'  				CustomFieldType = CellarPropertyType.Integer'  				IntegerValue = 175  			};
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport_PronunciationLanguageAddedToPronunciationAndVernacularLists,The following statement contains a magic number: Assert.AreEqual(Cache.LangProject.VernacularWritingSystems.Count' 2' "IPA from pronunciation was not added to vernacular writing systems");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyCmPossibilityLists,The following statement contains a magic number: Assert.IsTrue(list.PossibilitiesOS.Count == 3);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyCmPossibilityLists,The following statement contains a magic number: VerifyListItem(list.PossibilitiesOS[2]' "list item 3"' "D7BFD944-AD73-4512-B5F2-35EC5DB3BFF3"'  						"itm3"' "Range is in twice");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImportLocationList,The following statement contains a magic number: Assert.That(locations.PossibilitiesOS.Count' Is.EqualTo(2)' "should have imported one locations and matched another");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImportLocationList,The following statement contains a magic number: Assert.That(village.SubPossibilitiesOS.Count' Is.EqualTo(2));
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport8CustomStText,The following statement contains a magic number: var logFile = TryImport(sOrigFile' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport8CustomStText,The following statement contains a magic number: Assert.AreEqual(2' repoEntry.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport8CustomStText,The following statement contains a magic number: Assert.AreEqual(2' repoSense.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport8CustomStText,The following statement contains a magic number: VerifyFirstEntryStTextDataImportExact(repoEntry' 3' flidCustom);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport8CustomStText,The following statement contains a magic number: Assert.AreEqual(3' text.ParagraphsOS.Count' "The first Long Text field should have three paragraphs.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport8CustomStText,The following statement contains a magic number: Assert.AreEqual("Block Quote"' text.ParagraphsOS[2].StyleName);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport8CustomStText,The following statement contains a magic number: para = text.ParagraphsOS[2] as IStTxtPara;
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport9AMergingStTextKeepBoth,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepBoth' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport9BMergingStTextKeepOld,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepOld' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport9CMergingStTextKeepNew,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport9CMergingStTextKeepNew,The following statement contains a magic number: Assert.AreEqual(2' repoEntry.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport9CMergingStTextKeepNew,The following statement contains a magic number: Assert.AreEqual(2' repoSense.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport9CMergingStTextKeepNew,The following statement contains a magic number: VerifyFirstEntryStTextDataImportExact(repoEntry' 4' flidCustom);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport9CMergingStTextKeepNew,The following statement contains a magic number: var para = text.ParagraphsOS[3] as IStTxtPara;
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport9DMergingStTextKeepOnlyNew,The following statement contains a magic number: var logFile = TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepOnlyNew' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport9DMergingStTextKeepOnlyNew,The following statement contains a magic number: Assert.AreEqual(2' repoEntry.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport9DMergingStTextKeepOnlyNew,The following statement contains a magic number: Assert.AreEqual(2' repoSense.Count);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImport9DMergingStTextKeepOnlyNew,The following statement contains a magic number: VerifyFirstEntryStTextDataImportExact(repoEntry' 3' flidCustom);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyFirstEntryStTextDataImportExact,The following statement contains a magic number: Assert.AreEqual("Normal"' text.ParagraphsOS[2].StyleName);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifyFirstEntryStTextDataImportExact,The following statement contains a magic number: para = text.ParagraphsOS[2] as IStTxtPara;
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,CreateFirstEntryWithConflictingData,The following statement contains a magic number: var hvoText = Cache.DomainDataByFlid.MakeNewObject(StTextTags.kClassId' entry0.Hvo' flidCustom' -2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,VerifySecondLexEntry,The following statement contains a magic number: i == 2
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImportOfPublicationSettings,The following statement contains a magic number: Assert.AreEqual(2' example0.DoNotPublishInRC.Count'  				"Example has wrong number of Publication settings");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImportChangingAffixToStem,The following statement contains a magic number: s_BadMorphTypeTestData[7] = s_BadMorphTypeTestData[7].Replace("$guid1"' entry.Guid.ToString());
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImportChangingAffixToStem,The following statement contains a magic number: s_BadMorphTypeTestData[7] = s_BadMorphTypeTestData[7].Replace("$guid1"' entry.Guid.ToString());
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImportChangingAffixToStem,The following statement contains a magic number: s_BadMorphTypeTestData[16] = s_BadMorphTypeTestData[16].Replace("$guid2"' sense.Guid.ToString());
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftImportChangingAffixToStem,The following statement contains a magic number: s_BadMorphTypeTestData[16] = s_BadMorphTypeTestData[16].Replace("$guid2"' sense.Guid.ToString());
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftMergeOfPronunciations,The following statement contains a magic number: TryImport(sOrigFile' null' FlexLiftMerger.MergeStyle.MsKeepBoth' 2);
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftMergeOfPronunciations,The following statement contains a magic number: Assert.AreEqual(2' repoEntry.Count' "Created some unnecessary entries.");
Magic Number,LexTextControlsTests,LiftMergerTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftMergerRelationTests.cs,TestLiftMergeOfPronunciations,The following statement contains a magic number: Assert.AreEqual(5' repoPronunciation.Count' "Wrong number of remaining LexPronunciation objects");
Magic Number,LexTextControlsTests,MasterCategoryTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MasterCategoryTests.cs,MasterCategoryWithGuidNode_MakesPosWithRightGuid,The following statement contains a magic number: var childItem = rootItem.ChildNodes[3];
Magic Number,LexTextControlsTests,MasterCategoryTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MasterCategoryTests.cs,MasterCategoryWithGuidNode_MakesPosWithRightGuid,The following statement contains a magic number: var grandChildItem = childItem.ChildNodes[3];
Magic Number,LexTextControlsTests,MasterCategoryTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MasterCategoryTests.cs,MasterCategoryWithGuidNode_ValidatePosInReversalGuid,The following statement contains a magic number: var childItem = rootItem.ChildNodes[3];
Magic Number,LexTextControlsTests,WordsSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\WordsSfmImportTests.cs,BasicConversion,The following statement contains a magic number: Assert.That(words' Has.Count.EqualTo(3));
Magic Number,LexTextControlsTests,WordsSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\WordsSfmImportTests.cs,BasicConversion,The following statement contains a magic number: Assert.That(glsItems' Has.Count.EqualTo(2));
Magic Number,LexTextControlsTests,WordsSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\WordsSfmImportTests.cs,BasicConversion,The following statement contains a magic number: var word3 = words[2];
Magic Number,LexTextControlsTests,WordsSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\WordsSfmImportTests.cs,WordsWithoutGlosses,The following statement contains a magic number: Assert.That(words' Has.Count.EqualTo(3));
Magic Number,LexTextControlsTests,WordsSfmImportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\WordsSfmImportTests.cs,WordsWithoutGlosses,The following statement contains a magic number: var word3 = words[2];
Magic Number,SIL.FieldWorks.LexText.Controls,MsaInflectionFeatureListDlgTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MsaInflectionFeatureListDlgTests.cs,PopulateTreeFromFeatureSystem,The following statement contains a magic number: Assert.AreEqual(2' tv.Nodes.Count' "Count of top level nodes in tree view");
Magic Number,SIL.FieldWorks.LexText.Controls,MsaInflectionFeatureListDlgTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MsaInflectionFeatureListDlgTests.cs,PopulateTreeFromFeatureSystem,The following statement contains a magic number: Assert.AreEqual(3' col.Count' "Count of first level nodes in tree view");
Magic Number,SIL.FieldWorks.LexText.Controls,MsaInflectionFeatureListDlgTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MsaInflectionFeatureListDlgTests.cs,TestFeatureStructureContent,The following statement contains a magic number: Assert.AreEqual(2' fsNestedCol.Count' "Nested fs has one feature");
Magic Number,SIL.FieldWorks.LexText.Controls,MsaInflectionFeatureListDlgTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MsaInflectionFeatureListDlgTests.cs,LoadFeatureValuesIntoTreeview,The following statement contains a magic number: Assert.AreEqual(2' col.Count' "Count of first level nodes in tree view");
Magic Number,SIL.FieldWorks.LexText.Controls,MsaInflectionFeatureListDlgTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MsaInflectionFeatureListDlgTests.cs,LoadFeatureValuesIntoTreeview,The following statement contains a magic number: Assert.AreEqual(2' col2.Count' "Count of second level nodes in tree view");
Magic Number,SIL.FieldWorks.LexText.Controls,MsaInflectionFeatureListDlgTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\MsaInflectionFeatureListDlgTests.cs,SetUpSampleData,The following statement contains a magic number: Assert.AreEqual(2' col2.Count' "Count of second level nodes in tree view");
Missing Default,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,SetFieldType,The following switch statement is missing a default case: switch (fieldType)  			{  				case CustomFieldType.SingleLineText:  					fd.Type = ws == WritingSystemServices.kwsAnal || ws == WritingSystemServices.kwsVern ?  						CellarPropertyType.String : CellarPropertyType.MultiUnicode;  					fd.WsSelector = ws;  					break;  				case CustomFieldType.SingleLineString:  					fd.Type = ws == WritingSystemServices.kwsAnal || ws == WritingSystemServices.kwsVern ?  						CellarPropertyType.String : CellarPropertyType.MultiString;  					fd.WsSelector = ws;  					break;  				case CustomFieldType.MultiparagraphText:  					fd.Type = CellarPropertyType.OwningAtomic;  					fd.DstCls = StTextTags.kClassId;  					break;    				case CustomFieldType.Number:  					fd.Type = CellarPropertyType.Integer;  					break;    				case CustomFieldType.Date:  					fd.Type = CellarPropertyType.GenDate;  					break;    				case CustomFieldType.ListRefAtomic:  					fd.Type = CellarPropertyType.ReferenceAtomic;  					fd.DstCls = CmPossibilityTags.kClassId;  					break;    				case CustomFieldType.ListRefCollection:  					fd.Type = CellarPropertyType.ReferenceCollection;  					fd.DstCls = CmPossibilityTags.kClassId;  					break;  			}
Missing Default,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyCustomStTextForEntryTest,The following switch statement is missing a default case: switch (i)  				{  					case 0:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.IsNull(sLang);  						Assert.AreEqual("Bulleted Text"' sClass);  						VerifyFirstParagraph(xe' sLangExpected);  						break;  					case 1:  						Assert.IsNotNull(xt);  						Assert.AreEqual("\u2029"' xt.InnerText);  						break;  					case 2:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("Why is there air?  "' xe.InnerXml);  						break;  					case 3:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.AreEqual("Strong"' sClass);  						Assert.AreEqual("Which way is up?"' xe.InnerXml);  						break;  					case 4:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("  Inquiring minds want to know!"' xe.InnerXml);  						break;  					case 5:  						Assert.IsNotNull(xt);  						Assert.AreEqual("\u2029"' xt.InnerText);  						break;  					case 6:  						Assert.IsNotNull(xe);  						Assert.AreEqual("span"' xe.Name);  						Assert.IsNull(sLang);  						Assert.AreEqual("Canadian Bacon"' sClass);  						VerifyThirdParagraph(xe' sLangExpected);  						break;  				}
Missing Default,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyFirstParagraph,The following switch statement is missing a default case: switch (i)  				{  					case 0:  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("This is a "' xe.InnerXml);  						break;  					case 1:  						Assert.AreEqual(sLangExpected' sLang);  						Assert.AreEqual("Emphasized Text"' sClass);  						Assert.AreEqual("test"' xe.InnerXml);  						break;  					case 2:  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual(".  This is only a test!"' xe.InnerXml);  						break;  				}
Missing Default,LexTextControlsTests,LiftExportTests,D:\research\architectureSmells\repos1\sillsdev_FieldWorks\Src\LexText\LexTextControls\LexTextControlsTests\LiftExportTests.cs,VerifyThirdParagraph,The following switch statement is missing a default case: switch (i)  				{  					case 0:  						Assert.AreEqual(sLangExpected' sLang);  						Assert.IsNull(sClass);  						Assert.AreEqual("CiCi pizza is cheap' but not really gourmet when it comes to pizza."' xe.InnerXml);  						break;  				}
