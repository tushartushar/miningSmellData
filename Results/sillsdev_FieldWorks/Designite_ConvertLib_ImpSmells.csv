Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,WriteCustomHeaders,Cyclomatic complexity of the method is 9
Long Parameter List,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,GetValuesFromUserView,The method has 5 parameters. Parameters: saveFlid' saveLabel' savePoss' saveHelpString' saveWsSel
Long Statement,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,Conversion,The length of the statement  "				throw new Exception("*** ERROR: The input and output filenames must be different. Input: " + m_FileName + " Output: "+ m_OutFileName + "."); " is 140.
Long Statement,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessElement,The length of the statement  "					if (stackElements.Count > 0 && currentRT.elementList.TryGetValue(int.Parse(GetElementNumber(stackElements.Peek()))' out elemDEntry) != true) " is 140.
Long Statement,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessElement,The length of the statement  "			else if (stackClasses.Count > 0 && holdNode.Length >= 6 && holdNode.Substring(0'6) == "Custom")		// write a custom data element " is 127.
Long Statement,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,WriteElement,The length of the statement  "					elemDEntry[elemDEntry.Count - 1] = elemDEntry[elemDEntry.Count - 1].Substring(0' elemDEntry[elemDEntry.Count - 1].Length - 1) + " " + inFile.Name + "=\"" + inFile.Value + "\"" + (attributes == "" ? "" : " ") + attributes + @"/>"; " is 229.
Long Statement,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,WriteElement,The length of the statement  "					elemDEntry[elemDEntry.Count - 1] = "<" + nodeClass + " " + inFile.Name + "=\"" + inFile.Value + "\"" + (attributes == "" ? "" : " ") + attributes + @"/>"; " is 154.
Long Statement,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessEndElement,The length of the statement  "					throw new Exception("This is an ending element for " + elemHold + " but the element list for class " + nodeValue.ToString() + " doesn't exist"); " is 144.
Long Statement,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The length of the statement  "					if (userViewFlag == true && initFile.Name.Length > 4 && initFile.Name.Substring(0'4) == "Flid" && initFile.NodeType == XmlNodeType.Element) " is 139.
Long Statement,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The length of the statement  "					if (userViewFlag == true && initFile.Name.Length > 5 && initFile.Name.Substring(0' 5) == "Label" && initFile.NodeType == XmlNodeType.Element) " is 141.
Long Statement,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The length of the statement  "					if (userViewFlag == true && initFile.Name.Length > 8 && initFile.Name.Substring(0' 8) == "PossList" && initFile.NodeType == XmlNodeType.Element) " is 144.
Long Statement,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The length of the statement  "					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "WsSelector" && initFile.NodeType == XmlNodeType.Element) " is 148.
Long Statement,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The length of the statement  "					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "HelpString" && initFile.NodeType == XmlNodeType.Element) " is 148.
Long Statement,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,WriteRtElement,The length of the statement  "				BaseClassNum = int.Parse(group.hierarchy[i].ToString().Length == 4 ? group.hierarchy[i].ToString().Substring(1'3) : group.hierarchy[i].ToString().Substring(0)); " is 160.
Complex Conditional,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ParseAttributes,The conditional expression  "inFile.Name != "val" &&  						inFile.Name != "id"  && !(holdNode == "Link" && inFile.Name == "target")"  is complex.
Complex Conditional,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The conditional expression  "userViewFlag == true && initFile.Name.Length > 4 && initFile.Name.Substring(0'4) == "Flid" && initFile.NodeType == XmlNodeType.Element"  is complex.
Complex Conditional,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The conditional expression  "userViewFlag == true && initFile.Name.Length > 5 && initFile.Name.Substring(0' 5) == "Label" && initFile.NodeType == XmlNodeType.Element"  is complex.
Complex Conditional,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The conditional expression  "userViewFlag == true && initFile.Name.Length > 8 && initFile.Name.Substring(0' 8) == "PossList" && initFile.NodeType == XmlNodeType.Element"  is complex.
Complex Conditional,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The conditional expression  "userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "WsSelector" && initFile.NodeType == XmlNodeType.Element"  is complex.
Complex Conditional,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The conditional expression  "userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "HelpString" && initFile.NodeType == XmlNodeType.Element"  is complex.
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,Conversion,The following statement contains a magic number: string[] vLines = new string[5]  			{  				"This database is generated from the Converter utility"'  				"The conversion is based on the version 7 Data model"'  				"It takes in 2 parameters"'  				"    Parameter 1 The database (in XML) to be converted"'  				"    Parameter 2 The output file"  			};
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,Conversion,The following statement contains a magic number: if (File.Exists(m_FileName) == false)  			{  				throw new Exception("*** ERROR: Can't open the input file: " + m_FileName + ".");  			}    			else if (File.Exists(m_ModelName) == false)  			{  				throw new Exception("*** ERROR: Can't open the model file: " + m_ModelName + ".");  			}    			else if (m_FileName.IndexOf(".xml") != m_FileName.Length - 4)  			{  				throw new Exception("*** ERROR: The input filename must end in .xml " + m_FileName + ".");  			}    			else if (m_ModelName.IndexOf(".xml") != m_ModelName.Length - 4)  			{  				throw new Exception("*** ERROR: The model filename must end in .xml " + m_ModelName + ".");  			}    			else if (m_OutFileName.IndexOf(".fwdata") != m_OutFileName.Length - 7)  			{  				throw new Exception("*** ERROR: The output filename must end in .fwdata " + m_OutFileName + ".");  			}    			else if (m_OutFileName == m_FileName)  			{  				throw new Exception("*** ERROR: The input and output filenames must be different. Input: " + m_FileName + " Output: "+ m_OutFileName + ".");  			}    			// create reader & open input files  			else  			{  				//Parse the model file into modList and classList  				XmlTextReader modFile = new XmlTextReader(m_ModelName);  				modFile.WhitespaceHandling = WhitespaceHandling.None;    				ProcessModel(modFile);    				//Output File  				XmlTextWriter xmlOutput = new XmlTextWriter(m_OutFileName' null);  				xmlOutput.Formatting = Formatting.Indented;  				xmlOutput.WriteProcessingInstruction("xml"' "version=\"1.0\" encoding=\"utf-8\"");    				for (int j = 0; j < 5; j++)  					xmlOutput.WriteComment(vLines[j]);    				//Input File  				XmlTextReader inFile = new XmlTextReader(new FilteredStreamReader(m_FileName));  				inFile.WhitespaceHandling = WhitespaceHandling.All;    				ReadInputFile(inFile);    				while (!inFile.EOF)  				{  					XmlNodeType type = inFile.NodeType;  					if (type != XmlNodeType.Whitespace)  						PreserveSpace = false;  					switch (type)  					{  						case XmlNodeType.Comment:  							break;  						case XmlNodeType.ProcessingInstruction:  							break;  						case XmlNodeType.XmlDeclaration:  							break;  						case XmlNodeType.Element:  							holdNode = inFile.Name;  							PreserveSpace = (holdNode == "Run");  							ProcessElement(inFile' xmlOutput);  							break;  						case XmlNodeType.EndElement:  							holdNode = inFile.Name;  							ProcessEndElement(inFile' xmlOutput);  							break;  						case XmlNodeType.Text:  							ProcessText(inFile' xmlOutput);  							break;  						case XmlNodeType.Whitespace:  							if (PreserveSpace)  							{  								ProcessText(inFile' xmlOutput);  								PreserveSpace = false;  							}  							break;  						case XmlNodeType.DocumentType:  							//WriteDocTypeOut(inFile' xmlOutput);  							break;  						default:  							throw new Exception("Unrecognized XML Node Type is " + type.ToString());    					} //switch statement    					ReadInputFile(inFile);  				} // while read  				//Closing Tags  				inFile.Close();  				xmlOutput.Flush();  				xmlOutput.Close();  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,Conversion,The following statement contains a magic number: if (File.Exists(m_FileName) == false)  			{  				throw new Exception("*** ERROR: Can't open the input file: " + m_FileName + ".");  			}    			else if (File.Exists(m_ModelName) == false)  			{  				throw new Exception("*** ERROR: Can't open the model file: " + m_ModelName + ".");  			}    			else if (m_FileName.IndexOf(".xml") != m_FileName.Length - 4)  			{  				throw new Exception("*** ERROR: The input filename must end in .xml " + m_FileName + ".");  			}    			else if (m_ModelName.IndexOf(".xml") != m_ModelName.Length - 4)  			{  				throw new Exception("*** ERROR: The model filename must end in .xml " + m_ModelName + ".");  			}    			else if (m_OutFileName.IndexOf(".fwdata") != m_OutFileName.Length - 7)  			{  				throw new Exception("*** ERROR: The output filename must end in .fwdata " + m_OutFileName + ".");  			}    			else if (m_OutFileName == m_FileName)  			{  				throw new Exception("*** ERROR: The input and output filenames must be different. Input: " + m_FileName + " Output: "+ m_OutFileName + ".");  			}    			// create reader & open input files  			else  			{  				//Parse the model file into modList and classList  				XmlTextReader modFile = new XmlTextReader(m_ModelName);  				modFile.WhitespaceHandling = WhitespaceHandling.None;    				ProcessModel(modFile);    				//Output File  				XmlTextWriter xmlOutput = new XmlTextWriter(m_OutFileName' null);  				xmlOutput.Formatting = Formatting.Indented;  				xmlOutput.WriteProcessingInstruction("xml"' "version=\"1.0\" encoding=\"utf-8\"");    				for (int j = 0; j < 5; j++)  					xmlOutput.WriteComment(vLines[j]);    				//Input File  				XmlTextReader inFile = new XmlTextReader(new FilteredStreamReader(m_FileName));  				inFile.WhitespaceHandling = WhitespaceHandling.All;    				ReadInputFile(inFile);    				while (!inFile.EOF)  				{  					XmlNodeType type = inFile.NodeType;  					if (type != XmlNodeType.Whitespace)  						PreserveSpace = false;  					switch (type)  					{  						case XmlNodeType.Comment:  							break;  						case XmlNodeType.ProcessingInstruction:  							break;  						case XmlNodeType.XmlDeclaration:  							break;  						case XmlNodeType.Element:  							holdNode = inFile.Name;  							PreserveSpace = (holdNode == "Run");  							ProcessElement(inFile' xmlOutput);  							break;  						case XmlNodeType.EndElement:  							holdNode = inFile.Name;  							ProcessEndElement(inFile' xmlOutput);  							break;  						case XmlNodeType.Text:  							ProcessText(inFile' xmlOutput);  							break;  						case XmlNodeType.Whitespace:  							if (PreserveSpace)  							{  								ProcessText(inFile' xmlOutput);  								PreserveSpace = false;  							}  							break;  						case XmlNodeType.DocumentType:  							//WriteDocTypeOut(inFile' xmlOutput);  							break;  						default:  							throw new Exception("Unrecognized XML Node Type is " + type.ToString());    					} //switch statement    					ReadInputFile(inFile);  				} // while read  				//Closing Tags  				inFile.Close();  				xmlOutput.Flush();  				xmlOutput.Close();  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,Conversion,The following statement contains a magic number: if (File.Exists(m_FileName) == false)  			{  				throw new Exception("*** ERROR: Can't open the input file: " + m_FileName + ".");  			}    			else if (File.Exists(m_ModelName) == false)  			{  				throw new Exception("*** ERROR: Can't open the model file: " + m_ModelName + ".");  			}    			else if (m_FileName.IndexOf(".xml") != m_FileName.Length - 4)  			{  				throw new Exception("*** ERROR: The input filename must end in .xml " + m_FileName + ".");  			}    			else if (m_ModelName.IndexOf(".xml") != m_ModelName.Length - 4)  			{  				throw new Exception("*** ERROR: The model filename must end in .xml " + m_ModelName + ".");  			}    			else if (m_OutFileName.IndexOf(".fwdata") != m_OutFileName.Length - 7)  			{  				throw new Exception("*** ERROR: The output filename must end in .fwdata " + m_OutFileName + ".");  			}    			else if (m_OutFileName == m_FileName)  			{  				throw new Exception("*** ERROR: The input and output filenames must be different. Input: " + m_FileName + " Output: "+ m_OutFileName + ".");  			}    			// create reader & open input files  			else  			{  				//Parse the model file into modList and classList  				XmlTextReader modFile = new XmlTextReader(m_ModelName);  				modFile.WhitespaceHandling = WhitespaceHandling.None;    				ProcessModel(modFile);    				//Output File  				XmlTextWriter xmlOutput = new XmlTextWriter(m_OutFileName' null);  				xmlOutput.Formatting = Formatting.Indented;  				xmlOutput.WriteProcessingInstruction("xml"' "version=\"1.0\" encoding=\"utf-8\"");    				for (int j = 0; j < 5; j++)  					xmlOutput.WriteComment(vLines[j]);    				//Input File  				XmlTextReader inFile = new XmlTextReader(new FilteredStreamReader(m_FileName));  				inFile.WhitespaceHandling = WhitespaceHandling.All;    				ReadInputFile(inFile);    				while (!inFile.EOF)  				{  					XmlNodeType type = inFile.NodeType;  					if (type != XmlNodeType.Whitespace)  						PreserveSpace = false;  					switch (type)  					{  						case XmlNodeType.Comment:  							break;  						case XmlNodeType.ProcessingInstruction:  							break;  						case XmlNodeType.XmlDeclaration:  							break;  						case XmlNodeType.Element:  							holdNode = inFile.Name;  							PreserveSpace = (holdNode == "Run");  							ProcessElement(inFile' xmlOutput);  							break;  						case XmlNodeType.EndElement:  							holdNode = inFile.Name;  							ProcessEndElement(inFile' xmlOutput);  							break;  						case XmlNodeType.Text:  							ProcessText(inFile' xmlOutput);  							break;  						case XmlNodeType.Whitespace:  							if (PreserveSpace)  							{  								ProcessText(inFile' xmlOutput);  								PreserveSpace = false;  							}  							break;  						case XmlNodeType.DocumentType:  							//WriteDocTypeOut(inFile' xmlOutput);  							break;  						default:  							throw new Exception("Unrecognized XML Node Type is " + type.ToString());    					} //switch statement    					ReadInputFile(inFile);  				} // while read  				//Closing Tags  				inFile.Close();  				xmlOutput.Flush();  				xmlOutput.Close();  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,Conversion,The following statement contains a magic number: if (File.Exists(m_FileName) == false)  			{  				throw new Exception("*** ERROR: Can't open the input file: " + m_FileName + ".");  			}    			else if (File.Exists(m_ModelName) == false)  			{  				throw new Exception("*** ERROR: Can't open the model file: " + m_ModelName + ".");  			}    			else if (m_FileName.IndexOf(".xml") != m_FileName.Length - 4)  			{  				throw new Exception("*** ERROR: The input filename must end in .xml " + m_FileName + ".");  			}    			else if (m_ModelName.IndexOf(".xml") != m_ModelName.Length - 4)  			{  				throw new Exception("*** ERROR: The model filename must end in .xml " + m_ModelName + ".");  			}    			else if (m_OutFileName.IndexOf(".fwdata") != m_OutFileName.Length - 7)  			{  				throw new Exception("*** ERROR: The output filename must end in .fwdata " + m_OutFileName + ".");  			}    			else if (m_OutFileName == m_FileName)  			{  				throw new Exception("*** ERROR: The input and output filenames must be different. Input: " + m_FileName + " Output: "+ m_OutFileName + ".");  			}    			// create reader & open input files  			else  			{  				//Parse the model file into modList and classList  				XmlTextReader modFile = new XmlTextReader(m_ModelName);  				modFile.WhitespaceHandling = WhitespaceHandling.None;    				ProcessModel(modFile);    				//Output File  				XmlTextWriter xmlOutput = new XmlTextWriter(m_OutFileName' null);  				xmlOutput.Formatting = Formatting.Indented;  				xmlOutput.WriteProcessingInstruction("xml"' "version=\"1.0\" encoding=\"utf-8\"");    				for (int j = 0; j < 5; j++)  					xmlOutput.WriteComment(vLines[j]);    				//Input File  				XmlTextReader inFile = new XmlTextReader(new FilteredStreamReader(m_FileName));  				inFile.WhitespaceHandling = WhitespaceHandling.All;    				ReadInputFile(inFile);    				while (!inFile.EOF)  				{  					XmlNodeType type = inFile.NodeType;  					if (type != XmlNodeType.Whitespace)  						PreserveSpace = false;  					switch (type)  					{  						case XmlNodeType.Comment:  							break;  						case XmlNodeType.ProcessingInstruction:  							break;  						case XmlNodeType.XmlDeclaration:  							break;  						case XmlNodeType.Element:  							holdNode = inFile.Name;  							PreserveSpace = (holdNode == "Run");  							ProcessElement(inFile' xmlOutput);  							break;  						case XmlNodeType.EndElement:  							holdNode = inFile.Name;  							ProcessEndElement(inFile' xmlOutput);  							break;  						case XmlNodeType.Text:  							ProcessText(inFile' xmlOutput);  							break;  						case XmlNodeType.Whitespace:  							if (PreserveSpace)  							{  								ProcessText(inFile' xmlOutput);  								PreserveSpace = false;  							}  							break;  						case XmlNodeType.DocumentType:  							//WriteDocTypeOut(inFile' xmlOutput);  							break;  						default:  							throw new Exception("Unrecognized XML Node Type is " + type.ToString());    					} //switch statement    					ReadInputFile(inFile);  				} // while read  				//Closing Tags  				inFile.Close();  				xmlOutput.Flush();  				xmlOutput.Close();  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessElement,The following statement contains a magic number: if (holdNode == "CustomField" || holdNode == "AdditionalFields")  				return;    			else if (holdNode == "FwDatabase")		// write the root element  			{  				xmlOutput.WriteStartElement("languageproject");  				WriteXMLAttribute("version"' holdVersion' xmlOutput);    				if (holdVersion == null)  				{  					throw new Exception("The version attribute was not found in the root node of the model file " + m_ModelName);  				}  				// Make an initial pass to process the Custom Fields  				// Flag will be false if there aren't any.  				if (ProcessCustomFields() == true)  				{  					WriteCustomHeaders(xmlOutput);  				}  			}    			else if (inFile.GetAttribute("id") != null)		// write an rt element  			{    				if (stackElements.Count > 0)  				{  					if (stackClasses.Count == 0)  						currentRT = langProjClass;    					PopPastSubentries();  					inFile.MoveToAttribute("id");  					//inFile.Value; // "I983B657C-9F1E-4A96-999A-CE200EA01302")  					if (stackElements.Count > 0 && currentRT.elementList.TryGetValue(int.Parse(GetElementNumber(stackElements.Peek()))' out elemDEntry) != true)  					{  						elemDEntry = new StringCollection();  						currentRT.elementList.Add(int.Parse(GetElementNumber(stackElements.Peek()))' elemDEntry);  					}  					elemDEntry.Add("<objsur t=\"o\" guid=\"" + inFile.Value.Substring(1) + "\"/>");  				}  				CreateRtElement(inFile' xmlOutput);  			}    			else if (holdNode == "Link")		// write a link element  			{  				inFile.MoveToAttribute("target");  				saveGuid = inFile.Value.Substring(1);  				PopPastSubentries();  				if (currentRT.elementList.TryGetValue(int.Parse(GetElementNumber(stackElements.Peek()))' out elemDEntry) != true)  				{  					elemDEntry = new StringCollection();  					currentRT.elementList.Add(int.Parse(GetElementNumber(stackElements.Peek()))' elemDEntry);  				}  				elemDEntry.Add("<objsur t=\"r\" guid=\"" + saveGuid + "\"/>");  			}  			else if (holdNode == "Run" && inFile.GetAttribute("ws") == null) // Make sure runs have WS  			{  				WriteElement(inFile' xmlOutput' ""' "ws=\"en\""); // write the element' guessing it should be English  			}    			else if (stackClasses.Count > 0 && holdNode.Length >= 6 && holdNode.Substring(0'6) == "Custom")		// write a custom data element  			{  				WriteElement(inFile' xmlOutput' GetNewCustomName(inFile)' "");		// write the next element in the class  			}    			else											  // Class Sub-element  			{  				WriteElement(inFile' xmlOutput' ""' "");		// write the next element in the class  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessElement,The following statement contains a magic number: if (holdNode == "CustomField" || holdNode == "AdditionalFields")  				return;    			else if (holdNode == "FwDatabase")		// write the root element  			{  				xmlOutput.WriteStartElement("languageproject");  				WriteXMLAttribute("version"' holdVersion' xmlOutput);    				if (holdVersion == null)  				{  					throw new Exception("The version attribute was not found in the root node of the model file " + m_ModelName);  				}  				// Make an initial pass to process the Custom Fields  				// Flag will be false if there aren't any.  				if (ProcessCustomFields() == true)  				{  					WriteCustomHeaders(xmlOutput);  				}  			}    			else if (inFile.GetAttribute("id") != null)		// write an rt element  			{    				if (stackElements.Count > 0)  				{  					if (stackClasses.Count == 0)  						currentRT = langProjClass;    					PopPastSubentries();  					inFile.MoveToAttribute("id");  					//inFile.Value; // "I983B657C-9F1E-4A96-999A-CE200EA01302")  					if (stackElements.Count > 0 && currentRT.elementList.TryGetValue(int.Parse(GetElementNumber(stackElements.Peek()))' out elemDEntry) != true)  					{  						elemDEntry = new StringCollection();  						currentRT.elementList.Add(int.Parse(GetElementNumber(stackElements.Peek()))' elemDEntry);  					}  					elemDEntry.Add("<objsur t=\"o\" guid=\"" + inFile.Value.Substring(1) + "\"/>");  				}  				CreateRtElement(inFile' xmlOutput);  			}    			else if (holdNode == "Link")		// write a link element  			{  				inFile.MoveToAttribute("target");  				saveGuid = inFile.Value.Substring(1);  				PopPastSubentries();  				if (currentRT.elementList.TryGetValue(int.Parse(GetElementNumber(stackElements.Peek()))' out elemDEntry) != true)  				{  					elemDEntry = new StringCollection();  					currentRT.elementList.Add(int.Parse(GetElementNumber(stackElements.Peek()))' elemDEntry);  				}  				elemDEntry.Add("<objsur t=\"r\" guid=\"" + saveGuid + "\"/>");  			}  			else if (holdNode == "Run" && inFile.GetAttribute("ws") == null) // Make sure runs have WS  			{  				WriteElement(inFile' xmlOutput' ""' "ws=\"en\""); // write the element' guessing it should be English  			}    			else if (stackClasses.Count > 0 && holdNode.Length >= 6 && holdNode.Substring(0'6) == "Custom")		// write a custom data element  			{  				WriteElement(inFile' xmlOutput' GetNewCustomName(inFile)' "");		// write the next element in the class  			}    			else											  // Class Sub-element  			{  				WriteElement(inFile' xmlOutput' ""' "");		// write the next element in the class  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,CreateRtElement,The following statement contains a magic number: if (stackElements.Count > 0)  			{  				stackClass = GetElementName(stackElements.Peek());  				stackNum = (GetElementNumber(stackElements.Peek())).PadLeft(3' '0');  				modNum = int.Parse(stackNum.Substring(0' 1));  				classNum = int.Parse(stackNum.Substring(1));  				modList.TryGetValue(modNum' out dicClass);    				dicClass.TryGetValue(classNum' out hClass);  				hClass.fields.TryGetValue(stackClass' out fieldNum);  				if (stackNum != "000" && fieldNum != 0)  					currentRT.ownFlid = int.Parse((stackNum + (fieldNum.ToString().PadLeft(3' '0'))).TrimStart('0'));  				currentRT.owningGuid = guidStack.Peek();  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,CreateRtElement,The following statement contains a magic number: if (stackElements.Count > 0)  			{  				stackClass = GetElementName(stackElements.Peek());  				stackNum = (GetElementNumber(stackElements.Peek())).PadLeft(3' '0');  				modNum = int.Parse(stackNum.Substring(0' 1));  				classNum = int.Parse(stackNum.Substring(1));  				modList.TryGetValue(modNum' out dicClass);    				dicClass.TryGetValue(classNum' out hClass);  				hClass.fields.TryGetValue(stackClass' out fieldNum);  				if (stackNum != "000" && fieldNum != 0)  					currentRT.ownFlid = int.Parse((stackNum + (fieldNum.ToString().PadLeft(3' '0'))).TrimStart('0'));  				currentRT.owningGuid = guidStack.Peek();  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,CreateRtElement,The following statement contains a magic number: do  			{  				classList.TryGetValue(baseClassName' out hClass);  				classNum = hClass.ClassNum;  				currentRT.hierarchy.Add(int.Parse(hClass.ModNum + classNum.ToString().PadLeft(3' '0')));  				if (baseClassName !="CmObject")  				{  					classList.TryGetValue(baseClassName' out hClass);  					baseClassName = hClass.BaseClassName;  				}  			}  			while (currentRT.hierarchy[currentRT.hierarchy.Count-1] != 0);
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,WriteElement,The following statement contains a magic number: if (StartElem == true && GetElementNumber(holdNode) == "") //sub-element  			{  				if (cust != "")  					attributes = "name = " + cust;  				else  				{  					ParseAttributes(inFile' newAttrs' ref attributes);  				}    				inFile.MoveToContent();  				if (inFile.IsEmptyElement)        // This element is closed by a /  				{  					elemDEntry.Add("<" + nodeClass + (attributes == "" ? "" : " ") + attributes + @"/>");  					PopToElement(nodeClass);  				}  				else  					elemDEntry.Add("<" + nodeClass + (attributes == "" ? "" : " ") + attributes + ">");  			}    			else  			{  				StartElem = true;    				ParseAttributes(inFile' newAttrs' ref attributes);    				if (holdNode.Length >= 6 && holdNode.Substring(0' 6) == "Custom")  				{  					nodeClass = "Custom";  					if (cust != "")  					{  						idx = attributes.IndexOf("custom");  						attributes = attributes.Substring(0' idx) + TranslateText(cust) + "\"";  					}  				}    				if (currentRT.elementList.TryGetValue(nodeValue' out elemDEntry) != true)  				{  					elemDEntry = new StringCollection();  					currentRT.elementList.Add(nodeValue' elemDEntry);  				}  				elemDEntry.Add("<" + nodeClass + (attributes == "" ? "" : " ") + attributes + ">");  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,WriteElement,The following statement contains a magic number: if (StartElem == true && GetElementNumber(holdNode) == "") //sub-element  			{  				if (cust != "")  					attributes = "name = " + cust;  				else  				{  					ParseAttributes(inFile' newAttrs' ref attributes);  				}    				inFile.MoveToContent();  				if (inFile.IsEmptyElement)        // This element is closed by a /  				{  					elemDEntry.Add("<" + nodeClass + (attributes == "" ? "" : " ") + attributes + @"/>");  					PopToElement(nodeClass);  				}  				else  					elemDEntry.Add("<" + nodeClass + (attributes == "" ? "" : " ") + attributes + ">");  			}    			else  			{  				StartElem = true;    				ParseAttributes(inFile' newAttrs' ref attributes);    				if (holdNode.Length >= 6 && holdNode.Substring(0' 6) == "Custom")  				{  					nodeClass = "Custom";  					if (cust != "")  					{  						idx = attributes.IndexOf("custom");  						attributes = attributes.Substring(0' idx) + TranslateText(cust) + "\"";  					}  				}    				if (currentRT.elementList.TryGetValue(nodeValue' out elemDEntry) != true)  				{  					elemDEntry = new StringCollection();  					currentRT.elementList.Add(nodeValue' elemDEntry);  				}  				elemDEntry.Add("<" + nodeClass + (attributes == "" ? "" : " ") + attributes + ">");  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,GetElementNumber,The following statement contains a magic number: if (ElementName == "WsStyles9999")  				return "";  			else if (ElementName.Length >= 6 && (ElementName.Substring(0'6) == "Custom"))  				return "0";  			else  				return Regex.Replace(ElementName' "[a-zA-Z]"' "");
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,GetElementNumber,The following statement contains a magic number: if (ElementName == "WsStyles9999")  				return "";  			else if (ElementName.Length >= 6 && (ElementName.Substring(0'6) == "Custom"))  				return "0";  			else  				return Regex.Replace(ElementName' "[a-zA-Z]"' "");
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessEndElement,The following statement contains a magic number: if (ClosedElem == true)  			{  				PopToElement(inFile.Name);  				ClosedElem = false;  				StartElem = false;  			}    			else if (stackClasses.Count > 0 && stackClasses.Peek().ClassName == elemHold)  			{  				guidStack.Pop();  				stackClasses.Pop();  				if (stackClasses.Count > 0)  					currentRT = stackClasses.Peek();  				StartClass = false;    				if (stackClasses.Count == 0)  				{  					if (listClasses.Count >= 1)  // Write out whatever elements are tabled up.  					{  						foreach (RTClass group in listClasses)  						{  							WriteRtElement(inFile' xmlOutput' group);  						}  					}  					listClasses.Clear();  					StartClass = false;  				}  			}    			else if (elemHold == "FwDatabase")		// write the last closing element in the XML file  			{  				if (listClasses.Count != 0)  				{  					throw new Exception("End of fwDatabase tag received' but still items that haven't been printed.");  				}  			}    			else if (elemHold == "LangProject")	// Write the LangProject class  			{  				WriteRtElement(inFile' xmlOutput' langProjClass);  			}    			else if (elemHold != "AdditionalFields")	//It's not a close class' FwDatabase or time. close it.  			{  				if (stackClasses.Count == 0)  					currentRT = langProjClass;    				if (currentRT.elementList.TryGetValue(nodeValue' out elemDEntry) != true)  				{  					throw new Exception("This is an ending element for " + elemHold + " but the element list for class " + nodeValue.ToString() + " doesn't exist");  				}  				if (elemHold.Length >= 6 && elemHold.Substring(0' 6) == "Custom")  					elemDEntry.Add(@"</Custom>");  				else  					elemDEntry.Add(@"</" + elemHold + @">");    				PopToElement(inFile.Name);  				StartElem = false;  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessEndElement,The following statement contains a magic number: if (ClosedElem == true)  			{  				PopToElement(inFile.Name);  				ClosedElem = false;  				StartElem = false;  			}    			else if (stackClasses.Count > 0 && stackClasses.Peek().ClassName == elemHold)  			{  				guidStack.Pop();  				stackClasses.Pop();  				if (stackClasses.Count > 0)  					currentRT = stackClasses.Peek();  				StartClass = false;    				if (stackClasses.Count == 0)  				{  					if (listClasses.Count >= 1)  // Write out whatever elements are tabled up.  					{  						foreach (RTClass group in listClasses)  						{  							WriteRtElement(inFile' xmlOutput' group);  						}  					}  					listClasses.Clear();  					StartClass = false;  				}  			}    			else if (elemHold == "FwDatabase")		// write the last closing element in the XML file  			{  				if (listClasses.Count != 0)  				{  					throw new Exception("End of fwDatabase tag received' but still items that haven't been printed.");  				}  			}    			else if (elemHold == "LangProject")	// Write the LangProject class  			{  				WriteRtElement(inFile' xmlOutput' langProjClass);  			}    			else if (elemHold != "AdditionalFields")	//It's not a close class' FwDatabase or time. close it.  			{  				if (stackClasses.Count == 0)  					currentRT = langProjClass;    				if (currentRT.elementList.TryGetValue(nodeValue' out elemDEntry) != true)  				{  					throw new Exception("This is an ending element for " + elemHold + " but the element list for class " + nodeValue.ToString() + " doesn't exist");  				}  				if (elemHold.Length >= 6 && elemHold.Substring(0' 6) == "Custom")  					elemDEntry.Add(@"</Custom>");  				else  					elemDEntry.Add(@"</" + elemHold + @">");    				PopToElement(inFile.Name);  				StartElem = false;  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The following statement contains a magic number: while (!initFile.EOF)  			{  				if (initFile.Name == "CustomField" && initFile.NodeType == XmlNodeType.Element)  				{  					BuildCustomField(initFile);  					CustomFlag = true;  				}    				else  					if (initFile.Name == "LangProject" && initFile.NodeType == XmlNodeType.Element)  					{  						if (CustomFlag == false)     //No custom fields  							return false;  					}  				else  					if (initFile.Name == "UserViewField")  					{  						if (userViewFlag == true)  						{  							GetValuesFromUserView(saveFlid' saveLabel' savePossList' saveHelpString' saveWsSel);  							userViewFlag = false;  						}  						else  							userViewFlag = true;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 4 && initFile.Name.Substring(0'4) == "Flid" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to field containing flid  						initFile.MoveToAttribute("val");  						saveFlid = int.Parse(initFile.Value);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 5 && initFile.Name.Substring(0' 5) == "Label" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveLabel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 8 && initFile.Name.Substring(0' 8) == "PossList" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("target");  						savePossList = initFile.Value.Substring(1);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "WsSelector" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("val");  						saveWsSel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "HelpString" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveHelpString = initFile.Value;  					}    			ReadInputFile(initFile);  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The following statement contains a magic number: while (!initFile.EOF)  			{  				if (initFile.Name == "CustomField" && initFile.NodeType == XmlNodeType.Element)  				{  					BuildCustomField(initFile);  					CustomFlag = true;  				}    				else  					if (initFile.Name == "LangProject" && initFile.NodeType == XmlNodeType.Element)  					{  						if (CustomFlag == false)     //No custom fields  							return false;  					}  				else  					if (initFile.Name == "UserViewField")  					{  						if (userViewFlag == true)  						{  							GetValuesFromUserView(saveFlid' saveLabel' savePossList' saveHelpString' saveWsSel);  							userViewFlag = false;  						}  						else  							userViewFlag = true;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 4 && initFile.Name.Substring(0'4) == "Flid" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to field containing flid  						initFile.MoveToAttribute("val");  						saveFlid = int.Parse(initFile.Value);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 5 && initFile.Name.Substring(0' 5) == "Label" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveLabel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 8 && initFile.Name.Substring(0' 8) == "PossList" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("target");  						savePossList = initFile.Value.Substring(1);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "WsSelector" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("val");  						saveWsSel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "HelpString" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveHelpString = initFile.Value;  					}    			ReadInputFile(initFile);  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The following statement contains a magic number: while (!initFile.EOF)  			{  				if (initFile.Name == "CustomField" && initFile.NodeType == XmlNodeType.Element)  				{  					BuildCustomField(initFile);  					CustomFlag = true;  				}    				else  					if (initFile.Name == "LangProject" && initFile.NodeType == XmlNodeType.Element)  					{  						if (CustomFlag == false)     //No custom fields  							return false;  					}  				else  					if (initFile.Name == "UserViewField")  					{  						if (userViewFlag == true)  						{  							GetValuesFromUserView(saveFlid' saveLabel' savePossList' saveHelpString' saveWsSel);  							userViewFlag = false;  						}  						else  							userViewFlag = true;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 4 && initFile.Name.Substring(0'4) == "Flid" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to field containing flid  						initFile.MoveToAttribute("val");  						saveFlid = int.Parse(initFile.Value);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 5 && initFile.Name.Substring(0' 5) == "Label" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveLabel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 8 && initFile.Name.Substring(0' 8) == "PossList" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("target");  						savePossList = initFile.Value.Substring(1);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "WsSelector" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("val");  						saveWsSel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "HelpString" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveHelpString = initFile.Value;  					}    			ReadInputFile(initFile);  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The following statement contains a magic number: while (!initFile.EOF)  			{  				if (initFile.Name == "CustomField" && initFile.NodeType == XmlNodeType.Element)  				{  					BuildCustomField(initFile);  					CustomFlag = true;  				}    				else  					if (initFile.Name == "LangProject" && initFile.NodeType == XmlNodeType.Element)  					{  						if (CustomFlag == false)     //No custom fields  							return false;  					}  				else  					if (initFile.Name == "UserViewField")  					{  						if (userViewFlag == true)  						{  							GetValuesFromUserView(saveFlid' saveLabel' savePossList' saveHelpString' saveWsSel);  							userViewFlag = false;  						}  						else  							userViewFlag = true;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 4 && initFile.Name.Substring(0'4) == "Flid" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to field containing flid  						initFile.MoveToAttribute("val");  						saveFlid = int.Parse(initFile.Value);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 5 && initFile.Name.Substring(0' 5) == "Label" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveLabel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 8 && initFile.Name.Substring(0' 8) == "PossList" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("target");  						savePossList = initFile.Value.Substring(1);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "WsSelector" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("val");  						saveWsSel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "HelpString" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveHelpString = initFile.Value;  					}    			ReadInputFile(initFile);  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The following statement contains a magic number: while (!initFile.EOF)  			{  				if (initFile.Name == "CustomField" && initFile.NodeType == XmlNodeType.Element)  				{  					BuildCustomField(initFile);  					CustomFlag = true;  				}    				else  					if (initFile.Name == "LangProject" && initFile.NodeType == XmlNodeType.Element)  					{  						if (CustomFlag == false)     //No custom fields  							return false;  					}  				else  					if (initFile.Name == "UserViewField")  					{  						if (userViewFlag == true)  						{  							GetValuesFromUserView(saveFlid' saveLabel' savePossList' saveHelpString' saveWsSel);  							userViewFlag = false;  						}  						else  							userViewFlag = true;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 4 && initFile.Name.Substring(0'4) == "Flid" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to field containing flid  						initFile.MoveToAttribute("val");  						saveFlid = int.Parse(initFile.Value);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 5 && initFile.Name.Substring(0' 5) == "Label" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveLabel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 8 && initFile.Name.Substring(0' 8) == "PossList" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("target");  						savePossList = initFile.Value.Substring(1);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "WsSelector" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("val");  						saveWsSel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "HelpString" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveHelpString = initFile.Value;  					}    			ReadInputFile(initFile);  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The following statement contains a magic number: while (!initFile.EOF)  			{  				if (initFile.Name == "CustomField" && initFile.NodeType == XmlNodeType.Element)  				{  					BuildCustomField(initFile);  					CustomFlag = true;  				}    				else  					if (initFile.Name == "LangProject" && initFile.NodeType == XmlNodeType.Element)  					{  						if (CustomFlag == false)     //No custom fields  							return false;  					}  				else  					if (initFile.Name == "UserViewField")  					{  						if (userViewFlag == true)  						{  							GetValuesFromUserView(saveFlid' saveLabel' savePossList' saveHelpString' saveWsSel);  							userViewFlag = false;  						}  						else  							userViewFlag = true;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 4 && initFile.Name.Substring(0'4) == "Flid" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to field containing flid  						initFile.MoveToAttribute("val");  						saveFlid = int.Parse(initFile.Value);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 5 && initFile.Name.Substring(0' 5) == "Label" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveLabel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 8 && initFile.Name.Substring(0' 8) == "PossList" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("target");  						savePossList = initFile.Value.Substring(1);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "WsSelector" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("val");  						saveWsSel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "HelpString" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveHelpString = initFile.Value;  					}    			ReadInputFile(initFile);  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The following statement contains a magic number: while (!initFile.EOF)  			{  				if (initFile.Name == "CustomField" && initFile.NodeType == XmlNodeType.Element)  				{  					BuildCustomField(initFile);  					CustomFlag = true;  				}    				else  					if (initFile.Name == "LangProject" && initFile.NodeType == XmlNodeType.Element)  					{  						if (CustomFlag == false)     //No custom fields  							return false;  					}  				else  					if (initFile.Name == "UserViewField")  					{  						if (userViewFlag == true)  						{  							GetValuesFromUserView(saveFlid' saveLabel' savePossList' saveHelpString' saveWsSel);  							userViewFlag = false;  						}  						else  							userViewFlag = true;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 4 && initFile.Name.Substring(0'4) == "Flid" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to field containing flid  						initFile.MoveToAttribute("val");  						saveFlid = int.Parse(initFile.Value);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 5 && initFile.Name.Substring(0' 5) == "Label" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveLabel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 8 && initFile.Name.Substring(0' 8) == "PossList" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("target");  						savePossList = initFile.Value.Substring(1);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "WsSelector" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("val");  						saveWsSel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "HelpString" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveHelpString = initFile.Value;  					}    			ReadInputFile(initFile);  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The following statement contains a magic number: while (!initFile.EOF)  			{  				if (initFile.Name == "CustomField" && initFile.NodeType == XmlNodeType.Element)  				{  					BuildCustomField(initFile);  					CustomFlag = true;  				}    				else  					if (initFile.Name == "LangProject" && initFile.NodeType == XmlNodeType.Element)  					{  						if (CustomFlag == false)     //No custom fields  							return false;  					}  				else  					if (initFile.Name == "UserViewField")  					{  						if (userViewFlag == true)  						{  							GetValuesFromUserView(saveFlid' saveLabel' savePossList' saveHelpString' saveWsSel);  							userViewFlag = false;  						}  						else  							userViewFlag = true;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 4 && initFile.Name.Substring(0'4) == "Flid" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to field containing flid  						initFile.MoveToAttribute("val");  						saveFlid = int.Parse(initFile.Value);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 5 && initFile.Name.Substring(0' 5) == "Label" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveLabel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 8 && initFile.Name.Substring(0' 8) == "PossList" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("target");  						savePossList = initFile.Value.Substring(1);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "WsSelector" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("val");  						saveWsSel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "HelpString" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveHelpString = initFile.Value;  					}    			ReadInputFile(initFile);  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The following statement contains a magic number: while (!initFile.EOF)  			{  				if (initFile.Name == "CustomField" && initFile.NodeType == XmlNodeType.Element)  				{  					BuildCustomField(initFile);  					CustomFlag = true;  				}    				else  					if (initFile.Name == "LangProject" && initFile.NodeType == XmlNodeType.Element)  					{  						if (CustomFlag == false)     //No custom fields  							return false;  					}  				else  					if (initFile.Name == "UserViewField")  					{  						if (userViewFlag == true)  						{  							GetValuesFromUserView(saveFlid' saveLabel' savePossList' saveHelpString' saveWsSel);  							userViewFlag = false;  						}  						else  							userViewFlag = true;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 4 && initFile.Name.Substring(0'4) == "Flid" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to field containing flid  						initFile.MoveToAttribute("val");  						saveFlid = int.Parse(initFile.Value);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 5 && initFile.Name.Substring(0' 5) == "Label" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveLabel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 8 && initFile.Name.Substring(0' 8) == "PossList" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("target");  						savePossList = initFile.Value.Substring(1);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "WsSelector" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("val");  						saveWsSel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "HelpString" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveHelpString = initFile.Value;  					}    			ReadInputFile(initFile);  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,ProcessCustomFields,The following statement contains a magic number: while (!initFile.EOF)  			{  				if (initFile.Name == "CustomField" && initFile.NodeType == XmlNodeType.Element)  				{  					BuildCustomField(initFile);  					CustomFlag = true;  				}    				else  					if (initFile.Name == "LangProject" && initFile.NodeType == XmlNodeType.Element)  					{  						if (CustomFlag == false)     //No custom fields  							return false;  					}  				else  					if (initFile.Name == "UserViewField")  					{  						if (userViewFlag == true)  						{  							GetValuesFromUserView(saveFlid' saveLabel' savePossList' saveHelpString' saveWsSel);  							userViewFlag = false;  						}  						else  							userViewFlag = true;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 4 && initFile.Name.Substring(0'4) == "Flid" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to field containing flid  						initFile.MoveToAttribute("val");  						saveFlid = int.Parse(initFile.Value);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 5 && initFile.Name.Substring(0' 5) == "Label" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveLabel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 8 && initFile.Name.Substring(0' 8) == "PossList" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("target");  						savePossList = initFile.Value.Substring(1);  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "WsSelector" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to Link  						initFile.MoveToAttribute("val");  						saveWsSel = initFile.Value;  					}  				else  					if (userViewFlag == true && initFile.Name.Length > 10 && initFile.Name.Substring(0' 10) == "HelpString" && initFile.NodeType == XmlNodeType.Element)  					{  						ReadInputFile(initFile);     // To get to AUni  						ReadInputFile(initFile);     // To get to Text  						saveHelpString = initFile.Value;  					}    			ReadInputFile(initFile);  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,WriteRtElement,The following statement contains a magic number: for (i=group.hierarchy.Count-1; i >= 0; i--)  			{  				BaseModNum = int.Parse(group.hierarchy[i].ToString().Length < 4 ? "0" : group.hierarchy[i].ToString().Substring(0'1));  				BaseClassNum = int.Parse(group.hierarchy[i].ToString().Length == 4 ? group.hierarchy[i].ToString().Substring(1'3) : group.hierarchy[i].ToString().Substring(0));  				modList.TryGetValue(BaseModNum' out dicClass);  				dicClass.TryGetValue(BaseClassNum' out hClass);  				WriteProjectGroup(group.hierarchy[i]' hClass.ClassName' xmlOutput' group);  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,WriteRtElement,The following statement contains a magic number: for (i=group.hierarchy.Count-1; i >= 0; i--)  			{  				BaseModNum = int.Parse(group.hierarchy[i].ToString().Length < 4 ? "0" : group.hierarchy[i].ToString().Substring(0'1));  				BaseClassNum = int.Parse(group.hierarchy[i].ToString().Length == 4 ? group.hierarchy[i].ToString().Substring(1'3) : group.hierarchy[i].ToString().Substring(0));  				modList.TryGetValue(BaseModNum' out dicClass);  				dicClass.TryGetValue(BaseClassNum' out hClass);  				WriteProjectGroup(group.hierarchy[i]' hClass.ClassName' xmlOutput' group);  			}
Magic Number,ConvertLib,Convert,C:\repos\sillsdev_FieldWorks\Lib\src\Converter\Convertlib\Convert.cs,WriteRtElement,The following statement contains a magic number: for (i=group.hierarchy.Count-1; i >= 0; i--)  			{  				BaseModNum = int.Parse(group.hierarchy[i].ToString().Length < 4 ? "0" : group.hierarchy[i].ToString().Substring(0'1));  				BaseClassNum = int.Parse(group.hierarchy[i].ToString().Length == 4 ? group.hierarchy[i].ToString().Substring(1'3) : group.hierarchy[i].ToString().Substring(0));  				modList.TryGetValue(BaseModNum' out dicClass);  				dicClass.TryGetValue(BaseClassNum' out hClass);  				WriteProjectGroup(group.hierarchy[i]' hClass.ClassName' xmlOutput' group);  			}
