Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The method has 255 lines of code.
Long Method,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,Init,The method has 100 lines of code.
Long Method,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,InitializeComponent,The method has 147 lines of code.
Long Method,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The method has 232 lines of code.
Long Method,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaVc.cs,Display,The method has 150 lines of code.
Long Method,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The method has 254 lines of code.
Long Method,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,m_insertionControl_Insert,The method has 100 lines of code.
Long Method,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,Display,The method has 230 lines of code.
Complex Method,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,Dispose,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.XWorks.MorphologyEditor,ParaChangeInfo,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,UpdateInstanceOf,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.XWorks.MorphologyEditor,RespellUndoAction,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,CopyAnalysesToNewWordform,Cyclomatic complexity of the method is 13
Complex Method,SIL.FieldWorks.XWorks.MorphologyEditor,RespellUndoAction,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,ProcessAnalysesAndLexEntries,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingSda,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,AddAdditionalOccurrences,Cyclomatic complexity of the method is 13
Complex Method,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlgListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlgListener.cs,ActiveWord,Cyclomatic complexity of the method is 11
Complex Method,SIL.FieldWorks.XWorks.MorphologyEditor,OccurrenceComparer,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlgListener.cs,Compare,Cyclomatic complexity of the method is 10
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaControl.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,AssignFeaturesToPhonemes,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AssignFeaturesToPhonemes.cs,CreateBrowseViewer,The method has 8 parameters. Parameters: nodeSpec' hvoRoot' fakeFlid' cache' mediator' propertyTable' sortItemProvider' sda
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,BasicIPASymbolSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\BasicIPASymbolSlice.cs,BasicIPASymbolSlice,The method has 7 parameters. Parameters: cache' editor' flid' node' obj' persistenceProvider' ws
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaControl.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,MorphologyListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MorphologyListener.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,OneAnalysisSandbox,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\OneAnalysisSandbox.cs,OneAnalysisSandbox,The method has 6 parameters. Parameters: cache' mediator' propertyTable' ss' choices' hvoAnalysis
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,PhEnvStrRepresentationSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\PhEnvStrRepresentationSlice.cs,PhEnvStrRepresentationSlice,The method has 7 parameters. Parameters: cache' editor' flid' node' obj' persistenceProvider' ws
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaControl.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,RespellUndoAction,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,RespellUndoAction,The method has 5 parameters. Parameters: sda' cache' vernWs' oldSpelling' newSpelling
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,RespellUndoAction,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,SetupPreviews,The method has 7 parameters. Parameters: tagPrecedingContext' tagPreview' tagAdjustedBegin' tagAdjustedEnd' tagEnabled' occurrences' rootb
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,RespellUndoAction,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,SetOffsets,The method has 5 parameters. Parameters: tagAdjustedBegin' tagAdjustedEnd' hvoFake' delta' beginTarget
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerRecordList,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlgListener.cs,PropChanged,The method has 5 parameters. Parameters: hvo' tag' ivMin' cvIns' cvDel
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,Initialize,The method has 9 parameters. Parameters: cache' obj' flid' fieldName' persistProvider' mediator' propertyTable' displayNameProperty' displayWs
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,DisplayChooser,The method has 5 parameters. Parameters: fieldName' linkText' toolName' guiControl' candidates
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,RemoveContextsFrom,The method has 5 parameters. Parameters: forward' sel' seq' preRemovalSideEffects' index
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,RemoveContextsFrom,The method has 5 parameters. Parameters: forward' sel' seqCtxt' preRemovalSideEffects' index
Long Parameter List,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,UpdateProp,The method has 5 parameters. Parameters: vwsel' hvo' tag' frag' tssVal
Long Identifier,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateControl.cs,,The length of the parameter m_sSlotChooserInstructionalText is 31.
Long Identifier,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateControl.cs,,The length of the parameter m_sInflAffixChooserInstructionalTextReq is 39.
Long Identifier,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateControl.cs,,The length of the parameter m_sInflAffixChooserInstructionalTextOpt is 39.
Long Identifier,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateControl.cs,,The length of the parameter m_ChooseInflectionalAffixHelpTopic is 34.
Long Identifier,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,CheckForOtherOccurrences,The length of the parameter allAnalysesCandidatesOfWordform is 31.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaControl.cs,Initialize,The length of the statement  "			m_view.Init(mediator' propertyTable' obj.Hvo' this' new AffixRuleFormulaVc(cache' propertyTable)' AffixRuleFormulaVc.kfragRule' cache.MainCacheAccessor); " is 153.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The length of the statement  "					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false); " is 137.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,BasicIPASymbolSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\BasicIPASymbolSlice.cs,SetFeaturesBasedOnIPA,The length of the statement  "			if (phoneme.BasicIPASymbol.Length > 0 && (m_justChangedFeatures || phoneme.FeaturesOA == null || phoneme.FeaturesOA.FeatureSpecsOC.Count == 0)) " is 143.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,Init,The length of the statement  "			Debug.Assert(sourceObject != null && (sourceObject is IWfiWordform || sourceObject is IWfiAnalysis || sourceObject is IWfiGloss)); " is 130.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,Init,The length of the statement  "			helpProvider.SetHelpKeyword(this' m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider").GetHelpString(s_helpTopic)); " is 128.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ConcordanceDlg)); " is 134.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,InitializeComponent,The length of the statement  "			this.m_toolStripFilterStatusLabel.BorderSides = ((System.Windows.Forms.ToolStripStatusLabelBorderSides)((((System.Windows.Forms.ToolStripStatusLabelBorderSides.Left | System.Windows.Forms.ToolStripStatusLabelBorderSides.Top) " is 224.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,InitializeComponent,The length of the statement  "			this.m_toolStripRecordStatusLabel.BorderSides = ((System.Windows.Forms.ToolStripStatusLabelBorderSides)((((System.Windows.Forms.ToolStripStatusLabelBorderSides.Left | System.Windows.Forms.ToolStripStatusLabelBorderSides.Top) " is 224.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,btnAssign_Click,The length of the statement  "				UndoableUnitOfWorkHelper.Do(MEStrings.ksUndoAssignAnalyses' MEStrings.ksRedoAssignAnalyses' m_specialSda.GetActionHandler()' () => " is 130.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ImageHolder)); " is 131.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The length of the statement  "			this.largeImages.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("largeImages.ImageStream"))); " is 122.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The length of the statement  "			this.smallImages.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("smallImages.ImageStream"))); " is 122.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateControl.cs,SetStringTableValues,The length of the statement  "			m_sSlotChooserInstructionalText = StringTable.Table.GetString("SlotChooserInstructionalText"' "Linguistics/Morphology/TemplateTable"); " is 134.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateControl.cs,SetStringTableValues,The length of the statement  "			m_sInflAffixChooserTitle = StringTable.Table.GetString("InflAffixChooserTitle"' "Linguistics/Morphology/TemplateTable"); " is 120.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateControl.cs,SetStringTableValues,The length of the statement  "			m_sInflAffixChooserInstructionalTextReq = StringTable.Table.GetString("InflAffixChooserInstructionalTextReq"' "Linguistics/Morphology/TemplateTable"); " is 150.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateControl.cs,SetStringTableValues,The length of the statement  "			m_sInflAffixChooserInstructionalTextOpt = StringTable.Table.GetString("InflAffixChooserInstructionalTextOpt"' "Linguistics/Morphology/TemplateTable"); " is 150.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateControl.cs,OnRightMouseUp,The length of the statement  "				sel.PropInfo(false' 0' out hvo' out tag' out index' out prev' out vps);  // using level 1 for an msa should return the slot it belongs in " is 137.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateControl.cs,EnsureNewMsaHasSense,The length of the statement  "				//newSense.SemanticsNote.AnalysisDefaultWritingSystem.Text = firstSense.SemanticsNote.AnalysisDefaultWritingSystem.Text; " is 120.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateControl.cs,OnInflAffixTemplateHelp,The length of the statement  "			ShowHelp.ShowHelpTopic(m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider")' m_ChooseInflectionalAffixHelpTopic); " is 126.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateControl.cs,MenuLabelForInflAffixTemplateHelp,The length of the statement  "				if (m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider").GetHelpString(m_ChooseInflectionalAffixHelpTopic) != null) " is 128.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,InterlinearSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InterlinearSlice.cs,SetWidthForDataTreeLayout,The length of the statement  "			var minWidth = ((AnalysisInterlinearRs)Control).DesiredSize.Width + SplitCont.SplitterDistance + SplitCont.SplitterWidth; " is 121.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,MasterCatDlgListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MasterCatDlgListener.cs,OnDialogInsertItemInVector,The length of the statement  "				dlg.SetDlginfo((owningObj is ICmPossibilityList) ? owningObj as ICmPossibilityList : cache.LangProject.PartsOfSpeechOA' m_mediator' m_propertyTable' true' null); " is 161.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,MasterPhonFeatDlgListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MasterPhonFeatDlgListener.cs,OnDialogInsertItemInVector,The length of the statement  "				string sXmlFile = Path.Combine(FwDirectoryFinder.CodeDirectory' String.Format("Language Explorer{0}MGA{0}GlossLists{0}PhonFeatsEticGlossList.xml"' Path.DirectorySeparatorChar)); " is 177.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,MasterPhonFeatDlgListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MasterPhonFeatDlgListener.cs,OnDialogInsertItemInVector,The length of the statement  "				dlg.SetDlginfo(cache.LangProject.PhFeatureSystemOA' m_mediator' m_propertyTable' true' "masterPhonFeatListDlg"' sXmlFile); " is 122.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MEImages)); " is 128.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The length of the statement  "			this.buttonImages.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("buttonImages.ImageStream"))); " is 124.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaControl.cs,Initialize,The length of the statement  "			m_view.Init(mediator' propertyTable' obj.Hvo' this' new MetaRuleFormulaVc(cache' propertyTable)' MetaRuleFormulaVc.kfragRule' cache.MainCacheAccessor); " is 151.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,MorphologyListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MorphologyListener.cs,OnEnableVernacularSpelling,The length of the statement  "				if (string.IsNullOrEmpty(wsObj.SpellCheckingId) || wsObj.SpellCheckingId == "<None>") // LT-13556 new langs were null here " is 122.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,WordsEditToolMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MorphologyListener.cs,OnAddApprovedAnalysis,The length of the statement  "			using (EditMorphBreaksDlg dlg = new EditMorphBreaksDlg(m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider"))) " is 122.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,StringRepSliceView,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\PhEnvStrRepresentationSlice.cs,DoValidation,The length of the statement  "					m_env.CheckConstraints(PhEnvironmentTags.kflidStringRepresentation' true' out failure' /* adjust the squiggly line */ true); " is 124.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaControl.cs,Initialize,The length of the statement  "			m_view.Init(mediator' propertyTable' obj.Hvo' this' new RegRuleFormulaVc(cache' propertyTable)' RegRuleFormulaVc.kfragRHS' cache.MainCacheAccessor); " is 148.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaControl.cs,InsertContextsFromEnv,The length of the statement  "						bdryCtxt.FeatureStructureRA = m_cache.ServiceLocator.GetInstance<IPhBdryMarkerRepository>().GetObject(LangProjectTags.kguidPhRuleWordBdry); " is 139.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaVc.cs,Display,The length of the statement  "					vwenv.AddObjProp(m_cache.MetaDataCacheAccessor.GetFieldId2(PhSegRuleRHSTags.kClassId' "OwningRule"' false)' this' kfragRule); " is 125.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,SetDlgInfo,The length of the statement  "			//We need to re-parse the interesting texts so that the rows in the dialog show all the occurrences (make sure it is up to date) " is 128.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,SetDlgInfoPrivate,The length of the statement  "				Debug.Assert(m_cbNewSpelling.StyleSheet != null); // if it is we get a HUGE default font (and can't get the correct size) " is 121.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RespellerDlg)); " is 132.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.m_sourceSentences.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 153.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.m_btnClose.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.m_buttonImages.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("m_buttonImages.ImageStream"))); " is 128.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 144.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.m_btnPreviewClear.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 156.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.m_btnHelp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.m_btnApply.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.m_btnMore.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 147.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.m_cbNewSpelling.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 153.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.m_cbMaintainCase.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 155.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.m_btnRefresh.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.m_optionsPanel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 150.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.m_lblExplainDisabled.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 158.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The length of the statement  "			this.m_cbCopyAnalyses.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,m_insertionControl_Insert,The length of the statement  "					IEnumerable<IPhPhoneme> phonemes = m_cache.LangProject.PhonologicalDataOA.PhonemeSetsOS[0].PhonemesOC.OrderBy(ph => ph.ShortName); " is 130.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,m_insertionControl_Insert,The length of the statement  "					IEnumerable<IPhNaturalClass> natClasses = m_cache.LangProject.PhonologicalDataOA.NaturalClassesOS.OrderBy(natc => natc.ShortName); " is 130.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,m_insertionControl_Insert,The length of the statement  "					IPhBdryMarker wordBdry = m_cache.ServiceLocator.GetInstance<IPhBdryMarkerRepository>().GetObject(LangProjectTags.kguidPhRuleWordBdry); " is 134.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,m_insertionControl_Insert,The length of the statement  "					IPhBdryMarker morphBdry = m_cache.ServiceLocator.GetInstance<IPhBdryMarkerRepository>().GetObject(LangProjectTags.kguidPhRuleMorphBdry); " is 136.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,DisplayChooser,The length of the statement  "			using (var chooser = new SimpleListChooser(m_persistProvider' labels' fieldName' m_propertyTable.GetValue<IHelpTopicProvider>("HelpTopicProvider"))) " is 148.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,RemoveItemsRequested,The length of the statement  "			UndoableUnitOfWorkHelper.Do(MEStrings.ksRuleUndoRemove' MEStrings.ksRuleRedoRemove' m_cache.ActionHandlerAccessor' () => " is 120.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,GetNCCtxtWidth,The length of the statement  "				int len = GetStrWidth(ctxt.FeatureStructureRA == null ? m_questions : ctxt.FeatureStructureRA.Abbreviation.BestAnalysisAlternative' null' vwenv); " is 145.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,WordformGoDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\WordformGoDlg.cs,InitializeMatchingObjects,The length of the statement  "			SearchEngine searchEngine = SearchEngine.Get(m_mediator' m_propertyTable' "WordformGoSearchEngine"' () => new WordformGoSearchEngine(cache)); " is 141.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,WordformGoDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\WordformGoDlg.cs,InitializeMatchingObjects,The length of the statement  "			m_matchingObjectsBrowser.Initialize(cache' FontHeightAdjuster.StyleSheetFromPropertyTable(m_propertyTable)' m_mediator' m_propertyTable' configNode' " is 148.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,WordformGoDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\WordformGoDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(WordformGoDlg)); " is 133.
Long Statement,SIL.FieldWorks.XWorks.MorphologyEditor,WordformGoDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\WordformGoDlg.cs,InitializeComponent,The length of the statement  "			this.m_helpProvider.SetHelpNavigator(this' ((System.Windows.Forms.HelpNavigator)(resources.GetObject("$this.HelpNavigator")))); " is 127.
Complex Conditional,SIL.FieldWorks.XWorks.MorphologyEditor,BasicIPASymbolSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\BasicIPASymbolSlice.cs,SetFeaturesBasedOnIPA,The conditional expression  "phoneme.BasicIPASymbol.Length > 0 && (m_justChangedFeatures || phoneme.FeaturesOA == null || phoneme.FeaturesOA.FeatureSpecsOC.Count == 0)"  is complex.
Complex Conditional,SIL.FieldWorks.XWorks.MorphologyEditor,WordsEditToolMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MorphologyListener.cs,OnDisplayJumpToTool,The conditional expression  "m_dataEntryForm != null && m_dataEntryForm.CurrentSlice != null &&  						CurrentSliceObject != null && CurrentSliceObject.ClassID == specifiedClsid"  is complex.
Complex Conditional,SIL.FieldWorks.XWorks.MorphologyEditor,WordsEditToolMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MorphologyListener.cs,OnJumpToTool,The conditional expression  "m_dataEntryForm != null && m_dataEntryForm.CurrentSlice != null &&  						CurrentSliceObject != null && CurrentSliceObject.ClassID == WfiGlossTags.kClassId"  is complex.
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaControl.cs,DisplayOption,The following statement contains a magic number: if (cellId == -1 || cellId == -2)  				return false;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaControl.cs,DisplayVariableOption,The following statement contains a magic number: if (cellId == -1 || cellId == -2)  				return false;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaControl.cs,DisplayColumnOption,The following statement contains a magic number: if (cellId == -1 || cellId == -2)  				return false;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaControl.cs,DisplayNoOptsMsg,The following statement contains a magic number: if (cellId == -1 || cellId == 2)  				return null;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaControl.cs,GetLevelInfo,The following statement contains a magic number: switch (cellId)  			{  				case AffixRuleFormulaVc.ktagLeftEmpty:  				case AffixRuleFormulaVc.ktagRightEmpty:  					break;    				case MoAffixProcessTags.kflidOutput:  					if (cellIndex >= 0)  					{  						levels = new SelLevInfo[1];  						levels[0].tag = cellId;  						levels[0].ihvo = cellIndex;  					}  					break;    				default:  					var ctxtOrVar = m_cache.ServiceLocator.GetInstance<IPhContextOrVarRepository>().GetObject(cellId);  					if (cellIndex < 0 || ctxtOrVar.ClassID != PhSequenceContextTags.kClassId)  					{  						levels = new SelLevInfo[1];  						levels[0].tag = MoAffixProcessTags.kflidInput;  						levels[0].ihvo = ctxtOrVar.IndexInOwner;  					}  					else  					{  						levels = new SelLevInfo[2];  						levels[0].tag = PhSequenceContextTags.kflidMembers;  						levels[0].ihvo = cellIndex;  						levels[1].tag = MoAffixProcessTags.kflidInput;  						levels[1].ihvo = ctxtOrVar.IndexInOwner;  					}  					break;    			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaControl.cs,RemoveItems,The following statement contains a magic number: if (cellId == -1 || cellId == -2)  				return -1;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,AffixRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint' 10000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,AffixRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint' 24000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,AffixRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,AffixRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,AffixRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,AffixRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,AffixRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,AffixRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IMoAffixProcessRepository>().GetObject(hvo);    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(3' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength inputLen;  					inputLen.nVal = 0;  					inputLen.unit = VwUnit.kunPoint1000;    					int indexWidth = GetStrWidth(m_indexStr' m_headerProps' vwenv);  					int inputWidth = GetStrWidth(m_inputStr' m_headerProps' vwenv);  					VwLength headerLen;  					headerLen.nVal = Math.Max(indexWidth' inputWidth) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += headerLen.nVal;    					VwLength leftEmptyLen;  					leftEmptyLen.nVal = 8000 + (PileMargin * 2) + 2000;  					leftEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += leftEmptyLen.nVal;    					var ctxtLens = new VwLength[m_rule.InputOS.Count];  					vwenv.NoteDependency(new[] {m_rule.Hvo}' new[] {MoAffixProcessTags.kflidInput}' 1 );  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						int idxWidth = GetStrWidth(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs)' m_indexProps' vwenv);  						int ctxtWidth = GetWidth(m_rule.InputOS[i]' vwenv);  						ctxtLens[i].nVal = Math.Max(idxWidth' ctxtWidth) + 8000 + 1000;  						ctxtLens[i].unit = VwUnit.kunPoint1000;  						inputLen.nVal += ctxtLens[i].nVal;  					}    					VwLength rightEmptyLen;  					rightEmptyLen.nVal = 8000 + (PileMargin * 2) + 1000;  					rightEmptyLen.unit = VwUnit.kunPoint1000;  					inputLen.nVal += rightEmptyLen.nVal;    					vwenv.MakeColumns(1' inputLen);    					VwLength arrowLen;  					arrowLen.nVal = GetStrWidth(m_doubleArrow' m_arrowProps' vwenv) + 8000;  					arrowLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' arrowLen);    					VwLength outputLen;  					outputLen.nVal = 1;  					outputLen.unit = VwUnit.kunRelative;  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(m_rule.InputOS.Count + 3' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(1' leftEmptyLen);  					foreach (VwLength ctxtLen in ctxtLens)  						vwenv.MakeColumns(1' ctxtLen);  					vwenv.MakeColumns(1' rightEmptyLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagLeftEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input context cells  					vwenv.AddObjVec(MoAffixProcessTags.kflidInput' this' kfragInput);    					// input right empty cell  					vwenv.Props = m_ctxtProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					OpenSingleLinePile(vwenv' maxNumLines' false);  					vwenv.Props = m_bracketProps;  					vwenv.AddProp(ktagRightEmpty' this' kfragEmpty);  					CloseSingleLinePile(vwenv' false);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// index header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_indexStr);  					vwenv.CloseTableCell();    					// index left empty cell  					vwenv.Props = m_indexProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// index cells  					for (int i = 0; i < m_rule.InputOS.Count; i++)  					{  						vwenv.Props = m_indexProps;  						vwenv.OpenTableCell(1' 1);  						vwenv.AddString(TsStringUtils.MakeString(Convert.ToString(i + 1)' userWs));  						vwenv.CloseTableCell();  					}    					// index right empty cell  					vwenv.Props = m_indexProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					vwenv.CloseTableCell();    					// double arrow cell  					vwenv.Props = m_arrowProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_doubleArrow);  					vwenv.CloseTableCell();    					// result table cell  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenTable(1' tableLen' 0' VwAlignment.kvaLeft' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);  					vwenv.MakeColumns(1' outputLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// result header cell  					vwenv.Props = m_headerProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.OpenTableRow();    					// result cell  					vwenv.Props = m_resultProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.OutputOS.Count == 0)  						vwenv.AddProp(MoAffixProcessTags.kflidOutput' this' kfragEmpty);  					else  						vwenv.AddObjVecItems(MoAffixProcessTags.kflidOutput' this' kfragRuleMapping);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();    					vwenv.CloseTableCell();  					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRuleMapping:  					var mapping = m_cache.ServiceLocator.GetInstance<IMoRuleMappingRepository>().GetObject(hvo);  					switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AnalysisInterlinearRs,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AnalysisInterlinearRS.cs,GetAvailWidth,The following statement contains a magic number: return Int32.MaxValue / 2;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AnalysisInterlinearRs,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AnalysisInterlinearRS.cs,SetPadding,The following statement contains a magic number: m_vc.LeftPadding = ((m_oneAnalSandbox.Width - m_rcPrimary.right) * 72000) / dpiX;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AnalysisInterlinearRs,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AnalysisInterlinearRS.cs,SetSandboxSizeForVc,The following statement contains a magic number: if (width > 10000)  			{  				//				Debug.Assert(width < 10000); // Is something taking the full available width of MaxInt/2?  				width = 500; // arbitrary' may allow something to work more or less  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AnalysisInterlinearRs,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AnalysisInterlinearRS.cs,SetSandboxSizeForVc,The following statement contains a magic number: if (width > 10000)  			{  				//				Debug.Assert(width < 10000); // Is something taking the full available width of MaxInt/2?  				width = 500; // arbitrary' may allow something to work more or less  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AnalysisInterlinearRs,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AnalysisInterlinearRS.cs,SetSandboxSizeForVc,The following statement contains a magic number: var newSize = new Size(width * 72000 / dpiX'  				m_oneAnalSandbox.RootBox.Height * 72000 / dpiY);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,AnalysisInterlinearRs,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AnalysisInterlinearRS.cs,SetSandboxSizeForVc,The following statement contains a magic number: var newSize = new Size(width * 72000 / dpiX'  				m_oneAnalSandbox.RootBox.Height * 72000 / dpiY);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,Init,The following statement contains a magic number: tvSource.Font = new Font(MiscUtils.StandardSansSerif' 9);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,Init,The following statement contains a magic number: tvTarget.Font = new Font(MiscUtils.StandardSansSerif' 9);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,Init,The following statement contains a magic number: foreach (var anal in m_wordform.HumanApprovedAnalyses)  			{  				var srcTnAnal = new TreeNode();  				var tarTnAnal = new TreeNode  									{  										Text = srcTnAnal.Text = TsStringUtils.NormalizeToNFC(  																	String.Format(MEStrings.ksAnalysisX' (++cnt)))'  										Tag = srcTnAnal.Tag = anal  									};  				srcTnWf.Nodes.Add(srcTnAnal);  				tarTnWf.Nodes.Add(tarTnAnal);  				if (srcTnAnal.Tag == sourceObject)  					tvSource.SelectedNode = srcTnAnal;  				foreach (var gloss in anal.MeaningsOC)  				{  					var srcTnGloss = new TreeNode();  					var tarTnGloss = new TreeNode();  					var tss = gloss.Form.BestAnalysisAlternative;  					var props = tss.get_PropertiesAt(0);  					int nVar;  					var ws = props.GetIntPropValues((int)FwTextPropType.ktptWs' out nVar);  					var fontname = m_wordform.Cache.ServiceLocator.WritingSystemManager.Get(ws).DefaultFontName;  					tarTnGloss.NodeFont = new Font(fontname' 9);  					srcTnGloss.NodeFont = new Font(fontname' 9);  					tarTnGloss.Text = srcTnGloss.Text = TsStringUtils.NormalizeToNFC(tss.Text);  					tarTnGloss.Tag = srcTnGloss.Tag = gloss;  					srcTnAnal.Nodes.Add(srcTnGloss);  					tarTnAnal.Nodes.Add(tarTnGloss);  					if (srcTnGloss.Tag == sourceObject)  						tvSource.SelectedNode = srcTnGloss;  				}  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,Init,The following statement contains a magic number: foreach (var anal in m_wordform.HumanApprovedAnalyses)  			{  				var srcTnAnal = new TreeNode();  				var tarTnAnal = new TreeNode  									{  										Text = srcTnAnal.Text = TsStringUtils.NormalizeToNFC(  																	String.Format(MEStrings.ksAnalysisX' (++cnt)))'  										Tag = srcTnAnal.Tag = anal  									};  				srcTnWf.Nodes.Add(srcTnAnal);  				tarTnWf.Nodes.Add(tarTnAnal);  				if (srcTnAnal.Tag == sourceObject)  					tvSource.SelectedNode = srcTnAnal;  				foreach (var gloss in anal.MeaningsOC)  				{  					var srcTnGloss = new TreeNode();  					var tarTnGloss = new TreeNode();  					var tss = gloss.Form.BestAnalysisAlternative;  					var props = tss.get_PropertiesAt(0);  					int nVar;  					var ws = props.GetIntPropValues((int)FwTextPropType.ktptWs' out nVar);  					var fontname = m_wordform.Cache.ServiceLocator.WritingSystemManager.Get(ws).DefaultFontName;  					tarTnGloss.NodeFont = new Font(fontname' 9);  					srcTnGloss.NodeFont = new Font(fontname' 9);  					tarTnGloss.Text = srcTnGloss.Text = TsStringUtils.NormalizeToNFC(tss.Text);  					tarTnGloss.Tag = srcTnGloss.Tag = gloss;  					srcTnAnal.Nodes.Add(srcTnGloss);  					tarTnAnal.Nodes.Add(tarTnGloss);  					if (srcTnGloss.Tag == sourceObject)  						tvSource.SelectedNode = srcTnGloss;  				}  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_toolStripProgressBar.Margin = new System.Windows.Forms.Padding(2' 2' 1' 2);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_toolStripProgressBar.Margin = new System.Windows.Forms.Padding(2' 2' 1' 2);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_toolStripProgressBar.Margin = new System.Windows.Forms.Padding(2' 2' 1' 2);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_toolStripFilterStatusLabel.Margin = new System.Windows.Forms.Padding(1' 2' 1' 2);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_toolStripFilterStatusLabel.Margin = new System.Windows.Forms.Padding(1' 2' 1' 2);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_toolStripRecordStatusLabel.Margin = new System.Windows.Forms.Padding(1' 2' 2' 2);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_toolStripRecordStatusLabel.Margin = new System.Windows.Forms.Padding(1' 2' 2' 2);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ConcordanceDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_toolStripRecordStatusLabel.Margin = new System.Windows.Forms.Padding(1' 2' 2' 2);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ProgressReporting,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ConcordanceDlg.cs,ProgressReporting,The following statement contains a magic number: m_progressBar.Maximum = 100;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.largeImages.Images.SetKeyName(2' "");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.largeImages.Images.SetKeyName(3' "");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.largeImages.Images.SetKeyName(4' "");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.largeImages.Images.SetKeyName(5' "");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.smallImages.Images.SetKeyName(2' "");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.smallImages.Images.SetKeyName(3' "");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.smallImages.Images.SetKeyName(4' "");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.smallImages.Images.SetKeyName(5' "");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.smallImages.Images.SetKeyName(6' "");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.smallImages.Images.SetKeyName(7' "");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.smallImages.Images.SetKeyName(8' "Insert Sub-Cat.ico");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.smallCommandImages.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.smallCommandImages.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(32' 40);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(32' 40);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 56);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,ImageHolder,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\ImageHolder.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 56);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateControl.cs,GetAllUnnamedSlotValues,The following statement contains a magic number: while (pos != null)  			{  				foreach (IMoInflAffixSlot slot in pos.AffixSlotsOC)  				{  					if (slot.Name.AnalysisDefaultWritingSystem == null ||  						slot.Name.BestAnalysisAlternative.Text == null ||  						slot.Name.BestAnalysisAlternative.Text.StartsWith(m_sUnnamedSlotName))  					{  						string sValue = m_sUnnamedSlotName;  						int i;  						try  						{  							i = Convert.ToInt32(sValue);  						}  						catch (Exception)  						{ // default to 9999 if what's after is not a number  							i = 9999; // use something very unlikely to happen normally  						}  						aiUnnamedSlotValues.Add(i);  					}  				}  				pos = pos.OwnerOfClass<IPartOfSpeech>();  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateMenuHandler.cs,LaunchFwContextMenu,The following statement contains a magic number: m_clb.AdjustSize(500' 400);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateMenuHandler.cs,LaunchFwContextMenu,The following statement contains a magic number: m_clb.AdjustSize(500' 400);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateMenuHandler.cs,LaunchFwContextMenu,The following statement contains a magic number: Rectangle boundsLauncher = new Rectangle(ptLoc' new Size(10'10));
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateMenuHandler.cs,LaunchFwContextMenu,The following statement contains a magic number: Rectangle boundsLauncher = new Rectangle(ptLoc' new Size(10'10));
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateMenuHandler.cs,AdjustListBoxSize,The following statement contains a magic number: using (System.Drawing.Graphics g = m_inflAffixTemplateCtrl.CreateGraphics())  			{  				int nMaxWidth = 0;  				int nHeight = 0;  				System.Collections.IEnumerator ie = m_clb.Items.GetEnumerator();  				while (ie.MoveNext())  				{  					string s = null;  					if (ie.Current is ITsString)  					{  						ITsString tss = ie.Current as ITsString;  						s = tss.Text;  					}  					else if (ie.Current is String)  					{  						s = ie.Current as string;  					}  					if (s != null)  					{  						SizeF szf = g.MeasureString(s' m_clb.Font);  						int nWidth = (int)szf.Width + 2;  						if (nMaxWidth < nWidth)  							// 2 is not quite enough for height if you have homograph  							// subscripts.  							nMaxWidth = nWidth;  						nHeight += (int)szf.Height + 3;  					}  				}  				m_clb.Form.Width = Math.Max(m_clb.Form.Width' nMaxWidth);  				m_clb.Form.Height = Math.Max(m_clb.Form.Height' nHeight);  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateMenuHandler.cs,AdjustListBoxSize,The following statement contains a magic number: using (System.Drawing.Graphics g = m_inflAffixTemplateCtrl.CreateGraphics())  			{  				int nMaxWidth = 0;  				int nHeight = 0;  				System.Collections.IEnumerator ie = m_clb.Items.GetEnumerator();  				while (ie.MoveNext())  				{  					string s = null;  					if (ie.Current is ITsString)  					{  						ITsString tss = ie.Current as ITsString;  						s = tss.Text;  					}  					else if (ie.Current is String)  					{  						s = ie.Current as string;  					}  					if (s != null)  					{  						SizeF szf = g.MeasureString(s' m_clb.Font);  						int nWidth = (int)szf.Width + 2;  						if (nMaxWidth < nWidth)  							// 2 is not quite enough for height if you have homograph  							// subscripts.  							nMaxWidth = nWidth;  						nHeight += (int)szf.Height + 3;  					}  				}  				m_clb.Form.Width = Math.Max(m_clb.Form.Width' nMaxWidth);  				m_clb.Form.Height = Math.Max(m_clb.Form.Height' nHeight);  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateSlice.cs,FinishInit,The following statement contains a magic number: if (fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				if (!xa.Value.EndsWith("RTL"))  					xa.Value += "RTL";		// both vern and anal are RTL  			}  			else if (fVernRTL && !fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL") && !xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("LTRinRTL"))  					xa.Value += "LTRinRTL";		// LTR anal name in RTL vern table  			}  			else if (!fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("RTLinLTR"))  					xa.Value += "RTLinLTR";		// RTL anal name in LTR vern table  			}  			else  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				// both vern and anal are LTR (unmarked case)  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateSlice.cs,FinishInit,The following statement contains a magic number: if (fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				if (!xa.Value.EndsWith("RTL"))  					xa.Value += "RTL";		// both vern and anal are RTL  			}  			else if (fVernRTL && !fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL") && !xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("LTRinRTL"))  					xa.Value += "LTRinRTL";		// LTR anal name in RTL vern table  			}  			else if (!fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("RTLinLTR"))  					xa.Value += "RTLinLTR";		// RTL anal name in LTR vern table  			}  			else  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				// both vern and anal are LTR (unmarked case)  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateSlice.cs,FinishInit,The following statement contains a magic number: if (fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				if (!xa.Value.EndsWith("RTL"))  					xa.Value += "RTL";		// both vern and anal are RTL  			}  			else if (fVernRTL && !fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL") && !xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("LTRinRTL"))  					xa.Value += "LTRinRTL";		// LTR anal name in RTL vern table  			}  			else if (!fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("RTLinLTR"))  					xa.Value += "RTLinLTR";		// RTL anal name in LTR vern table  			}  			else  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				// both vern and anal are LTR (unmarked case)  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateSlice.cs,FinishInit,The following statement contains a magic number: if (fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				if (!xa.Value.EndsWith("RTL"))  					xa.Value += "RTL";		// both vern and anal are RTL  			}  			else if (fVernRTL && !fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL") && !xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("LTRinRTL"))  					xa.Value += "LTRinRTL";		// LTR anal name in RTL vern table  			}  			else if (!fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("RTLinLTR"))  					xa.Value += "RTLinLTR";		// RTL anal name in LTR vern table  			}  			else  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				// both vern and anal are LTR (unmarked case)  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateSlice.cs,FinishInit,The following statement contains a magic number: if (fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				if (!xa.Value.EndsWith("RTL"))  					xa.Value += "RTL";		// both vern and anal are RTL  			}  			else if (fVernRTL && !fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL") && !xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("LTRinRTL"))  					xa.Value += "LTRinRTL";		// LTR anal name in RTL vern table  			}  			else if (!fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("RTLinLTR"))  					xa.Value += "RTLinLTR";		// RTL anal name in LTR vern table  			}  			else  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				// both vern and anal are LTR (unmarked case)  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateSlice.cs,FinishInit,The following statement contains a magic number: if (fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				if (!xa.Value.EndsWith("RTL"))  					xa.Value += "RTL";		// both vern and anal are RTL  			}  			else if (fVernRTL && !fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL") && !xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("LTRinRTL"))  					xa.Value += "LTRinRTL";		// LTR anal name in RTL vern table  			}  			else if (!fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("RTLinLTR"))  					xa.Value += "RTLinLTR";		// RTL anal name in LTR vern table  			}  			else  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				// both vern and anal are LTR (unmarked case)  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,InflAffixTemplateSlice,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\InflAffixTemplateSlice.cs,FinishInit,The following statement contains a magic number: if (fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				if (!xa.Value.EndsWith("RTL"))  					xa.Value += "RTL";		// both vern and anal are RTL  			}  			else if (fVernRTL && !fAnalRTL)  			{  				if (xa.Value.EndsWith("RTLinLTR"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL") && !xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("LTRinRTL"))  					xa.Value += "LTRinRTL";		// LTR anal name in RTL vern table  			}  			else if (!fVernRTL && fAnalRTL)  			{  				if (xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				if (!xa.Value.EndsWith("RTLinLTR"))  					xa.Value += "RTLinLTR";		// RTL anal name in LTR vern table  			}  			else  			{  				if (xa.Value.EndsWith("RTLinLTR") || xa.Value.EndsWith("LTRinRTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 8);  				else if (xa.Value.EndsWith("RTL"))  					xa.Value = xa.Value.Substring(0' xa.Value.Length - 3);  				// both vern and anal are LTR (unmarked case)  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(2' "non-Headed Comp Rule.ico");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(3' "Phoneme.ico");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(4' "");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(5' "Natural Class.ico");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(6' "Environment.ico");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(7' "adhoc Morpheme rule.ico");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(8' "adhoc Allomorph rule.ico");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(9' "adhoc Group.ico");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(10' "Insert Cat.ico");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(11' "Insert Feature.ico");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(12' "Insert Complex Feature.ico");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(13' "Exception Feature.ico");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MEImages,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MEImages.cs,InitializeComponent,The following statement contains a magic number: this.buttonImages.Images.SetKeyName(14' "Metathesis.ico");
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaControl.cs,DisplayOption,The following statement contains a magic number: if (cellId == -1 || cellId == -2)  				return false;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,MetaRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint' 10000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,MetaRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint' 10000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRule:  					m_rule = m_cache.ServiceLocator.GetInstance<IPhMetathesisRuleRepository>().GetObject(hvo);  					if (m_rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int maxNumLines = GetMaxNumLines();    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(5' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 4000' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;    					int resultx' inputx' dmpy;  					vwenv.get_StringWidth(m_resultStr' m_colHeaderProps' out resultx' out dmpy);  					vwenv.get_StringWidth(m_inputStr' m_colHeaderProps' out inputx' out dmpy);  					VwLength headerLen;  					headerLen.nVal = Math.Max(resultx' inputx) + 8000;  					headerLen.unit = VwUnit.kunPoint1000;    					vwenv.MakeColumns(1' headerLen);  					vwenv.MakeColumns(4' ctxtLen);    					vwenv.OpenTableBody();    					vwenv.OpenTableRow();    					vwenv.OpenTableCell(1' 1);  					vwenv.CloseTableCell();    					// left context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_leftEnvStr);  					vwenv.CloseTableCell();    					// switch header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 2);  					vwenv.AddString(m_switchStr);  					vwenv.CloseTableCell();    					// right context header cell  					vwenv.Props = m_colHeaderProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_rightEnvStr);  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_inputStr);  					vwenv.CloseTableCell();    					// input left context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input left switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagLeftSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);    						if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right switch cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightSwitch' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  						{  							for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  								vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  						}    						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// input right context cell  					vwenv.Props = m_inputCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTop' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex == -1)  					{  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(ktagRightEnv' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					else  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.OpenTableRow();    					// input result header cell  					vwenv.Props = m_rowHeaderProps;  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_resultStr);  					vwenv.CloseTableCell();    					// result left context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.LeftEnvIndex != -1)  					{  						for (int i = 0; i < m_rule.LeftEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightSwitchIndex != -1)  					{  						for (int i = m_rule.RightSwitchIndex; i < m_rule.RightSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.MiddleIndex != -1 && m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result left switch cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 2000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();    					if (m_rule.MiddleIndex != -1 && !m_rule.IsMiddleWithLeftSwitch)  					{  						for (int i = m_rule.MiddleIndex; i < m_rule.MiddleLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					if (m_rule.LeftSwitchIndex != -1)  					{  						for (int i = m_rule.LeftSwitchIndex; i < m_rule.LeftSwitchLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// result right context cell  					vwenv.Props = m_resultCtxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderTrailing' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.set_IntProperty((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rule.RightEnvIndex != -1)  					{  						for (int i = m_rule.RightEnvIndex; i < m_rule.RightEnvLimit; i++)  							vwenv.AddObj(m_rule.StrucDescOS[i].Hvo' this' kfragContext);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();    					vwenv.CloseTableBody();    					vwenv.CloseTable();  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,WordsEditToolMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MorphologyListener.cs,OnDisplayAnalysisDisapprove,The following statement contains a magic number: display.Checked = Analysis.ApprovalStatusIcon == 2;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,WordsEditToolMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MorphologyListener.cs,OnAnalysisDisapprove,The following statement contains a magic number: SetNewStatus(anal' 2);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaControl.cs,GetLevelInfo,The following statement contains a magic number: switch (cellId)  			{  				case PhSegmentRuleTags.kflidStrucDesc:  					if (cellIndex < 0)  					{  						levels = new SelLevInfo[1];  						levels[0].tag = m_cache.MetaDataCacheAccessor.GetFieldId2(PhSegRuleRHSTags.kClassId' "OwningRule"' false);  					}  					else  					{  						levels = new SelLevInfo[2];  						levels[0].tag = PhSegmentRuleTags.kflidStrucDesc;  						levels[0].ihvo = cellIndex;  						levels[1].tag = m_cache.MetaDataCacheAccessor.GetFieldId2(PhSegRuleRHSTags.kClassId' "OwningRule"' false);  					}  					break;    				case PhSegRuleRHSTags.kflidStrucChange:  					if (cellIndex >= 0)  					{  						levels = new SelLevInfo[1];  						levels[0].tag = PhSegRuleRHSTags.kflidStrucChange;  						levels[0].ihvo = cellIndex;  					}  					break;    				case PhSegRuleRHSTags.kflidLeftContext:  				case PhSegRuleRHSTags.kflidRightContext:  					bool leftEnv = cellId == PhSegRuleRHSTags.kflidLeftContext;  					var ctxt = leftEnv ? Rhs.LeftContextOA : Rhs.RightContextOA;  					if (ctxt != null)  					{  						switch (ctxt.ClassID)  						{  							case PhSequenceContextTags.kClassId:  								if (cellIndex < 0)  								{  									levels = new SelLevInfo[1];  									levels[0].tag = cellId;  								}  								else  								{  									levels = new SelLevInfo[2];  									levels[0].tag = PhSequenceContextTags.kflidMembers;  									levels[0].ihvo = cellIndex;  									levels[1].tag = cellId;  								}  								break;    							default:  								if (cellIndex >= 0)  								{  									levels = new SelLevInfo[1];  									levels[0].tag = cellId;  								}  								break;  						}  					}  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaControl.cs,GetLevelInfo,The following statement contains a magic number: switch (cellId)  			{  				case PhSegmentRuleTags.kflidStrucDesc:  					if (cellIndex < 0)  					{  						levels = new SelLevInfo[1];  						levels[0].tag = m_cache.MetaDataCacheAccessor.GetFieldId2(PhSegRuleRHSTags.kClassId' "OwningRule"' false);  					}  					else  					{  						levels = new SelLevInfo[2];  						levels[0].tag = PhSegmentRuleTags.kflidStrucDesc;  						levels[0].ihvo = cellIndex;  						levels[1].tag = m_cache.MetaDataCacheAccessor.GetFieldId2(PhSegRuleRHSTags.kClassId' "OwningRule"' false);  					}  					break;    				case PhSegRuleRHSTags.kflidStrucChange:  					if (cellIndex >= 0)  					{  						levels = new SelLevInfo[1];  						levels[0].tag = PhSegRuleRHSTags.kflidStrucChange;  						levels[0].ihvo = cellIndex;  					}  					break;    				case PhSegRuleRHSTags.kflidLeftContext:  				case PhSegRuleRHSTags.kflidRightContext:  					bool leftEnv = cellId == PhSegRuleRHSTags.kflidLeftContext;  					var ctxt = leftEnv ? Rhs.LeftContextOA : Rhs.RightContextOA;  					if (ctxt != null)  					{  						switch (ctxt.ClassID)  						{  							case PhSequenceContextTags.kClassId:  								if (cellIndex < 0)  								{  									levels = new SelLevInfo[1];  									levels[0].tag = cellId;  								}  								else  								{  									levels = new SelLevInfo[2];  									levels[0].tag = PhSequenceContextTags.kflidMembers;  									levels[0].ihvo = cellIndex;  									levels[1].tag = cellId;  								}  								break;    							default:  								if (cellIndex >= 0)  								{  									levels = new SelLevInfo[1];  									levels[0].tag = cellId;  								}  								break;  						}  					}  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaVc.cs,RegRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptBorderBottom' (int)FwTextPropVar.ktpvMilliPoint' 1000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaVc.cs,RegRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint' 20000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaVc.cs,RegRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptPadLeading' (int)FwTextPropVar.ktpvMilliPoint' 2000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaVc.cs,RegRuleFormulaVc,The following statement contains a magic number: tpb.SetIntPropValues((int)FwTextPropType.ktptPadTrailing' (int)FwTextPropVar.ktpvMilliPoint' 2000);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRHS:  					m_rhs = m_cache.ServiceLocator.GetInstance<IPhSegRuleRHSRepository>().GetObject(hvo);  					var rule = m_rhs.OwningRule;  					if (rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int arrowWidth' slashWidth' underscoreWidth' charHeight;  					vwenv.get_StringWidth(m_arrow' m_charProps' out arrowWidth' out charHeight);  					int maxCharHeight = charHeight;  					vwenv.get_StringWidth(m_slash' m_charProps' out slashWidth' out charHeight);  					maxCharHeight = Math.Max(charHeight' maxCharHeight);  					vwenv.get_StringWidth(m_underscore' m_charProps' out underscoreWidth' out charHeight);  					maxCharHeight = Math.Max(charHeight' maxCharHeight);    					int dmpx' spaceHeight;  					vwenv.get_StringWidth(m_zwSpace' m_bracketProps' out dmpx' out spaceHeight);    					int maxNumLines = GetMaxNumLines();  					int maxCtxtHeight = maxNumLines * spaceHeight;    					int maxHeight = Math.Max(maxCharHeight' maxCtxtHeight);  					int charOffset = maxHeight;  					int ctxtPadding = maxHeight - maxCtxtHeight;    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(7' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;  					VwLength charLen;  					charLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = arrowWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = slashWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = underscoreWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// LHS cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					vwenv.AddObjProp(m_cache.MetaDataCacheAccessor.GetFieldId2(PhSegRuleRHSTags.kClassId' "OwningRule"' false)' this' kfragRule);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// arrow cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_arrow);  					vwenv.CloseTableCell();    					// RHS cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.StrucChangeOS.Count > 0)  					{  						vwenv.AddObjVecItems(PhSegRuleRHSTags.kflidStrucChange' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] {hvo}' new[] {PhSegRuleRHSTags.kflidStrucChange}' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidStrucChange' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// slash cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_slash);  					vwenv.CloseTableCell();    					// left context cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.LeftContextOA != null)  					{  						vwenv.AddObjProp(PhSegRuleRHSTags.kflidLeftContext' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] { hvo }' new[] { PhSegRuleRHSTags.kflidLeftContext }' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidLeftContext' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// underscore cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_underscore);  					vwenv.CloseTableCell();    					// right context cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.RightContextOA != null)  					{  						vwenv.AddObjProp(PhSegRuleRHSTags.kflidRightContext' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] { hvo }' new[] { PhSegRuleRHSTags.kflidRightContext }' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidRightContext' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRule:  					if (m_rhs.OwningRule.StrucDescOS.Count > 0)  					{  						vwenv.AddObjVecItems(PhSegmentRuleTags.kflidStrucDesc' this' kfragContext);  					}  					else  					{  						OpenSingleLinePile(vwenv' GetMaxNumLines()' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegmentRuleTags.kflidStrucDesc' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRHS:  					m_rhs = m_cache.ServiceLocator.GetInstance<IPhSegRuleRHSRepository>().GetObject(hvo);  					var rule = m_rhs.OwningRule;  					if (rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int arrowWidth' slashWidth' underscoreWidth' charHeight;  					vwenv.get_StringWidth(m_arrow' m_charProps' out arrowWidth' out charHeight);  					int maxCharHeight = charHeight;  					vwenv.get_StringWidth(m_slash' m_charProps' out slashWidth' out charHeight);  					maxCharHeight = Math.Max(charHeight' maxCharHeight);  					vwenv.get_StringWidth(m_underscore' m_charProps' out underscoreWidth' out charHeight);  					maxCharHeight = Math.Max(charHeight' maxCharHeight);    					int dmpx' spaceHeight;  					vwenv.get_StringWidth(m_zwSpace' m_bracketProps' out dmpx' out spaceHeight);    					int maxNumLines = GetMaxNumLines();  					int maxCtxtHeight = maxNumLines * spaceHeight;    					int maxHeight = Math.Max(maxCharHeight' maxCtxtHeight);  					int charOffset = maxHeight;  					int ctxtPadding = maxHeight - maxCtxtHeight;    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(7' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;  					VwLength charLen;  					charLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = arrowWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = slashWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = underscoreWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// LHS cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					vwenv.AddObjProp(m_cache.MetaDataCacheAccessor.GetFieldId2(PhSegRuleRHSTags.kClassId' "OwningRule"' false)' this' kfragRule);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// arrow cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_arrow);  					vwenv.CloseTableCell();    					// RHS cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.StrucChangeOS.Count > 0)  					{  						vwenv.AddObjVecItems(PhSegRuleRHSTags.kflidStrucChange' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] {hvo}' new[] {PhSegRuleRHSTags.kflidStrucChange}' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidStrucChange' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// slash cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_slash);  					vwenv.CloseTableCell();    					// left context cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.LeftContextOA != null)  					{  						vwenv.AddObjProp(PhSegRuleRHSTags.kflidLeftContext' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] { hvo }' new[] { PhSegRuleRHSTags.kflidLeftContext }' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidLeftContext' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// underscore cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_underscore);  					vwenv.CloseTableCell();    					// right context cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.RightContextOA != null)  					{  						vwenv.AddObjProp(PhSegRuleRHSTags.kflidRightContext' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] { hvo }' new[] { PhSegRuleRHSTags.kflidRightContext }' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidRightContext' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRule:  					if (m_rhs.OwningRule.StrucDescOS.Count > 0)  					{  						vwenv.AddObjVecItems(PhSegmentRuleTags.kflidStrucDesc' this' kfragContext);  					}  					else  					{  						OpenSingleLinePile(vwenv' GetMaxNumLines()' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegmentRuleTags.kflidStrucDesc' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRHS:  					m_rhs = m_cache.ServiceLocator.GetInstance<IPhSegRuleRHSRepository>().GetObject(hvo);  					var rule = m_rhs.OwningRule;  					if (rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int arrowWidth' slashWidth' underscoreWidth' charHeight;  					vwenv.get_StringWidth(m_arrow' m_charProps' out arrowWidth' out charHeight);  					int maxCharHeight = charHeight;  					vwenv.get_StringWidth(m_slash' m_charProps' out slashWidth' out charHeight);  					maxCharHeight = Math.Max(charHeight' maxCharHeight);  					vwenv.get_StringWidth(m_underscore' m_charProps' out underscoreWidth' out charHeight);  					maxCharHeight = Math.Max(charHeight' maxCharHeight);    					int dmpx' spaceHeight;  					vwenv.get_StringWidth(m_zwSpace' m_bracketProps' out dmpx' out spaceHeight);    					int maxNumLines = GetMaxNumLines();  					int maxCtxtHeight = maxNumLines * spaceHeight;    					int maxHeight = Math.Max(maxCharHeight' maxCtxtHeight);  					int charOffset = maxHeight;  					int ctxtPadding = maxHeight - maxCtxtHeight;    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(7' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;  					VwLength charLen;  					charLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = arrowWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = slashWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = underscoreWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// LHS cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					vwenv.AddObjProp(m_cache.MetaDataCacheAccessor.GetFieldId2(PhSegRuleRHSTags.kClassId' "OwningRule"' false)' this' kfragRule);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// arrow cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_arrow);  					vwenv.CloseTableCell();    					// RHS cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.StrucChangeOS.Count > 0)  					{  						vwenv.AddObjVecItems(PhSegRuleRHSTags.kflidStrucChange' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] {hvo}' new[] {PhSegRuleRHSTags.kflidStrucChange}' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidStrucChange' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// slash cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_slash);  					vwenv.CloseTableCell();    					// left context cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.LeftContextOA != null)  					{  						vwenv.AddObjProp(PhSegRuleRHSTags.kflidLeftContext' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] { hvo }' new[] { PhSegRuleRHSTags.kflidLeftContext }' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidLeftContext' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// underscore cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_underscore);  					vwenv.CloseTableCell();    					// right context cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.RightContextOA != null)  					{  						vwenv.AddObjProp(PhSegRuleRHSTags.kflidRightContext' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] { hvo }' new[] { PhSegRuleRHSTags.kflidRightContext }' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidRightContext' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRule:  					if (m_rhs.OwningRule.StrucDescOS.Count > 0)  					{  						vwenv.AddObjVecItems(PhSegmentRuleTags.kflidStrucDesc' this' kfragContext);  					}  					else  					{  						OpenSingleLinePile(vwenv' GetMaxNumLines()' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegmentRuleTags.kflidStrucDesc' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRHS:  					m_rhs = m_cache.ServiceLocator.GetInstance<IPhSegRuleRHSRepository>().GetObject(hvo);  					var rule = m_rhs.OwningRule;  					if (rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int arrowWidth' slashWidth' underscoreWidth' charHeight;  					vwenv.get_StringWidth(m_arrow' m_charProps' out arrowWidth' out charHeight);  					int maxCharHeight = charHeight;  					vwenv.get_StringWidth(m_slash' m_charProps' out slashWidth' out charHeight);  					maxCharHeight = Math.Max(charHeight' maxCharHeight);  					vwenv.get_StringWidth(m_underscore' m_charProps' out underscoreWidth' out charHeight);  					maxCharHeight = Math.Max(charHeight' maxCharHeight);    					int dmpx' spaceHeight;  					vwenv.get_StringWidth(m_zwSpace' m_bracketProps' out dmpx' out spaceHeight);    					int maxNumLines = GetMaxNumLines();  					int maxCtxtHeight = maxNumLines * spaceHeight;    					int maxHeight = Math.Max(maxCharHeight' maxCtxtHeight);  					int charOffset = maxHeight;  					int ctxtPadding = maxHeight - maxCtxtHeight;    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(7' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;  					VwLength charLen;  					charLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = arrowWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = slashWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = underscoreWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// LHS cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					vwenv.AddObjProp(m_cache.MetaDataCacheAccessor.GetFieldId2(PhSegRuleRHSTags.kClassId' "OwningRule"' false)' this' kfragRule);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// arrow cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_arrow);  					vwenv.CloseTableCell();    					// RHS cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.StrucChangeOS.Count > 0)  					{  						vwenv.AddObjVecItems(PhSegRuleRHSTags.kflidStrucChange' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] {hvo}' new[] {PhSegRuleRHSTags.kflidStrucChange}' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidStrucChange' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// slash cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_slash);  					vwenv.CloseTableCell();    					// left context cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.LeftContextOA != null)  					{  						vwenv.AddObjProp(PhSegRuleRHSTags.kflidLeftContext' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] { hvo }' new[] { PhSegRuleRHSTags.kflidLeftContext }' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidLeftContext' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// underscore cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_underscore);  					vwenv.CloseTableCell();    					// right context cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.RightContextOA != null)  					{  						vwenv.AddObjProp(PhSegRuleRHSTags.kflidRightContext' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] { hvo }' new[] { PhSegRuleRHSTags.kflidRightContext }' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidRightContext' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRule:  					if (m_rhs.OwningRule.StrucDescOS.Count > 0)  					{  						vwenv.AddObjVecItems(PhSegmentRuleTags.kflidStrucDesc' this' kfragContext);  					}  					else  					{  						OpenSingleLinePile(vwenv' GetMaxNumLines()' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegmentRuleTags.kflidStrucDesc' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaVc.cs,Display,The following statement contains a magic number: switch (frag)  			{  				case kfragRHS:  					m_rhs = m_cache.ServiceLocator.GetInstance<IPhSegRuleRHSRepository>().GetObject(hvo);  					var rule = m_rhs.OwningRule;  					if (rule.Disabled)  					{  						vwenv.set_StringProperty((int)FwTextPropType.ktptNamedStyle' "Disabled Text");  					}    					int arrowWidth' slashWidth' underscoreWidth' charHeight;  					vwenv.get_StringWidth(m_arrow' m_charProps' out arrowWidth' out charHeight);  					int maxCharHeight = charHeight;  					vwenv.get_StringWidth(m_slash' m_charProps' out slashWidth' out charHeight);  					maxCharHeight = Math.Max(charHeight' maxCharHeight);  					vwenv.get_StringWidth(m_underscore' m_charProps' out underscoreWidth' out charHeight);  					maxCharHeight = Math.Max(charHeight' maxCharHeight);    					int dmpx' spaceHeight;  					vwenv.get_StringWidth(m_zwSpace' m_bracketProps' out dmpx' out spaceHeight);    					int maxNumLines = GetMaxNumLines();  					int maxCtxtHeight = maxNumLines * spaceHeight;    					int maxHeight = Math.Max(maxCharHeight' maxCtxtHeight);  					int charOffset = maxHeight;  					int ctxtPadding = maxHeight - maxCtxtHeight;    					VwLength tableLen;  					tableLen.nVal = 10000;  					tableLen.unit = VwUnit.kunPercent100;  					vwenv.OpenTable(7' tableLen' 0' VwAlignment.kvaCenter' VwFramePosition.kvfpVoid' VwRule.kvrlNone' 0' 0' false);    					VwLength ctxtLen;  					ctxtLen.nVal = 1;  					ctxtLen.unit = VwUnit.kunRelative;  					VwLength charLen;  					charLen.unit = VwUnit.kunPoint1000;  					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = arrowWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = slashWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					charLen.nVal = underscoreWidth + 4000;  					vwenv.MakeColumns(1' charLen);    					vwenv.MakeColumns(1' ctxtLen);    					vwenv.OpenTableBody();  					vwenv.OpenTableRow();    					// LHS cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					vwenv.AddObjProp(m_cache.MetaDataCacheAccessor.GetFieldId2(PhSegRuleRHSTags.kClassId' "OwningRule"' false)' this' kfragRule);  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// arrow cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_arrow);  					vwenv.CloseTableCell();    					// RHS cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.StrucChangeOS.Count > 0)  					{  						vwenv.AddObjVecItems(PhSegRuleRHSTags.kflidStrucChange' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] {hvo}' new[] {PhSegRuleRHSTags.kflidStrucChange}' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidStrucChange' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// slash cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_slash);  					vwenv.CloseTableCell();    					// left context cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.LeftContextOA != null)  					{  						vwenv.AddObjProp(PhSegRuleRHSTags.kflidLeftContext' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] { hvo }' new[] { PhSegRuleRHSTags.kflidLeftContext }' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidLeftContext' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					// underscore cell  					vwenv.Props = m_charProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptOffset' (int)FwTextPropVar.ktpvMilliPoint' -charOffset);  					vwenv.OpenTableCell(1' 1);  					vwenv.AddString(m_underscore);  					vwenv.CloseTableCell();    					// right context cell  					vwenv.Props = m_ctxtProps;  					vwenv.set_IntProperty((int)FwTextPropType.ktptPadTop' (int)FwTextPropVar.ktpvMilliPoint' ctxtPadding);  					vwenv.OpenTableCell(1' 1);  					vwenv.OpenParagraph();  					if (m_rhs.RightContextOA != null)  					{  						vwenv.AddObjProp(PhSegRuleRHSTags.kflidRightContext' this' kfragContext);  					}  					else  					{  						vwenv.NoteDependency(new[] { hvo }' new[] { PhSegRuleRHSTags.kflidRightContext }' 1);  						OpenSingleLinePile(vwenv' maxNumLines' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegRuleRHSTags.kflidRightContext' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					vwenv.CloseParagraph();  					vwenv.CloseTableCell();    					vwenv.CloseTableRow();  					vwenv.CloseTableBody();  					vwenv.CloseTable();  					break;    				case kfragRule:  					if (m_rhs.OwningRule.StrucDescOS.Count > 0)  					{  						vwenv.AddObjVecItems(PhSegmentRuleTags.kflidStrucDesc' this' kfragContext);  					}  					else  					{  						OpenSingleLinePile(vwenv' GetMaxNumLines()' false);  						vwenv.Props = m_bracketProps;  						vwenv.AddProp(PhSegmentRuleTags.kflidStrucDesc' this' kfragEmpty);  						CloseSingleLinePile(vwenv' false);  					}  					break;    				default:  					base.Display(vwenv' hvo' frag);  					break;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,SetDlgInfoPrivate,The following statement contains a magic number: using (new WaitCursor(this))  			{  				m_mediator = mediator;  				m_propertyTable = propertyTable;    				m_btnRefresh.Image = ResourceHelper.RefreshIcon;    				m_rbDiscardAnalyses.Checked = m_propertyTable.GetBoolProperty("RemoveAnalyses"' true);  				m_rbKeepAnalyses.Checked = !m_rbDiscardAnalyses.Checked;  				m_rbDiscardAnalyses.Click += m_rbDiscardAnalyses_Click;  				m_rbKeepAnalyses.Click += m_rbDiscardAnalyses_Click;    				m_cbUpdateLexicon.Checked = m_propertyTable.GetBoolProperty("UpdateLexiconIfPossible"' true);  				m_cbCopyAnalyses.Checked = m_propertyTable.GetBoolProperty("CopyAnalysesToNewSpelling"' true);  				m_cbCopyAnalyses.Click += m_cbCopyAnalyses_Click;  				m_cbMaintainCase.Checked = m_propertyTable.GetBoolProperty("MaintainCaseOnChangeSpelling"' true);  				m_cbMaintainCase.Click += m_cbMaintainCase_Click;  				m_cache = m_propertyTable.GetValue<LcmCache>("cache");    				// We need to use the 'best vern' ws'  				// since that is what is showing in the Words-Analyses detail edit control.  				// Access to this respeller dlg is currently (Jan. 2008) only via a context menu in the detail edit pane.  				// The user may be showing multiple wordform WSes in the left hand browse view'  				// but we have no way of knowing if the user thinks one of those alternatives is wrong without asking.  				m_vernWs = WritingSystemServices.ActualWs(m_cache'  					WritingSystemServices.kwsFirstVern'  					m_srcwfiWordform.Hvo'  					WfiWordformTags.kflidForm);  				// Bail out if no vernacular writing system was found (see LT-8892).  				Debug.Assert(m_vernWs != 0);  				if (m_vernWs == 0)  					return false;  				// Bail out' rather than run into a null reference exception.  				// (Should fix LT-7666.)  				var vernForm = m_srcwfiWordform.Form.get_String(m_vernWs);  				if (vernForm == null || vernForm.Length == 0)  					return false;    				m_cbNewSpelling.WritingSystemFactory = m_cache.LanguageWritingSystemFactoryAccessor;  				m_cbNewSpelling.WritingSystemCode = m_vernWs;  				m_cbNewSpelling.StyleSheet = FontHeightAdjuster.StyleSheetFromPropertyTable(m_propertyTable);  				Debug.Assert(m_cbNewSpelling.StyleSheet != null); // if it is we get a HUGE default font (and can't get the correct size)  				if (m_cbNewSpelling.WritingSystemFactory.get_EngineOrNull(m_vernWs).RightToLeftScript)  				{  					m_cbNewSpelling.RightToLeft = RightToLeft.Yes;  				}  				m_cbNewSpelling.Tss = vernForm;  				m_cbNewSpelling.AdjustForStyleSheet(this' null' m_cbNewSpelling.StyleSheet);  				if (!Application.RenderWithVisualStyles)  					m_cbNewSpelling.Padding = new Padding(1' 2' 1' 1);    				SetSuggestions();    				m_btnApply.Enabled = false;  				m_cbNewSpelling.TextChanged += m_dstWordform_TextChanged;    				// Setup source browse view.  				var toolNode = configurationParameters.SelectSingleNode("controls/control[@id='srcSentences']/parameters");  				m_srcClerk = RecordClerkFactory.CreateClerk(m_mediator' m_propertyTable' toolNode' true);  				m_srcClerk.OwningObject = m_srcwfiWordform;  				m_sourceSentences.Init(m_mediator' m_propertyTable' toolNode);  				m_sourceSentences.CheckBoxChanged += sentences_CheckBoxChanged;  				m_specialSda = m_sourceSentences.BrowseViewer.SpecialCache;  				m_moreMinSize = Size;  				m_moreMinSize.Height -= m_sourceSentences.Height / 2;  				m_lessMinSize = m_moreMinSize;  				m_lessMinSize.Height -= m_optionsPanel.Height;  				AdjustHeightAndMinSize(Height - m_optionsPanel.Height' m_lessMinSize);  				m_optionsPanel.Visible = false;  				m_btnMore.Image = ResourceHelper.MoreButtonDoubleArrowIcon;  				m_btnMore.Click += btnMore_Click;  				m_sMoreButtonText = m_btnMore.Text;  				m_optionsPanel.Paint += m_optionsPanel_Paint;  				m_btnPreviewClear.Click += m_btnPreviewClear_Click;    				var specialMdc = m_specialSda.MetaDataCache;  				int fakeFlid = specialMdc.GetFieldId2(WfiWordformTags.kClassId' "Occurrences"' false);  				int[] concordanceItems = m_specialSda.VecProp(m_srcwfiWordform.Hvo' fakeFlid);  				// (Re)set selected state in cache' so default behavior of checked is used.  				foreach (var concId in concordanceItems)  				{  					m_specialSda.SetInt(concId' m_sourceSentences.BrowseViewer.PreviewEnabledTag' 1);  					m_specialSda.SetInt(concId' XMLViewsDataCache.ktagItemSelected' 1);  				}  				// We initially check everything.  				var segmentRepos = m_cache.ServiceLocator.GetInstance<ISegmentRepository>();  				foreach (var hvo in m_sourceSentences.BrowseViewer.AllItems)  					m_enabledItems.Add(hvo);    				// no good...code in MakeRoot of XmlBrowseView happens later and overrides. Control with  				// selectionType attr in Xml configuration.  				//m_sourceSentences.BrowseViewer.SelectedRowHighlighting = XmlBrowseViewBase.SelectionHighlighting.none;    				m_lblExplainText = m_lblExplainDisabled.Text;  				// We only reload the list when refresh is pressed.  				m_srcClerk.ListLoadingSuppressed = true;  				CheckForOtherOccurrences();  				SetEnabledState();  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,SetDlgInfoPrivate,The following statement contains a magic number: using (new WaitCursor(this))  			{  				m_mediator = mediator;  				m_propertyTable = propertyTable;    				m_btnRefresh.Image = ResourceHelper.RefreshIcon;    				m_rbDiscardAnalyses.Checked = m_propertyTable.GetBoolProperty("RemoveAnalyses"' true);  				m_rbKeepAnalyses.Checked = !m_rbDiscardAnalyses.Checked;  				m_rbDiscardAnalyses.Click += m_rbDiscardAnalyses_Click;  				m_rbKeepAnalyses.Click += m_rbDiscardAnalyses_Click;    				m_cbUpdateLexicon.Checked = m_propertyTable.GetBoolProperty("UpdateLexiconIfPossible"' true);  				m_cbCopyAnalyses.Checked = m_propertyTable.GetBoolProperty("CopyAnalysesToNewSpelling"' true);  				m_cbCopyAnalyses.Click += m_cbCopyAnalyses_Click;  				m_cbMaintainCase.Checked = m_propertyTable.GetBoolProperty("MaintainCaseOnChangeSpelling"' true);  				m_cbMaintainCase.Click += m_cbMaintainCase_Click;  				m_cache = m_propertyTable.GetValue<LcmCache>("cache");    				// We need to use the 'best vern' ws'  				// since that is what is showing in the Words-Analyses detail edit control.  				// Access to this respeller dlg is currently (Jan. 2008) only via a context menu in the detail edit pane.  				// The user may be showing multiple wordform WSes in the left hand browse view'  				// but we have no way of knowing if the user thinks one of those alternatives is wrong without asking.  				m_vernWs = WritingSystemServices.ActualWs(m_cache'  					WritingSystemServices.kwsFirstVern'  					m_srcwfiWordform.Hvo'  					WfiWordformTags.kflidForm);  				// Bail out if no vernacular writing system was found (see LT-8892).  				Debug.Assert(m_vernWs != 0);  				if (m_vernWs == 0)  					return false;  				// Bail out' rather than run into a null reference exception.  				// (Should fix LT-7666.)  				var vernForm = m_srcwfiWordform.Form.get_String(m_vernWs);  				if (vernForm == null || vernForm.Length == 0)  					return false;    				m_cbNewSpelling.WritingSystemFactory = m_cache.LanguageWritingSystemFactoryAccessor;  				m_cbNewSpelling.WritingSystemCode = m_vernWs;  				m_cbNewSpelling.StyleSheet = FontHeightAdjuster.StyleSheetFromPropertyTable(m_propertyTable);  				Debug.Assert(m_cbNewSpelling.StyleSheet != null); // if it is we get a HUGE default font (and can't get the correct size)  				if (m_cbNewSpelling.WritingSystemFactory.get_EngineOrNull(m_vernWs).RightToLeftScript)  				{  					m_cbNewSpelling.RightToLeft = RightToLeft.Yes;  				}  				m_cbNewSpelling.Tss = vernForm;  				m_cbNewSpelling.AdjustForStyleSheet(this' null' m_cbNewSpelling.StyleSheet);  				if (!Application.RenderWithVisualStyles)  					m_cbNewSpelling.Padding = new Padding(1' 2' 1' 1);    				SetSuggestions();    				m_btnApply.Enabled = false;  				m_cbNewSpelling.TextChanged += m_dstWordform_TextChanged;    				// Setup source browse view.  				var toolNode = configurationParameters.SelectSingleNode("controls/control[@id='srcSentences']/parameters");  				m_srcClerk = RecordClerkFactory.CreateClerk(m_mediator' m_propertyTable' toolNode' true);  				m_srcClerk.OwningObject = m_srcwfiWordform;  				m_sourceSentences.Init(m_mediator' m_propertyTable' toolNode);  				m_sourceSentences.CheckBoxChanged += sentences_CheckBoxChanged;  				m_specialSda = m_sourceSentences.BrowseViewer.SpecialCache;  				m_moreMinSize = Size;  				m_moreMinSize.Height -= m_sourceSentences.Height / 2;  				m_lessMinSize = m_moreMinSize;  				m_lessMinSize.Height -= m_optionsPanel.Height;  				AdjustHeightAndMinSize(Height - m_optionsPanel.Height' m_lessMinSize);  				m_optionsPanel.Visible = false;  				m_btnMore.Image = ResourceHelper.MoreButtonDoubleArrowIcon;  				m_btnMore.Click += btnMore_Click;  				m_sMoreButtonText = m_btnMore.Text;  				m_optionsPanel.Paint += m_optionsPanel_Paint;  				m_btnPreviewClear.Click += m_btnPreviewClear_Click;    				var specialMdc = m_specialSda.MetaDataCache;  				int fakeFlid = specialMdc.GetFieldId2(WfiWordformTags.kClassId' "Occurrences"' false);  				int[] concordanceItems = m_specialSda.VecProp(m_srcwfiWordform.Hvo' fakeFlid);  				// (Re)set selected state in cache' so default behavior of checked is used.  				foreach (var concId in concordanceItems)  				{  					m_specialSda.SetInt(concId' m_sourceSentences.BrowseViewer.PreviewEnabledTag' 1);  					m_specialSda.SetInt(concId' XMLViewsDataCache.ktagItemSelected' 1);  				}  				// We initially check everything.  				var segmentRepos = m_cache.ServiceLocator.GetInstance<ISegmentRepository>();  				foreach (var hvo in m_sourceSentences.BrowseViewer.AllItems)  					m_enabledItems.Add(hvo);    				// no good...code in MakeRoot of XmlBrowseView happens later and overrides. Control with  				// selectionType attr in Xml configuration.  				//m_sourceSentences.BrowseViewer.SelectedRowHighlighting = XmlBrowseViewBase.SelectionHighlighting.none;    				m_lblExplainText = m_lblExplainDisabled.Text;  				// We only reload the list when refresh is pressed.  				m_srcClerk.ListLoadingSuppressed = true;  				CheckForOtherOccurrences();  				SetEnabledState();  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,m_optionsPanel_Paint,The following statement contains a magic number: var dxMargin = 10;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,m_optionsPanel_Paint,The following statement contains a magic number: LineDrawing.Draw(e.Graphics' left'  				(m_optionsLabel.Top + m_optionsLabel.Bottom) / 2'  				m_optionsPanel.Right - left - dxMargin' LineTypes.Etched);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbUpdateLexicon.Location = new System.Drawing.Point(18' 41);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbUpdateLexicon.Location = new System.Drawing.Point(18' 41);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbUpdateLexicon.Size = new System.Drawing.Size(266' 17);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbUpdateLexicon.Size = new System.Drawing.Size(266' 17);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_sourceSentences.Location = new System.Drawing.Point(8' 7);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_sourceSentences.Location = new System.Drawing.Point(8' 7);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_sourceSentences.Size = new System.Drawing.Size(600' 208);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_sourceSentences.Size = new System.Drawing.Size(600' 208);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_sourceSentences.TabIndex = 10;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnClose.Location = new System.Drawing.Point(451' 272);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnClose.Location = new System.Drawing.Point(451' 272);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnClose.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnClose.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnClose.TabIndex = 7;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(7' 239);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(7' 239);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(72' 13);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(72' 13);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnPreviewClear.Location = new System.Drawing.Point(275' 272);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnPreviewClear.Location = new System.Drawing.Point(275' 272);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnPreviewClear.Size = new System.Drawing.Size(55' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnPreviewClear.Size = new System.Drawing.Size(55' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnPreviewClear.TabIndex = 4;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnHelp.Location = new System.Drawing.Point(532' 272);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnHelp.Location = new System.Drawing.Point(532' 272);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnHelp.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnHelp.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnHelp.TabIndex = 8;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnApply.Location = new System.Drawing.Point(336' 272);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnApply.Location = new System.Drawing.Point(336' 272);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnApply.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnApply.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnApply.TabIndex = 5;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_rbKeepAnalyses.Location = new System.Drawing.Point(18' 64);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_rbKeepAnalyses.Location = new System.Drawing.Point(18' 64);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_rbKeepAnalyses.Size = new System.Drawing.Size(172' 17);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_rbKeepAnalyses.Size = new System.Drawing.Size(172' 17);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_rbDiscardAnalyses.Location = new System.Drawing.Point(18' 87);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_rbDiscardAnalyses.Location = new System.Drawing.Point(18' 87);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_rbDiscardAnalyses.Size = new System.Drawing.Size(178' 17);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_rbDiscardAnalyses.Size = new System.Drawing.Size(178' 17);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_rbDiscardAnalyses.TabIndex = 2;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnMore.Location = new System.Drawing.Point(7' 272);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnMore.Location = new System.Drawing.Point(7' 272);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnMore.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnMore.Size = new System.Drawing.Size(75' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnMore.TabIndex = 3;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbNewSpelling.DropDownWidth = 124;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbNewSpelling.Location = new System.Drawing.Point(95' 234);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbNewSpelling.Location = new System.Drawing.Point(95' 234);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbNewSpelling.Size = new System.Drawing.Size(200' 25);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbNewSpelling.Size = new System.Drawing.Size(200' 25);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbMaintainCase.Location = new System.Drawing.Point(335' 238);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbMaintainCase.Location = new System.Drawing.Point(335' 238);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbMaintainCase.Size = new System.Drawing.Size(239' 17);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbMaintainCase.Size = new System.Drawing.Size(239' 17);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbMaintainCase.TabIndex = 2;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnRefresh.Location = new System.Drawing.Point(417' 272);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnRefresh.Location = new System.Drawing.Point(417' 272);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnRefresh.Size = new System.Drawing.Size(28' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnRefresh.Size = new System.Drawing.Size(28' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_btnRefresh.TabIndex = 6;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_optionsPanel.Location = new System.Drawing.Point(-3' 313);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_optionsPanel.Location = new System.Drawing.Point(-3' 313);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_optionsPanel.Size = new System.Drawing.Size(624' 113);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_optionsPanel.Size = new System.Drawing.Size(624' 113);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_optionsPanel.TabIndex = 9;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_lblExplainDisabled.Location = new System.Drawing.Point(67' 14);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_lblExplainDisabled.Location = new System.Drawing.Point(67' 14);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_lblExplainDisabled.Size = new System.Drawing.Size(450' 13);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_lblExplainDisabled.Size = new System.Drawing.Size(450' 13);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_lblExplainDisabled.TabIndex = 4;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbCopyAnalyses.Location = new System.Drawing.Point(302' 64);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbCopyAnalyses.Location = new System.Drawing.Point(302' 64);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbCopyAnalyses.Size = new System.Drawing.Size(253' 17);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbCopyAnalyses.Size = new System.Drawing.Size(253' 17);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_cbCopyAnalyses.TabIndex = 3;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_optionsLabel.Location = new System.Drawing.Point(8' 14);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_optionsLabel.Location = new System.Drawing.Point(8' 14);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_optionsLabel.Size = new System.Drawing.Size(43' 13);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.m_optionsLabel.Size = new System.Drawing.Size(43' 13);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(619' 426);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellerDlg,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(619' 426);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellUndoAction,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,DoIt,The following statement contains a magic number: if (m_changedParas.Count < 10)  			{  				CoreDoIt(null' mediator);  			}  			else  			{  				using (var dlg = new ProgressDialogWorkingOn())  				{  					dlg.Owner = Form.ActiveForm;  					dlg.Icon = dlg.Owner.Icon;  					dlg.Minimum = 0;  					// 2x accounts for two main loops; extra 10 very roughly accounts for final cleanup.  					dlg.Maximum = m_changedParas.Count * 2 + 10;  					dlg.Text = MEStrings.ksChangingSpelling;  					dlg.WorkingOnText = MEStrings.ksChangingSpelling;  					dlg.ProgressLabel = MEStrings.ksProgress;  					dlg.Show();  					dlg.BringToFront();  					CoreDoIt(dlg' mediator);  					dlg.Close();  				}  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellUndoAction,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,DoIt,The following statement contains a magic number: if (m_changedParas.Count < 10)  			{  				CoreDoIt(null' mediator);  			}  			else  			{  				using (var dlg = new ProgressDialogWorkingOn())  				{  					dlg.Owner = Form.ActiveForm;  					dlg.Icon = dlg.Owner.Icon;  					dlg.Minimum = 0;  					// 2x accounts for two main loops; extra 10 very roughly accounts for final cleanup.  					dlg.Maximum = m_changedParas.Count * 2 + 10;  					dlg.Text = MEStrings.ksChangingSpelling;  					dlg.WorkingOnText = MEStrings.ksChangingSpelling;  					dlg.ProgressLabel = MEStrings.ksProgress;  					dlg.Show();  					dlg.BringToFront();  					CoreDoIt(dlg' mediator);  					dlg.Close();  				}  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellUndoAction,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,DoIt,The following statement contains a magic number: if (m_changedParas.Count < 10)  			{  				CoreDoIt(null' mediator);  			}  			else  			{  				using (var dlg = new ProgressDialogWorkingOn())  				{  					dlg.Owner = Form.ActiveForm;  					dlg.Icon = dlg.Owner.Icon;  					dlg.Minimum = 0;  					// 2x accounts for two main loops; extra 10 very roughly accounts for final cleanup.  					dlg.Maximum = m_changedParas.Count * 2 + 10;  					dlg.Text = MEStrings.ksChangingSpelling;  					dlg.WorkingOnText = MEStrings.ksChangingSpelling;  					dlg.ProgressLabel = MEStrings.ksProgress;  					dlg.Show();  					dlg.BringToFront();  					CoreDoIt(dlg' mediator);  					dlg.Close();  				}  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingSda,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,AddAdditionalOccurrences,The following statement contains a magic number: foreach (var text in InterestingTexts)  			{  				done++;  				foreach (IStTxtPara para in text.ParagraphsOS)  				{  					if (!(para is IScrTxtPara))  						continue; // currently only these have embedded pictures.  					var contents = para.Contents;  					var crun = contents.RunCount;  					for (var irun = 0; irun < crun; irun++)  					{  						// See if the run is a picture ORC  						TsRunInfo tri;  						FwObjDataTypes odt;  						ITsTextProps props;  						Guid guid = TsStringUtils.GetGuidFromRun(contents' irun' out odt' out tri' out props' desiredType.ToArray());  						if (guid == Guid.Empty)  							continue;  						// See if its caption contains our wordform  						var obj = cmObjRepos.GetObject(guid);  						var clsid = obj.ClassID;  						if (clsid != CmPictureTags.kClassId)  							continue; // bizarre' just for defensiveness.  						var picture = (ICmPicture) obj;  						var caption = picture.Caption.get_String(Cache.DefaultVernWs);  						var wordMaker = new WordMaker(caption' Cache.ServiceLocator.WritingSystemManager);  						for (; ; )  						{  							int ichMin;  							int ichLim;  							var tssTxtWord = wordMaker.NextWord(out ichMin' out ichLim);  							if (tssTxtWord == null)  								break;  							if (tssTxtWord.Text != wordform)  								continue;  							// Make a fake occurrence.  							int hvoFake = nextId--;  							valuesList.Add(hvoFake);  							var occurrence = new CaptionParaFragment();  							occurrence.SetMyBeginOffsetInPara(ichMin);  							occurrence.SetMyEndOffsetInPara(ichLim);  							occurrence.ContainingParaOffset = tri.ichMin;  							occurrence.Paragraph = para;  							occurrence.Picture = picture;  							occurrences[hvoFake] = occurrence;  						}  					}  				}  				if (state != null)  				{  					state.PercentDone = 50 + 50*done/total;  					state.Breath();  				}  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingSda,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,AddAdditionalOccurrences,The following statement contains a magic number: foreach (var text in InterestingTexts)  			{  				done++;  				foreach (IStTxtPara para in text.ParagraphsOS)  				{  					if (!(para is IScrTxtPara))  						continue; // currently only these have embedded pictures.  					var contents = para.Contents;  					var crun = contents.RunCount;  					for (var irun = 0; irun < crun; irun++)  					{  						// See if the run is a picture ORC  						TsRunInfo tri;  						FwObjDataTypes odt;  						ITsTextProps props;  						Guid guid = TsStringUtils.GetGuidFromRun(contents' irun' out odt' out tri' out props' desiredType.ToArray());  						if (guid == Guid.Empty)  							continue;  						// See if its caption contains our wordform  						var obj = cmObjRepos.GetObject(guid);  						var clsid = obj.ClassID;  						if (clsid != CmPictureTags.kClassId)  							continue; // bizarre' just for defensiveness.  						var picture = (ICmPicture) obj;  						var caption = picture.Caption.get_String(Cache.DefaultVernWs);  						var wordMaker = new WordMaker(caption' Cache.ServiceLocator.WritingSystemManager);  						for (; ; )  						{  							int ichMin;  							int ichLim;  							var tssTxtWord = wordMaker.NextWord(out ichMin' out ichLim);  							if (tssTxtWord == null)  								break;  							if (tssTxtWord.Text != wordform)  								continue;  							// Make a fake occurrence.  							int hvoFake = nextId--;  							valuesList.Add(hvoFake);  							var occurrence = new CaptionParaFragment();  							occurrence.SetMyBeginOffsetInPara(ichMin);  							occurrence.SetMyEndOffsetInPara(ichLim);  							occurrence.ContainingParaOffset = tri.ichMin;  							occurrence.Paragraph = para;  							occurrence.Picture = picture;  							occurrences[hvoFake] = occurrence;  						}  					}  				}  				if (state != null)  				{  					state.PercentDone = 50 + 50*done/total;  					state.Breath();  				}  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,RemoveItemsRequested,The following statement contains a magic number: if (cellId != -1 && cellId != -2)  				// if the cell index is -1 that means that we removed the first item in this cell'  				// so we move the cursor to the beginning of the first item after the removed items'  				// instead of the end of the item before the removed items.  				ReconstructView(cellId' cellIndex' cellIndex == -1);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.m_panel.Location = new System.Drawing.Point(225' 0);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.m_panel.Size = new System.Drawing.Size(22' 20);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.m_panel.Size = new System.Drawing.Size(22' 20);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.m_btnLauncher.Size = new System.Drawing.Size(22' 20);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.m_btnLauncher.Size = new System.Drawing.Size(22' 20);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.m_view.Size = new System.Drawing.Size(226' 20);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.m_view.Size = new System.Drawing.Size(226' 20);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.m_view.TabIndex = 3;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.m_insertionControl.Location = new System.Drawing.Point(0' 20);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.m_insertionControl.Size = new System.Drawing.Size(247' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.m_insertionControl.Size = new System.Drawing.Size(247' 23);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.m_insertionControl.TabIndex = 2;
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(247' 43);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(247' 43);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,DisplayIterCtxt,The following statement contains a magic number: if (numLines == 1)  			{  				// if the inner context is a single line' then make the min value a subscript and the max value a superscript.  				// I tried to use the Views subscript and superscript properties' but they added extra space so that it would  				// have the same line height of a normal character' which is not what I wanted' so I compute the size myself  				int fontHeight = GetFontHeight(m_cache.DefaultUserWs);  				int superSubHeight = (fontHeight * 2) / 3;  				vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint' superSubHeight);  				vwenv.set_IntProperty((int)FwTextPropType.ktptLineHeight' (int)FwTextPropVar.ktpvMilliPoint' -superSubHeight);  				superOffset = superSubHeight / 2;  			}  			else  			{  				vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,DisplayIterCtxt,The following statement contains a magic number: if (numLines == 1)  			{  				// if the inner context is a single line' then make the min value a subscript and the max value a superscript.  				// I tried to use the Views subscript and superscript properties' but they added extra space so that it would  				// have the same line height of a normal character' which is not what I wanted' so I compute the size myself  				int fontHeight = GetFontHeight(m_cache.DefaultUserWs);  				int superSubHeight = (fontHeight * 2) / 3;  				vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint' superSubHeight);  				vwenv.set_IntProperty((int)FwTextPropType.ktptLineHeight' (int)FwTextPropVar.ktpvMilliPoint' -superSubHeight);  				superOffset = superSubHeight / 2;  			}  			else  			{  				vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,DisplayIterCtxt,The following statement contains a magic number: if (numLines == 1)  			{  				// if the inner context is a single line' then make the min value a subscript and the max value a superscript.  				// I tried to use the Views subscript and superscript properties' but they added extra space so that it would  				// have the same line height of a normal character' which is not what I wanted' so I compute the size myself  				int fontHeight = GetFontHeight(m_cache.DefaultUserWs);  				int superSubHeight = (fontHeight * 2) / 3;  				vwenv.set_IntProperty((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint' superSubHeight);  				vwenv.set_IntProperty((int)FwTextPropType.ktptLineHeight' (int)FwTextPropVar.ktpvMilliPoint' -superSubHeight);  				superOffset = superSubHeight / 2;  			}  			else  			{  				vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,DisplayIterCtxt,The following statement contains a magic number: AddExtraLines(numLines - 2' vwenv);
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,GetWidth,The following statement contains a magic number: switch (ctxtOrVar.ClassID)  			{  				case PhSequenceContextTags.kClassId:  					var seqCtxt = (IPhSequenceContext) ctxtOrVar;  					int totalLen = 0;  					foreach (IPhPhonContext cur in seqCtxt.MembersRS)  						totalLen += GetWidth(cur' vwenv);  					return totalLen;    				case PhIterationContextTags.kClassId:  					return GetIterCtxtWidth(ctxtOrVar as IPhIterationContext' vwenv) + (PileMargin * 2);    				case PhVariableTags.kClassId:  					return GetStrWidth(m_x' null' vwenv) + (PileMargin * 2);    				default:  					return GetSimpleCtxtWidth(ctxtOrVar as IPhSimpleContext' vwenv) + (PileMargin * 2);  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,GetWidth,The following statement contains a magic number: switch (ctxtOrVar.ClassID)  			{  				case PhSequenceContextTags.kClassId:  					var seqCtxt = (IPhSequenceContext) ctxtOrVar;  					int totalLen = 0;  					foreach (IPhPhonContext cur in seqCtxt.MembersRS)  						totalLen += GetWidth(cur' vwenv);  					return totalLen;    				case PhIterationContextTags.kClassId:  					return GetIterCtxtWidth(ctxtOrVar as IPhIterationContext' vwenv) + (PileMargin * 2);    				case PhVariableTags.kClassId:  					return GetStrWidth(m_x' null' vwenv) + (PileMargin * 2);    				default:  					return GetSimpleCtxtWidth(ctxtOrVar as IPhSimpleContext' vwenv) + (PileMargin * 2);  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,GetWidth,The following statement contains a magic number: switch (ctxtOrVar.ClassID)  			{  				case PhSequenceContextTags.kClassId:  					var seqCtxt = (IPhSequenceContext) ctxtOrVar;  					int totalLen = 0;  					foreach (IPhPhonContext cur in seqCtxt.MembersRS)  						totalLen += GetWidth(cur' vwenv);  					return totalLen;    				case PhIterationContextTags.kClassId:  					return GetIterCtxtWidth(ctxtOrVar as IPhIterationContext' vwenv) + (PileMargin * 2);    				case PhVariableTags.kClassId:  					return GetStrWidth(m_x' null' vwenv) + (PileMargin * 2);    				default:  					return GetSimpleCtxtWidth(ctxtOrVar as IPhSimpleContext' vwenv) + (PileMargin * 2);  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,GetIterCtxtWidth,The following statement contains a magic number: if (ctxt.MemberRA != null)  			{  				int len = GetSimpleCtxtWidth(ctxt.MemberRA as IPhSimpleContext' vwenv);  				int numLines = GetNumLines(ctxt.MemberRA);  				if (numLines > 1)  				{  					len += GetMinMaxWidth(ctxt' null' vwenv);  				}  				else  				{  					if (ctxt.MemberRA.ClassID != PhSimpleContextNCTags.kClassId)  					{  						len += GetStrWidth(m_leftParen' null' vwenv);  						len += GetStrWidth(m_rightParen' null' vwenv);  					}  					int fontHeight = GetFontHeight(m_cache.DefaultUserWs);  					int superSubHeight = (fontHeight * 2) / 3;  					ITsPropsBldr tpb = TsStringUtils.MakePropsBldr();  					tpb.SetIntPropValues((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint' superSubHeight);  					len += GetMinMaxWidth(ctxt' tpb.GetTextProps()' vwenv);  				}  				return len;  			}
Magic Number,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,GetIterCtxtWidth,The following statement contains a magic number: if (ctxt.MemberRA != null)  			{  				int len = GetSimpleCtxtWidth(ctxt.MemberRA as IPhSimpleContext' vwenv);  				int numLines = GetNumLines(ctxt.MemberRA);  				if (numLines > 1)  				{  					len += GetMinMaxWidth(ctxt' null' vwenv);  				}  				else  				{  					if (ctxt.MemberRA.ClassID != PhSimpleContextNCTags.kClassId)  					{  						len += GetStrWidth(m_leftParen' null' vwenv);  						len += GetStrWidth(m_rightParen' null' vwenv);  					}  					int fontHeight = GetFontHeight(m_cache.DefaultUserWs);  					int superSubHeight = (fontHeight * 2) / 3;  					ITsPropsBldr tpb = TsStringUtils.MakePropsBldr();  					tpb.SetIntPropValues((int)FwTextPropType.ktptFontSize' (int)FwTextPropVar.ktpvMilliPoint' superSubHeight);  					len += GetMinMaxWidth(ctxt' tpb.GetTextProps()' vwenv);  				}  				return len;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaControl.cs,UpdateMappings,The following switch statement is missing a default case: switch (mapping.ClassID)  				{  					case MoCopyFromInputTags.kClassId:  						var copy = (IMoCopyFromInput) mapping;  						if (copy.ContentRA == oldCtxtOrVar)  							copy.ContentRA = newCtxtOrVar;  						break;    					case MoModifyFromInputTags.kClassId:  						var modify = (IMoModifyFromInput) mapping;  						if (modify.ContentRA == oldCtxtOrVar)  							modify.ContentRA = newCtxtOrVar;  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaControl.cs,SetMappingFeatures,The following switch statement is missing a default case: switch (obj.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							featChooser.SetDlgInfo(m_cache' m_mediator' m_propertyTable);  							if (featChooser.ShowDialog() == DialogResult.OK)  							{  								// create a new natural class behind the scenes  								var featNC = m_cache.ServiceLocator.GetInstance<IPhNCFeaturesFactory>().Create();  								m_cache.LangProject.PhonologicalDataOA.NaturalClassesOS.Add(featNC);  								featNC.Name.SetUserWritingSystem(string.Format(MEStrings.ksRuleNCFeatsName'  									Rule.Form.BestVernacularAnalysisAlternative.Text));  								featNC.FeaturesOA = m_cache.ServiceLocator.GetInstance<IFsFeatStrucFactory>().Create();  								featChooser.FS = featNC.FeaturesOA;  								featChooser.UpdateFeatureStructure();    								var copy = (IMoCopyFromInput) obj;  								var newModify = m_cache.ServiceLocator.GetInstance<IMoModifyFromInputFactory>().Create();  								Rule.OutputOS.Insert(copy.IndexInOwner' newModify);  								newModify.ModificationRA = featNC;  								newModify.ContentRA = copy.ContentRA;  								index = newModify.IndexInOwner;    								Rule.OutputOS.Remove(copy);  								reconstruct = true;  							}  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) obj;  							featChooser.SetDlgInfo(m_cache' m_mediator' m_propertyTable' modify.ModificationRA.FeaturesOA);  							if (featChooser.ShowDialog() == DialogResult.OK)  							{  								if (modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count == 0)  								{  									var newCopy = m_cache.ServiceLocator.GetInstance<IMoCopyFromInputFactory>().Create();  									Rule.OutputOS.Insert(modify.IndexInOwner' newCopy);  									newCopy.ContentRA = modify.ContentRA;  									index = newCopy.IndexInOwner;    									Rule.OutputOS.Remove(modify);  								}  								else  								{  									index = modify.IndexInOwner;  								}  								reconstruct = true;  							}  							break;  					}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaControl.cs,SetMappingNaturalClass,The following switch statement is missing a default case: switch (curObj.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) curObj;  							var newModify = m_cache.ServiceLocator.GetInstance<IMoModifyFromInputFactory>().Create();  							Rule.OutputOS.Insert(copy.IndexInOwner' newModify);  							newModify.ModificationRA = selectedNc;  							newModify.ContentRA = copy.ContentRA;  							index = newModify.IndexInOwner;    							Rule.OutputOS.Remove(copy);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) curObj;  							modify.ModificationRA = selectedNc;  							index = modify.IndexInOwner;  							break;  					}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,AffixRuleFormulaVc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\AffixRuleFormulaVc.cs,Display,The following switch statement is missing a default case: switch (mapping.ClassID)  					{  						case MoCopyFromInputTags.kClassId:  							var copy = (IMoCopyFromInput) mapping;  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							if (copy.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' copy.ContentRA.IndexInOwner + 1);  							CloseSingleLinePile(vwenv);  							break;    						case MoInsertPhonesTags.kClassId:  							OpenSingleLinePile(vwenv' GetOutputMaxNumLines());  							vwenv.AddObjVecItems(MoInsertPhonesTags.kflidContent' this' kfragTerminalUnit);  							CloseSingleLinePile(vwenv);  							break;    						case MoModifyFromInputTags.kClassId:  							var modify = (IMoModifyFromInput) mapping;  							int outputMaxNumLines = GetOutputMaxNumLines();  							int numLines = modify.ModificationRA.FeaturesOA.FeatureSpecsOC.Count;    							// index pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - 1' vwenv);  							vwenv.OpenParagraph();  							vwenv.Props = m_bracketProps;  							vwenv.AddProp(ktagLeftBoundary' this' kfragZeroWidthSpace);  							if (modify.ContentRA == null)  								vwenv.AddProp(ktagIndex' this' 0);  							else  								vwenv.AddProp(ktagIndex' this' modify.ContentRA.IndexInOwner + 1);  							vwenv.CloseParagraph();  							vwenv.CloseInnerPile();    							// left bracket pile  							// right align brackets in left bracket pile' since the index could have a greater width' then the bracket  							if (numLines == 1)  							{  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.OpenInnerPile();  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalRight);  								vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketLowHook);  								vwenv.CloseInnerPile();  							}    							// feature pile  							vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  							vwenv.OpenInnerPile();  							AddExtraLines(outputMaxNumLines - numLines' vwenv);  							if (numLines == 0)  								vwenv.AddProp(MoModifyFromInputTags.kflidModification' this' kfragQuestions);  							else  								vwenv.AddObjProp(MoModifyFromInputTags.kflidModification' this' kfragFeatNC);  							vwenv.CloseInnerPile();    							// right bracket pile  							if (numLines == 1)  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								AddExtraLines(outputMaxNumLines - 1' vwenv);  								vwenv.OpenInnerPile();  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracket);  								vwenv.CloseInnerPile();  							}  							else  							{  								vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  								vwenv.OpenInnerPile();  								AddExtraLines(outputMaxNumLines - numLines' vwenv);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  								for (int i = 1; i < numLines - 1; i++)  								{  									vwenv.Props = m_bracketProps;  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  								}  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  								vwenv.CloseInnerPile();  							}  							break;  					}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,MasterCatDlgListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MasterCatDlgListener.cs,OnDialogInsertItemInVector,The following switch statement is missing a default case: switch (dlg.ShowDialog(m_propertyTable.GetValue<Form>("window")))  				{  					case DialogResult.OK: // Fall through.  					case DialogResult.Yes:  						// This is the equivalent functionality' but is deferred processing.  						// This is done so that the JumpToRecord can be processed last.  						m_mediator.BroadcastMessageUntilHandled("JumpToRecord"' dlg.SelectedPOS.Hvo);  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,MasterInflFeatDlgListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MasterInflFeatDlgListener.cs,OnDialogInsertItemInVector,The following switch statement is missing a default case: switch (dlg.ShowDialog(m_propertyTable.GetValue<Form>("window")))  				{  					case DialogResult.OK: // Fall through.  					case DialogResult.Yes:  						//m_mediator.SendMessage("JumpToRecord"' dlg.SelectedFeatDefn.Hvo);  						// This is the equivalent functionality' but is deferred processing.  						// This is done so that the JumpToRecord can be processed last.  						m_mediator.BroadcastMessageUntilHandled("JumpToRecord"' dlg.SelectedFeatDefn.Hvo);  						// LT-6412: this call will now cause the Mediator to be disposed while it is busy processing  						// this call' so there is code in the Mediator to handle in the middle of a msg the case  						// where the object is nolonger valid.  This has happend before and was being handled' this  						// call "SendMessageToAllNow" has not had the code to handle the exception' so it was added.  						m_mediator.SendMessageToAllNow("MasterRefresh"' cache.LangProject.MsFeatureSystemOA);  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,MasterPhonFeatDlgListener,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MasterPhonFeatDlgListener.cs,OnDialogInsertItemInVector,The following switch statement is missing a default case: switch (dlg.ShowDialog(m_propertyTable.GetValue<Form>("window")))  				{  					case DialogResult.OK: // Fall through.  					case DialogResult.Yes:  						//m_mediator.SendMessage("JumpToRecord"' dlg.SelectedFeatDefn.Hvo);  						// This is the equivalent functionality' but is deferred processing.  						// This is done so that the JumpToRecord can be processed last.  						if (dlg.SelectedFeatDefn != null)  							m_mediator.BroadcastMessageUntilHandled("JumpToRecord"' dlg.SelectedFeatDefn.Hvo);  						// LT-6412: this call will now cause the Mediator to be disposed while it is busy processing  						// this call' so there is code in the Mediator to handle in the middle of a msg the case  						// where the object is nolonger valid.  This has happend before and was being handled' this  						// call "SendMessageToAllNow" has not had the code to handle the exception' so it was added.  						m_mediator.SendMessageToAllNow("MasterRefresh"' cache.LangProject.PhFeatureSystemOA);  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaControl.cs,DisplayNoOptsMsg,The following switch statement is missing a default case: switch (cellId)  			{  				case PhMetathesisRuleTags.kidxLeftSwitch:  				case PhMetathesisRuleTags.kidxRightSwitch:  					return MEStrings.ksMetaRuleNoOptsMsg;    				case PhMetathesisRuleTags.kidxLeftEnv:  				case PhMetathesisRuleTags.kidxRightEnv:  					return MEStrings.ksRuleWordBdryNoOptsMsg;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaControl.cs,GetNextCell,The following switch statement is missing a default case: switch (cellId)  			{  				case PhMetathesisRuleTags.kidxLeftEnv:  					return PhMetathesisRuleTags.kidxLeftSwitch;  				case PhMetathesisRuleTags.kidxLeftSwitch:  					return PhMetathesisRuleTags.kidxRightSwitch;  				case PhMetathesisRuleTags.kidxRightSwitch:  					return PhMetathesisRuleTags.kidxRightEnv;  				case PhMetathesisRuleTags.kidxRightEnv:  					return -1;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaControl.cs,GetPrevCell,The following switch statement is missing a default case: switch (cellId)  			{  				case PhMetathesisRuleTags.kidxLeftEnv:  					return -1;  				case PhMetathesisRuleTags.kidxLeftSwitch:  					return PhMetathesisRuleTags.kidxLeftEnv;  				case PhMetathesisRuleTags.kidxRightSwitch:  					return PhMetathesisRuleTags.kidxLeftSwitch;  				case PhMetathesisRuleTags.kidxRightEnv:  					return PhMetathesisRuleTags.kidxRightSwitch;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaControl.cs,GetCell,The following switch statement is missing a default case: switch (tag)  			{  				case MetaRuleFormulaVc.ktagLeftEnv:  					return PhMetathesisRuleTags.kidxLeftEnv;  				case MetaRuleFormulaVc.ktagLeftSwitch:  					return PhMetathesisRuleTags.kidxLeftSwitch;  				case MetaRuleFormulaVc.ktagRightSwitch:  					return PhMetathesisRuleTags.kidxRightSwitch;  				case MetaRuleFormulaVc.ktagRightEnv:  					return PhMetathesisRuleTags.kidxRightEnv;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaControl.cs,ConvertToCellIndex,The following switch statement is missing a default case: switch (cellId)  			{  				case PhMetathesisRuleTags.kidxLeftEnv:  					if (Rule.LeftEnvIndex == -1)  						index = -1;  					break;  				case PhMetathesisRuleTags.kidxLeftSwitch:  					if (Rule.LeftSwitchIndex == -1)  						index = -1;  					else  						index -= Rule.LeftSwitchIndex;  					break;  				case PhMetathesisRuleTags.kidxRightSwitch:  					if (Rule.RightSwitchIndex == -1)  						index = -1;  					else if (Rule.MiddleIndex != -1 && !Rule.IsMiddleWithLeftSwitch)  						index -= Rule.MiddleIndex;  					else  						index -= Rule.RightSwitchIndex;  					break;  				case PhMetathesisRuleTags.kidxRightEnv:  					if (Rule.RightEnvIndex == -1)  						index = -1;  					else  						index -= Rule.RightEnvIndex;  					break;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaControl.cs,GetLevelInfo,The following switch statement is missing a default case: switch (cellId)  				{  					case PhMetathesisRuleTags.kidxLeftSwitch:  						cellIndex += Rule.LeftSwitchIndex;  						break;  					case PhMetathesisRuleTags.kidxRightSwitch:  						if (Rule.MiddleIndex != -1 && !Rule.IsMiddleWithLeftSwitch)  							cellIndex += Rule.MiddleIndex;  						else  							cellIndex += Rule.RightSwitchIndex;  						break;  					case PhMetathesisRuleTags.kidxRightEnv:  						cellIndex += Rule.RightEnvIndex;  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaControl.cs,GetCellCount,The following switch statement is missing a default case: switch (cellId)  			{  				case PhMetathesisRuleTags.kidxLeftEnv:  					if (Rule.LeftEnvIndex == -1)  						return 0;  					return Rule.LeftEnvLimit;    				case PhMetathesisRuleTags.kidxLeftSwitch:  					if (Rule.LeftSwitchIndex == -1)  					{  						return 0;  					}  					int leftMidCount = 0;  					if (Rule.MiddleIndex != -1 && Rule.IsMiddleWithLeftSwitch)  					{  						leftMidCount = Rule.MiddleLimit - Rule.MiddleIndex;  					}  					return (Rule.LeftSwitchLimit - Rule.LeftSwitchIndex) + leftMidCount;    				case PhMetathesisRuleTags.kidxRightSwitch:  					if (Rule.RightSwitchIndex == -1)  					{  						return 0;  					}  					int rightMidCount = 0;  					if (Rule.MiddleIndex != -1 && !Rule.IsMiddleWithLeftSwitch)  					{  						rightMidCount = Rule.MiddleLimit - Rule.MiddleIndex;  					}  					return (Rule.RightSwitchLimit - Rule.RightSwitchIndex) + rightMidCount;    				case PhMetathesisRuleTags.kidxRightEnv:  					if (Rule.RightEnvIndex == -1)  						return 0;  					return Rule.RightEnvLimit - Rule.RightEnvIndex;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaControl.cs,GetFlid,The following switch statement is missing a default case: switch (cellId)  			{  				case PhMetathesisRuleTags.kidxLeftEnv:  					return MetaRuleFormulaVc.ktagLeftEnv;  				case PhMetathesisRuleTags.kidxLeftSwitch:  					return MetaRuleFormulaVc.ktagLeftSwitch;  				case PhMetathesisRuleTags.kidxRightSwitch:  					return MetaRuleFormulaVc.ktagRightSwitch;  				case PhMetathesisRuleTags.kidxRightEnv:  					return MetaRuleFormulaVc.ktagRightEnv;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,MetaRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MetaRuleFormulaControl.cs,GetInsertionIndex,The following switch statement is missing a default case: switch (cellId)  				{  					case PhMetathesisRuleTags.kidxLeftEnv:  						return 0;    					case PhMetathesisRuleTags.kidxLeftSwitch:  						if (Rule.MiddleIndex != -1)  							return Rule.MiddleIndex;  						if (Rule.RightSwitchIndex != -1)  							return Rule.RightSwitchIndex;  						if (Rule.RightEnvIndex != -1)  							return Rule.RightEnvIndex;  						break;    					case PhMetathesisRuleTags.kidxRightSwitch:  						if (Rule.RightEnvIndex != -1)  							return Rule.RightEnvIndex;  						break;  				}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,WordsEditToolMenuHandler,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\MorphologyListener.cs,OnJumpToTool,The following switch statement is missing a default case: switch (className)  			{  				case "WfiAnalysis":  					var anal = Analysis;  					if (anal != null)  						guid = anal.Guid;  					break;  				case "WfiGloss":  					if (m_dataEntryForm != null && m_dataEntryForm.CurrentSlice != null &&  						CurrentSliceObject != null && CurrentSliceObject.ClassID == WfiGlossTags.kClassId)  					{  						guid = CurrentSliceObject.Guid;  					}  					break;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaControl.cs,AppendToEnv,The following switch statement is missing a default case: switch (flid)  			{  				case PhSegRuleRHSTags.kflidLeftContext:  					if (Rhs.LeftContextOA == null)  						Rhs.LeftContextOA = ctxt;  					else  						seqCtxt = CreateSeqCtxt(flid);  					break;    				case PhSegRuleRHSTags.kflidRightContext:  					if (Rhs.RightContextOA == null)  						Rhs.RightContextOA = ctxt;  					else  						seqCtxt = CreateSeqCtxt(flid);  					break;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaControl.cs,GetNextCell,The following switch statement is missing a default case: switch (cellId)  			{  				case PhSegmentRuleTags.kflidStrucDesc:  					return PhSegRuleRHSTags.kflidStrucChange;  				case PhSegRuleRHSTags.kflidStrucChange:  					return PhSegRuleRHSTags.kflidLeftContext;  				case PhSegRuleRHSTags.kflidLeftContext:  					return PhSegRuleRHSTags.kflidRightContext;  				case PhSegRuleRHSTags.kflidRightContext:  					return -1;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaControl.cs,GetPrevCell,The following switch statement is missing a default case: switch (cellId)  			{  				case PhSegmentRuleTags.kflidStrucDesc:  					return -1;  				case PhSegRuleRHSTags.kflidStrucChange:  					return PhSegmentRuleTags.kflidStrucDesc;  				case PhSegRuleRHSTags.kflidLeftContext:  					return PhSegRuleRHSTags.kflidStrucChange;  				case PhSegRuleRHSTags.kflidRightContext:  					return PhSegRuleRHSTags.kflidLeftContext;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaControl.cs,GetCellCount,The following switch statement is missing a default case: switch (cellId)  			{  				case PhSegmentRuleTags.kflidStrucDesc:  					return Rhs.OwningRule.StrucDescOS.Count;    				case PhSegRuleRHSTags.kflidStrucChange:  					return Rhs.StrucChangeOS.Count;    				case PhSegRuleRHSTags.kflidLeftContext:  				case PhSegRuleRHSTags.kflidRightContext:  					bool leftEnv = cellId == PhSegRuleRHSTags.kflidLeftContext;  					var ctxt = leftEnv ? Rhs.LeftContextOA : Rhs.RightContextOA;  					if (ctxt == null)  						return 0;  					if (ctxt.ClassID != PhSequenceContextTags.kClassId)  						return 1;  					return ((IPhSequenceContext) ctxt).MembersRS.Count;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaControl.cs,InsertContext,The following switch statement is missing a default case: switch (cellId)  			{  				case PhSegmentRuleTags.kflidStrucDesc:  					cellIndex = InsertContextInto(ctxt' sel' Rhs.OwningRule.StrucDescOS);  					break;    				case PhSegRuleRHSTags.kflidStrucChange:  					cellIndex = InsertContextInto(ctxt' sel' Rhs.StrucChangeOS);  					break;    				case PhSegRuleRHSTags.kflidLeftContext:  					if (Rhs.LeftContextOA == null)  						Rhs.LeftContextOA = ctxt;  					else  						cellIndex = InsertContextInto(ctxt' sel' CreateSeqCtxt(cellId));  					break;    				case PhSegRuleRHSTags.kflidRightContext:  					if (Rhs.RightContextOA == null)  						Rhs.RightContextOA = ctxt;  					else  						cellIndex = InsertContextInto(ctxt' sel' CreateSeqCtxt(cellId));  					break;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RegRuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RegRuleFormulaControl.cs,RemoveItems,The following switch statement is missing a default case: switch (cellId)  			{  				case PhSegmentRuleTags.kflidStrucDesc:  					if (!RemoveContextsFrom(forward' sel' Rhs.OwningRule.StrucDescOS' true' out cellIndex))  						cellId = -1;  					break;    				case PhSegRuleRHSTags.kflidStrucChange:  					if (Rhs.StrucChangeOS == null)  					{  						cellId = -1;  						break;  					}  					if (!RemoveContextsFrom(forward' sel' Rhs.StrucChangeOS' true' out cellIndex))  						cellId = -1;  					break;    				case PhSegRuleRHSTags.kflidLeftContext:  					if (Rhs.LeftContextOA == null)  					{  						cellId = -1;  						break;  					}  					if (Rhs.LeftContextOA.ClassID == PhSequenceContextTags.kClassId)  					{  						var seqCtxt = Rhs.LeftContextOA as IPhSequenceContext;  						if (!RemoveContextsFrom(forward' sel' seqCtxt' true' out cellIndex))  							cellId = -1;  					}  					else  					{  						int idx = GetIndexToRemove(new ICmObject[] { Rhs.LeftContextOA }' sel' forward);  						if (idx > -1)  						{  							Rhs.LeftContextOA.PreRemovalSideEffects();  							Rhs.LeftContextOA = null;  						}  						else  						{  							cellId = -1;  						}  					}  					break;    				case PhSegRuleRHSTags.kflidRightContext:  					if (Rhs.RightContextOA == null)  					{  						cellId = -1;  						break;  					}  					if (Rhs.RightContextOA.ClassID == PhSequenceContextTags.kClassId)  					{  						var seqCtxt = Rhs.RightContextOA as IPhSequenceContext;  						if (!RemoveContextsFrom(forward' sel' seqCtxt' true' out cellIndex))  							cellId = -1;  					}  					else  					{  						int idx = GetIndexToRemove(new ICmObject[] { Rhs.RightContextOA }' sel' forward);  						if (idx > -1)  						{  							Rhs.RightContextOA.PreRemovalSideEffects();  							Rhs.RightContextOA = null;  						}  						else  						{  							cellId = -1;  						}  					}  					break;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingSda,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,get_IntProp,The following switch statement is missing a default case: switch (tag)  			{  				case kflidAdjustedBeginOffset:  					if (m_mapRespell.TryGetValue(hvo' out info))  						return info.AdjustedBeginOffset;  					else  						return 0;  				case kflidAdjustedEndOffset:  					if (m_mapRespell.TryGetValue(hvo' out info))  						return info.AdjustedEndOffset;  					else  						return 0;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingSda,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,get_StringProp,The following switch statement is missing a default case: switch (tag)  			{  				case kflidSpellingPreview:  					if (m_mapRespell.TryGetValue(hvo' out info))  						return info.SpellingPreview;  					else  						return null;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingSda,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,VecProp,The following switch statement is missing a default case: switch (tag)  			{  				case kflidOccurrencesInCaptions:  					return new int[0];    			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingSda,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,get_VecItem,The following switch statement is missing a default case: switch (tag)  			{  				case kflidOccurrencesInCaptions:  					return 0;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingSda,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,get_VecSize,The following switch statement is missing a default case: switch (tag)  			{  				case kflidOccurrencesInCaptions:  					return 0;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingMdc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,GetFieldId2,The following switch statement is missing a default case: switch (clid)  			{  				case ConcDecorator.kclidFakeOccurrence:  					switch (sFieldName)  					{  						case "AdjustedBeginOffset":  							return RespellingSda.kflidAdjustedBeginOffset;  						case "AdjustedEndOffset":  							return RespellingSda.kflidAdjustedEndOffset;  						case "SpellingPreview":  							return RespellingSda.kflidSpellingPreview;  					}  					break;  				case WfiWordformTags.kClassId:  					if (sFieldName == "OccurrencesInCaptions")  						return RespellingSda.kflidOccurrencesInCaptions;  					break;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingMdc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,GetFieldId2,The following switch statement is missing a default case: switch (sFieldName)  					{  						case "AdjustedBeginOffset":  							return RespellingSda.kflidAdjustedBeginOffset;  						case "AdjustedEndOffset":  							return RespellingSda.kflidAdjustedEndOffset;  						case "SpellingPreview":  							return RespellingSda.kflidSpellingPreview;  					}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingMdc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,GetFieldId,The following switch statement is missing a default case: switch (sClassName)  			{  				case "FakeOccurrence":  					switch (sFieldName)  					{  						case "AdjustedBeginOffset":  							return RespellingSda.kflidAdjustedBeginOffset;  						case "AdjustedEndOffset":  							return RespellingSda.kflidAdjustedEndOffset;  						case "SpellingPreview":  							return RespellingSda.kflidSpellingPreview;  					}  					break;  				case "WfiWordform":  					if (sFieldName == "OccurrencesInCaptions")  						return RespellingSda.kflidOccurrencesInCaptions;  					break;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingMdc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,GetFieldId,The following switch statement is missing a default case: switch (sFieldName)  					{  						case "AdjustedBeginOffset":  							return RespellingSda.kflidAdjustedBeginOffset;  						case "AdjustedEndOffset":  							return RespellingSda.kflidAdjustedEndOffset;  						case "SpellingPreview":  							return RespellingSda.kflidSpellingPreview;  					}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingMdc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,GetOwnClsName,The following switch statement is missing a default case: switch (flid)  			{  				case RespellingSda.kflidAdjustedBeginOffset:  				case RespellingSda.kflidAdjustedEndOffset:  				case RespellingSda.kflidSpellingPreview:  					return "FakeOccurrence";  				case RespellingSda.kflidOccurrencesInCaptions:  					return "WfiWordform";  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingMdc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,GetDstClsId,The following switch statement is missing a default case: switch (flid)  			{  				case RespellingSda.kflidAdjustedBeginOffset:  				case RespellingSda.kflidAdjustedEndOffset:  				case RespellingSda.kflidSpellingPreview:  					return 0;  				case RespellingSda.kflidOccurrencesInCaptions:  					return 0;		// I suppose we could return ConcDecorator.kclidFakeOccurrence  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingMdc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,GetFieldName,The following switch statement is missing a default case: switch (flid)  			{  				case RespellingSda.kflidAdjustedBeginOffset:  					return "AdjustedBeginOffset";  				case RespellingSda.kflidAdjustedEndOffset:  					return "AdjustedEndOffset";  				case RespellingSda.kflidSpellingPreview:  					return "SpellingPreview";  				case RespellingSda.kflidOccurrencesInCaptions:  					return "OccurrencesInCaptions";  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RespellingMdc,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RespellerDlg.cs,GetFieldType,The following switch statement is missing a default case: switch (flid)  			{  				case RespellingSda.kflidOccurrencesInCaptions:  					return (int)CellarPropertyType.ReferenceSequence;  				case RespellingSda.kflidAdjustedBeginOffset:  				case RespellingSda.kflidAdjustedEndOffset:  					return (int)CellarPropertyType.Integer;  				case RespellingSda.kflidSpellingPreview:  					return (int)CellarPropertyType.String;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,GetOptionString,The following switch statement is missing a default case: switch (type)  			{  				case RuleInsertType.MorphemeBoundary:  					return MEStrings.ksRuleMorphBdryOpt;    				case RuleInsertType.NaturalClass:  					return MEStrings.ksRuleNCOpt;    				case RuleInsertType.Phoneme:  					return MEStrings.ksRulePhonemeOpt;    				case RuleInsertType.WordBoundary:  					return MEStrings.ksRuleWordBdryOpt;    				case RuleInsertType.Features:  					return MEStrings.ksRuleFeaturesOpt;    				case RuleInsertType.Variable:  					return MEStrings.ksRuleVarOpt;    				case RuleInsertType.Index:  					return MEStrings.ksRuleIndexOpt;    				case RuleInsertType.Column:  					return MEStrings.ksRuleColOpt;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaControl,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaControl.cs,m_insertionControl_Insert,The following switch statement is missing a default case: switch (option.Type)  			{  				case RuleInsertType.Phoneme:  					IEnumerable<IPhPhoneme> phonemes = m_cache.LangProject.PhonologicalDataOA.PhonemeSetsOS[0].PhonemesOC.OrderBy(ph => ph.ShortName);  					ICmObject phonemeObj = DisplayChooser(MEStrings.ksRulePhonemeOpt' MEStrings.ksRulePhonemeChooserLink'  						"phonemeEdit"' "RulePhonemeFlatList"' phonemes);  					var phoneme = phonemeObj as IPhPhoneme;  					if (phoneme == null)  						return;  					UndoableUnitOfWorkHelper.Do(undo' redo' m_cache.ActionHandlerAccessor' () =>  						{  							cellId = InsertPhoneme(phoneme' sel' out cellIndex);  						});  					break;    				case RuleInsertType.NaturalClass:  					IEnumerable<IPhNaturalClass> natClasses = m_cache.LangProject.PhonologicalDataOA.NaturalClassesOS.OrderBy(natc => natc.ShortName);  					ICmObject ncObj = DisplayChooser(MEStrings.ksRuleNCOpt' MEStrings.ksRuleNCChooserLink'  						"naturalClassedit"' "RuleNaturalClassFlatList"' natClasses);  					var nc = ncObj as IPhNaturalClass;  					if (nc == null)  						return;  					UndoableUnitOfWorkHelper.Do(undo' redo' m_cache.ActionHandlerAccessor' () =>  						{  							cellId = InsertNC(nc' sel' out cellIndex);  						});  					break;    				case RuleInsertType.Features:  					using (var featChooser = new PhonologicalFeatureChooserDlg())  					{  						SetupPhonologicalFeatureChoooserDlg(featChooser);  						featChooser.SetHelpTopic(FeatureChooserHelpTopic);  						DialogResult res = featChooser.ShowDialog();  						if (res == DialogResult.OK)  						{  							UndoableUnitOfWorkHelper.Do(undo' redo' m_cache.ActionHandlerAccessor' () =>  								{  									IPhNCFeatures featNC = m_cache.ServiceLocator.GetInstance<IPhNCFeaturesFactory>().Create();  									m_cache.LangProject.PhonologicalDataOA.NaturalClassesOS.Add(featNC);  									featNC.Name.SetUserWritingSystem(string.Format(MEStrings.ksRuleNCFeatsName' RuleName));  									featNC.FeaturesOA = m_cache.ServiceLocator.GetInstance<IFsFeatStrucFactory>().Create();  									IPhSimpleContextNC ctxt;  									cellId = InsertNC(featNC' sel' out cellIndex' out ctxt);  									featChooser.Context = ctxt;  									featChooser.UpdateFeatureStructure();  								});  						}  						else if (res != DialogResult.Cancel)  						{  							featChooser.HandleJump();  						}  					}  					break;    				case RuleInsertType.WordBoundary:  					IPhBdryMarker wordBdry = m_cache.ServiceLocator.GetInstance<IPhBdryMarkerRepository>().GetObject(LangProjectTags.kguidPhRuleWordBdry);  					UndoableUnitOfWorkHelper.Do(undo' redo' m_cache.ActionHandlerAccessor' () =>  						{  							cellId = InsertBdry(wordBdry' sel' out cellIndex);  						});  					break;    				case RuleInsertType.MorphemeBoundary:  					IPhBdryMarker morphBdry = m_cache.ServiceLocator.GetInstance<IPhBdryMarkerRepository>().GetObject(LangProjectTags.kguidPhRuleMorphBdry);  					UndoableUnitOfWorkHelper.Do(undo' redo' m_cache.ActionHandlerAccessor' () =>  						{  							cellId = InsertBdry(morphBdry' sel' out cellIndex);  						});  					break;    				case RuleInsertType.Index:  					// put the clicked index in the data field  					UndoableUnitOfWorkHelper.Do(undo' redo' m_cache.ActionHandlerAccessor' () =>  						{  							cellId = InsertIndex((int) e.Suboption' sel' out cellIndex);  						});  					break;    				case RuleInsertType.Column:  					UndoableUnitOfWorkHelper.Do(undo' redo' m_cache.ActionHandlerAccessor' () =>  						{  							cellId = InsertColumn(sel);  						});  					break;    				case RuleInsertType.Variable:  					UndoableUnitOfWorkHelper.Do(undo' redo' m_cache.ActionHandlerAccessor' () =>  						{  							cellId = InsertVariable(sel' out cellIndex);  						});  					break;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,Display,The following switch statement is missing a default case: switch (frag)  			{  				case kfragContext:  					var ctxtOrVar = m_cache.ServiceLocator.GetInstance<IPhContextOrVarRepository>().GetObject(hvo);  					bool isOuterIterCtxt = false;  					// are we inside an iteration context? this is important since we only open a context pile if we are not  					// in an iteration context' since an iteration context does it for us  					if (vwenv.EmbeddingLevel > 0)  					{  						int outerHvo' outerTag' outerIndex;  						vwenv.GetOuterObject(vwenv.EmbeddingLevel - 1' out outerHvo' out outerTag' out outerIndex);  						var outerObj = m_cache.ServiceLocator.GetObject(outerHvo);  						isOuterIterCtxt = outerObj.ClassID == PhIterationContextTags.kClassId;  					}    					switch (ctxtOrVar.ClassID)  					{  						case PhSequenceContextTags.kClassId:  							var seqCtxt = (IPhSequenceContext) ctxtOrVar;  							if (seqCtxt.MembersRS.Count > 0)  							{  								vwenv.AddObjVecItems(PhSequenceContextTags.kflidMembers' this' kfragContext);  							}  							else  							{  								OpenSingleLinePile(vwenv' GetMaxNumLines()' false);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(PhSequenceContextTags.kflidMembers' this' kfragEmpty);  								CloseSingleLinePile(vwenv' false);  							}  							break;    						case PhSimpleContextNCTags.kClassId:  							var ncCtxt = (IPhSimpleContextNC) ctxtOrVar;  							if (ncCtxt.FeatureStructureRA != null && ncCtxt.FeatureStructureRA.ClassID == PhNCFeaturesTags.kClassId)  							{  								// Natural class simple context with a feature-based natural class  								var natClass = (IPhNCFeatures) ncCtxt.FeatureStructureRA;    								int numLines = GetNumLines(ncCtxt);  								if (numLines == 0)  								{  									if (!isOuterIterCtxt)  										OpenSingleLinePile(vwenv' GetMaxNumLines());    									vwenv.AddProp(ktagInnerNonBoundary' this' kfragLeftBracket);  									vwenv.AddProp(PhSimpleContextNCTags.kflidFeatureStructure' this' kfragQuestions);  									vwenv.AddProp(ktagInnerNonBoundary' this' kfragRightBracket);    									if (!isOuterIterCtxt)  										CloseSingleLinePile(vwenv);  								}  								else if (numLines == 1)  								{  									if (!isOuterIterCtxt)  										OpenSingleLinePile(vwenv' GetMaxNumLines());    									// use normal brackets for a single line context  									vwenv.AddProp(ktagInnerNonBoundary' this' kfragLeftBracket);    									// special consonant and vowel natural classes only display the abbreviation  									if (natClass.Abbreviation.AnalysisDefaultWritingSystem.Text == "C"  										|| natClass.Abbreviation.AnalysisDefaultWritingSystem.Text == "V")  									{  										vwenv.AddObjProp(PhSimpleContextNCTags.kflidFeatureStructure' this' kfragNC);  									}  									else  									{  										if (natClass.FeaturesOA != null && natClass.FeaturesOA.FeatureSpecsOC.Count > 0)  											vwenv.AddObjProp(PhSimpleContextNCTags.kflidFeatureStructure' this' kfragFeatNC);  										else if (ncCtxt.PlusConstrRS.Count > 0)  											vwenv.AddObjVecItems(PhSimpleContextNCTags.kflidPlusConstr' this' kfragPlusVariable);  										else  											vwenv.AddObjVecItems(PhSimpleContextNCTags.kflidMinusConstr' this' kfragMinusVariable);  									}  									vwenv.AddProp(ktagInnerNonBoundary' this' kfragRightBracket);    									if (!isOuterIterCtxt)  										CloseSingleLinePile(vwenv);  								}  								else  								{  									// multiline context    									// left bracket pile  									int maxNumLines = GetMaxNumLines();  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  									vwenv.OpenInnerPile();  									AddExtraLines(maxNumLines - numLines' ktagLeftNonBoundary' vwenv);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  									for (int i = 1; i < numLines - 1; i++)  										vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  									vwenv.AddProp(ktagLeftBoundary' this' kfragLeftBracketLowHook);  									vwenv.CloseInnerPile();    									// feature and variable pile  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  									vwenv.OpenInnerPile();  									AddExtraLines(maxNumLines - numLines' vwenv);  									vwenv.AddObjProp(PhSimpleContextNCTags.kflidFeatureStructure' this' kfragFeatNC);  									vwenv.AddObjVecItems(PhSimpleContextNCTags.kflidPlusConstr' this' kfragPlusVariable);  									vwenv.AddObjVecItems(PhSimpleContextNCTags.kflidMinusConstr' this' kfragMinusVariable);  									vwenv.CloseInnerPile();    									// right bracket pile  									vwenv.Props = m_bracketProps;  									if (!isOuterIterCtxt)  										vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  									vwenv.OpenInnerPile();  									AddExtraLines(maxNumLines - numLines' ktagRightNonBoundary' vwenv);  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  									for (int i = 1; i < numLines - 1; i++)  										vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  									vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  									vwenv.CloseInnerPile();  								}  							}  							else  							{  								// natural class context with segment-based natural class  								if (!isOuterIterCtxt)  									OpenSingleLinePile(vwenv' GetMaxNumLines());    								vwenv.AddProp(ktagInnerNonBoundary' this' kfragLeftBracket);  								if (ncCtxt.FeatureStructureRA != null)  									vwenv.AddObjProp(PhSimpleContextNCTags.kflidFeatureStructure' this' kfragNC);  								else  									vwenv.AddProp(PhSimpleContextNCTags.kflidFeatureStructure' this' kfragQuestions);  								vwenv.AddProp(ktagInnerNonBoundary' this' kfragRightBracket);    								if (!isOuterIterCtxt)  									CloseSingleLinePile(vwenv);  							}  							break;    						case PhIterationContextTags.kClassId:  							var iterCtxt = (IPhIterationContext) ctxtOrVar;  							if (iterCtxt.MemberRA != null)  							{  								int numLines = GetNumLines(iterCtxt.MemberRA as IPhSimpleContext);  								if (numLines > 1)  								{  									vwenv.AddObjProp(PhIterationContextTags.kflidMember' this' kfragContext);  									DisplayIterCtxt(numLines' vwenv);  								}  								else  								{  									OpenSingleLinePile(vwenv' GetMaxNumLines());  									if (iterCtxt.MemberRA.ClassID == PhSimpleContextNCTags.kClassId)  									{  										vwenv.AddObjProp(PhIterationContextTags.kflidMember' this' kfragContext);  									}  									else  									{  										vwenv.AddProp(ktagInnerNonBoundary' this' kfragLeftParen);  										vwenv.AddObjProp(PhIterationContextTags.kflidMember' this' kfragContext);  										vwenv.AddProp(ktagInnerNonBoundary' this' kfragRightParen);  									}  									DisplayIterCtxt(1' vwenv);  									// Views doesn't handle selection properly when we have an inner pile with strings on either side'  									// so we don't add a zero-width space at the end  									CloseSingleLinePile(vwenv' false);  								}  							}  							else  							{  								OpenSingleLinePile(vwenv' GetMaxNumLines());  								vwenv.AddProp(PhIterationContextTags.kflidMember' this' kfragQuestions);  								CloseSingleLinePile(vwenv);  							}  							break;    						case PhSimpleContextSegTags.kClassId:  							if (!isOuterIterCtxt)  								OpenSingleLinePile(vwenv' GetMaxNumLines());    							var segCtxt = (IPhSimpleContextSeg) ctxtOrVar;  							if (segCtxt.FeatureStructureRA != null)  								vwenv.AddObjProp(PhSimpleContextSegTags.kflidFeatureStructure' this' kfragTerminalUnit);  							else  								vwenv.AddProp(PhSimpleContextSegTags.kflidFeatureStructure' this' kfragQuestions);    							if (!isOuterIterCtxt)  								CloseSingleLinePile(vwenv);  							break;    						case PhSimpleContextBdryTags.kClassId:  							if (!isOuterIterCtxt)  								OpenSingleLinePile(vwenv' GetMaxNumLines());    							var bdryCtxt = (IPhSimpleContextBdry) ctxtOrVar;  							if (bdryCtxt.FeatureStructureRA != null)  								vwenv.AddObjProp(PhSimpleContextBdryTags.kflidFeatureStructure' this' kfragTerminalUnit);  							else  								vwenv.AddProp(PhSimpleContextBdryTags.kflidFeatureStructure' this' kfragQuestions);    							if (!isOuterIterCtxt)  								CloseSingleLinePile(vwenv);  							break;    						case PhVariableTags.kClassId:  							OpenSingleLinePile(vwenv' GetMaxNumLines());  							vwenv.AddProp(ktagXVariable' this' kfragXVariable);  							CloseSingleLinePile(vwenv);  							break;  					}  					break;    				case kfragNC:  					int ncWs = WritingSystemServices.ActualWs(m_cache' WritingSystemServices.kwsFirstAnal' hvo'  						PhNaturalClassTags.kflidAbbreviation);  					if (ncWs != 0)  					{  						vwenv.AddStringAltMember(PhNaturalClassTags.kflidAbbreviation' ncWs' this);  					}  					else  					{  						ncWs = WritingSystemServices.ActualWs(m_cache' WritingSystemServices.kwsFirstAnal' hvo'  							PhNaturalClassTags.kflidName);  						if (ncWs != 0)  							vwenv.AddStringAltMember(PhNaturalClassTags.kflidName' ncWs' this);  						else  							vwenv.AddProp(PhNaturalClassTags.kflidAbbreviation' this' kfragQuestions);  					}  					break;    				case kfragTerminalUnit:  					int tuWs = WritingSystemServices.ActualWs(m_cache' WritingSystemServices.kwsFirstVern'  						hvo' PhTerminalUnitTags.kflidName);  					if (tuWs != 0)  						vwenv.AddStringAltMember(PhTerminalUnitTags.kflidName' tuWs' this);  					else  						vwenv.AddProp(PhTerminalUnitTags.kflidName' this' kfragQuestions);  					break;    				case kfragFeatNC:  					vwenv.AddObjProp(PhNCFeaturesTags.kflidFeatures' this' kfragFeats);  					break;    				case kfragFeats:  					vwenv.AddObjVecItems(FsFeatStrucTags.kflidFeatureSpecs' this' kfragFeature);  					break;    				case kfragFeature:  					vwenv.AddProp(ktagFeature' this' kfragFeatureLine);  					break;    				case kfragPlusVariable:  					vwenv.AddProp(ktagVariable' this' kfragPlusVariableLine);  					break;    				case kfragMinusVariable:  					vwenv.AddProp(ktagVariable' this' kfragMinusVariableLine);  					break;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,Display,The following switch statement is missing a default case: switch (ctxtOrVar.ClassID)  					{  						case PhSequenceContextTags.kClassId:  							var seqCtxt = (IPhSequenceContext) ctxtOrVar;  							if (seqCtxt.MembersRS.Count > 0)  							{  								vwenv.AddObjVecItems(PhSequenceContextTags.kflidMembers' this' kfragContext);  							}  							else  							{  								OpenSingleLinePile(vwenv' GetMaxNumLines()' false);  								vwenv.Props = m_bracketProps;  								vwenv.AddProp(PhSequenceContextTags.kflidMembers' this' kfragEmpty);  								CloseSingleLinePile(vwenv' false);  							}  							break;    						case PhSimpleContextNCTags.kClassId:  							var ncCtxt = (IPhSimpleContextNC) ctxtOrVar;  							if (ncCtxt.FeatureStructureRA != null && ncCtxt.FeatureStructureRA.ClassID == PhNCFeaturesTags.kClassId)  							{  								// Natural class simple context with a feature-based natural class  								var natClass = (IPhNCFeatures) ncCtxt.FeatureStructureRA;    								int numLines = GetNumLines(ncCtxt);  								if (numLines == 0)  								{  									if (!isOuterIterCtxt)  										OpenSingleLinePile(vwenv' GetMaxNumLines());    									vwenv.AddProp(ktagInnerNonBoundary' this' kfragLeftBracket);  									vwenv.AddProp(PhSimpleContextNCTags.kflidFeatureStructure' this' kfragQuestions);  									vwenv.AddProp(ktagInnerNonBoundary' this' kfragRightBracket);    									if (!isOuterIterCtxt)  										CloseSingleLinePile(vwenv);  								}  								else if (numLines == 1)  								{  									if (!isOuterIterCtxt)  										OpenSingleLinePile(vwenv' GetMaxNumLines());    									// use normal brackets for a single line context  									vwenv.AddProp(ktagInnerNonBoundary' this' kfragLeftBracket);    									// special consonant and vowel natural classes only display the abbreviation  									if (natClass.Abbreviation.AnalysisDefaultWritingSystem.Text == "C"  										|| natClass.Abbreviation.AnalysisDefaultWritingSystem.Text == "V")  									{  										vwenv.AddObjProp(PhSimpleContextNCTags.kflidFeatureStructure' this' kfragNC);  									}  									else  									{  										if (natClass.FeaturesOA != null && natClass.FeaturesOA.FeatureSpecsOC.Count > 0)  											vwenv.AddObjProp(PhSimpleContextNCTags.kflidFeatureStructure' this' kfragFeatNC);  										else if (ncCtxt.PlusConstrRS.Count > 0)  											vwenv.AddObjVecItems(PhSimpleContextNCTags.kflidPlusConstr' this' kfragPlusVariable);  										else  											vwenv.AddObjVecItems(PhSimpleContextNCTags.kflidMinusConstr' this' kfragMinusVariable);  									}  									vwenv.AddProp(ktagInnerNonBoundary' this' kfragRightBracket);    									if (!isOuterIterCtxt)  										CloseSingleLinePile(vwenv);  								}  								else  								{  									// multiline context    									// left bracket pile  									int maxNumLines = GetMaxNumLines();  									vwenv.Props = m_bracketProps;  									vwenv.set_IntProperty((int)FwTextPropType.ktptMarginLeading' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  									vwenv.OpenInnerPile();  									AddExtraLines(maxNumLines - numLines' ktagLeftNonBoundary' vwenv);  									vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketUpHook);  									for (int i = 1; i < numLines - 1; i++)  										vwenv.AddProp(ktagLeftNonBoundary' this' kfragLeftBracketExt);  									vwenv.AddProp(ktagLeftBoundary' this' kfragLeftBracketLowHook);  									vwenv.CloseInnerPile();    									// feature and variable pile  									vwenv.set_IntProperty((int)FwTextPropType.ktptAlign' (int)FwTextPropVar.ktpvEnum' (int)FwTextAlign.ktalLeft);  									vwenv.OpenInnerPile();  									AddExtraLines(maxNumLines - numLines' vwenv);  									vwenv.AddObjProp(PhSimpleContextNCTags.kflidFeatureStructure' this' kfragFeatNC);  									vwenv.AddObjVecItems(PhSimpleContextNCTags.kflidPlusConstr' this' kfragPlusVariable);  									vwenv.AddObjVecItems(PhSimpleContextNCTags.kflidMinusConstr' this' kfragMinusVariable);  									vwenv.CloseInnerPile();    									// right bracket pile  									vwenv.Props = m_bracketProps;  									if (!isOuterIterCtxt)  										vwenv.set_IntProperty((int)FwTextPropType.ktptMarginTrailing' (int)FwTextPropVar.ktpvMilliPoint' PileMargin);  									vwenv.OpenInnerPile();  									AddExtraLines(maxNumLines - numLines' ktagRightNonBoundary' vwenv);  									vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketUpHook);  									for (int i = 1; i < numLines - 1; i++)  										vwenv.AddProp(ktagRightNonBoundary' this' kfragRightBracketExt);  									vwenv.AddProp(ktagRightBoundary' this' kfragRightBracketLowHook);  									vwenv.CloseInnerPile();  								}  							}  							else  							{  								// natural class context with segment-based natural class  								if (!isOuterIterCtxt)  									OpenSingleLinePile(vwenv' GetMaxNumLines());    								vwenv.AddProp(ktagInnerNonBoundary' this' kfragLeftBracket);  								if (ncCtxt.FeatureStructureRA != null)  									vwenv.AddObjProp(PhSimpleContextNCTags.kflidFeatureStructure' this' kfragNC);  								else  									vwenv.AddProp(PhSimpleContextNCTags.kflidFeatureStructure' this' kfragQuestions);  								vwenv.AddProp(ktagInnerNonBoundary' this' kfragRightBracket);    								if (!isOuterIterCtxt)  									CloseSingleLinePile(vwenv);  							}  							break;    						case PhIterationContextTags.kClassId:  							var iterCtxt = (IPhIterationContext) ctxtOrVar;  							if (iterCtxt.MemberRA != null)  							{  								int numLines = GetNumLines(iterCtxt.MemberRA as IPhSimpleContext);  								if (numLines > 1)  								{  									vwenv.AddObjProp(PhIterationContextTags.kflidMember' this' kfragContext);  									DisplayIterCtxt(numLines' vwenv);  								}  								else  								{  									OpenSingleLinePile(vwenv' GetMaxNumLines());  									if (iterCtxt.MemberRA.ClassID == PhSimpleContextNCTags.kClassId)  									{  										vwenv.AddObjProp(PhIterationContextTags.kflidMember' this' kfragContext);  									}  									else  									{  										vwenv.AddProp(ktagInnerNonBoundary' this' kfragLeftParen);  										vwenv.AddObjProp(PhIterationContextTags.kflidMember' this' kfragContext);  										vwenv.AddProp(ktagInnerNonBoundary' this' kfragRightParen);  									}  									DisplayIterCtxt(1' vwenv);  									// Views doesn't handle selection properly when we have an inner pile with strings on either side'  									// so we don't add a zero-width space at the end  									CloseSingleLinePile(vwenv' false);  								}  							}  							else  							{  								OpenSingleLinePile(vwenv' GetMaxNumLines());  								vwenv.AddProp(PhIterationContextTags.kflidMember' this' kfragQuestions);  								CloseSingleLinePile(vwenv);  							}  							break;    						case PhSimpleContextSegTags.kClassId:  							if (!isOuterIterCtxt)  								OpenSingleLinePile(vwenv' GetMaxNumLines());    							var segCtxt = (IPhSimpleContextSeg) ctxtOrVar;  							if (segCtxt.FeatureStructureRA != null)  								vwenv.AddObjProp(PhSimpleContextSegTags.kflidFeatureStructure' this' kfragTerminalUnit);  							else  								vwenv.AddProp(PhSimpleContextSegTags.kflidFeatureStructure' this' kfragQuestions);    							if (!isOuterIterCtxt)  								CloseSingleLinePile(vwenv);  							break;    						case PhSimpleContextBdryTags.kClassId:  							if (!isOuterIterCtxt)  								OpenSingleLinePile(vwenv' GetMaxNumLines());    							var bdryCtxt = (IPhSimpleContextBdry) ctxtOrVar;  							if (bdryCtxt.FeatureStructureRA != null)  								vwenv.AddObjProp(PhSimpleContextBdryTags.kflidFeatureStructure' this' kfragTerminalUnit);  							else  								vwenv.AddProp(PhSimpleContextBdryTags.kflidFeatureStructure' this' kfragQuestions);    							if (!isOuterIterCtxt)  								CloseSingleLinePile(vwenv);  							break;    						case PhVariableTags.kClassId:  							OpenSingleLinePile(vwenv' GetMaxNumLines());  							vwenv.AddProp(ktagXVariable' this' kfragXVariable);  							CloseSingleLinePile(vwenv);  							break;  					}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,GetNumLines,The following switch statement is missing a default case: switch (ctxtOrVar.ClassID)  			{  				case PhSequenceContextTags.kClassId:  					var seqCtxt = (IPhSequenceContext) ctxtOrVar;  					int maxNumLines = 1;  					foreach (IPhPhonContext cur in seqCtxt.MembersRS)  					{  						int numLines = GetNumLines(cur);  						if (numLines > maxNumLines)  							maxNumLines = numLines;  					}  					return maxNumLines;    				case PhIterationContextTags.kClassId:  					var iterCtxt = (IPhIterationContext) ctxtOrVar;  					return GetNumLines(iterCtxt.MemberRA);    				case PhSimpleContextNCTags.kClassId:  					int numFeats = 0;  					var ncCtxt = (IPhSimpleContextNC) ctxtOrVar;  					if (ncCtxt.FeatureStructureRA != null && ncCtxt.FeatureStructureRA.ClassID == PhNCFeaturesTags.kClassId)  					{  						var natClass = (IPhNCFeatures) ncCtxt.FeatureStructureRA;  						if (natClass.FeaturesOA != null)  							numFeats = natClass.FeaturesOA.FeatureSpecsOC.Count;  					}  					return ncCtxt.PlusConstrRS.Count + ncCtxt.MinusConstrRS.Count + numFeats;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,RuleFormulaVcBase,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\RuleFormulaVcBase.cs,GetSimpleCtxtWidth,The following switch statement is missing a default case: switch (ctxt.ClassID)  			{  				case PhSimpleContextBdryTags.kClassId:  					var bdryCtxt = (IPhSimpleContextBdry) ctxt;  					return GetTermUnitWidth(bdryCtxt.FeatureStructureRA' vwenv);    				case PhSimpleContextSegTags.kClassId:  					var segCtxt = (IPhSimpleContextSeg) ctxt;  					return GetTermUnitWidth(segCtxt.FeatureStructureRA' vwenv);    				case PhSimpleContextNCTags.kClassId:  					return GetNCCtxtWidth(ctxt as IPhSimpleContextNC' vwenv);  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,WordformGoSearchEngine,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\WordformGoSearchEngine.cs,IsIndexResetRequired,The following switch statement is missing a default case: switch (flid)  			{  				case WfiWordformTags.kflidForm:  					return true;  			}
Missing Default,SIL.FieldWorks.XWorks.MorphologyEditor,WordformGoSearchEngine,C:\repos\sillsdev_FieldWorks\Src\LexText\Morphology\WordformGoSearchEngine.cs,IsFieldMultiString,The following switch statement is missing a default case: switch (field.Flid)  			{  				case WfiWordformTags.kflidForm:  					return true;  			}
