Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FluentScheduler,JobManager,C:\repos\jgeurts_FluentScheduler\Library\JobManager.cs,CalculateNextRun,Cyclomatic complexity of the method is 9
Long Parameter List,FluentScheduler,RestrictableUnitExtensions,C:\repos\jgeurts_FluentScheduler\Library\Extension\RestrictableUnitExtensions.cs,Between,The method has 5 parameters. Parameters: unit' startHour' startMinute' endHour' endMinute
Long Identifier,FluentScheduler,Registry,C:\repos\jgeurts_FluentScheduler\Library\Registry.cs,,The length of the parameter _allJobsConfiguredAsNonReentrant is 32.
Long Statement,FluentScheduler,YearOnDayOfYearUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\YearOnDayOfYearUnit.cs,At,The length of the statement  "                return x > nextRun ? x.Date.FirstOfYear().AddYears(_duration).AddDays(_dayOfYear - 1).AddHours(hours).AddMinutes(minutes) : nextRun; " is 132.
Long Statement,FluentScheduler,YearOnLastDayOfYearUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\YearOnLastDayOfYearUnit.cs,At,The length of the statement  "                return x > nextRun ? x.Date.FirstOfYear().AddYears(_duration).AddMonths(11).Last().AddHours(hours).AddMinutes(minutes) : nextRun; " is 129.
Long Statement,FluentScheduler,MonthOnDayOfWeekUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\MonthOnDayOfWeekUnit.cs,At,The length of the statement  "                    return x > nextRun ? x.Date.First().AddMonths(_duration).Last(_dayOfWeek).AddHours(hours).AddMinutes(minutes) : nextRun; " is 120.
Long Statement,FluentScheduler,MonthOnDayOfWeekUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\MonthOnDayOfWeekUnit.cs,At,The length of the statement  "                    return x > nextRun ? x.Date.First().AddMonths(_duration).ToWeek(_week).ThisOrNext(_dayOfWeek).AddHours(hours).AddMinutes(minutes) : nextRun; " is 140.
Magic Number,FluentScheduler,DelayTimeUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\DelayTimeUnit.cs,Weeks,The following statement contains a magic number: Schedule.DelayRunFor = TimeSpan.FromDays(_interval * 7);
Magic Number,FluentScheduler,DateTimeExtensions,C:\repos\jgeurts_FluentScheduler\Library\Extension\DateTimeExtensions.cs,Last,The following statement contains a magic number: if (diff > 0)                  diff -= 7;
Magic Number,FluentScheduler,DateTimeExtensions,C:\repos\jgeurts_FluentScheduler\Library\Extension\DateTimeExtensions.cs,ThisOrNext,The following statement contains a magic number: if (offsetDays < 0)                  offsetDays += 7;
Magic Number,FluentScheduler,DateTimeExtensions,C:\repos\jgeurts_FluentScheduler\Library\Extension\DateTimeExtensions.cs,Next,The following statement contains a magic number: if (offsetDays <= 0)                  offsetDays += 7;
Magic Number,FluentScheduler,DateTimeExtensions,C:\repos\jgeurts_FluentScheduler\Library\Extension\DateTimeExtensions.cs,ToWeek,The following statement contains a magic number: switch (week)              {                  case Week.Second:                      return current.First().AddDays(7);                  case Week.Third:                      return current.First().AddDays(14);                  case Week.Fourth:                      return current.First().AddDays(21);                  case Week.Last:                      return current.Last().AddDays(-7);              }
Magic Number,FluentScheduler,DateTimeExtensions,C:\repos\jgeurts_FluentScheduler\Library\Extension\DateTimeExtensions.cs,ToWeek,The following statement contains a magic number: switch (week)              {                  case Week.Second:                      return current.First().AddDays(7);                  case Week.Third:                      return current.First().AddDays(14);                  case Week.Fourth:                      return current.First().AddDays(21);                  case Week.Last:                      return current.Last().AddDays(-7);              }
Magic Number,FluentScheduler,DateTimeExtensions,C:\repos\jgeurts_FluentScheduler\Library\Extension\DateTimeExtensions.cs,ToWeek,The following statement contains a magic number: switch (week)              {                  case Week.Second:                      return current.First().AddDays(7);                  case Week.Third:                      return current.First().AddDays(14);                  case Week.Fourth:                      return current.First().AddDays(21);                  case Week.Last:                      return current.Last().AddDays(-7);              }
Magic Number,FluentScheduler,DateTimeExtensions,C:\repos\jgeurts_FluentScheduler\Library\Extension\DateTimeExtensions.cs,ToWeek,The following statement contains a magic number: switch (week)              {                  case Week.Second:                      return current.First().AddDays(7);                  case Week.Third:                      return current.First().AddDays(14);                  case Week.Fourth:                      return current.First().AddDays(21);                  case Week.Last:                      return current.Last().AddDays(-7);              }
Magic Number,FluentScheduler,YearOnLastDayOfYearUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\YearOnLastDayOfYearUnit.cs,At,The following statement contains a magic number: Schedule.CalculateNextRun = x =>              {                  var nextRun = x.Date.FirstOfYear().AddMonths(11).Last().AddHours(hours).AddMinutes(minutes);                  return x > nextRun ? x.Date.FirstOfYear().AddYears(_duration).AddMonths(11).Last().AddHours(hours).AddMinutes(minutes) : nextRun;              };
Magic Number,FluentScheduler,YearOnLastDayOfYearUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\YearOnLastDayOfYearUnit.cs,At,The following statement contains a magic number: Schedule.CalculateNextRun = x =>              {                  var nextRun = x.Date.FirstOfYear().AddMonths(11).Last().AddHours(hours).AddMinutes(minutes);                  return x > nextRun ? x.Date.FirstOfYear().AddYears(_duration).AddMonths(11).Last().AddHours(hours).AddMinutes(minutes) : nextRun;              };
Magic Number,FluentScheduler,WeeklyDayOfWeekUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\WeeklyDayOfWeekUnit.cs,WeeklyDayOfWeekUnit,The following statement contains a magic number: if (_duration > 0)              {                  Schedule.CalculateNextRun = x =>                  {                      var nextRun = x.Date.AddDays(_duration * 7).ThisOrNext(day);                      return x > nextRun ? nextRun.AddDays(_duration * 7) : nextRun;                  };              }              else              {                  Schedule.CalculateNextRun = x =>                  {                      var nextRun = x.Date.Next(day);                      return x > nextRun ? nextRun.AddDays(7) : nextRun;                  };              }
Magic Number,FluentScheduler,WeeklyDayOfWeekUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\WeeklyDayOfWeekUnit.cs,WeeklyDayOfWeekUnit,The following statement contains a magic number: if (_duration > 0)              {                  Schedule.CalculateNextRun = x =>                  {                      var nextRun = x.Date.AddDays(_duration * 7).ThisOrNext(day);                      return x > nextRun ? nextRun.AddDays(_duration * 7) : nextRun;                  };              }              else              {                  Schedule.CalculateNextRun = x =>                  {                      var nextRun = x.Date.Next(day);                      return x > nextRun ? nextRun.AddDays(7) : nextRun;                  };              }
Magic Number,FluentScheduler,WeeklyDayOfWeekUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\WeeklyDayOfWeekUnit.cs,WeeklyDayOfWeekUnit,The following statement contains a magic number: if (_duration > 0)              {                  Schedule.CalculateNextRun = x =>                  {                      var nextRun = x.Date.AddDays(_duration * 7).ThisOrNext(day);                      return x > nextRun ? nextRun.AddDays(_duration * 7) : nextRun;                  };              }              else              {                  Schedule.CalculateNextRun = x =>                  {                      var nextRun = x.Date.Next(day);                      return x > nextRun ? nextRun.AddDays(7) : nextRun;                  };              }
Magic Number,FluentScheduler,WeeklyDayOfWeekUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\WeeklyDayOfWeekUnit.cs,At,The following statement contains a magic number: Schedule.CalculateNextRun = x =>              {                  var nextRun = x.Date.AddDays(_duration * 7).ThisOrNext(_day).AddHours(hours).AddMinutes(minutes);                  return x > nextRun ? nextRun.AddDays(Math.Max(_duration' 1) * 7) : nextRun;              };
Magic Number,FluentScheduler,WeeklyDayOfWeekUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\WeeklyDayOfWeekUnit.cs,At,The following statement contains a magic number: Schedule.CalculateNextRun = x =>              {                  var nextRun = x.Date.AddDays(_duration * 7).ThisOrNext(_day).AddHours(hours).AddMinutes(minutes);                  return x > nextRun ? nextRun.AddDays(Math.Max(_duration' 1) * 7) : nextRun;              };
Magic Number,FluentScheduler,WeekUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\WeekUnit.cs,WeekUnit,The following statement contains a magic number: Schedule.CalculateNextRun = x =>              {                  var nextRun = x.Date.AddDays(_duration * 7);                  return x > nextRun ? nextRun.AddDays(Math.Max(_duration' 1) * 7) : nextRun;              };
Magic Number,FluentScheduler,WeekUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\WeekUnit.cs,WeekUnit,The following statement contains a magic number: Schedule.CalculateNextRun = x =>              {                  var nextRun = x.Date.AddDays(_duration * 7);                  return x > nextRun ? nextRun.AddDays(Math.Max(_duration' 1) * 7) : nextRun;              };
Magic Number,FluentScheduler,WeekUnit,C:\repos\jgeurts_FluentScheduler\Library\Unit\WeekUnit.cs,At,The following statement contains a magic number: Schedule.CalculateNextRun = x =>              {                  var nextRun = x.Date.AddHours(hours).AddMinutes(minutes);                  return x > nextRun ? nextRun.AddDays(Math.Max(_duration' 1) * 7) : nextRun;              };
Missing Default,FluentScheduler,DateTimeExtensions,C:\repos\jgeurts_FluentScheduler\Library\Extension\DateTimeExtensions.cs,ToWeek,The following switch statement is missing a default case: switch (week)              {                  case Week.Second:                      return current.First().AddDays(7);                  case Week.Third:                      return current.First().AddDays(14);                  case Week.Fourth:                      return current.First().AddDays(21);                  case Week.Last:                      return current.Last().AddDays(-7);              }
