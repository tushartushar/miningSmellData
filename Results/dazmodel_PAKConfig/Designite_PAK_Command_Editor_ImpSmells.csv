Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PAK_Command_Editor.HardwareInteractionModule,PAKHardwareInteractionModule,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKHardwareInteractionModule.cs,SendDataAndWait,Cyclomatic complexity of the method is 8
Complex Method,PAK_Command_Editor.HardwareInteractionModule,PAKMacrosConverter,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKMacrosConverter.cs,ParamsToByteArray,Cyclomatic complexity of the method is 14
Complex Method,PAK_Command_Editor.HardwareInteractionModule,PAKMacrosConverter,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKMacrosConverter.cs,GetSendParamsFromByteArray,Cyclomatic complexity of the method is 8
Complex Method,PAK_Command_Editor.MacrosEditor,SelectCommandTypeForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\SelectCommandTypeForm.cs,btnSetCommandType_Click,Cyclomatic complexity of the method is 20
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKHardwareInteractionModule,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKHardwareInteractionModule.cs,SendTeachCommand,The length of the statement  "	String testSignal = "0000 0067 0000 0015 0060 0018 0018 0018 0030 0018 0030 0018 0030 0018 0018 0018 0030 0018 0018 0018 0018 0018 0030 0018 0018 0018 0030 0018 0030 0018 0030 0018 0018 0018 0018 0018 0030 0018 0018 0018 0018 0018 0030 0018 0018 03f6"; " is 252.
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKHardwareInteractionModule,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKHardwareInteractionModule.cs,SendMacrosToDevice,The length of the statement  "	return this.SendData (PAKMacrosConverter.GetSignalByteRepresentation (macrosesContainer)) + "\r\n" + this.SendData (PAKMacrosConverter.GetMacrosesByteRepresentation (macrosesContainer)); " is 186.
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKHardwareInteractionModule,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKHardwareInteractionModule.cs,SendMacrosToDevice,The length of the statement  "	//mc.AssociatedSignal = PAKMacrosConverter.GetSignalFromByteRepresentation(signalBytes.Where(x => signalBytes.IndexOf(x) >= 2).ToArray()); " is 138.
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKHardwareInteractionModule,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKHardwareInteractionModule.cs,ReadMacrosFromDevice,The length of the statement  "	KeyValuePair<String' byte[]> inputSignalData = this.SendDataAndWait (PAKConversionUtilities.StringToByteArray (PAKSettingsManager.Settings.ReadSignalCommand)); " is 159.
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKHardwareInteractionModule,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKHardwareInteractionModule.cs,ReadMacrosFromDevice,The length of the statement  "		return new KeyValuePair<String' MacrosesContainer> (String.Format (SIGNAL_NOT_READED' PAKSettingsManager.Settings.COMPortName' EOL) + inputSignalData.Key' null); " is 161.
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKHardwareInteractionModule,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKHardwareInteractionModule.cs,ReadMacrosFromDevice,The length of the statement  "	KeyValuePair<String' byte[]> inputMacrosData = this.SendDataAndWait (PAKConversionUtilities.StringToByteArray (PAKSettingsManager.Settings.ReadMacrosCommand)); " is 159.
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKHardwareInteractionModule,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKHardwareInteractionModule.cs,ReadMacrosFromDevice,The length of the statement  "		return new KeyValuePair<String' MacrosesContainer> (String.Format (MACROS_NOT_READED' PAKSettingsManager.Settings.COMPortName' EOL) + inputMacrosData.Key' null); " is 161.
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKHardwareInteractionModule,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKHardwareInteractionModule.cs,ReadMacrosFromDevice,The length of the statement  "		return new KeyValuePair<String' MacrosesContainer> (String.Format (MACROS_READED' PAKSettingsManager.Settings.COMPortName)' macrosesContainer); " is 143.
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKHardwareInteractionModule,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKHardwareInteractionModule.cs,SendDataAndWait,The length of the statement  "					return new KeyValuePair<String' byte[]> (String.Format (DATA_READED' PAKSettingsManager.Settings.COMPortName)' inbytes); " is 120.
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKHardwareInteractionModule,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKHardwareInteractionModule.cs,SendDataAndWait,The length of the statement  "					return new KeyValuePair<String' byte[]> (String.Format (CANT_READ_DATA' PAKSettingsManager.Settings.COMPortName)' new byte[0]); " is 127.
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKHardwareInteractionModule,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKHardwareInteractionModule.cs,SendDataAndWait,The length of the statement  "				return new KeyValuePair<String' byte[]> (String.Format (DATA_READ_TIMEOUT' PAKSettingsManager.Settings.COMPortName)' new byte[0]); " is 130.
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKMacrosConverter,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKMacrosConverter.cs,GetSignalFromByteRepresentation,The length of the statement  "	String signalHexHash = Signal.ComputeMD5Hash (PAKConversionUtilities.ByteArrayToSignalWordsString (signalWithoutLengthData).ToLower ()); " is 136.
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKMacrosConverter,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKMacrosConverter.cs,GetSendParamsFromByteArray,The length of the statement  "		Int32 signalLength = (PAKConversionUtilities.ByteArrayToInt32 (byteArray' index + (SEND_PREAMBLE_SIZE - SIGNAL_LENGTH_PART_SIZE)) * 2) * 2 + SEND_PREAMBLE_SIZE; " is 160.
Long Statement,PAK_Command_Editor.HardwareInteractionModule,PAKMacrosConverter,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKMacrosConverter.cs,GetSendParamsFromByteArray,The length of the statement  "				String signalHexHash = Signal.ComputeMD5Hash (PAKConversionUtilities.ByteArrayToSignalWordsString (byteArray' index' signalLength).ToLower ()); " is 143.
Long Statement,PAK_Command_Editor.MacrosEditor,AddIfCommandForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\AddIfCommandForm.cs,BindGlobalVars,The length of the statement  "	this.cbGlobalVars.Items.AddRange (GlobalVariablesStorage.GlobalVars.Where (x => x.CanReceiveSignals == false).ToArray ()); " is 122.
Long Statement,PAK_Command_Editor.MacrosEditor,MacrosesEditorForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\MacrosesEditorForm.cs,RestoreState,The length of the statement  "	Signal currentSignal = this._signalsRepo.Get (x => x.HexCodeHash == this._macrosesContainer.AssociatedSignal.HexCodeHash).SingleOrDefault (); " is 141.
Long Statement,PAK_Command_Editor.MacrosEditor,SelectCommandTypeForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\SelectCommandTypeForm.cs,btnSetCommandType_Click,The length of the statement  "	MacrosCommandType commandType = (MacrosCommandType)Enum.Parse (typeof(MacrosCommandType)' (this.cbCommandType.SelectedItem as MacrosCommand).Alias); " is 148.
Long Statement,PAK_Command_Editor.Repository,PAKDataSessionFactory,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Repository\PAKDataSessionFactory.cs,CreateSessionFactory,The length of the statement  "	return Fluently.Configure ().Database (SQLiteConfiguration.Standard.ConnectionString (x => x.Is (String.Format (_dbConnectionString' _dbFile)))).Mappings (m => m.AutoMappings.Add (CreateMappings)).ExposeConfiguration (BuildSchema).BuildSessionFactory (); " is 254.
Long Statement,PAK_Command_Editor.Repository,PAKDataSessionFactory,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Repository\PAKDataSessionFactory.cs,CreateMappings,The length of the statement  "	return AutoMap.Assembly (Assembly.GetAssembly (typeof(PAKDataSessionFactory))' new PAKAutoMappingConfig ()).Conventions.Setup (c => c.Add (DefaultCascade.SaveUpdate ())); " is 170.
Long Statement,PAK_Command_Editor.Settings,ServiceCommandsForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Settings\ServiceCommandsForm.cs,txt_TextChanged,The length of the statement  "	this.btnSave.Enabled = (!String.IsNullOrEmpty (this.txtTeachCommand.Text)) && (!String.IsNullOrEmpty (this.txtTestCommand.Text)); " is 129.
Long Statement,PAK_Command_Editor.SignalsCatalog,AddSignalForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\AddSignalForm.cs,txtHexCode_TextChanged,The length of the statement  "	this.btnAddSignal.Enabled = (!String.IsNullOrEmpty (this.txtSignalName.Text)) && (this.txtHexCode.Text.Length >= MIN_HEX_LENGTH); " is 129.
Long Statement,PAK_Command_Editor.SignalsCatalog,EditSignalForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\EditSignalForm.cs,txt_TextChanged,The length of the statement  "	this.btnSave.Enabled = (!String.IsNullOrEmpty (this.txtSignalName.Text)) && (this.txtHexCode.Text.Length >= MIN_HEX_LENGTH); " is 124.
Long Statement,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,btnDeleteSignal_Click,The length of the statement  "		DialogResult dr = MessageBox.Show (String.Format (DELETE_SIGNAL_MSG' signalTodelete.Name)' DELETE_SIGNAL_TITLE' MessageBoxButtons.YesNo); " is 137.
Empty Catch Block,PAK_Command_Editor.HardwareInteractionModule,PAKHardwareInteractionModule,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKHardwareInteractionModule.cs,Dispose,The method has an empty catch block.
Empty Catch Block,PAK_Command_Editor.HardwareInteractionModule,PAKMacrosConverter,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKMacrosConverter.cs,GetSignalFromByteRepresentation,The method has an empty catch block.
Empty Catch Block,PAK_Command_Editor.Settings,PAKSettingsManager,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Settings\PAKSettingsManager.cs,SaveSettings,The method has an empty catch block.
Empty Catch Block,PAK_Command_Editor.Settings,PAKSettingsManager,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Settings\PAKSettingsManager.cs,DeserializeSettings,The method has an empty catch block.
Magic Number,PAK_Command_Editor.HardwareInteractionModule,COMTimer,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\COMTimer.cs,COMTimer,The following statement contains a magic number: tmrComm.Interval = 1000;  
Magic Number,PAK_Command_Editor.HardwareInteractionModule,PAKMacrosConverter,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKMacrosConverter.cs,GetSendParamsFromByteArray,The following statement contains a magic number: if (byteArray.Length >= (index + GLOBAL_VAR_SIZE + SEND_PREAMBLE_SIZE)) {  	Int32 signalLength = (PAKConversionUtilities.ByteArrayToInt32 (byteArray' index + (SEND_PREAMBLE_SIZE - SIGNAL_LENGTH_PART_SIZE)) * 2) * 2 + SEND_PREAMBLE_SIZE;  	if (byteArray.Length >= (index + signalLength)) {  		List<String> result = new List<String> ();  		try {  			String signalHexHash = Signal.ComputeMD5Hash (PAKConversionUtilities.ByteArrayToSignalWordsString (byteArray' index' signalLength).ToLower ());  			index += signalLength;  			Signal signal;  			using (Repository<Signal> signalsRepo = new Repository<Signal> (PAKDataSessionFactory.GetSession ())) {  				signal = signalsRepo.Get (x => x.HexCodeHash.Equals (signalHexHash)).SingleOrDefault ();  			}  			Int16 gvHexCode = PAKConversionUtilities.ByteArrayToInt16 (byteArray' index);  			index += GLOBAL_VAR_SIZE;  			GlobalVariable gv;  			using (Repository<GlobalVariable> gvRepo = new Repository<GlobalVariable> (PAKDataSessionFactory.GetSession ())) {  				gv = gvRepo.Get (x => x.HexCode == gvHexCode).SingleOrDefault ();  			}  			result.Add (signal.Name);  			result.Add (gv.Alias);  		}  		catch {  			return null;  		}  		return result;  	}  	return null;  }  
Magic Number,PAK_Command_Editor.HardwareInteractionModule,PAKMacrosConverter,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKMacrosConverter.cs,GetSendParamsFromByteArray,The following statement contains a magic number: if (byteArray.Length >= (index + GLOBAL_VAR_SIZE + SEND_PREAMBLE_SIZE)) {  	Int32 signalLength = (PAKConversionUtilities.ByteArrayToInt32 (byteArray' index + (SEND_PREAMBLE_SIZE - SIGNAL_LENGTH_PART_SIZE)) * 2) * 2 + SEND_PREAMBLE_SIZE;  	if (byteArray.Length >= (index + signalLength)) {  		List<String> result = new List<String> ();  		try {  			String signalHexHash = Signal.ComputeMD5Hash (PAKConversionUtilities.ByteArrayToSignalWordsString (byteArray' index' signalLength).ToLower ());  			index += signalLength;  			Signal signal;  			using (Repository<Signal> signalsRepo = new Repository<Signal> (PAKDataSessionFactory.GetSession ())) {  				signal = signalsRepo.Get (x => x.HexCodeHash.Equals (signalHexHash)).SingleOrDefault ();  			}  			Int16 gvHexCode = PAKConversionUtilities.ByteArrayToInt16 (byteArray' index);  			index += GLOBAL_VAR_SIZE;  			GlobalVariable gv;  			using (Repository<GlobalVariable> gvRepo = new Repository<GlobalVariable> (PAKDataSessionFactory.GetSession ())) {  				gv = gvRepo.Get (x => x.HexCode == gvHexCode).SingleOrDefault ();  			}  			result.Add (signal.Name);  			result.Add (gv.Alias);  		}  		catch {  			return null;  		}  		return result;  	}  	return null;  }  
Magic Number,PAK_Command_Editor.MacrosEditor,MacrosesEditorForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\MacrosesEditorForm.cs,BindMacrosesGrid,The following statement contains a magic number: this.gvMacros.ColumnCount = 2;  
Magic Number,PAK_Command_Editor.MacrosEditor,MacrosesEditorForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\MacrosesEditorForm.cs,BindMacrosesGrid,The following statement contains a magic number: this.gvMacros.Columns [0].Width = 150;  
Magic Number,PAK_Command_Editor.MacrosEditor,MacrosesEditorForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\MacrosesEditorForm.cs,BindMacrosesGrid,The following statement contains a magic number: this.gvMacros.Columns [1].Width = 300;  
Magic Number,PAK_Command_Editor.MacrosEditor,MacrosesEditorForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\MacrosesEditorForm.cs,ResizeGrid,The following statement contains a magic number: for (int i = 0; i < dataGrid.ColumnCount; i++)  	if (dataGrid.Columns [i].Visible) {  		columnWidth = (dataGrid.Columns [i].Width * mul + 50) / 100;  		dataGrid.Columns [i].Width = Math.Max (columnWidth' dataGrid.Columns [i].MinimumWidth);  		total += dataGrid.Columns [i].Width;  		lastVisibleCol = dataGrid.Columns [i];  	}  
Magic Number,PAK_Command_Editor.MacrosEditor,MacrosesEditorForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\MacrosesEditorForm.cs,ResizeGrid,The following statement contains a magic number: for (int i = 0; i < dataGrid.ColumnCount; i++)  	if (dataGrid.Columns [i].Visible) {  		columnWidth = (dataGrid.Columns [i].Width * mul + 50) / 100;  		dataGrid.Columns [i].Width = Math.Max (columnWidth' dataGrid.Columns [i].MinimumWidth);  		total += dataGrid.Columns [i].Width;  		lastVisibleCol = dataGrid.Columns [i];  	}  
Magic Number,PAK_Command_Editor.MacrosEditor,MacrosesEditorForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\MacrosesEditorForm.cs,ResizeGrid,The following statement contains a magic number: if (dataGrid.Columns [i].Visible) {  	columnWidth = (dataGrid.Columns [i].Width * mul + 50) / 100;  	dataGrid.Columns [i].Width = Math.Max (columnWidth' dataGrid.Columns [i].MinimumWidth);  	total += dataGrid.Columns [i].Width;  	lastVisibleCol = dataGrid.Columns [i];  }  
Magic Number,PAK_Command_Editor.MacrosEditor,MacrosesEditorForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\MacrosesEditorForm.cs,ResizeGrid,The following statement contains a magic number: if (dataGrid.Columns [i].Visible) {  	columnWidth = (dataGrid.Columns [i].Width * mul + 50) / 100;  	dataGrid.Columns [i].Width = Math.Max (columnWidth' dataGrid.Columns [i].MinimumWidth);  	total += dataGrid.Columns [i].Width;  	lastVisibleCol = dataGrid.Columns [i];  }  
Magic Number,PAK_Command_Editor.MacrosEditor,MacrosesEditorForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\MacrosesEditorForm.cs,ResizeGrid,The following statement contains a magic number: columnWidth = (dataGrid.Columns [i].Width * mul + 50) / 100;  
Magic Number,PAK_Command_Editor.MacrosEditor,MacrosesEditorForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\MacrosesEditorForm.cs,ResizeGrid,The following statement contains a magic number: columnWidth = (dataGrid.Columns [i].Width * mul + 50) / 100;  
Magic Number,PAK_Command_Editor.Settings,COMPortSettingsForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Settings\COMPortSettingsForm.cs,BindPortBand,The following statement contains a magic number: this.cbPortBand.Items.Add (300);  
Magic Number,PAK_Command_Editor.Settings,COMPortSettingsForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Settings\COMPortSettingsForm.cs,BindPortBand,The following statement contains a magic number: this.cbPortBand.Items.Add (600);  
Magic Number,PAK_Command_Editor.Settings,COMPortSettingsForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Settings\COMPortSettingsForm.cs,BindPortBand,The following statement contains a magic number: this.cbPortBand.Items.Add (1200);  
Magic Number,PAK_Command_Editor.Settings,COMPortSettingsForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Settings\COMPortSettingsForm.cs,BindPortBand,The following statement contains a magic number: this.cbPortBand.Items.Add (2400);  
Magic Number,PAK_Command_Editor.Settings,COMPortSettingsForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Settings\COMPortSettingsForm.cs,BindPortBand,The following statement contains a magic number: this.cbPortBand.Items.Add (9600);  
Magic Number,PAK_Command_Editor.Settings,COMPortSettingsForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Settings\COMPortSettingsForm.cs,BindPortBand,The following statement contains a magic number: this.cbPortBand.Items.Add (14400);  
Magic Number,PAK_Command_Editor.Settings,COMPortSettingsForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Settings\COMPortSettingsForm.cs,BindPortBand,The following statement contains a magic number: this.cbPortBand.Items.Add (19200);  
Magic Number,PAK_Command_Editor.Settings,COMPortSettingsForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Settings\COMPortSettingsForm.cs,BindPortBand,The following statement contains a magic number: this.cbPortBand.Items.Add (38400);  
Magic Number,PAK_Command_Editor.Settings,COMPortSettingsForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Settings\COMPortSettingsForm.cs,BindPortBand,The following statement contains a magic number: this.cbPortBand.Items.Add (57600);  
Magic Number,PAK_Command_Editor.Settings,COMPortSettingsForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Settings\COMPortSettingsForm.cs,BindPortBand,The following statement contains a magic number: this.cbPortBand.Items.Add (115200);  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,BindSignalsGrid,The following statement contains a magic number: this.gvAvailableSignals.ColumnCount = 5;  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,BindSignalsGrid,The following statement contains a magic number: this.gvAvailableSignals.Columns [2].Name = "DeviceName";  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,BindSignalsGrid,The following statement contains a magic number: this.gvAvailableSignals.Columns [2].HeaderText = DG_DEVICE_NAME;  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,BindSignalsGrid,The following statement contains a magic number: this.gvAvailableSignals.Columns [2].DataPropertyName = "DeviceName";  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,BindSignalsGrid,The following statement contains a magic number: this.gvAvailableSignals.Columns [3].Name = "VendorName";  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,BindSignalsGrid,The following statement contains a magic number: this.gvAvailableSignals.Columns [3].HeaderText = DG_VENDOR_NAME;  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,BindSignalsGrid,The following statement contains a magic number: this.gvAvailableSignals.Columns [3].DataPropertyName = "VendorName";  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,BindSignalsGrid,The following statement contains a magic number: this.gvAvailableSignals.Columns [4].Name = "HEXCode";  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,BindSignalsGrid,The following statement contains a magic number: this.gvAvailableSignals.Columns [4].HeaderText = DG_HEX_CODE;  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,BindSignalsGrid,The following statement contains a magic number: this.gvAvailableSignals.Columns [4].DataPropertyName = "HEXCode";  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,ResizeGrid,The following statement contains a magic number: for (int i = 0; i < dataGrid.ColumnCount; i++)  	if (dataGrid.Columns [i].Visible) {  		columnWidth = (dataGrid.Columns [i].Width * mul + 50) / 100;  		dataGrid.Columns [i].Width = Math.Max (columnWidth' dataGrid.Columns [i].MinimumWidth);  		total += dataGrid.Columns [i].Width;  		lastVisibleCol = dataGrid.Columns [i];  	}  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,ResizeGrid,The following statement contains a magic number: for (int i = 0; i < dataGrid.ColumnCount; i++)  	if (dataGrid.Columns [i].Visible) {  		columnWidth = (dataGrid.Columns [i].Width * mul + 50) / 100;  		dataGrid.Columns [i].Width = Math.Max (columnWidth' dataGrid.Columns [i].MinimumWidth);  		total += dataGrid.Columns [i].Width;  		lastVisibleCol = dataGrid.Columns [i];  	}  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,ResizeGrid,The following statement contains a magic number: if (dataGrid.Columns [i].Visible) {  	columnWidth = (dataGrid.Columns [i].Width * mul + 50) / 100;  	dataGrid.Columns [i].Width = Math.Max (columnWidth' dataGrid.Columns [i].MinimumWidth);  	total += dataGrid.Columns [i].Width;  	lastVisibleCol = dataGrid.Columns [i];  }  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,ResizeGrid,The following statement contains a magic number: if (dataGrid.Columns [i].Visible) {  	columnWidth = (dataGrid.Columns [i].Width * mul + 50) / 100;  	dataGrid.Columns [i].Width = Math.Max (columnWidth' dataGrid.Columns [i].MinimumWidth);  	total += dataGrid.Columns [i].Width;  	lastVisibleCol = dataGrid.Columns [i];  }  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,ResizeGrid,The following statement contains a magic number: columnWidth = (dataGrid.Columns [i].Width * mul + 50) / 100;  
Magic Number,PAK_Command_Editor.SignalsCatalog,SignalsCatalogViewForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\SignalsCatalog\SignalsCatalogViewForm.cs,ResizeGrid,The following statement contains a magic number: columnWidth = (dataGrid.Columns [i].Width * mul + 50) / 100;  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,StringToByteArray,The following statement contains a magic number: return strBytes.Select (x => Convert.ToByte (x.Substring (2' 2)' 16)).ToArray ();  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,StringToByteArray,The following statement contains a magic number: return strBytes.Select (x => Convert.ToByte (x.Substring (2' 2)' 16)).ToArray ();  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,StringToByteArray,The following statement contains a magic number: return strBytes.Select (x => Convert.ToByte (x.Substring (2' 2)' 16)).ToArray ();  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,WordsStringToByteArray,The following statement contains a magic number: foreach (String s in strBytes) {  	bytes.Add (Convert.ToByte (s.Substring (0' 2)' 16));  	bytes.Add (Convert.ToByte (s.Substring (2' 2)' 16));  }  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,WordsStringToByteArray,The following statement contains a magic number: foreach (String s in strBytes) {  	bytes.Add (Convert.ToByte (s.Substring (0' 2)' 16));  	bytes.Add (Convert.ToByte (s.Substring (2' 2)' 16));  }  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,WordsStringToByteArray,The following statement contains a magic number: foreach (String s in strBytes) {  	bytes.Add (Convert.ToByte (s.Substring (0' 2)' 16));  	bytes.Add (Convert.ToByte (s.Substring (2' 2)' 16));  }  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,WordsStringToByteArray,The following statement contains a magic number: foreach (String s in strBytes) {  	bytes.Add (Convert.ToByte (s.Substring (0' 2)' 16));  	bytes.Add (Convert.ToByte (s.Substring (2' 2)' 16));  }  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,WordsStringToByteArray,The following statement contains a magic number: foreach (String s in strBytes) {  	bytes.Add (Convert.ToByte (s.Substring (0' 2)' 16));  	bytes.Add (Convert.ToByte (s.Substring (2' 2)' 16));  }  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,WordsStringToByteArray,The following statement contains a magic number: bytes.Add (Convert.ToByte (s.Substring (0' 2)' 16));  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,WordsStringToByteArray,The following statement contains a magic number: bytes.Add (Convert.ToByte (s.Substring (0' 2)' 16));  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,WordsStringToByteArray,The following statement contains a magic number: bytes.Add (Convert.ToByte (s.Substring (2' 2)' 16));  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,WordsStringToByteArray,The following statement contains a magic number: bytes.Add (Convert.ToByte (s.Substring (2' 2)' 16));  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,WordsStringToByteArray,The following statement contains a magic number: bytes.Add (Convert.ToByte (s.Substring (2' 2)' 16));  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,ByteArrayToSignalWordsString,The following statement contains a magic number: return ByteArrayToSignalWordsString (byteArray' 0' byteArray.Length - 2);  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,ByteArrayToSignalWordsString,The following statement contains a magic number: for (Int32 i = 0; i < length; i++) {  	if ((i > 0) && (i % 2 == 0) && (i != tmpArr.Length - 1)) {  		wordSb.Append (" ");  	}  	wordSb.Append (tmpArr [i].ToString ("X2"));  }  
Magic Number,PAK_Command_Editor.Utilities,PAKConversionUtilities,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\Utilities\PAKConversionUtilities.cs,ByteArrayToSignalWordsString,The following statement contains a magic number: if ((i > 0) && (i % 2 == 0) && (i != tmpArr.Length - 1)) {  	wordSb.Append (" ");  }  
Missing Default,PAK_Command_Editor.HardwareInteractionModule,PAKMacrosConverter,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKMacrosConverter.cs,ParamsToByteArray,The following switch statement is missing a default case: switch (commnadType) {  case MacrosCommandType.DELAY:  	String delayString = command.Params [0];  	Int32 delay;  	if (Int32.TryParse (delayString' out delay)) {  		result.AddRange (PAKConversionUtilities.Int32ToByteArray (delay));  	}  	break;  case MacrosCommandType.SET:  case MacrosCommandType.RESET:  case MacrosCommandType.IF:  	result.AddRange (PAKConversionUtilities.StringToASCIIByteCodesArray (command.Params [0]));  	break;  case MacrosCommandType.SEND:  	result.AddRange (SendParamsToByteArray (command.Params));  	break;  }  
Missing Default,PAK_Command_Editor.HardwareInteractionModule,PAKMacrosConverter,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\HardwareInteractionModule\PAKMacrosConverter.cs,GetParamsFromByteArray,The following switch statement is missing a default case: switch (commnadType) {  case MacrosCommandType.DELAY:  	if (commandsData.Length >= (index + INT32_PARAM_SIZE)) {  		Int32 delay = PAKConversionUtilities.ByteArrayToInt32 (commandsData' index);  		index += INT32_PARAM_SIZE;  		parameters.Add (delay.ToString ());  		break;  	}  	else  		return null;  case MacrosCommandType.SET:  case MacrosCommandType.RESET:  case MacrosCommandType.IF:  	if (commandsData.Length >= (index + STR_PARAM_SIZE)) {  		String globalVarAlias = PAKConversionUtilities.ASCIIByteArrayToString (commandsData' index' STR_PARAM_SIZE);  		globalVarAlias = globalVarAlias.Trim ("\0".ToArray ());  		index += STR_PARAM_SIZE;  		parameters.Add (globalVarAlias);  		break;  	}  	else  		return null;  case MacrosCommandType.SEND:  	return GetSendParamsFromByteArray (commandsData' ref index);  }  
Missing Default,PAK_Command_Editor.MacrosEditor,SelectCommandTypeForm,C:\repos\dazmodel_PAKConfig\PAK_Command_Editor\MacrosEditor\SelectCommandTypeForm.cs,btnSetCommandType_Click,The following switch statement is missing a default case: switch (commandType) {  case MacrosCommandType.DELAY:  	AddDelayCommandForm addDelay = new AddDelayCommandForm (this._editor);  	addDelay.ShowDialog ();  	break;  case MacrosCommandType.SET:  	AddSetResetCommandForm setForm = new AddSetResetCommandForm (this._editor' MacrosCommandType.SET);  	setForm.ShowDialog ();  	break;  case MacrosCommandType.RESET:  	AddSetResetCommandForm resetForm = new AddSetResetCommandForm (this._editor' MacrosCommandType.RESET);  	resetForm.ShowDialog ();  	break;  case MacrosCommandType.SEND:  	AddSendCommandForm sendForm = new AddSendCommandForm (this._editor);  	sendForm.ShowDialog ();  	break;  case MacrosCommandType.IF:  	AddIfCommandForm ifForm = new AddIfCommandForm (this._editor);  	ifForm.ShowDialog ();  	break;  }  
