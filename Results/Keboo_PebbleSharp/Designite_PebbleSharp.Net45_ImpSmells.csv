Implementation smell,Namespace,Class,File,Method,Description
Magic Number,PebbleSharp.Net45,PebbleNet45,C:\repos\Keboo_PebbleSharp\PebbleSharp.Net45\PebbleNet45.cs,DetectPebbles,The following statement contains a magic number: var bluetoothDevices = client.DiscoverDevices( 20' true' false' false ).                  Where( bdi => bdi.DeviceName.StartsWith( "Pebble " ) ).ToList();
Magic Number,PebbleSharp.Net45,PebbleNet45,C:\repos\Keboo_PebbleSharp\PebbleSharp.Net45\PebbleNet45.cs,DetectPebbles,The following statement contains a magic number: return ( from device in bluetoothDevices                       select (Pebble)new PebbleNet45( new PebbleBluetoothConnection( device )'                           device.DeviceName.Substring( 7 ) ) ).ToList();
Magic Number,PebbleSharp.Net45,PebbleBluetoothConnection,C:\repos\Keboo_PebbleSharp\PebbleSharp.Net45\PebbleNet45.cs,CheckForData,The following statement contains a magic number: try                  {                      while ( true )                      {                          if ( _tokenSource.IsCancellationRequested )                              return;                            if ( _networkStream.CanRead && _networkStream.DataAvailable )                          {                              var buffer = new byte[256];                              var numRead = _networkStream.Read( buffer' 0' buffer.Length );                              Array.Resize( ref buffer' numRead );                              DataReceived( this' new BytesReceivedEventArgs( buffer ) );                          }                            if ( _tokenSource.IsCancellationRequested )                              return;                          await Task.Delay( 10 );                      }                  }                  catch ( Exception ex )                  {                      Debug.WriteLine( ex );                  }
Magic Number,PebbleSharp.Net45,PebbleBluetoothConnection,C:\repos\Keboo_PebbleSharp\PebbleSharp.Net45\PebbleNet45.cs,CheckForData,The following statement contains a magic number: try                  {                      while ( true )                      {                          if ( _tokenSource.IsCancellationRequested )                              return;                            if ( _networkStream.CanRead && _networkStream.DataAvailable )                          {                              var buffer = new byte[256];                              var numRead = _networkStream.Read( buffer' 0' buffer.Length );                              Array.Resize( ref buffer' numRead );                              DataReceived( this' new BytesReceivedEventArgs( buffer ) );                          }                            if ( _tokenSource.IsCancellationRequested )                              return;                          await Task.Delay( 10 );                      }                  }                  catch ( Exception ex )                  {                      Debug.WriteLine( ex );                  }
