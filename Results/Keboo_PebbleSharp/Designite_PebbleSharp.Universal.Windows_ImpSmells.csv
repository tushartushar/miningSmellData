Implementation smell,Namespace,Class,File,Method,Description
Long Statement,PebbleSharp.Universal.Universal.Common,SuspensionManager,C:\repos\Keboo_PebbleSharp\Demo\PebbleSharp.Universal\PebbleSharp.Universal.Shared\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "                StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(SESSION_STATE_FILENAME' CreationCollisionOption.ReplaceExisting); " is 142.
Long Statement,PebbleSharp.Universal.Universal.Common,SuspensionManager,C:\repos\Keboo_PebbleSharp\Demo\PebbleSharp.Universal\PebbleSharp.Universal.Shared\Common\SuspensionManager.cs,RestoreAsync,The length of the statement  "                    if (weakFrameReference.TryGetTarget(out frame) && (string)frame.GetValue(FrameSessionBaseKeyProperty) == sessionBaseKey) " is 120.
Long Statement,PebbleSharp.Universal.Universal.Common,SuspensionManager,C:\repos\Keboo_PebbleSharp\Demo\PebbleSharp.Universal\PebbleSharp.Universal.Shared\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Complex Conditional,PebbleSharp.Universal.Universal.Common,NavigationHelper,C:\repos\Keboo_PebbleSharp\Demo\PebbleSharp.Universal\PebbleSharp.Universal.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "( e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown ) &&                  ( virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167 )"  is complex.
Complex Conditional,PebbleSharp.Universal.Universal.Common,NavigationHelper,C:\repos\Keboo_PebbleSharp\Demo\PebbleSharp.Universal\PebbleSharp.Universal.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "( (int)virtualKey == 166 && noModifiers ) ||                      ( virtualKey == VirtualKey.Left && onlyAlt )"  is complex.
Complex Conditional,PebbleSharp.Universal.Universal.Common,NavigationHelper,C:\repos\Keboo_PebbleSharp\Demo\PebbleSharp.Universal\PebbleSharp.Universal.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "( (int)virtualKey == 167 && noModifiers ) ||                      ( virtualKey == VirtualKey.Right && onlyAlt )"  is complex.
Magic Number,PebbleSharp.Universal.Universal.Common,NavigationHelper,C:\repos\Keboo_PebbleSharp\Demo\PebbleSharp.Universal\PebbleSharp.Universal.Shared\Common\NavigationHelper.cs,NavigationHelper,The following statement contains a magic number: Page.Loaded += ( sender' e ) =>              {  #if WINDOWS_PHONE_APP                  Windows.Phone.UI.Input.HardwareButtons.BackPressed += HardwareButtons_BackPressed;  #else                  // Keyboard and mouse navigation only apply when occupying the entire window                  const double tolerance = 0.001;                  if ( Math.Abs( Page.ActualHeight - Window.Current.Bounds.Height ) < tolerance &&                      Math.Abs( Page.ActualWidth - Window.Current.Bounds.Width ) < tolerance )                  {                      // Listen to the window directly so focus isn't required                      Window.Current.CoreWindow.Dispatcher.AcceleratorKeyActivated +=                          CoreDispatcher_AcceleratorKeyActivated;                      Window.Current.CoreWindow.PointerPressed +=                          CoreWindow_PointerPressed;                  }  #endif              };
Magic Number,PebbleSharp.Universal.Universal.Common,NavigationHelper,C:\repos\Keboo_PebbleSharp\Demo\PebbleSharp.Universal\PebbleSharp.Universal.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ( ( e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown ) &&                  ( virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167 ) )              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = ( coreWindow.GetKeyState( VirtualKey.Menu ) & downState ) == downState;                  bool controlKey = ( coreWindow.GetKeyState( VirtualKey.Control ) & downState ) == downState;                  bool shiftKey = ( coreWindow.GetKeyState( VirtualKey.Shift ) & downState ) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if ( ( (int)virtualKey == 166 && noModifiers ) ||                      ( virtualKey == VirtualKey.Left && onlyAlt ) )                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      GoBackCommand.Execute( null );                  }                  else if ( ( (int)virtualKey == 167 && noModifiers ) ||                      ( virtualKey == VirtualKey.Right && onlyAlt ) )                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      GoForwardCommand.Execute( null );                  }              }
Magic Number,PebbleSharp.Universal.Universal.Common,NavigationHelper,C:\repos\Keboo_PebbleSharp\Demo\PebbleSharp.Universal\PebbleSharp.Universal.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ( ( e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown ) &&                  ( virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167 ) )              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = ( coreWindow.GetKeyState( VirtualKey.Menu ) & downState ) == downState;                  bool controlKey = ( coreWindow.GetKeyState( VirtualKey.Control ) & downState ) == downState;                  bool shiftKey = ( coreWindow.GetKeyState( VirtualKey.Shift ) & downState ) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if ( ( (int)virtualKey == 166 && noModifiers ) ||                      ( virtualKey == VirtualKey.Left && onlyAlt ) )                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      GoBackCommand.Execute( null );                  }                  else if ( ( (int)virtualKey == 167 && noModifiers ) ||                      ( virtualKey == VirtualKey.Right && onlyAlt ) )                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      GoForwardCommand.Execute( null );                  }              }
Magic Number,PebbleSharp.Universal.Universal.Common,NavigationHelper,C:\repos\Keboo_PebbleSharp\Demo\PebbleSharp.Universal\PebbleSharp.Universal.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ( ( e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown ) &&                  ( virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167 ) )              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = ( coreWindow.GetKeyState( VirtualKey.Menu ) & downState ) == downState;                  bool controlKey = ( coreWindow.GetKeyState( VirtualKey.Control ) & downState ) == downState;                  bool shiftKey = ( coreWindow.GetKeyState( VirtualKey.Shift ) & downState ) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if ( ( (int)virtualKey == 166 && noModifiers ) ||                      ( virtualKey == VirtualKey.Left && onlyAlt ) )                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      GoBackCommand.Execute( null );                  }                  else if ( ( (int)virtualKey == 167 && noModifiers ) ||                      ( virtualKey == VirtualKey.Right && onlyAlt ) )                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      GoForwardCommand.Execute( null );                  }              }
Magic Number,PebbleSharp.Universal.Universal.Common,NavigationHelper,C:\repos\Keboo_PebbleSharp\Demo\PebbleSharp.Universal\PebbleSharp.Universal.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ( ( e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown ) &&                  ( virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167 ) )              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = ( coreWindow.GetKeyState( VirtualKey.Menu ) & downState ) == downState;                  bool controlKey = ( coreWindow.GetKeyState( VirtualKey.Control ) & downState ) == downState;                  bool shiftKey = ( coreWindow.GetKeyState( VirtualKey.Shift ) & downState ) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if ( ( (int)virtualKey == 166 && noModifiers ) ||                      ( virtualKey == VirtualKey.Left && onlyAlt ) )                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      GoBackCommand.Execute( null );                  }                  else if ( ( (int)virtualKey == 167 && noModifiers ) ||                      ( virtualKey == VirtualKey.Right && onlyAlt ) )                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      GoForwardCommand.Execute( null );                  }              }
Magic Number,PebbleSharp.Universal.Universal.ViewModels,InfoViewModel,C:\repos\Keboo_PebbleSharp\Demo\PebbleSharp.Universal\PebbleSharp.Universal.Shared\ViewModels\InfoViewModel.cs,GetPebbleTimeAsyc,The following statement contains a magic number: if ( timeResponse.Success )              {                  var differece = timeResponse.Time - current;                  if ( differece < TimeSpan.FromSeconds( 2 ) )                  {                      TimeDisplay = "Pebble time is in sync with the phone";                  }                  else                  {                      TimeDisplay = string.Format( "Pebble is {0} {1} than the phone"' differece.ToString( @"h\:mm\:ss" )'                          timeResponse.Time > current ? "faster" : "slower" );                  }              }              else              {                  TimeDisplay = "Failed to get time from Pebble: " + timeResponse.ErrorMessage;              }
