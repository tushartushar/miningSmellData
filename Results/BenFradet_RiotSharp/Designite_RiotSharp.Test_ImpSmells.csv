Implementation smell,Namespace,Class,File,Method,Description
Long Statement,RiotSharp.Test,RiotApiExceptionTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RiotApiExceptionTest.cs,GetSummoner_ShouldThrowRiotSharpException_Test,The length of the statement  "            FaultyApi.Summoner.GetSummonerBySummonerIdAsync(CommonTestBase.Summoner1And2Region' CommonTestBase.Summoner1Id).GetAwaiter().GetResult(); " is 137.
Long Statement,RiotSharp.Test,RiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RiotApiTest.cs,GetLeagueEntriesBySummonerAsync_Test,The length of the statement  "                var leagues = Api.League.GetLeagueEntriesBySummonerAsync(RiotApiTestBase.SummonersRegion' RiotApiTestBase.SummonerIds.FirstOrDefault()); " is 136.
Long Statement,RiotSharp.Test,RiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RiotApiTest.cs,GetLeagueGrandmastersByQueueAsync_Test,The length of the statement  "                var leagues = Api.League.GetLeagueGrandmastersByQueueAsync(RiotApiTestBase.SummonersRegion' RiotSharp.Misc.Queue.RankedSolo5x5); " is 128.
Long Statement,RiotSharp.Test,RiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RiotApiTest.cs,GetCurrentGameAsync_Test,The length of the statement  "                var currentGame = Api.Spectator.GetCurrentGameAsync(RiotSharp.Misc.Region.Euw' "w1_k11kGq3N2zydfKN5xc7XcGwv-4jrnJJGsuQfHJmDFVFs").Result; " is 137.
Magic Number,RiotSharp.Test,CacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\CacheTest.cs,AddGet_TimeSpan_ShouldAddToTheCache_Test,The following statement contains a magic number: cache.Add(CacheTestBase.TestKey' CacheTestBase.TestValue' new TimeSpan(0' 5' 0));
Magic Number,RiotSharp.Test,CacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\CacheTest.cs,AddGet_TimeSpan_ShouldAddAndExpire_Test,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,RiotSharp.Test,CacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\CacheTest.cs,AddGet_DateTime_ShouldAdd_Test,The following statement contains a magic number: cache.Add(CacheTestBase.TestKey' CacheTestBase.TestValue' DateTime.Now + new TimeSpan(0' 5' 0));
Magic Number,RiotSharp.Test,CacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\CacheTest.cs,AddGet_DateTime_ShouldAddAndExpire_Test,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,RiotSharp.Test,CacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\CacheTest.cs,Keys_ShouldGetAllKeys_Test,The following statement contains a magic number: Assert.AreEqual(2' keys.Count);
Magic Number,RiotSharp.Test,CacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\CacheTest.cs,Values_ShouldGetAllValues_Test,The following statement contains a magic number: Assert.AreEqual(2' values.Count);
Magic Number,RiotSharp.Test,CacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\CacheTest.cs,Count_ShouldGiveProperResults_Test,The following statement contains a magic number: cache.Add(CacheTestBase.TestKey' CacheTestBase.TestValue' new TimeSpan(0' 5' 0));
Magic Number,RiotSharp.Test,CacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\CacheTest.cs,Count_ShouldGiveProperResults_Test,The following statement contains a magic number: cache.Add(CacheTestBase.TestKey' CacheTestBase.TestValue' new TimeSpan(0' 5' 0));
Magic Number,RiotSharp.Test,CacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\CacheTest.cs,Count_ShouldGiveProperResults_Test,The following statement contains a magic number: cache.Add("otherKey"' CacheTestBase.TestValue' new TimeSpan(0' 5' 0));
Magic Number,RiotSharp.Test,CacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\CacheTest.cs,Count_ShouldGiveProperResults_Test,The following statement contains a magic number: Assert.AreEqual(2' cache.Count());
Magic Number,RiotSharp.Test,MemoryCacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\MemoryCacheTest.cs,AddGet_TimeSpan_ShouldAddToTheCache_Test,The following statement contains a magic number: cache.Add(CacheTestBase.TestKey' CacheTestBase.TestValue' new TimeSpan(0' 5' 0));
Magic Number,RiotSharp.Test,MemoryCacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\MemoryCacheTest.cs,AddGet_TimeSpan_ShouldAddAndExpire_Test,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,RiotSharp.Test,MemoryCacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\MemoryCacheTest.cs,AddGet_DateTime_ShouldAdd_Test,The following statement contains a magic number: cache.Add(CacheTestBase.TestKey' CacheTestBase.TestValue' DateTime.Now + new TimeSpan(0' 5' 0));
Magic Number,RiotSharp.Test,MemoryCacheTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\MemoryCacheTest.cs,AddGet_DateTime_ShouldAddAndExpire_Test,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,Initialize,The following statement contains a magic number: RateLimiter = new RateLimiter(new Dictionary<TimeSpan' int>              {                  [TimeSpan.FromSeconds(10)] = Limit              });
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,HandleRateLimitAsync_ThrowOnDelay_ThrowsException,The following statement contains a magic number: var exception = Assert.ThrowsException<AggregateException>(action: () =>              {                  for (int i = 0; i < 2; i++)                  {                      rateLimiter.HandleRateLimitAsync().Wait();                  }              });
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,HandleRateLimitAsync_NotThrowOnDelay_NoException,The following statement contains a magic number: i < 2
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,ManyRequestsAsync,The following statement contains a magic number: var tasks = Enumerable.Range(0' Limit*3).Select(i => RateLimiter.HandleRateLimitAsync()                  .ContinueWith(task => {                      AssertDelayed(TimeSpan.FromTicks(i / Limit * TenSeconds.Ticks)' i);                  })).ToList();
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,DelayedRequestsAsync,The following statement contains a magic number: var tasks = Enumerable.Range(Limit * 2' Limit).Select(i => Task.Delay(expectedDelayed)                  .ContinueWith(task => RateLimiter.HandleRateLimitAsync())                  .ContinueWith(task =>                  {                      AssertDelayed(expectedDelayed' i);                  })).ToList();
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,AlternatingRequestsAsync,The following statement contains a magic number: var expectedDelayed = TimeSpan.FromTicks(TenSeconds.Ticks * 2);
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,AlternatingRequestsAsync,The following statement contains a magic number: var tasks = Enumerable.Range(Limit*2' Limit).Select(i => Task.Delay(expectedDelayed)                  .ContinueWith(task => RateLimiter.HandleRateLimitAsync())                  .ContinueWith(task =>                  {                      AssertDelayed(expectedDelayed' i);                  })).ToList();
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15Async,The following statement contains a magic number: var tasks = Enumerable.Range(0' 5).Select(i => RateLimiter.HandleRateLimitAsync()                  .ContinueWith(t => AssertDelayed(TimeSpan.Zero' i))).ToList();
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15Async,The following statement contains a magic number: var fiveSeconds = TimeSpan.FromSeconds(5);
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15Async,The following statement contains a magic number: tasks.AddRange(Enumerable.Range(5' 10).Select(i => RateLimiter.HandleRateLimitAsync()                  .ContinueWith(t => AssertDelayed(i < 10 ? fiveSeconds : TenSeconds' i))));
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15Async,The following statement contains a magic number: tasks.AddRange(Enumerable.Range(5' 10).Select(i => RateLimiter.HandleRateLimitAsync()                  .ContinueWith(t => AssertDelayed(i < 10 ? fiveSeconds : TenSeconds' i))));
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15Async,The following statement contains a magic number: tasks.AddRange(Enumerable.Range(5' 10).Select(i => RateLimiter.HandleRateLimitAsync()                  .ContinueWith(t => AssertDelayed(i < 10 ? fiveSeconds : TenSeconds' i))));
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15InlineAsync,The following statement contains a magic number: var tasks = Enumerable.Range(0' 5).Select(async i => {                  await RateLimiter.HandleRateLimitAsync();                  counts[Stopwatch.Elapsed.Seconds / 10]++;              }).ToList();
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15InlineAsync,The following statement contains a magic number: var tasks = Enumerable.Range(0' 5).Select(async i => {                  await RateLimiter.HandleRateLimitAsync();                  counts[Stopwatch.Elapsed.Seconds / 10]++;              }).ToList();
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15InlineAsync,The following statement contains a magic number: var fiveSeconds = TimeSpan.FromSeconds(5);
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15InlineAsync,The following statement contains a magic number: tasks.AddRange(Enumerable.Range(5' 10).Select(async i =>              {                  await Task.Delay(fiveSeconds);                  await RateLimiter.HandleRateLimitAsync();                  counts[Stopwatch.Elapsed.Seconds / 10]++;              }));
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15InlineAsync,The following statement contains a magic number: tasks.AddRange(Enumerable.Range(5' 10).Select(async i =>              {                  await Task.Delay(fiveSeconds);                  await RateLimiter.HandleRateLimitAsync();                  counts[Stopwatch.Elapsed.Seconds / 10]++;              }));
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15InlineAsync,The following statement contains a magic number: tasks.AddRange(Enumerable.Range(5' 10).Select(async i =>              {                  await Task.Delay(fiveSeconds);                  await RateLimiter.HandleRateLimitAsync();                  counts[Stopwatch.Elapsed.Seconds / 10]++;              }));
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15InlineAsync,The following statement contains a magic number: Assert.AreEqual(10' counts[0]);
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15InlineAsync,The following statement contains a magic number: Assert.AreEqual(5' counts[1]);
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests15InlineAsync,The following statement contains a magic number: Assert.AreEqual(0' counts[2]);
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests30InlineAsync,The following statement contains a magic number: var tasks = Enumerable.Range(15' 15).Select(async i =>              {                  await Task.Delay(TenSeconds);                  await RateLimiter.HandleRateLimitAsync();                  counts[Stopwatch.Elapsed.Seconds / 10]++;              }).ToList();
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests30InlineAsync,The following statement contains a magic number: var tasks = Enumerable.Range(15' 15).Select(async i =>              {                  await Task.Delay(TenSeconds);                  await RateLimiter.HandleRateLimitAsync();                  counts[Stopwatch.Elapsed.Seconds / 10]++;              }).ToList();
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests30InlineAsync,The following statement contains a magic number: var tasks = Enumerable.Range(15' 15).Select(async i =>              {                  await Task.Delay(TenSeconds);                  await RateLimiter.HandleRateLimitAsync();                  counts[Stopwatch.Elapsed.Seconds / 10]++;              }).ToList();
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests30InlineAsync,The following statement contains a magic number: tasks.AddRange(Enumerable.Range(0' 15).Select(async i =>              {                  await RateLimiter.HandleRateLimitAsync();                  counts[Stopwatch.Elapsed.Seconds / 10]++;              }));
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests30InlineAsync,The following statement contains a magic number: tasks.AddRange(Enumerable.Range(0' 15).Select(async i =>              {                  await RateLimiter.HandleRateLimitAsync();                  counts[Stopwatch.Elapsed.Seconds / 10]++;              }));
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests30InlineAsync,The following statement contains a magic number: Assert.AreEqual(10' counts[0]);
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests30InlineAsync,The following statement contains a magic number: Assert.AreEqual(10' counts[1]);
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests30InlineAsync,The following statement contains a magic number: Assert.AreEqual(10' counts[2]);
Magic Number,RiotSharp.Test,RateLimiterTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RateLimiterTest.cs,MultipleManyRequests30InlineAsync,The following statement contains a magic number: Assert.AreEqual(10' counts[2]);
Magic Number,RiotSharp.Test,RiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RiotApiTest.cs,GetChampionRotationAsync_Test,The following statement contains a magic number: EnsureCredibility(() =>              {                  var championRotation = Api.Champion.GetChampionRotationAsync(Summoner1And2Region).Result;                    Assert.IsTrue(championRotation.FreeChampionIds.Count() == 14);                  Assert.IsTrue(championRotation.FreeChampionIdsForNewPlayers.Count() == 10);                  Assert.IsTrue(championRotation.MaxNewPlayerLevel > 0);              });
Magic Number,RiotSharp.Test,RiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RiotApiTest.cs,GetChampionRotationAsync_Test,The following statement contains a magic number: EnsureCredibility(() =>              {                  var championRotation = Api.Champion.GetChampionRotationAsync(Summoner1And2Region).Result;                    Assert.IsTrue(championRotation.FreeChampionIds.Count() == 14);                  Assert.IsTrue(championRotation.FreeChampionIdsForNewPlayers.Count() == 10);                  Assert.IsTrue(championRotation.MaxNewPlayerLevel > 0);              });
Magic Number,RiotSharp.Test,RiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RiotApiTest.cs,GetMatchTimelineAsync_Test,The following statement contains a magic number: EnsureCredibility(() =>              {                  var matchTimeline = Api.Match.GetMatchTimelineAsync(RiotApiTestBase.SummonersRegion' RiotApiTestBase.GameId).Result;                    Assert.IsNotNull(matchTimeline.Frames);                  Assert.IsTrue(matchTimeline.Frames.First().Timestamp == TimeSpan.FromMilliseconds(144));                  Assert.IsTrue(matchTimeline.FrameInterval == TimeSpan.FromMilliseconds(60000));              });
Magic Number,RiotSharp.Test,RiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RiotApiTest.cs,GetMatchTimelineAsync_Test,The following statement contains a magic number: EnsureCredibility(() =>              {                  var matchTimeline = Api.Match.GetMatchTimelineAsync(RiotApiTestBase.SummonersRegion' RiotApiTestBase.GameId).Result;                    Assert.IsNotNull(matchTimeline.Frames);                  Assert.IsTrue(matchTimeline.Frames.First().Timestamp == TimeSpan.FromMilliseconds(144));                  Assert.IsTrue(matchTimeline.FrameInterval == TimeSpan.FromMilliseconds(60000));              });
Magic Number,RiotSharp.Test,RiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\RiotApiTest.cs,GetMatchListAsync_Index_Test,The following statement contains a magic number: EnsureCredibility(() =>              {                  const int beginIndex = 0;                  const int endIndex = 32;                    var matches = Api.Match.GetMatchListAsync(RiotApiTestBase.SummonersRegion'                      RiotApiTestBase.Summoner1AccountId' null' null' null' null' null' beginIndex' endIndex).Result.Matches;                    Assert.IsTrue(matches.Count <= endIndex - beginIndex);              });
Magic Number,RiotSharp.Test,TournamentRiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\TournamentRiotApiTest.cs,CreateProviderAsync_CreateTournamentAsync_CreateTournamentCodeAsync_UpdateTournamentCodeAsync_Test,The following statement contains a magic number: EnsureCredibility(() =>              {                  var providerId = api.CreateProviderAsync(TournamentRegion' TournamentUrl).Result;                  var tournamentId = api.CreateTournamentAsync(providerId' TournamentName).Result;                  Assert.AreNotEqual(0' tournamentId);                  var tournamentCodes = api.CreateTournamentCodesAsync(tournamentId' 2' 5'                       tournamentSpectatorType'                      tournamentPickType' tournamentMapType).Result;                  Assert.AreEqual(2' tournamentCodes.Count);                    var tournamentCode = tournamentCodes[0];                  var tournamentCodeDetails = api.GetTournamentCodeDetailsAsync(tournamentCode).Result;                  var success = api.UpdateTournamentCodeAsync(tournamentCode' pickType: TournamentPickType.AllRandom'                      mapType: TournamentMapType.HowlingAbyss).Result;                    Assert.IsTrue(success);                  var tournamentCodeDetailsUpdated = api.GetTournamentCodeDetailsAsync(tournamentCode).Result;                  Assert.AreNotEqual(tournamentCodeDetails.PickType' tournamentCodeDetailsUpdated.PickType);                  Assert.AreNotEqual(tournamentCodeDetails.Map' tournamentCodeDetailsUpdated.Map);              });
Magic Number,RiotSharp.Test,TournamentRiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\TournamentRiotApiTest.cs,CreateProviderAsync_CreateTournamentAsync_CreateTournamentCodeAsync_UpdateTournamentCodeAsync_Test,The following statement contains a magic number: EnsureCredibility(() =>              {                  var providerId = api.CreateProviderAsync(TournamentRegion' TournamentUrl).Result;                  var tournamentId = api.CreateTournamentAsync(providerId' TournamentName).Result;                  Assert.AreNotEqual(0' tournamentId);                  var tournamentCodes = api.CreateTournamentCodesAsync(tournamentId' 2' 5'                       tournamentSpectatorType'                      tournamentPickType' tournamentMapType).Result;                  Assert.AreEqual(2' tournamentCodes.Count);                    var tournamentCode = tournamentCodes[0];                  var tournamentCodeDetails = api.GetTournamentCodeDetailsAsync(tournamentCode).Result;                  var success = api.UpdateTournamentCodeAsync(tournamentCode' pickType: TournamentPickType.AllRandom'                      mapType: TournamentMapType.HowlingAbyss).Result;                    Assert.IsTrue(success);                  var tournamentCodeDetailsUpdated = api.GetTournamentCodeDetailsAsync(tournamentCode).Result;                  Assert.AreNotEqual(tournamentCodeDetails.PickType' tournamentCodeDetailsUpdated.PickType);                  Assert.AreNotEqual(tournamentCodeDetails.Map' tournamentCodeDetailsUpdated.Map);              });
Magic Number,RiotSharp.Test,TournamentRiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\TournamentRiotApiTest.cs,CreateProviderAsync_CreateTournamentAsync_CreateTournamentCodeAsync_UpdateTournamentCodeAsync_Test,The following statement contains a magic number: EnsureCredibility(() =>              {                  var providerId = api.CreateProviderAsync(TournamentRegion' TournamentUrl).Result;                  var tournamentId = api.CreateTournamentAsync(providerId' TournamentName).Result;                  Assert.AreNotEqual(0' tournamentId);                  var tournamentCodes = api.CreateTournamentCodesAsync(tournamentId' 2' 5'                       tournamentSpectatorType'                      tournamentPickType' tournamentMapType).Result;                  Assert.AreEqual(2' tournamentCodes.Count);                    var tournamentCode = tournamentCodes[0];                  var tournamentCodeDetails = api.GetTournamentCodeDetailsAsync(tournamentCode).Result;                  var success = api.UpdateTournamentCodeAsync(tournamentCode' pickType: TournamentPickType.AllRandom'                      mapType: TournamentMapType.HowlingAbyss).Result;                    Assert.IsTrue(success);                  var tournamentCodeDetailsUpdated = api.GetTournamentCodeDetailsAsync(tournamentCode).Result;                  Assert.AreNotEqual(tournamentCodeDetails.PickType' tournamentCodeDetailsUpdated.PickType);                  Assert.AreNotEqual(tournamentCodeDetails.Map' tournamentCodeDetailsUpdated.Map);              });
Magic Number,RiotSharp.Test,TournamentRiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\TournamentRiotApiTest.cs,CreateTournamentCodesAsync_CountGreaterThan1000_ThrowsArgumentException,The following statement contains a magic number: EnsureCredibility(() =>              {                  try                  {                      // Act                       var tournamentCodes = api.CreateTournamentCodesAsync(0' 1001' 5' TournamentSpectatorType.All'                          TournamentPickType.TournamentDraft' TournamentMapType.SummonersRift).Result;                  }                  catch (AggregateException e)                  {                      // Assert                      Assert.IsInstanceOfType(e' typeof(AggregateException));                      Assert.IsInstanceOfType(e.InnerException' typeof(ArgumentException));                      var argumentException = (ArgumentException)e.InnerException;                      Assert.AreEqual("count"' argumentException.ParamName);                  }              });
Magic Number,RiotSharp.Test,TournamentRiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\TournamentRiotApiTest.cs,CreateTournamentCodesAsync_CountGreaterThan1000_ThrowsArgumentException,The following statement contains a magic number: EnsureCredibility(() =>              {                  try                  {                      // Act                       var tournamentCodes = api.CreateTournamentCodesAsync(0' 1001' 5' TournamentSpectatorType.All'                          TournamentPickType.TournamentDraft' TournamentMapType.SummonersRift).Result;                  }                  catch (AggregateException e)                  {                      // Assert                      Assert.IsInstanceOfType(e' typeof(AggregateException));                      Assert.IsInstanceOfType(e.InnerException' typeof(ArgumentException));                      var argumentException = (ArgumentException)e.InnerException;                      Assert.AreEqual("count"' argumentException.ParamName);                  }              });
Magic Number,RiotSharp.Test,TournamentRiotApiTest,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\TournamentRiotApiTest.cs,CreateTournamentCodesAsync_CountLessThan1_ThrowsArgumentException,The following statement contains a magic number: EnsureCredibility(() =>              {                  try                  {                      // Act                       var tournamentCodes = api.CreateTournamentCodesAsync(0' 0' 5' TournamentSpectatorType.All'                          TournamentPickType.TournamentDraft' TournamentMapType.SummonersRift).Result;                  }                  catch (AggregateException e)                  {                      // Assert                      Assert.IsInstanceOfType(e' typeof(AggregateException));                      Assert.IsInstanceOfType(e.InnerException' typeof(ArgumentException));                      var argumentException = (ArgumentException)e.InnerException;                      Assert.AreEqual("count"' argumentException.ParamName);                  }              });
Magic Number,RiotSharp.Test.EndpointTests,SpectatorEndpointTests,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\EndpointTests\SpectatorEndpointTests.cs,Initialize,The following statement contains a magic number: _currentGameResponse = new CurrentGame              {                  GameId = 1'                  GameLength = TimeSpan.FromSeconds(60)'                  GameMode = "GameMode"'                  GameQueueType = "Normal Draft"'                  GameType = GameType.MatchedGame'                  MapType = MapType.SummonersRift'                  GameStartTime = DateTime.Today'                  Platform = Platform.EUW1              };
Magic Number,RiotSharp.Test.EndpointTests,SpectatorEndpointTests,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\EndpointTests\SpectatorEndpointTests.cs,Initialize,The following statement contains a magic number: _featureGameResponse = new FeaturedGame              {                  GameId = 1'                  GameLength = TimeSpan.FromSeconds(60)'                  GameMode = "GameMode"'                  GameQueueType = "Normal Draft"'                  GameType = GameType.MatchedGame'                  MapType = MapType.SummonersRift'                  GameStartTime = DateTime.Today'                  Platform = Platform.EUW1              };
Magic Number,RiotSharp.Test.EndpointTests,SpectatorEndpointTests,D:\research\architectureSmells\repos\BenFradet_RiotSharp\RiotSharp.Test\EndpointTests\SpectatorEndpointTests.cs,Initialize,The following statement contains a magic number: _featuredGamesResponse = new FeaturedGames              {                  GameList = new List<FeaturedGame>                  {                      _featureGameResponse                  }'                  ClientRefreshInterval = 30              };
