Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,eZet.EveLib.EveXmlModule,Image,C:\repos\ezet_evelib\EveLib.EveXml\Image.cs,requestImageAsync,The method has 5 parameters. Parameters: relUri' id' size' extension' path
Long Statement,eZet.EveLib.EveXmlModule.RequestHandlers,EveXmlRequestHandler,C:\repos\ezet_evelib\EveLib.EveXml\RequestHandlers\EveXmlRequestHandler.cs,RequestAsync,The length of the statement  "                    throw new EveXmlException("Kill log exhausted (You can only fetch kills that are less than a month old)"' 119' new WebException("Unknown"' null' WebExceptionStatus.UnknownError' response)); " is 189.
Magic Number,eZet.EveLib.EveXmlModule,BaseEntity,C:\repos\ezet_evelib\EveLib.EveXml\BaseEntity.cs,generateQueryString,The following statement contains a magic number: for (var i = 0; i < args.Length; i += 2) {                  queryString += args[i] + "=" + args[i + 1] + "&";              }
Magic Number,eZet.EveLib.EveXmlModule,Character,C:\repos\ezet_evelib\EveLib.EveXml\Character.cs,GetWalletJournalUntilAsync,The following statement contains a magic number: var res = await GetWalletJournalAsync(2560' fromId).ConfigureAwait(false);
Magic Number,eZet.EveLib.EveXmlModule,Character,C:\repos\ezet_evelib\EveLib.EveXml\Character.cs,GetWalletJournalUntilAsync,The following statement contains a magic number: while (res.Result.Journal.Any()) {                  var sortedList =                      res.Result.Journal.OrderByDescending(f => f.RefId);                  foreach (var entry in sortedList) {                      if (entry.RefId == untilId) {                          return list;                      }                      list.Add(entry);                  }                  res = await GetWalletJournalAsync(2560' sortedList.Last().RefId).ConfigureAwait(false);              }
Magic Number,eZet.EveLib.EveXmlModule,Character,C:\repos\ezet_evelib\EveLib.EveXml\Character.cs,GetWalletTransactionsUntilAsync,The following statement contains a magic number: var res =                  await GetWalletTransactionsAsync(2560' fromId).ConfigureAwait(false);
Magic Number,eZet.EveLib.EveXmlModule,Character,C:\repos\ezet_evelib\EveLib.EveXml\Character.cs,GetWalletTransactionsUntilAsync,The following statement contains a magic number: while (res.Result.Transactions.Any()) {                  var sortedList =                      res.Result.Transactions.OrderByDescending(f => f.TransactionId);                  foreach (var entry in sortedList) {                      if (entry.TransactionId <= untilId) {                          return list;                      }                      list.Add(entry);                  }                  res = await GetWalletTransactionsAsync(2560' sortedList.Last().TransactionId).ConfigureAwait(false);              }
Magic Number,eZet.EveLib.EveXmlModule,Corporation,C:\repos\ezet_evelib\EveLib.EveXml\Corporation.cs,GetWalletJournalUntilAsync,The following statement contains a magic number: var res =                  await GetWalletJournalAsync(division' 2560' fromId).ConfigureAwait(false);
Magic Number,eZet.EveLib.EveXmlModule,Corporation,C:\repos\ezet_evelib\EveLib.EveXml\Corporation.cs,GetWalletJournalUntilAsync,The following statement contains a magic number: while (res.Result.Journal.Any()) {                  var sortedList =                      res.Result.Journal.OrderByDescending(f => f.RefId);                  foreach (var entry in sortedList) {                      if (entry.RefId == untilId) {                          return list;                      }                      list.Add(entry);                  }                  res = await GetWalletJournalAsync(division' 2560' sortedList.Last().RefId).ConfigureAwait(false);              }
Magic Number,eZet.EveLib.EveXmlModule,Corporation,C:\repos\ezet_evelib\EveLib.EveXml\Corporation.cs,GetWalletTransactionsUntilAsync,The following statement contains a magic number: var res =                  await GetWalletTransactionsAsync(division' 2560' fromId).ConfigureAwait(false);
Magic Number,eZet.EveLib.EveXmlModule,Corporation,C:\repos\ezet_evelib\EveLib.EveXml\Corporation.cs,GetWalletTransactionsUntilAsync,The following statement contains a magic number: while (res.Result.Transactions.Any()) {                  var sortedList =                      res.Result.Transactions.OrderByDescending(f => f.TransactionId);                  foreach (var entry in sortedList) {                      if (entry.TransactionId <= untilId) {                          return list;                      }                      list.Add(entry);                  }                  res =                      await                          GetWalletTransactionsAsync(division' 2560' sortedList.Last().TransactionId)                              .ConfigureAwait(false);              }
Magic Number,eZet.EveLib.EveXmlModule.RequestHandlers,EveXmlRequestHandler,C:\repos\ezet_evelib\EveLib.EveXml\RequestHandlers\EveXmlRequestHandler.cs,RequestAsync,The following statement contains a magic number: try {                  var response = await HttpRequestHelper.GetResponseAsync(HttpRequestHelper.CreateRequest(uri)).ConfigureAwait(false);                  // special handling for status code 000' because we cannot fetch the response body                  if (response.StatusCode.ToString() == "0") {                      throw new EveXmlException("Kill log exhausted (You can only fetch kills that are less than a month old)"' 119' new WebException("Unknown"' null' WebExceptionStatus.UnknownError' response));                  }                  data = await HttpRequestHelper.GetResponseContentAsync(response);                }              catch (WebException e) {                  _trace.TraceEvent(TraceEventType.Error' 0' "Http Request failed");                  var response = (HttpWebResponse) e.Response;                  if (response == null) throw new EveXmlException("Unknown"' 0' e);                  var responseStream = response.GetResponseStream();                  if (responseStream == null) throw;                  using (var reader = new StreamReader(responseStream)) {                      data = reader.ReadToEnd();                      var error = Serializer.Deserialize<EveXmlError>(data);                      _trace.TraceEvent(TraceEventType.Verbose' 0' "Error: {0}' Code: {1}"' error.Error.ErrorText'                          error.Error.ErrorCode);                      throw new EveXmlException(error.Error.ErrorText' error.Error.ErrorCode' e);                  }              }
