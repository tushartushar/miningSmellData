Implementation smell,Namespace,Class,File,Method,Description
Long Method,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The method has 189 lines of code.
Complex Method,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,Cyclomatic complexity of the method is 24
Complex Method,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,ReferencesMethod,Cyclomatic complexity of the method is 13
Complex Method,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,Cyclomatic complexity of the method is 10
Long Parameter List,PRI.ProductivityExtensions.ActionExtensions,Actionable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ActionExtensions\Actionable.cs,BeginInvoke,The method has 18 parameters. Parameters: action' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16' callback
Long Parameter List,PRI.ProductivityExtensions.AnonymousPipeClientStreamExtensions,AnonymousPipeClientStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\AnonymousPipeClientStreamExtensions\AnonymousPipeClientStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: pipestream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.AnonymousPipeClientStreamExtensions,AnonymousPipeClientStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\AnonymousPipeClientStreamExtensions\AnonymousPipeClientStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: pipestream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.AnonymousPipeServerStreamExtensions,AnonymousPipeServerStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\AnonymousPipeServerStreamExtensions\AnonymousPipeServerStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: pipestream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.AnonymousPipeServerStreamExtensions,AnonymousPipeServerStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\AnonymousPipeServerStreamExtensions\AnonymousPipeServerStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: pipestream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.AuthenticatedStreamExtensions,AuthenticatedStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\AuthenticatedStreamExtensions\AuthenticatedStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.AuthenticatedStreamExtensions,AuthenticatedStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\AuthenticatedStreamExtensions\AuthenticatedStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.BindIPEndPointExtensions,BindIPEndPointable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\BindIPEndPointExtensions\BindIPEndPointable.g.cs,BeginInvoke,The method has 5 parameters. Parameters: bindipendpoint' servicePoint' remoteEndPoint' retryCount' callback
Long Parameter List,PRI.ProductivityExtensions.BufferedStreamExtensions,BufferedStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\BufferedStreamExtensions\BufferedStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.BufferedStreamExtensions,BufferedStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\BufferedStreamExtensions\BufferedStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.CryptoStreamExtensions,CryptoStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\CryptoStreamExtensions\CryptoStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.CryptoStreamExtensions,CryptoStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\CryptoStreamExtensions\CryptoStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.DecoderExtensions,Decoderable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DecoderExtensions\Decoderable.g.cs,GetChars,The method has 5 parameters. Parameters: decoder' bytes' chars' charIndex' flush
Long Parameter List,PRI.ProductivityExtensions.DecoderExtensions,Decoderable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DecoderExtensions\Decoderable.g.cs,Convert,The method has 9 parameters. Parameters: decoder' bytes' chars' charIndex' charCount' flush' bytesUsed' charsUsed' completed
Long Parameter List,PRI.ProductivityExtensions.DeflateStreamExtensions,DeflateStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DeflateStreamExtensions\DeflateStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: deflatestream' array' offset' count' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.DeflateStreamExtensions,DeflateStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DeflateStreamExtensions\DeflateStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: deflatestream' array' offset' count' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.EncoderExtensions,Encoderable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\EncoderExtensions\Encoderable.g.cs,GetBytes,The method has 5 parameters. Parameters: encoder' chars' bytes' byteIndex' flush
Long Parameter List,PRI.ProductivityExtensions.EncoderExtensions,Encoderable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\EncoderExtensions\Encoderable.g.cs,Convert,The method has 9 parameters. Parameters: encoder' chars' bytes' byteIndex' byteCount' flush' charsUsed' bytesUsed' completed
Long Parameter List,PRI.ProductivityExtensions.FileStreamExtensions,FileStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\FileStreamExtensions\FileStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: filestream' array' offset' numBytes' userCallback
Long Parameter List,PRI.ProductivityExtensions.FileStreamExtensions,FileStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\FileStreamExtensions\FileStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: filestream' array' offset' numBytes' userCallback
Long Parameter List,PRI.ProductivityExtensions.FuncExtensions,Funcable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\FuncExtensions\Funcable.g.cs,BeginInvoke,The method has 18 parameters. Parameters: func' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16' callback
Long Parameter List,PRI.ProductivityExtensions.GZipStreamExtensions,GZipStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\GZipStreamExtensions\GZipStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: gzipstream' array' offset' count' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.GZipStreamExtensions,GZipStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\GZipStreamExtensions\GZipStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: gzipstream' array' offset' count' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.IOCompletionCallbackExtensions,IOCompletionCallbackable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\IOCompletionCallbackExtensions\IOCompletionCallbackable.g.cs,BeginInvoke,The method has 5 parameters. Parameters: iocompletioncallback' errorCode' numBytes' pOVERLAP' callback
Long Parameter List,PRI.ProductivityExtensions.IsolatedStorageFileStreamExtensions,IsolatedStorageFileStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\IsolatedStorageFileStreamExtensions\IsolatedStorageFileStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: isolatedstoragefilestream' buffer' offset' numBytes' userCallback
Long Parameter List,PRI.ProductivityExtensions.IsolatedStorageFileStreamExtensions,IsolatedStorageFileStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\IsolatedStorageFileStreamExtensions\IsolatedStorageFileStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: isolatedstoragefilestream' buffer' offset' numBytes' userCallback
Long Parameter List,PRI.ProductivityExtensions.LocalCertificateSelectionCallbackExtensions,LocalCertificateSelectionCallbackable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\LocalCertificateSelectionCallbackExtensions\LocalCertificateSelectionCallbackable.g.cs,BeginInvoke,The method has 7 parameters. Parameters: localcertificateselectioncallback' sender' targetHost' localCertificates' remoteCertificate' acceptableIssuers' callback
Long Parameter List,PRI.ProductivityExtensions.MemoryMappedViewStreamExtensions,MemoryMappedViewStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\MemoryMappedViewStreamExtensions\MemoryMappedViewStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.MemoryMappedViewStreamExtensions,MemoryMappedViewStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\MemoryMappedViewStreamExtensions\MemoryMappedViewStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.MemoryStreamExtensions,MemoryStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\MemoryStreamExtensions\MemoryStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.MemoryStreamExtensions,MemoryStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\MemoryStreamExtensions\MemoryStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.NamedPipeClientStreamExtensions,NamedPipeClientStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NamedPipeClientStreamExtensions\NamedPipeClientStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: pipestream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.NamedPipeClientStreamExtensions,NamedPipeClientStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NamedPipeClientStreamExtensions\NamedPipeClientStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: pipestream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.NamedPipeServerStreamExtensions,NamedPipeServerStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NamedPipeServerStreamExtensions\NamedPipeServerStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: pipestream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.NamedPipeServerStreamExtensions,NamedPipeServerStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NamedPipeServerStreamExtensions\NamedPipeServerStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: pipestream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsClient,The method has 5 parameters. Parameters: negotiatestream' credential' binding' targetName' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsClient,The method has 6 parameters. Parameters: negotiatestream' credential' targetName' requiredProtectionLevel' allowedImpersonationLevel' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsClient,The method has 7 parameters. Parameters: negotiatestream' credential' binding' targetName' requiredProtectionLevel' allowedImpersonationLevel' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsServer,The method has 5 parameters. Parameters: negotiatestream' credential' requiredProtectionLevel' requiredImpersonationLevel' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsServer,The method has 6 parameters. Parameters: negotiatestream' credential' policy' requiredProtectionLevel' requiredImpersonationLevel' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: negotiatestream' buffer' offset' count' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: negotiatestream' buffer' offset' count' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.NetworkStreamExtensions,NetworkStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NetworkStreamExtensions\NetworkStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: networkstream' buffer' offset' size' callback
Long Parameter List,PRI.ProductivityExtensions.NetworkStreamExtensions,NetworkStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NetworkStreamExtensions\NetworkStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: networkstream' buffer' offset' size' callback
Long Parameter List,PRI.ProductivityExtensions.PipeStreamExtensions,PipeStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\PipeStreamExtensions\PipeStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: pipestream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.PipeStreamExtensions,PipeStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\PipeStreamExtensions\PipeStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: pipestream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.PlayRecordCallbackExtensions,PlayRecordCallbackable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\PlayRecordCallbackExtensions\PlayRecordCallbackable.g.cs,BeginInvoke,The method has 6 parameters. Parameters: playrecordcallback' recordType' flags' dataSize' recordData' callback
Long Parameter List,PRI.ProductivityExtensions.PropertyValueUIHandlerExtensions,PropertyValueUIHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\PropertyValueUIHandlerExtensions\PropertyValueUIHandlerable.g.cs,BeginInvoke,The method has 5 parameters. Parameters: propertyvalueuihandler' context' propDesc' valueUIItemList' callback
Long Parameter List,PRI.ProductivityExtensions.PropertyValueUIItemInvokeHandlerExtensions,PropertyValueUIItemInvokeHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\PropertyValueUIItemInvokeHandlerExtensions\PropertyValueUIItemInvokeHandlerable.g.cs,BeginInvoke,The method has 5 parameters. Parameters: propertyvalueuiiteminvokehandler' context' descriptor' invokedItem' callback
Long Parameter List,PRI.ProductivityExtensions.RemoteCertificateValidationCallbackExtensions,RemoteCertificateValidationCallbackable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\RemoteCertificateValidationCallbackExtensions\RemoteCertificateValidationCallbackable.g.cs,BeginInvoke,The method has 6 parameters. Parameters: remotecertificatevalidationcallback' sender' certificate' chain' sslPolicyErrors' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,ReceiveMessageFrom,The method has 5 parameters. Parameters: socket' buffer' socketFlags' remoteEP' ipPacketInformation
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginSend,The method has 5 parameters. Parameters: socket' buffer' socketFlags' callback' state
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginSend,The method has 6 parameters. Parameters: socket' buffer' offset' size' socketFlags' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginSend,The method has 6 parameters. Parameters: socket' buffer' socketFlags' errorCode' callback' state
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginSend,The method has 7 parameters. Parameters: socket' buffer' offset' size' socketFlags' errorCode' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginSend,The method has 5 parameters. Parameters: socket' buffer' socketFlags' errorCode' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginSendFile,The method has 6 parameters. Parameters: socket' fileName' preBuffer' postBuffer' flags' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginSend,The method has 5 parameters. Parameters: socket' buffers' socketFlags' errorCode' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginSendTo,The method has 6 parameters. Parameters: socket' buffer' socketFlags' remoteEP' callback' state
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginSendTo,The method has 7 parameters. Parameters: socket' buffer' offset' size' socketFlags' remoteEP' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginSendTo,The method has 5 parameters. Parameters: socket' buffer' socketFlags' remoteEP' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginReceive,The method has 5 parameters. Parameters: socket' buffer' socketFlags' callback' state
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginReceive,The method has 6 parameters. Parameters: socket' buffer' offset' size' socketFlags' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginReceive,The method has 6 parameters. Parameters: socket' buffer' socketFlags' errorCode' callback' state
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginReceive,The method has 7 parameters. Parameters: socket' buffer' offset' size' socketFlags' errorCode' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginReceive,The method has 5 parameters. Parameters: socket' buffer' socketFlags' errorCode' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginReceive,The method has 5 parameters. Parameters: socket' buffers' socketFlags' errorCode' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginReceiveMessageFrom,The method has 6 parameters. Parameters: socket' buffer' socketFlags' remoteEP' callback' state
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginReceiveMessageFrom,The method has 7 parameters. Parameters: socket' buffer' offset' size' socketFlags' remoteEP' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginReceiveMessageFrom,The method has 5 parameters. Parameters: socket' buffer' socketFlags' remoteEP' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginReceiveFrom,The method has 6 parameters. Parameters: socket' buffer' socketFlags' remoteEP' callback' state
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginReceiveFrom,The method has 7 parameters. Parameters: socket' buffer' offset' size' socketFlags' remoteEP' callback
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.cs,BeginReceiveFrom,The method has 5 parameters. Parameters: socket' buffer' socketFlags' remoteEP' callback
Long Parameter List,PRI.ProductivityExtensions.SqlFileStreamExtensions,SqlFileStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SqlFileStreamExtensions\SqlFileStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: sqlfilestream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.SqlFileStreamExtensions,SqlFileStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SqlFileStreamExtensions\SqlFileStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: sqlfilestream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.SslStreamExtensions,SslStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SslStreamExtensions\SslStreamable.g.cs,BeginAuthenticateAsClient,The method has 6 parameters. Parameters: sslstream' targetHost' clientCertificates' enabledSslProtocols' checkCertificateRevocation' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.SslStreamExtensions,SslStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SslStreamExtensions\SslStreamable.g.cs,BeginAuthenticateAsServer,The method has 6 parameters. Parameters: sslstream' serverCertificate' clientCertificateRequired' enabledSslProtocols' checkCertificateRevocation' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.SslStreamExtensions,SslStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SslStreamExtensions\SslStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: sslstream' buffer' offset' count' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.SslStreamExtensions,SslStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SslStreamExtensions\SslStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: sslstream' buffer' offset' count' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.StreamExtensions,Streamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\StreamExtensions\Streamable.cs,BeginReadToEnd,The method has 6 parameters. Parameters: stream' buffer' offset' count' callback' state
Long Parameter List,PRI.ProductivityExtensions.StreamExtensions,Streamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\StreamExtensions\Streamable.cs,BeginReadToEnd,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.StreamExtensions,Streamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\StreamExtensions\Streamable.cs,BeginRead,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.StreamExtensions,Streamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\StreamExtensions\Streamable.cs,BeginWrite,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.StreamExtensions,ByteArrayAsyncResult,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\StreamExtensions\Streamable.cs,ByteArrayAsyncResult,The method has 5 parameters. Parameters: cb' state' buffer' offset' tempBuffer
Long Parameter List,PRI.ProductivityExtensions.StreamExtensions,ByteArrayAsyncResult,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\StreamExtensions\Streamable.cs,ByteArrayAsyncResult,The method has 6 parameters. Parameters: cb' state' buffer' offset' tempBuffer' completed
Long Parameter List,PRI.ProductivityExtensions.TaskFactoryExtensions,TaskFactoryable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TaskFactoryExtensions\TaskFactoryable.cs,FromAsync,The method has 5 parameters. Parameters: taskFactory' beginMethod' endMethod' arg1' creationOptions
Long Parameter List,PRI.ProductivityExtensions.TaskFactoryExtensions,TaskFactoryable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TaskFactoryExtensions\TaskFactoryable.cs,FromAsync,The method has 5 parameters. Parameters: taskFactory' beginMethod' endMethod' arg1' arg2
Long Parameter List,PRI.ProductivityExtensions.TaskFactoryExtensions,TaskFactoryable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TaskFactoryExtensions\TaskFactoryable.cs,FromAsync,The method has 6 parameters. Parameters: taskFactory' beginMethod' endMethod' arg1' arg2' creationOptions
Long Parameter List,PRI.ProductivityExtensions.TaskFactoryExtensions,TaskFactoryable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TaskFactoryExtensions\TaskFactoryable.cs,FromAsync,The method has 6 parameters. Parameters: taskFactory' beginMethod' endMethod' arg1' arg2' arg3
Long Parameter List,PRI.ProductivityExtensions.TaskFactoryExtensions,TaskFactoryable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TaskFactoryExtensions\TaskFactoryable.cs,FromAsync,The method has 7 parameters. Parameters: taskFactory' beginMethod' endMethod' arg1' arg2' arg3' creationOptions
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 5 parameters. Parameters: udpClient' datagram' hostname' port' asyncCallback
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 6 parameters. Parameters: udpClient' datagram' hostname' port' asyncCallback' state
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 7 parameters. Parameters: udpClient' datagram' bytes' hostname' port' asyncCallback' state
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 5 parameters. Parameters: udpClient' datagram' bytes' asyncCallback' state
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 5 parameters. Parameters: udpClient' datagram' endPoint' asyncCallback' state
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 5 parameters. Parameters: udpclient' datagram' bytes' endPoint' requestCallback
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 6 parameters. Parameters: udpclient' datagram' bytes' hostname' port' requestCallback
Long Parameter List,PRI.ProductivityExtensions.UnmanagedMemoryStreamExtensions,UnmanagedMemoryStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UnmanagedMemoryStreamExtensions\UnmanagedMemoryStreamable.g.cs,BeginRead,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Parameter List,PRI.ProductivityExtensions.UnmanagedMemoryStreamExtensions,UnmanagedMemoryStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UnmanagedMemoryStreamExtensions\UnmanagedMemoryStreamable.g.cs,BeginWrite,The method has 5 parameters. Parameters: stream' buffer' offset' count' callback
Long Identifier,PRI.ProductivityExtensions.BindingManagerDataErrorEventHandlerExtensions,BindingManagerDataErrorEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\BindingManagerDataErrorEventHandlerExtensions\BindingManagerDataErrorEventHandlerable.g.cs,BeginInvoke,The length of the parameter bindingmanagerdataerroreventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.ColumnWidthChangedEventHandlerExtensions,ColumnWidthChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ColumnWidthChangedEventHandlerExtensions\ColumnWidthChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter columnwidthchangedeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.ColumnWidthChangingEventHandlerExtensions,ColumnWidthChangingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ColumnWidthChangingEventHandlerExtensions\ColumnWidthChangingEventHandlerable.g.cs,BeginInvoke,The length of the parameter columnwidthchangingeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.DataGridPreferredColumnWidthTypeConverterExtensions,DataGridPreferredColumnWidthTypeConverterable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridPreferredColumnWidthTypeConverterExtensions\DataGridPreferredColumnWidthTypeConverterable.g.cs,ConvertTo,The length of the parameter datagridpreferredcolumnwidthtypeconverter is 41.
Long Identifier,PRI.ProductivityExtensions.DataGridViewAutoSizeColumnModeEventHandlerExtensions,DataGridViewAutoSizeColumnModeEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewAutoSizeColumnModeEventHandlerExtensions\DataGridViewAutoSizeColumnModeEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewautosizecolumnmodeeventhandler is 42.
Long Identifier,PRI.ProductivityExtensions.DataGridViewAutoSizeColumnsModeEventHandlerExtensions,DataGridViewAutoSizeColumnsModeEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewAutoSizeColumnsModeEventHandlerExtensions\DataGridViewAutoSizeColumnsModeEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewautosizecolumnsmodeeventhandler is 43.
Long Identifier,PRI.ProductivityExtensions.DataGridViewAutoSizeModeEventHandlerExtensions,DataGridViewAutoSizeModeEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewAutoSizeModeEventHandlerExtensions\DataGridViewAutoSizeModeEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewautosizemodeeventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.DataGridViewBindingCompleteEventHandlerExtensions,DataGridViewBindingCompleteEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewBindingCompleteEventHandlerExtensions\DataGridViewBindingCompleteEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewbindingcompleteeventhandler is 39.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellCancelEventHandlerExtensions,DataGridViewCellCancelEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellCancelEventHandlerExtensions\DataGridViewCellCancelEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellcanceleventhandler is 34.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellContextMenuStripNeededEventHandlerExtensions,DataGridViewCellContextMenuStripNeededEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellContextMenuStripNeededEventHandlerExtensions\DataGridViewCellContextMenuStripNeededEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellcontextmenustripneededeventhandler is 50.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellErrorTextNeededEventHandlerExtensions,DataGridViewCellErrorTextNeededEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellErrorTextNeededEventHandlerExtensions\DataGridViewCellErrorTextNeededEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellerrortextneededeventhandler is 43.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellFormattingEventHandlerExtensions,DataGridViewCellFormattingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellFormattingEventHandlerExtensions\DataGridViewCellFormattingEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellformattingeventhandler is 38.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellMouseEventHandlerExtensions,DataGridViewCellMouseEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellMouseEventHandlerExtensions\DataGridViewCellMouseEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellmouseeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellPaintingEventHandlerExtensions,DataGridViewCellPaintingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellPaintingEventHandlerExtensions\DataGridViewCellPaintingEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellpaintingeventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellParsingEventHandlerExtensions,DataGridViewCellParsingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellParsingEventHandlerExtensions\DataGridViewCellParsingEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellparsingeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellStateChangedEventHandlerExtensions,DataGridViewCellStateChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellStateChangedEventHandlerExtensions\DataGridViewCellStateChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellstatechangedeventhandler is 40.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellStyleContentChangedEventHandlerExtensions,DataGridViewCellStyleContentChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellStyleContentChangedEventHandlerExtensions\DataGridViewCellStyleContentChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellstylecontentchangedeventhandler is 47.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellStyleConverterExtensions,DataGridViewCellStyleConverterable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellStyleConverterExtensions\DataGridViewCellStyleConverterable.g.cs,ConvertTo,The length of the parameter datagridviewcellstyleconverter is 30.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellToolTipTextNeededEventHandlerExtensions,DataGridViewCellToolTipTextNeededEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellToolTipTextNeededEventHandlerExtensions\DataGridViewCellToolTipTextNeededEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcelltooltiptextneededeventhandler is 45.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellValidatingEventHandlerExtensions,DataGridViewCellValidatingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellValidatingEventHandlerExtensions\DataGridViewCellValidatingEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellvalidatingeventhandler is 38.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellValueEventHandlerExtensions,DataGridViewCellValueEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellValueEventHandlerExtensions\DataGridViewCellValueEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellvalueeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.DataGridViewColumnDividerDoubleClickEventHandlerExtensions,DataGridViewColumnDividerDoubleClickEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewColumnDividerDoubleClickEventHandlerExtensions\DataGridViewColumnDividerDoubleClickEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcolumndividerdoubleclickeventhandler is 48.
Long Identifier,PRI.ProductivityExtensions.DataGridViewColumnEventHandlerExtensions,DataGridViewColumnEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewColumnEventHandlerExtensions\DataGridViewColumnEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcolumneventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.DataGridViewColumnStateChangedEventHandlerExtensions,DataGridViewColumnStateChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewColumnStateChangedEventHandlerExtensions\DataGridViewColumnStateChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcolumnstatechangedeventhandler is 42.
Long Identifier,PRI.ProductivityExtensions.DataGridViewDataErrorEventHandlerExtensions,DataGridViewDataErrorEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewDataErrorEventHandlerExtensions\DataGridViewDataErrorEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewdataerroreventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.DataGridViewEditingControlShowingEventHandlerExtensions,DataGridViewEditingControlShowingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewEditingControlShowingEventHandlerExtensions\DataGridViewEditingControlShowingEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridvieweditingcontrolshowingeventhandler is 45.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowCancelEventHandlerExtensions,DataGridViewRowCancelEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowCancelEventHandlerExtensions\DataGridViewRowCancelEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowcanceleventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowContextMenuStripNeededEventHandlerExtensions,DataGridViewRowContextMenuStripNeededEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowContextMenuStripNeededEventHandlerExtensions\DataGridViewRowContextMenuStripNeededEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowcontextmenustripneededeventhandler is 49.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowDividerDoubleClickEventHandlerExtensions,DataGridViewRowDividerDoubleClickEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowDividerDoubleClickEventHandlerExtensions\DataGridViewRowDividerDoubleClickEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowdividerdoubleclickeventhandler is 45.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowErrorTextNeededEventHandlerExtensions,DataGridViewRowErrorTextNeededEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowErrorTextNeededEventHandlerExtensions\DataGridViewRowErrorTextNeededEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowerrortextneededeventhandler is 42.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowHeightInfoNeededEventHandlerExtensions,DataGridViewRowHeightInfoNeededEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowHeightInfoNeededEventHandlerExtensions\DataGridViewRowHeightInfoNeededEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowheightinfoneededeventhandler is 43.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowHeightInfoPushedEventHandlerExtensions,DataGridViewRowHeightInfoPushedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowHeightInfoPushedEventHandlerExtensions\DataGridViewRowHeightInfoPushedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowheightinfopushedeventhandler is 43.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowPostPaintEventHandlerExtensions,DataGridViewRowPostPaintEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowPostPaintEventHandlerExtensions\DataGridViewRowPostPaintEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowpostpainteventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowPrePaintEventHandlerExtensions,DataGridViewRowPrePaintEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowPrePaintEventHandlerExtensions\DataGridViewRowPrePaintEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowprepainteventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowsAddedEventHandlerExtensions,DataGridViewRowsAddedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowsAddedEventHandlerExtensions\DataGridViewRowsAddedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowsaddedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowsRemovedEventHandlerExtensions,DataGridViewRowsRemovedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowsRemovedEventHandlerExtensions\DataGridViewRowsRemovedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowsremovedeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowStateChangedEventHandlerExtensions,DataGridViewRowStateChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowStateChangedEventHandlerExtensions\DataGridViewRowStateChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowstatechangedeventhandler is 39.
Long Identifier,PRI.ProductivityExtensions.DataGridViewSortCompareEventHandlerExtensions,DataGridViewSortCompareEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewSortCompareEventHandlerExtensions\DataGridViewSortCompareEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewsortcompareeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.DesignerTransactionCloseEventHandlerExtensions,DesignerTransactionCloseEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DesignerTransactionCloseEventHandlerExtensions\DesignerTransactionCloseEventHandlerable.g.cs,BeginInvoke,The length of the parameter designertransactioncloseeventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.DownloadDataCompletedEventHandlerExtensions,DownloadDataCompletedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DownloadDataCompletedEventHandlerExtensions\DownloadDataCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter downloaddatacompletedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.DownloadProgressChangedEventHandlerExtensions,DownloadProgressChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DownloadProgressChangedEventHandlerExtensions\DownloadProgressChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter downloadprogresschangedeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.DownloadStringCompletedEventHandlerExtensions,DownloadStringCompletedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DownloadStringCompletedEventHandlerExtensions\DownloadStringCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter downloadstringcompletedeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.DrawListViewColumnHeaderEventHandlerExtensions,DrawListViewColumnHeaderEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DrawListViewColumnHeaderEventHandlerExtensions\DrawListViewColumnHeaderEventHandlerable.g.cs,BeginInvoke,The length of the parameter drawlistviewcolumnheadereventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.DrawListViewSubItemEventHandlerExtensions,DrawListViewSubItemEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DrawListViewSubItemEventHandlerExtensions\DrawListViewSubItemEventHandlerable.g.cs,BeginInvoke,The length of the parameter drawlistviewsubitemeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.ExtendedProtectionPolicyTypeConverterExtensions,ExtendedProtectionPolicyTypeConverterable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ExtendedProtectionPolicyTypeConverterExtensions\ExtendedProtectionPolicyTypeConverterable.g.cs,ConvertTo,The length of the parameter extendedprotectionpolicytypeconverter is 37.
Long Identifier,PRI.ProductivityExtensions.InputLanguageChangedEventHandlerExtensions,InputLanguageChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\InputLanguageChangedEventHandlerExtensions\InputLanguageChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter inputlanguagechangedeventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.InputLanguageChangingEventHandlerExtensions,InputLanguageChangingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\InputLanguageChangingEventHandlerExtensions\InputLanguageChangingEventHandlerable.g.cs,BeginInvoke,The length of the parameter inputlanguagechangingeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.LinkLabelLinkClickedEventHandlerExtensions,LinkLabelLinkClickedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\LinkLabelLinkClickedEventHandlerExtensions\LinkLabelLinkClickedEventHandlerable.g.cs,BeginInvoke,The length of the parameter linklabellinkclickedeventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.ListControlConvertEventHandlerExtensions,ListControlConvertEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ListControlConvertEventHandlerExtensions\ListControlConvertEventHandlerable.g.cs,BeginInvoke,The length of the parameter listcontrolconverteventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.ListViewItemMouseHoverEventHandlerExtensions,ListViewItemMouseHoverEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ListViewItemMouseHoverEventHandlerExtensions\ListViewItemMouseHoverEventHandlerable.g.cs,BeginInvoke,The length of the parameter listviewitemmousehovereventhandler is 34.
Long Identifier,PRI.ProductivityExtensions.ListViewItemSelectionChangedEventHandlerExtensions,ListViewItemSelectionChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ListViewItemSelectionChangedEventHandlerExtensions\ListViewItemSelectionChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter listviewitemselectionchangedeventhandler is 40.
Long Identifier,PRI.ProductivityExtensions.ListViewVirtualItemsSelectionRangeChangedEventHandlerExtensions,ListViewVirtualItemsSelectionRangeChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ListViewVirtualItemsSelectionRangeChangedEventHandlerExtensions\ListViewVirtualItemsSelectionRangeChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter listviewvirtualitemsselectionrangechangedeventhandler is 53.
Long Identifier,PRI.ProductivityExtensions.LocalCertificateSelectionCallbackExtensions,LocalCertificateSelectionCallbackable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\LocalCertificateSelectionCallbackExtensions\LocalCertificateSelectionCallbackable.g.cs,BeginInvoke,The length of the parameter localcertificateselectioncallback is 33.
Long Identifier,PRI.ProductivityExtensions.NetworkAddressChangedEventHandlerExtensions,NetworkAddressChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NetworkAddressChangedEventHandlerExtensions\NetworkAddressChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter networkaddresschangedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.NetworkAvailabilityChangedEventHandlerExtensions,NetworkAvailabilityChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NetworkAvailabilityChangedEventHandlerExtensions\NetworkAvailabilityChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter networkavailabilitychangedeventhandler is 38.
Long Identifier,PRI.ProductivityExtensions.NotifyCollectionChangedEventHandlerExtensions,NotifyCollectionChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NotifyCollectionChangedEventHandlerExtensions\NotifyCollectionChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter notifycollectionchangedeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.OpenWriteCompletedEventHandlerExtensions,OpenWriteCompletedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\OpenWriteCompletedEventHandlerExtensions\OpenWriteCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter openwritecompletedeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.PropertyTabChangedEventHandlerExtensions,PropertyTabChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\PropertyTabChangedEventHandlerExtensions\PropertyTabChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter propertytabchangedeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.PropertyValueChangedEventHandlerExtensions,PropertyValueChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\PropertyValueChangedEventHandlerExtensions\PropertyValueChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter propertyvaluechangedeventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.PropertyValueUIItemInvokeHandlerExtensions,PropertyValueUIItemInvokeHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\PropertyValueUIItemInvokeHandlerExtensions\PropertyValueUIItemInvokeHandlerable.g.cs,BeginInvoke,The length of the parameter propertyvalueuiiteminvokehandler is 32.
Long Identifier,PRI.ProductivityExtensions.QueryAccessibilityHelpEventHandlerExtensions,QueryAccessibilityHelpEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\QueryAccessibilityHelpEventHandlerExtensions\QueryAccessibilityHelpEventHandlerable.g.cs,BeginInvoke,The length of the parameter queryaccessibilityhelpeventhandler is 34.
Long Identifier,PRI.ProductivityExtensions.ReflectionExtensions,TypeBuilderable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\TypeBuilderable.cs,,The length of the parameter CompilerGeneratedAttributeBuilder is 33.
Long Identifier,PRI.ProductivityExtensions.RemoteCertificateValidationCallbackExtensions,RemoteCertificateValidationCallbackable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\RemoteCertificateValidationCallbackExtensions\RemoteCertificateValidationCallbackable.g.cs,BeginInvoke,The length of the parameter remotecertificatevalidationcallback is 35.
Long Identifier,PRI.ProductivityExtensions.RetrieveVirtualItemEventHandlerExtensions,RetrieveVirtualItemEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\RetrieveVirtualItemEventHandlerExtensions\RetrieveVirtualItemEventHandlerable.g.cs,BeginInvoke,The length of the parameter retrievevirtualitemeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.RunWorkerCompletedEventHandlerExtensions,RunWorkerCompletedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\RunWorkerCompletedEventHandlerExtensions\RunWorkerCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter runworkercompletedeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.SearchForVirtualItemEventHandlerExtensions,SearchForVirtualItemEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SearchForVirtualItemEventHandlerExtensions\SearchForVirtualItemEventHandlerable.g.cs,BeginInvoke,The length of the parameter searchforvirtualitemeventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.SelectedGridItemChangedEventHandlerExtensions,SelectedGridItemChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SelectedGridItemChangedEventHandlerExtensions\SelectedGridItemChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter selectedgriditemchangedeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.SerialDataReceivedEventHandlerExtensions,SerialDataReceivedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SerialDataReceivedEventHandlerExtensions\SerialDataReceivedEventHandlerable.g.cs,BeginInvoke,The length of the parameter serialdatareceivedeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.SerialErrorReceivedEventHandlerExtensions,SerialErrorReceivedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SerialErrorReceivedEventHandlerExtensions\SerialErrorReceivedEventHandlerable.g.cs,BeginInvoke,The length of the parameter serialerrorreceivedeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.StatementCompletedEventHandlerExtensions,StatementCompletedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\StatementCompletedEventHandlerExtensions\StatementCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter statementcompletedeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.StatusBarPanelClickEventHandlerExtensions,StatusBarPanelClickEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\StatusBarPanelClickEventHandlerExtensions\StatusBarPanelClickEventHandlerable.g.cs,BeginInvoke,The length of the parameter statusbarpanelclickeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.TableLayoutCellPaintEventHandlerExtensions,TableLayoutCellPaintEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TableLayoutCellPaintEventHandlerExtensions\TableLayoutCellPaintEventHandlerable.g.cs,BeginInvoke,The length of the parameter tablelayoutcellpainteventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.TableLayoutSettingsTypeConverterExtensions,TableLayoutSettingsTypeConverterable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TableLayoutSettingsTypeConverterExtensions\TableLayoutSettingsTypeConverterable.g.cs,ConvertTo,The length of the parameter tablelayoutsettingstypeconverter is 32.
Long Identifier,PRI.ProductivityExtensions.ToolBarButtonClickEventHandlerExtensions,ToolBarButtonClickEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolBarButtonClickEventHandlerExtensions\ToolBarButtonClickEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolbarbuttonclickeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.ToolboxComponentsCreatedEventHandlerExtensions,ToolboxComponentsCreatedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolboxComponentsCreatedEventHandlerExtensions\ToolboxComponentsCreatedEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolboxcomponentscreatedeventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.ToolboxComponentsCreatingEventHandlerExtensions,ToolboxComponentsCreatingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolboxComponentsCreatingEventHandlerExtensions\ToolboxComponentsCreatingEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolboxcomponentscreatingeventhandler is 37.
Long Identifier,PRI.ProductivityExtensions.ToolStripArrowRenderEventHandlerExtensions,ToolStripArrowRenderEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripArrowRenderEventHandlerExtensions\ToolStripArrowRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstriparrowrendereventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.ToolStripContentPanelRenderEventHandlerExtensions,ToolStripContentPanelRenderEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripContentPanelRenderEventHandlerExtensions\ToolStripContentPanelRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripcontentpanelrendereventhandler is 39.
Long Identifier,PRI.ProductivityExtensions.ToolStripDropDownClosedEventHandlerExtensions,ToolStripDropDownClosedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripDropDownClosedEventHandlerExtensions\ToolStripDropDownClosedEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripdropdownclosedeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.ToolStripDropDownClosingEventHandlerExtensions,ToolStripDropDownClosingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripDropDownClosingEventHandlerExtensions\ToolStripDropDownClosingEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripdropdownclosingeventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.ToolStripGripRenderEventHandlerExtensions,ToolStripGripRenderEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripGripRenderEventHandlerExtensions\ToolStripGripRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripgriprendereventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.ToolStripItemClickedEventHandlerExtensions,ToolStripItemClickedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemClickedEventHandlerExtensions\ToolStripItemClickedEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripitemclickedeventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.ToolStripItemImageRenderEventHandlerExtensions,ToolStripItemImageRenderEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemImageRenderEventHandlerExtensions\ToolStripItemImageRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripitemimagerendereventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.ToolStripItemRenderEventHandlerExtensions,ToolStripItemRenderEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemRenderEventHandlerExtensions\ToolStripItemRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripitemrendereventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.ToolStripItemTextRenderEventHandlerExtensions,ToolStripItemTextRenderEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemTextRenderEventHandlerExtensions\ToolStripItemTextRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripitemtextrendereventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.ToolStripPanelRenderEventHandlerExtensions,ToolStripPanelRenderEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripPanelRenderEventHandlerExtensions\ToolStripPanelRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstrippanelrendereventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.ToolStripSeparatorRenderEventHandlerExtensions,ToolStripSeparatorRenderEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripSeparatorRenderEventHandlerExtensions\ToolStripSeparatorRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripseparatorrendereventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.TreeNodeMouseClickEventHandlerExtensions,TreeNodeMouseClickEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TreeNodeMouseClickEventHandlerExtensions\TreeNodeMouseClickEventHandlerable.g.cs,BeginInvoke,The length of the parameter treenodemouseclickeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.TreeNodeMouseHoverEventHandlerExtensions,TreeNodeMouseHoverEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TreeNodeMouseHoverEventHandlerExtensions\TreeNodeMouseHoverEventHandlerable.g.cs,BeginInvoke,The length of the parameter treenodemousehovereventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.UnhandledExceptionEventHandlerExtensions,UnhandledExceptionEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UnhandledExceptionEventHandlerExtensions\UnhandledExceptionEventHandlerable.g.cs,BeginInvoke,The length of the parameter unhandledexceptioneventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.UnreferencedObjectEventHandlerExtensions,UnreferencedObjectEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UnreferencedObjectEventHandlerExtensions\UnreferencedObjectEventHandlerable.g.cs,BeginInvoke,The length of the parameter unreferencedobjecteventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.UploadDataCompletedEventHandlerExtensions,UploadDataCompletedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UploadDataCompletedEventHandlerExtensions\UploadDataCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter uploaddatacompletedeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.UploadFileCompletedEventHandlerExtensions,UploadFileCompletedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UploadFileCompletedEventHandlerExtensions\UploadFileCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter uploadfilecompletedeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.UploadProgressChangedEventHandlerExtensions,UploadProgressChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UploadProgressChangedEventHandlerExtensions\UploadProgressChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter uploadprogresschangedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.UploadStringCompletedEventHandlerExtensions,UploadStringCompletedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UploadStringCompletedEventHandlerExtensions\UploadStringCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter uploadstringcompletedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.UploadValuesCompletedEventHandlerExtensions,UploadValuesCompletedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UploadValuesCompletedEventHandlerExtensions\UploadValuesCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter uploadvaluescompletedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.UserPreferenceChangedEventHandlerExtensions,UserPreferenceChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UserPreferenceChangedEventHandlerExtensions\UserPreferenceChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter userpreferencechangedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.UserPreferenceChangingEventHandlerExtensions,UserPreferenceChangingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\UserPreferenceChangingEventHandlerExtensions\UserPreferenceChangingEventHandlerable.g.cs,BeginInvoke,The length of the parameter userpreferencechangingeventhandler is 34.
Long Identifier,PRI.ProductivityExtensions.WebBrowserDocumentCompletedEventHandlerExtensions,WebBrowserDocumentCompletedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserDocumentCompletedEventHandlerExtensions\WebBrowserDocumentCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter webbrowserdocumentcompletedeventhandler is 39.
Long Identifier,PRI.ProductivityExtensions.WebBrowserNavigatedEventHandlerExtensions,WebBrowserNavigatedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserNavigatedEventHandlerExtensions\WebBrowserNavigatedEventHandlerable.g.cs,BeginInvoke,The length of the parameter webbrowsernavigatedeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.WebBrowserNavigatingEventHandlerExtensions,WebBrowserNavigatingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserNavigatingEventHandlerExtensions\WebBrowserNavigatingEventHandlerable.g.cs,BeginInvoke,The length of the parameter webbrowsernavigatingeventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.WebBrowserProgressChangedEventHandlerExtensions,WebBrowserProgressChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserProgressChangedEventHandlerExtensions\WebBrowserProgressChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter webbrowserprogresschangedeventhandler is 37.
Long Identifier,PRI.ProductivityExtensions.XmlSerializationCollectionFixupCallbackExtensions,XmlSerializationCollectionFixupCallbackable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\XmlSerializationCollectionFixupCallbackExtensions\XmlSerializationCollectionFixupCallbackable.g.cs,BeginInvoke,The length of the parameter xmlserializationcollectionfixupcallback is 39.
Long Identifier,PRI.ProductivityExtensions.XsltMessageEncounteredEventHandlerExtensions,XsltMessageEncounteredEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\XsltMessageEncounteredEventHandlerExtensions\XsltMessageEncounteredEventHandlerable.g.cs,BeginInvoke,The length of the parameter xsltmessageencounteredeventhandler is 34.
Long Statement,PRI.ProductivityExtensions.ActionExtensions,Actionable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ActionExtensions\Actionable.cs,BeginInvoke,The length of the statement  "			return action.BeginInvoke(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16' callback' null); " is 145.
Long Statement,PRI.ProductivityExtensions.DataGridPreferredColumnWidthTypeConverterExtensions,DataGridPreferredColumnWidthTypeConverterable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridPreferredColumnWidthTypeConverterExtensions\DataGridPreferredColumnWidthTypeConverterable.g.cs,ConvertTo,The length of the statement  "			if(datagridpreferredcolumnwidthtypeconverter == null) throw new ArgumentNullException("datagridpreferredcolumnwidthtypeconverter"); " is 131.
Long Statement,PRI.ProductivityExtensions.DataGridViewAutoSizeColumnModeEventHandlerExtensions,DataGridViewAutoSizeColumnModeEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewAutoSizeColumnModeEventHandlerExtensions\DataGridViewAutoSizeColumnModeEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewautosizecolumnmodeeventhandler == null) throw new ArgumentNullException("datagridviewautosizecolumnmodeeventhandler"); " is 133.
Long Statement,PRI.ProductivityExtensions.DataGridViewAutoSizeColumnsModeEventHandlerExtensions,DataGridViewAutoSizeColumnsModeEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewAutoSizeColumnsModeEventHandlerExtensions\DataGridViewAutoSizeColumnsModeEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewautosizecolumnsmodeeventhandler == null) throw new ArgumentNullException("datagridviewautosizecolumnsmodeeventhandler"); " is 135.
Long Statement,PRI.ProductivityExtensions.DataGridViewAutoSizeModeEventHandlerExtensions,DataGridViewAutoSizeModeEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewAutoSizeModeEventHandlerExtensions\DataGridViewAutoSizeModeEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewautosizemodeeventhandler == null) throw new ArgumentNullException("datagridviewautosizemodeeventhandler"); " is 121.
Long Statement,PRI.ProductivityExtensions.DataGridViewBindingCompleteEventHandlerExtensions,DataGridViewBindingCompleteEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewBindingCompleteEventHandlerExtensions\DataGridViewBindingCompleteEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewbindingcompleteeventhandler == null) throw new ArgumentNullException("datagridviewbindingcompleteeventhandler"); " is 127.
Long Statement,PRI.ProductivityExtensions.DataGridViewCellContextMenuStripNeededEventHandlerExtensions,DataGridViewCellContextMenuStripNeededEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellContextMenuStripNeededEventHandlerExtensions\DataGridViewCellContextMenuStripNeededEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewcellcontextmenustripneededeventhandler == null) throw new ArgumentNullException("datagridviewcellcontextmenustripneededeventhandler"); " is 149.
Long Statement,PRI.ProductivityExtensions.DataGridViewCellErrorTextNeededEventHandlerExtensions,DataGridViewCellErrorTextNeededEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellErrorTextNeededEventHandlerExtensions\DataGridViewCellErrorTextNeededEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewcellerrortextneededeventhandler == null) throw new ArgumentNullException("datagridviewcellerrortextneededeventhandler"); " is 135.
Long Statement,PRI.ProductivityExtensions.DataGridViewCellFormattingEventHandlerExtensions,DataGridViewCellFormattingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellFormattingEventHandlerExtensions\DataGridViewCellFormattingEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewcellformattingeventhandler == null) throw new ArgumentNullException("datagridviewcellformattingeventhandler"); " is 125.
Long Statement,PRI.ProductivityExtensions.DataGridViewCellPaintingEventHandlerExtensions,DataGridViewCellPaintingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellPaintingEventHandlerExtensions\DataGridViewCellPaintingEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewcellpaintingeventhandler == null) throw new ArgumentNullException("datagridviewcellpaintingeventhandler"); " is 121.
Long Statement,PRI.ProductivityExtensions.DataGridViewCellStateChangedEventHandlerExtensions,DataGridViewCellStateChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellStateChangedEventHandlerExtensions\DataGridViewCellStateChangedEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewcellstatechangedeventhandler == null) throw new ArgumentNullException("datagridviewcellstatechangedeventhandler"); " is 129.
Long Statement,PRI.ProductivityExtensions.DataGridViewCellStyleContentChangedEventHandlerExtensions,DataGridViewCellStyleContentChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellStyleContentChangedEventHandlerExtensions\DataGridViewCellStyleContentChangedEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewcellstylecontentchangedeventhandler == null) throw new ArgumentNullException("datagridviewcellstylecontentchangedeventhandler"); " is 143.
Long Statement,PRI.ProductivityExtensions.DataGridViewCellToolTipTextNeededEventHandlerExtensions,DataGridViewCellToolTipTextNeededEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellToolTipTextNeededEventHandlerExtensions\DataGridViewCellToolTipTextNeededEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewcelltooltiptextneededeventhandler == null) throw new ArgumentNullException("datagridviewcelltooltiptextneededeventhandler"); " is 139.
Long Statement,PRI.ProductivityExtensions.DataGridViewCellValidatingEventHandlerExtensions,DataGridViewCellValidatingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellValidatingEventHandlerExtensions\DataGridViewCellValidatingEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewcellvalidatingeventhandler == null) throw new ArgumentNullException("datagridviewcellvalidatingeventhandler"); " is 125.
Long Statement,PRI.ProductivityExtensions.DataGridViewColumnDividerDoubleClickEventHandlerExtensions,DataGridViewColumnDividerDoubleClickEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewColumnDividerDoubleClickEventHandlerExtensions\DataGridViewColumnDividerDoubleClickEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewcolumndividerdoubleclickeventhandler == null) throw new ArgumentNullException("datagridviewcolumndividerdoubleclickeventhandler"); " is 145.
Long Statement,PRI.ProductivityExtensions.DataGridViewColumnStateChangedEventHandlerExtensions,DataGridViewColumnStateChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewColumnStateChangedEventHandlerExtensions\DataGridViewColumnStateChangedEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewcolumnstatechangedeventhandler == null) throw new ArgumentNullException("datagridviewcolumnstatechangedeventhandler"); " is 133.
Long Statement,PRI.ProductivityExtensions.DataGridViewEditingControlShowingEventHandlerExtensions,DataGridViewEditingControlShowingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewEditingControlShowingEventHandlerExtensions\DataGridViewEditingControlShowingEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridvieweditingcontrolshowingeventhandler == null) throw new ArgumentNullException("datagridvieweditingcontrolshowingeventhandler"); " is 139.
Long Statement,PRI.ProductivityExtensions.DataGridViewRowContextMenuStripNeededEventHandlerExtensions,DataGridViewRowContextMenuStripNeededEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowContextMenuStripNeededEventHandlerExtensions\DataGridViewRowContextMenuStripNeededEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewrowcontextmenustripneededeventhandler == null) throw new ArgumentNullException("datagridviewrowcontextmenustripneededeventhandler"); " is 147.
Long Statement,PRI.ProductivityExtensions.DataGridViewRowDividerDoubleClickEventHandlerExtensions,DataGridViewRowDividerDoubleClickEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowDividerDoubleClickEventHandlerExtensions\DataGridViewRowDividerDoubleClickEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewrowdividerdoubleclickeventhandler == null) throw new ArgumentNullException("datagridviewrowdividerdoubleclickeventhandler"); " is 139.
Long Statement,PRI.ProductivityExtensions.DataGridViewRowErrorTextNeededEventHandlerExtensions,DataGridViewRowErrorTextNeededEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowErrorTextNeededEventHandlerExtensions\DataGridViewRowErrorTextNeededEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewrowerrortextneededeventhandler == null) throw new ArgumentNullException("datagridviewrowerrortextneededeventhandler"); " is 133.
Long Statement,PRI.ProductivityExtensions.DataGridViewRowHeightInfoNeededEventHandlerExtensions,DataGridViewRowHeightInfoNeededEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowHeightInfoNeededEventHandlerExtensions\DataGridViewRowHeightInfoNeededEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewrowheightinfoneededeventhandler == null) throw new ArgumentNullException("datagridviewrowheightinfoneededeventhandler"); " is 135.
Long Statement,PRI.ProductivityExtensions.DataGridViewRowHeightInfoPushedEventHandlerExtensions,DataGridViewRowHeightInfoPushedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowHeightInfoPushedEventHandlerExtensions\DataGridViewRowHeightInfoPushedEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewrowheightinfopushedeventhandler == null) throw new ArgumentNullException("datagridviewrowheightinfopushedeventhandler"); " is 135.
Long Statement,PRI.ProductivityExtensions.DataGridViewRowPostPaintEventHandlerExtensions,DataGridViewRowPostPaintEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowPostPaintEventHandlerExtensions\DataGridViewRowPostPaintEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewrowpostpainteventhandler == null) throw new ArgumentNullException("datagridviewrowpostpainteventhandler"); " is 121.
Long Statement,PRI.ProductivityExtensions.DataGridViewRowStateChangedEventHandlerExtensions,DataGridViewRowStateChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowStateChangedEventHandlerExtensions\DataGridViewRowStateChangedEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(datagridviewrowstatechangedeventhandler == null) throw new ArgumentNullException("datagridviewrowstatechangedeventhandler"); " is 127.
Long Statement,PRI.ProductivityExtensions.DecoderExtensions,Decoderable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DecoderExtensions\Decoderable.g.cs,Convert,The length of the statement  "			decoder.Convert(bytes' 0' bytes.Length' chars' charIndex' charCount' flush' out bytesUsed' out charsUsed' out completed); " is 121.
Long Statement,PRI.ProductivityExtensions.DesignerTransactionCloseEventHandlerExtensions,DesignerTransactionCloseEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DesignerTransactionCloseEventHandlerExtensions\DesignerTransactionCloseEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(designertransactioncloseeventhandler == null) throw new ArgumentNullException("designertransactioncloseeventhandler"); " is 121.
Long Statement,PRI.ProductivityExtensions.DrawListViewColumnHeaderEventHandlerExtensions,DrawListViewColumnHeaderEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\DrawListViewColumnHeaderEventHandlerExtensions\DrawListViewColumnHeaderEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(drawlistviewcolumnheadereventhandler == null) throw new ArgumentNullException("drawlistviewcolumnheadereventhandler"); " is 121.
Long Statement,PRI.ProductivityExtensions.EncoderExtensions,Encoderable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\EncoderExtensions\Encoderable.g.cs,Convert,The length of the statement  "			encoder.Convert(chars' 0' chars.Length' bytes' byteIndex' byteCount' flush' out charsUsed' out bytesUsed' out completed); " is 121.
Long Statement,PRI.ProductivityExtensions.ExtendedProtectionPolicyTypeConverterExtensions,ExtendedProtectionPolicyTypeConverterable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ExtendedProtectionPolicyTypeConverterExtensions\ExtendedProtectionPolicyTypeConverterable.g.cs,ConvertTo,The length of the statement  "			if(extendedprotectionpolicytypeconverter == null) throw new ArgumentNullException("extendedprotectionpolicytypeconverter"); " is 123.
Long Statement,PRI.ProductivityExtensions.FuncExtensions,Funcable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\FuncExtensions\Funcable.g.cs,BeginInvoke,The length of the statement  "			return func.BeginInvoke(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16' callback' null); " is 143.
Long Statement,PRI.ProductivityExtensions.IListExtensions,IListable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\IListExtensions\IListable.cs,BinarySearch,The length of the statement  "					// element is bigger than the element at index' so we can skip all elements at the left of index including the element at index. " is 128.
Long Statement,PRI.ProductivityExtensions.IListExtensions,IListable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\IListExtensions\IListable.cs,BinarySearch,The length of the statement  "					// element is smaller than the element at index' so we can skip all elements at the right of index including the element at index. " is 130.
Long Statement,PRI.ProductivityExtensions.ListViewItemSelectionChangedEventHandlerExtensions,ListViewItemSelectionChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ListViewItemSelectionChangedEventHandlerExtensions\ListViewItemSelectionChangedEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(listviewitemselectionchangedeventhandler == null) throw new ArgumentNullException("listviewitemselectionchangedeventhandler"); " is 129.
Long Statement,PRI.ProductivityExtensions.ListViewVirtualItemsSelectionRangeChangedEventHandlerExtensions,ListViewVirtualItemsSelectionRangeChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ListViewVirtualItemsSelectionRangeChangedEventHandlerExtensions\ListViewVirtualItemsSelectionRangeChangedEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(listviewvirtualitemsselectionrangechangedeventhandler == null) throw new ArgumentNullException("listviewvirtualitemsselectionrangechangedeventhandler"); " is 155.
Long Statement,PRI.ProductivityExtensions.LocalCertificateSelectionCallbackExtensions,LocalCertificateSelectionCallbackable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\LocalCertificateSelectionCallbackExtensions\LocalCertificateSelectionCallbackable.g.cs,BeginInvoke,The length of the statement  "			return localcertificateselectioncallback.BeginInvoke(sender' targetHost' localCertificates' remoteCertificate' acceptableIssuers' callback' null); " is 146.
Long Statement,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsClient,The length of the statement  "			return negotiatestream.BeginAuthenticateAsClient(credential' targetName' requiredProtectionLevel' allowedImpersonationLevel' asyncCallback' null); " is 146.
Long Statement,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsClient,The length of the statement  "			return negotiatestream.BeginAuthenticateAsClient(credential' binding' targetName' requiredProtectionLevel' allowedImpersonationLevel' asyncCallback' null); " is 155.
Long Statement,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsServer,The length of the statement  "			return negotiatestream.BeginAuthenticateAsServer(credential' requiredProtectionLevel' requiredImpersonationLevel' asyncCallback' null); " is 135.
Long Statement,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsServer,The length of the statement  "			return negotiatestream.BeginAuthenticateAsServer(credential' policy' requiredProtectionLevel' requiredImpersonationLevel' asyncCallback' null); " is 143.
Long Statement,PRI.ProductivityExtensions.NetworkAvailabilityChangedEventHandlerExtensions,NetworkAvailabilityChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\NetworkAvailabilityChangedEventHandlerExtensions\NetworkAvailabilityChangedEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(networkavailabilitychangedeventhandler == null) throw new ArgumentNullException("networkavailabilitychangedeventhandler"); " is 125.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,ReferencesMethod,The length of the statement  "			MethodInfo getTypeMethodInfo = typeof(object).GetMethods().Single(x => x.Name == "GetType"); // && x.GetParameters().Count() == 0 && x.ReflectedType == typeof(Object)); " is 168.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,ReferencesMethod,The length of the statement  "					if (getTypeCall && instruction.Code == OpCodes.Ldtoken && i < instructions.Count() && instructions.ElementAt(i + 1).Code == OpCodes.Call) " is 137.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,ReferencesConstructor,The length of the statement  "			return assembly.GetModules().SelectMany(module => module.GetTypes()).Any(moduleType => ReferencesConstructor(moduleType' type)); " is 128.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetPrivatePropertyValue,The length of the statement  "				property = type.GetProperty(propertyName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy); " is 122.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,SetPrivatePropertyValue,The length of the statement  "				property = type.GetProperty(propertyName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy); " is 122.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.bcl.cs,GetGenericTypeArguments,The length of the statement  "#if (NETSTANDARD2_0 || NETSTANDARD1_6 || NETSTANDARD1_5 || NETSTANDARD1_4 || NETSTANDARD1_3 || NET45 || NET40 || NET451 || NET452 || NET46 || NET461 || NET462) " is 159.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.bcl.cs,ByImplementedInterface,The length of the statement  "				type => (type.Namespace ?? string.Empty).StartsWith(namespaceName) && type.GetTypeInfo().ImplementsInterface(interfaceType)); " is 125.
Long Statement,PRI.ProductivityExtensions.SslStreamExtensions,SslStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SslStreamExtensions\SslStreamable.g.cs,BeginAuthenticateAsClient,The length of the statement  "			return sslstream.BeginAuthenticateAsClient(targetHost' clientCertificates' enabledSslProtocols' checkCertificateRevocation' asyncCallback' null); " is 145.
Long Statement,PRI.ProductivityExtensions.SslStreamExtensions,SslStreamable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SslStreamExtensions\SslStreamable.g.cs,BeginAuthenticateAsServer,The length of the statement  "			return sslstream.BeginAuthenticateAsServer(serverCertificate' clientCertificateRequired' enabledSslProtocols' checkCertificateRevocation' asyncCallback' null); " is 159.
Long Statement,PRI.ProductivityExtensions.ToolboxComponentsCreatedEventHandlerExtensions,ToolboxComponentsCreatedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolboxComponentsCreatedEventHandlerExtensions\ToolboxComponentsCreatedEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(toolboxcomponentscreatedeventhandler == null) throw new ArgumentNullException("toolboxcomponentscreatedeventhandler"); " is 121.
Long Statement,PRI.ProductivityExtensions.ToolboxComponentsCreatingEventHandlerExtensions,ToolboxComponentsCreatingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolboxComponentsCreatingEventHandlerExtensions\ToolboxComponentsCreatingEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(toolboxcomponentscreatingeventhandler == null) throw new ArgumentNullException("toolboxcomponentscreatingeventhandler"); " is 123.
Long Statement,PRI.ProductivityExtensions.ToolStripContentPanelRenderEventHandlerExtensions,ToolStripContentPanelRenderEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripContentPanelRenderEventHandlerExtensions\ToolStripContentPanelRenderEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(toolstripcontentpanelrendereventhandler == null) throw new ArgumentNullException("toolstripcontentpanelrendereventhandler"); " is 127.
Long Statement,PRI.ProductivityExtensions.ToolStripDropDownClosingEventHandlerExtensions,ToolStripDropDownClosingEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripDropDownClosingEventHandlerExtensions\ToolStripDropDownClosingEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(toolstripdropdownclosingeventhandler == null) throw new ArgumentNullException("toolstripdropdownclosingeventhandler"); " is 121.
Long Statement,PRI.ProductivityExtensions.ToolStripItemImageRenderEventHandlerExtensions,ToolStripItemImageRenderEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemImageRenderEventHandlerExtensions\ToolStripItemImageRenderEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(toolstripitemimagerendereventhandler == null) throw new ArgumentNullException("toolstripitemimagerendereventhandler"); " is 121.
Long Statement,PRI.ProductivityExtensions.ToolStripSeparatorRenderEventHandlerExtensions,ToolStripSeparatorRenderEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripSeparatorRenderEventHandlerExtensions\ToolStripSeparatorRenderEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(toolstripseparatorrendereventhandler == null) throw new ArgumentNullException("toolstripseparatorrendereventhandler"); " is 121.
Long Statement,PRI.ProductivityExtensions.WebBrowserDocumentCompletedEventHandlerExtensions,WebBrowserDocumentCompletedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserDocumentCompletedEventHandlerExtensions\WebBrowserDocumentCompletedEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(webbrowserdocumentcompletedeventhandler == null) throw new ArgumentNullException("webbrowserdocumentcompletedeventhandler"); " is 127.
Long Statement,PRI.ProductivityExtensions.WebBrowserProgressChangedEventHandlerExtensions,WebBrowserProgressChangedEventHandlerable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserProgressChangedEventHandlerExtensions\WebBrowserProgressChangedEventHandlerable.g.cs,BeginInvoke,The length of the statement  "			if(webbrowserprogresschangedeventhandler == null) throw new ArgumentNullException("webbrowserprogresschangedeventhandler"); " is 123.
Long Statement,PRI.ProductivityExtensions.XmlSerializationCollectionFixupCallbackExtensions,XmlSerializationCollectionFixupCallbackable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\XmlSerializationCollectionFixupCallbackExtensions\XmlSerializationCollectionFixupCallbackable.g.cs,BeginInvoke,The length of the statement  "			if(xmlserializationcollectionfixupcallback == null) throw new ArgumentNullException("xmlserializationcollectionfixupcallback"); " is 127.
Complex Conditional,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,ReferencesMethod,The conditional expression  "getTypeCall && instruction.Code == OpCodes.Ldtoken && i < instructions.Count() && instructions.ElementAt(i + 1).Code == OpCodes.Call"  is complex.
Empty Catch Block,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The method has an empty catch block.
Empty Catch Block,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The method has an empty catch block.
Empty Catch Block,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The method has an empty catch block.
Empty Catch Block,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The method has an empty catch block.
Empty Catch Block,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The method has an empty catch block.
Magic Number,PRI.ProductivityExtensions.ByteArrayExtensions,ByteArrayable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\ByteArrayExtensions\ByteArrayable.cs,AsHexString,The following statement contains a magic number: lineOctet > 16
Magic Number,PRI.ProductivityExtensions.IListExtensions,IListable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\IListExtensions\IListable.cs,BinarySearch,The following statement contains a magic number: int index = left + ((right - left) / 2);
Magic Number,PRI.ProductivityExtensions.IpAddressExtensions,IpAddressable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\IpAddressExtensions\IpAddressable.cs,IsIPv4LinkLocal,The following statement contains a magic number: return ipBytes[0] == 169 && ipBytes[1] == 254;
Magic Number,PRI.ProductivityExtensions.IpAddressExtensions,IpAddressable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\IpAddressExtensions\IpAddressable.cs,IsIPv4LinkLocal,The following statement contains a magic number: return ipBytes[0] == 169 && ipBytes[1] == 254;
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType)  				{  					case OperandType.InlineBrTarget:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						metadataToken += position;  						instruction.Operand = metadataToken;  						break;  					case OperandType.InlineField:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveField(metadataToken);  						}  						catch (Exception)  						{  							// if field could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineMethod:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveMethod(metadataToken);  						}  						catch (Exception)  						{  							// if method could not be resolved' ignore it.  						}    						if (instruction.Operand == null)  						{  							try  							{  								instruction.Operand = module.ResolveMember(metadataToken);  							}  							catch (Exception)  							{  								// if member could not be resolved' ignore it.  							}  						}    						break;  					case OperandType.InlineSig:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						instruction.Operand = module.ResolveSignature(metadataToken);  						break;  					case OperandType.InlineTok:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveType(metadataToken);  						}  						catch  						{  							// if type could not be resolved' ignore it.  						}    						// SSS : see what to do here  						break;  					case OperandType.InlineType:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;    						// now we call the ResolveType always using the generic attributes type in order  						// to support decompilation of generic methods and classes  						//  						// thanks to the guys from Code Project who commented on this missing feature  						try  						{  							if (methodInfo.DeclaringType != null)  							{  								instruction.Operand = module.ResolveType(  									metadataToken'  									methodInfo.DeclaringType.GetGenericArguments()'  									methodInfo.GetGenericArguments());  							}  						}  						catch (Exception)  						{  							// if type could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineI:  						{  							instruction.Operand = BitConverter.ToInt32(il' position);  							position += 4;  							break;  						}    					case OperandType.InlineI8:  						{  							instruction.Operand = BitConverter.ToInt64(il' position);  							position += 8;  							break;  						}    					case OperandType.InlineNone:  						{  							instruction.Operand = null;  							break;  						}    					case OperandType.InlineR:  						{  							instruction.Operand = BitConverter.ToDouble(il' position);  							position += sizeof(double);  							break;  						}    					case OperandType.InlineString:  						{  							metadataToken = BitConverter.ToInt32(il' position);  							position += 4;  							instruction.Operand = module.ResolveString(metadataToken);  							break;  						}    					case OperandType.InlineSwitch:  						{  							int count = BitConverter.ToInt32(il' position);  							position += 4;  							int[] casesAddresses = new int[count];  							for (int i = 0; i < count; i++)  							{  								casesAddresses[i] = BitConverter.ToInt32(il' position);  								position += 4;  							}    							int[] cases = new int[count];  							for (int i = 0; i < count; i++)  							{  								cases[i] = position + casesAddresses[i];  							}    							break;  						}    					case OperandType.InlineVar:  						{  							instruction.Operand = BitConverter.ToUInt16(il' position);  							position += sizeof(ushort);  							break;  						}    					case OperandType.ShortInlineBrTarget:  						{  							instruction.Operand = (sbyte)il[position] + position;  							position++;  							break;  						}    					case OperandType.ShortInlineI:  						{  							instruction.Operand = (sbyte)il[position];  							position++;  							break;  						}    					case OperandType.ShortInlineR:  						{  							instruction.Operand = BitConverter.ToSingle(il' position);  							position += sizeof(float);  							break;  						}    					case OperandType.ShortInlineVar:  						{  							instruction.Operand = il[position];  							position++;  							break;  						}    					default:  						{  							throw new ArgumentException(string.Format("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof(il));  						}  				}
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType)  				{  					case OperandType.InlineBrTarget:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						metadataToken += position;  						instruction.Operand = metadataToken;  						break;  					case OperandType.InlineField:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveField(metadataToken);  						}  						catch (Exception)  						{  							// if field could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineMethod:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveMethod(metadataToken);  						}  						catch (Exception)  						{  							// if method could not be resolved' ignore it.  						}    						if (instruction.Operand == null)  						{  							try  							{  								instruction.Operand = module.ResolveMember(metadataToken);  							}  							catch (Exception)  							{  								// if member could not be resolved' ignore it.  							}  						}    						break;  					case OperandType.InlineSig:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						instruction.Operand = module.ResolveSignature(metadataToken);  						break;  					case OperandType.InlineTok:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveType(metadataToken);  						}  						catch  						{  							// if type could not be resolved' ignore it.  						}    						// SSS : see what to do here  						break;  					case OperandType.InlineType:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;    						// now we call the ResolveType always using the generic attributes type in order  						// to support decompilation of generic methods and classes  						//  						// thanks to the guys from Code Project who commented on this missing feature  						try  						{  							if (methodInfo.DeclaringType != null)  							{  								instruction.Operand = module.ResolveType(  									metadataToken'  									methodInfo.DeclaringType.GetGenericArguments()'  									methodInfo.GetGenericArguments());  							}  						}  						catch (Exception)  						{  							// if type could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineI:  						{  							instruction.Operand = BitConverter.ToInt32(il' position);  							position += 4;  							break;  						}    					case OperandType.InlineI8:  						{  							instruction.Operand = BitConverter.ToInt64(il' position);  							position += 8;  							break;  						}    					case OperandType.InlineNone:  						{  							instruction.Operand = null;  							break;  						}    					case OperandType.InlineR:  						{  							instruction.Operand = BitConverter.ToDouble(il' position);  							position += sizeof(double);  							break;  						}    					case OperandType.InlineString:  						{  							metadataToken = BitConverter.ToInt32(il' position);  							position += 4;  							instruction.Operand = module.ResolveString(metadataToken);  							break;  						}    					case OperandType.InlineSwitch:  						{  							int count = BitConverter.ToInt32(il' position);  							position += 4;  							int[] casesAddresses = new int[count];  							for (int i = 0; i < count; i++)  							{  								casesAddresses[i] = BitConverter.ToInt32(il' position);  								position += 4;  							}    							int[] cases = new int[count];  							for (int i = 0; i < count; i++)  							{  								cases[i] = position + casesAddresses[i];  							}    							break;  						}    					case OperandType.InlineVar:  						{  							instruction.Operand = BitConverter.ToUInt16(il' position);  							position += sizeof(ushort);  							break;  						}    					case OperandType.ShortInlineBrTarget:  						{  							instruction.Operand = (sbyte)il[position] + position;  							position++;  							break;  						}    					case OperandType.ShortInlineI:  						{  							instruction.Operand = (sbyte)il[position];  							position++;  							break;  						}    					case OperandType.ShortInlineR:  						{  							instruction.Operand = BitConverter.ToSingle(il' position);  							position += sizeof(float);  							break;  						}    					case OperandType.ShortInlineVar:  						{  							instruction.Operand = il[position];  							position++;  							break;  						}    					default:  						{  							throw new ArgumentException(string.Format("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof(il));  						}  				}
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType)  				{  					case OperandType.InlineBrTarget:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						metadataToken += position;  						instruction.Operand = metadataToken;  						break;  					case OperandType.InlineField:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveField(metadataToken);  						}  						catch (Exception)  						{  							// if field could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineMethod:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveMethod(metadataToken);  						}  						catch (Exception)  						{  							// if method could not be resolved' ignore it.  						}    						if (instruction.Operand == null)  						{  							try  							{  								instruction.Operand = module.ResolveMember(metadataToken);  							}  							catch (Exception)  							{  								// if member could not be resolved' ignore it.  							}  						}    						break;  					case OperandType.InlineSig:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						instruction.Operand = module.ResolveSignature(metadataToken);  						break;  					case OperandType.InlineTok:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveType(metadataToken);  						}  						catch  						{  							// if type could not be resolved' ignore it.  						}    						// SSS : see what to do here  						break;  					case OperandType.InlineType:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;    						// now we call the ResolveType always using the generic attributes type in order  						// to support decompilation of generic methods and classes  						//  						// thanks to the guys from Code Project who commented on this missing feature  						try  						{  							if (methodInfo.DeclaringType != null)  							{  								instruction.Operand = module.ResolveType(  									metadataToken'  									methodInfo.DeclaringType.GetGenericArguments()'  									methodInfo.GetGenericArguments());  							}  						}  						catch (Exception)  						{  							// if type could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineI:  						{  							instruction.Operand = BitConverter.ToInt32(il' position);  							position += 4;  							break;  						}    					case OperandType.InlineI8:  						{  							instruction.Operand = BitConverter.ToInt64(il' position);  							position += 8;  							break;  						}    					case OperandType.InlineNone:  						{  							instruction.Operand = null;  							break;  						}    					case OperandType.InlineR:  						{  							instruction.Operand = BitConverter.ToDouble(il' position);  							position += sizeof(double);  							break;  						}    					case OperandType.InlineString:  						{  							metadataToken = BitConverter.ToInt32(il' position);  							position += 4;  							instruction.Operand = module.ResolveString(metadataToken);  							break;  						}    					case OperandType.InlineSwitch:  						{  							int count = BitConverter.ToInt32(il' position);  							position += 4;  							int[] casesAddresses = new int[count];  							for (int i = 0; i < count; i++)  							{  								casesAddresses[i] = BitConverter.ToInt32(il' position);  								position += 4;  							}    							int[] cases = new int[count];  							for (int i = 0; i < count; i++)  							{  								cases[i] = position + casesAddresses[i];  							}    							break;  						}    					case OperandType.InlineVar:  						{  							instruction.Operand = BitConverter.ToUInt16(il' position);  							position += sizeof(ushort);  							break;  						}    					case OperandType.ShortInlineBrTarget:  						{  							instruction.Operand = (sbyte)il[position] + position;  							position++;  							break;  						}    					case OperandType.ShortInlineI:  						{  							instruction.Operand = (sbyte)il[position];  							position++;  							break;  						}    					case OperandType.ShortInlineR:  						{  							instruction.Operand = BitConverter.ToSingle(il' position);  							position += sizeof(float);  							break;  						}    					case OperandType.ShortInlineVar:  						{  							instruction.Operand = il[position];  							position++;  							break;  						}    					default:  						{  							throw new ArgumentException(string.Format("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof(il));  						}  				}
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType)  				{  					case OperandType.InlineBrTarget:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						metadataToken += position;  						instruction.Operand = metadataToken;  						break;  					case OperandType.InlineField:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveField(metadataToken);  						}  						catch (Exception)  						{  							// if field could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineMethod:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveMethod(metadataToken);  						}  						catch (Exception)  						{  							// if method could not be resolved' ignore it.  						}    						if (instruction.Operand == null)  						{  							try  							{  								instruction.Operand = module.ResolveMember(metadataToken);  							}  							catch (Exception)  							{  								// if member could not be resolved' ignore it.  							}  						}    						break;  					case OperandType.InlineSig:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						instruction.Operand = module.ResolveSignature(metadataToken);  						break;  					case OperandType.InlineTok:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveType(metadataToken);  						}  						catch  						{  							// if type could not be resolved' ignore it.  						}    						// SSS : see what to do here  						break;  					case OperandType.InlineType:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;    						// now we call the ResolveType always using the generic attributes type in order  						// to support decompilation of generic methods and classes  						//  						// thanks to the guys from Code Project who commented on this missing feature  						try  						{  							if (methodInfo.DeclaringType != null)  							{  								instruction.Operand = module.ResolveType(  									metadataToken'  									methodInfo.DeclaringType.GetGenericArguments()'  									methodInfo.GetGenericArguments());  							}  						}  						catch (Exception)  						{  							// if type could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineI:  						{  							instruction.Operand = BitConverter.ToInt32(il' position);  							position += 4;  							break;  						}    					case OperandType.InlineI8:  						{  							instruction.Operand = BitConverter.ToInt64(il' position);  							position += 8;  							break;  						}    					case OperandType.InlineNone:  						{  							instruction.Operand = null;  							break;  						}    					case OperandType.InlineR:  						{  							instruction.Operand = BitConverter.ToDouble(il' position);  							position += sizeof(double);  							break;  						}    					case OperandType.InlineString:  						{  							metadataToken = BitConverter.ToInt32(il' position);  							position += 4;  							instruction.Operand = module.ResolveString(metadataToken);  							break;  						}    					case OperandType.InlineSwitch:  						{  							int count = BitConverter.ToInt32(il' position);  							position += 4;  							int[] casesAddresses = new int[count];  							for (int i = 0; i < count; i++)  							{  								casesAddresses[i] = BitConverter.ToInt32(il' position);  								position += 4;  							}    							int[] cases = new int[count];  							for (int i = 0; i < count; i++)  							{  								cases[i] = position + casesAddresses[i];  							}    							break;  						}    					case OperandType.InlineVar:  						{  							instruction.Operand = BitConverter.ToUInt16(il' position);  							position += sizeof(ushort);  							break;  						}    					case OperandType.ShortInlineBrTarget:  						{  							instruction.Operand = (sbyte)il[position] + position;  							position++;  							break;  						}    					case OperandType.ShortInlineI:  						{  							instruction.Operand = (sbyte)il[position];  							position++;  							break;  						}    					case OperandType.ShortInlineR:  						{  							instruction.Operand = BitConverter.ToSingle(il' position);  							position += sizeof(float);  							break;  						}    					case OperandType.ShortInlineVar:  						{  							instruction.Operand = il[position];  							position++;  							break;  						}    					default:  						{  							throw new ArgumentException(string.Format("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof(il));  						}  				}
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType)  				{  					case OperandType.InlineBrTarget:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						metadataToken += position;  						instruction.Operand = metadataToken;  						break;  					case OperandType.InlineField:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveField(metadataToken);  						}  						catch (Exception)  						{  							// if field could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineMethod:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveMethod(metadataToken);  						}  						catch (Exception)  						{  							// if method could not be resolved' ignore it.  						}    						if (instruction.Operand == null)  						{  							try  							{  								instruction.Operand = module.ResolveMember(metadataToken);  							}  							catch (Exception)  							{  								// if member could not be resolved' ignore it.  							}  						}    						break;  					case OperandType.InlineSig:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						instruction.Operand = module.ResolveSignature(metadataToken);  						break;  					case OperandType.InlineTok:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveType(metadataToken);  						}  						catch  						{  							// if type could not be resolved' ignore it.  						}    						// SSS : see what to do here  						break;  					case OperandType.InlineType:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;    						// now we call the ResolveType always using the generic attributes type in order  						// to support decompilation of generic methods and classes  						//  						// thanks to the guys from Code Project who commented on this missing feature  						try  						{  							if (methodInfo.DeclaringType != null)  							{  								instruction.Operand = module.ResolveType(  									metadataToken'  									methodInfo.DeclaringType.GetGenericArguments()'  									methodInfo.GetGenericArguments());  							}  						}  						catch (Exception)  						{  							// if type could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineI:  						{  							instruction.Operand = BitConverter.ToInt32(il' position);  							position += 4;  							break;  						}    					case OperandType.InlineI8:  						{  							instruction.Operand = BitConverter.ToInt64(il' position);  							position += 8;  							break;  						}    					case OperandType.InlineNone:  						{  							instruction.Operand = null;  							break;  						}    					case OperandType.InlineR:  						{  							instruction.Operand = BitConverter.ToDouble(il' position);  							position += sizeof(double);  							break;  						}    					case OperandType.InlineString:  						{  							metadataToken = BitConverter.ToInt32(il' position);  							position += 4;  							instruction.Operand = module.ResolveString(metadataToken);  							break;  						}    					case OperandType.InlineSwitch:  						{  							int count = BitConverter.ToInt32(il' position);  							position += 4;  							int[] casesAddresses = new int[count];  							for (int i = 0; i < count; i++)  							{  								casesAddresses[i] = BitConverter.ToInt32(il' position);  								position += 4;  							}    							int[] cases = new int[count];  							for (int i = 0; i < count; i++)  							{  								cases[i] = position + casesAddresses[i];  							}    							break;  						}    					case OperandType.InlineVar:  						{  							instruction.Operand = BitConverter.ToUInt16(il' position);  							position += sizeof(ushort);  							break;  						}    					case OperandType.ShortInlineBrTarget:  						{  							instruction.Operand = (sbyte)il[position] + position;  							position++;  							break;  						}    					case OperandType.ShortInlineI:  						{  							instruction.Operand = (sbyte)il[position];  							position++;  							break;  						}    					case OperandType.ShortInlineR:  						{  							instruction.Operand = BitConverter.ToSingle(il' position);  							position += sizeof(float);  							break;  						}    					case OperandType.ShortInlineVar:  						{  							instruction.Operand = il[position];  							position++;  							break;  						}    					default:  						{  							throw new ArgumentException(string.Format("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof(il));  						}  				}
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType)  				{  					case OperandType.InlineBrTarget:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						metadataToken += position;  						instruction.Operand = metadataToken;  						break;  					case OperandType.InlineField:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveField(metadataToken);  						}  						catch (Exception)  						{  							// if field could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineMethod:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveMethod(metadataToken);  						}  						catch (Exception)  						{  							// if method could not be resolved' ignore it.  						}    						if (instruction.Operand == null)  						{  							try  							{  								instruction.Operand = module.ResolveMember(metadataToken);  							}  							catch (Exception)  							{  								// if member could not be resolved' ignore it.  							}  						}    						break;  					case OperandType.InlineSig:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						instruction.Operand = module.ResolveSignature(metadataToken);  						break;  					case OperandType.InlineTok:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveType(metadataToken);  						}  						catch  						{  							// if type could not be resolved' ignore it.  						}    						// SSS : see what to do here  						break;  					case OperandType.InlineType:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;    						// now we call the ResolveType always using the generic attributes type in order  						// to support decompilation of generic methods and classes  						//  						// thanks to the guys from Code Project who commented on this missing feature  						try  						{  							if (methodInfo.DeclaringType != null)  							{  								instruction.Operand = module.ResolveType(  									metadataToken'  									methodInfo.DeclaringType.GetGenericArguments()'  									methodInfo.GetGenericArguments());  							}  						}  						catch (Exception)  						{  							// if type could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineI:  						{  							instruction.Operand = BitConverter.ToInt32(il' position);  							position += 4;  							break;  						}    					case OperandType.InlineI8:  						{  							instruction.Operand = BitConverter.ToInt64(il' position);  							position += 8;  							break;  						}    					case OperandType.InlineNone:  						{  							instruction.Operand = null;  							break;  						}    					case OperandType.InlineR:  						{  							instruction.Operand = BitConverter.ToDouble(il' position);  							position += sizeof(double);  							break;  						}    					case OperandType.InlineString:  						{  							metadataToken = BitConverter.ToInt32(il' position);  							position += 4;  							instruction.Operand = module.ResolveString(metadataToken);  							break;  						}    					case OperandType.InlineSwitch:  						{  							int count = BitConverter.ToInt32(il' position);  							position += 4;  							int[] casesAddresses = new int[count];  							for (int i = 0; i < count; i++)  							{  								casesAddresses[i] = BitConverter.ToInt32(il' position);  								position += 4;  							}    							int[] cases = new int[count];  							for (int i = 0; i < count; i++)  							{  								cases[i] = position + casesAddresses[i];  							}    							break;  						}    					case OperandType.InlineVar:  						{  							instruction.Operand = BitConverter.ToUInt16(il' position);  							position += sizeof(ushort);  							break;  						}    					case OperandType.ShortInlineBrTarget:  						{  							instruction.Operand = (sbyte)il[position] + position;  							position++;  							break;  						}    					case OperandType.ShortInlineI:  						{  							instruction.Operand = (sbyte)il[position];  							position++;  							break;  						}    					case OperandType.ShortInlineR:  						{  							instruction.Operand = BitConverter.ToSingle(il' position);  							position += sizeof(float);  							break;  						}    					case OperandType.ShortInlineVar:  						{  							instruction.Operand = il[position];  							position++;  							break;  						}    					default:  						{  							throw new ArgumentException(string.Format("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof(il));  						}  				}
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType)  				{  					case OperandType.InlineBrTarget:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						metadataToken += position;  						instruction.Operand = metadataToken;  						break;  					case OperandType.InlineField:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveField(metadataToken);  						}  						catch (Exception)  						{  							// if field could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineMethod:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveMethod(metadataToken);  						}  						catch (Exception)  						{  							// if method could not be resolved' ignore it.  						}    						if (instruction.Operand == null)  						{  							try  							{  								instruction.Operand = module.ResolveMember(metadataToken);  							}  							catch (Exception)  							{  								// if member could not be resolved' ignore it.  							}  						}    						break;  					case OperandType.InlineSig:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						instruction.Operand = module.ResolveSignature(metadataToken);  						break;  					case OperandType.InlineTok:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveType(metadataToken);  						}  						catch  						{  							// if type could not be resolved' ignore it.  						}    						// SSS : see what to do here  						break;  					case OperandType.InlineType:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;    						// now we call the ResolveType always using the generic attributes type in order  						// to support decompilation of generic methods and classes  						//  						// thanks to the guys from Code Project who commented on this missing feature  						try  						{  							if (methodInfo.DeclaringType != null)  							{  								instruction.Operand = module.ResolveType(  									metadataToken'  									methodInfo.DeclaringType.GetGenericArguments()'  									methodInfo.GetGenericArguments());  							}  						}  						catch (Exception)  						{  							// if type could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineI:  						{  							instruction.Operand = BitConverter.ToInt32(il' position);  							position += 4;  							break;  						}    					case OperandType.InlineI8:  						{  							instruction.Operand = BitConverter.ToInt64(il' position);  							position += 8;  							break;  						}    					case OperandType.InlineNone:  						{  							instruction.Operand = null;  							break;  						}    					case OperandType.InlineR:  						{  							instruction.Operand = BitConverter.ToDouble(il' position);  							position += sizeof(double);  							break;  						}    					case OperandType.InlineString:  						{  							metadataToken = BitConverter.ToInt32(il' position);  							position += 4;  							instruction.Operand = module.ResolveString(metadataToken);  							break;  						}    					case OperandType.InlineSwitch:  						{  							int count = BitConverter.ToInt32(il' position);  							position += 4;  							int[] casesAddresses = new int[count];  							for (int i = 0; i < count; i++)  							{  								casesAddresses[i] = BitConverter.ToInt32(il' position);  								position += 4;  							}    							int[] cases = new int[count];  							for (int i = 0; i < count; i++)  							{  								cases[i] = position + casesAddresses[i];  							}    							break;  						}    					case OperandType.InlineVar:  						{  							instruction.Operand = BitConverter.ToUInt16(il' position);  							position += sizeof(ushort);  							break;  						}    					case OperandType.ShortInlineBrTarget:  						{  							instruction.Operand = (sbyte)il[position] + position;  							position++;  							break;  						}    					case OperandType.ShortInlineI:  						{  							instruction.Operand = (sbyte)il[position];  							position++;  							break;  						}    					case OperandType.ShortInlineR:  						{  							instruction.Operand = BitConverter.ToSingle(il' position);  							position += sizeof(float);  							break;  						}    					case OperandType.ShortInlineVar:  						{  							instruction.Operand = il[position];  							position++;  							break;  						}    					default:  						{  							throw new ArgumentException(string.Format("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof(il));  						}  				}
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType)  				{  					case OperandType.InlineBrTarget:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						metadataToken += position;  						instruction.Operand = metadataToken;  						break;  					case OperandType.InlineField:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveField(metadataToken);  						}  						catch (Exception)  						{  							// if field could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineMethod:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveMethod(metadataToken);  						}  						catch (Exception)  						{  							// if method could not be resolved' ignore it.  						}    						if (instruction.Operand == null)  						{  							try  							{  								instruction.Operand = module.ResolveMember(metadataToken);  							}  							catch (Exception)  							{  								// if member could not be resolved' ignore it.  							}  						}    						break;  					case OperandType.InlineSig:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						instruction.Operand = module.ResolveSignature(metadataToken);  						break;  					case OperandType.InlineTok:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveType(metadataToken);  						}  						catch  						{  							// if type could not be resolved' ignore it.  						}    						// SSS : see what to do here  						break;  					case OperandType.InlineType:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;    						// now we call the ResolveType always using the generic attributes type in order  						// to support decompilation of generic methods and classes  						//  						// thanks to the guys from Code Project who commented on this missing feature  						try  						{  							if (methodInfo.DeclaringType != null)  							{  								instruction.Operand = module.ResolveType(  									metadataToken'  									methodInfo.DeclaringType.GetGenericArguments()'  									methodInfo.GetGenericArguments());  							}  						}  						catch (Exception)  						{  							// if type could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineI:  						{  							instruction.Operand = BitConverter.ToInt32(il' position);  							position += 4;  							break;  						}    					case OperandType.InlineI8:  						{  							instruction.Operand = BitConverter.ToInt64(il' position);  							position += 8;  							break;  						}    					case OperandType.InlineNone:  						{  							instruction.Operand = null;  							break;  						}    					case OperandType.InlineR:  						{  							instruction.Operand = BitConverter.ToDouble(il' position);  							position += sizeof(double);  							break;  						}    					case OperandType.InlineString:  						{  							metadataToken = BitConverter.ToInt32(il' position);  							position += 4;  							instruction.Operand = module.ResolveString(metadataToken);  							break;  						}    					case OperandType.InlineSwitch:  						{  							int count = BitConverter.ToInt32(il' position);  							position += 4;  							int[] casesAddresses = new int[count];  							for (int i = 0; i < count; i++)  							{  								casesAddresses[i] = BitConverter.ToInt32(il' position);  								position += 4;  							}    							int[] cases = new int[count];  							for (int i = 0; i < count; i++)  							{  								cases[i] = position + casesAddresses[i];  							}    							break;  						}    					case OperandType.InlineVar:  						{  							instruction.Operand = BitConverter.ToUInt16(il' position);  							position += sizeof(ushort);  							break;  						}    					case OperandType.ShortInlineBrTarget:  						{  							instruction.Operand = (sbyte)il[position] + position;  							position++;  							break;  						}    					case OperandType.ShortInlineI:  						{  							instruction.Operand = (sbyte)il[position];  							position++;  							break;  						}    					case OperandType.ShortInlineR:  						{  							instruction.Operand = BitConverter.ToSingle(il' position);  							position += sizeof(float);  							break;  						}    					case OperandType.ShortInlineVar:  						{  							instruction.Operand = il[position];  							position++;  							break;  						}    					default:  						{  							throw new ArgumentException(string.Format("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof(il));  						}  				}
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType)  				{  					case OperandType.InlineBrTarget:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						metadataToken += position;  						instruction.Operand = metadataToken;  						break;  					case OperandType.InlineField:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveField(metadataToken);  						}  						catch (Exception)  						{  							// if field could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineMethod:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveMethod(metadataToken);  						}  						catch (Exception)  						{  							// if method could not be resolved' ignore it.  						}    						if (instruction.Operand == null)  						{  							try  							{  								instruction.Operand = module.ResolveMember(metadataToken);  							}  							catch (Exception)  							{  								// if member could not be resolved' ignore it.  							}  						}    						break;  					case OperandType.InlineSig:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						instruction.Operand = module.ResolveSignature(metadataToken);  						break;  					case OperandType.InlineTok:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveType(metadataToken);  						}  						catch  						{  							// if type could not be resolved' ignore it.  						}    						// SSS : see what to do here  						break;  					case OperandType.InlineType:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;    						// now we call the ResolveType always using the generic attributes type in order  						// to support decompilation of generic methods and classes  						//  						// thanks to the guys from Code Project who commented on this missing feature  						try  						{  							if (methodInfo.DeclaringType != null)  							{  								instruction.Operand = module.ResolveType(  									metadataToken'  									methodInfo.DeclaringType.GetGenericArguments()'  									methodInfo.GetGenericArguments());  							}  						}  						catch (Exception)  						{  							// if type could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineI:  						{  							instruction.Operand = BitConverter.ToInt32(il' position);  							position += 4;  							break;  						}    					case OperandType.InlineI8:  						{  							instruction.Operand = BitConverter.ToInt64(il' position);  							position += 8;  							break;  						}    					case OperandType.InlineNone:  						{  							instruction.Operand = null;  							break;  						}    					case OperandType.InlineR:  						{  							instruction.Operand = BitConverter.ToDouble(il' position);  							position += sizeof(double);  							break;  						}    					case OperandType.InlineString:  						{  							metadataToken = BitConverter.ToInt32(il' position);  							position += 4;  							instruction.Operand = module.ResolveString(metadataToken);  							break;  						}    					case OperandType.InlineSwitch:  						{  							int count = BitConverter.ToInt32(il' position);  							position += 4;  							int[] casesAddresses = new int[count];  							for (int i = 0; i < count; i++)  							{  								casesAddresses[i] = BitConverter.ToInt32(il' position);  								position += 4;  							}    							int[] cases = new int[count];  							for (int i = 0; i < count; i++)  							{  								cases[i] = position + casesAddresses[i];  							}    							break;  						}    					case OperandType.InlineVar:  						{  							instruction.Operand = BitConverter.ToUInt16(il' position);  							position += sizeof(ushort);  							break;  						}    					case OperandType.ShortInlineBrTarget:  						{  							instruction.Operand = (sbyte)il[position] + position;  							position++;  							break;  						}    					case OperandType.ShortInlineI:  						{  							instruction.Operand = (sbyte)il[position];  							position++;  							break;  						}    					case OperandType.ShortInlineR:  						{  							instruction.Operand = BitConverter.ToSingle(il' position);  							position += sizeof(float);  							break;  						}    					case OperandType.ShortInlineVar:  						{  							instruction.Operand = il[position];  							position++;  							break;  						}    					default:  						{  							throw new ArgumentException(string.Format("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof(il));  						}  				}
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType)  				{  					case OperandType.InlineBrTarget:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						metadataToken += position;  						instruction.Operand = metadataToken;  						break;  					case OperandType.InlineField:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveField(metadataToken);  						}  						catch (Exception)  						{  							// if field could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineMethod:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveMethod(metadataToken);  						}  						catch (Exception)  						{  							// if method could not be resolved' ignore it.  						}    						if (instruction.Operand == null)  						{  							try  							{  								instruction.Operand = module.ResolveMember(metadataToken);  							}  							catch (Exception)  							{  								// if member could not be resolved' ignore it.  							}  						}    						break;  					case OperandType.InlineSig:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						instruction.Operand = module.ResolveSignature(metadataToken);  						break;  					case OperandType.InlineTok:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveType(metadataToken);  						}  						catch  						{  							// if type could not be resolved' ignore it.  						}    						// SSS : see what to do here  						break;  					case OperandType.InlineType:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;    						// now we call the ResolveType always using the generic attributes type in order  						// to support decompilation of generic methods and classes  						//  						// thanks to the guys from Code Project who commented on this missing feature  						try  						{  							if (methodInfo.DeclaringType != null)  							{  								instruction.Operand = module.ResolveType(  									metadataToken'  									methodInfo.DeclaringType.GetGenericArguments()'  									methodInfo.GetGenericArguments());  							}  						}  						catch (Exception)  						{  							// if type could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineI:  						{  							instruction.Operand = BitConverter.ToInt32(il' position);  							position += 4;  							break;  						}    					case OperandType.InlineI8:  						{  							instruction.Operand = BitConverter.ToInt64(il' position);  							position += 8;  							break;  						}    					case OperandType.InlineNone:  						{  							instruction.Operand = null;  							break;  						}    					case OperandType.InlineR:  						{  							instruction.Operand = BitConverter.ToDouble(il' position);  							position += sizeof(double);  							break;  						}    					case OperandType.InlineString:  						{  							metadataToken = BitConverter.ToInt32(il' position);  							position += 4;  							instruction.Operand = module.ResolveString(metadataToken);  							break;  						}    					case OperandType.InlineSwitch:  						{  							int count = BitConverter.ToInt32(il' position);  							position += 4;  							int[] casesAddresses = new int[count];  							for (int i = 0; i < count; i++)  							{  								casesAddresses[i] = BitConverter.ToInt32(il' position);  								position += 4;  							}    							int[] cases = new int[count];  							for (int i = 0; i < count; i++)  							{  								cases[i] = position + casesAddresses[i];  							}    							break;  						}    					case OperandType.InlineVar:  						{  							instruction.Operand = BitConverter.ToUInt16(il' position);  							position += sizeof(ushort);  							break;  						}    					case OperandType.ShortInlineBrTarget:  						{  							instruction.Operand = (sbyte)il[position] + position;  							position++;  							break;  						}    					case OperandType.ShortInlineI:  						{  							instruction.Operand = (sbyte)il[position];  							position++;  							break;  						}    					case OperandType.ShortInlineR:  						{  							instruction.Operand = BitConverter.ToSingle(il' position);  							position += sizeof(float);  							break;  						}    					case OperandType.ShortInlineVar:  						{  							instruction.Operand = il[position];  							position++;  							break;  						}    					default:  						{  							throw new ArgumentException(string.Format("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof(il));  						}  				}
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType)  				{  					case OperandType.InlineBrTarget:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						metadataToken += position;  						instruction.Operand = metadataToken;  						break;  					case OperandType.InlineField:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveField(metadataToken);  						}  						catch (Exception)  						{  							// if field could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineMethod:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveMethod(metadataToken);  						}  						catch (Exception)  						{  							// if method could not be resolved' ignore it.  						}    						if (instruction.Operand == null)  						{  							try  							{  								instruction.Operand = module.ResolveMember(metadataToken);  							}  							catch (Exception)  							{  								// if member could not be resolved' ignore it.  							}  						}    						break;  					case OperandType.InlineSig:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						instruction.Operand = module.ResolveSignature(metadataToken);  						break;  					case OperandType.InlineTok:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;  						try  						{  							instruction.Operand = module.ResolveType(metadataToken);  						}  						catch  						{  							// if type could not be resolved' ignore it.  						}    						// SSS : see what to do here  						break;  					case OperandType.InlineType:  						metadataToken = BitConverter.ToInt32(il' position);  						position += 4;    						// now we call the ResolveType always using the generic attributes type in order  						// to support decompilation of generic methods and classes  						//  						// thanks to the guys from Code Project who commented on this missing feature  						try  						{  							if (methodInfo.DeclaringType != null)  							{  								instruction.Operand = module.ResolveType(  									metadataToken'  									methodInfo.DeclaringType.GetGenericArguments()'  									methodInfo.GetGenericArguments());  							}  						}  						catch (Exception)  						{  							// if type could not be resolved' ignore it.  						}    						break;  					case OperandType.InlineI:  						{  							instruction.Operand = BitConverter.ToInt32(il' position);  							position += 4;  							break;  						}    					case OperandType.InlineI8:  						{  							instruction.Operand = BitConverter.ToInt64(il' position);  							position += 8;  							break;  						}    					case OperandType.InlineNone:  						{  							instruction.Operand = null;  							break;  						}    					case OperandType.InlineR:  						{  							instruction.Operand = BitConverter.ToDouble(il' position);  							position += sizeof(double);  							break;  						}    					case OperandType.InlineString:  						{  							metadataToken = BitConverter.ToInt32(il' position);  							position += 4;  							instruction.Operand = module.ResolveString(metadataToken);  							break;  						}    					case OperandType.InlineSwitch:  						{  							int count = BitConverter.ToInt32(il' position);  							position += 4;  							int[] casesAddresses = new int[count];  							for (int i = 0; i < count; i++)  							{  								casesAddresses[i] = BitConverter.ToInt32(il' position);  								position += 4;  							}    							int[] cases = new int[count];  							for (int i = 0; i < count; i++)  							{  								cases[i] = position + casesAddresses[i];  							}    							break;  						}    					case OperandType.InlineVar:  						{  							instruction.Operand = BitConverter.ToUInt16(il' position);  							position += sizeof(ushort);  							break;  						}    					case OperandType.ShortInlineBrTarget:  						{  							instruction.Operand = (sbyte)il[position] + position;  							position++;  							break;  						}    					case OperandType.ShortInlineI:  						{  							instruction.Operand = (sbyte)il[position];  							position++;  							break;  						}    					case OperandType.ShortInlineR:  						{  							instruction.Operand = BitConverter.ToSingle(il' position);  							position += sizeof(float);  							break;  						}    					case OperandType.ShortInlineVar:  						{  							instruction.Operand = il[position];  							position++;  							break;  						}    					default:  						{  							throw new ArgumentException(string.Format("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof(il));  						}  				}
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: return 100;
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: return -100;
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: return 100;
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: p = matches * 100 / sourceCount;
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: return p == 100 ? 0 : p;
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: return -100;
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: p = -matches * 100 / thatCount;
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: return p == 100 ? 0 : p;
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,EndOfDay,The following statement contains a magic number: return new DateTime(date.Year' date.Month' date.Day' 23' 59' 59' 999);
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,EndOfDay,The following statement contains a magic number: return new DateTime(date.Year' date.Month' date.Day' 23' 59' 59' 999);
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,EndOfDay,The following statement contains a magic number: return new DateTime(date.Year' date.Month' date.Day' 23' 59' 59' 999);
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,EndOfDay,The following statement contains a magic number: return new DateTime(date.Year' date.Month' date.Day' 23' 59' 59' 999);
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,RoundToHours,The following statement contains a magic number: timeSpan.Minutes >= 30
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,RoundToMinutes,The following statement contains a magic number: timeSpan.Seconds >= 30
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,RoundToSeconds,The following statement contains a magic number: timeSpan.Milliseconds >= 500
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,Million,The following statement contains a magic number: return value * 1000000;
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,Thousand,The following statement contains a magic number: return value * 1000;
Missing Default,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,C:\research\architectureSmells\repos\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.bcl.cs,GetDefaultValue,The following switch statement is missing a default case: switch (sourceType.Name)  					{  						case "String":  							toReturn = string.Empty;  							break;  						case "Byte[]":  							toReturn = new byte[0];  							break;  					}
