Implementation smell,Namespace,Class,File,Method,Description
Long Method,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The method has 150 lines of code.
Complex Method,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,Cyclomatic complexity of the method is 67
Complex Method,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,ReferencesMethod,Cyclomatic complexity of the method is 10
Complex Method,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.cs,GetDefaultValue,Cyclomatic complexity of the method is 9
Complex Method,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEqual,Cyclomatic complexity of the method is 9
Long Parameter List,PRI.ProductivityExtensions.ActionExtensions,Actionable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ActionExtensions\Actionable.g.cs,BeginInvoke,The method has 18 parameters.
Long Parameter List,PRI.ProductivityExtensions.ActiveDesignerEventHandlerExtensions,ActiveDesignerEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ActiveDesignerEventHandlerExtensions\ActiveDesignerEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.AddingNewEventHandlerExtensions,AddingNewEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\AddingNewEventHandlerExtensions\AddingNewEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.AnonymousPipeClientStreamExtensions,AnonymousPipeClientStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\AnonymousPipeClientStreamExtensions\AnonymousPipeClientStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.AnonymousPipeClientStreamExtensions,AnonymousPipeClientStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\AnonymousPipeClientStreamExtensions\AnonymousPipeClientStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.AnonymousPipeServerStreamExtensions,AnonymousPipeServerStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\AnonymousPipeServerStreamExtensions\AnonymousPipeServerStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.AnonymousPipeServerStreamExtensions,AnonymousPipeServerStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\AnonymousPipeServerStreamExtensions\AnonymousPipeServerStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.ArrayConverterExtensions,ArrayConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ArrayConverterExtensions\ArrayConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.AssemblyLoadEventHandlerExtensions,AssemblyLoadEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\AssemblyLoadEventHandlerExtensions\AssemblyLoadEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.AsyncCompletedEventHandlerExtensions,AsyncCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\AsyncCompletedEventHandlerExtensions\AsyncCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.AuthenticatedStreamExtensions,AuthenticatedStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\AuthenticatedStreamExtensions\AuthenticatedStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.AuthenticatedStreamExtensions,AuthenticatedStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\AuthenticatedStreamExtensions\AuthenticatedStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.BaseNumberConverterExtensions,BaseNumberConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\BaseNumberConverterExtensions\BaseNumberConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.BindingCompleteEventHandlerExtensions,BindingCompleteEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\BindingCompleteEventHandlerExtensions\BindingCompleteEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.BindingManagerDataErrorEventHandlerExtensions,BindingManagerDataErrorEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\BindingManagerDataErrorEventHandlerExtensions\BindingManagerDataErrorEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.BindIPEndPointExtensions,BindIPEndPointable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\BindIPEndPointExtensions\BindIPEndPointable.g.cs,BeginInvoke,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.BooleanConverterExtensions,BooleanConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\BooleanConverterExtensions\BooleanConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.BufferedStreamExtensions,BufferedStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\BufferedStreamExtensions\BufferedStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.BufferedStreamExtensions,BufferedStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\BufferedStreamExtensions\BufferedStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.ByteConverterExtensions,ByteConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ByteConverterExtensions\ByteConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.CacheVirtualItemsEventHandlerExtensions,CacheVirtualItemsEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\CacheVirtualItemsEventHandlerExtensions\CacheVirtualItemsEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.CancelEventHandlerExtensions,CancelEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\CancelEventHandlerExtensions\CancelEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.CharConverterExtensions,CharConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\CharConverterExtensions\CharConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.CollectionChangeEventHandlerExtensions,CollectionChangeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\CollectionChangeEventHandlerExtensions\CollectionChangeEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.CollectionConverterExtensions,CollectionConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\CollectionConverterExtensions\CollectionConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ColorConverterExtensions,ColorConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ColorConverterExtensions\ColorConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ColumnClickEventHandlerExtensions,ColumnClickEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ColumnClickEventHandlerExtensions\ColumnClickEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ColumnHeaderConverterExtensions,ColumnHeaderConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ColumnHeaderConverterExtensions\ColumnHeaderConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ColumnReorderedEventHandlerExtensions,ColumnReorderedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ColumnReorderedEventHandlerExtensions\ColumnReorderedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ColumnWidthChangedEventHandlerExtensions,ColumnWidthChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ColumnWidthChangedEventHandlerExtensions\ColumnWidthChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ColumnWidthChangingEventHandlerExtensions,ColumnWidthChangingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ColumnWidthChangingEventHandlerExtensions\ColumnWidthChangingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ComparisonExtensions,Comparisonable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ComparisonExtensions\Comparisonable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ComponentChangedEventHandlerExtensions,ComponentChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ComponentChangedEventHandlerExtensions\ComponentChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ComponentChangingEventHandlerExtensions,ComponentChangingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ComponentChangingEventHandlerExtensions\ComponentChangingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ComponentConverterExtensions,ComponentConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ComponentConverterExtensions\ComponentConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ComponentEventHandlerExtensions,ComponentEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ComponentEventHandlerExtensions\ComponentEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ComponentRenameEventHandlerExtensions,ComponentRenameEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ComponentRenameEventHandlerExtensions\ComponentRenameEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ConsoleCancelEventHandlerExtensions,ConsoleCancelEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ConsoleCancelEventHandlerExtensions\ConsoleCancelEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ContentsResizedEventHandlerExtensions,ContentsResizedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ContentsResizedEventHandlerExtensions\ContentsResizedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ControlEventHandlerExtensions,ControlEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ControlEventHandlerExtensions\ControlEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ConvertEventHandlerExtensions,ConvertEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ConvertEventHandlerExtensions\ConvertEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.CryptoAPITransformExtensions,CryptoAPITransformable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\CryptoAPITransformExtensions\CryptoAPITransformable.g.cs,TransformBlock,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.CryptoStreamExtensions,CryptoStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\CryptoStreamExtensions\CryptoStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.CryptoStreamExtensions,CryptoStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\CryptoStreamExtensions\CryptoStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.CultureInfoConverterExtensions,CultureInfoConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\CultureInfoConverterExtensions\CultureInfoConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.CursorConverterExtensions,CursorConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\CursorConverterExtensions\CursorConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataColumnChangeEventHandlerExtensions,DataColumnChangeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataColumnChangeEventHandlerExtensions\DataColumnChangeEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridPreferredColumnWidthTypeConverterExtensions,DataGridPreferredColumnWidthTypeConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridPreferredColumnWidthTypeConverterExtensions\DataGridPreferredColumnWidthTypeConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewAutoSizeColumnModeEventHandlerExtensions,DataGridViewAutoSizeColumnModeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewAutoSizeColumnModeEventHandlerExtensions\DataGridViewAutoSizeColumnModeEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewAutoSizeColumnsModeEventHandlerExtensions,DataGridViewAutoSizeColumnsModeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewAutoSizeColumnsModeEventHandlerExtensions\DataGridViewAutoSizeColumnsModeEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewAutoSizeModeEventHandlerExtensions,DataGridViewAutoSizeModeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewAutoSizeModeEventHandlerExtensions\DataGridViewAutoSizeModeEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewBindingCompleteEventHandlerExtensions,DataGridViewBindingCompleteEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewBindingCompleteEventHandlerExtensions\DataGridViewBindingCompleteEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellCancelEventHandlerExtensions,DataGridViewCellCancelEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellCancelEventHandlerExtensions\DataGridViewCellCancelEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellContextMenuStripNeededEventHandlerExtensions,DataGridViewCellContextMenuStripNeededEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellContextMenuStripNeededEventHandlerExtensions\DataGridViewCellContextMenuStripNeededEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellErrorTextNeededEventHandlerExtensions,DataGridViewCellErrorTextNeededEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellErrorTextNeededEventHandlerExtensions\DataGridViewCellErrorTextNeededEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellEventHandlerExtensions,DataGridViewCellEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellEventHandlerExtensions\DataGridViewCellEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellFormattingEventHandlerExtensions,DataGridViewCellFormattingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellFormattingEventHandlerExtensions\DataGridViewCellFormattingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellMouseEventHandlerExtensions,DataGridViewCellMouseEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellMouseEventHandlerExtensions\DataGridViewCellMouseEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellPaintingEventHandlerExtensions,DataGridViewCellPaintingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellPaintingEventHandlerExtensions\DataGridViewCellPaintingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellParsingEventHandlerExtensions,DataGridViewCellParsingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellParsingEventHandlerExtensions\DataGridViewCellParsingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellStateChangedEventHandlerExtensions,DataGridViewCellStateChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellStateChangedEventHandlerExtensions\DataGridViewCellStateChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellStyleContentChangedEventHandlerExtensions,DataGridViewCellStyleContentChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellStyleContentChangedEventHandlerExtensions\DataGridViewCellStyleContentChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellStyleConverterExtensions,DataGridViewCellStyleConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellStyleConverterExtensions\DataGridViewCellStyleConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellToolTipTextNeededEventHandlerExtensions,DataGridViewCellToolTipTextNeededEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellToolTipTextNeededEventHandlerExtensions\DataGridViewCellToolTipTextNeededEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellValidatingEventHandlerExtensions,DataGridViewCellValidatingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellValidatingEventHandlerExtensions\DataGridViewCellValidatingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewCellValueEventHandlerExtensions,DataGridViewCellValueEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellValueEventHandlerExtensions\DataGridViewCellValueEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewColumnDividerDoubleClickEventHandlerExtensions,DataGridViewColumnDividerDoubleClickEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewColumnDividerDoubleClickEventHandlerExtensions\DataGridViewColumnDividerDoubleClickEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewColumnEventHandlerExtensions,DataGridViewColumnEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewColumnEventHandlerExtensions\DataGridViewColumnEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewColumnStateChangedEventHandlerExtensions,DataGridViewColumnStateChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewColumnStateChangedEventHandlerExtensions\DataGridViewColumnStateChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewDataErrorEventHandlerExtensions,DataGridViewDataErrorEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewDataErrorEventHandlerExtensions\DataGridViewDataErrorEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewEditingControlShowingEventHandlerExtensions,DataGridViewEditingControlShowingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewEditingControlShowingEventHandlerExtensions\DataGridViewEditingControlShowingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewRowCancelEventHandlerExtensions,DataGridViewRowCancelEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowCancelEventHandlerExtensions\DataGridViewRowCancelEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewRowContextMenuStripNeededEventHandlerExtensions,DataGridViewRowContextMenuStripNeededEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowContextMenuStripNeededEventHandlerExtensions\DataGridViewRowContextMenuStripNeededEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewRowDividerDoubleClickEventHandlerExtensions,DataGridViewRowDividerDoubleClickEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowDividerDoubleClickEventHandlerExtensions\DataGridViewRowDividerDoubleClickEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewRowErrorTextNeededEventHandlerExtensions,DataGridViewRowErrorTextNeededEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowErrorTextNeededEventHandlerExtensions\DataGridViewRowErrorTextNeededEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewRowEventHandlerExtensions,DataGridViewRowEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowEventHandlerExtensions\DataGridViewRowEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewRowHeightInfoNeededEventHandlerExtensions,DataGridViewRowHeightInfoNeededEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowHeightInfoNeededEventHandlerExtensions\DataGridViewRowHeightInfoNeededEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewRowHeightInfoPushedEventHandlerExtensions,DataGridViewRowHeightInfoPushedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowHeightInfoPushedEventHandlerExtensions\DataGridViewRowHeightInfoPushedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewRowPostPaintEventHandlerExtensions,DataGridViewRowPostPaintEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowPostPaintEventHandlerExtensions\DataGridViewRowPostPaintEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewRowPrePaintEventHandlerExtensions,DataGridViewRowPrePaintEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowPrePaintEventHandlerExtensions\DataGridViewRowPrePaintEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewRowsAddedEventHandlerExtensions,DataGridViewRowsAddedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowsAddedEventHandlerExtensions\DataGridViewRowsAddedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewRowsRemovedEventHandlerExtensions,DataGridViewRowsRemovedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowsRemovedEventHandlerExtensions\DataGridViewRowsRemovedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewRowStateChangedEventHandlerExtensions,DataGridViewRowStateChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowStateChangedEventHandlerExtensions\DataGridViewRowStateChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataGridViewSortCompareEventHandlerExtensions,DataGridViewSortCompareEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewSortCompareEventHandlerExtensions\DataGridViewSortCompareEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataReceivedEventHandlerExtensions,DataReceivedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataReceivedEventHandlerExtensions\DataReceivedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataRowChangeEventHandlerExtensions,DataRowChangeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataRowChangeEventHandlerExtensions\DataRowChangeEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataTableClearEventHandlerExtensions,DataTableClearEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataTableClearEventHandlerExtensions\DataTableClearEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DataTableNewRowEventHandlerExtensions,DataTableNewRowEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataTableNewRowEventHandlerExtensions\DataTableNewRowEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DateBoldEventHandlerExtensions,DateBoldEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DateBoldEventHandlerExtensions\DateBoldEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DateRangeEventHandlerExtensions,DateRangeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DateRangeEventHandlerExtensions\DateRangeEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DateTimeConverterExtensions,DateTimeConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DateTimeConverterExtensions\DateTimeConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DateTimeOffsetConverterExtensions,DateTimeOffsetConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DateTimeOffsetConverterExtensions\DateTimeOffsetConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DbDataReaderExtensions,DbDataReaderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DbDataReaderExtensions\DbDataReaderable.g.cs,GetBytes,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DbDataReaderExtensions,DbDataReaderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DbDataReaderExtensions\DbDataReaderable.g.cs,GetChars,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DbDataRecordExtensions,DbDataRecordable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DbDataRecordExtensions\DbDataRecordable.g.cs,GetBytes,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DbDataRecordExtensions,DbDataRecordable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DbDataRecordExtensions\DbDataRecordable.g.cs,GetChars,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DecimalConverterExtensions,DecimalConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DecimalConverterExtensions\DecimalConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DecoderExtensions,Decoderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DecoderExtensions\Decoderable.g.cs,GetChars,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DecoderExtensions,Decoderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DecoderExtensions\Decoderable.g.cs,GetChars,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.DecoderExtensions,Decoderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DecoderExtensions\Decoderable.g.cs,Convert,The method has 9 parameters.
Long Parameter List,PRI.ProductivityExtensions.DeflateStreamExtensions,DeflateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DeflateStreamExtensions\DeflateStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.DeflateStreamExtensions,DeflateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DeflateStreamExtensions\DeflateStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.DesignerEventHandlerExtensions,DesignerEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DesignerEventHandlerExtensions\DesignerEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DesignerTransactionCloseEventHandlerExtensions,DesignerTransactionCloseEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DesignerTransactionCloseEventHandlerExtensions\DesignerTransactionCloseEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DoubleConverterExtensions,DoubleConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DoubleConverterExtensions\DoubleConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DownloadDataCompletedEventHandlerExtensions,DownloadDataCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DownloadDataCompletedEventHandlerExtensions\DownloadDataCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DownloadProgressChangedEventHandlerExtensions,DownloadProgressChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DownloadProgressChangedEventHandlerExtensions\DownloadProgressChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DownloadStringCompletedEventHandlerExtensions,DownloadStringCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DownloadStringCompletedEventHandlerExtensions\DownloadStringCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DoWorkEventHandlerExtensions,DoWorkEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DoWorkEventHandlerExtensions\DoWorkEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DragEventHandlerExtensions,DragEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DragEventHandlerExtensions\DragEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DrawItemEventHandlerExtensions,DrawItemEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DrawItemEventHandlerExtensions\DrawItemEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DrawListViewColumnHeaderEventHandlerExtensions,DrawListViewColumnHeaderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DrawListViewColumnHeaderEventHandlerExtensions\DrawListViewColumnHeaderEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DrawListViewItemEventHandlerExtensions,DrawListViewItemEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DrawListViewItemEventHandlerExtensions\DrawListViewItemEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DrawListViewSubItemEventHandlerExtensions,DrawListViewSubItemEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DrawListViewSubItemEventHandlerExtensions\DrawListViewSubItemEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DrawToolTipEventHandlerExtensions,DrawToolTipEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DrawToolTipEventHandlerExtensions\DrawToolTipEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.DrawTreeNodeEventHandlerExtensions,DrawTreeNodeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DrawTreeNodeEventHandlerExtensions\DrawTreeNodeEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ElapsedEventHandlerExtensions,ElapsedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ElapsedEventHandlerExtensions\ElapsedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.EncoderExtensions,Encoderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\EncoderExtensions\Encoderable.g.cs,GetBytes,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.EncoderExtensions,Encoderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\EncoderExtensions\Encoderable.g.cs,Convert,The method has 9 parameters.
Long Parameter List,PRI.ProductivityExtensions.EncodingExtensions,Encodingable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\EncodingExtensions\Encodingable.g.cs,GetBytes,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.EncodingExtensions,Encodingable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\EncodingExtensions\Encodingable.g.cs,GetChars,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.EntryWrittenEventHandlerExtensions,EntryWrittenEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\EntryWrittenEventHandlerExtensions\EntryWrittenEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.EnumConverterExtensions,EnumConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\EnumConverterExtensions\EnumConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ErrorEventHandlerExtensions,ErrorEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ErrorEventHandlerExtensions\ErrorEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.EventHandlerExtensions,EventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\EventHandlerExtensions\EventHandlerable.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ExpandableObjectConverterExtensions,ExpandableObjectConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ExpandableObjectConverterExtensions\ExpandableObjectConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ExtendedProtectionPolicyTypeConverterExtensions,ExtendedProtectionPolicyTypeConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ExtendedProtectionPolicyTypeConverterExtensions\ExtendedProtectionPolicyTypeConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.FileStreamExtensions,FileStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\FileStreamExtensions\FileStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.FileStreamExtensions,FileStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\FileStreamExtensions\FileStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.FileSystemEventHandlerExtensions,FileSystemEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\FileSystemEventHandlerExtensions\FileSystemEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.FillErrorEventHandlerExtensions,FillErrorEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\FillErrorEventHandlerExtensions\FillErrorEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.FontConverterExtensions,FontConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\FontConverterExtensions\FontConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.FormClosedEventHandlerExtensions,FormClosedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\FormClosedEventHandlerExtensions\FormClosedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.FormClosingEventHandlerExtensions,FormClosingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\FormClosingEventHandlerExtensions\FormClosingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.FromBase64TransformExtensions,FromBase64Transformable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\FromBase64TransformExtensions\FromBase64Transformable.g.cs,TransformBlock,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.FuncExtensions,Funcable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\FuncExtensions\Funcable.g.cs,BeginInvoke,The method has 18 parameters.
Long Parameter List,PRI.ProductivityExtensions.GiveFeedbackEventHandlerExtensions,GiveFeedbackEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\GiveFeedbackEventHandlerExtensions\GiveFeedbackEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.GuidConverterExtensions,GuidConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\GuidConverterExtensions\GuidConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.GZipStreamExtensions,GZipStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\GZipStreamExtensions\GZipStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.GZipStreamExtensions,GZipStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\GZipStreamExtensions\GZipStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.HandledEventHandlerExtensions,HandledEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\HandledEventHandlerExtensions\HandledEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.HashAlgorithmExtensions,HashAlgorithmable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\HashAlgorithmExtensions\HashAlgorithmable.g.cs,TransformBlock,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.HelpEventHandlerExtensions,HelpEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\HelpEventHandlerExtensions\HelpEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.HtmlElementErrorEventHandlerExtensions,HtmlElementErrorEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\HtmlElementErrorEventHandlerExtensions\HtmlElementErrorEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.HtmlElementEventHandlerExtensions,HtmlElementEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\HtmlElementEventHandlerExtensions\HtmlElementEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.HttpContinueDelegateExtensions,HttpContinueDelegateable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\HttpContinueDelegateExtensions\HttpContinueDelegateable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.IconConverterExtensions,IconConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\IconConverterExtensions\IconConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ICryptoTransformExtensions,ICryptoTransformable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ICryptoTransformExtensions\ICryptoTransformable.g.cs,TransformBlock,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.IDataRecordExtensions,IDataRecordable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\IDataRecordExtensions\IDataRecordable.g.cs,GetBytes,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.IDataRecordExtensions,IDataRecordable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\IDataRecordExtensions\IDataRecordable.g.cs,GetChars,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.IDesignerSerializationManagerExtensions,IDesignerSerializationManagerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\IDesignerSerializationManagerExtensions\IDesignerSerializationManagerable.g.cs,CreateInstance,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ImageConverterExtensions,ImageConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ImageConverterExtensions\ImageConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ImageFormatConverterExtensions,ImageFormatConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ImageFormatConverterExtensions\ImageFormatConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ImageIndexConverterExtensions,ImageIndexConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ImageIndexConverterExtensions\ImageIndexConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ImageKeyConverterExtensions,ImageKeyConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ImageKeyConverterExtensions\ImageKeyConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.InputLanguageChangedEventHandlerExtensions,InputLanguageChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\InputLanguageChangedEventHandlerExtensions\InputLanguageChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.InputLanguageChangingEventHandlerExtensions,InputLanguageChangingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\InputLanguageChangingEventHandlerExtensions\InputLanguageChangingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.Int16ConverterExtensions,Int16Converterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Int16ConverterExtensions\Int16Converterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.Int32ConverterExtensions,Int32Converterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Int32ConverterExtensions\Int32Converterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.Int64ConverterExtensions,Int64Converterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Int64ConverterExtensions\Int64Converterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.InvalidateEventHandlerExtensions,InvalidateEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\InvalidateEventHandlerExtensions\InvalidateEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.IOCompletionCallbackExtensions,IOCompletionCallbackable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\IOCompletionCallbackExtensions\IOCompletionCallbackable.g.cs,BeginInvoke,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.IsolatedStorageFileStreamExtensions,IsolatedStorageFileStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\IsolatedStorageFileStreamExtensions\IsolatedStorageFileStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.IsolatedStorageFileStreamExtensions,IsolatedStorageFileStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\IsolatedStorageFileStreamExtensions\IsolatedStorageFileStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.ItemChangedEventHandlerExtensions,ItemChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ItemChangedEventHandlerExtensions\ItemChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ItemCheckedEventHandlerExtensions,ItemCheckedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ItemCheckedEventHandlerExtensions\ItemCheckedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ItemCheckEventHandlerExtensions,ItemCheckEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ItemCheckEventHandlerExtensions\ItemCheckEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ItemDragEventHandlerExtensions,ItemDragEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ItemDragEventHandlerExtensions\ItemDragEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.KeyEventHandlerExtensions,KeyEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\KeyEventHandlerExtensions\KeyEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.KeyPressEventHandlerExtensions,KeyPressEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\KeyPressEventHandlerExtensions\KeyPressEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.KeysConverterExtensions,KeysConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\KeysConverterExtensions\KeysConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.LabelEditEventHandlerExtensions,LabelEditEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\LabelEditEventHandlerExtensions\LabelEditEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.LayoutEventHandlerExtensions,LayoutEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\LayoutEventHandlerExtensions\LayoutEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.LinkClickedEventHandlerExtensions,LinkClickedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\LinkClickedEventHandlerExtensions\LinkClickedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.LinkConverterExtensions,LinkConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\LinkConverterExtensions\LinkConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.LinkLabelLinkClickedEventHandlerExtensions,LinkLabelLinkClickedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\LinkLabelLinkClickedEventHandlerExtensions\LinkLabelLinkClickedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ListBindingConverterExtensions,ListBindingConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ListBindingConverterExtensions\ListBindingConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ListChangedEventHandlerExtensions,ListChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ListChangedEventHandlerExtensions\ListChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ListControlConvertEventHandlerExtensions,ListControlConvertEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ListControlConvertEventHandlerExtensions\ListControlConvertEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ListViewItemConverterExtensions,ListViewItemConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ListViewItemConverterExtensions\ListViewItemConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ListViewItemMouseHoverEventHandlerExtensions,ListViewItemMouseHoverEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ListViewItemMouseHoverEventHandlerExtensions\ListViewItemMouseHoverEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ListViewItemSelectionChangedEventHandlerExtensions,ListViewItemSelectionChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ListViewItemSelectionChangedEventHandlerExtensions\ListViewItemSelectionChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ListViewVirtualItemsSelectionRangeChangedEventHandlerExtensions,ListViewVirtualItemsSelectionRangeChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ListViewVirtualItemsSelectionRangeChangedEventHandlerExtensions\ListViewVirtualItemsSelectionRangeChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.LocalCertificateSelectionCallbackExtensions,LocalCertificateSelectionCallbackable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\LocalCertificateSelectionCallbackExtensions\LocalCertificateSelectionCallbackable.g.cs,BeginInvoke,The method has 7 parameters.
Long Parameter List,PRI.ProductivityExtensions.MarginsConverterExtensions,MarginsConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\MarginsConverterExtensions\MarginsConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.MaskInputRejectedEventHandlerExtensions,MaskInputRejectedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\MaskInputRejectedEventHandlerExtensions\MaskInputRejectedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.MeasureItemEventHandlerExtensions,MeasureItemEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\MeasureItemEventHandlerExtensions\MeasureItemEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.MemberFilterExtensions,MemberFilterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\MemberFilterExtensions\MemberFilterable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.MemoryMappedViewStreamExtensions,MemoryMappedViewStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\MemoryMappedViewStreamExtensions\MemoryMappedViewStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.MemoryMappedViewStreamExtensions,MemoryMappedViewStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\MemoryMappedViewStreamExtensions\MemoryMappedViewStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.MemoryStreamExtensions,MemoryStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\MemoryStreamExtensions\MemoryStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.MemoryStreamExtensions,MemoryStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\MemoryStreamExtensions\MemoryStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.MergeFailedEventHandlerExtensions,MergeFailedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\MergeFailedEventHandlerExtensions\MergeFailedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.MessageSurrogateFilterExtensions,MessageSurrogateFilterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\MessageSurrogateFilterExtensions\MessageSurrogateFilterable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ModuleResolveEventHandlerExtensions,ModuleResolveEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ModuleResolveEventHandlerExtensions\ModuleResolveEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.MouseEventHandlerExtensions,MouseEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\MouseEventHandlerExtensions\MouseEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.MultilineStringConverterExtensions,MultilineStringConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\MultilineStringConverterExtensions\MultilineStringConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.NamedPipeClientStreamExtensions,NamedPipeClientStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NamedPipeClientStreamExtensions\NamedPipeClientStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.NamedPipeClientStreamExtensions,NamedPipeClientStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NamedPipeClientStreamExtensions\NamedPipeClientStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.NamedPipeServerStreamExtensions,NamedPipeServerStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NamedPipeServerStreamExtensions\NamedPipeServerStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.NamedPipeServerStreamExtensions,NamedPipeServerStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NamedPipeServerStreamExtensions\NamedPipeServerStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.NavigateEventHandlerExtensions,NavigateEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NavigateEventHandlerExtensions\NavigateEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsClient,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsClient,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsClient,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsClient,The method has 7 parameters.
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsServer,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsServer,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.NetworkAddressChangedEventHandlerExtensions,NetworkAddressChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NetworkAddressChangedEventHandlerExtensions\NetworkAddressChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.NetworkAvailabilityChangedEventHandlerExtensions,NetworkAvailabilityChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NetworkAvailabilityChangedEventHandlerExtensions\NetworkAvailabilityChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.NetworkStreamExtensions,NetworkStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NetworkStreamExtensions\NetworkStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.NetworkStreamExtensions,NetworkStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NetworkStreamExtensions\NetworkStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.NodeLabelEditEventHandlerExtensions,NodeLabelEditEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NodeLabelEditEventHandlerExtensions\NodeLabelEditEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.NotifyCollectionChangedEventHandlerExtensions,NotifyCollectionChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NotifyCollectionChangedEventHandlerExtensions\NotifyCollectionChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.NullableConverterExtensions,NullableConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NullableConverterExtensions\NullableConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.OdbcInfoMessageEventHandlerExtensions,OdbcInfoMessageEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\OdbcInfoMessageEventHandlerExtensions\OdbcInfoMessageEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.OdbcRowUpdatedEventHandlerExtensions,OdbcRowUpdatedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\OdbcRowUpdatedEventHandlerExtensions\OdbcRowUpdatedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.OdbcRowUpdatingEventHandlerExtensions,OdbcRowUpdatingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\OdbcRowUpdatingEventHandlerExtensions\OdbcRowUpdatingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.OleDbInfoMessageEventHandlerExtensions,OleDbInfoMessageEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\OleDbInfoMessageEventHandlerExtensions\OleDbInfoMessageEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.OleDbRowUpdatedEventHandlerExtensions,OleDbRowUpdatedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\OleDbRowUpdatedEventHandlerExtensions\OleDbRowUpdatedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.OleDbRowUpdatingEventHandlerExtensions,OleDbRowUpdatingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\OleDbRowUpdatingEventHandlerExtensions\OleDbRowUpdatingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.OnChangeEventHandlerExtensions,OnChangeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\OnChangeEventHandlerExtensions\OnChangeEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.OpacityConverterExtensions,OpacityConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\OpacityConverterExtensions\OpacityConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.OpenReadCompletedEventHandlerExtensions,OpenReadCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\OpenReadCompletedEventHandlerExtensions\OpenReadCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.OpenWriteCompletedEventHandlerExtensions,OpenWriteCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\OpenWriteCompletedEventHandlerExtensions\OpenWriteCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PaddingConverterExtensions,PaddingConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PaddingConverterExtensions\PaddingConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PaintEventHandlerExtensions,PaintEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PaintEventHandlerExtensions\PaintEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PingCompletedEventHandlerExtensions,PingCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PingCompletedEventHandlerExtensions\PingCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PipeStreamExtensions,PipeStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PipeStreamExtensions\PipeStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.PipeStreamExtensions,PipeStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PipeStreamExtensions\PipeStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.PlayRecordCallbackExtensions,PlayRecordCallbackable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PlayRecordCallbackExtensions\PlayRecordCallbackable.g.cs,BeginInvoke,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.PointConverterExtensions,PointConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PointConverterExtensions\PointConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PopupEventHandlerExtensions,PopupEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PopupEventHandlerExtensions\PopupEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PowerModeChangedEventHandlerExtensions,PowerModeChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PowerModeChangedEventHandlerExtensions\PowerModeChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PreviewKeyDownEventHandlerExtensions,PreviewKeyDownEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PreviewKeyDownEventHandlerExtensions\PreviewKeyDownEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PrintEventHandlerExtensions,PrintEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PrintEventHandlerExtensions\PrintEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PrintPageEventHandlerExtensions,PrintPageEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PrintPageEventHandlerExtensions\PrintPageEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ProgressChangedEventHandlerExtensions,ProgressChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ProgressChangedEventHandlerExtensions\ProgressChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PropertyChangedEventHandlerExtensions,PropertyChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PropertyChangedEventHandlerExtensions\PropertyChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PropertyChangingEventHandlerExtensions,PropertyChangingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PropertyChangingEventHandlerExtensions\PropertyChangingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PropertyTabChangedEventHandlerExtensions,PropertyTabChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PropertyTabChangedEventHandlerExtensions\PropertyTabChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PropertyValueChangedEventHandlerExtensions,PropertyValueChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PropertyValueChangedEventHandlerExtensions\PropertyValueChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.PropertyValueUIHandlerExtensions,PropertyValueUIHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PropertyValueUIHandlerExtensions\PropertyValueUIHandlerable.g.cs,BeginInvoke,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.PropertyValueUIItemInvokeHandlerExtensions,PropertyValueUIItemInvokeHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PropertyValueUIItemInvokeHandlerExtensions\PropertyValueUIItemInvokeHandlerable.g.cs,BeginInvoke,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.QueryAccessibilityHelpEventHandlerExtensions,QueryAccessibilityHelpEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\QueryAccessibilityHelpEventHandlerExtensions\QueryAccessibilityHelpEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.QueryContinueDragEventHandlerExtensions,QueryContinueDragEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\QueryContinueDragEventHandlerExtensions\QueryContinueDragEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.QueryPageSettingsEventHandlerExtensions,QueryPageSettingsEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\QueryPageSettingsEventHandlerExtensions\QueryPageSettingsEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.QuestionEventHandlerExtensions,QuestionEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\QuestionEventHandlerExtensions\QuestionEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.RectangleConverterExtensions,RectangleConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\RectangleConverterExtensions\RectangleConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ReferenceConverterExtensions,ReferenceConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ReferenceConverterExtensions\ReferenceConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.cs,ByImplementedInterfaceInDirectory,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ReflectionExtensions,TypeBuilderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\TypeBuilderable.cs,DefineProperty,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.RemoteCertificateValidationCallbackExtensions,RemoteCertificateValidationCallbackable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\RemoteCertificateValidationCallbackExtensions\RemoteCertificateValidationCallbackable.g.cs,BeginInvoke,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.RenamedEventHandlerExtensions,RenamedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\RenamedEventHandlerExtensions\RenamedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ResolveEventHandlerExtensions,ResolveEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ResolveEventHandlerExtensions\ResolveEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ResolveNameEventHandlerExtensions,ResolveNameEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ResolveNameEventHandlerExtensions\ResolveNameEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.RetrieveVirtualItemEventHandlerExtensions,RetrieveVirtualItemEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\RetrieveVirtualItemEventHandlerExtensions\RetrieveVirtualItemEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.RijndaelManagedTransformExtensions,RijndaelManagedTransformable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\RijndaelManagedTransformExtensions\RijndaelManagedTransformable.g.cs,TransformBlock,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.RunWorkerCompletedEventHandlerExtensions,RunWorkerCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\RunWorkerCompletedEventHandlerExtensions\RunWorkerCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SByteConverterExtensions,SByteConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SByteConverterExtensions\SByteConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ScrollEventHandlerExtensions,ScrollEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ScrollEventHandlerExtensions\ScrollEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SearchForVirtualItemEventHandlerExtensions,SearchForVirtualItemEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SearchForVirtualItemEventHandlerExtensions\SearchForVirtualItemEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SelectedGridItemChangedEventHandlerExtensions,SelectedGridItemChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SelectedGridItemChangedEventHandlerExtensions\SelectedGridItemChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SelectionRangeConverterExtensions,SelectionRangeConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SelectionRangeConverterExtensions\SelectionRangeConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SendCompletedEventHandlerExtensions,SendCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SendCompletedEventHandlerExtensions\SendCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SerialDataReceivedEventHandlerExtensions,SerialDataReceivedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SerialDataReceivedEventHandlerExtensions\SerialDataReceivedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SerialErrorReceivedEventHandlerExtensions,SerialErrorReceivedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SerialErrorReceivedEventHandlerExtensions\SerialErrorReceivedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SerialPinChangedEventHandlerExtensions,SerialPinChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SerialPinChangedEventHandlerExtensions\SerialPinChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ServiceCreatorCallbackExtensions,ServiceCreatorCallbackable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ServiceCreatorCallbackExtensions\ServiceCreatorCallbackable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SessionEndedEventHandlerExtensions,SessionEndedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SessionEndedEventHandlerExtensions\SessionEndedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SessionEndingEventHandlerExtensions,SessionEndingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SessionEndingEventHandlerExtensions\SessionEndingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SessionSwitchEventHandlerExtensions,SessionSwitchEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SessionSwitchEventHandlerExtensions\SessionSwitchEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SettingChangingEventHandlerExtensions,SettingChangingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SettingChangingEventHandlerExtensions\SettingChangingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SettingsLoadedEventHandlerExtensions,SettingsLoadedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SettingsLoadedEventHandlerExtensions\SettingsLoadedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SettingsSavingEventHandlerExtensions,SettingsSavingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SettingsSavingEventHandlerExtensions\SettingsSavingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SingleConverterExtensions,SingleConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SingleConverterExtensions\SingleConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SizeConverterExtensions,SizeConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SizeConverterExtensions\SizeConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SizeFConverterExtensions,SizeFConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SizeFConverterExtensions\SizeFConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,Send,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,Receive,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,ReceiveMessageFrom,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginConnect,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginConnect,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginConnect,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginSend,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginSend,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginSend,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginSend,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginSend,The method has 7 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginSend,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginSendFile,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginSend,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginSend,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginSendTo,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginSendTo,The method has 7 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginSendTo,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceive,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceive,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceive,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceive,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceive,The method has 7 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceive,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceive,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceive,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceiveMessageFrom,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceiveMessageFrom,The method has 7 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceiveMessageFrom,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceiveFrom,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceiveFrom,The method has 7 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginReceiveFrom,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.SocketExtensions,Socketable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SocketExtensions\Socketable.g.cs,BeginAccept,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SplitterCancelEventHandlerExtensions,SplitterCancelEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SplitterCancelEventHandlerExtensions\SplitterCancelEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SplitterEventHandlerExtensions,SplitterEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SplitterEventHandlerExtensions\SplitterEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SqlDataRecordExtensions,SqlDataRecordable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SqlDataRecordExtensions\SqlDataRecordable.g.cs,GetBytes,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SqlDataRecordExtensions,SqlDataRecordable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SqlDataRecordExtensions\SqlDataRecordable.g.cs,GetChars,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SqlDataRecordExtensions,SqlDataRecordable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SqlDataRecordExtensions\SqlDataRecordable.g.cs,SetBytes,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SqlDataRecordExtensions,SqlDataRecordable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SqlDataRecordExtensions\SqlDataRecordable.g.cs,SetChars,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SqlFileStreamExtensions,SqlFileStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SqlFileStreamExtensions\SqlFileStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.SqlFileStreamExtensions,SqlFileStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SqlFileStreamExtensions\SqlFileStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.SqlInfoMessageEventHandlerExtensions,SqlInfoMessageEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SqlInfoMessageEventHandlerExtensions\SqlInfoMessageEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SqlRowsCopiedEventHandlerExtensions,SqlRowsCopiedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SqlRowsCopiedEventHandlerExtensions\SqlRowsCopiedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SqlRowUpdatedEventHandlerExtensions,SqlRowUpdatedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SqlRowUpdatedEventHandlerExtensions\SqlRowUpdatedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SqlRowUpdatingEventHandlerExtensions,SqlRowUpdatingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SqlRowUpdatingEventHandlerExtensions\SqlRowUpdatingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.SslStreamExtensions,SslStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SslStreamExtensions\SslStreamable.g.cs,BeginAuthenticateAsClient,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.SslStreamExtensions,SslStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SslStreamExtensions\SslStreamable.g.cs,BeginAuthenticateAsServer,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.SslStreamExtensions,SslStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SslStreamExtensions\SslStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.SslStreamExtensions,SslStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SslStreamExtensions\SslStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.StateChangeEventHandlerExtensions,StateChangeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\StateChangeEventHandlerExtensions\StateChangeEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.StatementCompletedEventHandlerExtensions,StatementCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\StatementCompletedEventHandlerExtensions\StatementCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.StatusBarDrawItemEventHandlerExtensions,StatusBarDrawItemEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\StatusBarDrawItemEventHandlerExtensions\StatusBarDrawItemEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.StatusBarPanelClickEventHandlerExtensions,StatusBarPanelClickEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\StatusBarPanelClickEventHandlerExtensions\StatusBarPanelClickEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.StreamExtensions,Streamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\StreamExtensions\Streamable.cs,BeginReadToEnd,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.StreamExtensions,Streamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\StreamExtensions\Streamable.cs,BeginReadToEnd,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.StreamExtensions,Streamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\StreamExtensions\Streamable.cs,BeginRead,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.StreamExtensions,Streamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\StreamExtensions\Streamable.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.StreamExtensions,Streamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\StreamExtensions\Streamable.cs,BeginWrite,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.StreamExtensions,Streamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\StreamExtensions\Streamable.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.StringConverterExtensions,StringConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\StringConverterExtensions\StringConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TabControlCancelEventHandlerExtensions,TabControlCancelEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TabControlCancelEventHandlerExtensions\TabControlCancelEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TabControlEventHandlerExtensions,TabControlEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TabControlEventHandlerExtensions\TabControlEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TableLayoutCellPaintEventHandlerExtensions,TableLayoutCellPaintEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TableLayoutCellPaintEventHandlerExtensions\TableLayoutCellPaintEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TableLayoutSettingsTypeConverterExtensions,TableLayoutSettingsTypeConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TableLayoutSettingsTypeConverterExtensions\TableLayoutSettingsTypeConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TcpClientExtensions,TcpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TcpClientExtensions\TcpClientable.g.cs,BeginConnect,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TcpClientExtensions,TcpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TcpClientExtensions\TcpClientable.g.cs,BeginConnect,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TcpClientExtensions,TcpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TcpClientExtensions\TcpClientable.g.cs,BeginConnect,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TcpClientExtensions,TcpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TcpClientExtensions\TcpClientable.g.cs,BeginConnect,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ThreadExceptionEventHandlerExtensions,ThreadExceptionEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ThreadExceptionEventHandlerExtensions\ThreadExceptionEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TimerElapsedEventHandlerExtensions,TimerElapsedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TimerElapsedEventHandlerExtensions\TimerElapsedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TimeSpanConverterExtensions,TimeSpanConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TimeSpanConverterExtensions\TimeSpanConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToBase64TransformExtensions,ToBase64Transformable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToBase64TransformExtensions\ToBase64Transformable.g.cs,TransformBlock,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolBarButtonClickEventHandlerExtensions,ToolBarButtonClickEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolBarButtonClickEventHandlerExtensions\ToolBarButtonClickEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolboxComponentsCreatedEventHandlerExtensions,ToolboxComponentsCreatedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolboxComponentsCreatedEventHandlerExtensions\ToolboxComponentsCreatedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolboxComponentsCreatingEventHandlerExtensions,ToolboxComponentsCreatingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolboxComponentsCreatingEventHandlerExtensions\ToolboxComponentsCreatingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolboxItemCreatorCallbackExtensions,ToolboxItemCreatorCallbackable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolboxItemCreatorCallbackExtensions\ToolboxItemCreatorCallbackable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolStripArrowRenderEventHandlerExtensions,ToolStripArrowRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripArrowRenderEventHandlerExtensions\ToolStripArrowRenderEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolStripContentPanelRenderEventHandlerExtensions,ToolStripContentPanelRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripContentPanelRenderEventHandlerExtensions\ToolStripContentPanelRenderEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolStripDropDownClosedEventHandlerExtensions,ToolStripDropDownClosedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripDropDownClosedEventHandlerExtensions\ToolStripDropDownClosedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolStripDropDownClosingEventHandlerExtensions,ToolStripDropDownClosingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripDropDownClosingEventHandlerExtensions\ToolStripDropDownClosingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolStripGripRenderEventHandlerExtensions,ToolStripGripRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripGripRenderEventHandlerExtensions\ToolStripGripRenderEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolStripItemClickedEventHandlerExtensions,ToolStripItemClickedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemClickedEventHandlerExtensions\ToolStripItemClickedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolStripItemEventHandlerExtensions,ToolStripItemEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemEventHandlerExtensions\ToolStripItemEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolStripItemImageRenderEventHandlerExtensions,ToolStripItemImageRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemImageRenderEventHandlerExtensions\ToolStripItemImageRenderEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolStripItemRenderEventHandlerExtensions,ToolStripItemRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemRenderEventHandlerExtensions\ToolStripItemRenderEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolStripItemTextRenderEventHandlerExtensions,ToolStripItemTextRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemTextRenderEventHandlerExtensions\ToolStripItemTextRenderEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolStripPanelRenderEventHandlerExtensions,ToolStripPanelRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripPanelRenderEventHandlerExtensions\ToolStripPanelRenderEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolStripRenderEventHandlerExtensions,ToolStripRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripRenderEventHandlerExtensions\ToolStripRenderEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ToolStripSeparatorRenderEventHandlerExtensions,ToolStripSeparatorRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripSeparatorRenderEventHandlerExtensions\ToolStripSeparatorRenderEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TreeNodeConverterExtensions,TreeNodeConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TreeNodeConverterExtensions\TreeNodeConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TreeNodeMouseClickEventHandlerExtensions,TreeNodeMouseClickEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TreeNodeMouseClickEventHandlerExtensions\TreeNodeMouseClickEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TreeNodeMouseHoverEventHandlerExtensions,TreeNodeMouseHoverEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TreeNodeMouseHoverEventHandlerExtensions\TreeNodeMouseHoverEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TreeViewCancelEventHandlerExtensions,TreeViewCancelEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TreeViewCancelEventHandlerExtensions\TreeViewCancelEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TreeViewEventHandlerExtensions,TreeViewEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TreeViewEventHandlerExtensions\TreeViewEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TreeViewImageIndexConverterExtensions,TreeViewImageIndexConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TreeViewImageIndexConverterExtensions\TreeViewImageIndexConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TreeViewImageKeyConverterExtensions,TreeViewImageKeyConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TreeViewImageKeyConverterExtensions\TreeViewImageKeyConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TypeConverterExtensions,TypeConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TypeConverterExtensions\TypeConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TypeDescriptionProviderExtensions,TypeDescriptionProviderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TypeDescriptionProviderExtensions\TypeDescriptionProviderable.g.cs,CreateInstance,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TypeFilterExtensions,TypeFilterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TypeFilterExtensions\TypeFilterable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TypeListConverterExtensions,TypeListConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TypeListConverterExtensions\TypeListConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.TypeValidationEventHandlerExtensions,TypeValidationEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TypeValidationEventHandlerExtensions\TypeValidationEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,Send,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 7 parameters.
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 6 parameters.
Long Parameter List,PRI.ProductivityExtensions.UdpClientExtensions,UdpClientable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UdpClientExtensions\UdpClientable.cs,BeginSend,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UICuesEventHandlerExtensions,UICuesEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UICuesEventHandlerExtensions\UICuesEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UInt16ConverterExtensions,UInt16Converterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UInt16ConverterExtensions\UInt16Converterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UInt32ConverterExtensions,UInt32Converterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UInt32ConverterExtensions\UInt32Converterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UInt64ConverterExtensions,UInt64Converterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UInt64ConverterExtensions\UInt64Converterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UnhandledExceptionEventHandlerExtensions,UnhandledExceptionEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UnhandledExceptionEventHandlerExtensions\UnhandledExceptionEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UnmanagedMemoryStreamExtensions,UnmanagedMemoryStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UnmanagedMemoryStreamExtensions\UnmanagedMemoryStreamable.g.cs,BeginRead,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.UnmanagedMemoryStreamExtensions,UnmanagedMemoryStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UnmanagedMemoryStreamExtensions\UnmanagedMemoryStreamable.g.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,PRI.ProductivityExtensions.UnreferencedObjectEventHandlerExtensions,UnreferencedObjectEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UnreferencedObjectEventHandlerExtensions\UnreferencedObjectEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UpDownEventHandlerExtensions,UpDownEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UpDownEventHandlerExtensions\UpDownEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UploadDataCompletedEventHandlerExtensions,UploadDataCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UploadDataCompletedEventHandlerExtensions\UploadDataCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UploadFileCompletedEventHandlerExtensions,UploadFileCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UploadFileCompletedEventHandlerExtensions\UploadFileCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UploadProgressChangedEventHandlerExtensions,UploadProgressChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UploadProgressChangedEventHandlerExtensions\UploadProgressChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UploadStringCompletedEventHandlerExtensions,UploadStringCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UploadStringCompletedEventHandlerExtensions\UploadStringCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UploadValuesCompletedEventHandlerExtensions,UploadValuesCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UploadValuesCompletedEventHandlerExtensions\UploadValuesCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UriTypeConverterExtensions,UriTypeConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UriTypeConverterExtensions\UriTypeConverterable.g.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UserPreferenceChangedEventHandlerExtensions,UserPreferenceChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UserPreferenceChangedEventHandlerExtensions\UserPreferenceChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.UserPreferenceChangingEventHandlerExtensions,UserPreferenceChangingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UserPreferenceChangingEventHandlerExtensions\UserPreferenceChangingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.ValidationEventHandlerExtensions,ValidationEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ValidationEventHandlerExtensions\ValidationEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.WaitOrTimerCallbackExtensions,WaitOrTimerCallbackable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\WaitOrTimerCallbackExtensions\WaitOrTimerCallbackable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.WebBrowserDocumentCompletedEventHandlerExtensions,WebBrowserDocumentCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserDocumentCompletedEventHandlerExtensions\WebBrowserDocumentCompletedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.WebBrowserNavigatedEventHandlerExtensions,WebBrowserNavigatedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserNavigatedEventHandlerExtensions\WebBrowserNavigatedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.WebBrowserNavigatingEventHandlerExtensions,WebBrowserNavigatingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserNavigatingEventHandlerExtensions\WebBrowserNavigatingEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.WebBrowserProgressChangedEventHandlerExtensions,WebBrowserProgressChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserProgressChangedEventHandlerExtensions\WebBrowserProgressChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.XmlAttributeEventHandlerExtensions,XmlAttributeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\XmlAttributeEventHandlerExtensions\XmlAttributeEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.XmlElementEventHandlerExtensions,XmlElementEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\XmlElementEventHandlerExtensions\XmlElementEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.XmlNodeChangedEventHandlerExtensions,XmlNodeChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\XmlNodeChangedEventHandlerExtensions\XmlNodeChangedEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.XmlNodeEventHandlerExtensions,XmlNodeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\XmlNodeEventHandlerExtensions\XmlNodeEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.XmlNodeReaderExtensions,XmlNodeReaderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\XmlNodeReaderExtensions\XmlNodeReaderable.g.cs,ReadElementContentAs,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.XmlReaderExtensions,XmlReaderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\XmlReaderExtensions\XmlReaderable.g.cs,ReadElementContentAs,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.XmlSerializationCollectionFixupCallbackExtensions,XmlSerializationCollectionFixupCallbackable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\XmlSerializationCollectionFixupCallbackExtensions\XmlSerializationCollectionFixupCallbackable.g.cs,BeginInvoke,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.XmlTextReaderExtensions,XmlTextReaderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\XmlTextReaderExtensions\XmlTextReaderable.g.cs,ReadElementContentAs,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.XmlValidatingReaderExtensions,XmlValidatingReaderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\XmlValidatingReaderExtensions\XmlValidatingReaderable.g.cs,ReadElementContentAs,The method has 4 parameters.
Long Parameter List,PRI.ProductivityExtensions.XsltMessageEncounteredEventHandlerExtensions,XsltMessageEncounteredEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\XsltMessageEncounteredEventHandlerExtensions\XsltMessageEncounteredEventHandlerable.g.cs,BeginInvoke,The method has 4 parameters.
Long Identifier,PRI.ProductivityExtensions.BindingManagerDataErrorEventHandlerExtensions,BindingManagerDataErrorEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\BindingManagerDataErrorEventHandlerExtensions\BindingManagerDataErrorEventHandlerable.g.cs,BeginInvoke,The length of the parameter bindingmanagerdataerroreventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.ColumnWidthChangedEventHandlerExtensions,ColumnWidthChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ColumnWidthChangedEventHandlerExtensions\ColumnWidthChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter columnwidthchangedeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.ColumnWidthChangingEventHandlerExtensions,ColumnWidthChangingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ColumnWidthChangingEventHandlerExtensions\ColumnWidthChangingEventHandlerable.g.cs,BeginInvoke,The length of the parameter columnwidthchangingeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.DataGridPreferredColumnWidthTypeConverterExtensions,DataGridPreferredColumnWidthTypeConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridPreferredColumnWidthTypeConverterExtensions\DataGridPreferredColumnWidthTypeConverterable.g.cs,ConvertTo,The length of the parameter datagridpreferredcolumnwidthtypeconverter is 41.
Long Identifier,PRI.ProductivityExtensions.DataGridViewAutoSizeColumnModeEventHandlerExtensions,DataGridViewAutoSizeColumnModeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewAutoSizeColumnModeEventHandlerExtensions\DataGridViewAutoSizeColumnModeEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewautosizecolumnmodeeventhandler is 42.
Long Identifier,PRI.ProductivityExtensions.DataGridViewAutoSizeColumnsModeEventHandlerExtensions,DataGridViewAutoSizeColumnsModeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewAutoSizeColumnsModeEventHandlerExtensions\DataGridViewAutoSizeColumnsModeEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewautosizecolumnsmodeeventhandler is 43.
Long Identifier,PRI.ProductivityExtensions.DataGridViewAutoSizeModeEventHandlerExtensions,DataGridViewAutoSizeModeEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewAutoSizeModeEventHandlerExtensions\DataGridViewAutoSizeModeEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewautosizemodeeventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.DataGridViewBindingCompleteEventHandlerExtensions,DataGridViewBindingCompleteEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewBindingCompleteEventHandlerExtensions\DataGridViewBindingCompleteEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewbindingcompleteeventhandler is 39.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellCancelEventHandlerExtensions,DataGridViewCellCancelEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellCancelEventHandlerExtensions\DataGridViewCellCancelEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellcanceleventhandler is 34.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellContextMenuStripNeededEventHandlerExtensions,DataGridViewCellContextMenuStripNeededEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellContextMenuStripNeededEventHandlerExtensions\DataGridViewCellContextMenuStripNeededEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellcontextmenustripneededeventhandler is 50.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellErrorTextNeededEventHandlerExtensions,DataGridViewCellErrorTextNeededEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellErrorTextNeededEventHandlerExtensions\DataGridViewCellErrorTextNeededEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellerrortextneededeventhandler is 43.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellFormattingEventHandlerExtensions,DataGridViewCellFormattingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellFormattingEventHandlerExtensions\DataGridViewCellFormattingEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellformattingeventhandler is 38.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellMouseEventHandlerExtensions,DataGridViewCellMouseEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellMouseEventHandlerExtensions\DataGridViewCellMouseEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellmouseeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellPaintingEventHandlerExtensions,DataGridViewCellPaintingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellPaintingEventHandlerExtensions\DataGridViewCellPaintingEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellpaintingeventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellParsingEventHandlerExtensions,DataGridViewCellParsingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellParsingEventHandlerExtensions\DataGridViewCellParsingEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellparsingeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellStateChangedEventHandlerExtensions,DataGridViewCellStateChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellStateChangedEventHandlerExtensions\DataGridViewCellStateChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellstatechangedeventhandler is 40.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellStyleContentChangedEventHandlerExtensions,DataGridViewCellStyleContentChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellStyleContentChangedEventHandlerExtensions\DataGridViewCellStyleContentChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellstylecontentchangedeventhandler is 47.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellStyleConverterExtensions,DataGridViewCellStyleConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellStyleConverterExtensions\DataGridViewCellStyleConverterable.g.cs,ConvertTo,The length of the parameter datagridviewcellstyleconverter is 30.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellToolTipTextNeededEventHandlerExtensions,DataGridViewCellToolTipTextNeededEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellToolTipTextNeededEventHandlerExtensions\DataGridViewCellToolTipTextNeededEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcelltooltiptextneededeventhandler is 45.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellValidatingEventHandlerExtensions,DataGridViewCellValidatingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellValidatingEventHandlerExtensions\DataGridViewCellValidatingEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellvalidatingeventhandler is 38.
Long Identifier,PRI.ProductivityExtensions.DataGridViewCellValueEventHandlerExtensions,DataGridViewCellValueEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewCellValueEventHandlerExtensions\DataGridViewCellValueEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcellvalueeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.DataGridViewColumnDividerDoubleClickEventHandlerExtensions,DataGridViewColumnDividerDoubleClickEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewColumnDividerDoubleClickEventHandlerExtensions\DataGridViewColumnDividerDoubleClickEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcolumndividerdoubleclickeventhandler is 48.
Long Identifier,PRI.ProductivityExtensions.DataGridViewColumnEventHandlerExtensions,DataGridViewColumnEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewColumnEventHandlerExtensions\DataGridViewColumnEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcolumneventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.DataGridViewColumnStateChangedEventHandlerExtensions,DataGridViewColumnStateChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewColumnStateChangedEventHandlerExtensions\DataGridViewColumnStateChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewcolumnstatechangedeventhandler is 42.
Long Identifier,PRI.ProductivityExtensions.DataGridViewDataErrorEventHandlerExtensions,DataGridViewDataErrorEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewDataErrorEventHandlerExtensions\DataGridViewDataErrorEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewdataerroreventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.DataGridViewEditingControlShowingEventHandlerExtensions,DataGridViewEditingControlShowingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewEditingControlShowingEventHandlerExtensions\DataGridViewEditingControlShowingEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridvieweditingcontrolshowingeventhandler is 45.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowCancelEventHandlerExtensions,DataGridViewRowCancelEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowCancelEventHandlerExtensions\DataGridViewRowCancelEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowcanceleventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowContextMenuStripNeededEventHandlerExtensions,DataGridViewRowContextMenuStripNeededEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowContextMenuStripNeededEventHandlerExtensions\DataGridViewRowContextMenuStripNeededEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowcontextmenustripneededeventhandler is 49.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowDividerDoubleClickEventHandlerExtensions,DataGridViewRowDividerDoubleClickEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowDividerDoubleClickEventHandlerExtensions\DataGridViewRowDividerDoubleClickEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowdividerdoubleclickeventhandler is 45.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowErrorTextNeededEventHandlerExtensions,DataGridViewRowErrorTextNeededEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowErrorTextNeededEventHandlerExtensions\DataGridViewRowErrorTextNeededEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowerrortextneededeventhandler is 42.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowHeightInfoNeededEventHandlerExtensions,DataGridViewRowHeightInfoNeededEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowHeightInfoNeededEventHandlerExtensions\DataGridViewRowHeightInfoNeededEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowheightinfoneededeventhandler is 43.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowHeightInfoPushedEventHandlerExtensions,DataGridViewRowHeightInfoPushedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowHeightInfoPushedEventHandlerExtensions\DataGridViewRowHeightInfoPushedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowheightinfopushedeventhandler is 43.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowPostPaintEventHandlerExtensions,DataGridViewRowPostPaintEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowPostPaintEventHandlerExtensions\DataGridViewRowPostPaintEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowpostpainteventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowPrePaintEventHandlerExtensions,DataGridViewRowPrePaintEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowPrePaintEventHandlerExtensions\DataGridViewRowPrePaintEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowprepainteventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowsAddedEventHandlerExtensions,DataGridViewRowsAddedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowsAddedEventHandlerExtensions\DataGridViewRowsAddedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowsaddedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowsRemovedEventHandlerExtensions,DataGridViewRowsRemovedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowsRemovedEventHandlerExtensions\DataGridViewRowsRemovedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowsremovedeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.DataGridViewRowStateChangedEventHandlerExtensions,DataGridViewRowStateChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewRowStateChangedEventHandlerExtensions\DataGridViewRowStateChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewrowstatechangedeventhandler is 39.
Long Identifier,PRI.ProductivityExtensions.DataGridViewSortCompareEventHandlerExtensions,DataGridViewSortCompareEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DataGridViewSortCompareEventHandlerExtensions\DataGridViewSortCompareEventHandlerable.g.cs,BeginInvoke,The length of the parameter datagridviewsortcompareeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.DesignerTransactionCloseEventHandlerExtensions,DesignerTransactionCloseEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DesignerTransactionCloseEventHandlerExtensions\DesignerTransactionCloseEventHandlerable.g.cs,BeginInvoke,The length of the parameter designertransactioncloseeventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.DownloadDataCompletedEventHandlerExtensions,DownloadDataCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DownloadDataCompletedEventHandlerExtensions\DownloadDataCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter downloaddatacompletedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.DownloadProgressChangedEventHandlerExtensions,DownloadProgressChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DownloadProgressChangedEventHandlerExtensions\DownloadProgressChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter downloadprogresschangedeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.DownloadStringCompletedEventHandlerExtensions,DownloadStringCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DownloadStringCompletedEventHandlerExtensions\DownloadStringCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter downloadstringcompletedeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.DrawListViewColumnHeaderEventHandlerExtensions,DrawListViewColumnHeaderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DrawListViewColumnHeaderEventHandlerExtensions\DrawListViewColumnHeaderEventHandlerable.g.cs,BeginInvoke,The length of the parameter drawlistviewcolumnheadereventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.DrawListViewSubItemEventHandlerExtensions,DrawListViewSubItemEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DrawListViewSubItemEventHandlerExtensions\DrawListViewSubItemEventHandlerable.g.cs,BeginInvoke,The length of the parameter drawlistviewsubitemeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.ExtendedProtectionPolicyTypeConverterExtensions,ExtendedProtectionPolicyTypeConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ExtendedProtectionPolicyTypeConverterExtensions\ExtendedProtectionPolicyTypeConverterable.g.cs,ConvertTo,The length of the parameter extendedprotectionpolicytypeconverter is 37.
Long Identifier,PRI.ProductivityExtensions.InputLanguageChangedEventHandlerExtensions,InputLanguageChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\InputLanguageChangedEventHandlerExtensions\InputLanguageChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter inputlanguagechangedeventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.InputLanguageChangingEventHandlerExtensions,InputLanguageChangingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\InputLanguageChangingEventHandlerExtensions\InputLanguageChangingEventHandlerable.g.cs,BeginInvoke,The length of the parameter inputlanguagechangingeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.LinkLabelLinkClickedEventHandlerExtensions,LinkLabelLinkClickedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\LinkLabelLinkClickedEventHandlerExtensions\LinkLabelLinkClickedEventHandlerable.g.cs,BeginInvoke,The length of the parameter linklabellinkclickedeventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.ListControlConvertEventHandlerExtensions,ListControlConvertEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ListControlConvertEventHandlerExtensions\ListControlConvertEventHandlerable.g.cs,BeginInvoke,The length of the parameter listcontrolconverteventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.ListViewItemMouseHoverEventHandlerExtensions,ListViewItemMouseHoverEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ListViewItemMouseHoverEventHandlerExtensions\ListViewItemMouseHoverEventHandlerable.g.cs,BeginInvoke,The length of the parameter listviewitemmousehovereventhandler is 34.
Long Identifier,PRI.ProductivityExtensions.ListViewItemSelectionChangedEventHandlerExtensions,ListViewItemSelectionChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ListViewItemSelectionChangedEventHandlerExtensions\ListViewItemSelectionChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter listviewitemselectionchangedeventhandler is 40.
Long Identifier,PRI.ProductivityExtensions.ListViewVirtualItemsSelectionRangeChangedEventHandlerExtensions,ListViewVirtualItemsSelectionRangeChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ListViewVirtualItemsSelectionRangeChangedEventHandlerExtensions\ListViewVirtualItemsSelectionRangeChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter listviewvirtualitemsselectionrangechangedeventhandler is 53.
Long Identifier,PRI.ProductivityExtensions.LocalCertificateSelectionCallbackExtensions,LocalCertificateSelectionCallbackable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\LocalCertificateSelectionCallbackExtensions\LocalCertificateSelectionCallbackable.g.cs,BeginInvoke,The length of the parameter localcertificateselectioncallback is 33.
Long Identifier,PRI.ProductivityExtensions.NetworkAddressChangedEventHandlerExtensions,NetworkAddressChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NetworkAddressChangedEventHandlerExtensions\NetworkAddressChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter networkaddresschangedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.NetworkAvailabilityChangedEventHandlerExtensions,NetworkAvailabilityChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NetworkAvailabilityChangedEventHandlerExtensions\NetworkAvailabilityChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter networkavailabilitychangedeventhandler is 38.
Long Identifier,PRI.ProductivityExtensions.NotifyCollectionChangedEventHandlerExtensions,NotifyCollectionChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NotifyCollectionChangedEventHandlerExtensions\NotifyCollectionChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter notifycollectionchangedeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.OpenWriteCompletedEventHandlerExtensions,OpenWriteCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\OpenWriteCompletedEventHandlerExtensions\OpenWriteCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter openwritecompletedeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.PropertyTabChangedEventHandlerExtensions,PropertyTabChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PropertyTabChangedEventHandlerExtensions\PropertyTabChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter propertytabchangedeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.PropertyValueChangedEventHandlerExtensions,PropertyValueChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PropertyValueChangedEventHandlerExtensions\PropertyValueChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter propertyvaluechangedeventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.PropertyValueUIItemInvokeHandlerExtensions,PropertyValueUIItemInvokeHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\PropertyValueUIItemInvokeHandlerExtensions\PropertyValueUIItemInvokeHandlerable.g.cs,BeginInvoke,The length of the parameter propertyvalueuiiteminvokehandler is 32.
Long Identifier,PRI.ProductivityExtensions.QueryAccessibilityHelpEventHandlerExtensions,QueryAccessibilityHelpEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\QueryAccessibilityHelpEventHandlerExtensions\QueryAccessibilityHelpEventHandlerable.g.cs,BeginInvoke,The length of the parameter queryaccessibilityhelpeventhandler is 34.
Long Identifier,PRI.ProductivityExtensions.RemoteCertificateValidationCallbackExtensions,RemoteCertificateValidationCallbackable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\RemoteCertificateValidationCallbackExtensions\RemoteCertificateValidationCallbackable.g.cs,BeginInvoke,The length of the parameter remotecertificatevalidationcallback is 35.
Long Identifier,PRI.ProductivityExtensions.RetrieveVirtualItemEventHandlerExtensions,RetrieveVirtualItemEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\RetrieveVirtualItemEventHandlerExtensions\RetrieveVirtualItemEventHandlerable.g.cs,BeginInvoke,The length of the parameter retrievevirtualitemeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.RunWorkerCompletedEventHandlerExtensions,RunWorkerCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\RunWorkerCompletedEventHandlerExtensions\RunWorkerCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter runworkercompletedeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.SearchForVirtualItemEventHandlerExtensions,SearchForVirtualItemEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SearchForVirtualItemEventHandlerExtensions\SearchForVirtualItemEventHandlerable.g.cs,BeginInvoke,The length of the parameter searchforvirtualitemeventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.SelectedGridItemChangedEventHandlerExtensions,SelectedGridItemChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SelectedGridItemChangedEventHandlerExtensions\SelectedGridItemChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter selectedgriditemchangedeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.SerialDataReceivedEventHandlerExtensions,SerialDataReceivedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SerialDataReceivedEventHandlerExtensions\SerialDataReceivedEventHandlerable.g.cs,BeginInvoke,The length of the parameter serialdatareceivedeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.SerialErrorReceivedEventHandlerExtensions,SerialErrorReceivedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SerialErrorReceivedEventHandlerExtensions\SerialErrorReceivedEventHandlerable.g.cs,BeginInvoke,The length of the parameter serialerrorreceivedeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.StatementCompletedEventHandlerExtensions,StatementCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\StatementCompletedEventHandlerExtensions\StatementCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter statementcompletedeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.StatusBarPanelClickEventHandlerExtensions,StatusBarPanelClickEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\StatusBarPanelClickEventHandlerExtensions\StatusBarPanelClickEventHandlerable.g.cs,BeginInvoke,The length of the parameter statusbarpanelclickeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.TableLayoutCellPaintEventHandlerExtensions,TableLayoutCellPaintEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TableLayoutCellPaintEventHandlerExtensions\TableLayoutCellPaintEventHandlerable.g.cs,BeginInvoke,The length of the parameter tablelayoutcellpainteventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.TableLayoutSettingsTypeConverterExtensions,TableLayoutSettingsTypeConverterable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TableLayoutSettingsTypeConverterExtensions\TableLayoutSettingsTypeConverterable.g.cs,ConvertTo,The length of the parameter tablelayoutsettingstypeconverter is 32.
Long Identifier,PRI.ProductivityExtensions.ToolBarButtonClickEventHandlerExtensions,ToolBarButtonClickEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolBarButtonClickEventHandlerExtensions\ToolBarButtonClickEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolbarbuttonclickeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.ToolboxComponentsCreatedEventHandlerExtensions,ToolboxComponentsCreatedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolboxComponentsCreatedEventHandlerExtensions\ToolboxComponentsCreatedEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolboxcomponentscreatedeventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.ToolboxComponentsCreatingEventHandlerExtensions,ToolboxComponentsCreatingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolboxComponentsCreatingEventHandlerExtensions\ToolboxComponentsCreatingEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolboxcomponentscreatingeventhandler is 37.
Long Identifier,PRI.ProductivityExtensions.ToolStripArrowRenderEventHandlerExtensions,ToolStripArrowRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripArrowRenderEventHandlerExtensions\ToolStripArrowRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstriparrowrendereventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.ToolStripContentPanelRenderEventHandlerExtensions,ToolStripContentPanelRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripContentPanelRenderEventHandlerExtensions\ToolStripContentPanelRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripcontentpanelrendereventhandler is 39.
Long Identifier,PRI.ProductivityExtensions.ToolStripDropDownClosedEventHandlerExtensions,ToolStripDropDownClosedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripDropDownClosedEventHandlerExtensions\ToolStripDropDownClosedEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripdropdownclosedeventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.ToolStripDropDownClosingEventHandlerExtensions,ToolStripDropDownClosingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripDropDownClosingEventHandlerExtensions\ToolStripDropDownClosingEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripdropdownclosingeventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.ToolStripGripRenderEventHandlerExtensions,ToolStripGripRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripGripRenderEventHandlerExtensions\ToolStripGripRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripgriprendereventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.ToolStripItemClickedEventHandlerExtensions,ToolStripItemClickedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemClickedEventHandlerExtensions\ToolStripItemClickedEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripitemclickedeventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.ToolStripItemImageRenderEventHandlerExtensions,ToolStripItemImageRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemImageRenderEventHandlerExtensions\ToolStripItemImageRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripitemimagerendereventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.ToolStripItemRenderEventHandlerExtensions,ToolStripItemRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemRenderEventHandlerExtensions\ToolStripItemRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripitemrendereventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.ToolStripItemTextRenderEventHandlerExtensions,ToolStripItemTextRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripItemTextRenderEventHandlerExtensions\ToolStripItemTextRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripitemtextrendereventhandler is 35.
Long Identifier,PRI.ProductivityExtensions.ToolStripPanelRenderEventHandlerExtensions,ToolStripPanelRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripPanelRenderEventHandlerExtensions\ToolStripPanelRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstrippanelrendereventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.ToolStripSeparatorRenderEventHandlerExtensions,ToolStripSeparatorRenderEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ToolStripSeparatorRenderEventHandlerExtensions\ToolStripSeparatorRenderEventHandlerable.g.cs,BeginInvoke,The length of the parameter toolstripseparatorrendereventhandler is 36.
Long Identifier,PRI.ProductivityExtensions.TreeNodeMouseClickEventHandlerExtensions,TreeNodeMouseClickEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TreeNodeMouseClickEventHandlerExtensions\TreeNodeMouseClickEventHandlerable.g.cs,BeginInvoke,The length of the parameter treenodemouseclickeventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.TreeNodeMouseHoverEventHandlerExtensions,TreeNodeMouseHoverEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TreeNodeMouseHoverEventHandlerExtensions\TreeNodeMouseHoverEventHandlerable.g.cs,BeginInvoke,The length of the parameter treenodemousehovereventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.UnhandledExceptionEventHandlerExtensions,UnhandledExceptionEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UnhandledExceptionEventHandlerExtensions\UnhandledExceptionEventHandlerable.g.cs,BeginInvoke,The length of the parameter unhandledexceptioneventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.UnreferencedObjectEventHandlerExtensions,UnreferencedObjectEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UnreferencedObjectEventHandlerExtensions\UnreferencedObjectEventHandlerable.g.cs,BeginInvoke,The length of the parameter unreferencedobjecteventhandler is 30.
Long Identifier,PRI.ProductivityExtensions.UploadDataCompletedEventHandlerExtensions,UploadDataCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UploadDataCompletedEventHandlerExtensions\UploadDataCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter uploaddatacompletedeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.UploadFileCompletedEventHandlerExtensions,UploadFileCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UploadFileCompletedEventHandlerExtensions\UploadFileCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter uploadfilecompletedeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.UploadProgressChangedEventHandlerExtensions,UploadProgressChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UploadProgressChangedEventHandlerExtensions\UploadProgressChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter uploadprogresschangedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.UploadStringCompletedEventHandlerExtensions,UploadStringCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UploadStringCompletedEventHandlerExtensions\UploadStringCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter uploadstringcompletedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.UploadValuesCompletedEventHandlerExtensions,UploadValuesCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UploadValuesCompletedEventHandlerExtensions\UploadValuesCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter uploadvaluescompletedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.UserPreferenceChangedEventHandlerExtensions,UserPreferenceChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UserPreferenceChangedEventHandlerExtensions\UserPreferenceChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter userpreferencechangedeventhandler is 33.
Long Identifier,PRI.ProductivityExtensions.UserPreferenceChangingEventHandlerExtensions,UserPreferenceChangingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\UserPreferenceChangingEventHandlerExtensions\UserPreferenceChangingEventHandlerable.g.cs,BeginInvoke,The length of the parameter userpreferencechangingeventhandler is 34.
Long Identifier,PRI.ProductivityExtensions.WebBrowserDocumentCompletedEventHandlerExtensions,WebBrowserDocumentCompletedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserDocumentCompletedEventHandlerExtensions\WebBrowserDocumentCompletedEventHandlerable.g.cs,BeginInvoke,The length of the parameter webbrowserdocumentcompletedeventhandler is 39.
Long Identifier,PRI.ProductivityExtensions.WebBrowserNavigatedEventHandlerExtensions,WebBrowserNavigatedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserNavigatedEventHandlerExtensions\WebBrowserNavigatedEventHandlerable.g.cs,BeginInvoke,The length of the parameter webbrowsernavigatedeventhandler is 31.
Long Identifier,PRI.ProductivityExtensions.WebBrowserNavigatingEventHandlerExtensions,WebBrowserNavigatingEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserNavigatingEventHandlerExtensions\WebBrowserNavigatingEventHandlerable.g.cs,BeginInvoke,The length of the parameter webbrowsernavigatingeventhandler is 32.
Long Identifier,PRI.ProductivityExtensions.WebBrowserProgressChangedEventHandlerExtensions,WebBrowserProgressChangedEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\WebBrowserProgressChangedEventHandlerExtensions\WebBrowserProgressChangedEventHandlerable.g.cs,BeginInvoke,The length of the parameter webbrowserprogresschangedeventhandler is 37.
Long Identifier,PRI.ProductivityExtensions.XmlSerializationCollectionFixupCallbackExtensions,XmlSerializationCollectionFixupCallbackable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\XmlSerializationCollectionFixupCallbackExtensions\XmlSerializationCollectionFixupCallbackable.g.cs,BeginInvoke,The length of the parameter xmlserializationcollectionfixupcallback is 39.
Long Identifier,PRI.ProductivityExtensions.XsltMessageEncounteredEventHandlerExtensions,XsltMessageEncounteredEventHandlerable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\XsltMessageEncounteredEventHandlerExtensions\XsltMessageEncounteredEventHandlerable.g.cs,BeginInvoke,The length of the parameter xsltmessageencounteredeventhandler is 34.
Long Statement,PRI.ProductivityExtensions.ActionExtensions,Actionable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ActionExtensions\Actionable.g.cs,BeginInvoke,The length of the statement  "	return action.BeginInvoke (arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16' callback' null); " is 146.
Long Statement,PRI.ProductivityExtensions.DecoderExtensions,Decoderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\DecoderExtensions\Decoderable.g.cs,Convert,The length of the statement  "	decoder.Convert (bytes' 0' bytes.Length' chars' charIndex' charCount' flush' out bytesUsed' out charsUsed' out completed); " is 122.
Long Statement,PRI.ProductivityExtensions.EncoderExtensions,Encoderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\EncoderExtensions\Encoderable.g.cs,Convert,The length of the statement  "	encoder.Convert (chars' 0' chars.Length' bytes' byteIndex' byteCount' flush' out charsUsed' out bytesUsed' out completed); " is 122.
Long Statement,PRI.ProductivityExtensions.FuncExtensions,Funcable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\FuncExtensions\Funcable.g.cs,BeginInvoke,The length of the statement  "	return func.BeginInvoke (arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16' callback' null); " is 144.
Long Statement,PRI.ProductivityExtensions.IListExtensions,IListable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\IListExtensions\IListable.cs,BinarySearch,The length of the statement  "			// element is bigger than the element at index' so we can skip all elements at the left of index including the element at index. " is 128.
Long Statement,PRI.ProductivityExtensions.IListExtensions,IListable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\IListExtensions\IListable.cs,BinarySearch,The length of the statement  "			// element is smaller than the element at index' so we can skip all elements at the right of index including the element at index. " is 130.
Long Statement,PRI.ProductivityExtensions.LocalCertificateSelectionCallbackExtensions,LocalCertificateSelectionCallbackable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\LocalCertificateSelectionCallbackExtensions\LocalCertificateSelectionCallbackable.g.cs,BeginInvoke,The length of the statement  "	return localcertificateselectioncallback.BeginInvoke (sender' targetHost' localCertificates' remoteCertificate' acceptableIssuers' callback' null); " is 147.
Long Statement,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsClient,The length of the statement  "	return negotiatestream.BeginAuthenticateAsClient (credential' targetName' requiredProtectionLevel' allowedImpersonationLevel' asyncCallback' null); " is 147.
Long Statement,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsClient,The length of the statement  "	return negotiatestream.BeginAuthenticateAsClient (credential' binding' targetName' requiredProtectionLevel' allowedImpersonationLevel' asyncCallback' null); " is 156.
Long Statement,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsServer,The length of the statement  "	return negotiatestream.BeginAuthenticateAsServer (credential' requiredProtectionLevel' requiredImpersonationLevel' asyncCallback' null); " is 136.
Long Statement,PRI.ProductivityExtensions.NegotiateStreamExtensions,NegotiateStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\NegotiateStreamExtensions\NegotiateStreamable.g.cs,BeginAuthenticateAsServer,The length of the statement  "	return negotiatestream.BeginAuthenticateAsServer (credential' policy' requiredProtectionLevel' requiredImpersonationLevel' asyncCallback' null); " is 144.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The length of the statement  "					instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ()); " is 141.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,ReferencesMethod,The length of the statement  "			if (getTypeCall && instruction.Code == OpCodes.Ldtoken && i < instructions.Count () && instructions.ElementAt (i + 1).Code == OpCodes.Call) { " is 141.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,ReferencesConstructor,The length of the statement  "	return assembly.GetModules ().SelectMany (module => module.GetTypes ()).Any (moduleType => ReferencesConstructor (moduleType' type)); " is 133.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetPrivateFieldValue,The length of the statement  "		throw new InvalidOperationException (string.Format ("{0} is not assignable from {1}"' typeof(T).FullName' field.FieldType.FullName)); " is 133.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetPrivatePropertyValue,The length of the statement  "		property = type.GetProperty (propertyName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy); " is 123.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetPrivatePropertyValue,The length of the statement  "		throw new InvalidOperationException (string.Format ("{0} is not assignable from {1}"' typeof(T).FullName' property.PropertyType.FullName)); " is 139.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,SetPrivateFieldValue,The length of the statement  "		throw new InvalidOperationException (string.Format ("{0} is not assignable from {1}"' typeof(T).FullName' field.FieldType.FullName)); " is 133.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,SetPrivatePropertyValue,The length of the statement  "		property = type.GetProperty (propertyName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy); " is 123.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,SetPrivatePropertyValue,The length of the statement  "		throw new InvalidOperationException (string.Format ("{0} is not assignable from {1}"' typeof(T).FullName' property.PropertyType.FullName)); " is 139.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.cs,ImplementsInterface,The length of the statement  "				return type.GetTypeInfo().GetInterfaces().Any(t => t.GetTypeInfo().IsGenericType && t.GetTypeInfo().GetGenericTypeDefinition() == interfaceType);" is 145.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.cs,ByImplementedInterface,The length of the statement  "	return ByPredicate (assemblies' type => (type.Namespace ?? string.Empty).StartsWith (namespaceName) && type.ImplementsInterface (interfaceType)); " is 145.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.cs,ByImplementedInterface,The length of the statement  "				type => (type.Namespace ?? string.Empty).StartsWith(namespaceName) && type.GetTypeInfo().ImplementsInterface(interfaceType));" is 125.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.cs,ByImplementedInterfaceInDirectory,The length of the statement  "	return ByPredicate (System.IO.Directory.GetFiles (directory' wildcard).ToAssemblies ()' type => ImplementsInterface (type' interfaceType)); " is 139.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.cs,ByImplementedInterfaceInDirectory,The length of the statement  "			return ByPredicate(System.IO.Directory.GetFiles(directory' wildcard).ToAssemblies()' type => ImplementsInterface(type' interfaceType));" is 135.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.cs,ByImplementedInterfaceInDirectory,The length of the statement  "	return ByPredicate (System.IO.Directory.GetFiles (directory' wildcard).ToAssemblies ()' type => (type.Namespace ?? string.Empty).StartsWith (namespaceName) && ImplementsInterface (type' interfaceType)); " is 202.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.cs,GetFullTypeName,The length of the statement  "	return type.Assembly.GetName ().GetPublicKeyToken ().Length <= 0 ? string.Format ("{0}' {1}"' type.FullName' type.Assembly.GetName ().Name) : type.AssemblyQualifiedName; " is 169.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.cs,IsNetSystemType,The length of the statement  "	}.Any (s => s.EndsWith (".") && nameToCheck.Name.StartsWith (s) || nameToCheck.Name == s) && !exceptions.Any (s => nameToCheck.Name.StartsWith (s)); " is 148.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,TypeBuilderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\TypeBuilderable.cs,DefinePropertyGetter,The length of the statement  "	return typeBuilder.DefineMethod ("get_" + propertyInfo.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' propertyInfo.PropertyType' Type.EmptyTypes); " is 190.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,TypeBuilderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\TypeBuilderable.cs,DefinePropertySetter,The length of the statement  "	return typeBuilder.DefineMethod ("set_" + propertyInfo.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' null' new[] { " is 159.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,TypeBuilderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\TypeBuilderable.cs,DefinePrivatePropertyGetter,The length of the statement  "	return typeBuilder.DefineMethod ("get_" + propertyInfo.Name' MethodAttributes.Private | MethodAttributes.SpecialName | MethodAttributes.HideBySig' propertyInfo.PropertyType' Type.EmptyTypes); " is 191.
Long Statement,PRI.ProductivityExtensions.ReflectionExtensions,TypeBuilderable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\TypeBuilderable.cs,DefinePrivatePropertySetter,The length of the statement  "	return typeBuilder.DefineMethod ("set_" + propertyInfo.Name' MethodAttributes.Private | MethodAttributes.SpecialName | MethodAttributes.HideBySig' null' new[] { " is 160.
Long Statement,PRI.ProductivityExtensions.SslStreamExtensions,SslStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SslStreamExtensions\SslStreamable.g.cs,BeginAuthenticateAsClient,The length of the statement  "	return sslstream.BeginAuthenticateAsClient (targetHost' clientCertificates' enabledSslProtocols' checkCertificateRevocation' asyncCallback' null); " is 146.
Long Statement,PRI.ProductivityExtensions.SslStreamExtensions,SslStreamable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SslStreamExtensions\SslStreamable.g.cs,BeginAuthenticateAsServer,The length of the statement  "	return sslstream.BeginAuthenticateAsServer (serverCertificate' clientCertificateRequired' enabledSslProtocols' checkCertificateRevocation' asyncCallback' null); " is 160.
Complex Conditional,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,ReferencesMethod,The conditional expression  "getTypeCall && instruction.Code == OpCodes.Ldtoken && i < instructions.Count () && instructions.ElementAt (i + 1).Code == OpCodes.Call"  is complex.
Empty Catch Block,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The method has an empty catch block.
Empty Catch Block,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The method has an empty catch block.
Empty Catch Block,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The method has an empty catch block.
Empty Catch Block,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The method has an empty catch block.
Empty Catch Block,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The method has an empty catch block.
Magic Number,PRI.ProductivityExtensions.ByteArrayExtensions,ByteArrayable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ByteArrayExtensions\ByteArrayable.cs,AsHexString,The following statement contains a magic number: for (int i = offset; i < length; ++i) {  	byte b = buffer [i];  	if (lineOctet > 16) {  		stringBuilder.Append (Environment.NewLine);  		++line;  		lineOctet = 0;  	}  	stringBuilder.Append (string.Format ("{0} "' b.ToString ("X2"' CultureInfo.CurrentCulture)));  }  
Magic Number,PRI.ProductivityExtensions.ByteArrayExtensions,ByteArrayable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\ByteArrayExtensions\ByteArrayable.cs,AsHexString,The following statement contains a magic number: if (lineOctet > 16) {  	stringBuilder.Append (Environment.NewLine);  	++line;  	lineOctet = 0;  }  
Magic Number,PRI.ProductivityExtensions.IListExtensions,IListable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\IListExtensions\IListable.cs,BinarySearch,The following statement contains a magic number: while (left <= right) {  	// determine the index in the list to compare with. This is the middle of the segment we're searching in.  	int index = left + (right - left) / 2;  	int compareResult = comparer.Compare (sortedList [index]' element);  	if (compareResult == 0) {  		// found it' done. Return the index  		return index;  	}  	if (compareResult < 0) {  		// element is bigger than the element at index' so we can skip all elements at the left of index including the element at index.  		left = index + 1;  	} else {  		// element is smaller than the element at index' so we can skip all elements at the right of index including the element at index.  		right = index - 1;  	}  }  
Magic Number,PRI.ProductivityExtensions.IpAddressExtensions,IpAddressable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\IpAddressExtensions\IpAddressable.cs,IsIPv4LinkLocal,The following statement contains a magic number: return ipBytes [0] == 169 && ipBytes [1] == 254;  
Magic Number,PRI.ProductivityExtensions.IpAddressExtensions,IpAddressable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\IpAddressExtensions\IpAddressable.cs,IsIPv4LinkLocal,The following statement contains a magic number: return ipBytes [0] == 169 && ipBytes [1] == 254;  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: while (position < il.Length) {  	OpCode code;  	ushort value = il [position++];  	if (value != 0xfe) {  		code = singleByteOpCodes [value];  	} else {  		value = il [position++];  		code = multiByteOpCodes [value];  		value = (ushort)(value | 0xfe00);  	}  	IlInstruction instruction = new IlInstruction (code) {  		Code = code  	};  	int metadataToken = 0;  	// get the operand of the current operation  	switch (code.OperandType) {  	case OperandType.InlineBrTarget:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		metadataToken += position;  		instruction.Operand = metadataToken;  		break;  	case OperandType.InlineField:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveField (metadataToken);  		} catch (Exception) {  			// if field could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineMethod:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveMethod (metadataToken);  		} catch (Exception) {  			// if method could not be resolved' ignore it.  		}  		if (instruction.Operand == null) {  			try {  				instruction.Operand = module.ResolveMember (metadataToken);  			} catch (Exception) {  				// if member could not be resolved' ignore it.  			}  		}  		break;  	case OperandType.InlineSig:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveSignature (metadataToken);  		break;  	case OperandType.InlineTok:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveType (metadataToken);  		} catch {  			// if type could not be resolved' ignore it.  		}  		// SSS : see what to do here  		break;  	case OperandType.InlineType:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		// now we call the ResolveType always using the generic attributes type in order  		// to support decompilation of generic methods and classes  		// thanks to the guys from code project who commented on this missing feature  		try {  			if (methodInfo.DeclaringType != null)  				instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  		} catch (Exception) {  			// if type could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineI: {  		instruction.Operand = BitConverter.ToInt32 (il' position);  		position += 4;  		break;  	}  	case OperandType.InlineI8: {  		instruction.Operand = BitConverter.ToInt64 (il' position);  		position += 8;  		break;  	}  	case OperandType.InlineNone: {  		instruction.Operand = null;  		break;  	}  	case OperandType.InlineR: {  		instruction.Operand = BitConverter.ToDouble (il' position);  		position += sizeof(Double);  		break;  	}  	case OperandType.InlineString: {  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveString (metadataToken);  		break;  	}  	case OperandType.InlineSwitch: {  		int count = BitConverter.ToInt32 (il' position);  		position += 4;  		int[] casesAddresses = new int[count];  		for (int i = 0; i < count; i++) {  			casesAddresses [i] = BitConverter.ToInt32 (il' position);  			position += 4;  		}  		int[] cases = new int[count];  		for (int i = 0; i < count; i++) {  			cases [i] = position + casesAddresses [i];  		}  		break;  	}  	case OperandType.InlineVar: {  		instruction.Operand = BitConverter.ToUInt16 (il' position);  		position += sizeof(UInt16);  		break;  	}  	case OperandType.ShortInlineBrTarget: {  		instruction.Operand = (sbyte)il [position] + position;  		position++;  		break;  	}  	case OperandType.ShortInlineI: {  		instruction.Operand = (sbyte)il [position];  		position++;  		break;  	}  	case OperandType.ShortInlineR: {  		instruction.Operand = BitConverter.ToSingle (il' position);  		position += sizeof(Single);  		break;  	}  	case OperandType.ShortInlineVar: {  		instruction.Operand = il [position];  		position++;  		break;  	}  	default: {  		throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  	}  	}  	instructions.Add (instruction);  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: while (position < il.Length) {  	OpCode code;  	ushort value = il [position++];  	if (value != 0xfe) {  		code = singleByteOpCodes [value];  	} else {  		value = il [position++];  		code = multiByteOpCodes [value];  		value = (ushort)(value | 0xfe00);  	}  	IlInstruction instruction = new IlInstruction (code) {  		Code = code  	};  	int metadataToken = 0;  	// get the operand of the current operation  	switch (code.OperandType) {  	case OperandType.InlineBrTarget:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		metadataToken += position;  		instruction.Operand = metadataToken;  		break;  	case OperandType.InlineField:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveField (metadataToken);  		} catch (Exception) {  			// if field could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineMethod:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveMethod (metadataToken);  		} catch (Exception) {  			// if method could not be resolved' ignore it.  		}  		if (instruction.Operand == null) {  			try {  				instruction.Operand = module.ResolveMember (metadataToken);  			} catch (Exception) {  				// if member could not be resolved' ignore it.  			}  		}  		break;  	case OperandType.InlineSig:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveSignature (metadataToken);  		break;  	case OperandType.InlineTok:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveType (metadataToken);  		} catch {  			// if type could not be resolved' ignore it.  		}  		// SSS : see what to do here  		break;  	case OperandType.InlineType:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		// now we call the ResolveType always using the generic attributes type in order  		// to support decompilation of generic methods and classes  		// thanks to the guys from code project who commented on this missing feature  		try {  			if (methodInfo.DeclaringType != null)  				instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  		} catch (Exception) {  			// if type could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineI: {  		instruction.Operand = BitConverter.ToInt32 (il' position);  		position += 4;  		break;  	}  	case OperandType.InlineI8: {  		instruction.Operand = BitConverter.ToInt64 (il' position);  		position += 8;  		break;  	}  	case OperandType.InlineNone: {  		instruction.Operand = null;  		break;  	}  	case OperandType.InlineR: {  		instruction.Operand = BitConverter.ToDouble (il' position);  		position += sizeof(Double);  		break;  	}  	case OperandType.InlineString: {  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveString (metadataToken);  		break;  	}  	case OperandType.InlineSwitch: {  		int count = BitConverter.ToInt32 (il' position);  		position += 4;  		int[] casesAddresses = new int[count];  		for (int i = 0; i < count; i++) {  			casesAddresses [i] = BitConverter.ToInt32 (il' position);  			position += 4;  		}  		int[] cases = new int[count];  		for (int i = 0; i < count; i++) {  			cases [i] = position + casesAddresses [i];  		}  		break;  	}  	case OperandType.InlineVar: {  		instruction.Operand = BitConverter.ToUInt16 (il' position);  		position += sizeof(UInt16);  		break;  	}  	case OperandType.ShortInlineBrTarget: {  		instruction.Operand = (sbyte)il [position] + position;  		position++;  		break;  	}  	case OperandType.ShortInlineI: {  		instruction.Operand = (sbyte)il [position];  		position++;  		break;  	}  	case OperandType.ShortInlineR: {  		instruction.Operand = BitConverter.ToSingle (il' position);  		position += sizeof(Single);  		break;  	}  	case OperandType.ShortInlineVar: {  		instruction.Operand = il [position];  		position++;  		break;  	}  	default: {  		throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  	}  	}  	instructions.Add (instruction);  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: while (position < il.Length) {  	OpCode code;  	ushort value = il [position++];  	if (value != 0xfe) {  		code = singleByteOpCodes [value];  	} else {  		value = il [position++];  		code = multiByteOpCodes [value];  		value = (ushort)(value | 0xfe00);  	}  	IlInstruction instruction = new IlInstruction (code) {  		Code = code  	};  	int metadataToken = 0;  	// get the operand of the current operation  	switch (code.OperandType) {  	case OperandType.InlineBrTarget:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		metadataToken += position;  		instruction.Operand = metadataToken;  		break;  	case OperandType.InlineField:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveField (metadataToken);  		} catch (Exception) {  			// if field could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineMethod:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveMethod (metadataToken);  		} catch (Exception) {  			// if method could not be resolved' ignore it.  		}  		if (instruction.Operand == null) {  			try {  				instruction.Operand = module.ResolveMember (metadataToken);  			} catch (Exception) {  				// if member could not be resolved' ignore it.  			}  		}  		break;  	case OperandType.InlineSig:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveSignature (metadataToken);  		break;  	case OperandType.InlineTok:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveType (metadataToken);  		} catch {  			// if type could not be resolved' ignore it.  		}  		// SSS : see what to do here  		break;  	case OperandType.InlineType:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		// now we call the ResolveType always using the generic attributes type in order  		// to support decompilation of generic methods and classes  		// thanks to the guys from code project who commented on this missing feature  		try {  			if (methodInfo.DeclaringType != null)  				instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  		} catch (Exception) {  			// if type could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineI: {  		instruction.Operand = BitConverter.ToInt32 (il' position);  		position += 4;  		break;  	}  	case OperandType.InlineI8: {  		instruction.Operand = BitConverter.ToInt64 (il' position);  		position += 8;  		break;  	}  	case OperandType.InlineNone: {  		instruction.Operand = null;  		break;  	}  	case OperandType.InlineR: {  		instruction.Operand = BitConverter.ToDouble (il' position);  		position += sizeof(Double);  		break;  	}  	case OperandType.InlineString: {  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveString (metadataToken);  		break;  	}  	case OperandType.InlineSwitch: {  		int count = BitConverter.ToInt32 (il' position);  		position += 4;  		int[] casesAddresses = new int[count];  		for (int i = 0; i < count; i++) {  			casesAddresses [i] = BitConverter.ToInt32 (il' position);  			position += 4;  		}  		int[] cases = new int[count];  		for (int i = 0; i < count; i++) {  			cases [i] = position + casesAddresses [i];  		}  		break;  	}  	case OperandType.InlineVar: {  		instruction.Operand = BitConverter.ToUInt16 (il' position);  		position += sizeof(UInt16);  		break;  	}  	case OperandType.ShortInlineBrTarget: {  		instruction.Operand = (sbyte)il [position] + position;  		position++;  		break;  	}  	case OperandType.ShortInlineI: {  		instruction.Operand = (sbyte)il [position];  		position++;  		break;  	}  	case OperandType.ShortInlineR: {  		instruction.Operand = BitConverter.ToSingle (il' position);  		position += sizeof(Single);  		break;  	}  	case OperandType.ShortInlineVar: {  		instruction.Operand = il [position];  		position++;  		break;  	}  	default: {  		throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  	}  	}  	instructions.Add (instruction);  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: while (position < il.Length) {  	OpCode code;  	ushort value = il [position++];  	if (value != 0xfe) {  		code = singleByteOpCodes [value];  	} else {  		value = il [position++];  		code = multiByteOpCodes [value];  		value = (ushort)(value | 0xfe00);  	}  	IlInstruction instruction = new IlInstruction (code) {  		Code = code  	};  	int metadataToken = 0;  	// get the operand of the current operation  	switch (code.OperandType) {  	case OperandType.InlineBrTarget:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		metadataToken += position;  		instruction.Operand = metadataToken;  		break;  	case OperandType.InlineField:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveField (metadataToken);  		} catch (Exception) {  			// if field could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineMethod:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveMethod (metadataToken);  		} catch (Exception) {  			// if method could not be resolved' ignore it.  		}  		if (instruction.Operand == null) {  			try {  				instruction.Operand = module.ResolveMember (metadataToken);  			} catch (Exception) {  				// if member could not be resolved' ignore it.  			}  		}  		break;  	case OperandType.InlineSig:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveSignature (metadataToken);  		break;  	case OperandType.InlineTok:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveType (metadataToken);  		} catch {  			// if type could not be resolved' ignore it.  		}  		// SSS : see what to do here  		break;  	case OperandType.InlineType:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		// now we call the ResolveType always using the generic attributes type in order  		// to support decompilation of generic methods and classes  		// thanks to the guys from code project who commented on this missing feature  		try {  			if (methodInfo.DeclaringType != null)  				instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  		} catch (Exception) {  			// if type could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineI: {  		instruction.Operand = BitConverter.ToInt32 (il' position);  		position += 4;  		break;  	}  	case OperandType.InlineI8: {  		instruction.Operand = BitConverter.ToInt64 (il' position);  		position += 8;  		break;  	}  	case OperandType.InlineNone: {  		instruction.Operand = null;  		break;  	}  	case OperandType.InlineR: {  		instruction.Operand = BitConverter.ToDouble (il' position);  		position += sizeof(Double);  		break;  	}  	case OperandType.InlineString: {  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveString (metadataToken);  		break;  	}  	case OperandType.InlineSwitch: {  		int count = BitConverter.ToInt32 (il' position);  		position += 4;  		int[] casesAddresses = new int[count];  		for (int i = 0; i < count; i++) {  			casesAddresses [i] = BitConverter.ToInt32 (il' position);  			position += 4;  		}  		int[] cases = new int[count];  		for (int i = 0; i < count; i++) {  			cases [i] = position + casesAddresses [i];  		}  		break;  	}  	case OperandType.InlineVar: {  		instruction.Operand = BitConverter.ToUInt16 (il' position);  		position += sizeof(UInt16);  		break;  	}  	case OperandType.ShortInlineBrTarget: {  		instruction.Operand = (sbyte)il [position] + position;  		position++;  		break;  	}  	case OperandType.ShortInlineI: {  		instruction.Operand = (sbyte)il [position];  		position++;  		break;  	}  	case OperandType.ShortInlineR: {  		instruction.Operand = BitConverter.ToSingle (il' position);  		position += sizeof(Single);  		break;  	}  	case OperandType.ShortInlineVar: {  		instruction.Operand = il [position];  		position++;  		break;  	}  	default: {  		throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  	}  	}  	instructions.Add (instruction);  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: while (position < il.Length) {  	OpCode code;  	ushort value = il [position++];  	if (value != 0xfe) {  		code = singleByteOpCodes [value];  	} else {  		value = il [position++];  		code = multiByteOpCodes [value];  		value = (ushort)(value | 0xfe00);  	}  	IlInstruction instruction = new IlInstruction (code) {  		Code = code  	};  	int metadataToken = 0;  	// get the operand of the current operation  	switch (code.OperandType) {  	case OperandType.InlineBrTarget:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		metadataToken += position;  		instruction.Operand = metadataToken;  		break;  	case OperandType.InlineField:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveField (metadataToken);  		} catch (Exception) {  			// if field could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineMethod:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveMethod (metadataToken);  		} catch (Exception) {  			// if method could not be resolved' ignore it.  		}  		if (instruction.Operand == null) {  			try {  				instruction.Operand = module.ResolveMember (metadataToken);  			} catch (Exception) {  				// if member could not be resolved' ignore it.  			}  		}  		break;  	case OperandType.InlineSig:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveSignature (metadataToken);  		break;  	case OperandType.InlineTok:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveType (metadataToken);  		} catch {  			// if type could not be resolved' ignore it.  		}  		// SSS : see what to do here  		break;  	case OperandType.InlineType:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		// now we call the ResolveType always using the generic attributes type in order  		// to support decompilation of generic methods and classes  		// thanks to the guys from code project who commented on this missing feature  		try {  			if (methodInfo.DeclaringType != null)  				instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  		} catch (Exception) {  			// if type could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineI: {  		instruction.Operand = BitConverter.ToInt32 (il' position);  		position += 4;  		break;  	}  	case OperandType.InlineI8: {  		instruction.Operand = BitConverter.ToInt64 (il' position);  		position += 8;  		break;  	}  	case OperandType.InlineNone: {  		instruction.Operand = null;  		break;  	}  	case OperandType.InlineR: {  		instruction.Operand = BitConverter.ToDouble (il' position);  		position += sizeof(Double);  		break;  	}  	case OperandType.InlineString: {  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveString (metadataToken);  		break;  	}  	case OperandType.InlineSwitch: {  		int count = BitConverter.ToInt32 (il' position);  		position += 4;  		int[] casesAddresses = new int[count];  		for (int i = 0; i < count; i++) {  			casesAddresses [i] = BitConverter.ToInt32 (il' position);  			position += 4;  		}  		int[] cases = new int[count];  		for (int i = 0; i < count; i++) {  			cases [i] = position + casesAddresses [i];  		}  		break;  	}  	case OperandType.InlineVar: {  		instruction.Operand = BitConverter.ToUInt16 (il' position);  		position += sizeof(UInt16);  		break;  	}  	case OperandType.ShortInlineBrTarget: {  		instruction.Operand = (sbyte)il [position] + position;  		position++;  		break;  	}  	case OperandType.ShortInlineI: {  		instruction.Operand = (sbyte)il [position];  		position++;  		break;  	}  	case OperandType.ShortInlineR: {  		instruction.Operand = BitConverter.ToSingle (il' position);  		position += sizeof(Single);  		break;  	}  	case OperandType.ShortInlineVar: {  		instruction.Operand = il [position];  		position++;  		break;  	}  	default: {  		throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  	}  	}  	instructions.Add (instruction);  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: while (position < il.Length) {  	OpCode code;  	ushort value = il [position++];  	if (value != 0xfe) {  		code = singleByteOpCodes [value];  	} else {  		value = il [position++];  		code = multiByteOpCodes [value];  		value = (ushort)(value | 0xfe00);  	}  	IlInstruction instruction = new IlInstruction (code) {  		Code = code  	};  	int metadataToken = 0;  	// get the operand of the current operation  	switch (code.OperandType) {  	case OperandType.InlineBrTarget:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		metadataToken += position;  		instruction.Operand = metadataToken;  		break;  	case OperandType.InlineField:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveField (metadataToken);  		} catch (Exception) {  			// if field could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineMethod:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveMethod (metadataToken);  		} catch (Exception) {  			// if method could not be resolved' ignore it.  		}  		if (instruction.Operand == null) {  			try {  				instruction.Operand = module.ResolveMember (metadataToken);  			} catch (Exception) {  				// if member could not be resolved' ignore it.  			}  		}  		break;  	case OperandType.InlineSig:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveSignature (metadataToken);  		break;  	case OperandType.InlineTok:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveType (metadataToken);  		} catch {  			// if type could not be resolved' ignore it.  		}  		// SSS : see what to do here  		break;  	case OperandType.InlineType:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		// now we call the ResolveType always using the generic attributes type in order  		// to support decompilation of generic methods and classes  		// thanks to the guys from code project who commented on this missing feature  		try {  			if (methodInfo.DeclaringType != null)  				instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  		} catch (Exception) {  			// if type could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineI: {  		instruction.Operand = BitConverter.ToInt32 (il' position);  		position += 4;  		break;  	}  	case OperandType.InlineI8: {  		instruction.Operand = BitConverter.ToInt64 (il' position);  		position += 8;  		break;  	}  	case OperandType.InlineNone: {  		instruction.Operand = null;  		break;  	}  	case OperandType.InlineR: {  		instruction.Operand = BitConverter.ToDouble (il' position);  		position += sizeof(Double);  		break;  	}  	case OperandType.InlineString: {  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveString (metadataToken);  		break;  	}  	case OperandType.InlineSwitch: {  		int count = BitConverter.ToInt32 (il' position);  		position += 4;  		int[] casesAddresses = new int[count];  		for (int i = 0; i < count; i++) {  			casesAddresses [i] = BitConverter.ToInt32 (il' position);  			position += 4;  		}  		int[] cases = new int[count];  		for (int i = 0; i < count; i++) {  			cases [i] = position + casesAddresses [i];  		}  		break;  	}  	case OperandType.InlineVar: {  		instruction.Operand = BitConverter.ToUInt16 (il' position);  		position += sizeof(UInt16);  		break;  	}  	case OperandType.ShortInlineBrTarget: {  		instruction.Operand = (sbyte)il [position] + position;  		position++;  		break;  	}  	case OperandType.ShortInlineI: {  		instruction.Operand = (sbyte)il [position];  		position++;  		break;  	}  	case OperandType.ShortInlineR: {  		instruction.Operand = BitConverter.ToSingle (il' position);  		position += sizeof(Single);  		break;  	}  	case OperandType.ShortInlineVar: {  		instruction.Operand = il [position];  		position++;  		break;  	}  	default: {  		throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  	}  	}  	instructions.Add (instruction);  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: while (position < il.Length) {  	OpCode code;  	ushort value = il [position++];  	if (value != 0xfe) {  		code = singleByteOpCodes [value];  	} else {  		value = il [position++];  		code = multiByteOpCodes [value];  		value = (ushort)(value | 0xfe00);  	}  	IlInstruction instruction = new IlInstruction (code) {  		Code = code  	};  	int metadataToken = 0;  	// get the operand of the current operation  	switch (code.OperandType) {  	case OperandType.InlineBrTarget:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		metadataToken += position;  		instruction.Operand = metadataToken;  		break;  	case OperandType.InlineField:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveField (metadataToken);  		} catch (Exception) {  			// if field could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineMethod:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveMethod (metadataToken);  		} catch (Exception) {  			// if method could not be resolved' ignore it.  		}  		if (instruction.Operand == null) {  			try {  				instruction.Operand = module.ResolveMember (metadataToken);  			} catch (Exception) {  				// if member could not be resolved' ignore it.  			}  		}  		break;  	case OperandType.InlineSig:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveSignature (metadataToken);  		break;  	case OperandType.InlineTok:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveType (metadataToken);  		} catch {  			// if type could not be resolved' ignore it.  		}  		// SSS : see what to do here  		break;  	case OperandType.InlineType:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		// now we call the ResolveType always using the generic attributes type in order  		// to support decompilation of generic methods and classes  		// thanks to the guys from code project who commented on this missing feature  		try {  			if (methodInfo.DeclaringType != null)  				instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  		} catch (Exception) {  			// if type could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineI: {  		instruction.Operand = BitConverter.ToInt32 (il' position);  		position += 4;  		break;  	}  	case OperandType.InlineI8: {  		instruction.Operand = BitConverter.ToInt64 (il' position);  		position += 8;  		break;  	}  	case OperandType.InlineNone: {  		instruction.Operand = null;  		break;  	}  	case OperandType.InlineR: {  		instruction.Operand = BitConverter.ToDouble (il' position);  		position += sizeof(Double);  		break;  	}  	case OperandType.InlineString: {  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveString (metadataToken);  		break;  	}  	case OperandType.InlineSwitch: {  		int count = BitConverter.ToInt32 (il' position);  		position += 4;  		int[] casesAddresses = new int[count];  		for (int i = 0; i < count; i++) {  			casesAddresses [i] = BitConverter.ToInt32 (il' position);  			position += 4;  		}  		int[] cases = new int[count];  		for (int i = 0; i < count; i++) {  			cases [i] = position + casesAddresses [i];  		}  		break;  	}  	case OperandType.InlineVar: {  		instruction.Operand = BitConverter.ToUInt16 (il' position);  		position += sizeof(UInt16);  		break;  	}  	case OperandType.ShortInlineBrTarget: {  		instruction.Operand = (sbyte)il [position] + position;  		position++;  		break;  	}  	case OperandType.ShortInlineI: {  		instruction.Operand = (sbyte)il [position];  		position++;  		break;  	}  	case OperandType.ShortInlineR: {  		instruction.Operand = BitConverter.ToSingle (il' position);  		position += sizeof(Single);  		break;  	}  	case OperandType.ShortInlineVar: {  		instruction.Operand = il [position];  		position++;  		break;  	}  	default: {  		throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  	}  	}  	instructions.Add (instruction);  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: while (position < il.Length) {  	OpCode code;  	ushort value = il [position++];  	if (value != 0xfe) {  		code = singleByteOpCodes [value];  	} else {  		value = il [position++];  		code = multiByteOpCodes [value];  		value = (ushort)(value | 0xfe00);  	}  	IlInstruction instruction = new IlInstruction (code) {  		Code = code  	};  	int metadataToken = 0;  	// get the operand of the current operation  	switch (code.OperandType) {  	case OperandType.InlineBrTarget:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		metadataToken += position;  		instruction.Operand = metadataToken;  		break;  	case OperandType.InlineField:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveField (metadataToken);  		} catch (Exception) {  			// if field could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineMethod:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveMethod (metadataToken);  		} catch (Exception) {  			// if method could not be resolved' ignore it.  		}  		if (instruction.Operand == null) {  			try {  				instruction.Operand = module.ResolveMember (metadataToken);  			} catch (Exception) {  				// if member could not be resolved' ignore it.  			}  		}  		break;  	case OperandType.InlineSig:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveSignature (metadataToken);  		break;  	case OperandType.InlineTok:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveType (metadataToken);  		} catch {  			// if type could not be resolved' ignore it.  		}  		// SSS : see what to do here  		break;  	case OperandType.InlineType:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		// now we call the ResolveType always using the generic attributes type in order  		// to support decompilation of generic methods and classes  		// thanks to the guys from code project who commented on this missing feature  		try {  			if (methodInfo.DeclaringType != null)  				instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  		} catch (Exception) {  			// if type could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineI: {  		instruction.Operand = BitConverter.ToInt32 (il' position);  		position += 4;  		break;  	}  	case OperandType.InlineI8: {  		instruction.Operand = BitConverter.ToInt64 (il' position);  		position += 8;  		break;  	}  	case OperandType.InlineNone: {  		instruction.Operand = null;  		break;  	}  	case OperandType.InlineR: {  		instruction.Operand = BitConverter.ToDouble (il' position);  		position += sizeof(Double);  		break;  	}  	case OperandType.InlineString: {  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveString (metadataToken);  		break;  	}  	case OperandType.InlineSwitch: {  		int count = BitConverter.ToInt32 (il' position);  		position += 4;  		int[] casesAddresses = new int[count];  		for (int i = 0; i < count; i++) {  			casesAddresses [i] = BitConverter.ToInt32 (il' position);  			position += 4;  		}  		int[] cases = new int[count];  		for (int i = 0; i < count; i++) {  			cases [i] = position + casesAddresses [i];  		}  		break;  	}  	case OperandType.InlineVar: {  		instruction.Operand = BitConverter.ToUInt16 (il' position);  		position += sizeof(UInt16);  		break;  	}  	case OperandType.ShortInlineBrTarget: {  		instruction.Operand = (sbyte)il [position] + position;  		position++;  		break;  	}  	case OperandType.ShortInlineI: {  		instruction.Operand = (sbyte)il [position];  		position++;  		break;  	}  	case OperandType.ShortInlineR: {  		instruction.Operand = BitConverter.ToSingle (il' position);  		position += sizeof(Single);  		break;  	}  	case OperandType.ShortInlineVar: {  		instruction.Operand = il [position];  		position++;  		break;  	}  	default: {  		throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  	}  	}  	instructions.Add (instruction);  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: while (position < il.Length) {  	OpCode code;  	ushort value = il [position++];  	if (value != 0xfe) {  		code = singleByteOpCodes [value];  	} else {  		value = il [position++];  		code = multiByteOpCodes [value];  		value = (ushort)(value | 0xfe00);  	}  	IlInstruction instruction = new IlInstruction (code) {  		Code = code  	};  	int metadataToken = 0;  	// get the operand of the current operation  	switch (code.OperandType) {  	case OperandType.InlineBrTarget:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		metadataToken += position;  		instruction.Operand = metadataToken;  		break;  	case OperandType.InlineField:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveField (metadataToken);  		} catch (Exception) {  			// if field could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineMethod:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveMethod (metadataToken);  		} catch (Exception) {  			// if method could not be resolved' ignore it.  		}  		if (instruction.Operand == null) {  			try {  				instruction.Operand = module.ResolveMember (metadataToken);  			} catch (Exception) {  				// if member could not be resolved' ignore it.  			}  		}  		break;  	case OperandType.InlineSig:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveSignature (metadataToken);  		break;  	case OperandType.InlineTok:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveType (metadataToken);  		} catch {  			// if type could not be resolved' ignore it.  		}  		// SSS : see what to do here  		break;  	case OperandType.InlineType:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		// now we call the ResolveType always using the generic attributes type in order  		// to support decompilation of generic methods and classes  		// thanks to the guys from code project who commented on this missing feature  		try {  			if (methodInfo.DeclaringType != null)  				instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  		} catch (Exception) {  			// if type could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineI: {  		instruction.Operand = BitConverter.ToInt32 (il' position);  		position += 4;  		break;  	}  	case OperandType.InlineI8: {  		instruction.Operand = BitConverter.ToInt64 (il' position);  		position += 8;  		break;  	}  	case OperandType.InlineNone: {  		instruction.Operand = null;  		break;  	}  	case OperandType.InlineR: {  		instruction.Operand = BitConverter.ToDouble (il' position);  		position += sizeof(Double);  		break;  	}  	case OperandType.InlineString: {  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveString (metadataToken);  		break;  	}  	case OperandType.InlineSwitch: {  		int count = BitConverter.ToInt32 (il' position);  		position += 4;  		int[] casesAddresses = new int[count];  		for (int i = 0; i < count; i++) {  			casesAddresses [i] = BitConverter.ToInt32 (il' position);  			position += 4;  		}  		int[] cases = new int[count];  		for (int i = 0; i < count; i++) {  			cases [i] = position + casesAddresses [i];  		}  		break;  	}  	case OperandType.InlineVar: {  		instruction.Operand = BitConverter.ToUInt16 (il' position);  		position += sizeof(UInt16);  		break;  	}  	case OperandType.ShortInlineBrTarget: {  		instruction.Operand = (sbyte)il [position] + position;  		position++;  		break;  	}  	case OperandType.ShortInlineI: {  		instruction.Operand = (sbyte)il [position];  		position++;  		break;  	}  	case OperandType.ShortInlineR: {  		instruction.Operand = BitConverter.ToSingle (il' position);  		position += sizeof(Single);  		break;  	}  	case OperandType.ShortInlineVar: {  		instruction.Operand = il [position];  		position++;  		break;  	}  	default: {  		throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  	}  	}  	instructions.Add (instruction);  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: while (position < il.Length) {  	OpCode code;  	ushort value = il [position++];  	if (value != 0xfe) {  		code = singleByteOpCodes [value];  	} else {  		value = il [position++];  		code = multiByteOpCodes [value];  		value = (ushort)(value | 0xfe00);  	}  	IlInstruction instruction = new IlInstruction (code) {  		Code = code  	};  	int metadataToken = 0;  	// get the operand of the current operation  	switch (code.OperandType) {  	case OperandType.InlineBrTarget:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		metadataToken += position;  		instruction.Operand = metadataToken;  		break;  	case OperandType.InlineField:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveField (metadataToken);  		} catch (Exception) {  			// if field could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineMethod:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveMethod (metadataToken);  		} catch (Exception) {  			// if method could not be resolved' ignore it.  		}  		if (instruction.Operand == null) {  			try {  				instruction.Operand = module.ResolveMember (metadataToken);  			} catch (Exception) {  				// if member could not be resolved' ignore it.  			}  		}  		break;  	case OperandType.InlineSig:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveSignature (metadataToken);  		break;  	case OperandType.InlineTok:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveType (metadataToken);  		} catch {  			// if type could not be resolved' ignore it.  		}  		// SSS : see what to do here  		break;  	case OperandType.InlineType:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		// now we call the ResolveType always using the generic attributes type in order  		// to support decompilation of generic methods and classes  		// thanks to the guys from code project who commented on this missing feature  		try {  			if (methodInfo.DeclaringType != null)  				instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  		} catch (Exception) {  			// if type could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineI: {  		instruction.Operand = BitConverter.ToInt32 (il' position);  		position += 4;  		break;  	}  	case OperandType.InlineI8: {  		instruction.Operand = BitConverter.ToInt64 (il' position);  		position += 8;  		break;  	}  	case OperandType.InlineNone: {  		instruction.Operand = null;  		break;  	}  	case OperandType.InlineR: {  		instruction.Operand = BitConverter.ToDouble (il' position);  		position += sizeof(Double);  		break;  	}  	case OperandType.InlineString: {  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveString (metadataToken);  		break;  	}  	case OperandType.InlineSwitch: {  		int count = BitConverter.ToInt32 (il' position);  		position += 4;  		int[] casesAddresses = new int[count];  		for (int i = 0; i < count; i++) {  			casesAddresses [i] = BitConverter.ToInt32 (il' position);  			position += 4;  		}  		int[] cases = new int[count];  		for (int i = 0; i < count; i++) {  			cases [i] = position + casesAddresses [i];  		}  		break;  	}  	case OperandType.InlineVar: {  		instruction.Operand = BitConverter.ToUInt16 (il' position);  		position += sizeof(UInt16);  		break;  	}  	case OperandType.ShortInlineBrTarget: {  		instruction.Operand = (sbyte)il [position] + position;  		position++;  		break;  	}  	case OperandType.ShortInlineI: {  		instruction.Operand = (sbyte)il [position];  		position++;  		break;  	}  	case OperandType.ShortInlineR: {  		instruction.Operand = BitConverter.ToSingle (il' position);  		position += sizeof(Single);  		break;  	}  	case OperandType.ShortInlineVar: {  		instruction.Operand = il [position];  		position++;  		break;  	}  	default: {  		throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  	}  	}  	instructions.Add (instruction);  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: while (position < il.Length) {  	OpCode code;  	ushort value = il [position++];  	if (value != 0xfe) {  		code = singleByteOpCodes [value];  	} else {  		value = il [position++];  		code = multiByteOpCodes [value];  		value = (ushort)(value | 0xfe00);  	}  	IlInstruction instruction = new IlInstruction (code) {  		Code = code  	};  	int metadataToken = 0;  	// get the operand of the current operation  	switch (code.OperandType) {  	case OperandType.InlineBrTarget:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		metadataToken += position;  		instruction.Operand = metadataToken;  		break;  	case OperandType.InlineField:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveField (metadataToken);  		} catch (Exception) {  			// if field could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineMethod:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveMethod (metadataToken);  		} catch (Exception) {  			// if method could not be resolved' ignore it.  		}  		if (instruction.Operand == null) {  			try {  				instruction.Operand = module.ResolveMember (metadataToken);  			} catch (Exception) {  				// if member could not be resolved' ignore it.  			}  		}  		break;  	case OperandType.InlineSig:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveSignature (metadataToken);  		break;  	case OperandType.InlineTok:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		try {  			instruction.Operand = module.ResolveType (metadataToken);  		} catch {  			// if type could not be resolved' ignore it.  		}  		// SSS : see what to do here  		break;  	case OperandType.InlineType:  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		// now we call the ResolveType always using the generic attributes type in order  		// to support decompilation of generic methods and classes  		// thanks to the guys from code project who commented on this missing feature  		try {  			if (methodInfo.DeclaringType != null)  				instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  		} catch (Exception) {  			// if type could not be resolved' ignore it.  		}  		break;  	case OperandType.InlineI: {  		instruction.Operand = BitConverter.ToInt32 (il' position);  		position += 4;  		break;  	}  	case OperandType.InlineI8: {  		instruction.Operand = BitConverter.ToInt64 (il' position);  		position += 8;  		break;  	}  	case OperandType.InlineNone: {  		instruction.Operand = null;  		break;  	}  	case OperandType.InlineR: {  		instruction.Operand = BitConverter.ToDouble (il' position);  		position += sizeof(Double);  		break;  	}  	case OperandType.InlineString: {  		metadataToken = BitConverter.ToInt32 (il' position);  		position += 4;  		instruction.Operand = module.ResolveString (metadataToken);  		break;  	}  	case OperandType.InlineSwitch: {  		int count = BitConverter.ToInt32 (il' position);  		position += 4;  		int[] casesAddresses = new int[count];  		for (int i = 0; i < count; i++) {  			casesAddresses [i] = BitConverter.ToInt32 (il' position);  			position += 4;  		}  		int[] cases = new int[count];  		for (int i = 0; i < count; i++) {  			cases [i] = position + casesAddresses [i];  		}  		break;  	}  	case OperandType.InlineVar: {  		instruction.Operand = BitConverter.ToUInt16 (il' position);  		position += sizeof(UInt16);  		break;  	}  	case OperandType.ShortInlineBrTarget: {  		instruction.Operand = (sbyte)il [position] + position;  		position++;  		break;  	}  	case OperandType.ShortInlineI: {  		instruction.Operand = (sbyte)il [position];  		position++;  		break;  	}  	case OperandType.ShortInlineR: {  		instruction.Operand = BitConverter.ToSingle (il' position);  		position += sizeof(Single);  		break;  	}  	case OperandType.ShortInlineVar: {  		instruction.Operand = il [position];  		position++;  		break;  	}  	default: {  		throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  	}  	}  	instructions.Add (instruction);  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType) {  case OperandType.InlineBrTarget:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	metadataToken += position;  	instruction.Operand = metadataToken;  	break;  case OperandType.InlineField:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveField (metadataToken);  	} catch (Exception) {  		// if field could not be resolved' ignore it.  	}  	break;  case OperandType.InlineMethod:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveMethod (metadataToken);  	} catch (Exception) {  		// if method could not be resolved' ignore it.  	}  	if (instruction.Operand == null) {  		try {  			instruction.Operand = module.ResolveMember (metadataToken);  		} catch (Exception) {  			// if member could not be resolved' ignore it.  		}  	}  	break;  case OperandType.InlineSig:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveSignature (metadataToken);  	break;  case OperandType.InlineTok:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveType (metadataToken);  	} catch {  		// if type could not be resolved' ignore it.  	}  	// SSS : see what to do here  	break;  case OperandType.InlineType:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	// now we call the ResolveType always using the generic attributes type in order  	// to support decompilation of generic methods and classes  	// thanks to the guys from code project who commented on this missing feature  	try {  		if (methodInfo.DeclaringType != null)  			instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  	} catch (Exception) {  		// if type could not be resolved' ignore it.  	}  	break;  case OperandType.InlineI: {  	instruction.Operand = BitConverter.ToInt32 (il' position);  	position += 4;  	break;  }  case OperandType.InlineI8: {  	instruction.Operand = BitConverter.ToInt64 (il' position);  	position += 8;  	break;  }  case OperandType.InlineNone: {  	instruction.Operand = null;  	break;  }  case OperandType.InlineR: {  	instruction.Operand = BitConverter.ToDouble (il' position);  	position += sizeof(Double);  	break;  }  case OperandType.InlineString: {  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveString (metadataToken);  	break;  }  case OperandType.InlineSwitch: {  	int count = BitConverter.ToInt32 (il' position);  	position += 4;  	int[] casesAddresses = new int[count];  	for (int i = 0; i < count; i++) {  		casesAddresses [i] = BitConverter.ToInt32 (il' position);  		position += 4;  	}  	int[] cases = new int[count];  	for (int i = 0; i < count; i++) {  		cases [i] = position + casesAddresses [i];  	}  	break;  }  case OperandType.InlineVar: {  	instruction.Operand = BitConverter.ToUInt16 (il' position);  	position += sizeof(UInt16);  	break;  }  case OperandType.ShortInlineBrTarget: {  	instruction.Operand = (sbyte)il [position] + position;  	position++;  	break;  }  case OperandType.ShortInlineI: {  	instruction.Operand = (sbyte)il [position];  	position++;  	break;  }  case OperandType.ShortInlineR: {  	instruction.Operand = BitConverter.ToSingle (il' position);  	position += sizeof(Single);  	break;  }  case OperandType.ShortInlineVar: {  	instruction.Operand = il [position];  	position++;  	break;  }  default: {  	throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  }  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType) {  case OperandType.InlineBrTarget:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	metadataToken += position;  	instruction.Operand = metadataToken;  	break;  case OperandType.InlineField:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveField (metadataToken);  	} catch (Exception) {  		// if field could not be resolved' ignore it.  	}  	break;  case OperandType.InlineMethod:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveMethod (metadataToken);  	} catch (Exception) {  		// if method could not be resolved' ignore it.  	}  	if (instruction.Operand == null) {  		try {  			instruction.Operand = module.ResolveMember (metadataToken);  		} catch (Exception) {  			// if member could not be resolved' ignore it.  		}  	}  	break;  case OperandType.InlineSig:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveSignature (metadataToken);  	break;  case OperandType.InlineTok:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveType (metadataToken);  	} catch {  		// if type could not be resolved' ignore it.  	}  	// SSS : see what to do here  	break;  case OperandType.InlineType:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	// now we call the ResolveType always using the generic attributes type in order  	// to support decompilation of generic methods and classes  	// thanks to the guys from code project who commented on this missing feature  	try {  		if (methodInfo.DeclaringType != null)  			instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  	} catch (Exception) {  		// if type could not be resolved' ignore it.  	}  	break;  case OperandType.InlineI: {  	instruction.Operand = BitConverter.ToInt32 (il' position);  	position += 4;  	break;  }  case OperandType.InlineI8: {  	instruction.Operand = BitConverter.ToInt64 (il' position);  	position += 8;  	break;  }  case OperandType.InlineNone: {  	instruction.Operand = null;  	break;  }  case OperandType.InlineR: {  	instruction.Operand = BitConverter.ToDouble (il' position);  	position += sizeof(Double);  	break;  }  case OperandType.InlineString: {  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveString (metadataToken);  	break;  }  case OperandType.InlineSwitch: {  	int count = BitConverter.ToInt32 (il' position);  	position += 4;  	int[] casesAddresses = new int[count];  	for (int i = 0; i < count; i++) {  		casesAddresses [i] = BitConverter.ToInt32 (il' position);  		position += 4;  	}  	int[] cases = new int[count];  	for (int i = 0; i < count; i++) {  		cases [i] = position + casesAddresses [i];  	}  	break;  }  case OperandType.InlineVar: {  	instruction.Operand = BitConverter.ToUInt16 (il' position);  	position += sizeof(UInt16);  	break;  }  case OperandType.ShortInlineBrTarget: {  	instruction.Operand = (sbyte)il [position] + position;  	position++;  	break;  }  case OperandType.ShortInlineI: {  	instruction.Operand = (sbyte)il [position];  	position++;  	break;  }  case OperandType.ShortInlineR: {  	instruction.Operand = BitConverter.ToSingle (il' position);  	position += sizeof(Single);  	break;  }  case OperandType.ShortInlineVar: {  	instruction.Operand = il [position];  	position++;  	break;  }  default: {  	throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  }  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType) {  case OperandType.InlineBrTarget:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	metadataToken += position;  	instruction.Operand = metadataToken;  	break;  case OperandType.InlineField:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveField (metadataToken);  	} catch (Exception) {  		// if field could not be resolved' ignore it.  	}  	break;  case OperandType.InlineMethod:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveMethod (metadataToken);  	} catch (Exception) {  		// if method could not be resolved' ignore it.  	}  	if (instruction.Operand == null) {  		try {  			instruction.Operand = module.ResolveMember (metadataToken);  		} catch (Exception) {  			// if member could not be resolved' ignore it.  		}  	}  	break;  case OperandType.InlineSig:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveSignature (metadataToken);  	break;  case OperandType.InlineTok:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveType (metadataToken);  	} catch {  		// if type could not be resolved' ignore it.  	}  	// SSS : see what to do here  	break;  case OperandType.InlineType:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	// now we call the ResolveType always using the generic attributes type in order  	// to support decompilation of generic methods and classes  	// thanks to the guys from code project who commented on this missing feature  	try {  		if (methodInfo.DeclaringType != null)  			instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  	} catch (Exception) {  		// if type could not be resolved' ignore it.  	}  	break;  case OperandType.InlineI: {  	instruction.Operand = BitConverter.ToInt32 (il' position);  	position += 4;  	break;  }  case OperandType.InlineI8: {  	instruction.Operand = BitConverter.ToInt64 (il' position);  	position += 8;  	break;  }  case OperandType.InlineNone: {  	instruction.Operand = null;  	break;  }  case OperandType.InlineR: {  	instruction.Operand = BitConverter.ToDouble (il' position);  	position += sizeof(Double);  	break;  }  case OperandType.InlineString: {  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveString (metadataToken);  	break;  }  case OperandType.InlineSwitch: {  	int count = BitConverter.ToInt32 (il' position);  	position += 4;  	int[] casesAddresses = new int[count];  	for (int i = 0; i < count; i++) {  		casesAddresses [i] = BitConverter.ToInt32 (il' position);  		position += 4;  	}  	int[] cases = new int[count];  	for (int i = 0; i < count; i++) {  		cases [i] = position + casesAddresses [i];  	}  	break;  }  case OperandType.InlineVar: {  	instruction.Operand = BitConverter.ToUInt16 (il' position);  	position += sizeof(UInt16);  	break;  }  case OperandType.ShortInlineBrTarget: {  	instruction.Operand = (sbyte)il [position] + position;  	position++;  	break;  }  case OperandType.ShortInlineI: {  	instruction.Operand = (sbyte)il [position];  	position++;  	break;  }  case OperandType.ShortInlineR: {  	instruction.Operand = BitConverter.ToSingle (il' position);  	position += sizeof(Single);  	break;  }  case OperandType.ShortInlineVar: {  	instruction.Operand = il [position];  	position++;  	break;  }  default: {  	throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  }  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType) {  case OperandType.InlineBrTarget:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	metadataToken += position;  	instruction.Operand = metadataToken;  	break;  case OperandType.InlineField:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveField (metadataToken);  	} catch (Exception) {  		// if field could not be resolved' ignore it.  	}  	break;  case OperandType.InlineMethod:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveMethod (metadataToken);  	} catch (Exception) {  		// if method could not be resolved' ignore it.  	}  	if (instruction.Operand == null) {  		try {  			instruction.Operand = module.ResolveMember (metadataToken);  		} catch (Exception) {  			// if member could not be resolved' ignore it.  		}  	}  	break;  case OperandType.InlineSig:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveSignature (metadataToken);  	break;  case OperandType.InlineTok:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveType (metadataToken);  	} catch {  		// if type could not be resolved' ignore it.  	}  	// SSS : see what to do here  	break;  case OperandType.InlineType:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	// now we call the ResolveType always using the generic attributes type in order  	// to support decompilation of generic methods and classes  	// thanks to the guys from code project who commented on this missing feature  	try {  		if (methodInfo.DeclaringType != null)  			instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  	} catch (Exception) {  		// if type could not be resolved' ignore it.  	}  	break;  case OperandType.InlineI: {  	instruction.Operand = BitConverter.ToInt32 (il' position);  	position += 4;  	break;  }  case OperandType.InlineI8: {  	instruction.Operand = BitConverter.ToInt64 (il' position);  	position += 8;  	break;  }  case OperandType.InlineNone: {  	instruction.Operand = null;  	break;  }  case OperandType.InlineR: {  	instruction.Operand = BitConverter.ToDouble (il' position);  	position += sizeof(Double);  	break;  }  case OperandType.InlineString: {  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveString (metadataToken);  	break;  }  case OperandType.InlineSwitch: {  	int count = BitConverter.ToInt32 (il' position);  	position += 4;  	int[] casesAddresses = new int[count];  	for (int i = 0; i < count; i++) {  		casesAddresses [i] = BitConverter.ToInt32 (il' position);  		position += 4;  	}  	int[] cases = new int[count];  	for (int i = 0; i < count; i++) {  		cases [i] = position + casesAddresses [i];  	}  	break;  }  case OperandType.InlineVar: {  	instruction.Operand = BitConverter.ToUInt16 (il' position);  	position += sizeof(UInt16);  	break;  }  case OperandType.ShortInlineBrTarget: {  	instruction.Operand = (sbyte)il [position] + position;  	position++;  	break;  }  case OperandType.ShortInlineI: {  	instruction.Operand = (sbyte)il [position];  	position++;  	break;  }  case OperandType.ShortInlineR: {  	instruction.Operand = BitConverter.ToSingle (il' position);  	position += sizeof(Single);  	break;  }  case OperandType.ShortInlineVar: {  	instruction.Operand = il [position];  	position++;  	break;  }  default: {  	throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  }  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType) {  case OperandType.InlineBrTarget:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	metadataToken += position;  	instruction.Operand = metadataToken;  	break;  case OperandType.InlineField:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveField (metadataToken);  	} catch (Exception) {  		// if field could not be resolved' ignore it.  	}  	break;  case OperandType.InlineMethod:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveMethod (metadataToken);  	} catch (Exception) {  		// if method could not be resolved' ignore it.  	}  	if (instruction.Operand == null) {  		try {  			instruction.Operand = module.ResolveMember (metadataToken);  		} catch (Exception) {  			// if member could not be resolved' ignore it.  		}  	}  	break;  case OperandType.InlineSig:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveSignature (metadataToken);  	break;  case OperandType.InlineTok:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveType (metadataToken);  	} catch {  		// if type could not be resolved' ignore it.  	}  	// SSS : see what to do here  	break;  case OperandType.InlineType:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	// now we call the ResolveType always using the generic attributes type in order  	// to support decompilation of generic methods and classes  	// thanks to the guys from code project who commented on this missing feature  	try {  		if (methodInfo.DeclaringType != null)  			instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  	} catch (Exception) {  		// if type could not be resolved' ignore it.  	}  	break;  case OperandType.InlineI: {  	instruction.Operand = BitConverter.ToInt32 (il' position);  	position += 4;  	break;  }  case OperandType.InlineI8: {  	instruction.Operand = BitConverter.ToInt64 (il' position);  	position += 8;  	break;  }  case OperandType.InlineNone: {  	instruction.Operand = null;  	break;  }  case OperandType.InlineR: {  	instruction.Operand = BitConverter.ToDouble (il' position);  	position += sizeof(Double);  	break;  }  case OperandType.InlineString: {  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveString (metadataToken);  	break;  }  case OperandType.InlineSwitch: {  	int count = BitConverter.ToInt32 (il' position);  	position += 4;  	int[] casesAddresses = new int[count];  	for (int i = 0; i < count; i++) {  		casesAddresses [i] = BitConverter.ToInt32 (il' position);  		position += 4;  	}  	int[] cases = new int[count];  	for (int i = 0; i < count; i++) {  		cases [i] = position + casesAddresses [i];  	}  	break;  }  case OperandType.InlineVar: {  	instruction.Operand = BitConverter.ToUInt16 (il' position);  	position += sizeof(UInt16);  	break;  }  case OperandType.ShortInlineBrTarget: {  	instruction.Operand = (sbyte)il [position] + position;  	position++;  	break;  }  case OperandType.ShortInlineI: {  	instruction.Operand = (sbyte)il [position];  	position++;  	break;  }  case OperandType.ShortInlineR: {  	instruction.Operand = BitConverter.ToSingle (il' position);  	position += sizeof(Single);  	break;  }  case OperandType.ShortInlineVar: {  	instruction.Operand = il [position];  	position++;  	break;  }  default: {  	throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  }  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType) {  case OperandType.InlineBrTarget:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	metadataToken += position;  	instruction.Operand = metadataToken;  	break;  case OperandType.InlineField:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveField (metadataToken);  	} catch (Exception) {  		// if field could not be resolved' ignore it.  	}  	break;  case OperandType.InlineMethod:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveMethod (metadataToken);  	} catch (Exception) {  		// if method could not be resolved' ignore it.  	}  	if (instruction.Operand == null) {  		try {  			instruction.Operand = module.ResolveMember (metadataToken);  		} catch (Exception) {  			// if member could not be resolved' ignore it.  		}  	}  	break;  case OperandType.InlineSig:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveSignature (metadataToken);  	break;  case OperandType.InlineTok:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveType (metadataToken);  	} catch {  		// if type could not be resolved' ignore it.  	}  	// SSS : see what to do here  	break;  case OperandType.InlineType:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	// now we call the ResolveType always using the generic attributes type in order  	// to support decompilation of generic methods and classes  	// thanks to the guys from code project who commented on this missing feature  	try {  		if (methodInfo.DeclaringType != null)  			instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  	} catch (Exception) {  		// if type could not be resolved' ignore it.  	}  	break;  case OperandType.InlineI: {  	instruction.Operand = BitConverter.ToInt32 (il' position);  	position += 4;  	break;  }  case OperandType.InlineI8: {  	instruction.Operand = BitConverter.ToInt64 (il' position);  	position += 8;  	break;  }  case OperandType.InlineNone: {  	instruction.Operand = null;  	break;  }  case OperandType.InlineR: {  	instruction.Operand = BitConverter.ToDouble (il' position);  	position += sizeof(Double);  	break;  }  case OperandType.InlineString: {  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveString (metadataToken);  	break;  }  case OperandType.InlineSwitch: {  	int count = BitConverter.ToInt32 (il' position);  	position += 4;  	int[] casesAddresses = new int[count];  	for (int i = 0; i < count; i++) {  		casesAddresses [i] = BitConverter.ToInt32 (il' position);  		position += 4;  	}  	int[] cases = new int[count];  	for (int i = 0; i < count; i++) {  		cases [i] = position + casesAddresses [i];  	}  	break;  }  case OperandType.InlineVar: {  	instruction.Operand = BitConverter.ToUInt16 (il' position);  	position += sizeof(UInt16);  	break;  }  case OperandType.ShortInlineBrTarget: {  	instruction.Operand = (sbyte)il [position] + position;  	position++;  	break;  }  case OperandType.ShortInlineI: {  	instruction.Operand = (sbyte)il [position];  	position++;  	break;  }  case OperandType.ShortInlineR: {  	instruction.Operand = BitConverter.ToSingle (il' position);  	position += sizeof(Single);  	break;  }  case OperandType.ShortInlineVar: {  	instruction.Operand = il [position];  	position++;  	break;  }  default: {  	throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  }  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType) {  case OperandType.InlineBrTarget:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	metadataToken += position;  	instruction.Operand = metadataToken;  	break;  case OperandType.InlineField:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveField (metadataToken);  	} catch (Exception) {  		// if field could not be resolved' ignore it.  	}  	break;  case OperandType.InlineMethod:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveMethod (metadataToken);  	} catch (Exception) {  		// if method could not be resolved' ignore it.  	}  	if (instruction.Operand == null) {  		try {  			instruction.Operand = module.ResolveMember (metadataToken);  		} catch (Exception) {  			// if member could not be resolved' ignore it.  		}  	}  	break;  case OperandType.InlineSig:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveSignature (metadataToken);  	break;  case OperandType.InlineTok:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveType (metadataToken);  	} catch {  		// if type could not be resolved' ignore it.  	}  	// SSS : see what to do here  	break;  case OperandType.InlineType:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	// now we call the ResolveType always using the generic attributes type in order  	// to support decompilation of generic methods and classes  	// thanks to the guys from code project who commented on this missing feature  	try {  		if (methodInfo.DeclaringType != null)  			instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  	} catch (Exception) {  		// if type could not be resolved' ignore it.  	}  	break;  case OperandType.InlineI: {  	instruction.Operand = BitConverter.ToInt32 (il' position);  	position += 4;  	break;  }  case OperandType.InlineI8: {  	instruction.Operand = BitConverter.ToInt64 (il' position);  	position += 8;  	break;  }  case OperandType.InlineNone: {  	instruction.Operand = null;  	break;  }  case OperandType.InlineR: {  	instruction.Operand = BitConverter.ToDouble (il' position);  	position += sizeof(Double);  	break;  }  case OperandType.InlineString: {  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveString (metadataToken);  	break;  }  case OperandType.InlineSwitch: {  	int count = BitConverter.ToInt32 (il' position);  	position += 4;  	int[] casesAddresses = new int[count];  	for (int i = 0; i < count; i++) {  		casesAddresses [i] = BitConverter.ToInt32 (il' position);  		position += 4;  	}  	int[] cases = new int[count];  	for (int i = 0; i < count; i++) {  		cases [i] = position + casesAddresses [i];  	}  	break;  }  case OperandType.InlineVar: {  	instruction.Operand = BitConverter.ToUInt16 (il' position);  	position += sizeof(UInt16);  	break;  }  case OperandType.ShortInlineBrTarget: {  	instruction.Operand = (sbyte)il [position] + position;  	position++;  	break;  }  case OperandType.ShortInlineI: {  	instruction.Operand = (sbyte)il [position];  	position++;  	break;  }  case OperandType.ShortInlineR: {  	instruction.Operand = BitConverter.ToSingle (il' position);  	position += sizeof(Single);  	break;  }  case OperandType.ShortInlineVar: {  	instruction.Operand = il [position];  	position++;  	break;  }  default: {  	throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  }  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType) {  case OperandType.InlineBrTarget:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	metadataToken += position;  	instruction.Operand = metadataToken;  	break;  case OperandType.InlineField:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveField (metadataToken);  	} catch (Exception) {  		// if field could not be resolved' ignore it.  	}  	break;  case OperandType.InlineMethod:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveMethod (metadataToken);  	} catch (Exception) {  		// if method could not be resolved' ignore it.  	}  	if (instruction.Operand == null) {  		try {  			instruction.Operand = module.ResolveMember (metadataToken);  		} catch (Exception) {  			// if member could not be resolved' ignore it.  		}  	}  	break;  case OperandType.InlineSig:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveSignature (metadataToken);  	break;  case OperandType.InlineTok:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveType (metadataToken);  	} catch {  		// if type could not be resolved' ignore it.  	}  	// SSS : see what to do here  	break;  case OperandType.InlineType:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	// now we call the ResolveType always using the generic attributes type in order  	// to support decompilation of generic methods and classes  	// thanks to the guys from code project who commented on this missing feature  	try {  		if (methodInfo.DeclaringType != null)  			instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  	} catch (Exception) {  		// if type could not be resolved' ignore it.  	}  	break;  case OperandType.InlineI: {  	instruction.Operand = BitConverter.ToInt32 (il' position);  	position += 4;  	break;  }  case OperandType.InlineI8: {  	instruction.Operand = BitConverter.ToInt64 (il' position);  	position += 8;  	break;  }  case OperandType.InlineNone: {  	instruction.Operand = null;  	break;  }  case OperandType.InlineR: {  	instruction.Operand = BitConverter.ToDouble (il' position);  	position += sizeof(Double);  	break;  }  case OperandType.InlineString: {  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveString (metadataToken);  	break;  }  case OperandType.InlineSwitch: {  	int count = BitConverter.ToInt32 (il' position);  	position += 4;  	int[] casesAddresses = new int[count];  	for (int i = 0; i < count; i++) {  		casesAddresses [i] = BitConverter.ToInt32 (il' position);  		position += 4;  	}  	int[] cases = new int[count];  	for (int i = 0; i < count; i++) {  		cases [i] = position + casesAddresses [i];  	}  	break;  }  case OperandType.InlineVar: {  	instruction.Operand = BitConverter.ToUInt16 (il' position);  	position += sizeof(UInt16);  	break;  }  case OperandType.ShortInlineBrTarget: {  	instruction.Operand = (sbyte)il [position] + position;  	position++;  	break;  }  case OperandType.ShortInlineI: {  	instruction.Operand = (sbyte)il [position];  	position++;  	break;  }  case OperandType.ShortInlineR: {  	instruction.Operand = BitConverter.ToSingle (il' position);  	position += sizeof(Single);  	break;  }  case OperandType.ShortInlineVar: {  	instruction.Operand = il [position];  	position++;  	break;  }  default: {  	throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  }  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType) {  case OperandType.InlineBrTarget:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	metadataToken += position;  	instruction.Operand = metadataToken;  	break;  case OperandType.InlineField:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveField (metadataToken);  	} catch (Exception) {  		// if field could not be resolved' ignore it.  	}  	break;  case OperandType.InlineMethod:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveMethod (metadataToken);  	} catch (Exception) {  		// if method could not be resolved' ignore it.  	}  	if (instruction.Operand == null) {  		try {  			instruction.Operand = module.ResolveMember (metadataToken);  		} catch (Exception) {  			// if member could not be resolved' ignore it.  		}  	}  	break;  case OperandType.InlineSig:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveSignature (metadataToken);  	break;  case OperandType.InlineTok:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveType (metadataToken);  	} catch {  		// if type could not be resolved' ignore it.  	}  	// SSS : see what to do here  	break;  case OperandType.InlineType:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	// now we call the ResolveType always using the generic attributes type in order  	// to support decompilation of generic methods and classes  	// thanks to the guys from code project who commented on this missing feature  	try {  		if (methodInfo.DeclaringType != null)  			instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  	} catch (Exception) {  		// if type could not be resolved' ignore it.  	}  	break;  case OperandType.InlineI: {  	instruction.Operand = BitConverter.ToInt32 (il' position);  	position += 4;  	break;  }  case OperandType.InlineI8: {  	instruction.Operand = BitConverter.ToInt64 (il' position);  	position += 8;  	break;  }  case OperandType.InlineNone: {  	instruction.Operand = null;  	break;  }  case OperandType.InlineR: {  	instruction.Operand = BitConverter.ToDouble (il' position);  	position += sizeof(Double);  	break;  }  case OperandType.InlineString: {  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveString (metadataToken);  	break;  }  case OperandType.InlineSwitch: {  	int count = BitConverter.ToInt32 (il' position);  	position += 4;  	int[] casesAddresses = new int[count];  	for (int i = 0; i < count; i++) {  		casesAddresses [i] = BitConverter.ToInt32 (il' position);  		position += 4;  	}  	int[] cases = new int[count];  	for (int i = 0; i < count; i++) {  		cases [i] = position + casesAddresses [i];  	}  	break;  }  case OperandType.InlineVar: {  	instruction.Operand = BitConverter.ToUInt16 (il' position);  	position += sizeof(UInt16);  	break;  }  case OperandType.ShortInlineBrTarget: {  	instruction.Operand = (sbyte)il [position] + position;  	position++;  	break;  }  case OperandType.ShortInlineI: {  	instruction.Operand = (sbyte)il [position];  	position++;  	break;  }  case OperandType.ShortInlineR: {  	instruction.Operand = BitConverter.ToSingle (il' position);  	position += sizeof(Single);  	break;  }  case OperandType.ShortInlineVar: {  	instruction.Operand = il [position];  	position++;  	break;  }  default: {  	throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  }  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType) {  case OperandType.InlineBrTarget:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	metadataToken += position;  	instruction.Operand = metadataToken;  	break;  case OperandType.InlineField:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveField (metadataToken);  	} catch (Exception) {  		// if field could not be resolved' ignore it.  	}  	break;  case OperandType.InlineMethod:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveMethod (metadataToken);  	} catch (Exception) {  		// if method could not be resolved' ignore it.  	}  	if (instruction.Operand == null) {  		try {  			instruction.Operand = module.ResolveMember (metadataToken);  		} catch (Exception) {  			// if member could not be resolved' ignore it.  		}  	}  	break;  case OperandType.InlineSig:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveSignature (metadataToken);  	break;  case OperandType.InlineTok:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveType (metadataToken);  	} catch {  		// if type could not be resolved' ignore it.  	}  	// SSS : see what to do here  	break;  case OperandType.InlineType:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	// now we call the ResolveType always using the generic attributes type in order  	// to support decompilation of generic methods and classes  	// thanks to the guys from code project who commented on this missing feature  	try {  		if (methodInfo.DeclaringType != null)  			instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  	} catch (Exception) {  		// if type could not be resolved' ignore it.  	}  	break;  case OperandType.InlineI: {  	instruction.Operand = BitConverter.ToInt32 (il' position);  	position += 4;  	break;  }  case OperandType.InlineI8: {  	instruction.Operand = BitConverter.ToInt64 (il' position);  	position += 8;  	break;  }  case OperandType.InlineNone: {  	instruction.Operand = null;  	break;  }  case OperandType.InlineR: {  	instruction.Operand = BitConverter.ToDouble (il' position);  	position += sizeof(Double);  	break;  }  case OperandType.InlineString: {  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveString (metadataToken);  	break;  }  case OperandType.InlineSwitch: {  	int count = BitConverter.ToInt32 (il' position);  	position += 4;  	int[] casesAddresses = new int[count];  	for (int i = 0; i < count; i++) {  		casesAddresses [i] = BitConverter.ToInt32 (il' position);  		position += 4;  	}  	int[] cases = new int[count];  	for (int i = 0; i < count; i++) {  		cases [i] = position + casesAddresses [i];  	}  	break;  }  case OperandType.InlineVar: {  	instruction.Operand = BitConverter.ToUInt16 (il' position);  	position += sizeof(UInt16);  	break;  }  case OperandType.ShortInlineBrTarget: {  	instruction.Operand = (sbyte)il [position] + position;  	position++;  	break;  }  case OperandType.ShortInlineI: {  	instruction.Operand = (sbyte)il [position];  	position++;  	break;  }  case OperandType.ShortInlineR: {  	instruction.Operand = BitConverter.ToSingle (il' position);  	position += sizeof(Single);  	break;  }  case OperandType.ShortInlineVar: {  	instruction.Operand = il [position];  	position++;  	break;  }  default: {  	throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  }  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: switch (code.OperandType) {  case OperandType.InlineBrTarget:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	metadataToken += position;  	instruction.Operand = metadataToken;  	break;  case OperandType.InlineField:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveField (metadataToken);  	} catch (Exception) {  		// if field could not be resolved' ignore it.  	}  	break;  case OperandType.InlineMethod:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveMethod (metadataToken);  	} catch (Exception) {  		// if method could not be resolved' ignore it.  	}  	if (instruction.Operand == null) {  		try {  			instruction.Operand = module.ResolveMember (metadataToken);  		} catch (Exception) {  			// if member could not be resolved' ignore it.  		}  	}  	break;  case OperandType.InlineSig:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveSignature (metadataToken);  	break;  case OperandType.InlineTok:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	try {  		instruction.Operand = module.ResolveType (metadataToken);  	} catch {  		// if type could not be resolved' ignore it.  	}  	// SSS : see what to do here  	break;  case OperandType.InlineType:  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	// now we call the ResolveType always using the generic attributes type in order  	// to support decompilation of generic methods and classes  	// thanks to the guys from code project who commented on this missing feature  	try {  		if (methodInfo.DeclaringType != null)  			instruction.Operand = module.ResolveType (metadataToken' methodInfo.DeclaringType.GetGenericArguments ()' methodInfo.GetGenericArguments ());  	} catch (Exception) {  		// if type could not be resolved' ignore it.  	}  	break;  case OperandType.InlineI: {  	instruction.Operand = BitConverter.ToInt32 (il' position);  	position += 4;  	break;  }  case OperandType.InlineI8: {  	instruction.Operand = BitConverter.ToInt64 (il' position);  	position += 8;  	break;  }  case OperandType.InlineNone: {  	instruction.Operand = null;  	break;  }  case OperandType.InlineR: {  	instruction.Operand = BitConverter.ToDouble (il' position);  	position += sizeof(Double);  	break;  }  case OperandType.InlineString: {  	metadataToken = BitConverter.ToInt32 (il' position);  	position += 4;  	instruction.Operand = module.ResolveString (metadataToken);  	break;  }  case OperandType.InlineSwitch: {  	int count = BitConverter.ToInt32 (il' position);  	position += 4;  	int[] casesAddresses = new int[count];  	for (int i = 0; i < count; i++) {  		casesAddresses [i] = BitConverter.ToInt32 (il' position);  		position += 4;  	}  	int[] cases = new int[count];  	for (int i = 0; i < count; i++) {  		cases [i] = position + casesAddresses [i];  	}  	break;  }  case OperandType.InlineVar: {  	instruction.Operand = BitConverter.ToUInt16 (il' position);  	position += sizeof(UInt16);  	break;  }  case OperandType.ShortInlineBrTarget: {  	instruction.Operand = (sbyte)il [position] + position;  	position++;  	break;  }  case OperandType.ShortInlineI: {  	instruction.Operand = (sbyte)il [position];  	position++;  	break;  }  case OperandType.ShortInlineR: {  	instruction.Operand = BitConverter.ToSingle (il' position);  	position += sizeof(Single);  	break;  }  case OperandType.ShortInlineVar: {  	instruction.Operand = il [position];  	position++;  	break;  }  default: {  	throw new ArgumentException (string.Format ("Unknown operand type {0} in supplied IL"' code.OperandType)' nameof (il));  }  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: position += 4;  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: position += 4;  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: position += 4;  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: position += 4;  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: position += 4;  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: position += 4;  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: position += 4;  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: position += 8;  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: position += 4;  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: position += 4;  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	casesAddresses [i] = BitConverter.ToInt32 (il' position);  	position += 4;  }  
Magic Number,PRI.ProductivityExtensions.ReflectionExtensions,Reflectable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Reflectable.cs,GetMethodInstructions,The following statement contains a magic number: position += 4;  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: if (sourceCount == 0)  	return 100;  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: return 100;  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: if (thatCount == 0)  	return -100;  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: return -100;  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: if (sourceCount >= thatCount) {  	if (matches == 0)  		return 100;  	p = matches * 100 / sourceCount;  	return p == 100 ? 0 : p;  }  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: if (sourceCount >= thatCount) {  	if (matches == 0)  		return 100;  	p = matches * 100 / sourceCount;  	return p == 100 ? 0 : p;  }  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: if (sourceCount >= thatCount) {  	if (matches == 0)  		return 100;  	p = matches * 100 / sourceCount;  	return p == 100 ? 0 : p;  }  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: if (matches == 0)  	return 100;  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: return 100;  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: p = matches * 100 / sourceCount;  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: return p == 100 ? 0 : p;  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: if (matches == 0)  	return -100;  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: return -100;  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: p = -matches * 100 / thatCount;  
Magic Number,PRI.ProductivityExtensions.SequenceExtensions,Sequenceable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\SequenceExtensions\Sequenceable.cs,SequenceEquality,The following statement contains a magic number: return p == 100 ? 0 : p;  
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,EndOfDay,The following statement contains a magic number: return new DateTime (date.Year' date.Month' date.Day' 23' 59' 59' 999);  
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,EndOfDay,The following statement contains a magic number: return new DateTime (date.Year' date.Month' date.Day' 23' 59' 59' 999);  
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,EndOfDay,The following statement contains a magic number: return new DateTime (date.Year' date.Month' date.Day' 23' 59' 59' 999);  
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,EndOfDay,The following statement contains a magic number: return new DateTime (date.Year' date.Month' date.Day' 23' 59' 59' 999);  
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,RoundToHours,The following statement contains a magic number: if (timeSpan.Minutes >= 30) {  	rounded = rounded + 1.Hours ();  }  
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,RoundToMinutes,The following statement contains a magic number: if (timeSpan.Seconds >= 30) {  	rounded = rounded + 1.Minutes ();  }  
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,RoundToSeconds,The following statement contains a magic number: if (timeSpan.Milliseconds >= 500) {  	rounded = rounded + 1.Seconds ();  }  
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,Million,The following statement contains a magic number: return value * 1000000;  
Magic Number,PRI.ProductivityExtensions.TemporalExtensions,Temporalable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\TemporalExtensions\Temporalable.cs,Thousand,The following statement contains a magic number: return value * 1000;  
Missing Default,PRI.ProductivityExtensions.ReflectionExtensions,Typeable,D:\newReposJune17\peteraritchie_ProductivityExtensions\src\geschikt\Reflection\Typeable.cs,GetDefaultValue,The following switch statement is missing a default case: switch (sourceType.Name) {  case "String":  	toReturn = string.Empty;  	break;  case "Byte[]":  	toReturn = new byte[0];  	break;  }  
