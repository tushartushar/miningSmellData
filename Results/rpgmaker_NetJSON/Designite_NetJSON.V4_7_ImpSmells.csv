Implementation smell,Namespace,Class,File,Method,Description
Long Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateFastObjectToString,The method has 125 lines of code.
Long Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeBuilder,The method has 130 lines of code.
Long Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,ReadStringToEnumFor,The method has 104 lines of code.
Long Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteDeserializeMethodFor,The method has 109 lines of code.
Long Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteSerializeMethodFor,The method has 321 lines of code.
Long Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteDictionary,The method has 122 lines of code.
Long Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WritePropertiesFor,The method has 226 lines of code.
Long Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateExtractObject,The method has 111 lines of code.
Long Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,DecodeJSONString,The method has 105 lines of code.
Long Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeSetValueFor,The method has 149 lines of code.
Long Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateCreateListFor,The method has 151 lines of code.
Long Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The method has 422 lines of code.
Long Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictStringType,The method has 192 lines of code.
Complex Method,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,Cyclomatic complexity of the method is 11
Complex Method,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,Cyclomatic complexity of the method is 22
Complex Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,ReadStringToEnumFor,Cyclomatic complexity of the method is 25
Complex Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteEnumToStringForWithInt,Cyclomatic complexity of the method is 16
Complex Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteEnumToStringForWithString,Cyclomatic complexity of the method is 10
Complex Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteSerializeMethodFor,Cyclomatic complexity of the method is 38
Complex Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteDictionary,Cyclomatic complexity of the method is 11
Complex Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WritePropertiesFor,Cyclomatic complexity of the method is 17
Complex Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,LoadDefaultValueByType,Cyclomatic complexity of the method is 16
Complex Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,DecodeJSONString,Cyclomatic complexity of the method is 24
Complex Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateExtractValueFor,Cyclomatic complexity of the method is 9
Complex Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateChangeTypeFor,Cyclomatic complexity of the method is 24
Complex Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeSetValueFor,Cyclomatic complexity of the method is 19
Complex Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,Cyclomatic complexity of the method is 21
Complex Method,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictStringType,Cyclomatic complexity of the method is 12
Complex Method,NetJSON.Internals,TupleContainer,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,StringToDate,Cyclomatic complexity of the method is 17
Complex Method,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,SkipProperty,Cyclomatic complexity of the method is 12
Complex Method,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,GetNonStringValue,Cyclomatic complexity of the method is 11
Complex Method,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,Cyclomatic complexity of the method is 12
Complex Method,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,Cyclomatic complexity of the method is 22
Complex Method,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,FlagEnumToString,Cyclomatic complexity of the method is 9
Long Parameter List,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,DefineMethodEx,The method has 5 parameters. Parameters: builder' methodName' methodAttribute' returnType' parameterTypes
Long Parameter List,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WritePropertyForType,The method has 10 parameters. Parameters: typeBuilder' il' hasValue' counter' name' propType' propValue' skipDefault' nullable' hasNullableValue
Long Parameter List,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,ILFixedWhile,The method has 7 parameters. Parameters: il' whileAction' needBreak' returnAction' beforeAction' beginIndexIf' endIndexIf
Long Parameter List,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateChangeTypeFor,The method has 6 parameters. Parameters: typeBuilder' type' il' value' settings' originalType
Long Parameter List,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeSetValueFor,The method has 5 parameters. Parameters: typeBuilder' type' isTypeValueType' Optimized' il
Long Parameter List,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateCreateListForNonStringBased,The method has 7 parameters. Parameters: typeBuilder' il' elementType' settings' obj' addMethod' current
Long Parameter List,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateCreateListForStringBased,The method has 10 parameters. Parameters: typeBuilder' il' elementType' isStringType' settings' obj' addMethod' current' ptr' bLabel
Long Parameter List,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictNonStringType,The method has 12 parameters. Parameters: typeBuilder' il' settings' startIndex' keyType' valueType' isKeyValuePair' isExpandoObject' obj' dictSetItem' current' ptr
Long Parameter List,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictStringType,The method has 23 parameters. Parameters: typeBuilder' type' il' settings' foundQuote' prev' startIndex' quotes' isDict' keyType' valueType' isKeyValuePair' isExpandoObject' isTuple' tupleArguments' tupleCount' obj' isTypeValueType' tupleCountLocal' dictSetItem' current' ptr' startLoop
Long Parameter List,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTupleConvert,The method has 7 parameters. Parameters: typeBuilder' tupleIndex' il' tupleArguments' obj' tupleCountLocal' settings
Long Parameter List,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IsInRange,The method has 5 parameters. Parameters: ptr' index' offset' key' settings
Long Identifier,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeBuilder,The length of the parameter serializeWithTextWriterMethodWithSettings is 41.
Long Identifier,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeBuilder,The length of the parameter deserializeWithReaderMethodWithSettings is 39.
Long Identifier,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WritePropertiesFor,The length of the parameter skipDefaultValueTrueAndHasValueLabel is 36.
Long Identifier,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictNonStringType,The length of the parameter startIndexGreaterIsEndOfCharLabel is 33.
Long Identifier,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _getTypeIdentifierInstanceMethod is 32.
Long Identifier,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _settingsUseStringOptimization is 30.
Long Identifier,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _registeredCustomSerializerMethods is 34.
Long Identifier,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _registeredCustomDeserializerMethods is 36.
Long Identifier,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _readDeserializeMethodBuilders is 30.
Long Identifier,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _writeEnumToStringMethodBuilders is 32.
Long Identifier,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _readEnumToStringMethodBuilders is 31.
Long Identifier,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _customDeserializerForNetJSONStringReaders is 42.
Long Identifier,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter NET_JSON_GENERATED_ASSEMBLY_NAME is 32.
Long Identifier,NetJSON,DynamicNetJSONSerializer<T>,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _DeserializeTextReaderWithSettings is 34.
Long Identifier,NetJSON,DynamicNetJSONSerializer<T>,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _SerializeTextWriterWithSettings is 32.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GetTypeProperties,The length of the statement  "                        props = props.Union(key.GetFields(PropertyBinding).Where(x => GetCanSerialize(x)).Select(x => new NetJSONMemberInfo { Member = x' Attribute = x.GetCustomAttributes(_netjsonPropertyType' true).OfType<NetJSONPropertyAttribute>().FirstOrDefault() ?? GetSerializeAs(x) })); " is 269.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GetTypeProperties,The length of the statement  "                if (result.Where(x => x.Attribute != null).Any(x => x.Attribute.Name.IsNullOrWhiteSpace() || x.Attribute.Name.Contains(" "))) " is 125.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GetTypeProperties,The length of the statement  "                    if (result.Where(x => x.Attribute != null).Any(x => string.IsNullOrWhiteSpace(x.Attribute.Name) || x.Attribute.Name.Contains(" "))) " is 131.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,NeedQuotes,The length of the statement  "            return type == _stringType || type == _charType || type == _guidType || type == _timeSpanType || ((type == _dateTimeType || type == _dateTimeOffsetType) && settings.DateFormat != NetJSONDateFormat.EpochTime) || type == _byteArrayType || (settings.UseEnumString && type.GetTypeInfo().IsEnum); " is 291.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateAssemblyBuilder,The length of the statement  "                        _assembly.SetCustomAttribute(new CustomAttributeBuilder(typeof(CompilationRelaxationsAttribute).GetConstructor(new[] { _intType })' new object[] { 8 })); " is 153.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateAssemblyBuilder,The length of the statement  "                        _assembly.SetCustomAttribute(new CustomAttributeBuilder(typeof(SecurityRulesAttribute).GetConstructor(new[] { typeof(SecurityRuleSet) })'  " is 137.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateAssemblyBuilderNoShare,The length of the statement  "            assembly.SetCustomAttribute(new CustomAttributeBuilder(typeof(CompilationRelaxationsAttribute).GetConstructor(new[] { _intType })' new object[] { 8 })); " is 152.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,Fix,The length of the statement  "                    var value = key.Replace(quoteText' string.Empty).Replace(ArrayLiteral' ArrayStr).Replace(AnonymousBracketStr' string.Empty); " is 124.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,ReadStringToEnumFor,The length of the statement  "                    (x.Attr.GetCustomAttributes(typeof(NetJSONPropertyAttribute)' true).FirstOrDefault() as NetJSONPropertyAttribute) : null " is 120.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteEnumToStringForWithString,The length of the statement  "                    (x.Attr.GetCustomAttributes(typeof(NetJSONPropertyAttribute)' true).FirstOrDefault() as NetJSONPropertyAttribute) : null  }).ToArray(); " is 135.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteSerializeMethodFor,The length of the statement  "                needQuote = needQuote && (type == _stringType || type == _charType || type == _guidType || type == _timeSpanType || type == _byteArrayType); " is 140.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GetIncludedTypeTypes,The length of the statement  "                    var attrs = type.GetTypeInfo().GetCustomAttributes(typeof(NetJSONKnownTypeAttribute)' false).OfType<NetJSONKnownTypeAttribute>(); " is 129.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GetIncludedTypeTypes,The length of the statement  "                                types.AddRange(asm.GetTypes().Where(x => x.GetTypeInfo().IsSubclassOf(type) || x.GetTypeInfo().GetInterfaces().Any(i => i == type))); " is 133.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteDictionary,The length of the statement  "                        throw new InvalidOperationException(String.Format("Type {0} must be a validate dictionary type such as IDictionary<Key'Value>"' type.FullName)); " is 144.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteDictionary,The length of the statement  "                    throw new InvalidOperationException(String.Format("Type {0} must be a validate dictionary type such as IDictionary<Key'Value>"' type.FullName)); " is 144.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteDictionary,The length of the statement  "            var enumeratorType = _enumeratorType.MakeGenericType(keyValuePairType);//_genericDictionaryEnumerator.MakeGenericType(keyType' valueType); " is 138.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WritePropertiesFor,The length of the statement  "                    WritePropertyForType(typeBuilder' il' hasValue' counter' nameLocal' propType' propValue' true' isNullable' hasNullableValue); " is 125.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WritePropertiesFor,The length of the statement  "                    WritePropertyForType(typeBuilder' il' hasValue' counter' nameLocal' propType' propValue' false' isNullable' hasNullableValue); " is 126.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WritePropertiesFor,The length of the statement  "                        WritePropertyForType(typeBuilder' il' hasValue' counter' nameLocal' propType' propValue' true' isNullable' hasNullableValue); " is 125.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,Serialize,The length of the statement  "                    var method = new DynamicMethod(name' _stringType' new[] { _objectType' _settingsType }' restrictedSkipVisibility: true); " is 120.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,Deserialize,The length of the statement  "                    var method = new DynamicMethod(name' _objectType' new[] { _stringType' _settingsType }' restrictedSkipVisibility: true); " is 120.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,DecodeJSONString,The length of the statement  "                        if (next != ''' && next != ' ' && next != ':' && next != '\n' && next != '\r' && next != '\t' && next != ']' && next != '}' && next != '\0') " is 140.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,InvokeCustomDeserializerForReader,The length of the statement  "                    var meth = new DynamicMethod(Guid.NewGuid().ToString("N")' _objectType' new Type[] { _netjsonStringReaderType' _settingsType }' restrictedSkipVisibility: true); " is 160.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,InvokeCustomDeserializerForReader,The length of the statement  "                    return meth.CreateDelegate(typeof(Func<NetJSONStringReader' NetJSONSettings' object>)) as Func<NetJSONStringReader' NetJSONSettings' object>; " is 141.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateSetValueFor,The length of the statement  "                _voidType' new[] { _charPtrType' _intType.MakeByRefType()' isTypeValueType ? type.MakeByRefType() : type' _stringType' _settingsType }); " is 136.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateCreateListFor,The length of the statement  "            var isCollectionType = !isArray && !_listType.IsAssignableFrom(type) && !(type.Name == IEnumerableStr) && !(type.Name == IListStr) && !(type.Name == ICollectionStr) && !(type.Name == IReadOnlyCollectionStr) && !(type.Name == IReadOnlyListStr); " is 243.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateCreateListFor,The length of the statement  "                    GenerateCreateListForStringBased(typeBuilder' il' elementType' isStringType' settings' obj' addMethod' current' ptr' bLabel); " is 125.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,IsListType,The length of the statement  "                ((interfaceType = type.GetTypeInfo().GetInterface(ICollectionStr)) != null && interfaceType.GetGenericArguments()[0].Name != KeyValueStr) || " is 140.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,IsListType,The length of the statement  "				((interfaceType = type.GetTypeInfo().GetInterface(IEnumerableStr)) != null && interfaceType.GetGenericArguments()[0].Name != KeyValueStr)); " is 139.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,IsDictionaryType,The length of the statement  "                || ((interfaceType = type.GetTypeInfo().GetInterface(IEnumerableStr)) != null && interfaceType.GetGenericArguments()[0].Name == KeyValueStr); " is 141.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The length of the statement  "                        throw new InvalidOperationException(String.Format("Type {0} must be a validate dictionary type such as IDictionary<Key'Value>"' type.FullName)); " is 144.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The length of the statement  "                GenerateGetClassOrDictStringType(typeBuilder' type' il' settings' foundQuote' prev' startIndex' quotes' isDict' keyType' valueType' isKeyValuePair' isExpandoObject' isTuple' tupleArguments' tupleCount' obj' isTypeValueType' tupleCountLocal' dictSetItem' current' ptr' startLoop); " is 279.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The length of the statement  "                    GenerateGetClassOrDictNonStringType(typeBuilder' il' settings' startIndex' keyType' valueType' isKeyValuePair' isExpandoObject' obj' dictSetItem' current' ptr); " is 160.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The length of the statement  "                    var toTupleMethod = _tupleContainerType.GetMethods().FirstOrDefault(x => x.Name == ToTupleStr && x.GetGenericArguments().Length == tupleCount); " is 143.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The length of the statement  "                        var paramProps = props.Where(x => parameters.Any(y => y.Name.Equals(x.Member.Name' StringComparison.OrdinalIgnoreCase))); " is 121.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The length of the statement  "                        var excludedParams = props.Where(x => !parameters.Any(y => y.Name.Equals(x.Member.Name' StringComparison.OrdinalIgnoreCase))); " is 126.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictNonStringType,The length of the statement  "                il.Emit(OpCodes.Newobj' _genericKeyValuePairType.MakeGenericType(keyType' valueType).GetConstructor(new[] { keyType' valueType })); " is 131.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictStringType,The length of the statement  "                    il.Emit(OpCodes.Newobj' _genericKeyValuePairType.MakeGenericType(keyType' valueType).GetConstructor(new[] { keyType' valueType })); " is 131.
Long Statement,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,IsStringBasedType,The length of the statement  "            return type == _stringType || type == _charType || type == _typeType || type == _timeSpanType || type == _byteArrayType || type == _guidType; " is 141.
Long Statement,NetJSON,DynamicNetJSONSerializer<T>,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,CreateDeserializerWithTextReaderSettings,The length of the statement  "                var meth = new DynamicMethod("DeserializeValueTextReaderSettings"' ObjType' new[] { _textReaderType' _settingsType }' ManifestModule' true); " is 140.
Long Statement,NetJSON,DynamicNetJSONSerializer<T>,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,CreateDeserializerWithSettings,The length of the statement  "                var meth = new DynamicMethod("DeserializeValueSettings"' ObjType' new[] { _stringType' _settingsType }' ManifestModule' true); " is 126.
Long Statement,NetJSON,DynamicNetJSONSerializer<T>,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,CreateSerializerWithSettings,The length of the statement  "                var meth = new DynamicMethod("SerializeValueSettings"' _stringType' new[] { ObjType' _settingsType }' ManifestModule' true); " is 124.
Long Statement,NetJSON,DynamicNetJSONSerializer<T>,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,CreateSerializerWithTextWriter,The length of the statement  "                var meth = new DynamicMethod("SerializeValueTextWriter"' _voidType' new[] { typeof(T)' _textWriterType }' ManifestModule' true); " is 128.
Long Statement,NetJSON,DynamicNetJSONSerializer<T>,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,CreateSerializerWithTextWriterSettings,The length of the statement  "                var meth = new DynamicMethod("SerializeValueTextWriterSettings"' _voidType' new[] { ObjType' _textWriterType' _settingsType }' ManifestModule' true); " is 149.
Long Statement,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,StringToDate,The length of the statement  "					offsetText = utcOffsetText.Substring(1' utcOffsetText.Length - 1).Replace(":"' string.Empty).Replace("Z"' string.Empty); " is 120.
Long Statement,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,DateToISOFormat,The length of the statement  "			int totalSeconds = (int)(date.Ticks - (Math.Floor((decimal)date.Ticks / TimeSpan.TicksPerSecond) * TimeSpan.TicksPerSecond)); " is 125.
Long Statement,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,DateToISOFormat,The length of the statement  "			.Append('-').Append(day < 10 ? "0" : string.Empty).Append(IntToStr(day)).Append('T').Append(hour < 10 ? "0" : string.Empty).Append(IntToStr(hour)).Append(':') " is 158.
Long Statement,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,DateToISOFormat,The length of the statement  "				value.Append(offset.Ticks >= 0 ? '+' : '-').Append(hours < 10 ? "0" : string.Empty).Append(IntToStr(hours)).Append(minutes < 10 ? "0" : string.Empty).Append(IntToStr(minutes)); " is 176.
Long Statement,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,DateToString,The length of the statement  "			var offsetText = timeZoneFormat == NetJSONTimeZoneFormat.Local ? (string.Concat(offset.Ticks >= 0 ? "+" : "-"' hours < 10 ? "0" : string.Empty' " is 143.
Complex Conditional,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,LoadDefaultValueByType,The conditional expression  "type == _sbyteType || type == _byteType || type == typeof(short) || type == typeof(ushort)"  is complex.
Complex Conditional,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,DecodeJSONString,The conditional expression  "next != ''' && next != ' ' && next != ':' && next != '\n' && next != '\r' && next != '\t' && next != ']' && next != '}' && next != '\0'"  is complex.
Complex Conditional,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,ThrowIfInvalidJSON,The conditional expression  "lastChr != '\n' && lastChr != '\r' && lastChr != '\t' && lastChr != ' '"  is complex.
Complex Conditional,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,SkipProperty,The conditional expression  "current != ' ' && current != ':' && current != '\n' && current != '\r' && current != '\t'"  is complex.
Complex Conditional,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,SkipProperty,The conditional expression  "(current == '{' && bchar == '{') || (current == '[' && bchar == '[')"  is complex.
Complex Conditional,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,SkipProperty,The conditional expression  "(current == '}' && echar == '}') || (current == ']' && echar == ']')"  is complex.
Complex Conditional,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,GetNonStringValue,The conditional expression  "current == ''' || current == ']' || current == '}' || current == '\0'"  is complex.
Complex Conditional,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,GetNonStringValue,The conditional expression  "!(((int)current) >= 48 && ((int)current) <= 57) && current != '-' && current != '.'"  is complex.
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: (((int)dmem) & 2) != 0
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 2)) = *((int*)(smem + 2));
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 2)) = *((int*)(smem + 2));
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 4)) = *((int*)(smem + 4));
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 4)) = *((int*)(smem + 4));
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 6)) = *((int*)(smem + 6));
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 6)) = *((int*)(smem + 6));
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: dmem += 8;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: smem += 8;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: charCount -= 8;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: charCount >= 8
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 2)) = *((int*)(smem + 2));
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 2)) = *((int*)(smem + 2));
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: dmem += 4;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: smem += 4;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: (charCount & 4) != 0
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: dmem += 2;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: smem += 2;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: (charCount & 2) != 0
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: return 10;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: return 19 + ((aI >= 10000000000000000000UL) ? 1 : 0);
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: return 19 + ((aI >= 10000000000000000000UL) ? 1 : 0);
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: ushort tmpShort = aShort > 9999 ? (ushort)(aShort / 10) : aShort;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: ushort tmpShort = aShort > 9999 ? (ushort)(aShort / 10) : aShort;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: tmpShort >= 1000 && tmpShort <= 9999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: tmpShort >= 1000 && tmpShort <= 9999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: char tmpRem = (char)(aShort % 10);
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa_core,The following statement contains a magic number: targetPtr -= 4;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa_core,The following statement contains a magic number: memcpy(targetPtr' cstItoa + ATOI_TAB_SZ_LOG * (anInt % ATOI_TAB_SZ)' 4);
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa_core,The following statement contains a magic number: anInt >= 100 && anInt <= 999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa_core,The following statement contains a magic number: anInt >= 100 && anInt <= 999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: anInt >= 1000 && anInt <= 9999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: anInt >= 1000 && anInt <= 9999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: anInt >= 100 && anInt <= 999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: anInt >= 100 && anInt <= 999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_core,The following statement contains a magic number: anInt >= 100 && anInt <= 999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_core,The following statement contains a magic number: anInt >= 100 && anInt <= 999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_general,The following statement contains a magic number: uint tmpInt = anInt / 10000;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_general,The following statement contains a magic number: anInt < 100000000
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_general,The following statement contains a magic number: memcpy(aBuf' cstItoa + (anInt % 10000) * ATOI_TAB_SZ_LOG' 4);
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_general,The following statement contains a magic number: memcpy(aBuf' cstItoa + (anInt % 10000) * ATOI_TAB_SZ_LOG' 4);
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_general,The following statement contains a magic number: return aBuf + 4;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2,The following statement contains a magic number: anInt >= 1000 && anInt <= 9999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2,The following statement contains a magic number: anInt >= 1000 && anInt <= 9999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa_general,The following statement contains a magic number: aBuf -= 4;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa_general,The following statement contains a magic number: memcpy(aBuf' cstItoa + ATOI_TAB_SZ_LOG * (uint)(aLL % ATOI_TAB_SZ)' 4);
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa,The following statement contains a magic number: aLL >= 1000 && aLL <= 9999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa,The following statement contains a magic number: aLL >= 1000 && aLL <= 9999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_core,The following statement contains a magic number: aLL >= 100 && aLL <= 999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_core,The following statement contains a magic number: aLL >= 100 && aLL <= 999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_general,The following statement contains a magic number: ulong tmpLL = aLL / 10000;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_general,The following statement contains a magic number: aLL < 100000000
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_general,The following statement contains a magic number: memcpy(aBuf' cstItoa + (aLL % 10000) * ATOI_TAB_SZ_LOG' 4);
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_general,The following statement contains a magic number: memcpy(aBuf' cstItoa + (aLL % 10000) * ATOI_TAB_SZ_LOG' 4);
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_general,The following statement contains a magic number: return aBuf + 4;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2,The following statement contains a magic number: aLL >= 1000 && aLL <= 9999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2,The following statement contains a magic number: aLL >= 1000 && aLL <= 9999
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa4,The following statement contains a magic number: int rem = (int)(aLL % 10);
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa4,The following statement contains a magic number: aLL /= 10;
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ultoa,The following statement contains a magic number: char* buf = stackalloc char[21];
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ltoa,The following statement contains a magic number: char* buf = stackalloc char[20];
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: char* buf = stackalloc char[20];
Magic Number,NetJSON,IntUtility,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,itoa,The following statement contains a magic number: char* buf = stackalloc char[11];
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: (((int)dmem) & 2) != 0
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 2)) = *((int*)(smem + 2));
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 2)) = *((int*)(smem + 2));
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 4)) = *((int*)(smem + 4));
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 4)) = *((int*)(smem + 4));
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 6)) = *((int*)(smem + 6));
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 6)) = *((int*)(smem + 6));
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: dmem += 8;
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: smem += 8;
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: charCount -= 8;
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: charCount >= 8
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 2)) = *((int*)(smem + 2));
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: *((int*)(dmem + 2)) = *((int*)(smem + 2));
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: dmem += 4;
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: smem += 4;
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: (charCount & 4) != 0
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: dmem += 2;
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: smem += 2;
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: (charCount & 2) != 0
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateAssemblyBuilder,The following statement contains a magic number: _assembly.SetCustomAttribute(new CustomAttributeBuilder(typeof(CompilationRelaxationsAttribute).GetConstructor(new[] { _intType })' new object[] { 8 }));
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateAssemblyBuilderNoShare,The following statement contains a magic number: assembly.SetCustomAttribute(new CustomAttributeBuilder(typeof(CompilationRelaxationsAttribute).GetConstructor(new[] { _intType })' new object[] { 8 }));
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,PrettifyJSON,The following statement contains a magic number: var horizontals = new int[10000];
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,PrettifyJSON,The following statement contains a magic number: switch (c) {                          case '{':                          case '[':                              sb.Append(c);                              if (quote == 0)                              {                                  hrIndex++;                                  horizontals[hrIndex] = horizontal;                                  @return = true;                              }                              break;                          case '}':                          case ']':                              if (quote == 0)                              {                                  @return = false;                                  sb.Append('\n');                                  horizontal = horizontals[hrIndex];                                  hrIndex--;                                  for (var i = 0; i < horizontal; i++)                                  {                                      sb.Append(' ');                                  }                              }                              sb.Append(c);                              break;                          case ''':                              sb.Append(c);                              if (quote == 0)                              {                                  @return = true;                              }                              break;                          default:                              if (@return) {                                  @return = false;                                  sb.Append('\n');                                  horizontal = horizontals[hrIndex] + 1;                                  for (var i = 0; i < horizontal; i++) {                                      sb.Append(' ');                                  }                              }                              var escaped = *(ptr - 2) == '\\';                              if (c == '"' && !escaped)                              {                                  quote++;                                  quote %= 2;                              }                              sb.Append(c);                              break;                      }
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,PrettifyJSON,The following statement contains a magic number: switch (c) {                          case '{':                          case '[':                              sb.Append(c);                              if (quote == 0)                              {                                  hrIndex++;                                  horizontals[hrIndex] = horizontal;                                  @return = true;                              }                              break;                          case '}':                          case ']':                              if (quote == 0)                              {                                  @return = false;                                  sb.Append('\n');                                  horizontal = horizontals[hrIndex];                                  hrIndex--;                                  for (var i = 0; i < horizontal; i++)                                  {                                      sb.Append(' ');                                  }                              }                              sb.Append(c);                              break;                          case ''':                              sb.Append(c);                              if (quote == 0)                              {                                  @return = true;                              }                              break;                          default:                              if (@return) {                                  @return = false;                                  sb.Append('\n');                                  horizontal = horizontals[hrIndex] + 1;                                  for (var i = 0; i < horizontal; i++) {                                      sb.Append(' ');                                  }                              }                              var escaped = *(ptr - 2) == '\\';                              if (c == '"' && !escaped)                              {                                  quote++;                                  quote %= 2;                              }                              sb.Append(c);                              break;                      }
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,Fix,The following statement contains a magic number: return _fixes.GetOrAdd(name' key => {                  lock (GetDictLockObject("FixName")) {                      var index = key.IndexOf(CarrotQuoteChar' StringComparison.OrdinalIgnoreCase);                      var quoteText = index > -1 ? key.Substring(index' 2) : CarrotQuoteChar;                      var value = key.Replace(quoteText' string.Empty).Replace(ArrayLiteral' ArrayStr).Replace(AnonymousBracketStr' string.Empty);                      if (value.Contains(CarrotQuoteChar))                          value = Fix(value);                      return value;                  }              });
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeSetValueFor,The following statement contains a magic number: il.Emit(OpCodes.Ldarg' 4);
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeSetValueFor,The following statement contains a magic number: il.Emit(OpCodes.Ldarg' 4);
Magic Number,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The following statement contains a magic number: ILFixedWhile(il' whileAction: (msil' current' ptr' startLoop' bLabel) => {                    //il.Emit(OpCodes.Ldloc' current);                  //il.Emit(OpCodes.Ldc_I4' (int)' ');                  //il.Emit(OpCodes.Beq' countLabel);                    il.Emit(OpCodes.Ldc_I4_0);                  il.Emit(OpCodes.Stloc' isTag);                    //if current != '{' throw exception                  il.Emit(OpCodes.Ldc_I4_0);                  il.Emit(OpCodes.Ldloc' count);                  il.Emit(OpCodes.Bne_Un' isNotDictOrClass);                    il.Emit(OpCodes.Ldc_I4' (int)'{');                  il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Beq' isNotDictOrClass);                      // ignore whitespace and ":"                  il.Emit(OpCodes.Ldc_I4' (int)' ');                  il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Beq' isNotDictOrClassStartChar);                    il.Emit(OpCodes.Ldc_I4' (int)':');                  il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Beq' isNotDictOrClassStartChar);                    il.Emit(OpCodes.Ldc_I4' (int)'n');                  il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Beq' isNotDictOrClassStartChar);                    il.Emit(OpCodes.Newobj' _typeMismatchExceptionCtor);                  il.Emit(OpCodes.Throw);                    il.MarkLabel(isNotDictOrClassStartChar);                    il.MarkLabel(isNotDictOrClass);                      //if (count == 0 && current == 'n') {                  //    index += 3;                  //    return null;                  //}                  il.Emit(OpCodes.Ldc_I4_0);                  il.Emit(OpCodes.Ldloc' count);                  il.Emit(OpCodes.Bne_Un' isNullObjectLabel);                    il.Emit(OpCodes.Ldc_I4' (int)'n');                  il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Bne_Un' isNullObjectLabel);                    IncrementIndexRef(il' count: 3);                    if (isTypeValueType) {                      var nullLocal = il.DeclareLocal(type);                        il.Emit(OpCodes.Ldloca' nullLocal);                      il.Emit(OpCodes.Initobj' type);                        il.Emit(OpCodes.Ldloc' nullLocal);                  } else {                      il.Emit(OpCodes.Ldnull);                  }                    if (isNullable)                  {                      il.Emit(OpCodes.Newobj' _nullableType.MakeGenericType(type).GetConstructor(new[] { type }));                  }                    il.Emit(OpCodes.Ret);                    il.MarkLabel(isNullObjectLabel);                      //current == '{' || current == '}'                  //il.Emit(OpCodes.Ldloc' current);                  //il.Emit(OpCodes.Call' _isCharTag);                  //il.Emit(OpCodes.Brfalse' openCloseBraceLabel);                                      var currentisCharTagLabel = il.DefineLabel();                  var countCheckLabel = il.DefineLabel();                    //current == '{' || current == '}';                    il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Ldc_I4' (int)'{');                  il.Emit(OpCodes.Beq' currentisCharTagLabel);                    il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Ldc_I4' (int)'}');                  il.Emit(OpCodes.Bne_Un' openCloseBraceLabel);                  il.MarkLabel(currentisCharTagLabel);                                    //quotes == 0                  il.Emit(OpCodes.Ldc_I4_0);                  il.Emit(OpCodes.Ldloc' quotes);                  il.Emit(OpCodes.Bne_Un' openCloseBraceLabel);                    //isTag = true                  il.Emit(OpCodes.Ldc_I4_1);                  il.Emit(OpCodes.Stloc' isTag);                    il.MarkLabel(openCloseBraceLabel);                    //if(isTag == true)                  il.Emit(OpCodes.Ldloc' isTag);                  il.Emit(OpCodes.Brfalse' isTagLabel);                    //count++                  il.Emit(OpCodes.Ldloc' count);                  il.Emit(OpCodes.Ldc_I4_1);                  il.Emit(OpCodes.Add);                  il.Emit(OpCodes.Stloc' count);                    il.MarkLabel(isTagLabel);                      //if(count > 0 && flag == false && quoteCount == 0 && char == ':')                  //Err' No quotes was found                  il.Emit(OpCodes.Ldloc' count);                  il.Emit(OpCodes.Ldc_I4_0);                  il.Emit(OpCodes.Ble' countCheckLabel);                  il.Emit(OpCodes.Ldloc' isTag);                  il.Emit(OpCodes.Brtrue' countCheckLabel);                  il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Ldc_I4' (int)':');                  il.Emit(OpCodes.Bne_Un' countCheckLabel);                  il.Emit(OpCodes.Ldloc' foundQuote);                  il.Emit(OpCodes.Brtrue' countCheckLabel);                    il.Emit(OpCodes.Newobj' _invalidJSONCtor);                  il.Emit(OpCodes.Throw);                    il.MarkLabel(countCheckLabel);                    //count == 2                  il.Emit(OpCodes.Ldloc' count);                  il.Emit(OpCodes.Ldc_I4_2);                  il.Emit(OpCodes.Bne_Un' countLabel);                    //index += 1;                  IncrementIndexRef(msil);                    il.Emit(OpCodes.Br' bLabel);                    il.MarkLabel(countLabel);                      //!isTag                  il.Emit(OpCodes.Ldloc' isTag);                  il.Emit(OpCodes.Brtrue' isNotTagLabel);                    var isStringTypeLabel1 = il.DefineLabel();                    il.Emit(OpCodes.Ldloc' isStringTypeLocal);                  il.Emit(OpCodes.Brfalse' isStringTypeLabel1);                  GenerateGetClassOrDictStringType(typeBuilder' type' il' settings' foundQuote' prev' startIndex' quotes' isDict' keyType' valueType' isKeyValuePair' isExpandoObject' isTuple' tupleArguments' tupleCount' obj' isTypeValueType' tupleCountLocal' dictSetItem' current' ptr' startLoop);                  il.MarkLabel(isStringTypeLabel1);                    if (dictSetItem != null) {                      var isStringTypeLabel2 = il.DefineLabel();                      il.Emit(OpCodes.Ldloc' isStringTypeLocal);                      il.Emit(OpCodes.Brtrue' isStringTypeLabel2);                      GenerateGetClassOrDictNonStringType(typeBuilder' il' settings' startIndex' keyType' valueType' isKeyValuePair' isExpandoObject' obj' dictSetItem' current' ptr);                      il.MarkLabel(isStringTypeLabel2);                  }                    il.MarkLabel(isNotTagLabel);                    il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Stloc' prev);                }' needBreak: true'              returnAction: msil => {                  if (isTuple) {                      var toTupleMethod = _tupleContainerType.GetMethods().FirstOrDefault(x => x.Name == ToTupleStr && x.GetGenericArguments().Length == tupleCount);                      if (toTupleMethod != null) {                          toTupleMethod = toTupleMethod.MakeGenericMethod(tupleType.GetGenericArguments());                          il.Emit(OpCodes.Ldloc' obj);                          il.Emit(OpCodes.Callvirt' toTupleMethod);                      }                  } else {                      if(selectedCtor != null) {                          var sObj = il.DeclareLocal(type);                          var parameters = selectedCtor.GetParameters();                          var props = type.GetTypeProperties();                          var fields = type.GetFields(BindingFlags.NonPublic | BindingFlags.Instance);                          var paramProps = props.Where(x => parameters.Any(y => y.Name.Equals(x.Member.Name' StringComparison.OrdinalIgnoreCase)));                          var excludedParams = props.Where(x => !parameters.Any(y => y.Name.Equals(x.Member.Name' StringComparison.OrdinalIgnoreCase)));                            if (paramProps.Any()) {                              if (isTypeValueType)                              {                                  il.Emit(OpCodes.Ldloca' sObj);                              }                                foreach (var parameter in paramProps)                              {                                  il.Emit(isTypeValueType ? OpCodes.Ldloca : OpCodes.Ldloc' obj);                                  GetMemberInfoValue(il' parameter);                              }                              if (isTypeValueType)                              {                                  il.Emit(OpCodes.Call' selectedCtor);                              }                              else                              {                                  il.Emit(OpCodes.Newobj' selectedCtor);                                  il.Emit(OpCodes.Stloc' sObj);                              }                                                              //Set field/prop not accounted for in constructor parameters                              foreach (var param in excludedParams) {                                  il.Emit(OpCodes.Ldloc' sObj);                                  il.Emit(OpCodes.Ldloc' obj);                                  GetMemberInfoValue(il' param);                                  var prop = param.Member.MemberType == MemberTypes.Property ? param.Member as PropertyInfo : null;                                  if (prop != null) {                                      var propName = prop.Name;                                      var setter = prop.GetSetMethod();                                      if (setter == null) {                                          setter = type.GetMethod(string.Concat("set_"' prop.Name)' MethodBinding);                                      }                                      var propType = prop.PropertyType;                                        if (setter == null)                                      {                                          var setField = type.GetField($"<{propName}>k__BackingField"' BindingFlags.NonPublic | BindingFlags.Instance);                                          if (setField == null)                                          {                                              setField = fields.FirstOrDefault(x => x.Name.EndsWith(propName' StringComparison.OrdinalIgnoreCase));                                          }                                            if (setField != null)                                          {                                              if (propType.GetTypeInfo().IsValueType)                                                  il.Emit(OpCodes.Box' propType);                                              il.Emit(OpCodes.Ldtoken' setField);                                              il.Emit(OpCodes.Call' _methodGetFieldFromHandle);                                              il.Emit(OpCodes.Call' _setterFieldValueMethod.MakeGenericMethod(type));                                          }                                          else                                          {                                              il.Emit(OpCodes.Pop);                                              il.Emit(OpCodes.Pop);                                          }                                      }                                      else                                      {                                          if (!setter.IsPublic)                                          {                                              if (propType.GetTypeInfo().IsValueType)                                                  il.Emit(OpCodes.Box' propType);                                              il.Emit(OpCodes.Ldtoken' setter);                                              il.Emit(OpCodes.Call' _methodGetMethodFromHandle);                                              il.Emit(OpCodes.Call' _setterPropertyValueMethod.MakeGenericMethod(type));                                          }                                          else                                              il.Emit(isTypeValueType ? OpCodes.Call : OpCodes.Callvirt' setter);                                      }                                  } else                                      il.Emit(OpCodes.Stfld' (FieldInfo)param.Member);                              }                                il.Emit(OpCodes.Ldloc' sObj);                          } else                              il.Emit(OpCodes.Ldloc' obj);                      }else                          il.Emit(OpCodes.Ldloc' obj);                  }                    if (isNullable)                  {                      il.Emit(OpCodes.Newobj' _nullableType.MakeGenericType(type).GetConstructor(new[] { type }));                  }              }'              beginIndexIf: (msil' current) => {                  il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Ldc_I4' (int)'}');                  il.Emit(OpCodes.Beq' incLabel);              }'              endIndexIf: (msil' current) => {                  il.MarkLabel(incLabel);              });
Magic Number,NetJSON.Internals,TupleContainer,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,Add,The following statement contains a magic number: switch (_index) {  				case 0:  					_1 = value;  					break;  				case 1:  					_2 = value;  					break;  				case 2:  					_3 = value;  					break;  				case 3:  					_4 = value;  					break;  				case 4:  					_5 = value;  					break;  				case 5:  					_6 = value;  					break;  				case 6:  					_7 = value;  					break;  				case 7:  					_8 = value;  					break;  			}
Magic Number,NetJSON.Internals,TupleContainer,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,Add,The following statement contains a magic number: switch (_index) {  				case 0:  					_1 = value;  					break;  				case 1:  					_2 = value;  					break;  				case 2:  					_3 = value;  					break;  				case 3:  					_4 = value;  					break;  				case 4:  					_5 = value;  					break;  				case 5:  					_6 = value;  					break;  				case 6:  					_7 = value;  					break;  				case 7:  					_8 = value;  					break;  			}
Magic Number,NetJSON.Internals,TupleContainer,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,Add,The following statement contains a magic number: switch (_index) {  				case 0:  					_1 = value;  					break;  				case 1:  					_2 = value;  					break;  				case 2:  					_3 = value;  					break;  				case 3:  					_4 = value;  					break;  				case 4:  					_5 = value;  					break;  				case 5:  					_6 = value;  					break;  				case 6:  					_7 = value;  					break;  				case 7:  					_8 = value;  					break;  			}
Magic Number,NetJSON.Internals,TupleContainer,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,Add,The following statement contains a magic number: switch (_index) {  				case 0:  					_1 = value;  					break;  				case 1:  					_2 = value;  					break;  				case 2:  					_3 = value;  					break;  				case 3:  					_4 = value;  					break;  				case 4:  					_5 = value;  					break;  				case 5:  					_6 = value;  					break;  				case 6:  					_7 = value;  					break;  				case 7:  					_8 = value;  					break;  			}
Magic Number,NetJSON.Internals,TupleContainer,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,Add,The following statement contains a magic number: switch (_index) {  				case 0:  					_1 = value;  					break;  				case 1:  					_2 = value;  					break;  				case 2:  					_3 = value;  					break;  				case 3:  					_4 = value;  					break;  				case 4:  					_5 = value;  					break;  				case 5:  					_6 = value;  					break;  				case 6:  					_7 = value;  					break;  				case 7:  					_8 = value;  					break;  			}
Magic Number,NetJSON.Internals,TupleContainer,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,Add,The following statement contains a magic number: switch (_index) {  				case 0:  					_1 = value;  					break;  				case 1:  					_2 = value;  					break;  				case 2:  					_3 = value;  					break;  				case 3:  					_4 = value;  					break;  				case 4:  					_5 = value;  					break;  				case 5:  					_6 = value;  					break;  				case 6:  					_7 = value;  					break;  				case 7:  					_8 = value;  					break;  			}
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,CachedObjectStringBuilder,The following statement contains a magic number: return (_cachedObjectStringBuilder ?? (_cachedObjectStringBuilder = new StringBuilder(25))).Clear();
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IsInRange,The following statement contains a magic number: var inRangeChr = *(ptr + index + offset + 2);
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,ToCamelCase,The following statement contains a magic number: *buffer = (char)(f + 32);
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,ToCamelCase,The following statement contains a magic number: c == 0 && f >= 65 && f <= 90
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,ToCamelCase,The following statement contains a magic number: c == 0 && f >= 65 && f <= 90
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,StringToDate,The following statement contains a magic number: var date = new DateTime(1970' 1' 1' 0' 0' 0' 0' System.DateTimeKind.Utc);
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,StringToDate,The following statement contains a magic number: var hours = noOffSetValue ? 0 : FastStringToInt(offsetText.Substring(0' 2));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,StringToDate,The following statement contains a magic number: var minutes = noOffSetValue ? 0 : (offsetText.Length > 2 ? FastStringToInt(offsetText.Substring(2' 2)) : 0);
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,StringToDate,The following statement contains a magic number: var minutes = noOffSetValue ? 0 : (offsetText.Length > 2 ? FastStringToInt(offsetText.Substring(2' 2)) : 0);
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,StringToDate,The following statement contains a magic number: var minutes = noOffSetValue ? 0 : (offsetText.Length > 2 ? FastStringToInt(offsetText.Substring(2' 2)) : 0);
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,FastStringToInt,The following statement contains a magic number: val = val * 10 + (*str++ - '0');
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,FastStringToUInt,The following statement contains a magic number: val = val * 10 + (uint)(*str++ - '0');
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,FastStringToLong,The following statement contains a magic number: val = val * 10 + (*str++ - '0');
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,FastStringToULong,The following statement contains a magic number: val = val * 10 + (ulong)(*str++ - '0');
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,FastStringToDouble,The following statement contains a magic number: val += rem * (Math.Pow(10' -1 * count));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,FastStringToDouble,The following statement contains a magic number: e = e * 10 + (*p++ - '0');
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,FastStringToDouble,The following statement contains a magic number: val *= Math.Pow(10' e * ePlusMinus);
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,FastStringToDouble,The following statement contains a magic number: rem = (rem * 10.0) + (*p - '0');
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,FastStringToDouble,The following statement contains a magic number: div *= 10.0;
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,FastStringToDouble,The following statement contains a magic number: val = (val * 10) + (*p - '0');
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: char* s = stackalloc char[12];
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: snum == -2147483648
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: num1 < 10
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: num1 < 100
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: num1 < 1000
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: num1 < 10000
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: *ps++ = (char)('0' + (div = (num1 * 8389) >> 23));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: *ps++ = (char)('0' + (div = (num1 * 8389) >> 23));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: num1 -= div * 1000;
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: *ps++ = (char)('0' + (div = (num1 * 5243) >> 19));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: *ps++ = (char)('0' + (div = (num1 * 5243) >> 19));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: num1 -= div * 100;
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: *ps++ = (char)('0' + (div = (num1 * 6554) >> 16));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: *ps++ = (char)('0' + (div = (num1 * 6554) >> 16));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,IntToStr,The following statement contains a magic number: num1 -= div * 10;
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: char* s = stackalloc char[21];
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: snum == -9223372036854775808
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: num1 < 10
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: num1 < 100
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: num1 < 1000
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: num1 < 10000
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: *ps++ = (char)('0' + (div = (num1 * 8389) >> 23));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: *ps++ = (char)('0' + (div = (num1 * 8389) >> 23));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: num1 -= div * 1000;
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: *ps++ = (char)('0' + (div = (num1 * 5243) >> 19));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: *ps++ = (char)('0' + (div = (num1 * 5243) >> 19));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: num1 -= div * 100;
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: *ps++ = (char)('0' + (div = (num1 * 6554) >> 16));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: *ps++ = (char)('0' + (div = (num1 * 6554) >> 16));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,LongToStr,The following statement contains a magic number: num1 -= div * 10;
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,DateToISOFormat,The following statement contains a magic number: var value = (_cachedDateStringBuilder ?? (_cachedDateStringBuilder = new StringBuilder(25)))  				.Clear().Append(IntToStr(year)).Append('-')  				.Append(month < 10 ? "0" : string.Empty)  				.Append(IntToStr(month))  			.Append('-').Append(day < 10 ? "0" : string.Empty).Append(IntToStr(day)).Append('T').Append(hour < 10 ? "0" : string.Empty).Append(IntToStr(hour)).Append(':')  			.Append(minute < 10 ? "0" : string.Empty).Append(IntToStr(minute)).Append(':')  			.Append(second < 10 ? "0" : string.Empty).Append(IntToStr(second)).Append('.')  			.Append(IntToStr(totalSeconds));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,DateToISOFormat,The following statement contains a magic number: var value = (_cachedDateStringBuilder ?? (_cachedDateStringBuilder = new StringBuilder(25)))  				.Clear().Append(IntToStr(year)).Append('-')  				.Append(month < 10 ? "0" : string.Empty)  				.Append(IntToStr(month))  			.Append('-').Append(day < 10 ? "0" : string.Empty).Append(IntToStr(day)).Append('T').Append(hour < 10 ? "0" : string.Empty).Append(IntToStr(hour)).Append(':')  			.Append(minute < 10 ? "0" : string.Empty).Append(IntToStr(minute)).Append(':')  			.Append(second < 10 ? "0" : string.Empty).Append(IntToStr(second)).Append('.')  			.Append(IntToStr(totalSeconds));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,DateToISOFormat,The following statement contains a magic number: var value = (_cachedDateStringBuilder ?? (_cachedDateStringBuilder = new StringBuilder(25)))  				.Clear().Append(IntToStr(year)).Append('-')  				.Append(month < 10 ? "0" : string.Empty)  				.Append(IntToStr(month))  			.Append('-').Append(day < 10 ? "0" : string.Empty).Append(IntToStr(day)).Append('T').Append(hour < 10 ? "0" : string.Empty).Append(IntToStr(hour)).Append(':')  			.Append(minute < 10 ? "0" : string.Empty).Append(IntToStr(minute)).Append(':')  			.Append(second < 10 ? "0" : string.Empty).Append(IntToStr(second)).Append('.')  			.Append(IntToStr(totalSeconds));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,DateToISOFormat,The following statement contains a magic number: var value = (_cachedDateStringBuilder ?? (_cachedDateStringBuilder = new StringBuilder(25)))  				.Clear().Append(IntToStr(year)).Append('-')  				.Append(month < 10 ? "0" : string.Empty)  				.Append(IntToStr(month))  			.Append('-').Append(day < 10 ? "0" : string.Empty).Append(IntToStr(day)).Append('T').Append(hour < 10 ? "0" : string.Empty).Append(IntToStr(hour)).Append(':')  			.Append(minute < 10 ? "0" : string.Empty).Append(IntToStr(minute)).Append(':')  			.Append(second < 10 ? "0" : string.Empty).Append(IntToStr(second)).Append('.')  			.Append(IntToStr(totalSeconds));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,DateToISOFormat,The following statement contains a magic number: var value = (_cachedDateStringBuilder ?? (_cachedDateStringBuilder = new StringBuilder(25)))  				.Clear().Append(IntToStr(year)).Append('-')  				.Append(month < 10 ? "0" : string.Empty)  				.Append(IntToStr(month))  			.Append('-').Append(day < 10 ? "0" : string.Empty).Append(IntToStr(day)).Append('T').Append(hour < 10 ? "0" : string.Empty).Append(IntToStr(hour)).Append(':')  			.Append(minute < 10 ? "0" : string.Empty).Append(IntToStr(minute)).Append(':')  			.Append(second < 10 ? "0" : string.Empty).Append(IntToStr(second)).Append('.')  			.Append(IntToStr(totalSeconds));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,DateToISOFormat,The following statement contains a magic number: var value = (_cachedDateStringBuilder ?? (_cachedDateStringBuilder = new StringBuilder(25)))  				.Clear().Append(IntToStr(year)).Append('-')  				.Append(month < 10 ? "0" : string.Empty)  				.Append(IntToStr(month))  			.Append('-').Append(day < 10 ? "0" : string.Empty).Append(IntToStr(day)).Append('T').Append(hour < 10 ? "0" : string.Empty).Append(IntToStr(hour)).Append(':')  			.Append(minute < 10 ? "0" : string.Empty).Append(IntToStr(minute)).Append(':')  			.Append(second < 10 ? "0" : string.Empty).Append(IntToStr(second)).Append('.')  			.Append(IntToStr(totalSeconds));
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,DateToString,The following statement contains a magic number: var offsetText = timeZoneFormat == NetJSONTimeZoneFormat.Local ? (string.Concat(offset.Ticks >= 0 ? "+" : "-"' hours < 10 ? "0" : string.Empty'  				hours' minutes < 10 ? "0" : string.Empty' minutes)) : string.Empty;
Magic Number,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,DateToString,The following statement contains a magic number: var offsetText = timeZoneFormat == NetJSONTimeZoneFormat.Local ? (string.Concat(offset.Ticks >= 0 ? "+" : "-"' hours < 10 ? "0" : string.Empty'  				hours' minutes < 10 ? "0" : string.Empty' minutes)) : string.Empty;
Duplicate Code,NetJSON,NetJSON,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,ReadStringToEnumFor,The method contains a code clone-set at the following line numbers (starting from the method definition): ((44' 63)' (89' 108))
Missing Default,NetJSON.Internals,TupleContainer,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,Add,The following switch statement is missing a default case: switch (_index) {  				case 0:  					_1 = value;  					break;  				case 1:  					_2 = value;  					break;  				case 2:  					_3 = value;  					break;  				case 3:  					_4 = value;  					break;  				case 4:  					_5 = value;  					break;  				case 5:  					_6 = value;  					break;  				case 6:  					_7 = value;  					break;  				case 7:  					_8 = value;  					break;  			}
Missing Default,NetJSON.Internals,SerializerUtilities,C:\research\architectureSmells\repos\rpgmaker_NetJSON\NetJSON\NetJSON.Internals.cs,GetNonStringValue,The following switch statement is missing a default case: switch (current) {  						case '\n':  						case '\r':  						case '\t':  						case ' ':  							++indexDiff;  							break;  					}
