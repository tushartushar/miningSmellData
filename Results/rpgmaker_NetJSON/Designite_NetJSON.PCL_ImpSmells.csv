Implementation smell,Namespace,Class,File,Method,Description
Long Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateFastObjectToString,The method has 126 lines of code.
Long Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeBuilder,The method has 130 lines of code.
Long Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,ReadStringToEnumFor,The method has 104 lines of code.
Long Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteDeserializeMethodFor,The method has 109 lines of code.
Long Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteSerializeMethodFor,The method has 317 lines of code.
Long Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteDictionary,The method has 107 lines of code.
Long Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WritePropertiesFor,The method has 212 lines of code.
Long Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateExtractObject,The method has 112 lines of code.
Long Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeSetValueFor,The method has 129 lines of code.
Long Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateCreateListFor,The method has 147 lines of code.
Long Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The method has 305 lines of code.
Long Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictStringType,The method has 218 lines of code.
Complex Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteSerializeMethodFor,Cyclomatic complexity of the method is 12
Complex Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteDictionary,Cyclomatic complexity of the method is 8
Complex Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WritePropertiesFor,Cyclomatic complexity of the method is 13
Complex Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,Cyclomatic complexity of the method is 14
Complex Method,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictStringType,Cyclomatic complexity of the method is 11
Long Parameter List,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,DefineMethodEx,The method has 5 parameters. Parameters: builder' methodName' methodAttribute' returnType' parameterTypes
Long Parameter List,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WritePropertyForType,The method has 7 parameters. Parameters: typeBuilder' il' hasValue' counter' name' propType' propValue
Long Parameter List,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,ILFixedWhile,The method has 7 parameters. Parameters: il' whileAction' needBreak' returnAction' beforeAction' beginIndexIf' endIndexIf
Long Parameter List,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateChangeTypeFor,The method has 6 parameters. Parameters: typeBuilder' type' il' value' settings' originalType
Long Parameter List,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeSetValueFor,The method has 5 parameters. Parameters: typeBuilder' type' isTypeValueType' Optimized' il
Long Parameter List,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateCreateListForNonStringBased,The method has 7 parameters. Parameters: typeBuilder' il' elementType' settings' obj' addMethod' current
Long Parameter List,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateCreateListForStringBased,The method has 10 parameters. Parameters: typeBuilder' il' elementType' isStringType' settings' obj' addMethod' current' ptr' bLabel
Long Parameter List,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictNonStringType,The method has 12 parameters. Parameters: typeBuilder' il' settings' startIndex' keyType' valueType' isKeyValuePair' isExpandoObject' obj' dictSetItem' current' ptr
Long Parameter List,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictStringType,The method has 23 parameters. Parameters: typeBuilder' type' il' settings' foundQuote' prev' startIndex' quotes' isDict' keyType' valueType' isKeyValuePair' isExpandoObject' isTuple' tupleArguments' tupleCount' obj' isTypeValueType' tupleCountLocal' dictSetItem' current' ptr' startLoop
Long Parameter List,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTupleConvert,The method has 7 parameters. Parameters: typeBuilder' tupleIndex' il' tupleArguments' obj' tupleCountLocal' settings
Long Identifier,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeBuilder,The length of the parameter serializeWithTextWriterMethodWithSettings is 41.
Long Identifier,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeBuilder,The length of the parameter deserializeWithReaderMethodWithSettings is 39.
Long Identifier,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WritePropertiesFor,The length of the parameter skipDefaultValueTrueAndHasValueLabel is 36.
Long Identifier,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictNonStringType,The length of the parameter startIndexGreaterIsEndOfCharLabel is 33.
Long Identifier,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _getTypeIdentifierInstanceMethod is 32.
Long Identifier,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _settingsUseStringOptimization is 30.
Long Identifier,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _readDeserializeMethodBuilders is 30.
Long Identifier,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _writeEnumToStringMethodBuilders is 32.
Long Identifier,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _readEnumToStringMethodBuilders is 31.
Long Identifier,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter NET_JSON_GENERATED_ASSEMBLY_NAME is 32.
Long Identifier,NetJSON,DynamicNetJSONSerializer<T>,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _DeserializeTextReaderWithSettings is 34.
Long Identifier,NetJSON,DynamicNetJSONSerializer<T>,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,,The length of the parameter _SerializeTextWriterWithSettings is 32.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GetTypeProperties,The length of the statement  "                        props = props.Union(key.GetFields(PropertyBinding).Where(x => GetCanSerialize(x)).Select(x => new NetJSONMemberInfo { Member = x' Attribute = x.GetCustomAttributes(_netjsonPropertyType' true).OfType<NetJSONPropertyAttribute>().FirstOrDefault() ?? GetSerializeAs(x) })); " is 269.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GetTypeProperties,The length of the statement  "                if (result.Where(x => x.Attribute != null).Any(x => x.Attribute.Name.IsNullOrWhiteSpace() || x.Attribute.Name.Contains(" "))) " is 125.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GetTypeProperties,The length of the statement  "                    if (result.Where(x => x.Attribute != null).Any(x => string.IsNullOrWhiteSpace(x.Attribute.Name) || x.Attribute.Name.Contains(" "))) " is 131.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,NeedQuotes,The length of the statement  "            return type == _stringType || type == _charType || type == _guidType || type == _timeSpanType || ((type == _dateTimeType || type == _dateTimeOffsetType) && settings.DateFormat != NetJSONDateFormat.EpochTime) || type == _byteArrayType || (settings.UseEnumString && type.GetTypeInfo().IsEnum); " is 291.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateAssemblyBuilder,The length of the statement  "                        _assembly.SetCustomAttribute(new CustomAttributeBuilder(typeof(CompilationRelaxationsAttribute).GetConstructor(new[] { _intType })' new object[] { 8 })); " is 153.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateAssemblyBuilder,The length of the statement  "                        _assembly.SetCustomAttribute(new CustomAttributeBuilder(typeof(SecurityRulesAttribute).GetConstructor(new[] { typeof(SecurityRuleSet) })'  " is 137.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateAssemblyBuilderNoShare,The length of the statement  "            assembly.SetCustomAttribute(new CustomAttributeBuilder(typeof(CompilationRelaxationsAttribute).GetConstructor(new[] { _intType })' new object[] { 8 })); " is 152.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,Fix,The length of the statement  "                    var value = key.Replace(quoteText' string.Empty).Replace(ArrayLiteral' ArrayStr).Replace(AnonymousBracketStr' string.Empty); " is 124.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,ReadStringToEnumFor,The length of the statement  "                    (x.Attr.GetCustomAttributes(typeof(NetJSONPropertyAttribute)' true).FirstOrDefault() as NetJSONPropertyAttribute) : null " is 120.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteEnumToStringForWithString,The length of the statement  "                    (x.Attr.GetCustomAttributes(typeof(NetJSONPropertyAttribute)' true).FirstOrDefault() as NetJSONPropertyAttribute) : null  }).ToArray(); " is 135.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteSerializeMethodFor,The length of the statement  "                needQuote = needQuote && (type == _stringType || type == _charType || type == _guidType || type == _timeSpanType || type == _byteArrayType); " is 140.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GetIncludedTypeTypes,The length of the statement  "                    var attrs = type.GetTypeInfo().GetCustomAttributes(typeof(NetJSONKnownTypeAttribute)' true).OfType<NetJSONKnownTypeAttribute>(); " is 128.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GetIncludedTypeTypes,The length of the statement  "                                types.AddRange(asm.GetTypes().Where(x => x.GetTypeInfo().IsSubclassOf(type) || x.GetTypeInfo().GetInterfaces().Any(i => i == type))); " is 133.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteDictionary,The length of the statement  "                        throw new InvalidOperationException(String.Format("Type {0} must be a validate dictionary type such as IDictionary<Key'Value>"' type.FullName)); " is 144.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteDictionary,The length of the statement  "                    throw new InvalidOperationException(String.Format("Type {0} must be a validate dictionary type such as IDictionary<Key'Value>"' type.FullName)); " is 144.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,WriteDictionary,The length of the statement  "            var enumeratorType = _enumeratorType.MakeGenericType(keyValuePairType);//_genericDictionaryEnumerator.MakeGenericType(keyType' valueType); " is 138.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,Serialize,The length of the statement  "                    var method = new DynamicMethod(name' _stringType' new[] { _objectType' _settingsType }' restrictedSkipVisibility: true); " is 120.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,Deserialize,The length of the statement  "                    var method = new DynamicMethod(name' _objectType' new[] { _stringType' _settingsType }' restrictedSkipVisibility: true); " is 120.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,DecodeJSONString,The length of the statement  "                        if (next != ''' && next != ' ' && next != ':' && next != '\n' && next != '\r' && next != '\t' && next != ']' && next != '}' && next != '\0') " is 140.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateSetValueFor,The length of the statement  "                _voidType' new[] { _charPtrType' _intType.MakeByRefType()' isTypeValueType ? type.MakeByRefType() : type' _stringType' _settingsType }); " is 136.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateCreateListFor,The length of the statement  "            var isCollectionType = !isArray && !_listType.IsAssignableFrom(type) && !(type.Name == IEnumerableStr) && !(type.Name == IListStr) && !(type.Name == ICollectionStr); " is 165.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateCreateListFor,The length of the statement  "                    GenerateCreateListForStringBased(typeBuilder' il' elementType' isStringType' settings' obj' addMethod' current' ptr' bLabel); " is 125.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,IsListType,The length of the statement  "				((interfaceType = type.GetTypeInfo().GetInterface(ICollectionStr)) != null && interfaceType.GetGenericArguments()[0].Name != KeyValueStr) || " is 140.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,IsListType,The length of the statement  "				((interfaceType = type.GetTypeInfo().GetInterface(IEnumerableStr)) != null && interfaceType.GetGenericArguments()[0].Name != KeyValueStr)); " is 139.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,IsDictionaryType,The length of the statement  "				|| ((interfaceType = type.GetTypeInfo().GetInterface(IEnumerableStr)) != null && interfaceType.GetGenericArguments()[0].Name == KeyValueStr); " is 141.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The length of the statement  "                        throw new InvalidOperationException(String.Format("Type {0} must be a validate dictionary type such as IDictionary<Key'Value>"' type.FullName)); " is 144.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The length of the statement  "                GenerateGetClassOrDictStringType(typeBuilder' type' il' settings' foundQuote' prev' startIndex' quotes' isDict' keyType' valueType' isKeyValuePair' isExpandoObject' isTuple' tupleArguments' tupleCount' obj' isTypeValueType' tupleCountLocal' dictSetItem' current' ptr' startLoop); " is 279.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The length of the statement  "                    GenerateGetClassOrDictNonStringType(typeBuilder' il' settings' startIndex' keyType' valueType' isKeyValuePair' isExpandoObject' obj' dictSetItem' current' ptr); " is 160.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The length of the statement  "                    var toTupleMethod = _tupleContainerType.GetMethods().FirstOrDefault(x => x.Name == ToTupleStr && x.GetGenericArguments().Length == tupleCount); " is 143.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The length of the statement  "                        var paramProps = props.Where(x => parameters.Any(y => y.Name.Equals(x.Member.Name' StringComparison.OrdinalIgnoreCase))); " is 121.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The length of the statement  "                        var excludedParams = props.Where(x => !parameters.Any(y => y.Name.Equals(x.Member.Name' StringComparison.OrdinalIgnoreCase))); " is 126.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictNonStringType,The length of the statement  "                il.Emit(OpCodes.Newobj' _genericKeyValuePairType.MakeGenericType(keyType' valueType).GetConstructor(new[] { keyType' valueType })); " is 131.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictStringType,The length of the statement  "                    il.Emit(OpCodes.Newobj' _genericKeyValuePairType.MakeGenericType(keyType' valueType).GetConstructor(new[] { keyType' valueType })); " is 131.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictStringType,The length of the statement  "                    il.Emit(OpCodes.Newobj' _genericKeyValuePairType.MakeGenericType(keyType' valueType).GetConstructor(new[] { keyType' valueType })); " is 131.
Long Statement,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,IsStringBasedType,The length of the statement  "            return type == _stringType || type == _charType || type == _typeType || type == _timeSpanType || type == _byteArrayType || type == _guidType; " is 141.
Long Statement,NetJSON,DynamicNetJSONSerializer<T>,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,CreateDeserializerWithTextReaderSettings,The length of the statement  "                var meth = new DynamicMethod("DeserializeValueTextReaderSettings"' ObjType' new[] { _textReaderType' _settingsType }' ManifestModule' true); " is 140.
Long Statement,NetJSON,DynamicNetJSONSerializer<T>,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,CreateDeserializerWithSettings,The length of the statement  "                var meth = new DynamicMethod("DeserializeValueSettings"' ObjType' new[] { _stringType' _settingsType }' ManifestModule' true); " is 126.
Long Statement,NetJSON,DynamicNetJSONSerializer<T>,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,CreateSerializerWithSettings,The length of the statement  "                var meth = new DynamicMethod("SerializeValueSettings"' _stringType' new[] { ObjType' _settingsType }' ManifestModule' true); " is 124.
Long Statement,NetJSON,DynamicNetJSONSerializer<T>,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,CreateSerializerWithTextWriter,The length of the statement  "                var meth = new DynamicMethod("SerializeValueTextWriter"' _voidType' new[] { typeof(T)' _textWriterType }' ManifestModule' true); " is 128.
Long Statement,NetJSON,DynamicNetJSONSerializer<T>,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,CreateSerializerWithTextWriterSettings,The length of the statement  "                var meth = new DynamicMethod("SerializeValueTextWriterSettings"' _voidType' new[] { ObjType' _textWriterType' _settingsType }' ManifestModule' true); " is 149.
Complex Conditional,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,LoadDefaultValueByType,The conditional expression  "type == _sbyteType || type == _byteType || type == typeof(short) || type == typeof(ushort)"  is complex.
Complex Conditional,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,DecodeJSONString,The conditional expression  "next != ''' && next != ' ' && next != ':' && next != '\n' && next != '\r' && next != '\t' && next != ']' && next != '}' && next != '\0'"  is complex.
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: if ((((int)dmem) & 2) != 0) {                  dmem[0] = smem[0];                  dmem++;                  smem++;                  charCount--;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: if ((charCount & 4) != 0) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  dmem += 4;                  smem += 4;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: if ((charCount & 4) != 0) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  dmem += 4;                  smem += 4;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: if ((charCount & 4) != 0) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  dmem += 4;                  smem += 4;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: if ((charCount & 4) != 0) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  dmem += 4;                  smem += 4;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: if ((charCount & 4) != 0) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  dmem += 4;                  smem += 4;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: if ((charCount & 2) != 0) {                  *((int*)dmem) = *((int*)smem);                  dmem += 2;                  smem += 2;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: if ((charCount & 2) != 0) {                  *((int*)dmem) = *((int*)smem);                  dmem += 2;                  smem += 2;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,memcpy,The following statement contains a magic number: if ((charCount & 2) != 0) {                  *((int*)dmem) = *((int*)smem);                  dmem += 2;                  smem += 2;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ilog_10,The following statement contains a magic number: return 10;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: if (aI == 0) return 0;              else if (aI >= 1 && aI <= 9) return 1;              else if (aI >= 10 && aI <= 99) return 2;              else if (aI >= 100 && aI <= 999) return 3;                else if (aI >= 1000 && aI <= 9999) return 4;                else if (aI >= 10000 && aI <= 99999) return 5;                else if (aI >= 100000 && aI <= 999999) return 6;                else if (aI >= 1000000 && aI <= 9999999) return 7;              else if (aI >= 10000000 && aI <= 99999999) return 8;              else if (aI >= 100000000 && aI <= 999999999) return 9;                else if (aI >= 1000000000 && aI <= 9999999999) return 10;              else if (aI >= 10000000000 && aI <= 99999999999) return 11;              else if (aI >= 100000000000 && aI <= 999999999999) return 12;              else if (aI >= 1000000000000 && aI <= 9999999999999) return 13;              else if (aI >= 10000000000000 && aI <= 99999999999999) return 14;              else if (aI >= 100000000000000 && aI <= 999999999999999) return 15;              else if (aI >= 1000000000000000 && aI <= 9999999999999999) return 16;              else if (aI >= 10000000000000000 && aI <= 99999999999999999) return 17;              else if (aI >= 100000000000000000 && aI <= 999999999999999999) return 18;              else if (aI >= 1000000000000000000 && aI <= 9999999999999999999) return 19;              else if (aI >= 10000000000000000000 && aI <= 9) return 20;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,lllog_10,The following statement contains a magic number: return 19 + ((aI >= 10000000000000000000UL) ? 1 : 0);
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: ushort tmpShort = aShort > 9999 ? (ushort)(aShort / 10) : aShort;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: ushort tmpShort = aShort > 9999 ? (ushort)(aShort / 10) : aShort;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: if (tmpShort >= 1000 && tmpShort <= 9999) *aBuf++ = src[0];              else if (tmpShort >= 100 && tmpShort <= 999) *aBuf++ = src[1];              else if (tmpShort >= 10 && tmpShort <= 99) *aBuf++ = src[2];              else if (tmpShort >= 0 && tmpShort <= 9) *aBuf++ = src[3];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: if (tmpShort >= 1000 && tmpShort <= 9999) *aBuf++ = src[0];              else if (tmpShort >= 100 && tmpShort <= 999) *aBuf++ = src[1];              else if (tmpShort >= 10 && tmpShort <= 99) *aBuf++ = src[2];              else if (tmpShort >= 0 && tmpShort <= 9) *aBuf++ = src[3];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: if (tmpShort >= 1000 && tmpShort <= 9999) *aBuf++ = src[0];              else if (tmpShort >= 100 && tmpShort <= 999) *aBuf++ = src[1];              else if (tmpShort >= 10 && tmpShort <= 99) *aBuf++ = src[2];              else if (tmpShort >= 0 && tmpShort <= 9) *aBuf++ = src[3];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: if (tmpShort >= 1000 && tmpShort <= 9999) *aBuf++ = src[0];              else if (tmpShort >= 100 && tmpShort <= 999) *aBuf++ = src[1];              else if (tmpShort >= 10 && tmpShort <= 99) *aBuf++ = src[2];              else if (tmpShort >= 0 && tmpShort <= 9) *aBuf++ = src[3];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: if (tmpShort >= 1000 && tmpShort <= 9999) *aBuf++ = src[0];              else if (tmpShort >= 100 && tmpShort <= 999) *aBuf++ = src[1];              else if (tmpShort >= 10 && tmpShort <= 99) *aBuf++ = src[2];              else if (tmpShort >= 0 && tmpShort <= 9) *aBuf++ = src[3];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: if (tmpShort >= 1000 && tmpShort <= 9999) *aBuf++ = src[0];              else if (tmpShort >= 100 && tmpShort <= 999) *aBuf++ = src[1];              else if (tmpShort >= 10 && tmpShort <= 99) *aBuf++ = src[2];              else if (tmpShort >= 0 && tmpShort <= 9) *aBuf++ = src[3];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: if (tmpShort >= 1000 && tmpShort <= 9999) *aBuf++ = src[0];              else if (tmpShort >= 100 && tmpShort <= 999) *aBuf++ = src[1];              else if (tmpShort >= 10 && tmpShort <= 99) *aBuf++ = src[2];              else if (tmpShort >= 0 && tmpShort <= 9) *aBuf++ = src[3];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: if (tmpShort >= 1000 && tmpShort <= 9999) *aBuf++ = src[0];              else if (tmpShort >= 100 && tmpShort <= 999) *aBuf++ = src[1];              else if (tmpShort >= 10 && tmpShort <= 99) *aBuf++ = src[2];              else if (tmpShort >= 0 && tmpShort <= 9) *aBuf++ = src[3];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: if (tmpShort >= 1000 && tmpShort <= 9999) *aBuf++ = src[0];              else if (tmpShort >= 100 && tmpShort <= 999) *aBuf++ = src[1];              else if (tmpShort >= 10 && tmpShort <= 99) *aBuf++ = src[2];              else if (tmpShort >= 0 && tmpShort <= 9) *aBuf++ = src[3];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ustoa,The following statement contains a magic number: if (tmpShort != aShort) {                  char tmpRem = (char)(aShort % 10);                  *aBuf++ = (char)(tmpRem + '0');              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa_core,The following statement contains a magic number: while (anInt >= ATOI_TAB_SZ) {                  uint myDiv10000 = (uint)(anInt / ATOI_TAB_SZ);                  targetPtr -= 4;                  memcpy(targetPtr' cstItoa + ATOI_TAB_SZ_LOG * (anInt % ATOI_TAB_SZ)' 4);                  anInt = myDiv10000;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa_core,The following statement contains a magic number: while (anInt >= ATOI_TAB_SZ) {                  uint myDiv10000 = (uint)(anInt / ATOI_TAB_SZ);                  targetPtr -= 4;                  memcpy(targetPtr' cstItoa + ATOI_TAB_SZ_LOG * (anInt % ATOI_TAB_SZ)' 4);                  anInt = myDiv10000;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa_core,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *(--targetPtr) = *myTabPtr--;              else if (anInt >= 10 && anInt <= 99) *(--targetPtr) = *myTabPtr--;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa_core,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *(--targetPtr) = *myTabPtr--;              else if (anInt >= 10 && anInt <= 99) *(--targetPtr) = *myTabPtr--;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa_core,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *(--targetPtr) = *myTabPtr--;              else if (anInt >= 10 && anInt <= 99) *(--targetPtr) = *myTabPtr--;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa_core,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *(--targetPtr) = *myTabPtr--;              else if (anInt >= 10 && anInt <= 99) *(--targetPtr) = *myTabPtr--;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: if (anInt >= 1000 && anInt <= 9999) *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: if (anInt >= 1000 && anInt <= 9999) *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3];                  *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3];                  *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3];                  *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3];                  *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3];                  *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3];                  *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3];                  *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_core,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_core,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_core,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_core,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_core,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_core,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_core,The following statement contains a magic number: if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_general,The following statement contains a magic number: uint tmpInt = anInt / 10000;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_general,The following statement contains a magic number: if (anInt < 100000000)                  aBuf = uitoa2_core(aBuf' tmpInt);              else                  aBuf = uitoa2_general(aBuf' tmpInt);
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_general,The following statement contains a magic number: memcpy(aBuf' cstItoa + (anInt % 10000) * ATOI_TAB_SZ_LOG' 4);
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_general,The following statement contains a magic number: memcpy(aBuf' cstItoa + (anInt % 10000) * ATOI_TAB_SZ_LOG' 4);
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2_general,The following statement contains a magic number: return aBuf + 4;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2,The following statement contains a magic number: if (anInt >= 1000 && anInt <= 9999) *aBuf++ = src[0];              else if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2,The following statement contains a magic number: if (anInt >= 1000 && anInt <= 9999) *aBuf++ = src[0];              else if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2,The following statement contains a magic number: if (anInt >= 1000 && anInt <= 9999) *aBuf++ = src[0];              else if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2,The following statement contains a magic number: if (anInt >= 1000 && anInt <= 9999) *aBuf++ = src[0];              else if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2,The following statement contains a magic number: if (anInt >= 1000 && anInt <= 9999) *aBuf++ = src[0];              else if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2,The following statement contains a magic number: if (anInt >= 1000 && anInt <= 9999) *aBuf++ = src[0];              else if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2,The following statement contains a magic number: if (anInt >= 1000 && anInt <= 9999) *aBuf++ = src[0];              else if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2,The following statement contains a magic number: if (anInt >= 1000 && anInt <= 9999) *aBuf++ = src[0];              else if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa2,The following statement contains a magic number: if (anInt >= 1000 && anInt <= 9999) *aBuf++ = src[0];              else if (anInt >= 100 && anInt <= 999) *aBuf++ = src[1];              else if (anInt >= 10 && anInt <= 99) *aBuf++ = src[2];              else if (anInt >= 0 && anInt <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa_general,The following statement contains a magic number: while (aLL >= ULONG_MAX) {                    /* See div64_32 in Linux internals' for fast division. */                  ulong myDiv10000 = aLL / ATOI_TAB_SZ;                  aBuf -= 4;                  memcpy(aBuf' cstItoa + ATOI_TAB_SZ_LOG * (uint)(aLL % ATOI_TAB_SZ)' 4);                  aLL = myDiv10000;                }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa_general,The following statement contains a magic number: while (aLL >= ULONG_MAX) {                    /* See div64_32 in Linux internals' for fast division. */                  ulong myDiv10000 = aLL / ATOI_TAB_SZ;                  aBuf -= 4;                  memcpy(aBuf' cstItoa + ATOI_TAB_SZ_LOG * (uint)(aLL % ATOI_TAB_SZ)' 4);                  aLL = myDiv10000;                }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa,The following statement contains a magic number: if (aLL >= 1000 && aLL <= 9999) *aBuf++ = src[0];              //else if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              //else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa,The following statement contains a magic number: if (aLL >= 1000 && aLL <= 9999) *aBuf++ = src[0];              //else if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              //else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa,The following statement contains a magic number: if (aLL >= 1000 && aLL <= 9999) *aBuf++ = src[0];              //else if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              //else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa,The following statement contains a magic number: if (aLL >= 1000 && aLL <= 9999) *aBuf++ = src[0];              //else if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              //else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_core,The following statement contains a magic number: if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_core,The following statement contains a magic number: if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_core,The following statement contains a magic number: if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_core,The following statement contains a magic number: if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_core,The following statement contains a magic number: if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_core,The following statement contains a magic number: if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_core,The following statement contains a magic number: if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) *aBuf++ = src[3];              else *aBuf++ = src[0];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_general,The following statement contains a magic number: ulong tmpLL = aLL / 10000;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_general,The following statement contains a magic number: if (aLL < 100000000)                  aBuf = ulltoa2_core(aBuf' tmpLL);              else                  aBuf = ulltoa2_general(aBuf' tmpLL);
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_general,The following statement contains a magic number: memcpy(aBuf' cstItoa + (aLL % 10000) * ATOI_TAB_SZ_LOG' 4);
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_general,The following statement contains a magic number: memcpy(aBuf' cstItoa + (aLL % 10000) * ATOI_TAB_SZ_LOG' 4);
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2_general,The following statement contains a magic number: return aBuf + 4;
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2,The following statement contains a magic number: if (aLL >= 1000 && aLL <= 9999) *aBuf++ = src[0];              else if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2,The following statement contains a magic number: if (aLL >= 1000 && aLL <= 9999) *aBuf++ = src[0];              else if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2,The following statement contains a magic number: if (aLL >= 1000 && aLL <= 9999) *aBuf++ = src[0];              else if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2,The following statement contains a magic number: if (aLL >= 1000 && aLL <= 9999) *aBuf++ = src[0];              else if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2,The following statement contains a magic number: if (aLL >= 1000 && aLL <= 9999) *aBuf++ = src[0];              else if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2,The following statement contains a magic number: if (aLL >= 1000 && aLL <= 9999) *aBuf++ = src[0];              else if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2,The following statement contains a magic number: if (aLL >= 1000 && aLL <= 9999) *aBuf++ = src[0];              else if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2,The following statement contains a magic number: if (aLL >= 1000 && aLL <= 9999) *aBuf++ = src[0];              else if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa2,The following statement contains a magic number: if (aLL >= 1000 && aLL <= 9999) *aBuf++ = src[0];              else if (aLL >= 100 && aLL <= 999) *aBuf++ = src[1];              else if (aLL >= 10 && aLL <= 99) *aBuf++ = src[2];              else if (aLL >= 0 && aLL <= 9) {                  *aBuf++ = src[3]; *aBuf = '\0';                  return aBuf;              }
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa4,The following statement contains a magic number: do {                  int rem = (int)(aLL % 10);                  *--ptr = (char)(rem + '0');                  aLL /= 10;              } while (aLL != 0);
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ulltoa4,The following statement contains a magic number: do {                  int rem = (int)(aLL % 10);                  *--ptr = (char)(rem + '0');                  aLL /= 10;              } while (aLL != 0);
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ultoa,The following statement contains a magic number: char* buf = stackalloc char[21];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,ltoa,The following statement contains a magic number: char* buf = stackalloc char[20];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,uitoa,The following statement contains a magic number: char* buf = stackalloc char[20];
Magic Number,NetJSON,IntUtility,C:\repos\rpgmaker_NetJSON\NetJSON\IntUtility.cs,itoa,The following statement contains a magic number: char* buf = stackalloc char[11];
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: if ((((int)dmem) & 2) != 0) {                  dmem[0] = smem[0];                  dmem++;                  smem++;                  charCount--;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: while (charCount >= 8) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  *((int*)(dmem + 4)) = *((int*)(smem + 4));                  *((int*)(dmem + 6)) = *((int*)(smem + 6));                  dmem += 8;                  smem += 8;                  charCount -= 8;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: if ((charCount & 4) != 0) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  dmem += 4;                  smem += 4;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: if ((charCount & 4) != 0) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  dmem += 4;                  smem += 4;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: if ((charCount & 4) != 0) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  dmem += 4;                  smem += 4;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: if ((charCount & 4) != 0) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  dmem += 4;                  smem += 4;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: if ((charCount & 4) != 0) {                  *((int*)dmem) = *((int*)smem);                  *((int*)(dmem + 2)) = *((int*)(smem + 2));                  dmem += 4;                  smem += 4;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: if ((charCount & 2) != 0) {                  *((int*)dmem) = *((int*)smem);                  dmem += 2;                  smem += 2;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: if ((charCount & 2) != 0) {                  *((int*)dmem) = *((int*)smem);                  dmem += 2;                  smem += 2;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,memcpy,The following statement contains a magic number: if ((charCount & 2) != 0) {                  *((int*)dmem) = *((int*)smem);                  dmem += 2;                  smem += 2;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateAssemblyBuilder,The following statement contains a magic number: if (_assembly == null) {                  lock (_lockAsmObject) {                      if (_assembly == null) {                          _assembly =  #if NET_CORE                  AssemblyBuilder  #else                  AppDomain.CurrentDomain  #endif                          .DefineDynamicAssembly(                              new AssemblyName(NET_JSON_GENERATED_ASSEMBLY_NAME) {                                  Version = new Version(1' 0' 0' 0)                              }'  #if NET_CORE                              AssemblyBuilderAccess.Run  #else                              AssemblyBuilderAccess.RunAndSave  #endif                              );                              //[assembly: CompilationRelaxations(8)]                          _assembly.SetCustomAttribute(new CustomAttributeBuilder(typeof(CompilationRelaxationsAttribute).GetConstructor(new[] { _intType })' new object[] { 8 }));                            //[assembly: RuntimeCompatibility(WrapNonExceptionThrows=true)]                          _assembly.SetCustomAttribute(new CustomAttributeBuilder(                              typeof(RuntimeCompatibilityAttribute).GetConstructor(Type.EmptyTypes)'                              new object[] { }'                              new[] {  typeof(RuntimeCompatibilityAttribute).GetProperty("WrapNonExceptionThrows")                  }'                              new object[] { true }));    #if !NET_CORE                          //[assembly: SecurityPermission(SecurityAction.RequestMinimum' SkipVerification=true)]                          _assembly.SetCustomAttribute(new CustomAttributeBuilder(                              typeof(SecurityPermissionAttribute).GetConstructor(new[] { typeof(SecurityAction) })'                              new object[] { SecurityAction.RequestMinimum }'                              new[] {  typeof(SecurityPermissionAttribute).GetProperty("SkipVerification")                  }'                              new object[] { true }));                            //[assembly: SecurityRules(SecurityRuleSet.Level2'SkipVerificationInFullTrust=true)]  #if !NET_35                          _assembly.SetCustomAttribute(new CustomAttributeBuilder(typeof(SecurityRulesAttribute).GetConstructor(new[] { typeof(SecurityRuleSet) })'                               new object[] { SecurityRuleSet.Level2 }'                              new[] { typeof(SecurityRulesAttribute).GetProperty("SkipVerificationInFullTrust") }' new object[] { true }));  #endif  #endif                      }                  }              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateAssemblyBuilderNoShare,The following statement contains a magic number: assembly.SetCustomAttribute(new CustomAttributeBuilder(typeof(CompilationRelaxationsAttribute).GetConstructor(new[] { _intType })' new object[] { 8 }));
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,PrettifyJSON,The following statement contains a magic number: var horizontals = new int[10000];
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,PrettifyJSON,The following statement contains a magic number: fixed (char* chr = str) {                  char* ptr = chr;                  while ((c = *(ptr++)) != '\0') {                      switch (c) {                          case '{':                          case '[':                              sb.Append(c);                              if (quote == 0)                              {                                  hrIndex++;                                  horizontals[hrIndex] = horizontal;                                  @return = true;                              }                              break;                          case '}':                          case ']':                              if (quote == 0)                              {                                  @return = false;                                  sb.Append('\n');                                  horizontal = horizontals[hrIndex];                                  hrIndex--;                                  for (var i = 0; i < horizontal; i++)                                  {                                      sb.Append(' ');                                  }                              }                              sb.Append(c);                              break;                          case ''':                              sb.Append(c);                              if (quote == 0)                              {                                  @return = true;                              }                              break;                          default:                              if (@return) {                                  @return = false;                                  sb.Append('\n');                                  horizontal = horizontals[hrIndex] + 1;                                  for (var i = 0; i < horizontal; i++) {                                      sb.Append(' ');                                  }                              }                              var escaped = *(ptr - 2) == '\\';                              if (c == '"' && !escaped)                              {                                  quote++;                                  quote %= 2;                              }                              sb.Append(c);                              break;                      }                        horizontal++;                  }              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,PrettifyJSON,The following statement contains a magic number: fixed (char* chr = str) {                  char* ptr = chr;                  while ((c = *(ptr++)) != '\0') {                      switch (c) {                          case '{':                          case '[':                              sb.Append(c);                              if (quote == 0)                              {                                  hrIndex++;                                  horizontals[hrIndex] = horizontal;                                  @return = true;                              }                              break;                          case '}':                          case ']':                              if (quote == 0)                              {                                  @return = false;                                  sb.Append('\n');                                  horizontal = horizontals[hrIndex];                                  hrIndex--;                                  for (var i = 0; i < horizontal; i++)                                  {                                      sb.Append(' ');                                  }                              }                              sb.Append(c);                              break;                          case ''':                              sb.Append(c);                              if (quote == 0)                              {                                  @return = true;                              }                              break;                          default:                              if (@return) {                                  @return = false;                                  sb.Append('\n');                                  horizontal = horizontals[hrIndex] + 1;                                  for (var i = 0; i < horizontal; i++) {                                      sb.Append(' ');                                  }                              }                              var escaped = *(ptr - 2) == '\\';                              if (c == '"' && !escaped)                              {                                  quote++;                                  quote %= 2;                              }                              sb.Append(c);                              break;                      }                        horizontal++;                  }              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,Fix,The following statement contains a magic number: return _fixes.GetOrAdd(name' key => {                  lock (GetDictLockObject("FixName")) {                      var index = key.IndexOf(CarrotQuoteChar' StringComparison.OrdinalIgnoreCase);                      var quoteText = index > -1 ? key.Substring(index' 2) : CarrotQuoteChar;                      var value = key.Replace(quoteText' string.Empty).Replace(ArrayLiteral' ArrayStr).Replace(AnonymousBracketStr' string.Empty);                      if (value.Contains(CarrotQuoteChar))                          value = Fix(value);                      return value;                  }              });
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,DecodeJSONString,The following statement contains a magic number: while (true) {                  current = ptr[index];                  if(current == '\0')                  {                      break;                  }                    if (isJustString || hasQuote) {                      if (!isJustString && current == settings._quoteChar)                      {                          next = ptr[index + 1];                          if (next != ''' && next != ' ' && next != ':' && next != '\n' && next != '\r' && next != '\t' && next != ']' && next != '}' && next != '\0')                          {                              throw new NetJSONInvalidJSONException();                          }                            ++index;                          break;                      }                      else                      {                          if (current != '\\')                          {                              sb.Append(current);                          }                          else                          {                              next = ptr[++index];                              switch (next)                              {                                  case 'r': sb.Append('\r'); break;                                  case 'n': sb.Append('\n'); break;                                  case 't': sb.Append('\t'); break;                                  case 'f': sb.Append('\f'); break;                                  case '\\': sb.Append('\\'); break;                                  case '/': sb.Append('/'); break;                                  case 'b': sb.Append('\b'); break;                                  case 'u':                                      const int offset = 0x10000;                                      var str = new string(ptr' index + 1' 4);                                      var uu = Int32.Parse(str' NumberStyles.HexNumber);                                                                            if(uu < offset)                                      {                                          sb.Append((char)uu);                                      }                                      else                                      {                                          sb.Append((char)(((uu - offset) >> 10) + 0xD800))                                              .Append((char)((uu - offset) % 0x0400 + 0xDC00));                                      }                                        index += 4;                                      break;                                  default:                                      if (next == settings._quoteChar)                                          sb.Append(next);                                      break;                              }                          }                      }                  } else {                      if (current == settings._quoteChar) {                          hasQuote = true;                      } else if (current == 'n') {                          index += 3;                          return null;                      }                  }                  prev = current;                  ++index;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,DecodeJSONString,The following statement contains a magic number: while (true) {                  current = ptr[index];                  if(current == '\0')                  {                      break;                  }                    if (isJustString || hasQuote) {                      if (!isJustString && current == settings._quoteChar)                      {                          next = ptr[index + 1];                          if (next != ''' && next != ' ' && next != ':' && next != '\n' && next != '\r' && next != '\t' && next != ']' && next != '}' && next != '\0')                          {                              throw new NetJSONInvalidJSONException();                          }                            ++index;                          break;                      }                      else                      {                          if (current != '\\')                          {                              sb.Append(current);                          }                          else                          {                              next = ptr[++index];                              switch (next)                              {                                  case 'r': sb.Append('\r'); break;                                  case 'n': sb.Append('\n'); break;                                  case 't': sb.Append('\t'); break;                                  case 'f': sb.Append('\f'); break;                                  case '\\': sb.Append('\\'); break;                                  case '/': sb.Append('/'); break;                                  case 'b': sb.Append('\b'); break;                                  case 'u':                                      const int offset = 0x10000;                                      var str = new string(ptr' index + 1' 4);                                      var uu = Int32.Parse(str' NumberStyles.HexNumber);                                                                            if(uu < offset)                                      {                                          sb.Append((char)uu);                                      }                                      else                                      {                                          sb.Append((char)(((uu - offset) >> 10) + 0xD800))                                              .Append((char)((uu - offset) % 0x0400 + 0xDC00));                                      }                                        index += 4;                                      break;                                  default:                                      if (next == settings._quoteChar)                                          sb.Append(next);                                      break;                              }                          }                      }                  } else {                      if (current == settings._quoteChar) {                          hasQuote = true;                      } else if (current == 'n') {                          index += 3;                          return null;                      }                  }                  prev = current;                  ++index;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,DecodeJSONString,The following statement contains a magic number: while (true) {                  current = ptr[index];                  if(current == '\0')                  {                      break;                  }                    if (isJustString || hasQuote) {                      if (!isJustString && current == settings._quoteChar)                      {                          next = ptr[index + 1];                          if (next != ''' && next != ' ' && next != ':' && next != '\n' && next != '\r' && next != '\t' && next != ']' && next != '}' && next != '\0')                          {                              throw new NetJSONInvalidJSONException();                          }                            ++index;                          break;                      }                      else                      {                          if (current != '\\')                          {                              sb.Append(current);                          }                          else                          {                              next = ptr[++index];                              switch (next)                              {                                  case 'r': sb.Append('\r'); break;                                  case 'n': sb.Append('\n'); break;                                  case 't': sb.Append('\t'); break;                                  case 'f': sb.Append('\f'); break;                                  case '\\': sb.Append('\\'); break;                                  case '/': sb.Append('/'); break;                                  case 'b': sb.Append('\b'); break;                                  case 'u':                                      const int offset = 0x10000;                                      var str = new string(ptr' index + 1' 4);                                      var uu = Int32.Parse(str' NumberStyles.HexNumber);                                                                            if(uu < offset)                                      {                                          sb.Append((char)uu);                                      }                                      else                                      {                                          sb.Append((char)(((uu - offset) >> 10) + 0xD800))                                              .Append((char)((uu - offset) % 0x0400 + 0xDC00));                                      }                                        index += 4;                                      break;                                  default:                                      if (next == settings._quoteChar)                                          sb.Append(next);                                      break;                              }                          }                      }                  } else {                      if (current == settings._quoteChar) {                          hasQuote = true;                      } else if (current == 'n') {                          index += 3;                          return null;                      }                  }                  prev = current;                  ++index;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,DecodeJSONString,The following statement contains a magic number: while (true) {                  current = ptr[index];                  if(current == '\0')                  {                      break;                  }                    if (isJustString || hasQuote) {                      if (!isJustString && current == settings._quoteChar)                      {                          next = ptr[index + 1];                          if (next != ''' && next != ' ' && next != ':' && next != '\n' && next != '\r' && next != '\t' && next != ']' && next != '}' && next != '\0')                          {                              throw new NetJSONInvalidJSONException();                          }                            ++index;                          break;                      }                      else                      {                          if (current != '\\')                          {                              sb.Append(current);                          }                          else                          {                              next = ptr[++index];                              switch (next)                              {                                  case 'r': sb.Append('\r'); break;                                  case 'n': sb.Append('\n'); break;                                  case 't': sb.Append('\t'); break;                                  case 'f': sb.Append('\f'); break;                                  case '\\': sb.Append('\\'); break;                                  case '/': sb.Append('/'); break;                                  case 'b': sb.Append('\b'); break;                                  case 'u':                                      const int offset = 0x10000;                                      var str = new string(ptr' index + 1' 4);                                      var uu = Int32.Parse(str' NumberStyles.HexNumber);                                                                            if(uu < offset)                                      {                                          sb.Append((char)uu);                                      }                                      else                                      {                                          sb.Append((char)(((uu - offset) >> 10) + 0xD800))                                              .Append((char)((uu - offset) % 0x0400 + 0xDC00));                                      }                                        index += 4;                                      break;                                  default:                                      if (next == settings._quoteChar)                                          sb.Append(next);                                      break;                              }                          }                      }                  } else {                      if (current == settings._quoteChar) {                          hasQuote = true;                      } else if (current == 'n') {                          index += 3;                          return null;                      }                  }                  prev = current;                  ++index;              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeSetValueFor,The following statement contains a magic number: il.Emit(OpCodes.Ldarg' 4);
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeSetValueFor,The following statement contains a magic number: for (var i = 0; i < props.Length; i++) {                  var mem = props[i];                  var member = mem.Member;                  var prop = member.MemberType == MemberTypes.Property ? member as PropertyInfo : null;                  var field = member.MemberType == MemberTypes.Field ? member as FieldInfo : null;                  var attr = mem.Attribute;                  MethodInfo setter = null;                  var isProp = prop != null;                    var canWrite = isProp ? prop.CanWrite : false;                  var propName = member.Name;                  var conditionLabel = il.DefineLabel();                  var propType = isProp ? prop.PropertyType : field.FieldType;                  var originPropType = propType;                  var nullableType = propType.GetNullableType();                  var isNullable = nullableType != null;                  propType = isNullable ? nullableType : propType;                    if (canWrite) {                      setter = prop.GetSetMethod();                      if (setter == null) {                          setter = type.GetMethod(String.Concat("set_"' propName)' MethodBinding);                      }                  }                    var isPublicSetter = canWrite && setter.IsPublic;                    il.Emit(OpCodes.Ldarg_3);                  il.Emit(OpCodes.Ldstr' attr != null ? (attr.Name ?? propName) : propName);                    il.Emit(OpCodes.Ldloc' caseLocal);                  il.Emit(OpCodes.Call' _stringEqualCompare);                    il.Emit(OpCodes.Brfalse' conditionLabel);                    if (!Optimized) {                      //il.Emit(OpCodes.Ldarg_0);                      //il.Emit(OpCodes.Ldarg_1);                      //il.Emit(OpCodes.Ldarg' 4);                      //il.Emit(OpCodes.Call' GenerateExtractValueFor(typeBuilder' propType));                      //if (isProp) {                      //    if (setter != null) {                      //        if (!isPublicSetter) {                      //            if (propType.IsValueType)                      //                il.Emit(OpCodes.Box' propType);                      //            il.Emit(OpCodes.Ldtoken' setter);                      //            il.Emit(OpCodes.Call' _methodGetMethodFromHandle);                      //            il.Emit(OpCodes.Call' _setterPropertyValueMethod.MakeGenericMethod(type));                      //        } else                      //            il.Emit(isTypeValueType ? OpCodes.Call : OpCodes.Callvirt' setter);                      //    } else {                      //        il.Emit(OpCodes.Pop);                      //        il.Emit(OpCodes.Pop);                      //    }                      //} else il.Emit(OpCodes.Stfld' field);                  } else {                      var propValue = il.DeclareLocal(originPropType);                      var isValueType = propType.GetTypeInfo().IsValueType;                      var isPrimitiveType = propType.IsPrimitiveType();                      var isStruct = isValueType && !isPrimitiveType;                      var propNullLabel = !isNullable ? il.DefineLabel() : default(Label);                      var nullablePropValue = isNullable ? il.DeclareLocal(originPropType) : null;                      var equalityMethod = propType.GetMethod("op_Equality");                          il.Emit(OpCodes.Ldarg_0);                      il.Emit(OpCodes.Ldarg_1);                      il.Emit(OpCodes.Ldarg' 4);                      il.Emit(OpCodes.Call' GenerateExtractValueFor(typeBuilder' originPropType));                        il.Emit(OpCodes.Stloc' propValue);                        if (!isNullable) {                          if (isStruct)                              il.Emit(OpCodes.Ldloca' propValue);                          else                              il.Emit(OpCodes.Ldloc' propValue);                            if (isValueType && isPrimitiveType) {                              LoadDefaultValueByType(il' propType);                          } else {                              if (!isValueType)                                  il.Emit(OpCodes.Ldnull);                          }                            if (equalityMethod != null) {                              il.Emit(OpCodes.Call' equalityMethod);                              il.Emit(OpCodes.Brtrue' propNullLabel);                          } else {                              if (isStruct) {                                    var tempValue = il.DeclareLocal(propType);                                    il.Emit(OpCodes.Ldloca' tempValue);                                  il.Emit(OpCodes.Initobj' propType);                                  il.Emit(OpCodes.Ldloc' tempValue);                                  il.Emit(OpCodes.Box' propType);                                  il.Emit(OpCodes.Constrained' propType);                                    il.Emit(OpCodes.Callvirt' _objectEquals);                                    il.Emit(OpCodes.Brtrue' propNullLabel);                                } else                                  il.Emit(OpCodes.Beq' propNullLabel);                          }                      }                        il.Emit(OpCodes.Ldarg_2);                      il.Emit(OpCodes.Ldloc' propValue);                      //if (isNullable) {                      //    il.Emit(OpCodes.Newobj' _nullableType.MakeGenericType(propType).GetConstructor(new[] { propType }));                      //}                        if (isProp) {                          if (setter != null) {                              if (!setter.IsPublic) {                                  if (propType.GetTypeInfo().IsValueType)                                      il.Emit(OpCodes.Box' isNullable ? prop.PropertyType : propType);                                  il.Emit(OpCodes.Ldtoken' setter);                                  il.Emit(OpCodes.Call' _methodGetMethodFromHandle);                                  il.Emit(OpCodes.Call' _setterPropertyValueMethod.MakeGenericMethod(type));                              } else                                  il.Emit(isTypeValueType ? OpCodes.Call : OpCodes.Callvirt' setter);                          } else {                              il.Emit(OpCodes.Pop);                              il.Emit(OpCodes.Pop);                          }                        } else il.Emit(OpCodes.Stfld' field);                        il.Emit(OpCodes.Ret);                        if (!isNullable)                          il.MarkLabel(propNullLabel);                  }                    il.Emit(OpCodes.Ret);                    il.MarkLabel(conditionLabel);              }
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateTypeSetValueFor,The following statement contains a magic number: il.Emit(OpCodes.Ldarg' 4);
Magic Number,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,GenerateGetClassOrDictFor,The following statement contains a magic number: ILFixedWhile(il' whileAction: (msil' current' ptr' startLoop' bLabel) => {                    //il.Emit(OpCodes.Ldloc' current);                  //il.Emit(OpCodes.Ldc_I4' (int)' ');                  //il.Emit(OpCodes.Beq' countLabel);                    il.Emit(OpCodes.Ldc_I4_0);                  il.Emit(OpCodes.Stloc' isTag);                    //if (count == 0 && current == 'n') {                  //    index += 3;                  //    return null;                  //}                  il.Emit(OpCodes.Ldc_I4_0);                  il.Emit(OpCodes.Ldloc' count);                  il.Emit(OpCodes.Bne_Un' isNullObjectLabel);                    il.Emit(OpCodes.Ldc_I4' (int)'n');                  il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Bne_Un' isNullObjectLabel);                    IncrementIndexRef(il' count: 3);                    if (isTypeValueType) {                      var nullLocal = il.DeclareLocal(type);                        il.Emit(OpCodes.Ldloca' nullLocal);                      il.Emit(OpCodes.Initobj' type);                        il.Emit(OpCodes.Ldloc' nullLocal);                  } else {                      il.Emit(OpCodes.Ldnull);                  }                    il.Emit(OpCodes.Ret);                    il.MarkLabel(isNullObjectLabel);                      //current == '{' || current == '}'                  //il.Emit(OpCodes.Ldloc' current);                  //il.Emit(OpCodes.Call' _isCharTag);                  //il.Emit(OpCodes.Brfalse' openCloseBraceLabel);                                      var currentisCharTagLabel = il.DefineLabel();                  var countCheckLabel = il.DefineLabel();                    //current == '{' || current == '}';                    il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Ldc_I4' (int)'{');                  il.Emit(OpCodes.Beq' currentisCharTagLabel);                    il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Ldc_I4' (int)'}');                  il.Emit(OpCodes.Bne_Un' openCloseBraceLabel);                  il.MarkLabel(currentisCharTagLabel);                                    //quotes == 0                  il.Emit(OpCodes.Ldc_I4_0);                  il.Emit(OpCodes.Ldloc' quotes);                  il.Emit(OpCodes.Bne_Un' openCloseBraceLabel);                    //isTag = true                  il.Emit(OpCodes.Ldc_I4_1);                  il.Emit(OpCodes.Stloc' isTag);                    il.MarkLabel(openCloseBraceLabel);                    //if(isTag == true)                  il.Emit(OpCodes.Ldloc' isTag);                  il.Emit(OpCodes.Brfalse' isTagLabel);                    //count++                  il.Emit(OpCodes.Ldloc' count);                  il.Emit(OpCodes.Ldc_I4_1);                  il.Emit(OpCodes.Add);                  il.Emit(OpCodes.Stloc' count);                    il.MarkLabel(isTagLabel);                      //if(count > 0 && flag == false && quoteCount == 0 && char == ':')                  //Err' No quotes was found                  il.Emit(OpCodes.Ldloc' count);                  il.Emit(OpCodes.Ldc_I4_0);                  il.Emit(OpCodes.Ble' countCheckLabel);                  il.Emit(OpCodes.Ldloc' isTag);                  il.Emit(OpCodes.Brtrue' countCheckLabel);                  il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Ldc_I4' (int)':');                  il.Emit(OpCodes.Bne_Un' countCheckLabel);                  il.Emit(OpCodes.Ldloc' foundQuote);                  il.Emit(OpCodes.Brtrue' countCheckLabel);                    il.Emit(OpCodes.Newobj' _invalidJSONCtor);                  il.Emit(OpCodes.Throw);                    il.MarkLabel(countCheckLabel);                    //count == 2                  il.Emit(OpCodes.Ldloc' count);                  il.Emit(OpCodes.Ldc_I4_2);                  il.Emit(OpCodes.Bne_Un' countLabel);                    //index += 1;                  IncrementIndexRef(msil);                    il.Emit(OpCodes.Br' bLabel);                    il.MarkLabel(countLabel);                      //!isTag                  il.Emit(OpCodes.Ldloc' isTag);                  il.Emit(OpCodes.Brtrue' isNotTagLabel);                    var isStringTypeLabel1 = il.DefineLabel();                    il.Emit(OpCodes.Ldloc' isStringTypeLocal);                  il.Emit(OpCodes.Brfalse' isStringTypeLabel1);                  GenerateGetClassOrDictStringType(typeBuilder' type' il' settings' foundQuote' prev' startIndex' quotes' isDict' keyType' valueType' isKeyValuePair' isExpandoObject' isTuple' tupleArguments' tupleCount' obj' isTypeValueType' tupleCountLocal' dictSetItem' current' ptr' startLoop);                  il.MarkLabel(isStringTypeLabel1);                    if (dictSetItem != null) {                      var isStringTypeLabel2 = il.DefineLabel();                      il.Emit(OpCodes.Ldloc' isStringTypeLocal);                      il.Emit(OpCodes.Brtrue' isStringTypeLabel2);                      GenerateGetClassOrDictNonStringType(typeBuilder' il' settings' startIndex' keyType' valueType' isKeyValuePair' isExpandoObject' obj' dictSetItem' current' ptr);                      il.MarkLabel(isStringTypeLabel2);                  }                    il.MarkLabel(isNotTagLabel);                    il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Stloc' prev);                }' needBreak: true'              returnAction: msil => {                  if (isTuple) {                      var toTupleMethod = _tupleContainerType.GetMethods().FirstOrDefault(x => x.Name == ToTupleStr && x.GetGenericArguments().Length == tupleCount);                      if (toTupleMethod != null) {                          toTupleMethod = toTupleMethod.MakeGenericMethod(tupleType.GetGenericArguments());                          il.Emit(OpCodes.Ldloc' obj);                          il.Emit(OpCodes.Callvirt' toTupleMethod);                      }                  } else {                      if(selectedCtor != null) {                          var sObj = il.DeclareLocal(type);                          var parameters = selectedCtor.GetParameters();                          var props = type.GetTypeProperties();                          var paramProps = props.Where(x => parameters.Any(y => y.Name.Equals(x.Member.Name' StringComparison.OrdinalIgnoreCase)));                          var excludedParams = props.Where(x => !parameters.Any(y => y.Name.Equals(x.Member.Name' StringComparison.OrdinalIgnoreCase)));                            if (paramProps.Any()) {                              foreach (var parameter in paramProps) {                                  il.Emit(OpCodes.Ldloc' obj);                                  GetMemberInfoValue(il' parameter);                              }                                il.Emit(OpCodes.Newobj' selectedCtor);                              il.Emit(OpCodes.Stloc' sObj);                                //Set field/prop not accounted for in constructor parameters                              foreach (var param in excludedParams) {                                  il.Emit(OpCodes.Ldloc' sObj);                                  il.Emit(OpCodes.Ldloc' obj);                                  GetMemberInfoValue(il' param);                                  var prop = param.Member.MemberType == MemberTypes.Property ? param.Member as PropertyInfo : null;                                  if (prop != null) {                                      var setter = prop.GetSetMethod();                                      if (setter == null) {                                          setter = type.GetMethod(string.Concat("set_"' prop.Name)' MethodBinding);                                      }                                      var propType = prop.PropertyType;                                        if (!setter.IsPublic) {                                          if (propType.GetTypeInfo().IsValueType)                                              il.Emit(OpCodes.Box' propType);                                          il.Emit(OpCodes.Ldtoken' setter);                                          il.Emit(OpCodes.Call' _methodGetMethodFromHandle);                                          il.Emit(OpCodes.Call' _setterPropertyValueMethod.MakeGenericMethod(type));                                      } else                                          il.Emit(isTypeValueType ? OpCodes.Call : OpCodes.Callvirt' setter);                                  } else                                      il.Emit(OpCodes.Stfld' (FieldInfo)param.Member);                              }                                il.Emit(OpCodes.Ldloc' sObj);                          } else                              il.Emit(OpCodes.Ldloc' obj);                      }else                          il.Emit(OpCodes.Ldloc' obj);                  }              }'              beginIndexIf: (msil' current) => {                  il.Emit(OpCodes.Ldloc' current);                  il.Emit(OpCodes.Ldc_I4' (int)'}');                  il.Emit(OpCodes.Beq' incLabel);              }'              endIndexIf: (msil' current) => {                  il.MarkLabel(incLabel);              });
Duplicate Code,NetJSON,NetJSON,C:\repos\rpgmaker_NetJSON\NetJSON\NetJSON.cs,ReadStringToEnumFor,The method contains a code clone-set at the following line numbers (starting from the method definition): ((44' 63)' (89' 108))
