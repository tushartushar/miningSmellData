Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DeviceHive.Device,DeviceBase,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Device\DeviceBase.cs,DeviceBase,Cyclomatic complexity of the method is 8
Complex Method,DeviceHive.Device,RestfulDeviceService,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Service\RestfulDeviceService.cs,RegisterDevice,Cyclomatic complexity of the method is 11
Complex Method,DeviceHive.Device,RestfulDeviceService,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Service\RestfulDeviceService.cs,UpdateDevice,Cyclomatic complexity of the method is 10
Long Parameter List,DeviceHive.Device,Device,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Service\Device.cs,Device,The method has 7 parameters. Parameters: id' key' name' status' data' network' deviceClass
Long Parameter List,DeviceHive.Device,RestfulDeviceService,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Service\RestfulDeviceService.cs,Put,The method has 5 parameters. Parameters: url' deviceId' deviceKey' obj' nullValueHandling
Long Statement,DeviceHive.Device,DeviceHost,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Device\DeviceHost.cs,Start,The length of the statement  "                _tasks.Add(Task.Factory.StartNew(() => MainDeviceTask(deviceCopy)' token' TaskCreationOptions.LongRunning' TaskScheduler.Default)); " is 131.
Long Statement,DeviceHive.Device,DeviceHost,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Device\DeviceHost.cs,SendStatusUpdate,The length of the statement  "                Logger.Error(string.Format("Exception while updating device {1} ({2}) status to '{0}'"' status' sender.ID' sender.Name)' ex); " is 125.
Long Statement,DeviceHive.Device,DeviceHost,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Device\DeviceHost.cs,SendNotification,The length of the statement  "                Logger.Error(string.Format("Exception while sending notification '{0}' from device {1} ({2})"' notification.Name' sender.ID' sender.Name)' ex); " is 143.
Long Statement,DeviceHive.Device,DeviceHost,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Device\DeviceHost.cs,RegisterDevice,The length of the statement  "                Logger.Error(string.Format("Exception while registering device {0} ({1})' rethrowing exception"' device.ID' device.Name)' ex); " is 126.
Long Statement,DeviceHive.Device,DeviceHost,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Device\DeviceHost.cs,DispatchCommandTask,The length of the statement  "                Logger.Error(string.Format("Exception while handling a command '{0}' by device {1} ({2})"' cCommand.Name' device.ID' device.Name)' ex); " is 135.
Long Statement,DeviceHive.Device,RestfulDeviceService,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Service\RestfulDeviceService.cs,RegisterDevice,The length of the statement  "            var d = new Device(null' device.Key' device.Name' device.Status' device.Data' device.Network' device.DeviceClass) { Equipment = device.Equipment }; " is 147.
Long Statement,DeviceHive.Device,RestfulDeviceService,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Service\RestfulDeviceService.cs,UpdateDevice,The length of the statement  "            var d = new Device(null' device.Key' device.Name' device.Status' device.Data' device.Network' device.DeviceClass) { Equipment = device.Equipment }; " is 147.
Empty Catch Block,DeviceHive.Device,DeviceHost,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Device\DeviceHost.cs,Stop,The method has an empty catch block.
Magic Number,DeviceHive.Device,DeviceBase,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Device\DeviceBase.cs,DeviceBase,The following statement contains a magic number: foreach (var method in GetType().PublicGetMethods().Where(p => p.IsDefined(typeof(DeviceCommandAttribute)' true)))              {                  if (method.GetParameters().Length != 2)                      throw new InvalidOperationException(string.Format("The action method '{0}' must include two parameters: DeviceCommand (or any custom strongly-typed object with ParameterAttribute attributes) and CancellationToken"' method.Name));                  if (method.GetParameters()[1].ParameterType != typeof(CancellationToken))                      throw new InvalidOperationException(string.Format("The second parameter of action method '{0}' must be of CancellationToken type"' method.Name));                  if (!typeof(DeviceCommandResult).IsAssignableFrom(method.ReturnType))                      throw new InvalidOperationException(string.Format("The action method '{0}' must return DeviceCommandResult object"' method.Name));                                    var commandAttribute = method.GetAttributes<DeviceCommandAttribute>().First();                  if (_deviceCommands.ContainsKey(commandAttribute.Name))                      throw new InvalidOperationException(string.Format("There several action methods with '{0}' command name"' commandAttribute.Name));                  _deviceCommands[commandAttribute.Name] = method;              }
Magic Number,DeviceHive.Device,DeviceHost,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Device\DeviceHost.cs,SubscribeToCommands,The following statement contains a magic number: if (device.ListenCommands)              {                  while (true)                  {                      try                      {                          DeviceClient.SubscribeToCommands(device.ID' device.Key);                          break;                      }                      catch (DeviceServiceException e)                      {                          Logger.ErrorFormat("Error when subscribing to device {0} ({1}) commands: {2}"'                              device.ID' device.Name' e);                            // retry with small wait                          Thread.Sleep(100);                      }                  }              }
Magic Number,DeviceHive.Device,CommandSubscriptionTask,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Service\RestfulDeviceService.cs,CommandSubscriptionTask,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      while (true)                      {                          try                          {                              var сommands = restfulDeviceService.PollCommands(deviceId' deviceKey'                                  timestamp' _cancellationTokenSource.Token);                                foreach (var command in сommands)                              {                                  var eventArgs = new CommandEventArgs(deviceId' command);                                  restfulDeviceService.OnCommandInserted(eventArgs);                              }                                timestamp = сommands.Max(c => c.Timestamp ?? timestamp);                          }                          catch (OperationCanceledException)                          {                              return;                          }                          catch (Exception e)                          {                              LogManager.GetLogger(typeof(RestfulDeviceService))                                  .Error("Error on command polling. Restart polling"' e);                              Thread.Sleep(1000); // retry with small wait                          }                      }                  });
Magic Number,DeviceHive.Device,WebSocketDeviceService,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Service\WebSocketDeviceService.cs,WebSocketDeviceService,The following statement contains a magic number: Timeout = 30000;
Missing Default,DeviceHive.Device,WebSocketDeviceService,C:\repos\devicehive_devicehive-.net\src\Device\DeviceHive.Device\Service\WebSocketDeviceService.cs,HandleMessage,The following switch statement is missing a default case: switch (action)              {                  case "command/insert":                      HandleCommandInsert(json);                      return;              }
