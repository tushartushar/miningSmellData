Implementation smell,Namespace,Class,File,Method,Description
Long Method,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,LoadState,The method has 135 lines of code.
Long Method,DeviceHive.ManagerWin8.Data,SampleDataSource,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,SampleDataSource,The method has 271 lines of code.
Complex Method,DeviceHive.ManagerWin8.Common,RichTextColumns,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\Common\RichTextColumns.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Long Parameter List,DeviceHive.ManagerWin8.Data,SampleDataCommon,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,SampleDataCommon,The method has 5 parameters. Parameters: uniqueId' title' subtitle' imagePath' description
Long Parameter List,DeviceHive.ManagerWin8.Data,SampleDataItem,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,SampleDataItem,The method has 7 parameters. Parameters: uniqueId' title' subtitle' imagePath' description' content' group
Long Parameter List,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,SampleDataGroup,The method has 5 parameters. Parameters: uniqueId' title' subtitle' imagePath' description
Long Identifier,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,,The length of the parameter commandResultCancellatonSource is 30.
Long Statement,DeviceHive.ManagerWin8,App,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\App.xaml.cs,App_CommandsRequested,The length of the statement  "            args.Request.ApplicationCommands.Add(new SettingsCommand("CloudConnection"' "Cloud connection"' (x) => ShowCloudSettings())); " is 125.
Long Statement,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,StartPollNotifications,The length of the statement  "            notificationsPollSubscription = await ClientService.Current.AddNotificationSubscriptionAsync(new[] { deviceId }' null' async (notificationPolled) => " is 148.
Long Statement,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,StartPollCommands,The length of the statement  "            commandsPollSubscription = await ClientService.Current.AddCommandSubscriptionAsync(new[] { deviceId }' null' async (commandPolled) => " is 133.
Long Statement,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,SendCommand_Tapped,The length of the statement  "                    await ClientService.Current.SendCommandAsync(deviceId' command' CommandResultCallback' commandResultCancellatonSource.Token); " is 125.
Long Statement,DeviceHive.ManagerWin8,MainPage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MainPage.xaml.cs,LoadDevices,The length of the statement  "                    new MessageDialog(ex.Message + (ex.InnerException != null ? "\n\n" + ex.InnerException.Message : "")' "Error").ShowAsync(); " is 123.
Long Statement,DeviceHive.ManagerWin8.Common,LayoutAwarePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\Common\LayoutAwarePage.cs,OnNavigatedTo,The length of the statement  "                this.LoadState(e.Parameter' frameState.ContainsKey(this._pageKey) ? (Dictionary<String' Object>)frameState[this._pageKey] : null); " is 130.
Long Statement,DeviceHive.ManagerWin8.Common,SuspensionManager,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "                StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,DeviceHive.ManagerWin8.Common,SuspensionManager,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Long Statement,DeviceHive.ManagerWin8.Data,SampleDataSource,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,GetGroups,The length of the statement  "            if (!uniqueId.Equals("AllGroups")) throw new ArgumentException("Only 'AllGroups' is supported as a collection of groups"); " is 122.
Long Statement,DeviceHive.ManagerWin8.Data,SampleDataSource,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,GetItem,The length of the statement  "            var matches = _sampleDataSource.AllGroups.SelectMany(group => group.Items).Where((item) => item.UniqueId.Equals(uniqueId)); " is 123.
Complex Conditional,DeviceHive.ManagerWin8.Common,LayoutAwarePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,DeviceHive.ManagerWin8.Common,LayoutAwarePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,DeviceHive.ManagerWin8.Common,LayoutAwarePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Empty Catch Block,DeviceHive.ManagerWin8,App,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\App.xaml.cs,OnLaunched,The method has an empty catch block.
Empty Catch Block,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,LoadState,The method has an empty catch block.
Empty Catch Block,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,LoadState,The method has an empty catch block.
Magic Number,DeviceHive.ManagerWin8,App,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\App.xaml.cs,ShowCloudSettings,The following statement contains a magic number: settings.HeaderBackground = new SolidColorBrush(Color.FromArgb(255' 26' 160' 255));
Magic Number,DeviceHive.ManagerWin8,App,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\App.xaml.cs,ShowCloudSettings,The following statement contains a magic number: settings.HeaderBackground = new SolidColorBrush(Color.FromArgb(255' 26' 160' 255));
Magic Number,DeviceHive.ManagerWin8,App,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\App.xaml.cs,ShowCloudSettings,The following statement contains a magic number: settings.HeaderBackground = new SolidColorBrush(Color.FromArgb(255' 26' 160' 255));
Magic Number,DeviceHive.ManagerWin8,App,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\App.xaml.cs,ShowCloudSettings,The following statement contains a magic number: settings.HeaderBackground = new SolidColorBrush(Color.FromArgb(255' 26' 160' 255));
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,LoadState,The following statement contains a magic number: filterNotificationsStart = DateTime.Now.AddDays(-7);
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,LoadState,The following statement contains a magic number: filterCommandsStart = DateTime.Now.AddDays(-7);
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,ShowFilterFlyout,The following statement contains a magic number: flyOut.FlyoutPresenterStyle.Setters.Add(new Setter(FlyoutPresenter.PaddingProperty' 10));
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,ShowFilterFlyout,The following statement contains a magic number: filterPanel.Margin = new Thickness(10);
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,ShowFilterFlyout,The following statement contains a magic number: filterPanel.Children.Add(new TextBlock() { Text = "Start time"' FontSize = 14.8 });
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,ShowFilterFlyout,The following statement contains a magic number: filterPanel.Children.Add(new TextBlock() { Text = "End time"' FontSize = 14.8' Margin = new Thickness(0' 10' 0' 0) });
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,ShowFilterFlyout,The following statement contains a magic number: filterPanel.Children.Add(new TextBlock() { Text = "End time"' FontSize = 14.8' Margin = new Thickness(0' 10' 0' 0) });
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,ShowFilterFlyout,The following statement contains a magic number: Button filterDoButton = new Button() { Content = "Filter"' Margin = new Thickness(0' 10' 0' 0) };
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,LoadNotifications,The following statement contains a magic number: var list = new IncrementalLoadingCollection<Notification>(async (take' skip) =>              {                  filter.Skip = (int)skip;                  filter.Take = (int)take;                  try                  {                      Debug.WriteLine("NTF LOAD START");                      var notifications = await ClientService.Current.GetNotificationsAsync(deviceId' filter);                      Debug.WriteLine("NTF LOAD END");                      return notifications;                  }                  catch (Exception ex)                  {                      Dispatcher.RunAsync(CoreDispatcherPriority.Normal' () =>                      {                          new MessageDialog(ex.Message' "Error").ShowAsync();                      });                      throw ex;                  }              }' 20);
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,LoadCommands,The following statement contains a magic number: var list = new IncrementalLoadingCollection<Command>(async (take' skip) =>              {                  filter.Skip = (int)skip;                  filter.Take = (int)take;                  try                  {                      Debug.WriteLine("CMD LOAD START");                      var commands = await ClientService.Current.GetCommandsAsync(deviceId' filter);                      Debug.WriteLine("CMD LOAD END");                      return commands;                  }                  catch (Exception ex)                  {                      Dispatcher.RunAsync(CoreDispatcherPriority.Normal' () =>                      {                          new MessageDialog(ex.Message' "Error").ShowAsync();                      });                      throw ex;                  }              }' 20);
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,SendCommand_Tapped,The following statement contains a magic number: flyOut.FlyoutPresenterStyle.Setters.Add(new Setter(FlyoutPresenter.PaddingProperty' 10));
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,SendCommand_Tapped,The following statement contains a magic number: panel.Width = 300;
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,SendCommand_Tapped,The following statement contains a magic number: panel.Margin = new Thickness(10);
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,SendCommand_Tapped,The following statement contains a magic number: panel.Children.Add(new TextBlock() { Text = "Command name"' FontSize = 14.8 });
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,SendCommand_Tapped,The following statement contains a magic number: panel.Children.Add(new TextBlock() { Text = "Params"' FontSize = 14.8' Margin = new Thickness(0' 10' 0' 0) });
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,SendCommand_Tapped,The following statement contains a magic number: panel.Children.Add(new TextBlock() { Text = "Params"' FontSize = 14.8' Margin = new Thickness(0' 10' 0' 0) });
Magic Number,DeviceHive.ManagerWin8,DevicePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DevicePage.xaml.cs,SendCommand_Tapped,The following statement contains a magic number: Button sendButton = new Button() { Content = "Send"' Margin = new Thickness(0' 10' 0' 0) };
Magic Number,DeviceHive.ManagerWin8.Common,LayoutAwarePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,DeviceHive.ManagerWin8.Common,LayoutAwarePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,DeviceHive.ManagerWin8.Common,LayoutAwarePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,DeviceHive.ManagerWin8.Common,LayoutAwarePage,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetMarginForCurrentView,The following statement contains a magic number: if (isSnapped)                  return 20;
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetMarginForCurrentView,The following statement contains a magic number: if (isPortrait)                  return 100;
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetMarginForCurrentView,The following statement contains a magic number: return 120;
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: const double strokeWidth = 2.0;
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine = new Line                                       {                                           IsHitTestVisible = false'                                           Stroke = brush'                                           X1 = 0'                                           X2 = max'                                           Y1 = 100 + (strokeWidth/2)'                                           Y2 = 100 + (strokeWidth/2)'                                           StrokeThickness = strokeWidth'                                       };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine = new Line                                       {                                           IsHitTestVisible = false'                                           Stroke = brush'                                           X1 = 0'                                           X2 = max'                                           Y1 = 100 + (strokeWidth/2)'                                           Y2 = 100 + (strokeWidth/2)'                                           StrokeThickness = strokeWidth'                                       };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine = new Line                                       {                                           IsHitTestVisible = false'                                           Stroke = brush'                                           X1 = 0'                                           X2 = max'                                           Y1 = 100 + (strokeWidth/2)'                                           Y2 = 100 + (strokeWidth/2)'                                           StrokeThickness = strokeWidth'                                       };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine = new Line                                       {                                           IsHitTestVisible = false'                                           Stroke = brush'                                           X1 = 0'                                           X2 = max'                                           Y1 = 100 + (strokeWidth/2)'                                           Y2 = 100 + (strokeWidth/2)'                                           StrokeThickness = strokeWidth'                                       };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine2 = new Line                                        {                                            IsHitTestVisible = false'                                            Stroke = brush'                                            X1 = 0'                                            X2 = max'                                            Y1 = 140 + (strokeWidth/2)'                                            Y2 = 140 + (strokeWidth/2)'                                            StrokeThickness = strokeWidth'                                        };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine2 = new Line                                        {                                            IsHitTestVisible = false'                                            Stroke = brush'                                            X1 = 0'                                            X2 = max'                                            Y1 = 140 + (strokeWidth/2)'                                            Y2 = 140 + (strokeWidth/2)'                                            StrokeThickness = strokeWidth'                                        };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine2 = new Line                                        {                                            IsHitTestVisible = false'                                            Stroke = brush'                                            X1 = 0'                                            X2 = max'                                            Y1 = 140 + (strokeWidth/2)'                                            Y2 = 140 + (strokeWidth/2)'                                            StrokeThickness = strokeWidth'                                        };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine2 = new Line                                        {                                            IsHitTestVisible = false'                                            Stroke = brush'                                            X1 = 0'                                            X2 = max'                                            Y1 = 140 + (strokeWidth/2)'                                            Y2 = 140 + (strokeWidth/2)'                                            StrokeThickness = strokeWidth'                                        };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var verticalLine = new Line                                     {                                         IsHitTestVisible = false'                                         Stroke = brush'                                         X1 = margin - (strokeWidth / 2)'                                         X2 = margin - (strokeWidth / 2)'                                         Y1 = 0'                                         Y2 = max'                                         StrokeThickness = strokeWidth'                                     };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var verticalLine = new Line                                     {                                         IsHitTestVisible = false'                                         Stroke = brush'                                         X1 = margin - (strokeWidth / 2)'                                         X2 = margin - (strokeWidth / 2)'                                         Y1 = 0'                                         Y2 = max'                                         StrokeThickness = strokeWidth'                                     };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine = new Line                                             {                                                 IsHitTestVisible = false'                                                 Stroke = brush'                                                 X1 = 0'                                                 X2 = max'                                                 Y1 = height - 130 + (strokeWidth/2)'                                                 Y2 = height - 130 + (strokeWidth/2)'                                                 StrokeThickness = strokeWidth'                                             };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine = new Line                                             {                                                 IsHitTestVisible = false'                                                 Stroke = brush'                                                 X1 = 0'                                                 X2 = max'                                                 Y1 = height - 130 + (strokeWidth/2)'                                                 Y2 = height - 130 + (strokeWidth/2)'                                                 StrokeThickness = strokeWidth'                                             };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine = new Line                                             {                                                 IsHitTestVisible = false'                                                 Stroke = brush'                                                 X1 = 0'                                                 X2 = max'                                                 Y1 = height - 130 + (strokeWidth/2)'                                                 Y2 = height - 130 + (strokeWidth/2)'                                                 StrokeThickness = strokeWidth'                                             };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine = new Line                                             {                                                 IsHitTestVisible = false'                                                 Stroke = brush'                                                 X1 = 0'                                                 X2 = max'                                                 Y1 = height - 130 + (strokeWidth/2)'                                                 Y2 = height - 130 + (strokeWidth/2)'                                                 StrokeThickness = strokeWidth'                                             };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine2 = new Line                                              {                                                  IsHitTestVisible = false'                                                  Stroke = brush'                                                  X1 = 0'                                                  X2 = max'                                                  Y1 = height - 50 + (strokeWidth/2)'                                                  Y2 = height - 50 + (strokeWidth/2)'                                                  StrokeThickness = strokeWidth'                                              };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine2 = new Line                                              {                                                  IsHitTestVisible = false'                                                  Stroke = brush'                                                  X1 = 0'                                                  X2 = max'                                                  Y1 = height - 50 + (strokeWidth/2)'                                                  Y2 = height - 50 + (strokeWidth/2)'                                                  StrokeThickness = strokeWidth'                                              };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine2 = new Line                                              {                                                  IsHitTestVisible = false'                                                  Stroke = brush'                                                  X1 = 0'                                                  X2 = max'                                                  Y1 = height - 50 + (strokeWidth/2)'                                                  Y2 = height - 50 + (strokeWidth/2)'                                                  StrokeThickness = strokeWidth'                                              };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine2 = new Line                                              {                                                  IsHitTestVisible = false'                                                  Stroke = brush'                                                  X1 = 0'                                                  X2 = max'                                                  Y1 = height - 50 + (strokeWidth/2)'                                                  Y2 = height - 50 + (strokeWidth/2)'                                                  StrokeThickness = strokeWidth'                                              };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: const int tileHeight = 20;
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: for (int x = margin; x < /*width*/ max; x += (tileHeight*2))              {                  for (int y = 140; y < /*height*/ max; y += (tileHeight*2))                  {                      var rect = new Rectangle                                     {                                         Width = tileHeight'                                         Height = tileHeight'                                         VerticalAlignment = VerticalAlignment.Top'                                         HorizontalAlignment = HorizontalAlignment.Left'                                         Margin = new Thickness(x' y' 0' 0)'                                         IsHitTestVisible = false'                                         Fill = brush'                                     };                      yield return rect;                  }              }
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: for (int x = margin; x < /*width*/ max; x += (tileHeight*2))              {                  for (int y = 140; y < /*height*/ max; y += (tileHeight*2))                  {                      var rect = new Rectangle                                     {                                         Width = tileHeight'                                         Height = tileHeight'                                         VerticalAlignment = VerticalAlignment.Top'                                         HorizontalAlignment = HorizontalAlignment.Left'                                         Margin = new Thickness(x' y' 0' 0)'                                         IsHitTestVisible = false'                                         Fill = brush'                                     };                      yield return rect;                  }              }
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: for (int x = margin; x < /*width*/ max; x += (tileHeight*2))              {                  for (int y = 140; y < /*height*/ max; y += (tileHeight*2))                  {                      var rect = new Rectangle                                     {                                         Width = tileHeight'                                         Height = tileHeight'                                         VerticalAlignment = VerticalAlignment.Top'                                         HorizontalAlignment = HorizontalAlignment.Left'                                         Margin = new Thickness(x' y' 0' 0)'                                         IsHitTestVisible = false'                                         Fill = brush'                                     };                      yield return rect;                  }              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Missing Default,DeviceHive.ManagerWin8.Data,SampleDataGroup,C:\repos\devicehive_devicehive-.net\src\ManagerWin8\DeviceHive.ManagerWin8\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
