Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,DeviceHive.Client,Channel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\Channel.cs,AddSubscriptionAsync,The method has 5 parameters. Parameters: type' deviceGuids' eventNames' callback' timestamp
Long Parameter List,DeviceHive.Client,LongPollingChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\LongPollingChannel.cs,PollNotificationsAsync,The method has 5 parameters. Parameters: deviceGuids' names' timestamp' waitTimeout' token
Long Parameter List,DeviceHive.Client,LongPollingChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\LongPollingChannel.cs,PollCommandsAsync,The method has 5 parameters. Parameters: deviceGuids' names' timestamp' waitTimeout' token
Long Parameter List,DeviceHive.Client,Subscription,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Internal\Subscription.cs,Subscription,The method has 5 parameters. Parameters: type' deviceGuids' eventNames' callback' timestamp
Long Identifier,DeviceHive.Client,Channel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\Channel.cs,,The length of the parameter _reconnectTaskCompletionSource is 30.
Long Statement,DeviceHive.Client,WebSocketChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\WebSocketChannel.cs,OpenAsync,The length of the statement  "                    throw new InvalidOperationException("The WebSocket connection is already open' please call the CloseAsync method before opening it again!"); " is 140.
Long Statement,DeviceHive.Client,Channel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\Channel.cs,EnsureConnectedAsync,The length of the statement  "                throw new InvalidOperationException("The channel is not active' please call the Open method and wait until it completes!");" is 123.
Long Statement,DeviceHive.Client,LongPollingChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\LongPollingChannel.cs,OpenAsync,The length of the statement  "                throw new InvalidOperationException("The connection is already open' please call the CloseAsync method before opening it again!"); " is 130.
Long Statement,DeviceHive.Client,LongPollingChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\LongPollingChannel.cs,PollCommandUpdateAsync,The length of the statement  "                var command = await RestClient.GetAsync<Command>(string.Format("device/{0}/command/{1}/poll"' deviceGuid' commandId)' token); " is 125.
Long Statement,DeviceHive.Client,RestClient,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\RestClient.cs,MakeQueryString,The length of the statement  "            return "?" + string.Join("&"' jObject.Properties().Select(p => p.Name + "=" + Uri.EscapeDataString(p.Value.ToString()))); " is 121.
Long Statement,DeviceHive.Client,RestClient,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\RestClient.cs,ReadAsAsync,The length of the statement  "                throw new DeviceHiveException("DeviceHive server returned content with unexpected content type: " + content.Headers.ContentType.MediaType); " is 139.
Complex Conditional,DeviceHive.Client,RestClient,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\RestClient.cs,ValidateResponseStatusAsync,The conditional expression  "response.StatusCode == HttpStatusCode.BadRequest ||                  response.StatusCode == HttpStatusCode.Forbidden ||                  response.StatusCode == HttpStatusCode.NotFound ||                  response.StatusCode == HttpStatusCode.MethodNotAllowed"  is complex.
Empty Catch Block,DeviceHive.Client,WebSocketChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\WebSocketChannel.cs,OpenWebSocketAsync,The method has an empty catch block.
Empty Catch Block,DeviceHive.Client,WebSocketChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\WebSocketChannel.cs,Reconnect,The method has an empty catch block.
Empty Catch Block,DeviceHive.Client,Channel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\Channel.cs,InvokeSubscriptionCallback,The method has an empty catch block.
Empty Catch Block,DeviceHive.Client,Channel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\Channel.cs,InvokeCommandCallback,The method has an empty catch block.
Magic Number,DeviceHive.Client,WebSocketChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\WebSocketChannel.cs,WebSocketChannel,The following statement contains a magic number: Timeout = 30000;
Magic Number,DeviceHive.Client,WebSocketChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\WebSocketChannel.cs,CloseAsync,The following statement contains a magic number: using (var releaser = await _lock.LockAsync())              {                  _isClosedByClient = true;                  if (State == ChannelState.Connected)                  {                      // close WebSocket' this will trigger HandleConnectionClose handler                      _webSocket.Close(1000' "Normal Closure");                      await _closeTaskCompletionSource.Task;                  }                  else if (State == ChannelState.Reconnecting)                  {                      // set channel state to Disconnected; the Reconnect wait will stop now                      SetChannelState(ChannelState.Disconnected);                  }              }
Magic Number,DeviceHive.Client,WebSocketChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\WebSocketChannel.cs,SubscriptionAdding,The following statement contains a magic number: var properties = new List<JProperty>(3);
Magic Number,DeviceHive.Client,WebSocketChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\WebSocketChannel.cs,OpenWebSocketAsync,The following statement contains a magic number: try              {                  var webSocketUrl = (await GetApiInfoAsync()).WebSocketServerUrl + "/client";                    _webSocket = new MessageWebSocket();                  _webSocket.Control.MessageType = SocketMessageType.Utf8;                  _webSocket.MessageReceived += (s' e) => Task.Run(() => HandleMessage(e));                  _webSocket.Closed += (s' e) => Task.Run(() => HandleConnectionClose());                  await _webSocket.ConnectAsync(new Uri(webSocketUrl));                    _socketWriter = new DataWriter(_webSocket.OutputStream);                    await AuthenticateAsync();                    SetChannelState(ChannelState.Connected);              }              catch              {                  try                  {                      if (_webSocket != null)                      {                          _webSocket.Close(1000' "Abnormal Closure");                      }                  }                  catch { }                  throw;              }
Magic Number,DeviceHive.Client,WebSocketChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\WebSocketChannel.cs,HandleMessage,The following statement contains a magic number: try              {                  try                  {                      reader = args.GetDataReader();                  }                  catch                  {                      try                      {                          _webSocket.Close(1001' "Abnormal Closure");                      }                      catch                      {                          HandleConnectionClose();                      }                      return;                  }                    reader.UnicodeEncoding = Windows.Storage.Streams.UnicodeEncoding.Utf8;                  message = reader.ReadString(reader.UnconsumedBufferLength);              }              finally              {                  if (reader != null)                  {                      reader.Dispose();                  }              }
Magic Number,DeviceHive.Client,WebSocketChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\WebSocketChannel.cs,Reconnect,The following statement contains a magic number: while (State != ChannelState.Connected)              {                  // wait for some time                  await Task.Delay(1000);                  if (_isClosedByClient)                      return;                    using (var releaser = await _lock.LockAsync())                  {                      try                      {                          // try opening a WebSocket connection                          await OpenWebSocketAsync();                            // restore subscriptions                          foreach (var subscription in GetSubscriptions().Cast<Subscription>())                          {                              subscription.Id = await SubscriptionAdding(subscription);                          }                            return; // reconnected                      }                      catch                      {                          // do nothing' continue reconnecting                      }                  }              }
Magic Number,DeviceHive.Client,Channel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\Channel.cs,InvokeCommandCallback,The following statement contains a magic number: if (commandCallback.Callback == null && commandCallback.WaitHandle != null)             {                 Task.WhenAny(commandCallback.WaitHandle.Task' Task.Delay(10000)).Wait();             }
Magic Number,DeviceHive.Client,LongPollingChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\LongPollingChannel.cs,LongPollingChannel,The following statement contains a magic number: CommandUpdatePollTimeout = TimeSpan.FromSeconds(30);
Missing Default,DeviceHive.Client,WebSocketChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\WebSocketChannel.cs,HandleMessage,The following switch statement is missing a default case: switch (action)                  {                      case "notification/insert":                          {                              var notification = Deserialize<DeviceNotification>(json);                              InvokeSubscriptionCallback(notification.SubscriptionId' notification.Notification.Timestamp.Value' notification);                          }                          return;                        case "command/insert":                          {                              var command = Deserialize<DeviceCommand>(json);                              InvokeSubscriptionCallback(command.SubscriptionId' command.Command.Timestamp.Value' command);                          }                          return;                        case "command/update":                          {                              var command = Deserialize<Command>((JObject)json["command"]);                              InvokeCommandCallback(command);                          }                          return;                  }
Missing Default,DeviceHive.Client,LongPollingChannel,C:\repos\devicehive_devicehive-.net\src\Client\DeviceHive.Client\Channels\LongPollingChannel.cs,SubscriptionAdded,The following switch statement is missing a default case: switch (subscription.Type)             {                 case SubscriptionType.Notification:                      subscriptionTask.Run(async () => await PollNotificationTaskMethodAsync(subscriptionTask));                     break;                 case SubscriptionType.Command:                     subscriptionTask.Run(async () => await PollCommandTaskMethodAsync(subscriptionTask));                     break;             }
