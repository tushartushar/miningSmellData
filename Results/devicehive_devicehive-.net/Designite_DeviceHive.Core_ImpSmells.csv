Implementation smell,Namespace,Class,File,Method,Description
Long Method,DeviceHive.Core.Mapping,JsonMapperConfiguration<T>,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The method has 110 lines of code.
Complex Method,DeviceHive.Core.Authentication.Providers,FacebookAuthenticationProvider,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\Providers\FacebookAuthenticationProvider.cs,AuthenticateAsync,Cyclomatic complexity of the method is 8
Complex Method,DeviceHive.Core.Authentication.Providers,GoogleAuthenticationProvider,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\Providers\GoogleAuthenticationProvider.cs,AuthenticateAsync,Cyclomatic complexity of the method is 9
Complex Method,DeviceHive.Core.Authentication.Providers,GithubAuthenticationProvider,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\Providers\GithubAuthenticationProvider.cs,AuthenticateAsync,Cyclomatic complexity of the method is 8
Long Parameter List,DeviceHive.Core.MessageLogic,MessageHandlerInfo,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageHandlerInfo.cs,MessageHandlerInfo,The method has 6 parameters. Parameters: messageHandler' notificationNames' commandNames' deviceGuids' deviceClassIds' networkIds
Long Parameter List,DeviceHive.Core.Mapping,JsonMapperEntry<T>,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperEntry.cs,JsonMapperEntry,The method has 5 parameters. Parameters: mode' jsonProperty' entityProperty' mapToJsonAction' mapToEntityAction
Long Statement,DeviceHive.Core.Authentication,AuthenticationManager,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\AuthenticationManager.cs,Initialize,The length of the statement  "                var providerConfiguration = new AuthenticationProviderConfiguration(provider.ClientId' provider.ClientSecret' provider.Argument); " is 129.
Long Statement,DeviceHive.Core.Authentication,AuthenticationManager,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\AuthenticationManager.cs,Initialize,The length of the statement  "                var providerInstance = (AuthenticationProvider)kernel.Get(providerType' new ConstructorArgument("providerConfiguration"' providerConfiguration)); " is 145.
Long Statement,DeviceHive.Core.Authentication,AuthenticationManager,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\AuthenticationManager.cs,AuthenticateAsync,The length of the statement  "                throw new AuthenticationException(string.Format("Authentication provider with name '{0}' was not registered or was disabled!"' providerName)); " is 142.
Long Statement,DeviceHive.Core,PasswordPolicyValidator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\PasswordPolicyValidator.cs,Validate,The length of the statement  "                        throw new PasswordPolicyViolationException("The password must contain lower and upper letters' numbers and special characters!"); " is 129.
Long Statement,DeviceHive.Core,PasswordPolicyValidator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\PasswordPolicyValidator.cs,Validate,The length of the statement  "                throw new PasswordPolicyViolationException(string.Format("The password is too short! The minimum length is {0}."' policy.MinLength)); " is 133.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "                var notificationNames = string.IsNullOrEmpty(messageHandler.NotificationNames) ? null : messageHandler.NotificationNames.Split(''').Select(c => c.Trim()).ToArray(); " is 164.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "                var commandNames = string.IsNullOrEmpty(messageHandler.CommandNames) ? null : messageHandler.CommandNames.Split(''').Select(c => c.Trim()).ToArray(); " is 149.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "                var deviceGuids = string.IsNullOrEmpty(messageHandler.DeviceGuids) ? null : messageHandler.DeviceGuids.Split(''').Select(c => c.Trim()).ToArray(); " is 146.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "                var deviceClassIdsString = string.IsNullOrEmpty(messageHandler.DeviceClassIds) ? null : messageHandler.DeviceClassIds.Split(''').Select(c => c.Trim()).ToArray(); " is 161.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "                var networkIdsString = string.IsNullOrEmpty(messageHandler.NetworkIds) ? null : messageHandler.NetworkIds.Split(''').Select(c => c.Trim()).ToArray(); " is 149.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "                var messageHandlerInstance = (MessageHandler)kernel.Get(messageHandlerType' new ConstructorArgument("argument"' messageHandler.Argument)); " is 138.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "                _messageHandlerInfos.Add(new MessageHandlerInfo(messageHandlerInstance' notificationNames' commandNames' deviceGuids' deviceClassIds' networkIds)); " is 147.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,HandleNotification,The length of the statement  "            _messageBus.Notify(new DeviceNotificationAddedMessage(context.Device.ID' context.Notification.ID' context.Notification.Notification)); " is 134.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,IsFiltered,The length of the statement  "            if (context.Notification != null && info.NotificationNames != null && !info.NotificationNames.Contains(context.Notification.Notification)) " is 138.
Long Statement,DeviceHive.Core.Mapping,JsonMapper<T>,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapper.cs,Map,The length of the statement  "                throw new ArgumentException(string.Format("Entity type is invalid! Expected: {0}' Actual: {1}"' typeof(T)' entity.GetType())' "entity");" is 136.
Long Statement,DeviceHive.Core.Mapping,JsonMapper<T>,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapper.cs,Apply,The length of the statement  "                throw new ArgumentException(string.Format("Entity type is invalid! Expected: {0}' Actual: {1}"' typeof(T)' entity.GetType())' "entity");" is 136.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration<T>,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,RawJsonProperty,The length of the statement  "                        var value = jProperty == null || jProperty.Value.Type == JTokenType.Null ? null : jProperty.Value.ToString(Formatting.None); " is 124.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration<T>,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "                            throw new JsonMapperException(string.Format("Invalid value in field '{0}'' expected: Array' actual: {1}"' propertyName' jToken.ToString(Formatting.None))); " is 155.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration<T>,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "            // define delegate for null testing: throw an exception if value is required' otherwise return a flag indicating if a value is null " is 131.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration<T>,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "            var isRequired = defaultValueAttribute == null && (hasRequredAttribute || (type.IsValueType && type == basePropertyType)); " is 122.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration<T>,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "                (Func<string' JToken' bool>)((string propertyName' JToken jToken) => jToken == null || jToken.Type == JTokenType.Null) : " is 120.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration<T>,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "                            throw new JsonMapperException(string.Format("Invalid value in field '{0}'' expected: Guid' actual: {1}"' propertyName' jToken.ToString(Formatting.None))); " is 154.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration<T>,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "                            throw new JsonMapperException(string.Format("Invalid value in field '{0}'' expected: Guid' actual: {1}"' propertyName' jToken.ToString(Formatting.None))); " is 154.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration<T>,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "                                throw new JsonMapperException(string.Format("Invalid enumeration value in field '{0}': {1}"' propertyName' jToken.ToString(Formatting.None))); " is 142.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration<T>,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "                            throw new JsonMapperException(string.Format("Invalid value in field '{0}'' expected: Enum' actual: {1}"' propertyName' jToken.ToString(Formatting.None))); " is 154.
Long Statement,DeviceHive.Core.Services,DeviceService,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Services\DeviceService.cs,ResolveNetwork,The length of the statement  "                        throw new UnauthroizedNetworkException("Automatic network creation is not allowed' please specify an existing network!"); " is 121.
Magic Number,DeviceHive.Core,PasswordPolicyValidator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\PasswordPolicyValidator.cs,Validate,The following statement contains a magic number: switch (policy.ComplexityLevel)              {                  case 0:                      break;                  case 1:                      if (!Regex.IsMatch(password' @"(?=.*[\d\W])(?=.*[a-zA-Z])"))                          throw new PasswordPolicyViolationException("The password must contain both letters and numbers!");                      break;                  case 2:                      if (!Regex.IsMatch(password' @"(?=.*[\d\W])(?=.*[a-z])(?=.*[A-Z])"))                          throw new PasswordPolicyViolationException("The password must contain lower and upper letters and numbers!");                      break;                  case 3:                      if (!Regex.IsMatch(password' @"(?=.*\d)(?=.*\W)(?=.*[a-z])(?=.*[A-Z])"))                          throw new PasswordPolicyViolationException("The password must contain lower and upper letters' numbers and special characters!");                      break;                  default:                      throw new InvalidOperationException(                          "The configuration declares invalid complexity level for user password policy!" +                          " Permitted values are between 0 (no restriction) and 3 (most restrictive)");              }
Magic Number,DeviceHive.Core,PasswordPolicyValidator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\PasswordPolicyValidator.cs,Validate,The following statement contains a magic number: switch (policy.ComplexityLevel)              {                  case 0:                      break;                  case 1:                      if (!Regex.IsMatch(password' @"(?=.*[\d\W])(?=.*[a-zA-Z])"))                          throw new PasswordPolicyViolationException("The password must contain both letters and numbers!");                      break;                  case 2:                      if (!Regex.IsMatch(password' @"(?=.*[\d\W])(?=.*[a-z])(?=.*[A-Z])"))                          throw new PasswordPolicyViolationException("The password must contain lower and upper letters and numbers!");                      break;                  case 3:                      if (!Regex.IsMatch(password' @"(?=.*\d)(?=.*\W)(?=.*[a-z])(?=.*[A-Z])"))                          throw new PasswordPolicyViolationException("The password must contain lower and upper letters' numbers and special characters!");                      break;                  default:                      throw new InvalidOperationException(                          "The configuration declares invalid complexity level for user password policy!" +                          " Permitted values are between 0 (no restriction) and 3 (most restrictive)");              }
Magic Number,DeviceHive.Core,Subnet,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseAddress,The following statement contains a magic number: if (stringBlocks.Length != 4)                  throw new FormatException("Invalid IP address: " + address);
Magic Number,DeviceHive.Core,Subnet,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseAddress,The following statement contains a magic number: return (blocks[0] << 24) | (blocks[1] << 16) | (blocks[2] << 8) | (blocks[3]);
Magic Number,DeviceHive.Core,Subnet,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseAddress,The following statement contains a magic number: return (blocks[0] << 24) | (blocks[1] << 16) | (blocks[2] << 8) | (blocks[3]);
Magic Number,DeviceHive.Core,Subnet,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseAddress,The following statement contains a magic number: return (blocks[0] << 24) | (blocks[1] << 16) | (blocks[2] << 8) | (blocks[3]);
Magic Number,DeviceHive.Core,Subnet,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseAddress,The following statement contains a magic number: return (blocks[0] << 24) | (blocks[1] << 16) | (blocks[2] << 8) | (blocks[3]);
Magic Number,DeviceHive.Core,Subnet,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseAddress,The following statement contains a magic number: return (blocks[0] << 24) | (blocks[1] << 16) | (blocks[2] << 8) | (blocks[3]);
Magic Number,DeviceHive.Core,Subnet,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseSubnet,The following statement contains a magic number: var mask = parts.Length > 1 ? int.Parse(parts[1]) : 32;
Magic Number,DeviceHive.Core,Subnet,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseSubnet,The following statement contains a magic number: return new Subnet(ParseAddress(parts[0])' mask != 0 ? -1 << (32 - mask) : 0);
Magic Number,DeviceHive.Core.Messaging,NamedPipeMessageBusConfiguration,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Messaging\NamedPipeMessageBusConfiguration.cs,NamedPipeMessageBusConfiguration,The following statement contains a magic number: ConnectTimeout = 100;
Magic Number,DeviceHive.Core.Messaging,NamedPipeMessageBus,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Messaging\NamedPipeMessageBus.cs,ReadMessage,The following statement contains a magic number: using (var ms = new MemoryStream())              {                  var buffer = new byte[256 * 1024];                    int bytesRead;                  while ((bytesRead = namedPipeServer.Read(buffer' 0' buffer.Length)) > 0)                      ms.Write(buffer' 0' bytesRead);                    data = ms.ToArray();              }
Magic Number,DeviceHive.Core.Messaging,NamedPipeMessageBus,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Messaging\NamedPipeMessageBus.cs,ReadMessage,The following statement contains a magic number: using (var ms = new MemoryStream())              {                  var buffer = new byte[256 * 1024];                    int bytesRead;                  while ((bytesRead = namedPipeServer.Read(buffer' 0' buffer.Length)) > 0)                      ms.Write(buffer' 0' bytesRead);                    data = ms.ToArray();              }
Magic Number,DeviceHive.Core.Messaging,Configuration,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Messaging\NamedPipeMessageBus.cs,Configuration,The following statement contains a magic number: ConnectTimeout = 100;
Magic Number,DeviceHive.Core.Messaging,TcpSocketMessageBus,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Messaging\TcpSocketMessageBus.cs,ReceiveAsync,The following statement contains a magic number: try              {                  while (true)                  {                      var receiveLengthTask = ReceiveDataAsync(socket' 4);                      if (await Task.WhenAny(receiveLengthTask' _cancelTaskCompletionSource.Task) != receiveLengthTask)                          return; // bus is disposed                        if (receiveLengthTask.Result == null)                          return; // connection closed by client                        var dataLength = BitConverter.ToInt32(receiveLengthTask.Result' 0);                        var receiveDataTask = ReceiveDataAsync(socket' dataLength);                      if (await Task.WhenAny(receiveDataTask' _cancelTaskCompletionSource.Task) != receiveDataTask)                          return; // bus is disposed                        if (receiveDataTask.Result == null)                          return; // connection closed by client                        HandleMessage(receiveDataTask.Result);                  }              }              catch (Exception ex)              {                  _log.Warn(string.Format("Error while retrieving data from TCP socket: {0}"' socket.RemoteEndPoint)' ex);              }              finally              {                  _log.InfoFormat("Closing server connection to: {0}"' socket.RemoteEndPoint);                  socket.Shutdown(SocketShutdown.Both);                  socket.Close();              }
