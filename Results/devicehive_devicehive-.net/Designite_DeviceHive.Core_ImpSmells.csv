Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DeviceHive.Core.Authentication.Providers,FacebookAuthenticationProvider,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\Providers\FacebookAuthenticationProvider.cs,AuthenticateAsync,Cyclomatic complexity of the method is 10
Complex Method,DeviceHive.Core.Authentication.Providers,GoogleAuthenticationProvider,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\Providers\GoogleAuthenticationProvider.cs,AuthenticateAsync,Cyclomatic complexity of the method is 11
Complex Method,DeviceHive.Core.Authentication.Providers,GithubAuthenticationProvider,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\Providers\GithubAuthenticationProvider.cs,AuthenticateAsync,Cyclomatic complexity of the method is 8
Complex Method,DeviceHive.Core,PasswordPolicyValidator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\PasswordPolicyValidator.cs,Validate,Cyclomatic complexity of the method is 18
Long Parameter List,DeviceHive.Core.MessageLogic,MessageHandlerInfo,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageHandlerInfo.cs,MessageHandlerInfo,The method has 6 parameters.
Long Parameter List,DeviceHive.Core.Mapping,JsonMapperEntry,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperEntry.cs,JsonMapperEntry,The method has 5 parameters.
Long Statement,DeviceHive.Core.Authentication,AuthenticationManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\AuthenticationManager.cs,Initialize,The length of the statement  "			throw new Exception (string.Format ("Could not load type: '{0}'!" + " Please put the all referenced assemblies into the DeviceHive executable folder."' provider.Type)); " is 168.
Long Statement,DeviceHive.Core.Authentication,AuthenticationManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\AuthenticationManager.cs,Initialize,The length of the statement  "			throw new Exception (string.Format ("The type '{0}' must implement AuthenticationProvider" + " in order to be registered as authentication provider!"' providerType)); " is 166.
Long Statement,DeviceHive.Core.Authentication,AuthenticationManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\AuthenticationManager.cs,Initialize,The length of the statement  "		var providerConfiguration = new AuthenticationProviderConfiguration (provider.ClientId' provider.ClientSecret' provider.Argument); " is 130.
Long Statement,DeviceHive.Core.Authentication,AuthenticationManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\AuthenticationManager.cs,Initialize,The length of the statement  "		var providerInstance = (AuthenticationProvider)kernel.Get (providerType' new ConstructorArgument ("providerConfiguration"' providerConfiguration)); " is 147.
Long Statement,DeviceHive.Core.Authentication,AuthenticationManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\AuthenticationManager.cs,AuthenticateAsync,The length of the statement  "		throw new AuthenticationException (string.Format ("Authentication provider with name '{0}' was not registered or was disabled!"' providerName)); " is 144.
Long Statement,DeviceHive.Core.Authentication.Providers,FacebookAuthenticationProvider,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\Providers\FacebookAuthenticationProvider.cs,AuthenticateAsync,The length of the statement  "		var tokenResponse = await client.GetAsync ("oauth/access_token?" + string.Join ("&"' tokenRequest.Select (p => string.Format ("{0}={1}"' p.Key' p.Value)))); " is 156.
Long Statement,DeviceHive.Core.Authentication.Providers,FacebookAuthenticationProvider,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Authentication\Providers\FacebookAuthenticationProvider.cs,AuthenticateAsync,The length of the statement  "		var tokenResponseDict = tokenResponseString.Split ('&').Select (s => s.Split ('=')).ToDictionary (s => s [0]' s => s [1]); " is 122.
Long Statement,DeviceHive.Core,PasswordPolicyValidator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\PasswordPolicyValidator.cs,Validate,The length of the statement  "			throw new PasswordPolicyViolationException ("The password must contain lower and upper letters' numbers and special characters!"); " is 130.
Long Statement,DeviceHive.Core,PasswordPolicyValidator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\PasswordPolicyValidator.cs,Validate,The length of the statement  "		throw new InvalidOperationException ("The configuration declares invalid complexity level for user password policy!" + " Permitted values are between 0 (no restriction) and 3 (most restrictive)"); " is 196.
Long Statement,DeviceHive.Core,PasswordPolicyValidator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\PasswordPolicyValidator.cs,Validate,The length of the statement  "		throw new PasswordPolicyViolationException (string.Format ("The password is too short! The minimum length is {0}."' policy.MinLength)); " is 135.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "			throw new Exception (string.Format ("Could not load type: '{0}'!" + " Please put the all referenced assemblies into the DeviceHive executable folder."' messageHandler.Type)); " is 174.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "			throw new Exception (string.Format ("The type '{0}' must implement MessageHandler" + " in order to be registered as message handler!"' messageHandlerType)); " is 156.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "		var notificationNames = string.IsNullOrEmpty (messageHandler.NotificationNames) ? null : messageHandler.NotificationNames.Split (''').Select (c => c.Trim ()).ToArray (); " is 169.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "		var commandNames = string.IsNullOrEmpty (messageHandler.CommandNames) ? null : messageHandler.CommandNames.Split (''').Select (c => c.Trim ()).ToArray (); " is 154.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "		var deviceGuids = string.IsNullOrEmpty (messageHandler.DeviceGuids) ? null : messageHandler.DeviceGuids.Split (''').Select (c => c.Trim ()).ToArray (); " is 151.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "		var deviceClassIdsString = string.IsNullOrEmpty (messageHandler.DeviceClassIds) ? null : messageHandler.DeviceClassIds.Split (''').Select (c => c.Trim ()).ToArray (); " is 166.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "		var networkIdsString = string.IsNullOrEmpty (messageHandler.NetworkIds) ? null : messageHandler.NetworkIds.Split (''').Select (c => c.Trim ()).ToArray (); " is 154.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "		var messageHandlerInstance = (MessageHandler)kernel.Get (messageHandlerType' new ConstructorArgument ("argument"' messageHandler.Argument)); " is 140.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,Initialize,The length of the statement  "		_messageHandlerInfos.Add (new MessageHandlerInfo (messageHandlerInstance' notificationNames' commandNames' deviceGuids' deviceClassIds' networkIds)); " is 149.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,HandleNotification,The length of the statement  "	var handlers = _messageHandlerInfos.Where (info => !IsFiltered (info' context)).Select (i => i.MessageHandler).ToArray (); " is 122.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,HandleNotification,The length of the statement  "	_messageBus.Notify (new DeviceNotificationAddedMessage (context.Device.ID' context.Notification.ID' context.Notification.Notification)); " is 136.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,HandleCommand,The length of the statement  "	var handlers = _messageHandlerInfos.Where (info => !IsFiltered (info' context)).Select (i => i.MessageHandler).ToArray (); " is 122.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,HandleCommandUpdate,The length of the statement  "	var handlers = _messageHandlerInfos.Where (info => !IsFiltered (info' context)).Select (i => i.MessageHandler).ToArray (); " is 122.
Long Statement,DeviceHive.Core.MessageLogic,MessageManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\MessageLogic\MessageManager.cs,IsFiltered,The length of the statement  "	if (context.Notification != null && info.NotificationNames != null && !info.NotificationNames.Contains (context.Notification.Notification)) " is 139.
Long Statement,DeviceHive.Core.Mapping,JsonMapper,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapper.cs,Map,The length of the statement  "		throw new ArgumentException (string.Format ("Entity type is invalid! Expected: {0}' Actual: {1}"' typeof(T)' entity.GetType ())' "entity"); " is 139.
Long Statement,DeviceHive.Core.Mapping,JsonMapper,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapper.cs,Apply,The length of the statement  "		throw new ArgumentException (string.Format ("Entity type is invalid! Expected: {0}' Actual: {1}"' typeof(T)' entity.GetType ())' "entity"); " is 139.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,RawJsonProperty,The length of the statement  "			var value = jProperty == null || jProperty.Value.Type == JTokenType.Null ? null : jProperty.Value.ToString (Formatting.None); " is 125.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetPropertySetter,The length of the statement  "	var expression = Expression.Assign (Expression.Property (entityParameter' property)' Expression.Convert (valueParameter' property.PropertyType)); " is 145.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "				throw new JsonMapperException (string.Format ("Invalid value in field '{0}'' expected: Array' actual: {1}"' propertyName' jToken.ToString (Formatting.None))); " is 158.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "	// define delegate for null testing: throw an exception if value is required' otherwise return a flag indicating if a value is null " is 131.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "	var isRequired = defaultValueAttribute == null && (hasRequredAttribute || (type.IsValueType && type == basePropertyType)); " is 122.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "	var isNull = !isRequired ? (Func<string' JToken' bool>)((string propertyName' JToken jToken) => jToken == null || jToken.Type == JTokenType.Null) : (Func<string' JToken' bool>)((string propertyName' JToken jToken) => { " is 218.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "				throw new JsonMapperException (string.Format ("Invalid value in field '{0}'' expected: Guid' actual: {1}"' propertyName' jToken.ToString (Formatting.None))); " is 157.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "				throw new JsonMapperException (string.Format ("Invalid value in field '{0}'' expected: Guid' actual: {1}"' propertyName' jToken.ToString (Formatting.None))); " is 157.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "					throw new JsonMapperException (string.Format ("Invalid enumeration value in field '{0}': {1}"' propertyName' jToken.ToString (Formatting.None))); " is 145.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "				throw new JsonMapperException (string.Format ("Invalid value in field '{0}'' expected: Enum' actual: {1}"' propertyName' jToken.ToString (Formatting.None))); " is 157.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "				throw new JsonMapperException (string.Format ("Invalid value in field '{0}'' expected: {1}' actual: {2}"' propertyName' basePropertyType.Name' jToken.ToString (Formatting.None))); " is 179.
Long Statement,DeviceHive.Core.Mapping,JsonMapperConfiguration,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperConfiguration.cs,GetJsonTokenParser,The length of the statement  "				throw new JsonMapperException (string.Format ("Invalid value in field '{0}'' expected: {1}' actual: {2}"' propertyName' basePropertyType.Name' jToken.ToString (Formatting.None))); " is 179.
Long Statement,DeviceHive.Core.Mapping,JsonMapperManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperManager.cs,GetMapper,The length of the statement  "		throw new InvalidOperationException (string.Format ("Mapping configuration for object of type {0} was not specified!"' type.FullName)); " is 135.
Long Statement,DeviceHive.Core.Mapping,JsonMapperManager,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Mapping\JsonMapperManager.cs,GetMapper,The length of the statement  "		throw new InvalidOperationException (string.Format ("Mapping configuration for object of type {0} was not specified!"' typeof(T).FullName)); " is 140.
Long Statement,DeviceHive.Core.Messaging,MessageBus,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Messaging\MessageBus.cs,HandleMessage,The length of the statement  "		_log.ErrorFormat ("Message container is null" + "(data length: {0}' data: {1})"' (data != null) ? data.Length : -1' (data != null) ? Convert.ToBase64String (data) : string.Empty); " is 179.
Long Statement,DeviceHive.Core.Messaging,NamedPipeMessageBus,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Messaging\NamedPipeMessageBus.cs,ReadData,The length of the statement  "	var everyoneAccessRule = new PipeAccessRule (everyoneSecurityIdentifier' PipeAccessRights.FullControl' AccessControlType.Allow); " is 128.
Long Statement,DeviceHive.Core.Messaging,NamedPipeMessageBus,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Messaging\NamedPipeMessageBus.cs,ReadData,The length of the statement  "		using (var namedPipeServer = new NamedPipeServerStream (_serverPipeConfiguration.Name' PipeDirection.InOut' 1' PipeTransmissionMode.Byte' PipeOptions.Asynchronous' 0' 0' pipeSecurity)) { " is 186.
Long Statement,DeviceHive.Core.Services,DeviceService,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Services\DeviceService.cs,ResolveNetwork,The length of the statement  "				throw new UnauthroizedNetworkException ("Automatic network creation is not allowed' please specify an existing network!"); " is 122.
Magic Number,DeviceHive.Core,PasswordPolicyValidator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\PasswordPolicyValidator.cs,Validate,The following statement contains a magic number: switch (policy.ComplexityLevel) {  case 0:  	break;  case 1:  	if (!Regex.IsMatch (password' @"(?=.*[\d\W])(?=.*[a-zA-Z])"))  		throw new PasswordPolicyViolationException ("The password must contain both letters and numbers!");  	break;  case 2:  	if (!Regex.IsMatch (password' @"(?=.*[\d\W])(?=.*[a-z])(?=.*[A-Z])"))  		throw new PasswordPolicyViolationException ("The password must contain lower and upper letters and numbers!");  	break;  case 3:  	if (!Regex.IsMatch (password' @"(?=.*\d)(?=.*\W)(?=.*[a-z])(?=.*[A-Z])"))  		throw new PasswordPolicyViolationException ("The password must contain lower and upper letters' numbers and special characters!");  	break;  default:  	throw new InvalidOperationException ("The configuration declares invalid complexity level for user password policy!" + " Permitted values are between 0 (no restriction) and 3 (most restrictive)");  }  
Magic Number,DeviceHive.Core,PasswordPolicyValidator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\PasswordPolicyValidator.cs,Validate,The following statement contains a magic number: switch (policy.ComplexityLevel) {  case 0:  	break;  case 1:  	if (!Regex.IsMatch (password' @"(?=.*[\d\W])(?=.*[a-zA-Z])"))  		throw new PasswordPolicyViolationException ("The password must contain both letters and numbers!");  	break;  case 2:  	if (!Regex.IsMatch (password' @"(?=.*[\d\W])(?=.*[a-z])(?=.*[A-Z])"))  		throw new PasswordPolicyViolationException ("The password must contain lower and upper letters and numbers!");  	break;  case 3:  	if (!Regex.IsMatch (password' @"(?=.*\d)(?=.*\W)(?=.*[a-z])(?=.*[A-Z])"))  		throw new PasswordPolicyViolationException ("The password must contain lower and upper letters' numbers and special characters!");  	break;  default:  	throw new InvalidOperationException ("The configuration declares invalid complexity level for user password policy!" + " Permitted values are between 0 (no restriction) and 3 (most restrictive)");  }  
Magic Number,DeviceHive.Core,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseAddress,The following statement contains a magic number: if (stringBlocks.Length != 4)  	throw new FormatException ("Invalid IP address: " + address);  
Magic Number,DeviceHive.Core,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseAddress,The following statement contains a magic number: return (blocks [0] << 24) | (blocks [1] << 16) | (blocks [2] << 8) | (blocks [3]);  
Magic Number,DeviceHive.Core,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseAddress,The following statement contains a magic number: return (blocks [0] << 24) | (blocks [1] << 16) | (blocks [2] << 8) | (blocks [3]);  
Magic Number,DeviceHive.Core,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseAddress,The following statement contains a magic number: return (blocks [0] << 24) | (blocks [1] << 16) | (blocks [2] << 8) | (blocks [3]);  
Magic Number,DeviceHive.Core,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseAddress,The following statement contains a magic number: return (blocks [0] << 24) | (blocks [1] << 16) | (blocks [2] << 8) | (blocks [3]);  
Magic Number,DeviceHive.Core,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseAddress,The following statement contains a magic number: return (blocks [0] << 24) | (blocks [1] << 16) | (blocks [2] << 8) | (blocks [3]);  
Magic Number,DeviceHive.Core,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Subnet.cs,ParseSubnet,The following statement contains a magic number: return new Subnet (ParseAddress (parts [0])' mask != 0 ? -1 << (32 - mask) : 0);  
Magic Number,DeviceHive.Core.Messaging,NamedPipeMessageBusConfiguration,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Messaging\NamedPipeMessageBusConfiguration.cs,NamedPipeMessageBusConfiguration,The following statement contains a magic number: ConnectTimeout = 100;  
Magic Number,DeviceHive.Core.Messaging,NamedPipeMessageBus,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Messaging\NamedPipeMessageBus.cs,ReadMessage,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	var buffer = new byte[256 * 1024];  	int bytesRead;  	while ((bytesRead = namedPipeServer.Read (buffer' 0' buffer.Length)) > 0)  		ms.Write (buffer' 0' bytesRead);  	data = ms.ToArray ();  }  
Magic Number,DeviceHive.Core.Messaging,NamedPipeMessageBus,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Messaging\NamedPipeMessageBus.cs,ReadMessage,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	var buffer = new byte[256 * 1024];  	int bytesRead;  	while ((bytesRead = namedPipeServer.Read (buffer' 0' buffer.Length)) > 0)  		ms.Write (buffer' 0' bytesRead);  	data = ms.ToArray ();  }  
Magic Number,DeviceHive.Core.Messaging,TcpSocketMessageBus,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Messaging\TcpSocketMessageBus.cs,ReceiveAsync,The following statement contains a magic number: try {  	while (true) {  		var receiveLengthTask = ReceiveDataAsync (socket' 4);  		if (await Task.WhenAny (receiveLengthTask' _cancelTaskCompletionSource.Task) != receiveLengthTask)  			return;  		// bus is disposed  		if (receiveLengthTask.Result == null)  			return;  		// connection closed by client  		var dataLength = BitConverter.ToInt32 (receiveLengthTask.Result' 0);  		var receiveDataTask = ReceiveDataAsync (socket' dataLength);  		if (await Task.WhenAny (receiveDataTask' _cancelTaskCompletionSource.Task) != receiveDataTask)  			return;  		// bus is disposed  		if (receiveDataTask.Result == null)  			return;  		// connection closed by client  		HandleMessage (receiveDataTask.Result);  	}  } catch (Exception ex) {  	_log.Warn (string.Format ("Error while retrieving data from TCP socket: {0}"' socket.RemoteEndPoint)' ex);  } finally {  	_log.InfoFormat ("Closing server connection to: {0}"' socket.RemoteEndPoint);  	socket.Shutdown (SocketShutdown.Both);  	socket.Close ();  }  
Magic Number,DeviceHive.Core.Messaging,TcpSocketMessageBus,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Core\Messaging\TcpSocketMessageBus.cs,ReceiveAsync,The following statement contains a magic number: while (true) {  	var receiveLengthTask = ReceiveDataAsync (socket' 4);  	if (await Task.WhenAny (receiveLengthTask' _cancelTaskCompletionSource.Task) != receiveLengthTask)  		return;  	// bus is disposed  	if (receiveLengthTask.Result == null)  		return;  	// connection closed by client  	var dataLength = BitConverter.ToInt32 (receiveLengthTask.Result' 0);  	var receiveDataTask = ReceiveDataAsync (socket' dataLength);  	if (await Task.WhenAny (receiveDataTask' _cancelTaskCompletionSource.Task) != receiveDataTask)  		return;  	// bus is disposed  	if (receiveDataTask.Result == null)  		return;  	// connection closed by client  	HandleMessage (receiveDataTask.Result);  }  
