Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DeviceHive.Data.Repositories,AccessKeyRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IAccessKeyRepository.cs,Filter,Cyclomatic complexity of the method is 9
Complex Method,DeviceHive.Data.Repositories,OAuthClientRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IOAuthClientRepository.cs,Filter,Cyclomatic complexity of the method is 12
Complex Method,DeviceHive.Data.Repositories,OAuthGrantRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IOAuthGrantRepository.cs,Filter,Cyclomatic complexity of the method is 13
Complex Method,DeviceHive.Data.Repositories,DeviceClassRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceClassRepository.cs,Filter,Cyclomatic complexity of the method is 9
Complex Method,DeviceHive.Data.Repositories,DeviceCommandRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceCommandRepository.cs,Filter,Cyclomatic complexity of the method is 14
Complex Method,DeviceHive.Data.Repositories,DeviceNotificationRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceNotificationRepository.cs,Filter,Cyclomatic complexity of the method is 13
Complex Method,DeviceHive.Data.Repositories,DeviceRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceRepository.cs,Filter,Cyclomatic complexity of the method is 17
Complex Method,DeviceHive.Data.Repositories,NetworkRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\INetworkRepository.cs,Filter,Cyclomatic complexity of the method is 8
Complex Method,DeviceHive.Data.Repositories,UserRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IUserRepository.cs,Filter,Cyclomatic complexity of the method is 10
Long Parameter List,DeviceHive.Data.Model,OAuthGrant,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\OAuthGrant.cs,OAuthGrant,The method has 5 parameters. Parameters: client' userId' accessKey' type' scope
Long Statement,DeviceHive.Data,DataContext,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\DataContext.cs,LoadRepositories,The length of the statement  "                    Repositories = t.GetInterfaces().Where(i => i.Name.EndsWith("Repository") || i.GetInterfaces().Any(ii => IsSimpleRepository(ii))).ToArray()' " is 140.
Long Statement,DeviceHive.Data,DataContext,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\DataContext.cs,LoadRepositories,The length of the statement  "            var duplicatedRepositories = repositoriesInfo.SelectMany(m => m.Repositories).GroupBy(r => r).Where(r => r.Count() > 1); " is 120.
Long Statement,DeviceHive.Data,DataContext,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\DataContext.cs,LoadRepositories,The length of the statement  "                throw new Exception("Can not register multiple implementations for repositories: " + string.Join("' "' duplicatedRepositories.Select(r => r.Key.ToString()))); " is 158.
Long Statement,DeviceHive.Data,DataContext,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\DataContext.cs,LoadRepositories,The length of the statement  "                throw new Exception("Can not register multiple repositories for objects: " + string.Join("' "' duplicatedObjects.Select(r => r.Key.ToString()))); " is 145.
Magic Number,DeviceHive.Data.Model,AccessKey,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKey.cs,GenerateKey,The following statement contains a magic number: var key = new byte[32];
Magic Number,DeviceHive.Data.Model,Subnet,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseAddress,The following statement contains a magic number: stringBlocks.Length != 4
Magic Number,DeviceHive.Data.Model,Subnet,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseAddress,The following statement contains a magic number: return (blocks[0] << 24) | (blocks[1] << 16) | (blocks[2] << 8) | (blocks[3]);
Magic Number,DeviceHive.Data.Model,Subnet,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseAddress,The following statement contains a magic number: return (blocks[0] << 24) | (blocks[1] << 16) | (blocks[2] << 8) | (blocks[3]);
Magic Number,DeviceHive.Data.Model,Subnet,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseAddress,The following statement contains a magic number: return (blocks[0] << 24) | (blocks[1] << 16) | (blocks[2] << 8) | (blocks[3]);
Magic Number,DeviceHive.Data.Model,Subnet,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseAddress,The following statement contains a magic number: return (blocks[0] << 24) | (blocks[1] << 16) | (blocks[2] << 8) | (blocks[3]);
Magic Number,DeviceHive.Data.Model,Subnet,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseAddress,The following statement contains a magic number: return (blocks[0] << 24) | (blocks[1] << 16) | (blocks[2] << 8) | (blocks[3]);
Magic Number,DeviceHive.Data.Model,Subnet,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseSubnet,The following statement contains a magic number: var mask = parts.Length > 1 ? int.Parse(parts[1]) : 32;
Magic Number,DeviceHive.Data.Model,Subnet,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseSubnet,The following statement contains a magic number: return new Subnet(ParseAddress(parts[0])' mask != 0 ? -1 << (32 - mask) : 0);
Magic Number,DeviceHive.Data.Model,OAuthClient,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\OAuthClient.cs,GenerateSecret,The following statement contains a magic number: var buffer = new byte[18];
Magic Number,DeviceHive.Data.Model,DeviceCommandFilter,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\DeviceCommand.cs,DeviceCommandFilter,The following statement contains a magic number: Take = 1000;
Magic Number,DeviceHive.Data.Model,DeviceNotificationFilter,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\DeviceNotification.cs,DeviceNotificationFilter,The following statement contains a magic number: Take = 1000;
Magic Number,DeviceHive.Data.Model,User,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\User.cs,SetPassword,The following statement contains a magic number: var buffer = new byte[18];
Magic Number,DeviceHive.Data.Repositories,DeviceCommandRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceCommandRepository.cs,Filter,The following statement contains a magic number: start = start.AddTicks(10);
Magic Number,DeviceHive.Data.Repositories,DeviceCommandRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceCommandRepository.cs,Filter,The following statement contains a magic number: end = end.AddTicks(-10);
Magic Number,DeviceHive.Data.Repositories,DeviceNotificationRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceNotificationRepository.cs,Filter,The following statement contains a magic number: start = start.AddTicks(10);
Magic Number,DeviceHive.Data.Repositories,DeviceNotificationRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceNotificationRepository.cs,Filter,The following statement contains a magic number: end = end.AddTicks(-10);
Missing Default,DeviceHive.Data.Repositories,AccessKeyRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IAccessKeyRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField)                  {                      case AccessKeySortField.ID:                          query = query.OrderBy(e => e.ID' filter.SortOrder);                          break;                      case AccessKeySortField.Label:                          query = query.OrderBy(e => e.Label' filter.SortOrder);                          break;                  }
Missing Default,DeviceHive.Data.Repositories,OAuthClientRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IOAuthClientRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField)                  {                      case OAuthClientSortField.ID:                          query = query.OrderBy(e => e.ID' filter.SortOrder);                          break;                      case OAuthClientSortField.Name:                          query = query.OrderBy(e => e.Name' filter.SortOrder);                          break;                      case OAuthClientSortField.Domain:                          query = query.OrderBy(e => e.Domain' filter.SortOrder);                          break;                      case OAuthClientSortField.OAuthID:                          query = query.OrderBy(e => e.OAuthID' filter.SortOrder);                          break;                  }
Missing Default,DeviceHive.Data.Repositories,OAuthGrantRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IOAuthGrantRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField)                  {                      case OAuthGrantSortField.Timestamp:                          query = query.OrderBy(e => e.Timestamp' filter.SortOrder);                          break;                  }
Missing Default,DeviceHive.Data.Repositories,DeviceClassRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceClassRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField)                  {                      case DeviceClassSortField.ID:                          query = query.OrderBy(e => e.ID' filter.SortOrder);                          break;                      case DeviceClassSortField.Name:                          query = query.OrderBy(e => e.Name' filter.SortOrder);                          break;                  }
Missing Default,DeviceHive.Data.Repositories,DeviceCommandRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceCommandRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField)                 {                     case DeviceCommandSortField.Timestamp:                         query = query.OrderBy(e => e.Timestamp' filter.SortOrder);                         break;                     case DeviceCommandSortField.Command:                         query = query.OrderBy(e => e.Command' filter.SortOrder)                             .ThenBy(e => e.Timestamp' filter.SortOrder);                         break;                     case DeviceCommandSortField.Status:                         query = query.OrderBy(e => e.Status' filter.SortOrder)                             .ThenBy(e => e.Timestamp' filter.SortOrder);                         break;                 }
Missing Default,DeviceHive.Data.Repositories,DeviceNotificationRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceNotificationRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField)                 {                     case DeviceNotificationSortField.Timestamp:                         query = query.OrderBy(e => e.Timestamp' filter.SortOrder);                         break;                     case DeviceNotificationSortField.Notification:                         query = query.OrderBy(e => e.Notification' filter.SortOrder)                             .ThenBy(e => e.Timestamp' filter.SortOrder);                         break;                 }
Missing Default,DeviceHive.Data.Repositories,DeviceRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField)                 {                     case DeviceSortField.ID:                         query = query.OrderBy(e => e.ID' filter.SortOrder);                         break;                     case DeviceSortField.Name:                         query = query.OrderBy(e => e.Name' filter.SortOrder);                         break;                     case DeviceSortField.Status:                         query = query.OrderBy(e => e.Status' filter.SortOrder)                             .ThenBy(e => e.Name' filter.SortOrder);                         break;                     case DeviceSortField.Network:                         query = query.OrderBy(e => e.Network.Name' filter.SortOrder)                             .ThenBy(e => e.Name' filter.SortOrder);                         break;                     case DeviceSortField.DeviceClass:                         query = query.OrderBy(e => e.DeviceClass.Name' filter.SortOrder)                             .ThenBy(e => e.DeviceClass.Version' filter.SortOrder)                             .ThenBy(e => e.Name' filter.SortOrder);                         break;                 }
Missing Default,DeviceHive.Data.Repositories,NetworkRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\INetworkRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField)                  {                      case NetworkSortField.ID:                          query = query.OrderBy(e => e.ID' filter.SortOrder);                          break;                      case NetworkSortField.Name:                          query = query.OrderBy(e => e.Name' filter.SortOrder);                          break;                  }
Missing Default,DeviceHive.Data.Repositories,UserRepositoryExtension,D:\research\architectureSmells\repos\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IUserRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField)                  {                      case UserSortField.ID:                          query = query.OrderBy(e => e.ID' filter.SortOrder);                          break;                      case UserSortField.Login:                          query = query.OrderBy(e => e.Login' filter.SortOrder);                          break;                  }
