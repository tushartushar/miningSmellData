Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DeviceHive.Data.Repositories,AccessKeyRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IAccessKeyRepository.cs,Filter,Cyclomatic complexity of the method is 12
Complex Method,DeviceHive.Data.Repositories,OAuthClientRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IOAuthClientRepository.cs,Filter,Cyclomatic complexity of the method is 19
Complex Method,DeviceHive.Data.Repositories,OAuthGrantRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IOAuthGrantRepository.cs,Filter,Cyclomatic complexity of the method is 14
Complex Method,DeviceHive.Data.Repositories,DeviceClassRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceClassRepository.cs,Filter,Cyclomatic complexity of the method is 12
Complex Method,DeviceHive.Data.Repositories,DeviceCommandRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceCommandRepository.cs,Filter,Cyclomatic complexity of the method is 19
Complex Method,DeviceHive.Data.Repositories,DeviceNotificationRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceNotificationRepository.cs,Filter,Cyclomatic complexity of the method is 16
Complex Method,DeviceHive.Data.Repositories,DeviceRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceRepository.cs,Filter,Cyclomatic complexity of the method is 26
Complex Method,DeviceHive.Data.Repositories,NetworkRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\INetworkRepository.cs,Filter,Cyclomatic complexity of the method is 11
Complex Method,DeviceHive.Data.Repositories,UserRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IUserRepository.cs,Filter,Cyclomatic complexity of the method is 13
Long Parameter List,DeviceHive.Data.Model,OAuthGrant,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\OAuthGrant.cs,OAuthGrant,The method has 5 parameters.
Long Statement,DeviceHive.Data,DataContext,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\DataContext.cs,LoadRepositories,The length of the statement  "		Repositories = t.GetInterfaces ().Where (i => i.Name.EndsWith ("Repository") || i.GetInterfaces ().Any (ii => IsSimpleRepository (ii))).ToArray ()' " is 147.
Long Statement,DeviceHive.Data,DataContext,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\DataContext.cs,LoadRepositories,The length of the statement  "		Objects = t.GetInterfaces ().Where (i => IsSimpleRepository (i)).Select (i => i.GetGenericArguments ().First ()).ToArray () " is 123.
Long Statement,DeviceHive.Data,DataContext,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\DataContext.cs,LoadRepositories,The length of the statement  "	var duplicatedRepositories = repositoriesInfo.SelectMany (m => m.Repositories).GroupBy (r => r).Where (r => r.Count () > 1); " is 124.
Long Statement,DeviceHive.Data,DataContext,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\DataContext.cs,LoadRepositories,The length of the statement  "		throw new Exception ("Can not register multiple implementations for repositories: " + string.Join ("' "' duplicatedRepositories.Select (r => r.Key.ToString ()))); " is 162.
Long Statement,DeviceHive.Data,DataContext,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\DataContext.cs,LoadRepositories,The length of the statement  "		throw new Exception ("Can not register multiple repositories for objects: " + string.Join ("' "' duplicatedObjects.Select (r => r.Key.ToString ()))); " is 149.
Long Statement,DeviceHive.Data.Repositories,DeviceRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceRepository.cs,Filter,The length of the statement  "			query = query.OrderBy (e => e.DeviceClass.Name' filter.SortOrder).ThenBy (e => e.DeviceClass.Version' filter.SortOrder).ThenBy (e => e.Name' filter.SortOrder); " is 159.
Magic Number,DeviceHive.Data.Model,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseAddress,The following statement contains a magic number: if (stringBlocks.Length != 4)  	throw new FormatException ("Invalid IP address: " + address);  
Magic Number,DeviceHive.Data.Model,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseAddress,The following statement contains a magic number: return (blocks [0] << 24) | (blocks [1] << 16) | (blocks [2] << 8) | (blocks [3]);  
Magic Number,DeviceHive.Data.Model,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseAddress,The following statement contains a magic number: return (blocks [0] << 24) | (blocks [1] << 16) | (blocks [2] << 8) | (blocks [3]);  
Magic Number,DeviceHive.Data.Model,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseAddress,The following statement contains a magic number: return (blocks [0] << 24) | (blocks [1] << 16) | (blocks [2] << 8) | (blocks [3]);  
Magic Number,DeviceHive.Data.Model,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseAddress,The following statement contains a magic number: return (blocks [0] << 24) | (blocks [1] << 16) | (blocks [2] << 8) | (blocks [3]);  
Magic Number,DeviceHive.Data.Model,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseAddress,The following statement contains a magic number: return (blocks [0] << 24) | (blocks [1] << 16) | (blocks [2] << 8) | (blocks [3]);  
Magic Number,DeviceHive.Data.Model,Subnet,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\AccessKeyPermission.cs,ParseSubnet,The following statement contains a magic number: return new Subnet (ParseAddress (parts [0])' mask != 0 ? -1 << (32 - mask) : 0);  
Magic Number,DeviceHive.Data.Model,DeviceCommandFilter,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\DeviceCommand.cs,DeviceCommandFilter,The following statement contains a magic number: Take = 1000;  
Magic Number,DeviceHive.Data.Model,DeviceNotificationFilter,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Model\DeviceNotification.cs,DeviceNotificationFilter,The following statement contains a magic number: Take = 1000;  
Magic Number,DeviceHive.Data.Repositories,DeviceCommandRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceCommandRepository.cs,Filter,The following statement contains a magic number: if (filter.Start != null) {  	var start = DateTime.SpecifyKind (filter.Start.Value' DateTimeKind.Utc);  	if (!filter.IsDateInclusive)  		start = start.AddTicks (10);  	// SQL Server has 7-digit precision' while JSON mapping 6-digit  	query = filter.IsDateInclusive ? query.Where (e => e.Timestamp >= start) : query.Where (e => e.Timestamp > start);  }  
Magic Number,DeviceHive.Data.Repositories,DeviceCommandRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceCommandRepository.cs,Filter,The following statement contains a magic number: if (!filter.IsDateInclusive)  	start = start.AddTicks (10);  
Magic Number,DeviceHive.Data.Repositories,DeviceCommandRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceCommandRepository.cs,Filter,The following statement contains a magic number: start = start.AddTicks (10);  
Magic Number,DeviceHive.Data.Repositories,DeviceCommandRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceCommandRepository.cs,Filter,The following statement contains a magic number: if (filter.End != null) {  	var end = DateTime.SpecifyKind (filter.End.Value' DateTimeKind.Utc);  	if (!filter.IsDateInclusive)  		end = end.AddTicks (-10);  	// SQL Server has 7-digit precision' while JSON mapping 6-digit  	query = filter.IsDateInclusive ? query.Where (e => e.Timestamp <= end) : query.Where (e => e.Timestamp < end);  }  
Magic Number,DeviceHive.Data.Repositories,DeviceCommandRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceCommandRepository.cs,Filter,The following statement contains a magic number: if (!filter.IsDateInclusive)  	end = end.AddTicks (-10);  
Magic Number,DeviceHive.Data.Repositories,DeviceCommandRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceCommandRepository.cs,Filter,The following statement contains a magic number: end = end.AddTicks (-10);  
Magic Number,DeviceHive.Data.Repositories,DeviceNotificationRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceNotificationRepository.cs,Filter,The following statement contains a magic number: if (filter.Start != null) {  	var start = DateTime.SpecifyKind (filter.Start.Value' DateTimeKind.Utc);  	if (!filter.IsDateInclusive)  		start = start.AddTicks (10);  	// SQL Server has 7-digit precision' while JSON mapping 6-digit  	query = filter.IsDateInclusive ? query.Where (e => e.Timestamp >= start) : query.Where (e => e.Timestamp > start);  }  
Magic Number,DeviceHive.Data.Repositories,DeviceNotificationRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceNotificationRepository.cs,Filter,The following statement contains a magic number: if (!filter.IsDateInclusive)  	start = start.AddTicks (10);  
Magic Number,DeviceHive.Data.Repositories,DeviceNotificationRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceNotificationRepository.cs,Filter,The following statement contains a magic number: start = start.AddTicks (10);  
Magic Number,DeviceHive.Data.Repositories,DeviceNotificationRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceNotificationRepository.cs,Filter,The following statement contains a magic number: if (filter.End != null) {  	var end = DateTime.SpecifyKind (filter.End.Value' DateTimeKind.Utc);  	if (!filter.IsDateInclusive)  		end = end.AddTicks (-10);  	// SQL Server has 7-digit precision' while JSON mapping 6-digit  	query = filter.IsDateInclusive ? query.Where (e => e.Timestamp <= end) : query.Where (e => e.Timestamp < end);  }  
Magic Number,DeviceHive.Data.Repositories,DeviceNotificationRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceNotificationRepository.cs,Filter,The following statement contains a magic number: if (!filter.IsDateInclusive)  	end = end.AddTicks (-10);  
Magic Number,DeviceHive.Data.Repositories,DeviceNotificationRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceNotificationRepository.cs,Filter,The following statement contains a magic number: end = end.AddTicks (-10);  
Missing Default,DeviceHive.Data.Repositories,AccessKeyRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IAccessKeyRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField) {  case AccessKeySortField.ID:  	query = query.OrderBy (e => e.ID' filter.SortOrder);  	break;  case AccessKeySortField.Label:  	query = query.OrderBy (e => e.Label' filter.SortOrder);  	break;  }  
Missing Default,DeviceHive.Data.Repositories,OAuthClientRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IOAuthClientRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField) {  case OAuthClientSortField.ID:  	query = query.OrderBy (e => e.ID' filter.SortOrder);  	break;  case OAuthClientSortField.Name:  	query = query.OrderBy (e => e.Name' filter.SortOrder);  	break;  case OAuthClientSortField.Domain:  	query = query.OrderBy (e => e.Domain' filter.SortOrder);  	break;  case OAuthClientSortField.OAuthID:  	query = query.OrderBy (e => e.OAuthID' filter.SortOrder);  	break;  }  
Missing Default,DeviceHive.Data.Repositories,OAuthGrantRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IOAuthGrantRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField) {  case OAuthGrantSortField.Timestamp:  	query = query.OrderBy (e => e.Timestamp' filter.SortOrder);  	break;  }  
Missing Default,DeviceHive.Data.Repositories,DeviceClassRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceClassRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField) {  case DeviceClassSortField.ID:  	query = query.OrderBy (e => e.ID' filter.SortOrder);  	break;  case DeviceClassSortField.Name:  	query = query.OrderBy (e => e.Name' filter.SortOrder);  	break;  }  
Missing Default,DeviceHive.Data.Repositories,DeviceCommandRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceCommandRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField) {  case DeviceCommandSortField.Timestamp:  	query = query.OrderBy (e => e.Timestamp' filter.SortOrder);  	break;  case DeviceCommandSortField.Command:  	query = query.OrderBy (e => e.Command' filter.SortOrder).ThenBy (e => e.Timestamp' filter.SortOrder);  	break;  case DeviceCommandSortField.Status:  	query = query.OrderBy (e => e.Status' filter.SortOrder).ThenBy (e => e.Timestamp' filter.SortOrder);  	break;  }  
Missing Default,DeviceHive.Data.Repositories,DeviceNotificationRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceNotificationRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField) {  case DeviceNotificationSortField.Timestamp:  	query = query.OrderBy (e => e.Timestamp' filter.SortOrder);  	break;  case DeviceNotificationSortField.Notification:  	query = query.OrderBy (e => e.Notification' filter.SortOrder).ThenBy (e => e.Timestamp' filter.SortOrder);  	break;  }  
Missing Default,DeviceHive.Data.Repositories,DeviceRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IDeviceRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField) {  case DeviceSortField.ID:  	query = query.OrderBy (e => e.ID' filter.SortOrder);  	break;  case DeviceSortField.Name:  	query = query.OrderBy (e => e.Name' filter.SortOrder);  	break;  case DeviceSortField.Status:  	query = query.OrderBy (e => e.Status' filter.SortOrder).ThenBy (e => e.Name' filter.SortOrder);  	break;  case DeviceSortField.Network:  	query = query.OrderBy (e => e.Network.Name' filter.SortOrder).ThenBy (e => e.Name' filter.SortOrder);  	break;  case DeviceSortField.DeviceClass:  	query = query.OrderBy (e => e.DeviceClass.Name' filter.SortOrder).ThenBy (e => e.DeviceClass.Version' filter.SortOrder).ThenBy (e => e.Name' filter.SortOrder);  	break;  }  
Missing Default,DeviceHive.Data.Repositories,NetworkRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\INetworkRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField) {  case NetworkSortField.ID:  	query = query.OrderBy (e => e.ID' filter.SortOrder);  	break;  case NetworkSortField.Name:  	query = query.OrderBy (e => e.Name' filter.SortOrder);  	break;  }  
Missing Default,DeviceHive.Data.Repositories,UserRepositoryExtension,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.Data\Repositories\IUserRepository.cs,Filter,The following switch statement is missing a default case: switch (filter.SortField) {  case UserSortField.ID:  	query = query.OrderBy (e => e.ID' filter.SortOrder);  	break;  case UserSortField.Login:  	query = query.OrderBy (e => e.Login' filter.SortOrder);  	break;  }  
