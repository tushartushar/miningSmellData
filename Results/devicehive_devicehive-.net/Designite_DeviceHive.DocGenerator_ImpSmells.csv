Implementation smell,Namespace,Class,File,Method,Description
Long Method,DeviceHive.DocGenerator.Templates,PartialWsMethod,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialWsMethod.generated.cs,Execute,The method has 233 lines of code.
Long Method,DeviceHive.DocGenerator.Templates,PartialWsService,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialWsService.generated.cs,Execute,The method has 101 lines of code.
Long Method,DeviceHive.DocGenerator.Templates,PartialGetStarted,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialGetStarted.generated.cs,Execute,The method has 153 lines of code.
Long Method,DeviceHive.DocGenerator.Templates,PartialApi,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialApi.generated.cs,Execute,The method has 608 lines of code.
Long Method,DeviceHive.DocGenerator.Templates,PartialMethod,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialMethod.generated.cs,Execute,The method has 294 lines of code.
Long Method,DeviceHive.DocGenerator.Templates,PartialResource,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialResource.generated.cs,Execute,The method has 179 lines of code.
Complex Method,DeviceHive.DocGenerator,GeneratorHelper,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,AdjustParameters,Cyclomatic complexity of the method is 11
Complex Method,DeviceHive.DocGenerator,GeneratorHelper,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,ToJsonType,Cyclomatic complexity of the method is 8
Complex Method,DeviceHive.DocGenerator,WsMetadataGenerator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,Cyclomatic complexity of the method is 8
Complex Method,DeviceHive.DocGenerator.Templates,PartialApi,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialApi.generated.cs,Execute,Cyclomatic complexity of the method is 13
Complex Method,DeviceHive.DocGenerator.Templates,PartialMethod,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialMethod.generated.cs,Execute,Cyclomatic complexity of the method is 9
Long Statement,DeviceHive.DocGenerator,GeneratorHelper,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,AdjustParameters,The length of the statement  "                    parameters.AddRange(GetTypeParameters(cref' paramJsonMode' prefix: param.Name + (type == "array" ? "[]" : null) + ".")); " is 120.
Long Statement,DeviceHive.DocGenerator,GeneratorHelper,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,ToJsonType,The length of the statement  "            if (type.GetInterfaces().Any(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IEnumerable<>)) && type != typeof(string) && type != typeof(JObject)) " is 161.
Long Statement,DeviceHive.DocGenerator,MetadataGenerator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\MetadataGenerator.cs,GetAuthorization,The length of the statement  "                return "User or Device" + (authorizeUserOrDevice.AccessKeyAction == null ? null : " or Key (" + authorizeUserOrDevice.AccessKeyAction + ")"); " is 141.
Long Statement,DeviceHive.DocGenerator,MetadataGenerator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\MetadataGenerator.cs,GetResponseParameters,The length of the statement  "                    parameters.AddRange(_helper.GetTypeParameters(resourceType' JsonMapperEntryMode.ToJson | (oneWayOnly ? JsonMapperEntryMode.OneWayOnly : 0))); " is 141.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetAuthorization,The length of the statement  "            var actionAttributes = method.GetCustomAttributes(typeof(ActionFilterAttribute)' true).Cast<ActionFilterAttribute>().ToArray(); " is 127.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The length of the statement  "            parameters.Add(new MetadataParameter("action"' _helper.ToJsonType(typeof(string))' "Action name: " + actionAttribute.ActionName' true)); " is 136.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The length of the statement  "            parameters.Add(new MetadataParameter("requestId"' _helper.ToJsonType(typeof(object))' "Request unique identifier' will be passed back in the response message."' false)); " is 169.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The length of the statement  "                    parameters.Add(new MetadataParameter("deviceId"' _helper.ToJsonType(typeof(string))' "Device unique identifier (specify if not authenticated)."' false)); " is 153.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The length of the statement  "                    parameters.Add(new MetadataParameter("deviceKey"' _helper.ToJsonType(typeof(string))' "Device authentication key (specify if not authenticated)."' false)); " is 155.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The length of the statement  "                parameters.Insert(3' new MetadataParameter("deviceKey"' _helper.ToJsonType(typeof(string))' "Device authentication key."' true)); " is 129.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetResponseParameters,The length of the statement  "            parameters.Add(new MetadataParameter("action"' _helper.ToJsonType(typeof(string))' "Action name: " + actionName' true)); " is 120.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetResponseParameters,The length of the statement  "                parameters.Add(new MetadataParameter("status"' _helper.ToJsonType(typeof(string))' "Operation execution status (success or error)."' true)); " is 140.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetResponseParameters,The length of the statement  "                parameters.Add(new MetadataParameter("requestId"' _helper.ToJsonType(typeof(object))' "Request unique identifier as specified in the request message."' false)); " is 160.
Long Statement,DeviceHive.DocGenerator,XmlCommentReader,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\XmlCommentReader.cs,GetPropertyElement,The length of the statement  "            return _xml.XPathSelectElement(string.Format("/doc/members/member[@name='P:{0}.{1}']"' property.DeclaringType.FullName' property.Name)); " is 136.
Long Statement,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The length of the statement  "                    var innerParams = innerObject.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 1)' Type = o.Type }).ToArray(); " is 145.
Long Statement,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The length of the statement  "                    builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string(' '' 4 * indent)' Encode(parameter.Name)); " is 131.
Long Statement,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The length of the statement  "                    var innerParams = innerArray.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 3)' Type = o.Type }).ToArray(); " is 144.
Long Statement,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The length of the statement  "                    builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string(' '' 4 * indent)' Encode(parameter.Name)); " is 130.
Long Statement,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,DocumentationBlock,The length of the statement  "                var endTagMatch = Regex.Match(block.Substring(startTagMatch.Index + startTagMatch.Length)' @"\<\/" + Regex.Escape(tagName) + @"\>"); " is 132.
Long Statement,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,DocumentationBlock,The length of the statement  "                        DocumentationBlock(block.Substring(startTagMatch.Index + startTagMatch.Length + endTagMatch.Index + endTagMatch.Length)); " is 121.
Long Statement,DeviceHive.DocGenerator.Templates,PartialApi,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialApi.generated.cs,Execute,The length of the statement  "                var nav = """"; jQuery.each(hash.split(""/"")' function (index' value) { nav += ""-"" + value; jQuery(""#nav"" + nav).show(); }); " is 129.
Complex Conditional,DeviceHive.DocGenerator,GeneratorHelper,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,ToJsonType,The conditional expression  "type.GetInterfaces().Any(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IEnumerable<>)) && type != typeof(string) && type != typeof(JObject)"  is complex.
Magic Number,DeviceHive.DocGenerator,GeneratorHelper,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,GetCrefType,The following statement contains a magic number: var type = Type.GetType(typeName.Substring(2)' false);
Magic Number,DeviceHive.DocGenerator,GeneratorHelper,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,GetCrefType,The following statement contains a magic number: if (type == null)              {                  type = AppDomain.CurrentDomain.GetAssemblies()                      .Select(a => a.GetType(typeName.Substring(2)))                      .Where(t => t != null).FirstOrDefault();              }
Magic Number,DeviceHive.DocGenerator,WsMetadataGenerator,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The following statement contains a magic number: if (IsDeviceMethod(method) && actionAttribute.ActionName == "device/save")              {                  parameters.Insert(3' new MetadataParameter("deviceKey"' _helper.ToJsonType(typeof(string))' "Device authentication key."' true));              }
Magic Number,DeviceHive.DocGenerator,XmlCommentReader,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\XmlCommentReader.cs,ProcessTypeName,The following statement contains a magic number: if (result.Success)              {                  return string.Format("{0}{{{1}}}"' result.Groups[1].Value' result.Groups[2].Value);              }
Magic Number,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters)              {                  if (processed.Contains(parameter))                      continue;                    if (!isFirstProperty)                      builder.AppendLine("'");                  isFirstProperty = false;                    var innerObject = parameters.Where(p => p.Name.StartsWith(parameter.Name + "."));                  if (innerObject.Any())                  {                      var innerParams = innerObject.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 1)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      JsonRepresentationBlock(builder' innerParams' indent + 1);                      builder.AppendFormat("{0}}}"' new string(' '' 4 * indent));                      processed.AddRange(innerObject);                      continue;                  }                    var innerArray = parameters.Where(p => p.Name.StartsWith(parameter.Name + "[]."));                  if (innerArray.Any())                  {                      var innerParams = innerArray.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 3)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      builder.AppendFormat("{0}{{\n"' new string(' '' 4 * (indent + 1)));                      JsonRepresentationBlock(builder' innerParams' indent + 2);                      builder.AppendFormat("{0}}}\n"' new string(' '' 4 * (indent + 1)));                      builder.AppendFormat("{0}]"' new string(' '' 4 * indent));                      processed.AddRange(innerArray);                      continue;                  }                                    builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"'                      new string(' '' 4 * indent)' Encode(parameter.Name)' Encode(parameter.Type));              }
Magic Number,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters)              {                  if (processed.Contains(parameter))                      continue;                    if (!isFirstProperty)                      builder.AppendLine("'");                  isFirstProperty = false;                    var innerObject = parameters.Where(p => p.Name.StartsWith(parameter.Name + "."));                  if (innerObject.Any())                  {                      var innerParams = innerObject.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 1)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      JsonRepresentationBlock(builder' innerParams' indent + 1);                      builder.AppendFormat("{0}}}"' new string(' '' 4 * indent));                      processed.AddRange(innerObject);                      continue;                  }                    var innerArray = parameters.Where(p => p.Name.StartsWith(parameter.Name + "[]."));                  if (innerArray.Any())                  {                      var innerParams = innerArray.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 3)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      builder.AppendFormat("{0}{{\n"' new string(' '' 4 * (indent + 1)));                      JsonRepresentationBlock(builder' innerParams' indent + 2);                      builder.AppendFormat("{0}}}\n"' new string(' '' 4 * (indent + 1)));                      builder.AppendFormat("{0}]"' new string(' '' 4 * indent));                      processed.AddRange(innerArray);                      continue;                  }                                    builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"'                      new string(' '' 4 * indent)' Encode(parameter.Name)' Encode(parameter.Type));              }
Magic Number,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters)              {                  if (processed.Contains(parameter))                      continue;                    if (!isFirstProperty)                      builder.AppendLine("'");                  isFirstProperty = false;                    var innerObject = parameters.Where(p => p.Name.StartsWith(parameter.Name + "."));                  if (innerObject.Any())                  {                      var innerParams = innerObject.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 1)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      JsonRepresentationBlock(builder' innerParams' indent + 1);                      builder.AppendFormat("{0}}}"' new string(' '' 4 * indent));                      processed.AddRange(innerObject);                      continue;                  }                    var innerArray = parameters.Where(p => p.Name.StartsWith(parameter.Name + "[]."));                  if (innerArray.Any())                  {                      var innerParams = innerArray.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 3)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      builder.AppendFormat("{0}{{\n"' new string(' '' 4 * (indent + 1)));                      JsonRepresentationBlock(builder' innerParams' indent + 2);                      builder.AppendFormat("{0}}}\n"' new string(' '' 4 * (indent + 1)));                      builder.AppendFormat("{0}]"' new string(' '' 4 * indent));                      processed.AddRange(innerArray);                      continue;                  }                                    builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"'                      new string(' '' 4 * indent)' Encode(parameter.Name)' Encode(parameter.Type));              }
Magic Number,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters)              {                  if (processed.Contains(parameter))                      continue;                    if (!isFirstProperty)                      builder.AppendLine("'");                  isFirstProperty = false;                    var innerObject = parameters.Where(p => p.Name.StartsWith(parameter.Name + "."));                  if (innerObject.Any())                  {                      var innerParams = innerObject.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 1)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      JsonRepresentationBlock(builder' innerParams' indent + 1);                      builder.AppendFormat("{0}}}"' new string(' '' 4 * indent));                      processed.AddRange(innerObject);                      continue;                  }                    var innerArray = parameters.Where(p => p.Name.StartsWith(parameter.Name + "[]."));                  if (innerArray.Any())                  {                      var innerParams = innerArray.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 3)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      builder.AppendFormat("{0}{{\n"' new string(' '' 4 * (indent + 1)));                      JsonRepresentationBlock(builder' innerParams' indent + 2);                      builder.AppendFormat("{0}}}\n"' new string(' '' 4 * (indent + 1)));                      builder.AppendFormat("{0}]"' new string(' '' 4 * indent));                      processed.AddRange(innerArray);                      continue;                  }                                    builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"'                      new string(' '' 4 * indent)' Encode(parameter.Name)' Encode(parameter.Type));              }
Magic Number,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters)              {                  if (processed.Contains(parameter))                      continue;                    if (!isFirstProperty)                      builder.AppendLine("'");                  isFirstProperty = false;                    var innerObject = parameters.Where(p => p.Name.StartsWith(parameter.Name + "."));                  if (innerObject.Any())                  {                      var innerParams = innerObject.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 1)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      JsonRepresentationBlock(builder' innerParams' indent + 1);                      builder.AppendFormat("{0}}}"' new string(' '' 4 * indent));                      processed.AddRange(innerObject);                      continue;                  }                    var innerArray = parameters.Where(p => p.Name.StartsWith(parameter.Name + "[]."));                  if (innerArray.Any())                  {                      var innerParams = innerArray.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 3)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      builder.AppendFormat("{0}{{\n"' new string(' '' 4 * (indent + 1)));                      JsonRepresentationBlock(builder' innerParams' indent + 2);                      builder.AppendFormat("{0}}}\n"' new string(' '' 4 * (indent + 1)));                      builder.AppendFormat("{0}]"' new string(' '' 4 * indent));                      processed.AddRange(innerArray);                      continue;                  }                                    builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"'                      new string(' '' 4 * indent)' Encode(parameter.Name)' Encode(parameter.Type));              }
Magic Number,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters)              {                  if (processed.Contains(parameter))                      continue;                    if (!isFirstProperty)                      builder.AppendLine("'");                  isFirstProperty = false;                    var innerObject = parameters.Where(p => p.Name.StartsWith(parameter.Name + "."));                  if (innerObject.Any())                  {                      var innerParams = innerObject.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 1)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      JsonRepresentationBlock(builder' innerParams' indent + 1);                      builder.AppendFormat("{0}}}"' new string(' '' 4 * indent));                      processed.AddRange(innerObject);                      continue;                  }                    var innerArray = parameters.Where(p => p.Name.StartsWith(parameter.Name + "[]."));                  if (innerArray.Any())                  {                      var innerParams = innerArray.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 3)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      builder.AppendFormat("{0}{{\n"' new string(' '' 4 * (indent + 1)));                      JsonRepresentationBlock(builder' innerParams' indent + 2);                      builder.AppendFormat("{0}}}\n"' new string(' '' 4 * (indent + 1)));                      builder.AppendFormat("{0}]"' new string(' '' 4 * indent));                      processed.AddRange(innerArray);                      continue;                  }                                    builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"'                      new string(' '' 4 * indent)' Encode(parameter.Name)' Encode(parameter.Type));              }
Magic Number,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters)              {                  if (processed.Contains(parameter))                      continue;                    if (!isFirstProperty)                      builder.AppendLine("'");                  isFirstProperty = false;                    var innerObject = parameters.Where(p => p.Name.StartsWith(parameter.Name + "."));                  if (innerObject.Any())                  {                      var innerParams = innerObject.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 1)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      JsonRepresentationBlock(builder' innerParams' indent + 1);                      builder.AppendFormat("{0}}}"' new string(' '' 4 * indent));                      processed.AddRange(innerObject);                      continue;                  }                    var innerArray = parameters.Where(p => p.Name.StartsWith(parameter.Name + "[]."));                  if (innerArray.Any())                  {                      var innerParams = innerArray.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 3)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      builder.AppendFormat("{0}{{\n"' new string(' '' 4 * (indent + 1)));                      JsonRepresentationBlock(builder' innerParams' indent + 2);                      builder.AppendFormat("{0}}}\n"' new string(' '' 4 * (indent + 1)));                      builder.AppendFormat("{0}]"' new string(' '' 4 * indent));                      processed.AddRange(innerArray);                      continue;                  }                                    builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"'                      new string(' '' 4 * indent)' Encode(parameter.Name)' Encode(parameter.Type));              }
Magic Number,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters)              {                  if (processed.Contains(parameter))                      continue;                    if (!isFirstProperty)                      builder.AppendLine("'");                  isFirstProperty = false;                    var innerObject = parameters.Where(p => p.Name.StartsWith(parameter.Name + "."));                  if (innerObject.Any())                  {                      var innerParams = innerObject.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 1)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      JsonRepresentationBlock(builder' innerParams' indent + 1);                      builder.AppendFormat("{0}}}"' new string(' '' 4 * indent));                      processed.AddRange(innerObject);                      continue;                  }                    var innerArray = parameters.Where(p => p.Name.StartsWith(parameter.Name + "[]."));                  if (innerArray.Any())                  {                      var innerParams = innerArray.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 3)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      builder.AppendFormat("{0}{{\n"' new string(' '' 4 * (indent + 1)));                      JsonRepresentationBlock(builder' innerParams' indent + 2);                      builder.AppendFormat("{0}}}\n"' new string(' '' 4 * (indent + 1)));                      builder.AppendFormat("{0}]"' new string(' '' 4 * indent));                      processed.AddRange(innerArray);                      continue;                  }                                    builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"'                      new string(' '' 4 * indent)' Encode(parameter.Name)' Encode(parameter.Type));              }
Magic Number,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters)              {                  if (processed.Contains(parameter))                      continue;                    if (!isFirstProperty)                      builder.AppendLine("'");                  isFirstProperty = false;                    var innerObject = parameters.Where(p => p.Name.StartsWith(parameter.Name + "."));                  if (innerObject.Any())                  {                      var innerParams = innerObject.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 1)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      JsonRepresentationBlock(builder' innerParams' indent + 1);                      builder.AppendFormat("{0}}}"' new string(' '' 4 * indent));                      processed.AddRange(innerObject);                      continue;                  }                    var innerArray = parameters.Where(p => p.Name.StartsWith(parameter.Name + "[]."));                  if (innerArray.Any())                  {                      var innerParams = innerArray.Select(o => new MetadataParameter { Name = o.Name.Substring(parameter.Name.Length + 3)' Type = o.Type }).ToArray();                      builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string(' '' 4 * indent)' Encode(parameter.Name));                      builder.AppendFormat("{0}{{\n"' new string(' '' 4 * (indent + 1)));                      JsonRepresentationBlock(builder' innerParams' indent + 2);                      builder.AppendFormat("{0}}}\n"' new string(' '' 4 * (indent + 1)));                      builder.AppendFormat("{0}]"' new string(' '' 4 * indent));                      processed.AddRange(innerArray);                      continue;                  }                                    builder.AppendFormat("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"'                      new string(' '' 4 * indent)' Encode(parameter.Name)' Encode(parameter.Type));              }
Missing Default,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,DocumentationBlock,The following switch statement is missing a default case: switch (tagName)                      {                          case "para":                              substitution = "<p class=\"doc\">" + contents + "</p>";                              break;                          case "c":                          case "code":                              substitution = "<pre class=\"doc\">" + contents + "</pre>";                              break;                          case "list":                              substitution = "<ul class=\"doc\">" + contents + "</ul>";                              break;                          case "item":                              substitution = "<li class=\"doc\">" + contents + "</li>";                              break;                          case "description":                              substitution = contents;                              break;                      }
Missing Default,DeviceHive.DocGenerator,Html,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,DocumentationBlock,The following switch statement is missing a default case: switch (tag.Name.LocalName)                  {                      case "see":                          substitution = string.Format(@"<a href=""#Reference/{0}"">{0}</a>"' (string)tag.Attribute("cref"));                          break;                    }
