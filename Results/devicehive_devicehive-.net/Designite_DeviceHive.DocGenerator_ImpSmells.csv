Implementation smell,Namespace,Class,File,Method,Description
Long Method,DeviceHive.DocGenerator.Templates,PartialWsMethod,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialWsMethod.generated.cs,Execute,The method has 136 lines of code.
Long Method,DeviceHive.DocGenerator.Templates,PartialApi,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialApi.generated.cs,Execute,The method has 397 lines of code.
Long Method,DeviceHive.DocGenerator.Templates,PartialMethod,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialMethod.generated.cs,Execute,The method has 174 lines of code.
Long Method,DeviceHive.DocGenerator.Templates,PartialResource,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialResource.generated.cs,Execute,The method has 105 lines of code.
Complex Method,DeviceHive.DocGenerator,GeneratorHelper,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,AdjustParameters,Cyclomatic complexity of the method is 11
Complex Method,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,Cyclomatic complexity of the method is 8
Complex Method,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,DocumentationBlock,Cyclomatic complexity of the method is 21
Complex Method,DeviceHive.DocGenerator.Templates,PartialApi,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialApi.generated.cs,Execute,Cyclomatic complexity of the method is 13
Complex Method,DeviceHive.DocGenerator.Templates,PartialMethod,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialMethod.generated.cs,Execute,Cyclomatic complexity of the method is 9
Long Statement,DeviceHive.DocGenerator,GeneratorHelper,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,GetTypeParameters,The length of the statement  "			var elementType = propertyType.GetInterfaces ().First (i => i.IsGenericType && i.GetGenericTypeDefinition () == typeof(IEnumerable<>)).GetGenericArguments ().First (); " is 167.
Long Statement,DeviceHive.DocGenerator,GeneratorHelper,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,AdjustParameters,The length of the statement  "			parameters.AddRange (GetTypeParameters (cref' paramJsonMode' prefix: param.Name + (type == "array" ? "[]" : null) + ".")); " is 122.
Long Statement,DeviceHive.DocGenerator,GeneratorHelper,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,GetCrefType,The length of the statement  "		type = AppDomain.CurrentDomain.GetAssemblies ().Select (a => a.GetType (typeName.Substring (2))).Where (t => t != null).FirstOrDefault (); " is 138.
Long Statement,DeviceHive.DocGenerator,GeneratorHelper,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,ToJsonType,The length of the statement  "	if (type.GetInterfaces ().Any (i => i.IsGenericType && i.GetGenericTypeDefinition () == typeof(IEnumerable<>)) && type != typeof(string) && type != typeof(JObject)) " is 164.
Long Statement,DeviceHive.DocGenerator,MetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\MetadataGenerator.cs,Generate,The length of the statement  "		Resources = apiExplorer.ApiDescriptions.OrderBy (d => d.ActionDescriptor.ControllerDescriptor.ControllerName).Select (d => new { " is 128.
Long Statement,DeviceHive.DocGenerator,MetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\MetadataGenerator.cs,Generate,The length of the statement  "			Methods = g.GroupBy (m => GetMethodName ((ReflectedHttpActionDescriptor)m.ActionDescriptor)).Select (m => m.First ()).ToList () " is 127.
Long Statement,DeviceHive.DocGenerator,MetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\MetadataGenerator.cs,Generate,The length of the statement  "			Methods = cd.Methods.Where (m => GetMethodName ((ReflectedHttpActionDescriptor)m.ActionDescriptor) != null).Select (m => new MetadataMethod { " is 141.
Long Statement,DeviceHive.DocGenerator,MetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\MetadataGenerator.cs,GetResourceInfo,The length of the statement  "	return new ResourceInfo (type' type != null ? type.Name : name' type != null ? GetTypeDocumentation (type) : resourceElement.Contents ()); " is 138.
Long Statement,DeviceHive.DocGenerator,MetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\MetadataGenerator.cs,GetUrlParameters,The length of the statement  "			IsRequred = !p.ParameterDescriptor.IsOptional && !(p.ParameterDescriptor.ParameterType.IsGenericType && p.ParameterDescriptor.ParameterType.GetGenericTypeDefinition () == typeof(Nullable<>))' " is 191.
Long Statement,DeviceHive.DocGenerator,MetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\MetadataGenerator.cs,GetAuthorization,The length of the statement  "		return "User or Device" + (authorizeUserOrDevice.AccessKeyAction == null ? null : " or Key (" + authorizeUserOrDevice.AccessKeyAction + ")"); " is 141.
Long Statement,DeviceHive.DocGenerator,MetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\MetadataGenerator.cs,GetRequestDocumentation,The length of the statement  "	return _apiXmlCommentReader.GetMethodParameterElement (descriptor.MethodInfo' "json").Contents () ?? "Do not supply a request body with this method."; " is 150.
Long Statement,DeviceHive.DocGenerator,MetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\MetadataGenerator.cs,GetRequestParameters,The length of the statement  "			parameters.AddRange (_helper.GetTypeParameters (resourceType' JsonMapperEntryMode.FromJson' patch: descriptor.SupportedHttpMethods.Contains (HttpMethod.Put))); " is 159.
Long Statement,DeviceHive.DocGenerator,MetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\MetadataGenerator.cs,GetResponseDocumentation,The length of the statement  "	return _apiXmlCommentReader.GetMethodReturnsElement (descriptor.MethodInfo).Contents () ?? "If successful' this method returns an empty response body."; " is 152.
Long Statement,DeviceHive.DocGenerator,MetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\MetadataGenerator.cs,GetResponseParameters,The length of the statement  "			parameters.AddRange (_helper.GetTypeParameters (resourceType' JsonMapperEntryMode.ToJson | (oneWayOnly ? JsonMapperEntryMode.OneWayOnly : 0))); " is 143.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,Generate,The length of the statement  "	var controllers = typeof(ControllerBase).Assembly.GetTypes ().Where (t => !t.IsAbstract && typeof(ControllerBase).IsAssignableFrom (t)).ToArray (); " is 147.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,Generate,The length of the statement  "		foreach (var action in controller.GetMethods (BindingFlags.Public | BindingFlags.Instance).Where (m => m.IsDefined (typeof(ActionAttribute)' true))) { " is 150.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetAuthorization,The length of the statement  "	var actionAttributes = method.GetCustomAttributes (typeof(ActionFilterAttribute)' true).Cast<ActionFilterAttribute> ().ToArray (); " is 130.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The length of the statement  "	parameters.Add (new MetadataParameter ("action"' _helper.ToJsonType (typeof(string))' "Action name: " + actionAttribute.ActionName' true)); " is 139.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The length of the statement  "	parameters.Add (new MetadataParameter ("requestId"' _helper.ToJsonType (typeof(object))' "Request unique identifier' will be passed back in the response message."' false)); " is 172.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The length of the statement  "			parameters.Add (new MetadataParameter ("deviceId"' _helper.ToJsonType (typeof(string))' "Device unique identifier (specify if not authenticated)."' false)); " is 156.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The length of the statement  "			parameters.Add (new MetadataParameter ("deviceKey"' _helper.ToJsonType (typeof(string))' "Device authentication key (specify if not authenticated)."' false)); " is 158.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The length of the statement  "			IsRequred = !p.IsOptional && !(p.ParameterType.IsGenericType && p.ParameterType.GetGenericTypeDefinition () == typeof(Nullable<>))' " is 131.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The length of the statement  "		parameters.Insert (3' new MetadataParameter ("deviceKey"' _helper.ToJsonType (typeof(string))' "Device authentication key."' true)); " is 132.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetResponseParameters,The length of the statement  "	parameters.Add (new MetadataParameter ("action"' _helper.ToJsonType (typeof(string))' "Action name: " + actionName' true)); " is 123.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetResponseParameters,The length of the statement  "		parameters.Add (new MetadataParameter ("status"' _helper.ToJsonType (typeof(string))' "Operation execution status (success or error)."' true)); " is 143.
Long Statement,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetResponseParameters,The length of the statement  "		parameters.Add (new MetadataParameter ("requestId"' _helper.ToJsonType (typeof(object))' "Request unique identifier as specified in the request message."' false)); " is 163.
Long Statement,DeviceHive.DocGenerator,XmlCommentReader,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\XmlCommentReader.cs,GetPropertyElement,The length of the statement  "	return _xml.XPathSelectElement (string.Format ("/doc/members/member[@name='P:{0}.{1}']"' property.DeclaringType.FullName' property.Name)); " is 138.
Long Statement,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The length of the statement  "			builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string (' '' 4 * indent)' Encode (parameter.Name)); " is 134.
Long Statement,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The length of the statement  "			builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name)); " is 133.
Long Statement,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The length of the statement  "		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"' new string (' '' 4 * indent)' Encode (parameter.Name)' Encode (parameter.Type)); " is 190.
Long Statement,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,DocumentationBlock,The length of the statement  "		var endTagMatch = Regex.Match (block.Substring (startTagMatch.Index + startTagMatch.Length)' @"\<\/" + Regex.Escape (tagName) + @"\>"); " is 135.
Long Statement,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,DocumentationBlock,The length of the statement  "			return Encode (block.Substring (0' startTagMatch.Index)) + substitution + DocumentationBlock (block.Substring (startTagMatch.Index + startTagMatch.Length + endTagMatch.Index + endTagMatch.Length)); " is 197.
Long Statement,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,DocumentationBlock,The length of the statement  "		return Encode (block.Substring (0' tagMatch.Index)) + substitution + DocumentationBlock (block.Substring (tagMatch.Index + tagMatch.Length)); " is 141.
Long Statement,DeviceHive.DocGenerator.Templates,PartialWsMethod,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialWsMethod.generated.cs,Execute,The length of the statement  "		WriteLiteral ("<table>\r\n    <tr>\r\n        <th style=\"width:200px\">Property Name</th>\r\n        <t" + "h style=\"width:80px\">Required</th>\r\n        <th style=\"width:80px\">Type</th>\r\n  " + "      <th style=\"width:400px\">Description</th>\r\n    </tr>\r\n"); " is 270.
Long Statement,DeviceHive.DocGenerator.Templates,PartialWsMethod,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialWsMethod.generated.cs,Execute,The length of the statement  "	WriteLiteral ("\r\n\r\n<h3>Message Parameters</h3>\r\n<table>\r\n    <tr>\r\n        <th style=\"width:200p" + "x\">Property Name</th>\r\n        <th style=\"width:80px\">Type</th>\r\n        <th sty" + "le=\"width:400px\">Description</th>\r\n    </tr>\r\n"); " is 259.
Long Statement,DeviceHive.DocGenerator.Templates,PartialWsService,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialWsService.generated.cs,Execute,The length of the statement  "	WriteLiteral ("</pre>\r\n\r\n<h2>Messages</h2>\r\n<table>\r\n    <tr>\r\n        <th style=\"width:150px\">M" + "essage</th>\r\n        <th style=\"width:80px\">Originator</th>\r\n        <th style=\"" + "width:100px\">Authorization</th>\r\n        <th style=\"width:400px\">Description</th" + ">\r\n    </tr>\r\n"); " is 316.
Long Statement,DeviceHive.DocGenerator.Templates,PartialGetStarted,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialGetStarted.generated.cs,Execute,The length of the statement  "	WriteLiteral ("\r\n\r\n<h1>Get Started</h1>\r\n\r\n<p>The DeviceHive API is the central part of the fram" + "ework which allows different components to interact with each other.\r\nThe API pr" + "ovides access to information about registered components in the system' and allo" + "ws them to exchange messages in real time.</p>\r\n\r\n<h2>Use Cases</h2>\r\n\r\n<p>There" + " are three types of consumers of the DeviceHive API' as shown on the diagram bel" + "ow:</p>\r\n\r\n<img src=\"{image-path}/Images/UseCases.png\" alt=\"Use Cases\" />\r\n\r\n<h3" + ">Device</h3>\r\n<p>Device is a unit that runs microcode' and it communicates with " + "the API in the following cases:</p>\r\n<ul>\r\n    <li>When started' device register" + "s within the framework by passing unique identifier' display name and other meta" + "-information.</li>\r\n    <li>Device sends notifications with an arbitrary content" + " format to notify other components about the changes in the device\'s environment" + ".</li>\r\n    <li>Device listens for commands issued by other components and execu" + "tes them in an appropriate way.</li>\r\n</ul>\r\n\r\n<h3>Client</h3>\r\n<p>Client is an " + "application that is used to monitor and/or control devices.\r\nIt could be a user " + "interface' or completely automated software that manages the entire device netwo" + "rk.\r\nClients may invoke the API in the following use cases:</p>\r\n<ul>\r\n    <li>C" + "lient enumerates all the devices in the network' view their status and other met" + "a-information.</li>\r\n    <li>Client listens for device notifications and process" + "es them in an appropriate way.</li>\r\n    <li>Client sends commands to devices to" + " trigger any logic on the device side.</li>\r\n</ul>\r\n\r\n<h3>Administrator</h3>\r\n<p" + ">Administrator controls all aspects of the environment with the full access to t" + "he API.\r\nCommonly' administrators will need to use this API in the following cas" + "es:</p>\r\n<ul>\r\n    <li>Administrator creates and manages API users and access ke" + "ys (clients and other administrators).</li>\r\n    <li>Administrator creates and m" + "anages device networks and associates users with them.</li>\r\n    <li>Administrat" + "or monitors devices and all dispatched notifications and commands.</li>\r\n</ul>\r\n" + "\r\n<h2>Resources</h2>\r\n<p>The DeviceHive API is a RESTful service' which operates" + " on several resource types.\r\nThe diagram below reflects all used resource types " + "and their relationships:</p>\r\n<img src=\"{image-path}/Images/DataModel.png\" alt=\"" + "Data Model\" />\r\n<ul>\r\n    <li><a href=\"#Reference/User\">User</a>: represents a u" + "ser with credentials and API access rights (client or administrator).</li>\r\n    " + "<li><a href=\"#Reference/Network\">Network</a>: represents an isolation entity tha" + "t encapsulates multiple devices with controlled access.</li>\r\n    <li><a href=\"#" + "Reference/Device\">Device</a>: represents a unit that runs microcode.</li>\r\n    <" + "li><a href=\"#Reference/DeviceClass\">Device Class</a>: represents an entity that " + "holds all meta-information about particular type of devices.</li>\r\n    <li><a hr" + "ef=\"#Reference/Equipment\">Equipment</a>: represents meta-information about one u" + "nit of equipment devices have onboard.</li>\r\n    <li><a href=\"#Reference/DeviceN" + "otification\">Device Notification</a>: represents a message dispatched by devices" + " for clients.</li>\r\n    <li><a href=\"#Reference/DeviceCommand\">Device Command</a" + ">: represents a message dispatched by clients for devices.</li>\r\n    <li><a href" + "=\"#Reference/AccessKey\">Access Key</a>: represents an access key with specific A" + "PI access rights.</li>\r\n</ul>\r\n\r\n<h2>Server Processes</h2>\r\n<p>Besides the CRUD " + "access to all resources listed above' the API includes several business features" + " implemented on the server side. The sections below provide more information abo" + "ut their implementation.</p>\r\n\r\n<h3>Message routing</h3>\r\n<p>One of the primary " + "features of the service is to connect devices with clients in real-time. This is" + " achieved on the server-side by routing new commands and notification to their r" + "ecipients with minimal delays.</p>\r\n<p>There are three methods for API clients t" + "o receive incoming messages:</p>\r\n<ol>\r\n    <li><strong>Polling</strong>: The cl" + "ient periodically requests the server to retrieve new <a href=\"#Reference/Device" + "Command/poll\">commands</a> or <a href=\"#Reference/DeviceNotification/poll\">notif" + "ications</a>. The request must include the <em>waitTimeout=0</em> parameter to d" + "isable waiting on the server.</li>\r\n    <li><strong>Long Polling</strong>: The c" + "lient makes request to the server' but the server responds only when a new messa" + "ge is available' or if the waiting timeout is expired (specified in the <em>wait" + "Timeout</em> parameter). That approach is generally more efficient and minimizes" + " message receive delays.</li>\r\n    <li><strong>WebSocket</strong>: A separate <a" + " href=\"#WsReference\">WebSocket API</a> allows clients to open persistent connect" + "ions with the server' subscribe to particular commands or notifications and then" + " receive messages from the server. The URL of the WebSocket endpoint could be re" + "trieved using the <a href=\"#Reference/ApiInfo/get\">ApiInfo: get</a> call.</li>\r\n" + "</ol>\r\n<p>In all three methods it\'s possible to specify the <em>timestamp</em> p" + "arameter as starting date/time (non-inclusive) for incoming messages. If that pa" + "rameter is omitted' the server\'s current timestamp is taken instead.</p>\r\n<p>In " + "order to receive all messages in the right order' the clients should always pass" + " the timestamp of the last received message when polling or subscribing. If no m" + "essages were ever received' the client should get the server\'s current timestamp" + " using the <a href=\"#Reference/ApiInfo/get\">ApiInfo: get</a> call and use it unt" + "il a new message is received.</p>\r\n\r\n<h3>Tracking device equipment state</h3>\r\n<" + "p>One of the useful features provided by the server is tracking the most recent " + "state of device equipment (e.g. sensors' meters' etc.). The API clients may use " + "the <a href=\"#Reference/Device/equipment\">Device: equipment</a> operation to rec" + "eive the current state of the device equipment.</p>\r\n<p>In order to support that" + " functionality' devices must send properly formatted <a href=\"#Reference/DeviceN" + "otification/insert\">notifications</a> about changes in the current equipment sta" + "te. The notification resource must include the following properties:</p>\r\n<ul>\r\n" + "    <li><strong>notification</strong>: Must be \'equipment\'.</li>\r\n    <li><stron" + "g>parameters</strong>: Must be a JSON object with the \'equipment\' property conta" + "ining the corresponding equipment code. Other properties in the JSON object shou" + "ld reflect the equipment state.</li>\r\n</ul>\r\n\r\n<h3>Server-originated notificatio" + "ns</h3>\r\n<p>Devices are not the only source of notifications in the system: the " + "server also generates special notifications about various device events. The lis" + "t below includes all such notifications with their description:</p>\r\n<ul>\r\n    <" + "li><strong>$device-add</strong>: Dispatched once for newly registered device. Th" + "e notification includes all device properties specified during registration.</li" + ">\r\n    <li><strong>$device-update</strong>: Dispatched every time device propert" + "ies are updated (e.g. device name' status' etc.). The notification includes only" + " the changed properties. If no properties were changed' the notification paramet" + "ers property is an empty object.</li>\r\n</ul>\r\n\r\n<h3>Automatic Offline device sta" + "tus</h3>\r\n<p>The server provides a capability to auto-update the device status t" + "o Offline after certain period of inactivity. A device is considered to be inact" + "ive when it is not persistently connected and it does not send any notifications" + " for a specified period of time. Please note the status is not currently reverte" + "d to the original value when a device is brought back online.</p>\r\n<p>The featur" + "e is enabled' if a corresponding <a href=\"#Reference/DeviceClass\">device class</" + "a> includes a positive offlineTimeout property.</p>\r\n\r\n<h3>Server Extensibility<" + "/h3>\r\n<p>The DeviceHive allows to extend server logic by implementing the IMessa" + "geManager interface in a separate plug-in assembly and referencing it from the c" + "onfiguration file. The plug-ins can inspect all transmitted messages and apply c" + "ustom logic as necessary.</p>\r\n\r\n<h2>Authentication</h2>\r\n<p>The API supports th" + "ree types of authentication: User' Access Key and Device.</p>\r\n\r\n<h3>User</h3>\r\n" + "<p>The users are authenticated using <a href=\"http://en.wikipedia.org/wiki/Basic" + "_access_authentication\" target=\"_blank\">HTTP Basic Authentication</a>.</p>\r\n<p>T" + "he access is provided based on authenticated user role (Client or Administrator)" + "' please refer to the <a href=\"#Reference\">Reference</a> for the list of availab" + "le resources and methods for each user role.</p>\r\n\r\n<h3>Access Key</h3>\r\n<p>Acce" + "ss key authentication is useful' when third-party applications' clients or devic" + "es have to access the DeviceHive API. It is possible limit the rights of a parti" + "cular access key to specific resources and actions' networks' devices' as well a" + "s restrict usage of the key to a range of source domains and/or IP subnets.</p>\r" + "\n<p>The access key is passed in the Authorization HTTP header using the Bearer s" + "cheme as follows:</p>\r\n<ul>\r\n    <li><strong>Authorization</strong>: Bearer &lt;" + "access_key&gt;</li>\r\n</ul>\r\n\r\n<h3>Device</h3>\r\n<p>Another way how devices could " + "authenticate themselves is by passing two custom HTTP headers:</p>\r\n<ul>\r\n    <l" + "i><strong>Auth-DeviceID</strong>: Device unique identifier.</li>\r\n    <li><stron" + "g>Auth-DeviceKey</strong>: Device authentication key.</li>\r\n</ul>\r\n<p>Both devic" + "e unique identifier and authentication key are specified during <a href=\"#Refere" + "nce/Device/register\">device registration</a>.</p>\r\n\r\n<h2>Response Codes</h2>\r\n<p" + ">The API uses HTTP Status Codes to notify clients about the status of requested " + "operation. As usual' the 2xx codes indicate the operation has been completed suc" + "cessfully' the 4xx codes indicate client errors' and 5xx codes reflect server er" + "rors.</p>\r\n<p>The list below provides some additional information about common s" + "tatus codes returned by API operations:</p>\r\n<ul>\r\n    <li><strong>200 OK</stron" + "g>: Requested operation completed successfully. The response body includes a res" + "ource object as specified in the API reference.</li>\r\n    <li><strong>201 Create" + "d</strong>: Requested operation completed successfully and a new resource has be" + "en created (typically for POST operations). The HTTP Location header includes th" + "e URL of created resource. The response body includes created resource object as" + " specified in the API reference.</li>\r\n    <li><strong>204 No Content</strong>: " + "Requested operation completed successfully and there is no resource in the respo" + "nse body (typically for DELETE operations).</li>\r\n    <li><strong>400 Bad Reques" + "t</strong>: The client did not specify all required parameters or some parameter" + "s passed are invalid. The response body includes a JSON object with the \'message" + "\' property describing the error details.</li>\r\n    <li><strong>401 Unauthorized<" + "/strong>: The client did not specify authentication headers or access to the req" + "uested resource is not allowed for the current identity. The response body inclu" + "des a JSON object with the \'message\' property describing the error details.</li>" + "\r\n    <li><strong>403 Forbidden</strong>: The server could not complete the requ" + "ested operation with the specified parameters (e.g. network with such name alrea" + "dy exists). The response body includes a JSON object with the \'message\' property" + " describing the error details.</li>\r\n    <li><strong>404 Not Found</strong>: The" + " specified resource is not found. The response body includes a JSON object with " + "the \'message\' property describing the error details.</li>\r\n    <li><strong>405 M" + "ethod Not Allowed</strong>: The specified operation for the current resource is " + "not allowed. The response body includes a JSON object with the \'message\' propert" + "y describing the error details.</li>\r\n    <li><strong>500 Internal Server Error<" + "/strong>: The server error occurred while processing requested operation. The ex" + "pected response format is not documented.</li>\r\n</ul>"); " is 12970.
Long Statement,DeviceHive.DocGenerator.Templates,PartialApi,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialApi.generated.cs,Execute,The length of the statement  "	WriteLiteral ("\r\n<div id=\"sidebar\">\r\n    <ul>\r\n        <li><a href=\"#GetStarted\">Get Started</a>" + "</li>\r\n        <li><a href=\"#Reference\">REST API Reference</a>\r\n            <ul>" + "\r\n"); " is 209.
Long Statement,DeviceHive.DocGenerator.Templates,PartialApi,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialApi.generated.cs,Execute,The length of the statement  "	WriteLiteral ("            </ul>\r\n        </li>\r\n        <li><a href=\"#WsReference\">WebSocket AP" + "I Reference</a>\r\n            <ul>\r\n"); " is 149.
Long Statement,DeviceHive.DocGenerator.Templates,PartialApi,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialApi.generated.cs,Execute,The length of the statement  "	WriteLiteral ("            </ul>\r\n        </li>\r\n    </ul>\r\n</div>\r\n<div id=\"content\" class=\"col" + "umn\" role=\"main\">\r\n    <div id=\"GetStarted\">\r\n        "); " is 178.
Long Statement,DeviceHive.DocGenerator.Templates,PartialApi,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialApi.generated.cs,Execute,The length of the statement  "	WriteLiteral ("\r\n    </div>\r\n    <div id=\"Reference\">\r\n        <h1>REST API Reference</h1>\r\n    " + "    <p>The DeviceHive REST API exposes the following resources:</p>\r\n"); " is 185.
Long Statement,DeviceHive.DocGenerator.Templates,PartialApi,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialApi.generated.cs,Execute,The length of the statement  "	WriteLiteral ("    </div>\r\n    <div id=\"WsReference\">\r\n        <h1>WebSocket API Reference</h1>\r" + "\n        <p>The DeviceHive WebSocket API exposes the following services:</p>\r\n"); " is 192.
Long Statement,DeviceHive.DocGenerator.Templates,PartialApi,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialApi.generated.cs,Execute,The length of the statement  "                var nav = """"; jQuery.each(hash.split(""/"")' function (index' value) { nav += ""-"" + value; jQuery(""#nav"" + nav).show(); });" is 129.
Long Statement,DeviceHive.DocGenerator.Templates,PartialMethod,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialMethod.generated.cs,Execute,The length of the statement  "		WriteLiteral ("<table>\r\n    <tr>\r\n        <th style=\"width:200px\">Parameter Name</th>\r\n        <" + "th style=\"width:80px\">Required</th>\r\n        <th style=\"width:80px\">Type</th>\r\n " + "       <th style=\"width:400px\">Description</th>\r\n    </tr>\r\n"); " is 271.
Long Statement,DeviceHive.DocGenerator.Templates,PartialMethod,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialMethod.generated.cs,Execute,The length of the statement  "			WriteLiteral ("<table>\r\n    <tr>\r\n        <th style=\"width:200px\">Property Name</th>\r\n        <t" + "h style=\"width:80px\">Required</th>\r\n        <th style=\"width:80px\">Type</th>\r\n  " + "      <th style=\"width:400px\">Description</th>\r\n    </tr>\r\n"); " is 270.
Long Statement,DeviceHive.DocGenerator.Templates,PartialMethod,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialMethod.generated.cs,Execute,The length of the statement  "			WriteLiteral ("<table>\r\n    <tr>\r\n        <th style=\"width:200px\">Property Name</th>\r\n        <t" + "h style=\"width:80px\">Type</th>\r\n        <th style=\"width:400px\">Description</th>" + "\r\n    </tr>\r\n"); " is 220.
Long Statement,DeviceHive.DocGenerator.Templates,PartialResource,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialResource.generated.cs,Execute,The length of the statement  "	WriteLiteral ("</p>\r\n\r\n<h2>Methods</h2>\r\n<table>\r\n    <tr>\r\n        <th style=\"width:120px\">Meth" + "od</th>\r\n        <th style=\"width:150px\">Authorization</th>\r\n        <th style=\"" + "width:300px\">Uri</th>\r\n        <th style=\"width:400px\">Description</th>\r\n    </t" + "r>\r\n"); " is 306.
Long Statement,DeviceHive.DocGenerator.Templates,PartialResource,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialResource.generated.cs,Execute,The length of the statement  "		WriteLiteral ("<table>\r\n    <tr>\r\n        <th style=\"width:200px\">Property Name</th>\r\n        <t" + "h style=\"width:80px\">Type</th>\r\n        <th style=\"width:400px\">Description</th>" + "\r\n    </tr>\r\n"); " is 220.
Complex Conditional,DeviceHive.DocGenerator,GeneratorHelper,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,ToJsonType,The conditional expression  "type.GetInterfaces ().Any (i => i.IsGenericType && i.GetGenericTypeDefinition () == typeof(IEnumerable<>)) && type != typeof(string) && type != typeof(JObject)"  is complex.
Magic Number,DeviceHive.DocGenerator,GeneratorHelper,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,GetCrefType,The following statement contains a magic number: if (type == null) {  	type = AppDomain.CurrentDomain.GetAssemblies ().Select (a => a.GetType (typeName.Substring (2))).Where (t => t != null).FirstOrDefault ();  }  
Magic Number,DeviceHive.DocGenerator,GeneratorHelper,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\GeneratorHelper.cs,GetCrefType,The following statement contains a magic number: type = AppDomain.CurrentDomain.GetAssemblies ().Select (a => a.GetType (typeName.Substring (2))).Where (t => t != null).FirstOrDefault ();  
Magic Number,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The following statement contains a magic number: if (IsDeviceMethod (method) && actionAttribute.ActionName == "device/save") {  	parameters.Insert (3' new MetadataParameter ("deviceKey"' _helper.ToJsonType (typeof(string))' "Device authentication key."' true));  }  
Magic Number,DeviceHive.DocGenerator,WsMetadataGenerator,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Generators\WsMetadataGenerator.cs,GetRequestParameters,The following statement contains a magic number: parameters.Insert (3' new MetadataParameter ("deviceKey"' _helper.ToJsonType (typeof(string))' "Device authentication key."' true));  
Magic Number,DeviceHive.DocGenerator,XmlCommentReader,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\XmlCommentReader.cs,ProcessTypeName,The following statement contains a magic number: if (result.Success) {  	return string.Format ("{0}{{{1}}}"' result.Groups [1].Value' result.Groups [2].Value);  }  
Magic Number,DeviceHive.DocGenerator,XmlCommentReader,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\XmlCommentReader.cs,ProcessTypeName,The following statement contains a magic number: return string.Format ("{0}{{{1}}}"' result.Groups [1].Value' result.Groups [2].Value);  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters) {  	if (processed.Contains (parameter))  		continue;  	if (!isFirstProperty)  		builder.AppendLine ("'");  	isFirstProperty = false;  	var innerObject = parameters.Where (p => p.Name.StartsWith (parameter.Name + "."));  	if (innerObject.Any ()) {  		var innerParams = innerObject.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 1)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		JsonRepresentationBlock (builder' innerParams' indent + 1);  		builder.AppendFormat ("{0}}}"' new string (' '' 4 * indent));  		processed.AddRange (innerObject);  		continue;  	}  	var innerArray = parameters.Where (p => p.Name.StartsWith (parameter.Name + "[]."));  	if (innerArray.Any ()) {  		var innerParams = innerArray.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 3)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  		JsonRepresentationBlock (builder' innerParams' indent + 2);  		builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  		builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  		processed.AddRange (innerArray);  		continue;  	}  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"' new string (' '' 4 * indent)' Encode (parameter.Name)' Encode (parameter.Type));  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters) {  	if (processed.Contains (parameter))  		continue;  	if (!isFirstProperty)  		builder.AppendLine ("'");  	isFirstProperty = false;  	var innerObject = parameters.Where (p => p.Name.StartsWith (parameter.Name + "."));  	if (innerObject.Any ()) {  		var innerParams = innerObject.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 1)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		JsonRepresentationBlock (builder' innerParams' indent + 1);  		builder.AppendFormat ("{0}}}"' new string (' '' 4 * indent));  		processed.AddRange (innerObject);  		continue;  	}  	var innerArray = parameters.Where (p => p.Name.StartsWith (parameter.Name + "[]."));  	if (innerArray.Any ()) {  		var innerParams = innerArray.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 3)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  		JsonRepresentationBlock (builder' innerParams' indent + 2);  		builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  		builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  		processed.AddRange (innerArray);  		continue;  	}  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"' new string (' '' 4 * indent)' Encode (parameter.Name)' Encode (parameter.Type));  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters) {  	if (processed.Contains (parameter))  		continue;  	if (!isFirstProperty)  		builder.AppendLine ("'");  	isFirstProperty = false;  	var innerObject = parameters.Where (p => p.Name.StartsWith (parameter.Name + "."));  	if (innerObject.Any ()) {  		var innerParams = innerObject.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 1)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		JsonRepresentationBlock (builder' innerParams' indent + 1);  		builder.AppendFormat ("{0}}}"' new string (' '' 4 * indent));  		processed.AddRange (innerObject);  		continue;  	}  	var innerArray = parameters.Where (p => p.Name.StartsWith (parameter.Name + "[]."));  	if (innerArray.Any ()) {  		var innerParams = innerArray.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 3)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  		JsonRepresentationBlock (builder' innerParams' indent + 2);  		builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  		builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  		processed.AddRange (innerArray);  		continue;  	}  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"' new string (' '' 4 * indent)' Encode (parameter.Name)' Encode (parameter.Type));  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters) {  	if (processed.Contains (parameter))  		continue;  	if (!isFirstProperty)  		builder.AppendLine ("'");  	isFirstProperty = false;  	var innerObject = parameters.Where (p => p.Name.StartsWith (parameter.Name + "."));  	if (innerObject.Any ()) {  		var innerParams = innerObject.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 1)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		JsonRepresentationBlock (builder' innerParams' indent + 1);  		builder.AppendFormat ("{0}}}"' new string (' '' 4 * indent));  		processed.AddRange (innerObject);  		continue;  	}  	var innerArray = parameters.Where (p => p.Name.StartsWith (parameter.Name + "[]."));  	if (innerArray.Any ()) {  		var innerParams = innerArray.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 3)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  		JsonRepresentationBlock (builder' innerParams' indent + 2);  		builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  		builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  		processed.AddRange (innerArray);  		continue;  	}  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"' new string (' '' 4 * indent)' Encode (parameter.Name)' Encode (parameter.Type));  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters) {  	if (processed.Contains (parameter))  		continue;  	if (!isFirstProperty)  		builder.AppendLine ("'");  	isFirstProperty = false;  	var innerObject = parameters.Where (p => p.Name.StartsWith (parameter.Name + "."));  	if (innerObject.Any ()) {  		var innerParams = innerObject.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 1)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		JsonRepresentationBlock (builder' innerParams' indent + 1);  		builder.AppendFormat ("{0}}}"' new string (' '' 4 * indent));  		processed.AddRange (innerObject);  		continue;  	}  	var innerArray = parameters.Where (p => p.Name.StartsWith (parameter.Name + "[]."));  	if (innerArray.Any ()) {  		var innerParams = innerArray.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 3)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  		JsonRepresentationBlock (builder' innerParams' indent + 2);  		builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  		builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  		processed.AddRange (innerArray);  		continue;  	}  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"' new string (' '' 4 * indent)' Encode (parameter.Name)' Encode (parameter.Type));  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters) {  	if (processed.Contains (parameter))  		continue;  	if (!isFirstProperty)  		builder.AppendLine ("'");  	isFirstProperty = false;  	var innerObject = parameters.Where (p => p.Name.StartsWith (parameter.Name + "."));  	if (innerObject.Any ()) {  		var innerParams = innerObject.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 1)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		JsonRepresentationBlock (builder' innerParams' indent + 1);  		builder.AppendFormat ("{0}}}"' new string (' '' 4 * indent));  		processed.AddRange (innerObject);  		continue;  	}  	var innerArray = parameters.Where (p => p.Name.StartsWith (parameter.Name + "[]."));  	if (innerArray.Any ()) {  		var innerParams = innerArray.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 3)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  		JsonRepresentationBlock (builder' innerParams' indent + 2);  		builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  		builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  		processed.AddRange (innerArray);  		continue;  	}  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"' new string (' '' 4 * indent)' Encode (parameter.Name)' Encode (parameter.Type));  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters) {  	if (processed.Contains (parameter))  		continue;  	if (!isFirstProperty)  		builder.AppendLine ("'");  	isFirstProperty = false;  	var innerObject = parameters.Where (p => p.Name.StartsWith (parameter.Name + "."));  	if (innerObject.Any ()) {  		var innerParams = innerObject.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 1)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		JsonRepresentationBlock (builder' innerParams' indent + 1);  		builder.AppendFormat ("{0}}}"' new string (' '' 4 * indent));  		processed.AddRange (innerObject);  		continue;  	}  	var innerArray = parameters.Where (p => p.Name.StartsWith (parameter.Name + "[]."));  	if (innerArray.Any ()) {  		var innerParams = innerArray.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 3)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  		JsonRepresentationBlock (builder' innerParams' indent + 2);  		builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  		builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  		processed.AddRange (innerArray);  		continue;  	}  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"' new string (' '' 4 * indent)' Encode (parameter.Name)' Encode (parameter.Type));  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters) {  	if (processed.Contains (parameter))  		continue;  	if (!isFirstProperty)  		builder.AppendLine ("'");  	isFirstProperty = false;  	var innerObject = parameters.Where (p => p.Name.StartsWith (parameter.Name + "."));  	if (innerObject.Any ()) {  		var innerParams = innerObject.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 1)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		JsonRepresentationBlock (builder' innerParams' indent + 1);  		builder.AppendFormat ("{0}}}"' new string (' '' 4 * indent));  		processed.AddRange (innerObject);  		continue;  	}  	var innerArray = parameters.Where (p => p.Name.StartsWith (parameter.Name + "[]."));  	if (innerArray.Any ()) {  		var innerParams = innerArray.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 3)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  		JsonRepresentationBlock (builder' innerParams' indent + 2);  		builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  		builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  		processed.AddRange (innerArray);  		continue;  	}  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"' new string (' '' 4 * indent)' Encode (parameter.Name)' Encode (parameter.Type));  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: foreach (var parameter in parameters) {  	if (processed.Contains (parameter))  		continue;  	if (!isFirstProperty)  		builder.AppendLine ("'");  	isFirstProperty = false;  	var innerObject = parameters.Where (p => p.Name.StartsWith (parameter.Name + "."));  	if (innerObject.Any ()) {  		var innerParams = innerObject.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 1)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		JsonRepresentationBlock (builder' innerParams' indent + 1);  		builder.AppendFormat ("{0}}}"' new string (' '' 4 * indent));  		processed.AddRange (innerObject);  		continue;  	}  	var innerArray = parameters.Where (p => p.Name.StartsWith (parameter.Name + "[]."));  	if (innerArray.Any ()) {  		var innerParams = innerArray.Select (o => new MetadataParameter {  			Name = o.Name.Substring (parameter.Name.Length + 3)'  			Type = o.Type  		}).ToArray ();  		builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  		builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  		JsonRepresentationBlock (builder' innerParams' indent + 2);  		builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  		builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  		processed.AddRange (innerArray);  		continue;  	}  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"' new string (' '' 4 * indent)' Encode (parameter.Name)' Encode (parameter.Type));  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: if (innerObject.Any ()) {  	var innerParams = innerObject.Select (o => new MetadataParameter {  		Name = o.Name.Substring (parameter.Name.Length + 1)'  		Type = o.Type  	}).ToArray ();  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  	JsonRepresentationBlock (builder' innerParams' indent + 1);  	builder.AppendFormat ("{0}}}"' new string (' '' 4 * indent));  	processed.AddRange (innerObject);  	continue;  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: if (innerObject.Any ()) {  	var innerParams = innerObject.Select (o => new MetadataParameter {  		Name = o.Name.Substring (parameter.Name.Length + 1)'  		Type = o.Type  	}).ToArray ();  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  	JsonRepresentationBlock (builder' innerParams' indent + 1);  	builder.AppendFormat ("{0}}}"' new string (' '' 4 * indent));  	processed.AddRange (innerObject);  	continue;  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: {{\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: builder.AppendFormat ("{0}}}"' new string (' '' 4 * indent));  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: if (innerArray.Any ()) {  	var innerParams = innerArray.Select (o => new MetadataParameter {  		Name = o.Name.Substring (parameter.Name.Length + 3)'  		Type = o.Type  	}).ToArray ();  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  	builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  	JsonRepresentationBlock (builder' innerParams' indent + 2);  	builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  	builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  	processed.AddRange (innerArray);  	continue;  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: if (innerArray.Any ()) {  	var innerParams = innerArray.Select (o => new MetadataParameter {  		Name = o.Name.Substring (parameter.Name.Length + 3)'  		Type = o.Type  	}).ToArray ();  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  	builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  	JsonRepresentationBlock (builder' innerParams' indent + 2);  	builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  	builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  	processed.AddRange (innerArray);  	continue;  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: if (innerArray.Any ()) {  	var innerParams = innerArray.Select (o => new MetadataParameter {  		Name = o.Name.Substring (parameter.Name.Length + 3)'  		Type = o.Type  	}).ToArray ();  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  	builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  	JsonRepresentationBlock (builder' innerParams' indent + 2);  	builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  	builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  	processed.AddRange (innerArray);  	continue;  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: if (innerArray.Any ()) {  	var innerParams = innerArray.Select (o => new MetadataParameter {  		Name = o.Name.Substring (parameter.Name.Length + 3)'  		Type = o.Type  	}).ToArray ();  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  	builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  	JsonRepresentationBlock (builder' innerParams' indent + 2);  	builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  	builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  	processed.AddRange (innerArray);  	continue;  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: if (innerArray.Any ()) {  	var innerParams = innerArray.Select (o => new MetadataParameter {  		Name = o.Name.Substring (parameter.Name.Length + 3)'  		Type = o.Type  	}).ToArray ();  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  	builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  	JsonRepresentationBlock (builder' innerParams' indent + 2);  	builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  	builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  	processed.AddRange (innerArray);  	continue;  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: if (innerArray.Any ()) {  	var innerParams = innerArray.Select (o => new MetadataParameter {  		Name = o.Name.Substring (parameter.Name.Length + 3)'  		Type = o.Type  	}).ToArray ();  	builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  	builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  	JsonRepresentationBlock (builder' innerParams' indent + 2);  	builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  	builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  	processed.AddRange (innerArray);  	continue;  }  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: [\n"' new string (' '' 4 * indent)' Encode (parameter.Name));  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: builder.AppendFormat ("{0}{{\n"' new string (' '' 4 * (indent + 1)));  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: JsonRepresentationBlock (builder' innerParams' indent + 2);  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: builder.AppendFormat ("{0}}}\n"' new string (' '' 4 * (indent + 1)));  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: builder.AppendFormat ("{0}]"' new string (' '' 4 * indent));  
Magic Number,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,JsonRepresentationBlock,The following statement contains a magic number: builder.AppendFormat ("{0}<span class=\"green\">&quot;{1}&quot;</span>: <span class=\"blue\">{{{2}}}</span>"' new string (' '' 4 * indent)' Encode (parameter.Name)' Encode (parameter.Type));  
Duplicate Code,DeviceHive.DocGenerator.Templates,PartialMethod,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialMethod.generated.cs,Execute,The method contains a code clone-set at the following line numbers (starting from the method definition): ((38' 67)' (94' 123))
Duplicate Code,DeviceHive.DocGenerator.Templates,PartialMethod,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialMethod.generated.cs,Execute,The method contains a code clone-set at the following line numbers (starting from the method definition): ((48' 67)' (151' 170))
Duplicate Code,DeviceHive.DocGenerator.Templates,PartialMethod,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Templates\PartialMethod.generated.cs,Execute,The method contains a code clone-set at the following line numbers (starting from the method definition): ((104' 126)' (151' 173))
Missing Default,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,DocumentationBlock,The following switch statement is missing a default case: switch (tagName) {  case "para":  	substitution = "<p class=\"doc\">" + contents + "</p>";  	break;  case "c":  case "code":  	substitution = "<pre class=\"doc\">" + contents + "</pre>";  	break;  case "list":  	substitution = "<ul class=\"doc\">" + contents + "</ul>";  	break;  case "item":  	substitution = "<li class=\"doc\">" + contents + "</li>";  	break;  case "description":  	substitution = contents;  	break;  }  
Missing Default,DeviceHive.DocGenerator,Html,F:\newReposMay17\devicehive_devicehive-.net\src\Server\DeviceHive.DocGenerator\Html.cs,DocumentationBlock,The following switch statement is missing a default case: switch (tag.Name.LocalName) {  case "see":  	substitution = string.Format (@"<a href=""#Reference/{0}"">{0}</a>"' (string)tag.Attribute ("cref"));  	break;  }  
