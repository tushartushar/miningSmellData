Implementation smell,Namespace,Class,File,Method,Description
Long Method,DeviceHive.API,JsonMapperConfig,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\App_Start\JsonMapperConfig.cs,ConfigureMapping,The method has 201 lines of code.
Complex Method,DeviceHive.API.Controllers,UserController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\UserController.cs,Put,Cyclomatic complexity of the method is 8
Complex Method,DeviceHive.API.Controllers,UserController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\UserController.cs,ValidateLoginUniqueness,Cyclomatic complexity of the method is 8
Complex Method,DeviceHive.API.Filters,AuthenticationFilter,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Filters\AuthenticationFilter.cs,AuthenticateAsync,Cyclomatic complexity of the method is 12
Complex Method,DeviceHive.API.Filters,AuthorizeAttribute,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Filters\AuthorizeAttribute.cs,TryAuthorizeUser,Cyclomatic complexity of the method is 8
Long Parameter List,DeviceHive.API.Filters,DeviceGuidConstraint,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Filters\DeviceGuidConstraint.cs,Match,The method has 5 parameters. Parameters: request' route' parameterName' values' routeDirection
Long Parameter List,DeviceHive.API.Filters,IdOrCurrentConstraint,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Filters\IdOrCurrentConstraint.cs,Match,The method has 5 parameters. Parameters: request' route' parameterName' values' routeDirection
Long Statement,DeviceHive.API,MessageBusConfig,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\App_Start\MessageBusConfig.cs,ConfigureSubscriptions,The length of the statement  "            messageBus.Subscribe<DeviceNotificationAddedMessage>(message => notificationByDeviceIdWaiter.NotifyChanges(message.DeviceId' message.Name)); " is 140.
Long Statement,DeviceHive.API,MessageBusConfig,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\App_Start\MessageBusConfig.cs,ConfigureSubscriptions,The length of the statement  "            messageBus.Subscribe<DeviceCommandAddedMessage>(message => commandByDeviceIdWaiter.NotifyChanges(message.DeviceId' message.Name)); " is 130.
Long Statement,DeviceHive.API,MessageBusConfig,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\App_Start\MessageBusConfig.cs,ConfigureSubscriptions,The length of the statement  "            messageBus.Subscribe<DeviceCommandUpdatedMessage>(message => commandByCommandIdWaiter.NotifyChanges(message.CommandId' null)); " is 126.
Long Statement,DeviceHive.API,NinjectWebCommon,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\App_Start\NinjectWebCommon.cs,RegisterServices,The length of the statement  "            var configuration = (DeviceHiveConfiguration)ConfigurationManager.GetSection("deviceHive") ?? new DeviceHiveConfiguration();" is 124.
Long Statement,DeviceHive.API,NinjectWebCommon,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\App_Start\NinjectWebCommon.cs,RegisterServices,The length of the statement  "            kernel.Bind<MessageBus>().To<TcpSocketMessageBus>().InSingletonScope().OnActivation(MessageBusConfig.ConfigureSubscriptions);" is 125.
Long Statement,DeviceHive.API,NinjectWebCommon,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\App_Start\NinjectWebCommon.cs,RegisterServices,The length of the statement  "            kernel.Bind<IAuthenticationManager>().To<AuthenticationManager>().InSingletonScope().OnActivation(m => m.Initialize(kernel));" is 125.
Long Statement,DeviceHive.API,WebApiConfig,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\App_Start\WebApiConfig.cs,Register,The length of the statement  "            jsonFormatter.SerializerSettings.Converters.Add(new IsoDateTimeConverter { DateTimeFormat = "yyyy-MM-ddTHH:mm:ss.ffffff" }); " is 124.
Long Statement,DeviceHive.API.Internal,ObjectWaiter,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Internal\ObjectWaiter.cs,GetSubscriptionsFor,The length of the statement  "                return _subscriptions.Where(s => (s.Keys.Contains(key) || s.Keys.Contains(null)) && (s.Tags == null || s.Tags.Contains(tag))).ToArray(); " is 136.
Long Statement,DeviceHive.API.Controllers,DeviceCommandPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceCommandPollController.cs,Get,The length of the statement  "            var delayTask = Task.Delay(1000 * Math.Min(config.CommandPollMaxInterval' waitTimeout ?? config.CommandPollDefaultInterval)); " is 125.
Long Statement,DeviceHive.API.Controllers,DeviceCommandPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceCommandPollController.cs,GetMany,The length of the statement  "            var delayTask = Task.Delay(1000 * Math.Min(config.CommandPollMaxInterval' waitTimeout ?? config.CommandPollDefaultInterval)); " is 125.
Long Statement,DeviceHive.API.Controllers,DeviceCommandPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceCommandPollController.cs,Get,The length of the statement  "            var delayTask = Task.Delay(1000 * Math.Min(config.CommandPollMaxInterval' waitTimeout ?? config.CommandPollDefaultInterval)); " is 125.
Long Statement,DeviceHive.API.Controllers,DeviceController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceController.cs,Post,The length of the statement  "            return HttpResponse(HttpStatusCode.MethodNotAllowed' "The method is not allowed' please use PUT /device/{id} to register a device");" is 132.
Long Statement,DeviceHive.API.Controllers,DeviceController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceController.cs,Delete,The length of the statement  "            if (CallContext.CurrentDevice != null && !string.Equals(CallContext.CurrentDevice.GUID' id' StringComparison.OrdinalIgnoreCase)) " is 128.
Long Statement,DeviceHive.API.Controllers,DeviceNotificationPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceNotificationPollController.cs,Get,The length of the statement  "                var filter = new DeviceNotificationFilter { Start = start' IsDateInclusive = false' Notifications = notificationNames };" is 120.
Long Statement,DeviceHive.API.Controllers,DeviceNotificationPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceNotificationPollController.cs,Get,The length of the statement  "            var delayTask = Task.Delay(1000 * Math.Min(config.NotificationPollMaxInterval' waitTimeout ?? config.NotificationPollDefaultInterval)); " is 135.
Long Statement,DeviceHive.API.Controllers,DeviceNotificationPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceNotificationPollController.cs,Get,The length of the statement  "                    var filter = new DeviceNotificationFilter { Start = start' IsDateInclusive = false' Notifications = notificationNames }; " is 120.
Long Statement,DeviceHive.API.Controllers,DeviceNotificationPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceNotificationPollController.cs,GetMany,The length of the statement  "                var filter = new DeviceNotificationFilter { Start = start' IsDateInclusive = false' Notifications = notificationNames };" is 120.
Long Statement,DeviceHive.API.Controllers,DeviceNotificationPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceNotificationPollController.cs,GetMany,The length of the statement  "            var delayTask = Task.Delay(1000 * Math.Min(config.NotificationPollMaxInterval' waitTimeout ?? config.NotificationPollDefaultInterval)); " is 135.
Long Statement,DeviceHive.API.Controllers,DeviceNotificationPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceNotificationPollController.cs,GetMany,The length of the statement  "                    var filter = new DeviceNotificationFilter { Start = start' IsDateInclusive = false' Notifications = notificationNames }; " is 120.
Long Statement,DeviceHive.API.Controllers,OAuth2Controller,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\OAuth2Controller.cs,Token,The length of the statement  "                        if (grant == null || grant.ClientID != client.ID || grant.Type != (int)OAuthGrantType.Code || grant.RedirectUri != redirectUri)" is 127.
Long Statement,DeviceHive.API.Controllers,OAuth2Controller,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\OAuth2Controller.cs,RenewGrant,The length of the statement  "            grant.AccessKey.ExpirationDate = grant.AccessType == (int)OAuthGrantAccessType.Online ? (DateTime?)DateTime.UtcNow.AddHours(1) : null;" is 134.
Long Statement,DeviceHive.API.Controllers,UserController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\UserController.cs,Put,The length of the statement  "                        ThrowHttpResponse(HttpStatusCode.Forbidden' "It's not allowed to change a password for an user with the social login option only!"); " is 132.
Long Statement,DeviceHive.API.Controllers,DeviceClassController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceClassController.cs,Delete,The length of the statement  "                ThrowHttpResponse(HttpStatusCode.Forbidden' "Could not delete a device class because there are one or several devices associated with it.");" is 140.
Long Statement,DeviceHive.API.Controllers,NetworkController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\NetworkController.cs,Delete,The length of the statement  "                ThrowHttpResponse(HttpStatusCode.Forbidden' "Could not delete a network because there are one or several devices associated with it.");" is 135.
Long Statement,DeviceHive.API.Filters,AllowCrossDomainOrigin,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Filters\AllowCrossDomainOrigin.cs,AppendCorsHeaders,The length of the statement  "            response.Headers.Add("Access-Control-Allow-Headers"' "Origin' Authorization' Accept' Content-Type' Auth-DeviceID' Auth-DeviceKey");" is 131.
Long Statement,DeviceHive.API.Filters,AuthenticationFilter,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Filters\AuthenticationFilter.cs,AuthenticateAsync,The length of the statement  "                            (accessKey.ExpirationDate.Value - DateTime.UtcNow).TotalSeconds < _deviceHiveConfiguration.Authentication.SessionTimeout.TotalSeconds / 2) " is 138.
Long Statement,DeviceHive.API.Filters,AuthorizeAttribute,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Filters\AuthorizeAttribute.cs,ThrowUnauthorizedResponse,The length of the statement  "            var response = actionContext.Request.CreateResponse<ErrorDetail>(HttpStatusCode.Unauthorized' new ErrorDetail("Not authorized"));" is 129.
Long Statement,DeviceHive.API.Filters,HttpCreatedResponseAttribute,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Filters\HttpCreatedResponseAttribute.cs,OnActionExecutedAsync,The length of the statement  "                    actionExecutedContext.Response.Headers.Location = new Uri(actionExecutedContext.Request.RequestUri.AbsoluteUri + "/" + result["id"]); " is 133.
Complex Conditional,DeviceHive.API.Controllers,OAuth2Controller,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\OAuth2Controller.cs,Token,The conditional expression  "grant == null || grant.ClientID != client.ID || grant.Type != (int)OAuthGrantType.Code || grant.RedirectUri != redirectUri"  is complex.
Empty Catch Block,DeviceHive.API.Controllers,OAuth2Controller,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\OAuth2Controller.cs,AuthenticateClient,The method has an empty catch block.
Empty Catch Block,DeviceHive.API.Filters,AuthenticationFilter,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Filters\AuthenticationFilter.cs,AuthenticateAsync,The method has an empty catch block.
Magic Number,DeviceHive.API.Controllers,DeviceCommandPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceCommandPollController.cs,Get,The following statement contains a magic number: var delayTask = Task.Delay(1000 * Math.Min(config.CommandPollMaxInterval' waitTimeout ?? config.CommandPollDefaultInterval));
Magic Number,DeviceHive.API.Controllers,DeviceCommandPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceCommandPollController.cs,GetMany,The following statement contains a magic number: var delayTask = Task.Delay(1000 * Math.Min(config.CommandPollMaxInterval' waitTimeout ?? config.CommandPollDefaultInterval));
Magic Number,DeviceHive.API.Controllers,DeviceCommandPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceCommandPollController.cs,Get,The following statement contains a magic number: var delayTask = Task.Delay(1000 * Math.Min(config.CommandPollMaxInterval' waitTimeout ?? config.CommandPollDefaultInterval));
Magic Number,DeviceHive.API.Controllers,DeviceNotificationPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceNotificationPollController.cs,Get,The following statement contains a magic number: var delayTask = Task.Delay(1000 * Math.Min(config.NotificationPollMaxInterval' waitTimeout ?? config.NotificationPollDefaultInterval));
Magic Number,DeviceHive.API.Controllers,DeviceNotificationPollController,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\DeviceNotificationPollController.cs,GetMany,The following statement contains a magic number: var delayTask = Task.Delay(1000 * Math.Min(config.NotificationPollMaxInterval' waitTimeout ?? config.NotificationPollDefaultInterval));
Magic Number,DeviceHive.API.Controllers,OAuth2Controller,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Controllers\OAuth2Controller.cs,Token,The following statement contains a magic number: switch (grantType)             {                 case "authorization_code":                     {                         var code = GetRequiredParameter(request' "code");                         var redirectUri = GetRequiredParameter(request' "redirect_uri");                          Guid authCode;                         if (!Guid.TryParse(code' out authCode))                             ThrowHttpResponse(HttpStatusCode.Forbidden' "Invalid authorization code!");                          // find a valid grant by authorization code                         var grant = DataContext.OAuthGrant.Get(authCode);                         if (grant == null || grant.ClientID != client.ID || grant.Type != (int)OAuthGrantType.Code || grant.RedirectUri != redirectUri)                             ThrowHttpResponse(HttpStatusCode.Forbidden' "Invalid authorization code!");                          if (DateTime.UtcNow > grant.Timestamp.AddMinutes(10))                             ThrowHttpResponse(HttpStatusCode.Forbidden' "Invalid authorization code!");                          grant.AuthCode = null; // deny subsequent requests with the same authorization code                         DataContext.OAuthGrant.Save(grant);                          accessKey = grant.AccessKey;                     }                     break;                                  case "password":                     {                         var scope = GetRequiredParameter(request' "scope");                         var username = GetRequiredParameter(request' "username");                         var password = GetRequiredParameter(request' "password");                          // authenticate user                          User user = null;                         try                          {                              user = _authenticationManager.AuthenticateByPassword(username' password);                          }                         catch (AuthenticationException)                          {                              ThrowHttpResponse(HttpStatusCode.Unauthorized' "Invalid credentials or account is disabled!");                          }                          // issue or renew grant                         var filter = new OAuthGrantFilter                             {                                 ClientID = client.ID'                                 Scope = scope'                                 Type = (int)OAuthGrantType.Password'                             };                          var grant = DataContext.OAuthGrant.GetByUser(user.ID' filter).FirstOrDefault() ??                             new OAuthGrant(client' user.ID' new AccessKey()' (int)OAuthGrantType.Password' scope);                         RenewGrant(grant);                          DataContext.AccessKey.Save(grant.AccessKey);                         DataContext.OAuthGrant.Save(grant);                         accessKey = grant.AccessKey;                     }                     break;                                  default:                     ThrowHttpResponse(HttpStatusCode.BadRequest' "Invalid grant_type parameter!");                     break;             }
Magic Number,DeviceHive.API.Filters,AuthenticationFilter,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Filters\AuthenticationFilter.cs,AuthenticateAsync,The following statement contains a magic number: if (auth != null && auth.Scheme == "Bearer" && !string.IsNullOrEmpty(auth.Parameter))              {                  // get the token value                  var token = auth.Parameter;                    // get the access key object                  var accessKey = controller.DataContext.AccessKey.Get(token);                  if (accessKey != null && (accessKey.ExpirationDate == null || accessKey.ExpirationDate > DateTime.UtcNow))                  {                      // get the user object                      var user = controller.DataContext.User.Get(accessKey.UserID);                      if (user != null && user.Status == (int)UserStatus.Active)                      {                          // prolongate the key                          if (accessKey.Type == (int)AccessKeyType.Session && accessKey.ExpirationDate != null &&                              (accessKey.ExpirationDate.Value - DateTime.UtcNow).TotalSeconds < _deviceHiveConfiguration.Authentication.SessionTimeout.TotalSeconds / 2)                          {                              accessKey.ExpirationDate = DateTime.UtcNow.Add(_deviceHiveConfiguration.Authentication.SessionTimeout);                              controller.DataContext.AccessKey.Save(accessKey);                          }                            // authenticate the user                          controller.CallContext.CurrentAccessKey = accessKey;                          controller.CallContext.CurrentUser = user;                      }                  }                    return;              }
Magic Number,DeviceHive.API.Filters,AuthenticationFilter,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Filters\AuthenticationFilter.cs,AuthenticateAsync,The following statement contains a magic number: if (!string.IsNullOrEmpty(deviceId))              {                  // get the device object                  var device = controller.DataContext.Device.Get(deviceId);                  if (device != null && device.Key != null)                  {                      // check device key authentication                      var authDeviceKey = context.Request.GetCustomHeader("Auth-DeviceKey");                      if (authDeviceKey != null && device.Key == authDeviceKey)                      {                          // ensure the device is not blocked                          if (device.IsBlocked)                          {                              throw new HttpResponseException(context.Request.CreateResponse(                                  HttpStatusCode.Forbidden' new ErrorDetail(11' "Device has been blocked")));                          }                            // authenticate the device and update last online                          controller.CallContext.CurrentDevice = device;                          controller.DataContext.Device.SetLastOnline(device.ID);                      }                  }                    return;              }
Magic Number,DeviceHive.API.Filters,DeviceGuidConstraint,C:\repos\devicehive_devicehive-.net\src\Server\DeviceHive.API\Filters\DeviceGuidConstraint.cs,Match,The following statement contains a magic number: return valueString.Length <= 64;
