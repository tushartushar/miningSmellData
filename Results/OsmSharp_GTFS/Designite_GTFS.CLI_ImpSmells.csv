Implementation smell,Namespace,Class,File,Method,Description
Long Statement,GTFS.CLI,Program,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Program.cs,Main,The length of the statement  "                throw new Exception("Command list could not be interpreted. Make sure you have the correct source/filter/target combinations."); " is 128.
Long Statement,GTFS.CLI.Switches.Processors,ProcessorFeedFilter,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\Processors\ProcessorFeedFilter.cs,Collapse,The length of the statement  "            if (processors.Count == 0) { throw new ArgumentOutOfRangeException("processors"' "There has to be at least on processor there to collapse this target."); } " is 155.
Long Statement,GTFS.CLI.Switches.Processors,ProcessorFeedFilter,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\Processors\ProcessorFeedFilter.cs,Collapse,The length of the statement  "            if (processors[processors.Count - 1] == null) { throw new ArgumentOutOfRangeException("processors"' "The last processor in the processors list is null."); } " is 156.
Long Statement,GTFS.CLI.Switches.Processors,ProcessorFeedFilter,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\Processors\ProcessorFeedFilter.cs,Collapse,The length of the statement  "                if (!source.IsReady) { throw new InvalidOperationException("Last processor before filter is a source but it is not ready."); } " is 126.
Long Statement,GTFS.CLI.Switches.Processors,ProcessorFeedValidation,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\Processors\ProcessorFeedValidation.cs,Collapse,The length of the statement  "            if (processors.Count == 0) { throw new ArgumentOutOfRangeException("processors"' "There has to be at least on processor there to collapse this target."); } " is 155.
Long Statement,GTFS.CLI.Switches.Processors,ProcessorFeedValidation,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\Processors\ProcessorFeedValidation.cs,Collapse,The length of the statement  "            if (processors[processors.Count - 1] == null) { throw new ArgumentOutOfRangeException("processors"' "The last processor in the processors list is null."); } " is 156.
Long Statement,GTFS.CLI.Switches.Processors,ProcessorFeedValidation,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\Processors\ProcessorFeedValidation.cs,Collapse,The length of the statement  "                if (!source.IsReady) { throw new InvalidOperationException("Last processor before writer is a source but it is not ready."); } " is 126.
Long Statement,GTFS.CLI.Switches.Processors,ProcessorWriteFeed,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\Processors\ProcessorWriteFeed.cs,Collapse,The length of the statement  "            if (processors.Count == 0) { throw new ArgumentOutOfRangeException("processors"' "There has to be at least on processor there to collapse this target."); } " is 155.
Long Statement,GTFS.CLI.Switches.Processors,ProcessorWriteFeed,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\Processors\ProcessorWriteFeed.cs,Collapse,The length of the statement  "            if (processors[processors.Count - 1] == null) { throw new ArgumentOutOfRangeException("processors"' "The last processor in the processors list is null."); } " is 156.
Long Statement,GTFS.CLI.Switches.Processors,ProcessorWriteFeed,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\Processors\ProcessorWriteFeed.cs,Collapse,The length of the statement  "                if (!source.IsReady) { throw new InvalidOperationException("Last processor before writer is a source but it is not ready."); } " is 126.
Complex Conditional,GTFS.CLI.Switches,SwitchFilterBoundingBox,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\SwitchFilterBoundingBox.cs,Parse,The conditional expression  "!(bottomOk && topOk && leftOk && rightOk)"  is complex.
Magic Number,GTFS.CLI,SwitchParser,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\SwitchParser.cs,RemoveQuotes,The following statement contains a magic number: if (stringToParse.Length < 2)              {                  return stringToParse;              }
Magic Number,GTFS.CLI,SwitchParser,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\SwitchParser.cs,RemoveQuotes,The following statement contains a magic number: if (stringToParse[0] == '"' && stringToParse[stringToParse.Length - 1] == '"')              {                  return stringToParse.Substring(1' stringToParse.Length - 2);              }
Magic Number,GTFS.CLI,SwitchParser,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\SwitchParser.cs,RemoveQuotes,The following statement contains a magic number: if (stringToParse[0] == '\'' && stringToParse[stringToParse.Length - 1] == '\'')              {                  return stringToParse.Substring(1' stringToParse.Length - 2);              }
Magic Number,GTFS.CLI,SwitchParser,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\SwitchParser.cs,SplitKeyValue,The following statement contains a magic number: if (keyValueString.Count(x => x == '=') == 1)              { // there is only one '=' sign here.                  int idx = keyValueString.IndexOf('=');                  if (idx > 0 && idx < keyValueString.Length - 1)                  {                      keyValue = new string[2];                      keyValue[0] = keyValueString.Substring(0' idx);                      keyValue[1] = keyValueString.Substring(idx + 1' keyValueString.Length - (idx + 1));                      return true;                  }              }
Magic Number,GTFS.CLI.Switches,SwitchFilterAddShapes,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\SwitchFilterAddShapes.cs,Parse,The following statement contains a magic number: while (idx < args.Length &&                  !SwitchParser.IsSwitch(args[idx]))              { // parse arguments.                  var argSplit = args[idx].Split('=');                    if (argSplit.Length != 2 ||                      argSplit[0] == null ||                      argSplit[1] == null)                  {                      throw new SwitchParserException(args[idx]'                          "Invalid argument for --add-shapes.");                  }                    switch (argSplit[0])                  {                      case "routerdb":                          this.RouterDb = argSplit[1];                          break;                      default:                          throw new SwitchParserException(args[idx]'                              "Unknown argument for --add-shapes.");                  }                    idx++;              }
Magic Number,GTFS.CLI.Switches,SwitchFilterBoundingBox,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\SwitchFilterBoundingBox.cs,Parse,The following statement contains a magic number: if (args.Length < idx + 3)              {                  throw new SwitchParserException("None"' "Invalid bounding-box command!");              }
Magic Number,GTFS.CLI.Switches,SwitchFilterBoundingBox,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\SwitchFilterBoundingBox.cs,Parse,The following statement contains a magic number: for (int currentArg = idx; currentArg < idx + 4; currentArg++)              {                  string[] argSplit = args[currentArg].Split('=');                    if (argSplit.Length != 2 ||                      argSplit[0] == null ||                      argSplit[1] == null)                  {                      throw new SwitchParserException(args[currentArg]'                                                           "Invalid boundary condition for boundingbox command!");                  }                    argSplit[0] = argSplit[0].ToLower();                  argSplit[0] = SwitchParser.RemoveQuotes(argSplit[0]);                  argSplit[1] = SwitchParser.RemoveQuotes(argSplit[1]);                  if (argSplit[0] == "top")                  {                      if (                          !float.TryParse(argSplit[1]' NumberStyles.Float'                                          System.Globalization.CultureInfo.InvariantCulture' out top))                      {                          throw new SwitchParserException(args[currentArg]'                                                               "Invalid boundary condition for boundingbox command!");                      }                      topOk = true;                  }                  else if (argSplit[0] == "left")                  {                      if (                          !float.TryParse(argSplit[1]' NumberStyles.Float'                                          System.Globalization.CultureInfo.InvariantCulture' out left))                      {                          throw new SwitchParserException(args[currentArg]'                                                               "Invalid boundary condition for boundingbox command!");                      }                      leftOk = true;                  }                  else if (argSplit[0] == "bottom")                  {                      if (                          !float.TryParse(argSplit[1]' NumberStyles.Float'                                          System.Globalization.CultureInfo.InvariantCulture' out bottom))                      {                          throw new SwitchParserException(args[currentArg]'                                                               "Invalid boundary condition for boundingbox command!");                      }                      bottomOk = true;                  }                  else if (argSplit[0] == "right")                  {                      if (                          !float.TryParse(argSplit[1]' NumberStyles.Float'                                          System.Globalization.CultureInfo.InvariantCulture' out right))                      {                          throw new SwitchParserException(args[currentArg]'                                                               "Invalid boundary condition for boundingbox command!");                      }                      rightOk = true;                  }                  else                  {                      throw new SwitchParserException(args[currentArg]'                                                           "Invalid boundary condition for boundingbox command!");                  }              }
Magic Number,GTFS.CLI.Switches,SwitchFilterBoundingBox,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\SwitchFilterBoundingBox.cs,Parse,The following statement contains a magic number: for (int currentArg = idx; currentArg < idx + 4; currentArg++)              {                  string[] argSplit = args[currentArg].Split('=');                    if (argSplit.Length != 2 ||                      argSplit[0] == null ||                      argSplit[1] == null)                  {                      throw new SwitchParserException(args[currentArg]'                                                           "Invalid boundary condition for boundingbox command!");                  }                    argSplit[0] = argSplit[0].ToLower();                  argSplit[0] = SwitchParser.RemoveQuotes(argSplit[0]);                  argSplit[1] = SwitchParser.RemoveQuotes(argSplit[1]);                  if (argSplit[0] == "top")                  {                      if (                          !float.TryParse(argSplit[1]' NumberStyles.Float'                                          System.Globalization.CultureInfo.InvariantCulture' out top))                      {                          throw new SwitchParserException(args[currentArg]'                                                               "Invalid boundary condition for boundingbox command!");                      }                      topOk = true;                  }                  else if (argSplit[0] == "left")                  {                      if (                          !float.TryParse(argSplit[1]' NumberStyles.Float'                                          System.Globalization.CultureInfo.InvariantCulture' out left))                      {                          throw new SwitchParserException(args[currentArg]'                                                               "Invalid boundary condition for boundingbox command!");                      }                      leftOk = true;                  }                  else if (argSplit[0] == "bottom")                  {                      if (                          !float.TryParse(argSplit[1]' NumberStyles.Float'                                          System.Globalization.CultureInfo.InvariantCulture' out bottom))                      {                          throw new SwitchParserException(args[currentArg]'                                                               "Invalid boundary condition for boundingbox command!");                      }                      bottomOk = true;                  }                  else if (argSplit[0] == "right")                  {                      if (                          !float.TryParse(argSplit[1]' NumberStyles.Float'                                          System.Globalization.CultureInfo.InvariantCulture' out right))                      {                          throw new SwitchParserException(args[currentArg]'                                                               "Invalid boundary condition for boundingbox command!");                      }                      rightOk = true;                  }                  else                  {                      throw new SwitchParserException(args[currentArg]'                                                           "Invalid boundary condition for boundingbox command!");                  }              }
Magic Number,GTFS.CLI.Switches,SwitchFilterBoundingBox,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\SwitchFilterBoundingBox.cs,Parse,The following statement contains a magic number: return 4;
Magic Number,GTFS.CLI.Switches,SwitchFilterRoutes,C:\repos\OsmSharp_GTFS\src\GTFS.CLI\Switches\SwitchFilterRoutes.cs,Parse,The following statement contains a magic number: while (idx < args.Length &&                  !SwitchParser.IsSwitch(args[idx]))              { // parse arguments.                  var argSplit = args[idx].Split('=');                    if (argSplit.Length != 2 ||                      argSplit[0] == null ||                      argSplit[1] == null)                  {                      throw new SwitchParserException(args[idx]'                                                           "Invalid argument for --filter-routes.");                  }                    switch(argSplit[0])                  {                      case "ids":                          this.RouteIds = argSplit[1].Split(''');                          break;                      case "exclude":                          this.Exclude = argSplit[1].ToLowerInvariant() == "yes";                          break;                      default:                          throw new SwitchParserException(args[idx]'                                                               "Unknown argument for --filter-routes.");                  }                    idx++;              }
