Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Appccelerate.StateMachine,StateMachineTestBase<TStateMachine>,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\StateMachineTestBase.cs,SetUpWaitForAllTransitions,The length of the parameter numberOfTransitionCompletedMessages is 35.
Long Identifier,Appccelerate.StateMachine,StateMachineTestBase<TStateMachine>,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\StateMachineTestBase.cs,SetUpWaitForAllTransitions,The length of the parameter numberOfTransitionCompletedMessagesReceived is 43.
Long Statement,Appccelerate.StateMachine,ExtensionTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\ExtensionTest.cs,Context,The length of the statement  "            return A<ITransitionContext<States' Events>>.That.Matches(context => context.EventId.Value == eventId && context.State.Id == sourceState); " is 138.
Long Statement,Appccelerate.StateMachine,StateMachineAssertionsExtensionMethods,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\StateMachineAssertionsExtensionMethods.cs,BeSuccessfulTransitionResultWithNewState,The length of the statement  "                   .FailWith("expected transition result with new state = `" + expectedNewState.Id + "`' but found `" + transitionResult.NewState.Id + "`."); " is 138.
Long Statement,Appccelerate.StateMachine.Machine,ExceptionCasesTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\ExceptionCasesTest.cs,TransitionWithoutGuardHasToBeLast,The length of the statement  "            Action action = () => this.testee.In(StateMachine.States.A).On(StateMachine.Events.B).If(() => false).Execute(() => { }); " is 121.
Long Statement,Appccelerate.StateMachine.Machine.Transitions,ExceptionThrowingActionTransitionTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Transitions\ExceptionThrowingActionTransitionTest.cs,CallsExtensionToHandleException,The length of the statement  "            A.CallTo(() => extension.HandlingTransitionException(this.StateMachineInformation' this.Testee' this.TransitionContext' ref this.exception)).MustHaveHappened(); " is 160.
Long Statement,Appccelerate.StateMachine.Machine.Transitions,ExceptionThrowingActionTransitionTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Transitions\ExceptionThrowingActionTransitionTest.cs,CallsExtensionToHandleException,The length of the statement  "            A.CallTo(() => extension.HandledTransitionException(this.StateMachineInformation' this.Testee' this.TransitionContext' this.exception)).MustHaveHappened(); " is 155.
Long Statement,Appccelerate.StateMachine.Machine.Transitions,ExceptionThrowingGuardTransitionTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Transitions\ExceptionThrowingGuardTransitionTest.cs,CallsExtensionToHandleException,The length of the statement  "            A.CallTo(() => extension.HandlingGuardException(this.StateMachineInformation' this.Testee' this.TransitionContext' ref this.exception)).MustHaveHappened(); " is 155.
Long Statement,Appccelerate.StateMachine.Machine.Transitions,ExceptionThrowingGuardTransitionTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Transitions\ExceptionThrowingGuardTransitionTest.cs,CallsExtensionToHandleException,The length of the statement  "            A.CallTo(() => extension.HandledGuardException(this.StateMachineInformation' this.Testee' this.TransitionContext' this.exception)).MustHaveHappened(); " is 150.
Long Statement,Appccelerate.StateMachine.Reports,CsvStateMachineReportGeneratorTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Reports\CsvStateMachineReportGeneratorTest.cs,Report,The length of the statement  "            const string ExpectedTransitionsReport = "Source;Event;Guard;Target;ActionsHealthy;ErrorOccured;;Error;OnFloor;CloseDoor;;DoorClosed;OnFloor;OpenDoor;;DoorOpen;OnFloor;GoUp;CheckOverload;MovingUp;OnFloor;GoUp;;internal transition;AnnounceOverload' BeepOnFloor;GoDown;CheckOverload;MovingDown;OnFloor;GoDown;;internal transition;AnnounceOverloadMoving;Stop;;OnFloor;Error;Reset;;Healthy;Error;ErrorOccured;;internal transition;"; " is 428.
Long Statement,Appccelerate.StateMachine.Reports,CsvStateMachineReportGeneratorTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Reports\CsvStateMachineReportGeneratorTest.cs,Report,The length of the statement  "            const string ExpectedStatesReport = "Source;Entry;Exit;ChildrenHealthy;;;OnFloor' MovingOnFloor;AnnounceFloor;Beep' Beep;DoorClosed' DoorOpenMoving;;;MovingUp' MovingDownMovingUp;;;MovingDown;;;DoorClosed;;;DoorOpen;;;Error;;;"; " is 228.
Long Statement,Appccelerate.StateMachine.Reports,YEdStateMachineReportGeneratorTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Reports\YEdStateMachineReportGeneratorTest.cs,YEdGraphML,The length of the statement  "            const string ExpectedReport = "<?xml version=\"1.0\" encoding=\"utf-8\"?><graphml xmlns:y=\"http://www.yworks.com/xml/graphml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:yed=\"http://www.yworks.com/xml/yed/3\" xmlns:schemaLocation=\"http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd\" xmlns=\"http://graphml.graphdrawing.org/xmlns\">  <!--Created by Appccelerate.StateMachine.YEdStateMachineReportGenerator-->  <key for=\"graphml\" id=\"d0\" yfiles.type=\"resources\" />  <key for=\"port\" id=\"d1\" yfiles.type=\"portgraphics\" />  <key for=\"port\" id=\"d2\" yfiles.type=\"portgeometry\" />  <key for=\"port\" id=\"d3\" yfiles.type=\"portuserdata\" />  <key attr.name=\"url\" attr.type=\"string\" for=\"node\" id=\"d4\" />  <key attr.name=\"description\" attr.type=\"string\" for=\"node\" id=\"d5\" />  <key for=\"node\" id=\"d6\" yfiles.type=\"nodegraphics\" />  <key attr.name=\"Beschreibung\" attr.type=\"string\" for=\"graph\" id=\"d7\">    <default />  </key>  <key attr.name=\"url\" attr.type=\"string\" for=\"edge\" id=\"d8\" />  <key attr.name=\"description\" attr.type=\"string\" for=\"edge\" id=\"d9\" />  <key for=\"edge\" id=\"d10\" yfiles.type=\"edgegraphics\" />  <graph edgedefault=\"directed\" id=\"G\">    <node id=\"Healthy\">      <data key=\"d6\">        <y:ProxyAutoBoundsNode>          <y:Realizers active=\"0\">            <y:GroupNode>              <y:NodeLabel alignment=\"right\" autoSizePolicy=\"node_width\" backgroundColor=\"#EBEBEB\" modelName=\"internal\" modelPosition=\"t\">Healthy</y:NodeLabel>              <y:State closed=\"false\" innerGraphDisplayEnabled=\"true\" />            </y:GroupNode>          </y:Realizers>        </y:ProxyAutoBoundsNode>      </data>      <graph edgedefault=\"directed\" id=\"Healthy:\">        <node id=\"OnFloor\">          <data key=\"d6\">            <y:ProxyAutoBoundsNode>              <y:Realizers active=\"0\">                <y:GroupNode>                  <y:NodeLabel alignment=\"right\" autoSizePolicy=\"node_width\" backgroundColor=\"#EBEBEB\" modelName=\"internal\" modelPosition=\"t\">(AnnounceFloor)OnFloor(Beep' Beep)</y:NodeLabel>                  <y:State closed=\"false\" innerGraphDisplayEnabled=\"true\" />                  <y:BorderStyle width=\"2.0\" />                </y:GroupNode>              </y:Realizers>            </y:ProxyAutoBoundsNode>          </data>          <graph edgedefault=\"directed\" id=\"OnFloor:\">            <node id=\"DoorClosed\">              <data key=\"d6\">                <y:ShapeNode>                  <y:NodeLabel>DoorClosed</y:NodeLabel>                  <y:Shape type=\"ellipse\" />                  <y:BorderStyle width=\"2.0\" />                </y:ShapeNode>              </data>            </node>            <node id=\"DoorOpen\">              <data key=\"d6\">                <y:ShapeNode>                  <y:NodeLabel>DoorOpen</y:NodeLabel>                  <y:Shape type=\"ellipse\" />                </y:ShapeNode>              </data>            </node>          </graph>        </node>        <node id=\"Moving\">          <data key=\"d6\">            <y:ProxyAutoBoundsNode>              <y:Realizers active=\"0\">                <y:GroupNode>                  <y:NodeLabel alignment=\"right\" autoSizePolicy=\"node_width\" backgroundColor=\"#EBEBEB\" modelName=\"internal\" modelPosition=\"t\">Moving</y:NodeLabel>                  <y:State closed=\"false\" innerGraphDisplayEnabled=\"true\" />                </y:GroupNode>              </y:Realizers>            </y:ProxyAutoBoundsNode>          </data>          <graph edgedefault=\"directed\" id=\"Moving:\">            <node id=\"MovingUp\">              <data key=\"d6\">                <y:ShapeNode>                  <y:NodeLabel>MovingUp</y:NodeLabel>                  <y:Shape type=\"ellipse\" />                  <y:BorderStyle width=\"2.0\" />                </y:ShapeNode>              </data>            </node>            <node id=\"MovingDown\">              <data key=\"d6\">                <y:ShapeNode>                  <y:NodeLabel>MovingDown</y:NodeLabel>                  <y:Shape type=\"ellipse\" />                </y:ShapeNode>              </data>            </node>          </graph>        </node>      </graph>    </node>    <node id=\"Error\">      <data key=\"d6\">        <y:ShapeNode>          <y:NodeLabel>Error</y:NodeLabel>          <y:Shape type=\"ellipse\" />        </y:ShapeNode>      </data>    </node>    <edge id=\"ErrorOccured0\" source=\"Healthy\" target=\"Error\">      <data key=\"d10\">        <y:PolyLineEdge>          <y:LineStyle type=\"line\" />          <y:Arrows source=\"none\" target=\"standard\" />          <y:EdgeLabel>ErrorOccured</y:EdgeLabel>        </y:PolyLineEdge>      </data>    </edge>    <edge id=\"CloseDoor1\" source=\"OnFloor\" target=\"DoorClosed\">      <data key=\"d10\">        <y:PolyLineEdge>          <y:LineStyle type=\"line\" />          <y:Arrows source=\"none\" target=\"standard\" />          <y:EdgeLabel>CloseDoor</y:EdgeLabel>        </y:PolyLineEdge>      </data>    </edge>    <edge id=\"OpenDoor2\" source=\"OnFloor\" target=\"DoorOpen\">      <data key=\"d10\">        <y:PolyLineEdge>          <y:LineStyle type=\"line\" />          <y:Arrows source=\"none\" target=\"standard\" />          <y:EdgeLabel>OpenDoor</y:EdgeLabel>        </y:PolyLineEdge>      </data>    </edge>    <edge id=\"GoUp3\" source=\"OnFloor\" target=\"MovingUp\">      <data key=\"d10\">        <y:PolyLineEdge>          <y:LineStyle type=\"line\" />          <y:Arrows source=\"none\" target=\"standard\" />          <y:EdgeLabel>[CheckOverload]GoUp</y:EdgeLabel>        </y:PolyLineEdge>      </data>    </edge>    <edge id=\"GoUp4\" source=\"OnFloor\" target=\"OnFloor\">      <data key=\"d10\">        <y:PolyLineEdge>          <y:LineStyle type=\"dashed\" />          <y:Arrows source=\"none\" target=\"plain\" />          <y:EdgeLabel>GoUp(AnnounceOverload' Beep)</y:EdgeLabel>        </y:PolyLineEdge>      </data>    </edge>    <edge id=\"GoDown5\" source=\"OnFloor\" target=\"MovingDown\">      <data key=\"d10\">        <y:PolyLineEdge>          <y:LineStyle type=\"line\" />          <y:Arrows source=\"none\" target=\"standard\" />          <y:EdgeLabel>[CheckOverload]GoDown</y:EdgeLabel>        </y:PolyLineEdge>      </data>    </edge>    <edge id=\"GoDown6\" source=\"OnFloor\" target=\"OnFloor\">      <data key=\"d10\">        <y:PolyLineEdge>          <y:LineStyle type=\"dashed\" />          <y:Arrows source=\"none\" target=\"plain\" />          <y:EdgeLabel>GoDown(AnnounceOverload)</y:EdgeLabel>        </y:PolyLineEdge>      </data>    </edge>    <edge id=\"Stop7\" source=\"Moving\" target=\"OnFloor\">      <data key=\"d10\">        <y:PolyLineEdge>          <y:LineStyle type=\"line\" />          <y:Arrows source=\"none\" target=\"standard\" />          <y:EdgeLabel>Stop</y:EdgeLabel>        </y:PolyLineEdge>      </data>    </edge>    <edge id=\"Reset8\" source=\"Error\" target=\"Healthy\">      <data key=\"d10\">        <y:PolyLineEdge>          <y:LineStyle type=\"line\" />          <y:Arrows source=\"none\" target=\"standard\" />          <y:EdgeLabel>Reset</y:EdgeLabel>        </y:PolyLineEdge>      </data>    </edge>    <edge id=\"ErrorOccured9\" source=\"Error\" target=\"Error\">      <data key=\"d10\">        <y:PolyLineEdge>          <y:LineStyle type=\"dashed\" />          <y:Arrows source=\"none\" target=\"plain\" />          <y:EdgeLabel>ErrorOccured</y:EdgeLabel>        </y:PolyLineEdge>      </data>    </edge>  </graph>  <data key=\"d0\">    <y:Resources />  </data></graphml>"; " is 7657.
Magic Number,Appccelerate.StateMachine,StateMachineTestBase<TStateMachine>,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\StateMachineTestBase.cs,InitializeWhenStartedThenInitialStateIsEntered,The following statement contains a magic number: enteredStateSignal.WaitOne(1000)                  .Should().BeTrue();
Magic Number,Appccelerate.StateMachine,StateMachineTestBase<TStateMachine>,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\StateMachineTestBase.cs,PriorityFire,The following statement contains a magic number: const int Transitions = 3;
Magic Number,Appccelerate.StateMachine,StateMachineTestBase<TStateMachine>,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\StateMachineTestBase.cs,StopAndRestart,The following statement contains a magic number: const int Transitions = 2;
Magic Number,Appccelerate.StateMachine,StateMachineTestBase<TStateMachine>,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\StateMachineTestBase.cs,WaitForAllTransitions,The following statement contains a magic number: Assert.True(allTransitionsCompleted.WaitOne(1000)' "not enough transition completed events received within time-out.");
Magic Number,Appccelerate.StateMachine.Machine.ActionHolders,SingleArgumentTransitionActionHolderTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\ActionHolders\SingleArgumentTransitionActionHolderTest.cs,NonMatchingType,The following statement contains a magic number: Action action = () => { testee.Execute(3); };
Magic Number,Appccelerate.StateMachine.Machine.ActionHolders,SingleArgumentTransitionActionHolderTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\ActionHolders\SingleArgumentTransitionActionHolderTest.cs,TooManyArguments,The following statement contains a magic number: Action action = () => { testee.Execute(new object[] { 3' 4 }); };
Magic Number,Appccelerate.StateMachine.Machine.ActionHolders,SingleArgumentTransitionActionHolderTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\ActionHolders\SingleArgumentTransitionActionHolderTest.cs,TooManyArguments,The following statement contains a magic number: Action action = () => { testee.Execute(new object[] { 3' 4 }); };
Magic Number,Appccelerate.StateMachine.Machine,ExceptionCasesTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\ExceptionCasesTest.cs,ExceptionThrowingGuard,The following statement contains a magic number: var eventArguments = new object[] { 1' 2' "test" };
Magic Number,Appccelerate.StateMachine.Machine,ExceptionCasesTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\ExceptionCasesTest.cs,ExceptionThrowingAction,The following statement contains a magic number: var eventArguments = new object[] { 1' 2' "test" };
Magic Number,Appccelerate.StateMachine.Machine,ExceptionCasesTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\ExceptionCasesTest.cs,EntryActionWhenThrowingExceptionThenNotificationAndStateIsEntered,The following statement contains a magic number: var eventArguments = new object[] { 1' 2' "test" };
Magic Number,Appccelerate.StateMachine.Machine,ExceptionCasesTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\ExceptionCasesTest.cs,ExitActionWhenThrowingExceptionThenNotificationAndStateIsEntered,The following statement contains a magic number: var eventArguments = new object[] { 1' 2' "test" };
Magic Number,Appccelerate.StateMachine.Machine,GuardTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\GuardTest.cs,GuardWithASingleArgument,The following statement contains a magic number: this.testee.Fire(StateMachine.Events.B' 3);
Magic Number,Appccelerate.StateMachine.Machine,StateActionTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\StateActionTest.cs,ParameterizedEntryAction,The following statement contains a magic number: this.testee.In(StateMachine.States.A)                  .ExecuteOnEntryParametrized(parameter => i = parameter' 3);
Magic Number,Appccelerate.StateMachine.Machine,StateActionTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\StateActionTest.cs,ParameterizedEntryAction,The following statement contains a magic number: Assert.Equal(3' i);
Magic Number,Appccelerate.StateMachine.Machine,StateActionTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\StateActionTest.cs,ParametrizedExitAction,The following statement contains a magic number: this.testee.In(StateMachine.States.A)                  .ExecuteOnExitParametrized(value => i = value' 3)                  .On(StateMachine.Events.B).Goto(StateMachine.States.B);
Magic Number,Appccelerate.StateMachine.Machine,StateActionTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\StateActionTest.cs,ParametrizedExitAction,The following statement contains a magic number: Assert.Equal(i' 3);
Magic Number,Appccelerate.StateMachine.Machine,TransitionsTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\TransitionsTest.cs,ExecuteActions,The following statement contains a magic number: const int EventArgument = 17;
Magic Number,Appccelerate.StateMachine.Machine,TransitionsTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\TransitionsTest.cs,ExecutesActions_WhenActionsWithAndWithoutArgumentAreDefined,The following statement contains a magic number: const int EventArgument = 17;
Magic Number,Appccelerate.StateMachine.Machine.GuardHolders,SingleArgumentGuardHolderTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\GuardHolders\SingleArgumentGuardHolderTest.cs,ExecuteWhenPassingWrongTypeThenException,The following statement contains a magic number: const int Argument = 4;
Magic Number,Appccelerate.StateMachine.Machine.States,StateTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\States\StateTest.cs,HierarchyWhenSettingLevelThenTheLevelOfAllChildrenIsUpdated,The following statement contains a magic number: const int Level = 2;
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,Syntax,The following statement contains a magic number: Action a = () =>                  {                      s                          .ExecuteOnEntry(() => { })                          .ExecuteOnEntry((int i) => { })                          .ExecuteOnEntryParametrized(p => { }' 4)                          .ExecuteOnEntryParametrized(p => { }' "test")                          .ExecuteOnExit(() => { })                          .ExecuteOnExit((string st) => { })                          .ExecuteOnExitParametrized(p => { }' 4)                          .ExecuteOnExitParametrized(p => { }' "test")                          .On(3)                              .If(() => true).Goto(4).Execute(() => { }).Execute((int i) => { })                              .If(() => true).Goto(4)                              .If(() => true).Execute(() => { }).Execute((int i) => { })                              .If<string>(this.AGuard).Execute(() => { }).Execute((int i) => { })                              .Otherwise().Goto(4)                          .On(5)                              .If(() => true).Execute(() => { })                              .Otherwise()                          .On(2)                              .If<int>(i => i != 0).Goto(7)                              .Otherwise().Goto(7)                          .On(1)                              .If(() => true).Goto(7).Execute(() => { }).Execute<string>(argument => { })                          .On(1)                              .If(() => true).Execute(() => { })                              .Otherwise().Execute(() => { }).Execute((int i) => { })                          .On(4)                              .Goto(5).Execute(() => { }).Execute<string>(argument => { })                          .On(5)                              .Execute(() => { }).Execute((int i) => { })                          .On(7)                              .Goto(4)                          .On(8)                          .On(9);                  };
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,DefineHierarchySyntax,The following statement contains a magic number: stateMachine.DefineHierarchyOn(1)                  .WithHistoryType(HistoryType.Deep)                  .WithInitialSubState(2)                  .WithSubState(3)                  .WithSubState(4);
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,DefineHierarchySyntax,The following statement contains a magic number: stateMachine.DefineHierarchyOn(1)                  .WithHistoryType(HistoryType.Deep)                  .WithInitialSubState(2)                  .WithSubState(3)                  .WithSubState(4);
Magic Number,Appccelerate.StateMachine.Machine.Syntax,SyntaxTest,D:\research\architectureSmells\repos\appccelerate_appccelerate\source\Appccelerate.StateMachine.Test\Machine\Syntax\SyntaxTest.cs,DefineHierarchySyntax,The following statement contains a magic number: stateMachine.DefineHierarchyOn(1)                  .WithHistoryType(HistoryType.Deep)                  .WithInitialSubState(2)                  .WithSubState(3)                  .WithSubState(4);
