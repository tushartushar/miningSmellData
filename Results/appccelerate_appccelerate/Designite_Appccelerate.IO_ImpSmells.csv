Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Appccelerate.IO.Streams,StreamExtensionMethods,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Streams\StreamExtensionMethods.cs,CopyTo,Cyclomatic complexity of the method is 8
Long Parameter List,Appccelerate.IO.Access,FileExtensionBase,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\FileExtensionBase.cs,EndOpen,The method has 5 parameters. Parameters: result' path' mode' access' share
Long Parameter List,Appccelerate.IO.Access,FileExtensionBase,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\FileExtensionBase.cs,EndCreate,The method has 5 parameters. Parameters: result' path' bufferSize' options' fileSecurity
Long Parameter List,Appccelerate.IO.Access,IFileExtension,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\IFileExtension.g.cs,EndOpen,The method has 5 parameters. Parameters: result' path' mode' access' share
Long Parameter List,Appccelerate.IO.Access,IFileExtension,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\IFileExtension.g.cs,EndCreate,The method has 5 parameters. Parameters: result' path' bufferSize' options' fileSecurity
Long Parameter List,Appccelerate.IO.Streams,StreamDecoratorStream,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Streams\StreamDecoratorStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Appccelerate.IO.Streams,StreamDecoratorStream,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Streams\StreamDecoratorStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Identifier,Appccelerate.IO.Access.Internals,ExtensionProviderExtensions,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\ExtensionProviderExtensions.cs,,The length of the parameter UnableToDetermineBeginEndOrFailMethodMessage is 44.
Long Statement,Appccelerate.IO,ExceptionExtensionMethods,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\ExceptionExtensionMethods.cs,PreserveStackTrace,The length of the statement  "            var remoteStackTraceString = typeof(Exception).GetField("_remoteStackTraceString"' BindingFlags.Instance | BindingFlags.NonPublic); " is 131.
Long Statement,Appccelerate.IO.Access.Internals,Directory,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\Directory.cs,CreateDirectory,The length of the statement  "            var directoryInfo = this.SurroundWithExtension(() => System.IO.Directory.CreateDirectory(path' directorySecurity)' path' directorySecurity); " is 140.
Long Statement,Appccelerate.IO.Access.Internals,Directory,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\Directory.cs,GetFiles,The length of the statement  "            return this.SurroundWithExtension(() => System.IO.Directory.GetFiles(path' searchPattern' searchOption)' path' searchPattern' searchOption); " is 140.
Long Statement,Appccelerate.IO.Access.Internals,Directory,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\Directory.cs,GetAccessControl,The length of the statement  "            return this.SurroundWithExtension(() => System.IO.Directory.GetAccessControl(path' includeSections)' path' includeSections); " is 124.
Long Statement,Appccelerate.IO.Access.Internals,Directory,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\Directory.cs,GetDirectories,The length of the statement  "            return this.SurroundWithExtension(() => System.IO.Directory.GetDirectories(path' searchPattern' searchOption)' path' searchPattern' searchOption); " is 146.
Long Statement,Appccelerate.IO.Access.Internals,Directory,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\Directory.cs,GetFileSystemEntries,The length of the statement  "            return this.SurroundWithExtension(() => System.IO.Directory.GetFileSystemEntries(path' searchPattern)' path' searchPattern); " is 124.
Long Statement,Appccelerate.IO.Access.Internals,Directory,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\Directory.cs,SetAccessControl,The length of the statement  "            this.SurroundWithExtension(() => System.IO.Directory.SetAccessControl(path' directorySecurity)' path' directorySecurity); " is 121.
Long Statement,Appccelerate.IO.Access.Internals,Directory,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\Directory.cs,SetLastAccessTimeUtc,The length of the statement  "            this.SurroundWithExtension(() => System.IO.Directory.SetLastAccessTimeUtc(path' lastAccessTimeUtc)' path' lastAccessTimeUtc); " is 125.
Long Statement,Appccelerate.IO.Access.Internals,Directory,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\Directory.cs,SetLastWriteTimeUtc,The length of the statement  "            this.SurroundWithExtension(() => System.IO.Directory.SetLastWriteTimeUtc(path' lastWriteTimeUtc)' path' lastWriteTimeUtc); " is 122.
Long Statement,Appccelerate.IO.Access.Internals,Environment,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\Environment.cs,GetEnvironmentVariables,The length of the statement  "            return this.SurroundWithExtension(() => System.Environment.GetEnvironmentVariables(target)' target).OfType<DictionaryEntry>().ToDictionary(e => (string)e.Key' v => (string)v.Value); " is 181.
Long Statement,Appccelerate.IO.Access.Internals,Environment,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\Environment.cs,GetEnvironmentVariables,The length of the statement  "            return this.SurroundWithExtension(() => System.Environment.GetEnvironmentVariables()).OfType<DictionaryEntry>().ToDictionary(e => (string)e.Key' v => (string)v.Value); " is 167.
Long Statement,Appccelerate.IO.Access.Internals,Environment,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\Environment.cs,SetEnvironmentVariable,The length of the statement  "            this.SurroundWithExtension(() => System.Environment.SetEnvironmentVariable(variable' value' target)' variable' value' target); " is 126.
Long Statement,Appccelerate.IO.Access.Internals,ExtensionProviderExtensions,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\ExtensionProviderExtensions.cs,SurroundWithExtensionInternal,The length of the statement  "            Item item = !ReflectionCache.ContainsKey(key) ? CacheItem<TExtension>(methodName' key' hasReturn' typeof(TReturn)) : ReflectionCache[key]; " is 138.
Long Statement,Appccelerate.IO.Access.Internals,ExtensionProviderExtensions,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\ExtensionProviderExtensions.cs,CacheItem,The length of the statement  "                beginMethodInfo = candidates.Single(c => c.Name.Equals(beginMethodName' StringComparison.Ordinal) && c.GetParameterTypes().SequenceEqual(key.TypeArguments)); " is 157.
Long Statement,Appccelerate.IO.Access.Internals,ExtensionProviderExtensions,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\ExtensionProviderExtensions.cs,CacheItem,The length of the statement  "                endMethodInfo = candidates.Single(c => c.Name.Equals(endMethodName' StringComparison.Ordinal) && c.GetParameterTypes().SequenceEqual(endMethodParameterTypes)); " is 159.
Long Statement,Appccelerate.IO.Access.Internals,File,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\File.cs,Copy,The length of the statement  "            this.SurroundWithExtension(() => System.IO.File.Copy(sourceFileName' destFileName' overwrite)' sourceFileName' destFileName' overwrite); " is 136.
Long Statement,Appccelerate.IO.Access.Internals,File,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\File.cs,Create,The length of the statement  "            return this.SurroundWithExtension(() => System.IO.File.Create(path' bufferSize' options' fileSecurity)' path' bufferSize' options' fileSecurity); " is 145.
Long Statement,Appccelerate.IO.Access.Internals,File,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\File.cs,Replace,The length of the statement  "            this.SurroundWithExtension(() => System.IO.File.Replace(sourceFileName' destinationFileName' destinationBackupFileName)' sourceFileName' destinationFileName' destinationBackupFileName); " is 185.
Long Statement,Appccelerate.IO.Access.Internals,File,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\File.cs,Replace,The length of the statement  "            this.SurroundWithExtension(() => System.IO.File.Replace(sourceFileName' destinationFileName' destinationBackupFileName)' sourceFileName' destinationFileName' destinationBackupFileName' ignoreMetadataErrors); " is 207.
Long Statement,Appccelerate.IO.Access.Internals,File,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\File.cs,SetLastAccessTimeUtc,The length of the statement  "            this.SurroundWithExtension(() => System.IO.File.SetLastAccessTimeUtc(path' lastAccessTimeUtc)' path' lastAccessTimeUtc); " is 120.
Long Statement,Appccelerate.IO.Csv,CsvParser,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Csv\CsvParser.cs,Parse,The length of the statement  "            // state == State.ColumnEnd means the line ended with a seperator' column not empty means line ended with an unquoted value " is 123.
Long Statement,Appccelerate.IO.Resources,EmbeddedResourceLoader,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Resources\EmbeddedResourceLoader.cs,LoadResourceAsXml,The length of the statement  "            return this.LoadResourceAsXml(type.Assembly' string.Format(CultureInfo.InvariantCulture' "{0}.{1}"' type.Namespace' resourceName)); " is 131.
Long Statement,Appccelerate.IO.Resources,EmbeddedResourceLoader,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Resources\EmbeddedResourceLoader.cs,LoadResourceAsString,The length of the statement  "            return this.LoadResourceAsString(type.Assembly' string.Format(CultureInfo.InvariantCulture' "{0}.{1}"' type.Namespace' resourceName)); " is 134.
Long Statement,Appccelerate.IO.Resources,EmbeddedResourceLoader,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Resources\EmbeddedResourceLoader.cs,LoadResourceAsStream,The length of the statement  "            return this.LoadResourceAsStream(type.Assembly' string.Format(CultureInfo.InvariantCulture' "{0}.{1}"' type.Namespace' resourceName)); " is 134.
Empty Catch Block,Appccelerate.IO,TemporaryFileHolder,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\TemporaryFileHolder.cs,Dispose,The method has an empty catch block.
Magic Number,Appccelerate.IO.Access.Internals,Key,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Access\Internals\ExtensionProviderExtensions.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      int result = this.MethodName.GetHashCode();                      result = (result * 397) ^ this.InstanceHandle.GetHashCode();                      return result;                  }
Magic Number,Appccelerate.IO.Streams,StreamExtensionMethods,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Streams\StreamExtensionMethods.cs,CopyTo,The following statement contains a magic number: const int Size = 4096;
Missing Default,Appccelerate.IO.Csv,CsvParser,C:\repos\appccelerate_appccelerate\source\Appccelerate.IO\Csv\CsvParser.cs,Parse,The following switch statement is missing a default case: switch (state)                  {                      case State.Start:                          if (c == '"')                          {                              state = State.ColumnStartString;                          }                          else if (c == separator)                          {                              state = State.ColumnEnd;                          }                          else                          {                              state = State.ColumnStartValue;                              column.Append(c);                          }                            break;                        case State.ColumnStartString:                          if (c == '"')                          {                              state = State.Quote;                          }                          else                          {                              column.Append(c);                          }                            break;                        case State.ColumnStartValue:                          if (c == separator)                          {                              state = State.ColumnEnd;                          }                          else                          {                              column.Append(c);                          }                            break;                        case State.Quote:                          if (c == '"')                          {                              column.Append(c);                              state = State.ColumnStartString;                          }                          else if (c == separator)                          {                              state = State.ColumnEnd;                          }                          else                          {                              state = State.Error;                          }                            break;                        case State.ColumnEnd:                          if (c == '"')                          {                              state = State.ColumnStartString;                          }                          else if (c == separator)                          {                              state = State.ColumnEnd;                          }                          else                          {                              state = State.ColumnStartValue;                              column.Append(c);                          }                            break;                        case State.Error:                          throw new CsvParseException(                              line' position' "A string must be followed by a separator' EOL or EOF");                  }
