Implementation smell,Namespace,Class,File,Method,Description
Long Method,Effort.CsvTool.ViewModels,MainViewModel,C:\repos\tamasflamich_effort\Main\Source\Effort.CsvTool\ViewModels\MainViewModel.cs,worker_DoWork,The method has 120 lines of code.
Magic Number,Effort.CsvTool.ViewModels,MainViewModel,C:\repos\tamasflamich_effort\Main\Source\Effort.CsvTool\ViewModels\MainViewModel.cs,worker_DoWork,The following statement contains a magic number: using(new CultureScope(CultureInfo.InvariantCulture))              using (con)              {                  con.Open();                    var schema = con.GetSchema("Tables");                    Dictionary<string' List<string>> tables = new Dictionary<string' List<string>>();                  //List<string> tables = new List<string>();                    foreach (DataRow item in schema.Rows)                  {                      if (item[3].Equals("BASE TABLE"))                      {                          string schemaName = item[1] as string;                          string name = item[2] as string;                                                    if (!tables.ContainsKey(schemaName))                          {                              tables.Add(schemaName' new List<string>());                          }                            tables[schemaName].Add(name);                      }                  }                  foreach (var schemaName in tables.Keys)                  {                      for (int j = 0; j < tables[schemaName].Count; j++)                      {                          int rowCount = 0;                          string name = tables[schemaName][j];                            using (DbCommand cmd = con.CreateCommand())                          {                              cmd.CommandText = string.Format("SELECT * FROM [{0}].[{1}]"' schemaName' name);                              cmd.CommandType = CommandType.Text;                                FileInfo file = new FileInfo(Path.Combine(dir.FullName' string.Format("{0}.csv"' name)));                                if (!dir.Exists)                              {                                  dir.Create();                              }                                using (DbDataReader reader = cmd.ExecuteReader())                              using (StreamWriter sw = new StreamWriter(file.Open(FileMode.Create' FileAccess.Write' FileShare.None)))                              {                                  int fieldCount = reader.FieldCount;                                    string[] fieldNames = new string[fieldCount];                                  Func<object' string>[] serializers = new Func<object' string>[fieldCount];                                  bool[] typeNeedQuote = new bool[fieldCount];                                    for (int i = 0; i < fieldCount; i++)                                  {                                      fieldNames[i] = reader.GetName(i);                                        Type fieldType = reader.GetFieldType(i);                                        if (fieldType == typeof(Byte[]))                                      {                                          serializers[i] = BinarySerializer;                                          typeNeedQuote[i] = false;                                      }                                      else if (fieldType == typeof(string) | (fieldType==typeof(Guid)))                                      {                                          serializers[i] = DefaultSerializer;                                          typeNeedQuote[i] = true;                                      }                                      else                                      {                                          // Default serializer                                          serializers[i] = DefaultSerializer;                                          typeNeedQuote[i] = false;                                      }                                    }                                    sw.WriteLine(string.Join("'"' fieldNames));                                    object[] values = new object[fieldCount];                                  string[] serializedValues = new string[fieldCount];                                  bool[] addQuote = new bool[fieldCount];                                    while (reader.Read())                                  {                                      rowCount++;                                      reader.GetValues(values);                                        for (int i = 0; i < fieldCount; i++)                                      {                                          object value = values[i];                                            // Check if null                                          if (value == null || value is DBNull)                                          {                                              addQuote[i] = false;                                              serializedValues[i] = "";                                          }                                          else                                          {                                              addQuote[i] = typeNeedQuote[i];                                              serializedValues[i] = serializers[i](value);                                          }                                      }                                        {                                          int i = 0;                                          for (; i < fieldCount - 1; i++)                                          {                                              AppendField(sw' serializedValues[i]' addQuote[i]);                                                sw.Write(''');                                          }                                            AppendField(sw' serializedValues[i]' addQuote[i]);                                          sw.WriteLine();                                      }                                    }                                  // DataReader is finished                              }                                // Remove Empty file                              if (rowCount == 0)                              {                                  file.Delete();                              }                              // Command is finished                          }                            this.worker.ReportProgress((int)((j + 1) * 100.0 / tables[schemaName].Count));                            // Table is finished                      }                  }                                    // All table finished              }
Magic Number,Effort.CsvTool.ViewModels,MainViewModel,C:\repos\tamasflamich_effort\Main\Source\Effort.CsvTool\ViewModels\MainViewModel.cs,worker_DoWork,The following statement contains a magic number: using(new CultureScope(CultureInfo.InvariantCulture))              using (con)              {                  con.Open();                    var schema = con.GetSchema("Tables");                    Dictionary<string' List<string>> tables = new Dictionary<string' List<string>>();                  //List<string> tables = new List<string>();                    foreach (DataRow item in schema.Rows)                  {                      if (item[3].Equals("BASE TABLE"))                      {                          string schemaName = item[1] as string;                          string name = item[2] as string;                                                    if (!tables.ContainsKey(schemaName))                          {                              tables.Add(schemaName' new List<string>());                          }                            tables[schemaName].Add(name);                      }                  }                  foreach (var schemaName in tables.Keys)                  {                      for (int j = 0; j < tables[schemaName].Count; j++)                      {                          int rowCount = 0;                          string name = tables[schemaName][j];                            using (DbCommand cmd = con.CreateCommand())                          {                              cmd.CommandText = string.Format("SELECT * FROM [{0}].[{1}]"' schemaName' name);                              cmd.CommandType = CommandType.Text;                                FileInfo file = new FileInfo(Path.Combine(dir.FullName' string.Format("{0}.csv"' name)));                                if (!dir.Exists)                              {                                  dir.Create();                              }                                using (DbDataReader reader = cmd.ExecuteReader())                              using (StreamWriter sw = new StreamWriter(file.Open(FileMode.Create' FileAccess.Write' FileShare.None)))                              {                                  int fieldCount = reader.FieldCount;                                    string[] fieldNames = new string[fieldCount];                                  Func<object' string>[] serializers = new Func<object' string>[fieldCount];                                  bool[] typeNeedQuote = new bool[fieldCount];                                    for (int i = 0; i < fieldCount; i++)                                  {                                      fieldNames[i] = reader.GetName(i);                                        Type fieldType = reader.GetFieldType(i);                                        if (fieldType == typeof(Byte[]))                                      {                                          serializers[i] = BinarySerializer;                                          typeNeedQuote[i] = false;                                      }                                      else if (fieldType == typeof(string) | (fieldType==typeof(Guid)))                                      {                                          serializers[i] = DefaultSerializer;                                          typeNeedQuote[i] = true;                                      }                                      else                                      {                                          // Default serializer                                          serializers[i] = DefaultSerializer;                                          typeNeedQuote[i] = false;                                      }                                    }                                    sw.WriteLine(string.Join("'"' fieldNames));                                    object[] values = new object[fieldCount];                                  string[] serializedValues = new string[fieldCount];                                  bool[] addQuote = new bool[fieldCount];                                    while (reader.Read())                                  {                                      rowCount++;                                      reader.GetValues(values);                                        for (int i = 0; i < fieldCount; i++)                                      {                                          object value = values[i];                                            // Check if null                                          if (value == null || value is DBNull)                                          {                                              addQuote[i] = false;                                              serializedValues[i] = "";                                          }                                          else                                          {                                              addQuote[i] = typeNeedQuote[i];                                              serializedValues[i] = serializers[i](value);                                          }                                      }                                        {                                          int i = 0;                                          for (; i < fieldCount - 1; i++)                                          {                                              AppendField(sw' serializedValues[i]' addQuote[i]);                                                sw.Write(''');                                          }                                            AppendField(sw' serializedValues[i]' addQuote[i]);                                          sw.WriteLine();                                      }                                    }                                  // DataReader is finished                              }                                // Remove Empty file                              if (rowCount == 0)                              {                                  file.Delete();                              }                              // Command is finished                          }                            this.worker.ReportProgress((int)((j + 1) * 100.0 / tables[schemaName].Count));                            // Table is finished                      }                  }                                    // All table finished              }
Magic Number,Effort.CsvTool.ViewModels,MainViewModel,C:\repos\tamasflamich_effort\Main\Source\Effort.CsvTool\ViewModels\MainViewModel.cs,worker_DoWork,The following statement contains a magic number: using(new CultureScope(CultureInfo.InvariantCulture))              using (con)              {                  con.Open();                    var schema = con.GetSchema("Tables");                    Dictionary<string' List<string>> tables = new Dictionary<string' List<string>>();                  //List<string> tables = new List<string>();                    foreach (DataRow item in schema.Rows)                  {                      if (item[3].Equals("BASE TABLE"))                      {                          string schemaName = item[1] as string;                          string name = item[2] as string;                                                    if (!tables.ContainsKey(schemaName))                          {                              tables.Add(schemaName' new List<string>());                          }                            tables[schemaName].Add(name);                      }                  }                  foreach (var schemaName in tables.Keys)                  {                      for (int j = 0; j < tables[schemaName].Count; j++)                      {                          int rowCount = 0;                          string name = tables[schemaName][j];                            using (DbCommand cmd = con.CreateCommand())                          {                              cmd.CommandText = string.Format("SELECT * FROM [{0}].[{1}]"' schemaName' name);                              cmd.CommandType = CommandType.Text;                                FileInfo file = new FileInfo(Path.Combine(dir.FullName' string.Format("{0}.csv"' name)));                                if (!dir.Exists)                              {                                  dir.Create();                              }                                using (DbDataReader reader = cmd.ExecuteReader())                              using (StreamWriter sw = new StreamWriter(file.Open(FileMode.Create' FileAccess.Write' FileShare.None)))                              {                                  int fieldCount = reader.FieldCount;                                    string[] fieldNames = new string[fieldCount];                                  Func<object' string>[] serializers = new Func<object' string>[fieldCount];                                  bool[] typeNeedQuote = new bool[fieldCount];                                    for (int i = 0; i < fieldCount; i++)                                  {                                      fieldNames[i] = reader.GetName(i);                                        Type fieldType = reader.GetFieldType(i);                                        if (fieldType == typeof(Byte[]))                                      {                                          serializers[i] = BinarySerializer;                                          typeNeedQuote[i] = false;                                      }                                      else if (fieldType == typeof(string) | (fieldType==typeof(Guid)))                                      {                                          serializers[i] = DefaultSerializer;                                          typeNeedQuote[i] = true;                                      }                                      else                                      {                                          // Default serializer                                          serializers[i] = DefaultSerializer;                                          typeNeedQuote[i] = false;                                      }                                    }                                    sw.WriteLine(string.Join("'"' fieldNames));                                    object[] values = new object[fieldCount];                                  string[] serializedValues = new string[fieldCount];                                  bool[] addQuote = new bool[fieldCount];                                    while (reader.Read())                                  {                                      rowCount++;                                      reader.GetValues(values);                                        for (int i = 0; i < fieldCount; i++)                                      {                                          object value = values[i];                                            // Check if null                                          if (value == null || value is DBNull)                                          {                                              addQuote[i] = false;                                              serializedValues[i] = "";                                          }                                          else                                          {                                              addQuote[i] = typeNeedQuote[i];                                              serializedValues[i] = serializers[i](value);                                          }                                      }                                        {                                          int i = 0;                                          for (; i < fieldCount - 1; i++)                                          {                                              AppendField(sw' serializedValues[i]' addQuote[i]);                                                sw.Write(''');                                          }                                            AppendField(sw' serializedValues[i]' addQuote[i]);                                          sw.WriteLine();                                      }                                    }                                  // DataReader is finished                              }                                // Remove Empty file                              if (rowCount == 0)                              {                                  file.Delete();                              }                              // Command is finished                          }                            this.worker.ReportProgress((int)((j + 1) * 100.0 / tables[schemaName].Count));                            // Table is finished                      }                  }                                    // All table finished              }
