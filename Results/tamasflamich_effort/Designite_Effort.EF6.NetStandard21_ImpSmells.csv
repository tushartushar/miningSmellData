Implementation smell,Namespace,Class,File,Method,Description
Long Method,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,ReadField,The method has 347 lines of code.
Long Method,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,ReadNextRecord,The method has 158 lines of code.
Long Method,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,AddDateTimeMappings,The method has 124 lines of code.
Long Method,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,GetTypeBinary,The method has 139 lines of code.
Long Method,Effort.Internal.DbCommandTreeTransformation,TransformVisitor,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\TransformVisitor.And.cs,Visit,The method has 104 lines of code.
Long Method,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,CreateRowType,The method has 108 lines of code.
Complex Method,Effort.DataLoaders,CsvValueConverter,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\DataLoaders\CsvValueConverter.cs,ConvertValue,Cyclomatic complexity of the method is 9
Complex Method,Effort.DataLoaders,CsvValueConverter,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\DataLoaders\CsvValueConverter.cs,ResolveEscapeCharacters,Cyclomatic complexity of the method is 8
Complex Method,Effort.DataLoaders,ObjectLoader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\DataLoaders\ObjectLoader.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Effort.Internal.Common,ExpressionHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\ExpressionHelper.cs,TryUnifyValueTypes,Cyclomatic complexity of the method is 8
Complex Method,Effort.Internal.Common,MetadataWorkspaceHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\MetadataWorkspaceHelper.cs,ParseMetadata,Cyclomatic complexity of the method is 9
Complex Method,Effort.Internal.Common,MetadataWorkspaceHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\MetadataWorkspaceHelper.cs,ParseResources,Cyclomatic complexity of the method is 9
Complex Method,Effort.Internal.Common,TupleTypeHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\TupleTypeHelper.cs,GetTupleType,Cyclomatic complexity of the method is 9
Complex Method,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,ParseNewLine,Cyclomatic complexity of the method is 11
Complex Method,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,ReadField,Cyclomatic complexity of the method is 61
Complex Method,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,ReadNextRecord,Cyclomatic complexity of the method is 24
Complex Method,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,HandleParseError,Cyclomatic complexity of the method is 10
Complex Method,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,GetTypeBinary,Cyclomatic complexity of the method is 12
Complex Method,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,CreateMethodCall,Cyclomatic complexity of the method is 8
Complex Method,Effort.Internal.DbCommandTreeTransformation,TransformVisitor,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\TransformVisitor.And.cs,Visit,Cyclomatic complexity of the method is 8
Complex Method,Effort.Internal.DbCommandTreeTransformation,TransformVisitor,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\TransformVisitor.And.cs,CreateComparison,Cyclomatic complexity of the method is 9
Complex Method,Effort.Internal.DbCommandTreeTransformation,TransformVisitor,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\TransformVisitor.And.cs,CreateAggregateFunction,Cyclomatic complexity of the method is 10
Complex Method,Effort.Internal.DbCommandTreeTransformation,TransformVisitor,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\TransformVisitor.And.cs,Visit,Cyclomatic complexity of the method is 8
Complex Method,Effort.Internal.DbManagement.Engine.Services,DataRowKeyInfoHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbManagement\Engine\Services\DataRowKeyInfoHelper.cs,TryParseKeySelectorExpression,Cyclomatic complexity of the method is 10
Complex Method,Effort.Internal.StorageSchema,CommonPropertyElementModifier,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\StorageSchema\CommonPropertyElementModifier.cs,Modify,Cyclomatic complexity of the method is 8
Complex Method,Effort.Internal.TypeConversion,DefaultTypeConverter,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeConversion\DefaultTypeConverter.cs,ConvertClrObject,Cyclomatic complexity of the method is 8
Complex Method,Effort.Internal.TypeConversion,DefaultTypeConverter,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeConversion\DefaultTypeConverter.cs,ConvertClrObjectReverse,Cyclomatic complexity of the method is 8
Complex Method,Effort.Internal.TypeConversion,EdmTypeConverter,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeConversion\EdmTypeConverter.cs,GetTypeFacets,Cyclomatic complexity of the method is 9
Complex Method,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GenerateLdc_I4,Cyclomatic complexity of the method is 11
Complex Method,Effort.Provider,EffortProviderManifest,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortProviderManifest.cs,ConvertTypeUsage,Cyclomatic complexity of the method is 16
Complex Method,Effort.Provider,EffortTransaction,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortTransaction.cs,TranslateIsolationLevel,Cyclomatic complexity of the method is 8
Long Parameter List,Effort.Internal.Common,DatabaseReflectionHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\DatabaseReflectionHelper.cs,CreateTable,The method has 6 parameters. Parameters: database' entityType' primaryKeyInfo' identityField' constraintFactories' tableInfo
Long Parameter List,Effort.Internal.Common,WrapperMethods,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\DatabaseReflectionHelper.cs,CreateTable,The method has 5 parameters. Parameters: database' primaryKeyInfo' identity' constraintFactories' tableInfo
Long Parameter List,Effort.Internal.Common,WrapperMethods,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\DatabaseReflectionHelper.cs,CreateRelation,The method has 6 parameters. Parameters: database' primaryIndex' foreignIndex' foreignToPrimary' primaryToForeign' options
Long Parameter List,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,CsvReader,The method has 7 parameters. Parameters: reader' hasHeaders' delimiter' quote' escape' comment' trimmingOptions
Long Parameter List,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,CsvReader,The method has 8 parameters. Parameters: reader' hasHeaders' delimiter' quote' escape' comment' trimmingOptions' bufferSize
Long Parameter List,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,CopyFieldToArray,The method has 5 parameters. Parameters: field' fieldOffset' destinationArray' destinationOffset' length
Long Parameter List,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,GetBytes,The method has 5 parameters. Parameters: i' fieldOffset' buffer' bufferoffset' length
Long Parameter List,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,GetChars,The method has 5 parameters. Parameters: i' fieldoffset' buffer' bufferoffset' length
Long Parameter List,Effort.Internal.Csv,MalformedCsvException,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\MalformedCsvException.cs,MalformedCsvException,The method has 5 parameters. Parameters: rawData' currentPosition' currentRecordIndex' currentFieldIndex' innerException
Long Parameter List,Effort.Internal.Csv,MissingFieldCsvException,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\MissingFieldCsvException.cs,MissingFieldCsvException,The method has 5 parameters. Parameters: rawData' currentPosition' currentRecordIndex' currentFieldIndex' innerException
Long Parameter List,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,CreateDateTime,The method has 6 parameters. Parameters: year' month' day' hour' minute' second
Long Parameter List,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,CreateDateTimeOffset,The method has 7 parameters. Parameters: year' month' day' hour' minute' second' offsetMinutes
Long Parameter List,Effort.Internal.DbCommandTreeTransformation,TransformVisitor,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\TransformVisitor.And.cs,CreateAggregateFunction,The method has 5 parameters. Parameters: functionAggregate' sourceVariableName' sourceType' sourceGroup' resultType
Long Parameter List,Effort.Internal.DbManagement.Schema,DbRelationInfo,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbManagement\Schema\DbRelationInfo.cs,DbRelationInfo,The method has 7 parameters. Parameters: primaryTable' foreignTable' primaryKeyInfo' foreignKeyInfo' primaryToForeignConverter' foreignToPrimaryConverter' cascadedDelete
Long Parameter List,Effort.Internal.DbManagement.Schema,DbTableInfo,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbManagement\Schema\DbTableInfo.cs,DbTableInfo,The method has 9 parameters. Parameters: entitySet' tableName' entityType' identityField' properties' primaryKeyInfo' uniqueKeys' foreignKeys' constraintFactories
Long Parameter List,Effort.Provider,EffortDataReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortDataReader.cs,GetBytes,The method has 5 parameters. Parameters: ordinal' dataOffset' buffer' bufferOffset' length
Long Parameter List,Effort.Provider,EffortDataReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortDataReader.cs,GetChars,The method has 5 parameters. Parameters: ordinal' dataOffset' buffer' bufferOffset' length
Long Identifier,Effort.Exceptions,ExceptionMessages,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Exceptions\ExceptionMessages.cs,,The length of the parameter AutomaticRegistationFailedResolveCode is 37.
Long Identifier,Effort.Exceptions,ExceptionMessages,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Exceptions\ExceptionMessages.cs,,The length of the parameter AutomaticRegistationFailedResolveConfig is 39.
Long Identifier,Effort.Exceptions,ExceptionMessages,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Exceptions\ExceptionMessages.cs,,The length of the parameter DbExpressionTransformationNotImplemented is 40.
Long Identifier,Effort.Internal.Caching,ObjectContextTypeStore,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Caching\ObjectContextTypeStore.cs,GetObjectContextType,The length of the parameter objectContextTypeFactoryMethod is 30.
Long Identifier,Effort.Internal.DbCommandTreeTransformation,TransformVisitor,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\TransformVisitor.And.cs,Visit,The length of the parameter parameterPlaceholderConstructor is 31.
Long Identifier,Effort.Internal.DbManagement.Schema.Configuration,RelationConfiguration,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbManagement\Schema\Configuration\RelationConfiguration.cs,,The length of the parameter PrimaryToForeignConverterMethod is 31.
Long Identifier,Effort.Internal.DbManagement.Schema.Configuration,RelationConfiguration,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbManagement\Schema\Configuration\RelationConfiguration.cs,,The length of the parameter ForeignToPrimaryConverterMethod is 31.
Long Statement,Effort.DataLoaders,ObjectData,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\DataLoaders\ObjectDataLoader\ObjectData.cs,Table,The length of the statement  "            throw new InvalidOperationException($"A table with the name '{tableName}' already exists' but the element type is incorrect.\r\nExpected type: '{typeof(T).Name}'\r\nActual type: '{table.GetType().GetGenericArguments()[0].Name}'"); " is 230.
Long Statement,Effort.DataLoaders,ObjectTableDataLoader<T>,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\DataLoaders\ObjectDataLoader\ObjectTableDataLoader`1.cs,ToExpression,The length of the statement  "                    return Expression.Call(Expression.Constant(table)' typeof(ObjectDataTable<T>).GetMethod(nameof(GetDiscriminator)' BindingFlags.Instance | BindingFlags.NonPublic)' parameter); " is 174.
Long Statement,Effort,EntityFrameworkEffortManager,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\EntityFrameworkEffortManager.cs,CreateFactoryContext,The length of the statement  "            throw new Exception("The specified code require a ContextFactory to work. Example: EntityFrmeworkEffortManager.ContextFactory = (currentContext) => new EntitiesContext()"); " is 172.
Long Statement,Effort.Internal.CommandActions,DeleteCommandAction,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\CommandActions\DeleteCommandAction.cs,ExecuteNonQuery,The length of the statement  "            Expression expr = DbCommandActionHelper.GetEnumeratorExpression(this.commandTree.Predicate' this.commandTree' context.DbContainer' out table); " is 142.
Long Statement,Effort.Internal.CommandActions,InsertCommandAction,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\CommandActions\InsertCommandAction.cs,ExecuteDataReader,The length of the statement  "            IDictionary<string' DbExpression> setClauses = DbCommandActionHelper.GetSetClauseExpressions(this.commandTree.SetClauses); " is 122.
Long Statement,Effort.Internal.CommandActions,InsertCommandAction,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\CommandActions\InsertCommandAction.cs,ExecuteDataReader,The length of the statement  "            Dictionary<string' object> entityReturningValues = DbCommandActionHelper.CreateReturningEntity(context' returningFields' entity); " is 129.
Long Statement,Effort.Internal.CommandActions,UpdateCommandAction,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\CommandActions\UpdateCommandAction.cs,ExecuteDataReader,The length of the statement  "            Expression expr = DbCommandActionHelper.GetEnumeratorExpression(this.commandTree.Predicate' this.commandTree' context.DbContainer' out table); " is 142.
Long Statement,Effort.Internal.CommandActions,UpdateCommandAction,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\CommandActions\UpdateCommandAction.cs,ExecuteDataReader,The length of the statement  "            IDictionary<string' DbExpression> setClauses = DbCommandActionHelper.GetSetClauseExpressions(this.commandTree.SetClauses); " is 122.
Long Statement,Effort.Internal.CommandActions,UpdateCommandAction,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\CommandActions\UpdateCommandAction.cs,ExecuteDataReader,The length of the statement  "            IEnumerable<object> updatedEntities = DatabaseReflectionHelper.UpdateEntities(entitiesToUpdate' updater' context.Transaction); " is 126.
Long Statement,Effort.Internal.CommandActions,UpdateCommandAction,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\CommandActions\UpdateCommandAction.cs,ExecuteNonQuery,The length of the statement  "            Expression expr = DbCommandActionHelper.GetEnumeratorExpression(this.commandTree.Predicate' this.commandTree' context.DbContainer' out table); " is 142.
Long Statement,Effort.Internal.CommandActions,UpdateCommandAction,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\CommandActions\UpdateCommandAction.cs,ExecuteNonQuery,The length of the statement  "            IDictionary<string' DbExpression> setClauses = DbCommandActionHelper.GetSetClauseExpressions(this.commandTree.SetClauses); " is 122.
Long Statement,Effort.Internal.Common,MetadataWorkspaceHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\MetadataWorkspaceHelper.cs,Rewrite,The length of the statement  "                UniversalStorageSchemaModifier.Instance.Modify(ssdlFile' new ProviderInformation(providerInvariantName' providerManifestToken)); " is 128.
Long Statement,Effort.Internal.Common,MetadataWorkspaceHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\MetadataWorkspaceHelper.cs,Rewrite,The length of the statement  "                new ModificationFunctionMappingModifier().Modify(mslFile' new Effort.Internal.Common.XmlProcessing.ModificationContext()); " is 122.
Long Statement,Effort.Internal.Common,MetadataWorkspaceHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\MetadataWorkspaceHelper.cs,ParseMetadata,The length of the statement  "            foreach (string component in metadata.Split(new char[] { '|' }' StringSplitOptions.RemoveEmptyEntries).Select(c => c.Trim())) " is 125.
Long Statement,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,ReadField,The length of the statement  "                                else if (c == this.escape && (this.escape != this.quote || (pos + 1 < this.bufferLength && this.buffer[pos + 1] == this.quote) || (pos + 1 == this.bufferLength && this.reader.Peek() == this.quote))) " is 198.
Long Statement,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,ReadField,The length of the statement  "                                    HandleParseError(new MalformedCsvException(GetCurrentRawData()' this.nextFieldStart' Math.Max(0' this.currentRecordIndex)' index)' ref this.nextFieldStart); " is 156.
Long Statement,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,ReadField,The length of the statement  "                                HandleParseError(new MalformedCsvException(GetCurrentRawData()' this.nextFieldStart' Math.Max(0' this.currentRecordIndex)' index)' ref this.nextFieldStart); " is 156.
Long Statement,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,ReadField,The length of the statement  "            HandleParseError(new MalformedCsvException(GetCurrentRawData()' this.nextFieldStart' Math.Max(0' this.currentRecordIndex)' index)' ref this.nextFieldStart); " is 156.
Long Statement,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,HandleParseError,The length of the statement  "                            throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture' ExceptionMessages.ParseErrorActionNotSupported' e.Action)' e.Error); " is 144.
Long Statement,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,HandleParseError,The length of the statement  "                    throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture' ExceptionMessages.ParseErrorActionNotSupported' this.defaultParseErrorAction)' error); " is 162.
Long Statement,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,CopyFieldToArray,The length of the statement  "                throw new ArgumentOutOfRangeException("field"' field' string.Format(CultureInfo.InvariantCulture' ExceptionMessages.FieldIndexOutOfRange' field)); " is 146.
Long Statement,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,GetOrdinal,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' ExceptionMessages.FieldHeaderNotFound' name)' "name"); " is 126.
Long Statement,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,GetTypeBinary,The length of the statement  "            else if ((leftTypeCode == rightTypeCode) && (leftTypeCode != TypeCode.Char) && (leftTypeCode != TypeCode.SByte) && (leftTypeCode != TypeCode.Byte) && (leftTypeCode != TypeCode.Int16) && (leftTypeCode != TypeCode.UInt16)) " is 220.
Long Statement,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,CreateMethodCall,The length of the statement  "            if (function.Name == "BitwiseOr" || function.Name == "BitwiseAnd" || function.Name == "BitwiseXor" || function.Name == "BitwiseNot") " is 132.
Long Statement,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,CreateMethodCall,The length of the statement  "                        if (!rightExpression.Type.IsGenericType || (leftExpression.Type.GetGenericTypeDefinition() != rightExpression.Type.GetGenericTypeDefinition())) " is 143.
Long Statement,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,CreateMethodCall,The length of the statement  "                        if (!leftExpression.Type.IsGenericType|| (leftExpression.Type.GetGenericTypeDefinition() != rightExpression.Type.GetGenericTypeDefinition())) " is 141.
Long Statement,Effort.Internal,InternalExtensions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Extensions\Database.GetEntityConnection.cs,GetEntityConnection,The length of the statement  "            var internalContext = database.GetType().GetField("_internalContext"' BindingFlags.NonPublic | BindingFlags.Instance).GetValue(database); " is 137.
Long Statement,Effort.Internal,InternalExtensions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Extensions\Database.GetEntityConnection.cs,GetEntityConnection,The length of the statement  "            var getObjectContext = internalContext.GetType().GetMethod("GetObjectContextWithoutDatabaseInitialization"' BindingFlags.Public | BindingFlags.Instance); " is 153.
Long Statement,Effort.Provider,EffortConnection,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortConnection.cs,GetTableInfo,The length of the statement  "                    TableInfo = (DbTableInfo)_TableInfo.GetValue(table' BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy' null' null' null); " is 169.
Long Statement,Effort.Provider,EffortConnection,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortConnection.cs,CreateRestorePoint,The length of the statement  "                    var uniqueDataStructureField = index.GetType().GetField("uniqueDataStructure"' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance); " is 149.
Long Statement,Effort.Provider,EffortConnection,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortConnection.cs,CreateRestorePoint,The length of the statement  "                    var innerField = uniqueDataStructure.GetType().GetField("inner"' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance); " is 135.
Long Statement,Effort.Provider,EffortConnection,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortConnection.cs,CreateRestorePoint,The length of the statement  "                throw new Exception("The connection must be open to create a restore point. Please open the connection first with 'effortConnection.Open()'"); " is 142.
Long Statement,Effort.Provider,EffortConnection,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortConnection.cs,ClearTables,The length of the statement  "                var tables = DbCommandActionHelper.GetAllTables(actionContext.DbContainer).ToList().Where(x => !x.EntityType.Name.Contains("_____MigrationHistory")).ToList(); " is 158.
Long Statement,Effort.Provider,EffortConnection,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortConnection.cs,ClearTables,The length of the statement  "                    var _restoreIdentityFieldMethod = table.GetType().GetMethod("RestoreIdentityField"' BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy); " is 161.
Long Statement,Effort.Provider,EffortProviderManifest,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortProviderManifest.cs,GetStoreType,The length of the statement  "                throw new KeyNotFoundException("Unable to find store type for edmType " + name + "' Effort does not support this data type."); " is 126.
Complex Conditional,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,ReadField,The conditional expression  "c == this.escape && (this.escape != this.quote || (pos + 1 < this.bufferLength && this.buffer[pos + 1] == this.quote) || (pos + 1 == this.bufferLength && this.reader.Peek() == this.quote))"  is complex.
Complex Conditional,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,ReadField,The conditional expression  "!this.eof && !delimiterSkipped && (initializing || index == this.fieldCount - 1)"  is complex.
Complex Conditional,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,ReadField,The conditional expression  "!delimiterSkipped && !this.eof && !(this.eol || IsNewLine(this.nextFieldStart))"  is complex.
Complex Conditional,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,SkipToNextLine,The conditional expression  "(pos < this.bufferLength || (ReadBuffer() && ((pos = 0) == 0))) && !ParseNewLine(ref pos)"  is complex.
Complex Conditional,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,GetTypeBinary,The conditional expression  "(leftTypeCode == rightTypeCode) && (leftTypeCode != TypeCode.Char) && (leftTypeCode != TypeCode.SByte) && (leftTypeCode != TypeCode.Byte) && (leftTypeCode != TypeCode.Int16) && (leftTypeCode != TypeCode.UInt16)"  is complex.
Complex Conditional,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,CreateMethodCall,The conditional expression  "function.Name == "BitwiseOr" || function.Name == "BitwiseAnd" || function.Name == "BitwiseXor" || function.Name == "BitwiseNot""  is complex.
Complex Conditional,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,CreateDateTime,The conditional expression  "!year.HasValue ||                   !month.HasValue ||                   !day.HasValue ||                  !hour.HasValue ||                   !minute.HasValue ||                   !second.HasValue"  is complex.
Complex Conditional,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,CreateDateTimeOffset,The conditional expression  "!year.HasValue ||                  !month.HasValue ||                  !day.HasValue ||                  !hour.HasValue ||                  !minute.HasValue ||                  !second.HasValue ||                  !offsetMinutes.HasValue"  is complex.
Complex Conditional,Effort.Internal.TypeConversion,DefaultTypeConverter,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeConversion\DefaultTypeConverter.cs,TryConvertEdmType,The conditional expression  "string.Equals("binary"' primitiveType.Name' StringComparison.InvariantCultureIgnoreCase)                  || string.Equals("image"' primitiveType.Name' StringComparison.InvariantCultureIgnoreCase)                  || string.Equals("varbinary(MAX)"' primitiveType.Name' StringComparison.InvariantCultureIgnoreCase)                  || string.Equals("varbinary"' primitiveType.Name' StringComparison.InvariantCultureIgnoreCase)"  is complex.
Empty Catch Block,Effort.DataLoaders,ObjectData,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\DataLoaders\ObjectDataLoader\ObjectData.cs,FindWithEntitySet,The method has an empty catch block.
Magic Number,Effort.Internal.Common,MetadataWorkspaceHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\MetadataWorkspaceHelper.cs,IsEcmaAssembly,The following statement contains a magic number: publicKey != null && publicKey.Length == 16 && publicKey[8] == 0x4
Magic Number,Effort.Internal.Common,MetadataWorkspaceHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\MetadataWorkspaceHelper.cs,IsEcmaAssembly,The following statement contains a magic number: publicKey != null && publicKey.Length == 16 && publicKey[8] == 0x4
Magic Number,Effort.Internal.Common,TupleTypeHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\TupleTypeHelper.cs,GetTupleType,The following statement contains a magic number: switch (memberTypes.Length)              {                  case 1:                      generic = typeof(Tuple<>);                      break;                  case 2:                      generic = typeof(Tuple<'>);                      break;                  case 3:                      generic = typeof(Tuple<''>);                      break;                  case 4:                      generic = typeof(Tuple<'''>);                      break;                  case 5:                      generic = typeof(Tuple<''''>);                      break;                  case 6:                      generic = typeof(Tuple<'''''>);                      break;                  case 7:                      generic = typeof(Tuple<''''''>);                      break;                  case 8:                      generic = typeof(Tuple<'''''''>);                      break;                  default:                      throw new ArgumentException("Too many members"' "memberTypes");              }
Magic Number,Effort.Internal.Common,TupleTypeHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\TupleTypeHelper.cs,GetTupleType,The following statement contains a magic number: switch (memberTypes.Length)              {                  case 1:                      generic = typeof(Tuple<>);                      break;                  case 2:                      generic = typeof(Tuple<'>);                      break;                  case 3:                      generic = typeof(Tuple<''>);                      break;                  case 4:                      generic = typeof(Tuple<'''>);                      break;                  case 5:                      generic = typeof(Tuple<''''>);                      break;                  case 6:                      generic = typeof(Tuple<'''''>);                      break;                  case 7:                      generic = typeof(Tuple<''''''>);                      break;                  case 8:                      generic = typeof(Tuple<'''''''>);                      break;                  default:                      throw new ArgumentException("Too many members"' "memberTypes");              }
Magic Number,Effort.Internal.Common,TupleTypeHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\TupleTypeHelper.cs,GetTupleType,The following statement contains a magic number: switch (memberTypes.Length)              {                  case 1:                      generic = typeof(Tuple<>);                      break;                  case 2:                      generic = typeof(Tuple<'>);                      break;                  case 3:                      generic = typeof(Tuple<''>);                      break;                  case 4:                      generic = typeof(Tuple<'''>);                      break;                  case 5:                      generic = typeof(Tuple<''''>);                      break;                  case 6:                      generic = typeof(Tuple<'''''>);                      break;                  case 7:                      generic = typeof(Tuple<''''''>);                      break;                  case 8:                      generic = typeof(Tuple<'''''''>);                      break;                  default:                      throw new ArgumentException("Too many members"' "memberTypes");              }
Magic Number,Effort.Internal.Common,TupleTypeHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\TupleTypeHelper.cs,GetTupleType,The following statement contains a magic number: switch (memberTypes.Length)              {                  case 1:                      generic = typeof(Tuple<>);                      break;                  case 2:                      generic = typeof(Tuple<'>);                      break;                  case 3:                      generic = typeof(Tuple<''>);                      break;                  case 4:                      generic = typeof(Tuple<'''>);                      break;                  case 5:                      generic = typeof(Tuple<''''>);                      break;                  case 6:                      generic = typeof(Tuple<'''''>);                      break;                  case 7:                      generic = typeof(Tuple<''''''>);                      break;                  case 8:                      generic = typeof(Tuple<'''''''>);                      break;                  default:                      throw new ArgumentException("Too many members"' "memberTypes");              }
Magic Number,Effort.Internal.Common,TupleTypeHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\TupleTypeHelper.cs,GetTupleType,The following statement contains a magic number: switch (memberTypes.Length)              {                  case 1:                      generic = typeof(Tuple<>);                      break;                  case 2:                      generic = typeof(Tuple<'>);                      break;                  case 3:                      generic = typeof(Tuple<''>);                      break;                  case 4:                      generic = typeof(Tuple<'''>);                      break;                  case 5:                      generic = typeof(Tuple<''''>);                      break;                  case 6:                      generic = typeof(Tuple<'''''>);                      break;                  case 7:                      generic = typeof(Tuple<''''''>);                      break;                  case 8:                      generic = typeof(Tuple<'''''''>);                      break;                  default:                      throw new ArgumentException("Too many members"' "memberTypes");              }
Magic Number,Effort.Internal.Common,TupleTypeHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\TupleTypeHelper.cs,GetTupleType,The following statement contains a magic number: switch (memberTypes.Length)              {                  case 1:                      generic = typeof(Tuple<>);                      break;                  case 2:                      generic = typeof(Tuple<'>);                      break;                  case 3:                      generic = typeof(Tuple<''>);                      break;                  case 4:                      generic = typeof(Tuple<'''>);                      break;                  case 5:                      generic = typeof(Tuple<''''>);                      break;                  case 6:                      generic = typeof(Tuple<'''''>);                      break;                  case 7:                      generic = typeof(Tuple<''''''>);                      break;                  case 8:                      generic = typeof(Tuple<'''''''>);                      break;                  default:                      throw new ArgumentException("Too many members"' "memberTypes");              }
Magic Number,Effort.Internal.Common,TupleTypeHelper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Common\TupleTypeHelper.cs,GetTupleType,The following statement contains a magic number: switch (memberTypes.Length)              {                  case 1:                      generic = typeof(Tuple<>);                      break;                  case 2:                      generic = typeof(Tuple<'>);                      break;                  case 3:                      generic = typeof(Tuple<''>);                      break;                  case 4:                      generic = typeof(Tuple<'''>);                      break;                  case 5:                      generic = typeof(Tuple<''''>);                      break;                  case 6:                      generic = typeof(Tuple<'''''>);                      break;                  case 7:                      generic = typeof(Tuple<''''''>);                      break;                  case 8:                      generic = typeof(Tuple<'''''''>);                      break;                  default:                      throw new ArgumentException("Too many members"' "memberTypes");              }
Magic Number,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,ReadNextRecord,The following statement contains a magic number: this.fields = new FieldValue[16];
Magic Number,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,GetSchemaTable,The following statement contains a magic number: schemaRow[4] = columnNames[i];
Magic Number,Effort.Internal.Csv,CsvReader,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\Csv\CsvReader.cs,GetSchemaTable,The following statement contains a magic number: schemaRow[5] = i;
Magic Number,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,MapRound,The following statement contains a magic number: switch(args.Length)              {                  case 1:                      method = IsDecimal(f.Parameters[0]) ?                          DecimalFunctions.Round :                          DoubleFunctions.Round;                      break;                  case 2:                      method = IsDecimal(f.Parameters[0]) ?                          DecimalFunctions.RoundDigits :                          DoubleFunctions.RoundDigits;                      break;              }
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,AddMicroseconds,The following statement contains a magic number: return date.Value.AddTicks(value.Value * 10);
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,AddNanoseconds,The following statement contains a magic number: return date.Value.AddTicks(value.Value / 100);
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,DiffMonths,The following statement contains a magic number: return                   (val2.Value.Year - val1.Value.Year) * 12 +                   (val2.Value.Month - val1.Value.Month);
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,DiffMicroseconds,The following statement contains a magic number: return (int)((val2.Value - val1.Value).Ticks / 10);
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,DiffNanoseconds,The following statement contains a magic number: return (int)((val2.Value - val1.Value).Ticks * 100);
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,AddMicroseconds,The following statement contains a magic number: return date.Value.AddTicks(value.Value * 10);
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,AddNanoseconds,The following statement contains a magic number: return date.Value.AddTicks(value.Value / 100);
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,DiffMonths,The following statement contains a magic number: return                  (val2.Value.Year - val1.Value.Year) * 12 +                  (val2.Value.Month - val1.Value.Month);
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,DiffMicroseconds,The following statement contains a magic number: return (int)((val2.Value - val1.Value).Ticks / 10);
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,DiffNanoseconds,The following statement contains a magic number: return (int)((val2.Value - val1.Value).Ticks * 100);
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,AddMicroseconds,The following statement contains a magic number: return date.Value.Add(TimeSpan.FromTicks(value.Value * 10));
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,AddNanoseconds,The following statement contains a magic number: return date.Value.Add(TimeSpan.FromTicks(value.Value / 100));
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,DiffMicroseconds,The following statement contains a magic number: return (int)((val2.Value - val1.Value).Ticks / 10);
Magic Number,Effort.Internal.DbCommandTreeTransformation,DbFunctions,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\DbFunctions.cs,DiffNanoseconds,The following statement contains a magic number: return (int)((val2.Value - val1.Value).Ticks * 100);
Magic Number,Effort.Internal.DbCommandTreeTransformation,TransformVisitor,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\TransformVisitor.And.cs,Visit,The following statement contains a magic number: args.Length == 2
Magic Number,Effort.Internal.DbManagement.Schema.Constraints,ConstraintFactories,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbManagement\Schema\Constraints\ConstraintFactories.cs,CreateFactory,The following statement contains a magic number: switch (generics)              {                  case 1:                      factoryType = factoryType.MakeGenericType(member.EntityType);                      break;                  case 2:                      factoryType = factoryType.MakeGenericType(member.EntityType' member.MemberType);                      break;                  default:                      throw new InvalidOperationException("Invalid factory type");              }
Magic Number,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GenerateGetHashcodeIL,The following statement contains a magic number: gen.Emit(OpCodes.Ldc_I4' -1521134295);
Magic Number,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GenerateLdArg,The following statement contains a magic number: switch (i)              {                  case 0:                      gen.Emit(OpCodes.Ldarg_0);                      break;                  case 1:                      gen.Emit(OpCodes.Ldarg_1);                      break;                  case 2:                      gen.Emit(OpCodes.Ldarg_2);                      break;                  case 3:                      gen.Emit(OpCodes.Ldarg_3);                      break;                  default:                      if (i <= 127)                      {                          gen.Emit(OpCodes.Ldarg_S' i);                      }                      else                      {                          gen.Emit(OpCodes.Ldarg' i);                      }                      break;              }
Magic Number,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GenerateLdArg,The following statement contains a magic number: switch (i)              {                  case 0:                      gen.Emit(OpCodes.Ldarg_0);                      break;                  case 1:                      gen.Emit(OpCodes.Ldarg_1);                      break;                  case 2:                      gen.Emit(OpCodes.Ldarg_2);                      break;                  case 3:                      gen.Emit(OpCodes.Ldarg_3);                      break;                  default:                      if (i <= 127)                      {                          gen.Emit(OpCodes.Ldarg_S' i);                      }                      else                      {                          gen.Emit(OpCodes.Ldarg' i);                      }                      break;              }
Magic Number,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GenerateLdArg,The following statement contains a magic number: switch (i)              {                  case 0:                      gen.Emit(OpCodes.Ldarg_0);                      break;                  case 1:                      gen.Emit(OpCodes.Ldarg_1);                      break;                  case 2:                      gen.Emit(OpCodes.Ldarg_2);                      break;                  case 3:                      gen.Emit(OpCodes.Ldarg_3);                      break;                  default:                      if (i <= 127)                      {                          gen.Emit(OpCodes.Ldarg_S' i);                      }                      else                      {                          gen.Emit(OpCodes.Ldarg' i);                      }                      break;              }
Magic Number,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GenerateLdc_I4,The following statement contains a magic number: switch (constant)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (constant <= 127)                      {                          gen.Emit(OpCodes.Ldc_I4_S' constant);                      }                      else                      {                          gen.Emit(OpCodes.Ldc_I4' constant);                      }                      break;              }
Magic Number,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GenerateLdc_I4,The following statement contains a magic number: switch (constant)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (constant <= 127)                      {                          gen.Emit(OpCodes.Ldc_I4_S' constant);                      }                      else                      {                          gen.Emit(OpCodes.Ldc_I4' constant);                      }                      break;              }
Magic Number,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GenerateLdc_I4,The following statement contains a magic number: switch (constant)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (constant <= 127)                      {                          gen.Emit(OpCodes.Ldc_I4_S' constant);                      }                      else                      {                          gen.Emit(OpCodes.Ldc_I4' constant);                      }                      break;              }
Magic Number,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GenerateLdc_I4,The following statement contains a magic number: switch (constant)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (constant <= 127)                      {                          gen.Emit(OpCodes.Ldc_I4_S' constant);                      }                      else                      {                          gen.Emit(OpCodes.Ldc_I4' constant);                      }                      break;              }
Magic Number,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GenerateLdc_I4,The following statement contains a magic number: switch (constant)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (constant <= 127)                      {                          gen.Emit(OpCodes.Ldc_I4_S' constant);                      }                      else                      {                          gen.Emit(OpCodes.Ldc_I4' constant);                      }                      break;              }
Magic Number,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GenerateLdc_I4,The following statement contains a magic number: switch (constant)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (constant <= 127)                      {                          gen.Emit(OpCodes.Ldc_I4_S' constant);                      }                      else                      {                          gen.Emit(OpCodes.Ldc_I4' constant);                      }                      break;              }
Magic Number,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GenerateLdc_I4,The following statement contains a magic number: switch (constant)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (constant <= 127)                      {                          gen.Emit(OpCodes.Ldc_I4_S' constant);                      }                      else                      {                          gen.Emit(OpCodes.Ldc_I4' constant);                      }                      break;              }
Magic Number,Effort.Internal.TypeGeneration,DataRowFactory,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GenerateLdc_I4,The following statement contains a magic number: switch (constant)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (constant <= 127)                      {                          gen.Emit(OpCodes.Ldc_I4_S' constant);                      }                      else                      {                          gen.Emit(OpCodes.Ldc_I4' constant);                      }                      break;              }
Magic Number,Effort.Internal.TypeGeneration,TypeCacheEntryKey,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GetHashCode,The following statement contains a magic number: result = result ^ ((hash << (i % 32)) | (hash >> (32 - (i % 32))));
Magic Number,Effort.Internal.TypeGeneration,TypeCacheEntryKey,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GetHashCode,The following statement contains a magic number: result = result ^ ((hash << (i % 32)) | (hash >> (32 - (i % 32))));
Magic Number,Effort.Internal.TypeGeneration,TypeCacheEntryKey,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeGeneration\DataRowFactory.cs,GetHashCode,The following statement contains a magic number: result = result ^ ((hash << (i % 32)) | (hash >> (32 - (i % 32))));
Magic Number,Effort.Provider,EffortProviderManifest,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortProviderManifest.cs,ConvertTypeUsage,The following statement contains a magic number: switch (goal.PrimitiveTypeKind)              {                  case PrimitiveTypeKind.DateTime:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateDateTimeTypeUsage(goal' precision);                    case PrimitiveTypeKind.DateTimeOffset:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateDateTimeOffsetTypeUsage(goal' precision);                    case PrimitiveTypeKind.Time:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateTimeTypeUsage(goal' precision);                    case PrimitiveTypeKind.Decimal:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 18;                      }                        if (!TypeUsageHelper.TryGetScale(original' out scale))                      {                          scale = 0;                      }                        return TypeUsage.CreateDecimalTypeUsage(goal' precision' scale);                    case PrimitiveTypeKind.Binary:                        if (!TypeUsageHelper.TryGetIsFixedLength(original' out isFixed))                      {                          isFixed = false;                      }                        if (TypeUsageHelper.TryGetMaxLength(original' out maxLength))                      {                          return TypeUsage.CreateBinaryTypeUsage(goal' isFixed' maxLength);                      }                      else                      {                          return TypeUsage.CreateBinaryTypeUsage(goal' isFixed);                      }                    case PrimitiveTypeKind.String:                        if (!TypeUsageHelper.TryGetIsFixedLength(original' out isFixed))                      {                          isFixed = false;                      }                        if (!TypeUsageHelper.TryGetIsUnicode(original' out isUnicode))                      {                          isUnicode = true;                      }                        if (TypeUsageHelper.TryGetMaxLength(original' out maxLength))                      {                          return                              TypeUsage.CreateStringTypeUsage(                                  goal'                                  isUnicode'                                  isFixed'                                  maxLength);                      }                      else                      {                          return                              TypeUsage.CreateStringTypeUsage(                                  goal'                                  isUnicode'                                  isFixed);                      }              }
Magic Number,Effort.Provider,EffortProviderManifest,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortProviderManifest.cs,ConvertTypeUsage,The following statement contains a magic number: switch (goal.PrimitiveTypeKind)              {                  case PrimitiveTypeKind.DateTime:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateDateTimeTypeUsage(goal' precision);                    case PrimitiveTypeKind.DateTimeOffset:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateDateTimeOffsetTypeUsage(goal' precision);                    case PrimitiveTypeKind.Time:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateTimeTypeUsage(goal' precision);                    case PrimitiveTypeKind.Decimal:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 18;                      }                        if (!TypeUsageHelper.TryGetScale(original' out scale))                      {                          scale = 0;                      }                        return TypeUsage.CreateDecimalTypeUsage(goal' precision' scale);                    case PrimitiveTypeKind.Binary:                        if (!TypeUsageHelper.TryGetIsFixedLength(original' out isFixed))                      {                          isFixed = false;                      }                        if (TypeUsageHelper.TryGetMaxLength(original' out maxLength))                      {                          return TypeUsage.CreateBinaryTypeUsage(goal' isFixed' maxLength);                      }                      else                      {                          return TypeUsage.CreateBinaryTypeUsage(goal' isFixed);                      }                    case PrimitiveTypeKind.String:                        if (!TypeUsageHelper.TryGetIsFixedLength(original' out isFixed))                      {                          isFixed = false;                      }                        if (!TypeUsageHelper.TryGetIsUnicode(original' out isUnicode))                      {                          isUnicode = true;                      }                        if (TypeUsageHelper.TryGetMaxLength(original' out maxLength))                      {                          return                              TypeUsage.CreateStringTypeUsage(                                  goal'                                  isUnicode'                                  isFixed'                                  maxLength);                      }                      else                      {                          return                              TypeUsage.CreateStringTypeUsage(                                  goal'                                  isUnicode'                                  isFixed);                      }              }
Magic Number,Effort.Provider,EffortProviderManifest,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortProviderManifest.cs,ConvertTypeUsage,The following statement contains a magic number: switch (goal.PrimitiveTypeKind)              {                  case PrimitiveTypeKind.DateTime:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateDateTimeTypeUsage(goal' precision);                    case PrimitiveTypeKind.DateTimeOffset:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateDateTimeOffsetTypeUsage(goal' precision);                    case PrimitiveTypeKind.Time:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateTimeTypeUsage(goal' precision);                    case PrimitiveTypeKind.Decimal:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 18;                      }                        if (!TypeUsageHelper.TryGetScale(original' out scale))                      {                          scale = 0;                      }                        return TypeUsage.CreateDecimalTypeUsage(goal' precision' scale);                    case PrimitiveTypeKind.Binary:                        if (!TypeUsageHelper.TryGetIsFixedLength(original' out isFixed))                      {                          isFixed = false;                      }                        if (TypeUsageHelper.TryGetMaxLength(original' out maxLength))                      {                          return TypeUsage.CreateBinaryTypeUsage(goal' isFixed' maxLength);                      }                      else                      {                          return TypeUsage.CreateBinaryTypeUsage(goal' isFixed);                      }                    case PrimitiveTypeKind.String:                        if (!TypeUsageHelper.TryGetIsFixedLength(original' out isFixed))                      {                          isFixed = false;                      }                        if (!TypeUsageHelper.TryGetIsUnicode(original' out isUnicode))                      {                          isUnicode = true;                      }                        if (TypeUsageHelper.TryGetMaxLength(original' out maxLength))                      {                          return                              TypeUsage.CreateStringTypeUsage(                                  goal'                                  isUnicode'                                  isFixed'                                  maxLength);                      }                      else                      {                          return                              TypeUsage.CreateStringTypeUsage(                                  goal'                                  isUnicode'                                  isFixed);                      }              }
Magic Number,Effort.Provider,EffortProviderManifest,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortProviderManifest.cs,ConvertTypeUsage,The following statement contains a magic number: switch (goal.PrimitiveTypeKind)              {                  case PrimitiveTypeKind.DateTime:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateDateTimeTypeUsage(goal' precision);                    case PrimitiveTypeKind.DateTimeOffset:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateDateTimeOffsetTypeUsage(goal' precision);                    case PrimitiveTypeKind.Time:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateTimeTypeUsage(goal' precision);                    case PrimitiveTypeKind.Decimal:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 18;                      }                        if (!TypeUsageHelper.TryGetScale(original' out scale))                      {                          scale = 0;                      }                        return TypeUsage.CreateDecimalTypeUsage(goal' precision' scale);                    case PrimitiveTypeKind.Binary:                        if (!TypeUsageHelper.TryGetIsFixedLength(original' out isFixed))                      {                          isFixed = false;                      }                        if (TypeUsageHelper.TryGetMaxLength(original' out maxLength))                      {                          return TypeUsage.CreateBinaryTypeUsage(goal' isFixed' maxLength);                      }                      else                      {                          return TypeUsage.CreateBinaryTypeUsage(goal' isFixed);                      }                    case PrimitiveTypeKind.String:                        if (!TypeUsageHelper.TryGetIsFixedLength(original' out isFixed))                      {                          isFixed = false;                      }                        if (!TypeUsageHelper.TryGetIsUnicode(original' out isUnicode))                      {                          isUnicode = true;                      }                        if (TypeUsageHelper.TryGetMaxLength(original' out maxLength))                      {                          return                              TypeUsage.CreateStringTypeUsage(                                  goal'                                  isUnicode'                                  isFixed'                                  maxLength);                      }                      else                      {                          return                              TypeUsage.CreateStringTypeUsage(                                  goal'                                  isUnicode'                                  isFixed);                      }              }
Missing Default,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,MapRound,The following switch statement is missing a default case: switch(args.Length)              {                  case 1:                      method = IsDecimal(f.Parameters[0]) ?                          DecimalFunctions.Round :                          DoubleFunctions.Round;                      break;                  case 2:                      method = IsDecimal(f.Parameters[0]) ?                          DecimalFunctions.RoundDigits :                          DoubleFunctions.RoundDigits;                      break;              }
Missing Default,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,GetTypeBinary,The following switch statement is missing a default case: switch (leftTypeCode)                  {                      case TypeCode.Char:                      case TypeCode.SByte:                      case TypeCode.Byte:                      case TypeCode.Int16:                      case TypeCode.UInt16:                      case TypeCode.Int32:                          switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.SByte:                              case TypeCode.Byte:                              case TypeCode.Int16:                              case TypeCode.UInt16:                                  type = typeof(int);                                  break;                          }                          break;                      case TypeCode.UInt32:                          switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.Byte:                              case TypeCode.UInt16:                                  type = typeof(uint);                                  break;                              case TypeCode.SByte:                              case TypeCode.Int16:                              case TypeCode.Int32:                                  type = typeof(long);                                  break;                          }                          break;                      case TypeCode.Int64:                          switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.SByte:                              case TypeCode.Byte:                              case TypeCode.Int16:                              case TypeCode.UInt16:                              case TypeCode.Int32:                              case TypeCode.UInt32:                                  type = typeof(long);                                  break;                          }                          break;                      case TypeCode.UInt64:                          switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.Byte:                              case TypeCode.UInt16:                              case TypeCode.UInt32:                                  type = typeof(ulong);                                  break;                          }                          break;                      case TypeCode.Single:                          switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.SByte:                              case TypeCode.Byte:                              case TypeCode.Int16:                              case TypeCode.UInt16:                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                                  type = typeof(float);                                  break;                          }                          break;                      case TypeCode.Double:                          switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.SByte:                              case TypeCode.Byte:                              case TypeCode.Int16:                              case TypeCode.UInt16:                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                              case TypeCode.Single:                                  type = typeof(double);                                  break;                          }                          break;                      case TypeCode.Decimal:                          switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.SByte:                              case TypeCode.Byte:                              case TypeCode.Int16:                              case TypeCode.UInt16:                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                                  type = typeof(decimal);                                  break;                          }                          break;                      case TypeCode.DateTime:                      case TypeCode.String:                          type = typeof(string);                          break;                  }
Missing Default,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,GetTypeBinary,The following switch statement is missing a default case: switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.SByte:                              case TypeCode.Byte:                              case TypeCode.Int16:                              case TypeCode.UInt16:                                  type = typeof(int);                                  break;                          }
Missing Default,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,GetTypeBinary,The following switch statement is missing a default case: switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.Byte:                              case TypeCode.UInt16:                                  type = typeof(uint);                                  break;                              case TypeCode.SByte:                              case TypeCode.Int16:                              case TypeCode.Int32:                                  type = typeof(long);                                  break;                          }
Missing Default,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,GetTypeBinary,The following switch statement is missing a default case: switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.SByte:                              case TypeCode.Byte:                              case TypeCode.Int16:                              case TypeCode.UInt16:                              case TypeCode.Int32:                              case TypeCode.UInt32:                                  type = typeof(long);                                  break;                          }
Missing Default,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,GetTypeBinary,The following switch statement is missing a default case: switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.Byte:                              case TypeCode.UInt16:                              case TypeCode.UInt32:                                  type = typeof(ulong);                                  break;                          }
Missing Default,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,GetTypeBinary,The following switch statement is missing a default case: switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.SByte:                              case TypeCode.Byte:                              case TypeCode.Int16:                              case TypeCode.UInt16:                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                                  type = typeof(float);                                  break;                          }
Missing Default,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,GetTypeBinary,The following switch statement is missing a default case: switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.SByte:                              case TypeCode.Byte:                              case TypeCode.Int16:                              case TypeCode.UInt16:                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                              case TypeCode.Single:                                  type = typeof(double);                                  break;                          }
Missing Default,Effort.Internal.DbCommandTreeTransformation,CanonicalFunctionMapper,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\CanonicalFunctions.cs,GetTypeBinary,The following switch statement is missing a default case: switch (rightTypeCode)                          {                              case TypeCode.Char:                              case TypeCode.SByte:                              case TypeCode.Byte:                              case TypeCode.Int16:                              case TypeCode.UInt16:                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                                  type = typeof(decimal);                                  break;                          }
Missing Default,Effort.Internal.DbCommandTreeTransformation,TransformVisitor,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\TransformVisitor.And.cs,Visit,The following switch statement is missing a default case: switch (expression.ExpressionKind)              {                  case DbExpressionKind.Plus:                      return Expression.Add(args[0]' args[1]);                    case DbExpressionKind.Minus:                      return Expression.Subtract(args[0]' args[1]);                    case DbExpressionKind.Multiply:                      return Expression.Multiply(args[0]' args[1]);                    case DbExpressionKind.Divide:                      return Expression.Divide(args[0]' args[1]);                    case DbExpressionKind.Modulo:                      return Expression.Modulo(args[0]' args[1]);                    case DbExpressionKind.UnaryMinus:                      return Expression.Negate(args[0]);              }
Missing Default,Effort.Internal.DbCommandTreeTransformation,TransformVisitor,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\DbCommandTreeTransformation\TransformVisitor.And.cs,GetCompareMode,The following switch statement is missing a default case: switch (kind)              {                  case DbExpressionKind.Equals:                      return Tuple.Create(0' true);                  case DbExpressionKind.NotEquals:                      return Tuple.Create(0' false);                  case DbExpressionKind.GreaterThan:                      return Tuple.Create(1' true);                  case DbExpressionKind.GreaterThanOrEquals:                      return Tuple.Create(-1' false);                  case DbExpressionKind.LessThan:                      return Tuple.Create(-1' true);                  case DbExpressionKind.LessThanOrEquals:                      return Tuple.Create(1' false);              }
Missing Default,Effort.Internal.TypeConversion,EdmTypeConverter,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Internal\TypeConversion\EdmTypeConverter.cs,GetTypeFacets,The following switch statement is missing a default case: switch ((StoreGeneratedPattern)facet.Value)                  {                      case StoreGeneratedPattern.Computed:                          facets.Computed = true;                          break;                      case StoreGeneratedPattern.Identity:                          facets.Identity = true;                          break;                  }
Missing Default,Effort.Provider,EffortProviderManifest,D:\research\architectureSmells\repos1\tamasflamich_effort\Main\Source\Effort.Shared\Provider\EffortProviderManifest.cs,ConvertTypeUsage,The following switch statement is missing a default case: switch (goal.PrimitiveTypeKind)              {                  case PrimitiveTypeKind.DateTime:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateDateTimeTypeUsage(goal' precision);                    case PrimitiveTypeKind.DateTimeOffset:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateDateTimeOffsetTypeUsage(goal' precision);                    case PrimitiveTypeKind.Time:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 7;                      }                        return TypeUsage.CreateTimeTypeUsage(goal' precision);                    case PrimitiveTypeKind.Decimal:                        if (!TypeUsageHelper.TryGetPrecision(original' out precision))                      {                          precision = 18;                      }                        if (!TypeUsageHelper.TryGetScale(original' out scale))                      {                          scale = 0;                      }                        return TypeUsage.CreateDecimalTypeUsage(goal' precision' scale);                    case PrimitiveTypeKind.Binary:                        if (!TypeUsageHelper.TryGetIsFixedLength(original' out isFixed))                      {                          isFixed = false;                      }                        if (TypeUsageHelper.TryGetMaxLength(original' out maxLength))                      {                          return TypeUsage.CreateBinaryTypeUsage(goal' isFixed' maxLength);                      }                      else                      {                          return TypeUsage.CreateBinaryTypeUsage(goal' isFixed);                      }                    case PrimitiveTypeKind.String:                        if (!TypeUsageHelper.TryGetIsFixedLength(original' out isFixed))                      {                          isFixed = false;                      }                        if (!TypeUsageHelper.TryGetIsUnicode(original' out isUnicode))                      {                          isUnicode = true;                      }                        if (TypeUsageHelper.TryGetMaxLength(original' out maxLength))                      {                          return                              TypeUsage.CreateStringTypeUsage(                                  goal'                                  isUnicode'                                  isFixed'                                  maxLength);                      }                      else                      {                          return                              TypeUsage.CreateStringTypeUsage(                                  goal'                                  isUnicode'                                  isFixed);                      }              }
