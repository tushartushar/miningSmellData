Implementation smell,Namespace,Class,File,Method,Description
Long Method,WebSocket4Net.Protocol,HandshakeReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\HandshakeReader.cs,GetCommandInfo,The method has 114 lines of code.
Complex Method,WebSocket4Net,Extensions,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Extensions.cs,ParseMimeHeader,Cyclomatic complexity of the method is 9
Complex Method,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,Cyclomatic complexity of the method is 13
Complex Method,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,Cyclomatic complexity of the method is 8
Complex Method,WebSocket4Net.Common,ArraySegmentList,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Common\ArraySegmentList.cs,GetElementInternalIndex,Cyclomatic complexity of the method is 10
Complex Method,WebSocket4Net.Common,ArraySegmentList,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Common\ArraySegmentList.cs,QuickSearchSegment,Cyclomatic complexity of the method is 8
Complex Method,WebSocket4Net.Protocol,DraftHybi00DataReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi00DataReader.cs,GetCommandInfo,Cyclomatic complexity of the method is 12
Complex Method,WebSocket4Net.Protocol,DraftHybi10DataReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10DataReader.cs,GetCommandInfo,Cyclomatic complexity of the method is 8
Long Parameter List,WebSocket4Net,JsonWebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\JsonWebSocket.JsonNotSet.cs,JsonWebSocket,The method has 6 parameters.
Long Parameter List,WebSocket4Net,JsonWebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\JsonWebSocket.JsonNotSet.cs,JsonWebSocket,The method has 7 parameters.
Long Parameter List,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,Initialize,The method has 9 parameters.
Long Parameter List,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,WebSocket,The method has 5 parameters.
Long Parameter List,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,WebSocket,The method has 6 parameters.
Long Parameter List,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,WebSocket,The method has 7 parameters.
Long Parameter List,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,WebSocket,The method has 8 parameters.
Long Parameter List,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,WebSocket,The method has 9 parameters.
Long Parameter List,WebSocket4Net.Protocol,DraftHybi10DataReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10DataReader.cs,AddArraySegment,The method has 5 parameters.
Long Parameter List,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The method has 5 parameters.
Long Parameter List,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,SendDataFragment,The method has 5 parameters.
Long Parameter List,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,MaskData,The method has 7 parameters.
Long Statement,WebSocket4Net,Extensions,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Extensions.cs,IsSimpleType,The length of the statement  "	return type.IsValueType || type.IsPrimitive || m_SimpleTypes.Contains (type) || Convert.GetTypeCode (type) != TypeCode.Object; " is 126.
Long Statement,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,OnHandshaked,The length of the statement  "		m_WebSocketTimer = new Timer (OnPingTimerCallback' ProtocolProcessor' AutoSendPingInterval * 1000' AutoSendPingInterval * 1000); " is 128.
Long Statement,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,OnClosed,The length of the statement  "	if (m_StateCode == WebSocketStateConst.Closing || m_StateCode == WebSocketStateConst.Open || m_StateCode == WebSocketStateConst.Connecting) " is 139.
Long Statement,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,Close,The length of the statement  "	if (Interlocked.CompareExchange (ref m_StateCode' WebSocketStateConst.Closed' WebSocketStateConst.None) == WebSocketStateConst.None) { " is 134.
Long Statement,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,Close,The length of the statement  "	if (Interlocked.CompareExchange (ref m_StateCode' WebSocketStateConst.Closing' WebSocketStateConst.Connecting) == WebSocketStateConst.Connecting) { " is 147.
Long Statement,WebSocket4Net.Command,BadRequest,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Command\BadRequest.cs,ExecuteCommand,The length of the statement  "			session.FireError (new Exception (string.Format ("the server(version: {0}) doesn't support the websocket protocol version your client was using"' websocketVersion))); " is 166.
Long Statement,WebSocket4Net.Common,ArraySegmentList,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Common\ArraySegmentList.cs,Decode,The length of the statement  "		decoder.Convert (segment.Array' decodeOffset' toBeDecoded' charsBuffer' totalChars' charsBuffer.Length - totalChars' flush' out bytesUsed' out charsUsed' out completed); " is 169.
Long Statement,WebSocket4Net.Protocol,DraftHybi00DataReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi00DataReader.cs,GetCommandInfo,The length of the statement  "					var commandInfo = new WebSocketCommandInfo (OpCode.Text.ToString ()' Encoding.UTF8.GetString (readBuffer' offset + skipByteCount' i - offset - skipByteCount)); " is 159.
Long Statement,WebSocket4Net.Protocol,DraftHybi00DataReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi00DataReader.cs,GetCommandInfo,The length of the statement  "				var commandInfo = new WebSocketCommandInfo (OpCode.Text.ToString ()' Encoding.UTF8.GetString (readBuffer' offset + skipByteCount' requiredSize)); " is 145.
Long Statement,WebSocket4Net.Protocol,DraftHybi00Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi00Processor.cs,SendHandshake,The length of the statement  "	handshakeBuilder.AppendWithCrCf (string.IsNullOrEmpty (websocket.Origin) ? websocket.TargetUri.Host : websocket.Origin); " is 120.
Long Statement,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The length of the statement  "		MaskData (playloadData' offset' length' fragment' fragment.Length - length' fragment' fragment.Length - maskLength - length); " is 125.
Long Statement,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,SendData,The length of the statement  "		fragments.Add (new ArraySegment<byte> (EncodeDataFrame (i == 0 ? OpCode.Binary : 0' i == lastPieceIndex' playloadData.Array' playloadData.Offset' playloadData.Count))); " is 168.
Magic Number,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,CreateClient,The following statement contains a magic number: if (port == 80)  	HandshakeHost = TargetUri.Host;  else  	HandshakeHost = TargetUri.Host + ":" + port;  
Magic Number,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,OnHandshaked,The following statement contains a magic number: if (EnableAutoSendPing && ProtocolProcessor.SupportPingPong) {  	//Ping auto sending interval's default value is 60 seconds  	if (AutoSendPingInterval <= 0)  		AutoSendPingInterval = 60;  	m_WebSocketTimer = new Timer (OnPingTimerCallback' ProtocolProcessor' AutoSendPingInterval * 1000' AutoSendPingInterval * 1000);  }  
Magic Number,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,OnHandshaked,The following statement contains a magic number: if (EnableAutoSendPing && ProtocolProcessor.SupportPingPong) {  	//Ping auto sending interval's default value is 60 seconds  	if (AutoSendPingInterval <= 0)  		AutoSendPingInterval = 60;  	m_WebSocketTimer = new Timer (OnPingTimerCallback' ProtocolProcessor' AutoSendPingInterval * 1000' AutoSendPingInterval * 1000);  }  
Magic Number,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,OnHandshaked,The following statement contains a magic number: if (EnableAutoSendPing && ProtocolProcessor.SupportPingPong) {  	//Ping auto sending interval's default value is 60 seconds  	if (AutoSendPingInterval <= 0)  		AutoSendPingInterval = 60;  	m_WebSocketTimer = new Timer (OnPingTimerCallback' ProtocolProcessor' AutoSendPingInterval * 1000' AutoSendPingInterval * 1000);  }  
Magic Number,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,OnHandshaked,The following statement contains a magic number: if (AutoSendPingInterval <= 0)  	AutoSendPingInterval = 60;  
Magic Number,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,OnHandshaked,The following statement contains a magic number: AutoSendPingInterval = 60;  
Magic Number,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,OnHandshaked,The following statement contains a magic number: m_WebSocketTimer = new Timer (OnPingTimerCallback' ProtocolProcessor' AutoSendPingInterval * 1000' AutoSendPingInterval * 1000);  
Magic Number,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,OnHandshaked,The following statement contains a magic number: m_WebSocketTimer = new Timer (OnPingTimerCallback' ProtocolProcessor' AutoSendPingInterval * 1000' AutoSendPingInterval * 1000);  
Magic Number,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,Close,The following statement contains a magic number: m_WebSocketTimer = new Timer (CheckCloseHandshake' null' 5 * 1000' Timeout.Infinite);  
Magic Number,WebSocket4Net,WebSocket,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocket.cs,Close,The following statement contains a magic number: m_WebSocketTimer = new Timer (CheckCloseHandshake' null' 5 * 1000' Timeout.Infinite);  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (opCode == OpCode.Close) {  	var firstFrame = frames [0];  	length = (int)firstFrame.ActualPayloadLength;  	offset = firstFrame.InnerData.Count - length;  	var stringBuilder = new StringBuilder ();  	if (length >= 2) {  		offset = firstFrame.InnerData.Count - length;  		var closeStatusCode = firstFrame.InnerData.ToArrayData (offset' 2);  		CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  		if (length > 2) {  			stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  		}  	} else if (length > 0) {  		stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset' length));  	}  	if (frames.Count > 1) {  		for (var i = 1; i < frames.Count; i++) {  			var frame = frames [i];  			offset = frame.InnerData.Count - (int)frame.ActualPayloadLength;  			length = (int)frame.ActualPayloadLength;  			if (frame.HasMask) {  				frame.InnerData.DecodeMask (frame.MaskKey' offset' length);  			}  			stringBuilder.Append (frame.InnerData.Decode (Encoding.UTF8' offset' length));  		}  	}  	Text = stringBuilder.ToString ();  	return;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (opCode == OpCode.Close) {  	var firstFrame = frames [0];  	length = (int)firstFrame.ActualPayloadLength;  	offset = firstFrame.InnerData.Count - length;  	var stringBuilder = new StringBuilder ();  	if (length >= 2) {  		offset = firstFrame.InnerData.Count - length;  		var closeStatusCode = firstFrame.InnerData.ToArrayData (offset' 2);  		CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  		if (length > 2) {  			stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  		}  	} else if (length > 0) {  		stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset' length));  	}  	if (frames.Count > 1) {  		for (var i = 1; i < frames.Count; i++) {  			var frame = frames [i];  			offset = frame.InnerData.Count - (int)frame.ActualPayloadLength;  			length = (int)frame.ActualPayloadLength;  			if (frame.HasMask) {  				frame.InnerData.DecodeMask (frame.MaskKey' offset' length);  			}  			stringBuilder.Append (frame.InnerData.Decode (Encoding.UTF8' offset' length));  		}  	}  	Text = stringBuilder.ToString ();  	return;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (opCode == OpCode.Close) {  	var firstFrame = frames [0];  	length = (int)firstFrame.ActualPayloadLength;  	offset = firstFrame.InnerData.Count - length;  	var stringBuilder = new StringBuilder ();  	if (length >= 2) {  		offset = firstFrame.InnerData.Count - length;  		var closeStatusCode = firstFrame.InnerData.ToArrayData (offset' 2);  		CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  		if (length > 2) {  			stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  		}  	} else if (length > 0) {  		stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset' length));  	}  	if (frames.Count > 1) {  		for (var i = 1; i < frames.Count; i++) {  			var frame = frames [i];  			offset = frame.InnerData.Count - (int)frame.ActualPayloadLength;  			length = (int)frame.ActualPayloadLength;  			if (frame.HasMask) {  				frame.InnerData.DecodeMask (frame.MaskKey' offset' length);  			}  			stringBuilder.Append (frame.InnerData.Decode (Encoding.UTF8' offset' length));  		}  	}  	Text = stringBuilder.ToString ();  	return;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (opCode == OpCode.Close) {  	var firstFrame = frames [0];  	length = (int)firstFrame.ActualPayloadLength;  	offset = firstFrame.InnerData.Count - length;  	var stringBuilder = new StringBuilder ();  	if (length >= 2) {  		offset = firstFrame.InnerData.Count - length;  		var closeStatusCode = firstFrame.InnerData.ToArrayData (offset' 2);  		CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  		if (length > 2) {  			stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  		}  	} else if (length > 0) {  		stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset' length));  	}  	if (frames.Count > 1) {  		for (var i = 1; i < frames.Count; i++) {  			var frame = frames [i];  			offset = frame.InnerData.Count - (int)frame.ActualPayloadLength;  			length = (int)frame.ActualPayloadLength;  			if (frame.HasMask) {  				frame.InnerData.DecodeMask (frame.MaskKey' offset' length);  			}  			stringBuilder.Append (frame.InnerData.Decode (Encoding.UTF8' offset' length));  		}  	}  	Text = stringBuilder.ToString ();  	return;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (opCode == OpCode.Close) {  	var firstFrame = frames [0];  	length = (int)firstFrame.ActualPayloadLength;  	offset = firstFrame.InnerData.Count - length;  	var stringBuilder = new StringBuilder ();  	if (length >= 2) {  		offset = firstFrame.InnerData.Count - length;  		var closeStatusCode = firstFrame.InnerData.ToArrayData (offset' 2);  		CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  		if (length > 2) {  			stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  		}  	} else if (length > 0) {  		stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset' length));  	}  	if (frames.Count > 1) {  		for (var i = 1; i < frames.Count; i++) {  			var frame = frames [i];  			offset = frame.InnerData.Count - (int)frame.ActualPayloadLength;  			length = (int)frame.ActualPayloadLength;  			if (frame.HasMask) {  				frame.InnerData.DecodeMask (frame.MaskKey' offset' length);  			}  			stringBuilder.Append (frame.InnerData.Decode (Encoding.UTF8' offset' length));  		}  	}  	Text = stringBuilder.ToString ();  	return;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (opCode == OpCode.Close) {  	var firstFrame = frames [0];  	length = (int)firstFrame.ActualPayloadLength;  	offset = firstFrame.InnerData.Count - length;  	var stringBuilder = new StringBuilder ();  	if (length >= 2) {  		offset = firstFrame.InnerData.Count - length;  		var closeStatusCode = firstFrame.InnerData.ToArrayData (offset' 2);  		CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  		if (length > 2) {  			stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  		}  	} else if (length > 0) {  		stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset' length));  	}  	if (frames.Count > 1) {  		for (var i = 1; i < frames.Count; i++) {  			var frame = frames [i];  			offset = frame.InnerData.Count - (int)frame.ActualPayloadLength;  			length = (int)frame.ActualPayloadLength;  			if (frame.HasMask) {  				frame.InnerData.DecodeMask (frame.MaskKey' offset' length);  			}  			stringBuilder.Append (frame.InnerData.Decode (Encoding.UTF8' offset' length));  		}  	}  	Text = stringBuilder.ToString ();  	return;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length >= 2) {  	offset = firstFrame.InnerData.Count - length;  	var closeStatusCode = firstFrame.InnerData.ToArrayData (offset' 2);  	CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  	if (length > 2) {  		stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  	}  } else if (length > 0) {  	stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset' length));  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length >= 2) {  	offset = firstFrame.InnerData.Count - length;  	var closeStatusCode = firstFrame.InnerData.ToArrayData (offset' 2);  	CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  	if (length > 2) {  		stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  	}  } else if (length > 0) {  	stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset' length));  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length >= 2) {  	offset = firstFrame.InnerData.Count - length;  	var closeStatusCode = firstFrame.InnerData.ToArrayData (offset' 2);  	CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  	if (length > 2) {  		stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  	}  } else if (length > 0) {  	stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset' length));  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length >= 2) {  	offset = firstFrame.InnerData.Count - length;  	var closeStatusCode = firstFrame.InnerData.ToArrayData (offset' 2);  	CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  	if (length > 2) {  		stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  	}  } else if (length > 0) {  	stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset' length));  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length >= 2) {  	offset = firstFrame.InnerData.Count - length;  	var closeStatusCode = firstFrame.InnerData.ToArrayData (offset' 2);  	CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  	if (length > 2) {  		stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  	}  } else if (length > 0) {  	stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset' length));  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length >= 2) {  	offset = firstFrame.InnerData.Count - length;  	var closeStatusCode = firstFrame.InnerData.ToArrayData (offset' 2);  	CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  	if (length > 2) {  		stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  	}  } else if (length > 0) {  	stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset' length));  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length > 2) {  	stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length > 2) {  	stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length > 2) {  	stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: stringBuilder.Append (firstFrame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2));  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (opCode != 2) {  	var stringBuilder = new StringBuilder ();  	for (var i = 0; i < frames.Count; i++) {  		var frame = frames [i];  		offset = frame.InnerData.Count - (int)frame.ActualPayloadLength;  		length = (int)frame.ActualPayloadLength;  		if (frame.HasMask) {  			frame.InnerData.DecodeMask (frame.MaskKey' offset' length);  		}  		stringBuilder.Append (frame.InnerData.Decode (Encoding.UTF8' offset' length));  	}  	Text = stringBuilder.ToString ();  } else {  	var resultBuffer = new byte[frames.Sum (f => (int)f.ActualPayloadLength)];  	int copied = 0;  	for (var i = 0; i < frames.Count; i++) {  		var frame = frames [i];  		offset = frame.InnerData.Count - (int)frame.ActualPayloadLength;  		length = (int)frame.ActualPayloadLength;  		if (frame.HasMask) {  			frame.InnerData.DecodeMask (frame.MaskKey' offset' length);  		}  		frame.InnerData.CopyTo (resultBuffer' offset' copied' length);  		copied += length;  	}  	Data = resultBuffer;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (frame.OpCode == OpCode.Close) {  	if (length >= 2) {  		var closeStatusCode = frame.InnerData.ToArrayData (offset' 2);  		CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  		if (length > 2) {  			Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  		} else {  			Text = string.Empty;  		}  		return;  	}  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (frame.OpCode == OpCode.Close) {  	if (length >= 2) {  		var closeStatusCode = frame.InnerData.ToArrayData (offset' 2);  		CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  		if (length > 2) {  			Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  		} else {  			Text = string.Empty;  		}  		return;  	}  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (frame.OpCode == OpCode.Close) {  	if (length >= 2) {  		var closeStatusCode = frame.InnerData.ToArrayData (offset' 2);  		CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  		if (length > 2) {  			Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  		} else {  			Text = string.Empty;  		}  		return;  	}  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (frame.OpCode == OpCode.Close) {  	if (length >= 2) {  		var closeStatusCode = frame.InnerData.ToArrayData (offset' 2);  		CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  		if (length > 2) {  			Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  		} else {  			Text = string.Empty;  		}  		return;  	}  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (frame.OpCode == OpCode.Close) {  	if (length >= 2) {  		var closeStatusCode = frame.InnerData.ToArrayData (offset' 2);  		CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  		if (length > 2) {  			Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  		} else {  			Text = string.Empty;  		}  		return;  	}  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (frame.OpCode == OpCode.Close) {  	if (length >= 2) {  		var closeStatusCode = frame.InnerData.ToArrayData (offset' 2);  		CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  		if (length > 2) {  			Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  		} else {  			Text = string.Empty;  		}  		return;  	}  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length >= 2) {  	var closeStatusCode = frame.InnerData.ToArrayData (offset' 2);  	CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  	if (length > 2) {  		Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  	} else {  		Text = string.Empty;  	}  	return;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length >= 2) {  	var closeStatusCode = frame.InnerData.ToArrayData (offset' 2);  	CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  	if (length > 2) {  		Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  	} else {  		Text = string.Empty;  	}  	return;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length >= 2) {  	var closeStatusCode = frame.InnerData.ToArrayData (offset' 2);  	CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  	if (length > 2) {  		Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  	} else {  		Text = string.Empty;  	}  	return;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length >= 2) {  	var closeStatusCode = frame.InnerData.ToArrayData (offset' 2);  	CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  	if (length > 2) {  		Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  	} else {  		Text = string.Empty;  	}  	return;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length >= 2) {  	var closeStatusCode = frame.InnerData.ToArrayData (offset' 2);  	CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  	if (length > 2) {  		Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  	} else {  		Text = string.Empty;  	}  	return;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length >= 2) {  	var closeStatusCode = frame.InnerData.ToArrayData (offset' 2);  	CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  	if (length > 2) {  		Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  	} else {  		Text = string.Empty;  	}  	return;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: CloseStatusCode = (short)(closeStatusCode [0] * 256 + closeStatusCode [1]);  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length > 2) {  	Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  } else {  	Text = string.Empty;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length > 2) {  	Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  } else {  	Text = string.Empty;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (length > 2) {  	Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  } else {  	Text = string.Empty;  }  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: Text = frame.InnerData.Decode (Encoding.UTF8' offset + 2' length - 2);  
Magic Number,WebSocket4Net,WebSocketCommandInfo,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\WebSocketCommandInfo.cs,WebSocketCommandInfo,The following statement contains a magic number: if (frame.OpCode != 2) {  	if (length > 0)  		Text = frame.InnerData.Decode (Encoding.UTF8' offset' length);  	else  		Text = string.Empty;  } else {  	if (length > 0)  		Data = frame.InnerData.ToArrayData (offset' length);  	else  		Data = new byte[0];  }  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeHybi10,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeHybi10.cs,CloseStatusCodeHybi10,The following statement contains a magic number: NormalClosure = 1000;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeHybi10,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeHybi10.cs,CloseStatusCodeHybi10,The following statement contains a magic number: GoingAway = 1001;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeHybi10,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeHybi10.cs,CloseStatusCodeHybi10,The following statement contains a magic number: ProtocolError = 1002;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeHybi10,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeHybi10.cs,CloseStatusCodeHybi10,The following statement contains a magic number: NotAcceptableData = 1003;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeHybi10,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeHybi10.cs,CloseStatusCodeHybi10,The following statement contains a magic number: TooLargeFrame = 1004;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeHybi10,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeHybi10.cs,CloseStatusCodeHybi10,The following statement contains a magic number: InvalidUTF8 = 1007;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeHybi10,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeHybi10.cs,CloseStatusCodeHybi10,The following statement contains a magic number: ViolatePolicy = 1000;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeHybi10,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeHybi10.cs,CloseStatusCodeHybi10,The following statement contains a magic number: ExtensionNotMatch = 1000;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeHybi10,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeHybi10.cs,CloseStatusCodeHybi10,The following statement contains a magic number: UnexpectedCondition = 1000;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeHybi10,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeHybi10.cs,CloseStatusCodeHybi10,The following statement contains a magic number: TLSHandshakeFailure = 1000;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeHybi10,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeHybi10.cs,CloseStatusCodeHybi10,The following statement contains a magic number: NoStatusCode = 1005;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeRfc6455,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeRfc6455.cs,CloseStatusCodeRfc6455,The following statement contains a magic number: NormalClosure = 1000;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeRfc6455,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeRfc6455.cs,CloseStatusCodeRfc6455,The following statement contains a magic number: GoingAway = 1001;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeRfc6455,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeRfc6455.cs,CloseStatusCodeRfc6455,The following statement contains a magic number: ProtocolError = 1002;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeRfc6455,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeRfc6455.cs,CloseStatusCodeRfc6455,The following statement contains a magic number: NotAcceptableData = 1003;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeRfc6455,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeRfc6455.cs,CloseStatusCodeRfc6455,The following statement contains a magic number: TooLargeFrame = 1009;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeRfc6455,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeRfc6455.cs,CloseStatusCodeRfc6455,The following statement contains a magic number: InvalidUTF8 = 1007;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeRfc6455,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeRfc6455.cs,CloseStatusCodeRfc6455,The following statement contains a magic number: ViolatePolicy = 1008;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeRfc6455,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeRfc6455.cs,CloseStatusCodeRfc6455,The following statement contains a magic number: ExtensionNotMatch = 1010;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeRfc6455,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeRfc6455.cs,CloseStatusCodeRfc6455,The following statement contains a magic number: UnexpectedCondition = 1011;  
Magic Number,WebSocket4Net.Protocol,CloseStatusCodeRfc6455,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\CloseStatusCodeRfc6455.cs,CloseStatusCodeRfc6455,The following statement contains a magic number: NoStatusCode = 1005;  
Magic Number,WebSocket4Net.Protocol,DraftHybi00DataReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi00DataReader.cs,GetCommandInfo,The following statement contains a magic number: if ((m_Type.Value & 0x80) == 0x00) {  	byte lookForByte = 0xFF;  	int i;  	for (i = offset + skipByteCount; i < offset + length; i++) {  		if (readBuffer [i] == lookForByte) {  			left = length - (i - offset + 1);  			if (BufferSegments.Count <= 0) {  				var commandInfo = new WebSocketCommandInfo (OpCode.Text.ToString ()' Encoding.UTF8.GetString (readBuffer' offset + skipByteCount' i - offset - skipByteCount));  				Reset (false);  				return commandInfo;  			} else {  				this.BufferSegments.AddSegment (readBuffer' offset + skipByteCount' i - offset - skipByteCount' false);  				var commandInfo = new WebSocketCommandInfo (OpCode.Text.ToString ()' BufferSegments.Decode (Encoding.UTF8));  				Reset (true);  				return commandInfo;  			}  		}  	}  	this.AddArraySegment (readBuffer' offset + skipByteCount' length - skipByteCount);  	return null;  } else//10000000: Collect protocol data by length   {  	while (!m_Length.HasValue) {  		if (length <= skipByteCount) {  			//No data to read  			return null;  		}  		byte lengthByte = readBuffer [skipByteCount];  		//Closing handshake  		if (lengthByte == 0x00 && m_Type.Value == m_ClosingHandshakeType) {  			var commandInfo = new WebSocketCommandInfo (OpCode.Close.ToString ());  			Reset (true);  			return commandInfo;  		}  		int thisLength = (int)(lengthByte & 0x7F);  		m_TempLength = m_TempLength * 128 + thisLength;  		skipByteCount++;  		if ((lengthByte & 0x80) != 0x80) {  			m_Length = m_TempLength;  			break;  		}  	}  	int requiredSize = m_Length.Value - BufferSegments.Count;  	int leftSize = length - skipByteCount;  	if (leftSize < requiredSize) {  		this.AddArraySegment (readBuffer' skipByteCount' length - skipByteCount);  		return null;  	} else {  		left = leftSize - requiredSize;  		if (BufferSegments.Count <= 0) {  			var commandInfo = new WebSocketCommandInfo (OpCode.Text.ToString ()' Encoding.UTF8.GetString (readBuffer' offset + skipByteCount' requiredSize));  			Reset (false);  			return commandInfo;  		} else {  			this.BufferSegments.AddSegment (readBuffer' offset + skipByteCount' requiredSize' false);  			var commandInfo = new WebSocketCommandInfo (BufferSegments.Decode (Encoding.UTF8));  			Reset (true);  			return commandInfo;  		}  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi00DataReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi00DataReader.cs,GetCommandInfo,The following statement contains a magic number: while (!m_Length.HasValue) {  	if (length <= skipByteCount) {  		//No data to read  		return null;  	}  	byte lengthByte = readBuffer [skipByteCount];  	//Closing handshake  	if (lengthByte == 0x00 && m_Type.Value == m_ClosingHandshakeType) {  		var commandInfo = new WebSocketCommandInfo (OpCode.Close.ToString ());  		Reset (true);  		return commandInfo;  	}  	int thisLength = (int)(lengthByte & 0x7F);  	m_TempLength = m_TempLength * 128 + thisLength;  	skipByteCount++;  	if ((lengthByte & 0x80) != 0x80) {  		m_Length = m_TempLength;  		break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi00DataReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi00DataReader.cs,GetCommandInfo,The following statement contains a magic number: m_TempLength = m_TempLength * 128 + thisLength;  
Magic Number,WebSocket4Net.Protocol,DraftHybi00Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi00Processor.cs,DraftHybi00Processor,The following statement contains a magic number: for (int i = 33; i <= 126; i++) {  	char currentChar = (char)i;  	if (char.IsLetter (currentChar))  		m_CharLib.Add (currentChar);  	else if (char.IsDigit (currentChar))  		m_DigLib.Add (currentChar);  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi00Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi00Processor.cs,DraftHybi00Processor,The following statement contains a magic number: for (int i = 33; i <= 126; i++) {  	char currentChar = (char)i;  	if (char.IsLetter (currentChar))  		m_CharLib.Add (currentChar);  	else if (char.IsDigit (currentChar))  		m_DigLib.Add (currentChar);  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi00Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi00Processor.cs,SendMessage,The following statement contains a magic number: websocket.Client.Send (sendBuffer' 0' bytesCount + 2);  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 126) {  	fragment = new byte[2 + maskLength + length];  	fragment [1] = (byte)length;  } else if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 126) {  	fragment = new byte[2 + maskLength + length];  	fragment [1] = (byte)length;  } else if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 126) {  	fragment = new byte[2 + maskLength + length];  	fragment [1] = (byte)length;  } else if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 126) {  	fragment = new byte[2 + maskLength + length];  	fragment [1] = (byte)length;  } else if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 126) {  	fragment = new byte[2 + maskLength + length];  	fragment [1] = (byte)length;  } else if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 126) {  	fragment = new byte[2 + maskLength + length];  	fragment [1] = (byte)length;  } else if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 126) {  	fragment = new byte[2 + maskLength + length];  	fragment [1] = (byte)length;  } else if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 126) {  	fragment = new byte[2 + maskLength + length];  	fragment [1] = (byte)length;  } else if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 126) {  	fragment = new byte[2 + maskLength + length];  	fragment [1] = (byte)length;  } else if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 126) {  	fragment = new byte[2 + maskLength + length];  	fragment [1] = (byte)length;  } else if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 126) {  	fragment = new byte[2 + maskLength + length];  	fragment [1] = (byte)length;  } else if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 126) {  	fragment = new byte[2 + maskLength + length];  	fragment [1] = (byte)length;  } else if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 126) {  	fragment = new byte[2 + maskLength + length];  	fragment [1] = (byte)length;  } else if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: fragment = new byte[2 + maskLength + length];  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: if (length < 65536) {  	fragment = new byte[4 + maskLength + length];  	fragment [1] = (byte)126;  	fragment [2] = (byte)(length / 256);  	fragment [3] = (byte)(length % 256);  } else {  	fragment = new byte[10 + maskLength + length];  	fragment [1] = (byte)127;  	int left = length;  	int unit = 256;  	for (int i = 9; i > 1; i--) {  		fragment [i] = (byte)(left % unit);  		left = left / unit;  		if (left == 0)  			break;  	}  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: fragment = new byte[4 + maskLength + length];  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: fragment [1] = (byte)126;  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: fragment [2] = (byte)(length / 256);  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: fragment [2] = (byte)(length / 256);  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: fragment [3] = (byte)(length % 256);  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: fragment [3] = (byte)(length % 256);  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: fragment = new byte[10 + maskLength + length];  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: fragment [1] = (byte)127;  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,EncodeDataFrame,The following statement contains a magic number: for (int i = 9; i > 1; i--) {  	fragment [i] = (byte)(left % unit);  	left = left / unit;  	if (left == 0)  		break;  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,SendCloseHandshake,The following statement contains a magic number: if (!string.IsNullOrEmpty (closeReason)) {  	int bytesCount = Encoding.UTF8.GetBytes (closeReason' 0' closeReason.Length' playloadData' 2);  	SendDataFragment (websocket' OpCode.Close' playloadData' 0' bytesCount + 2);  } else {  	SendDataFragment (websocket' OpCode.Close' playloadData' 0' playloadData.Length);  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,SendCloseHandshake,The following statement contains a magic number: if (!string.IsNullOrEmpty (closeReason)) {  	int bytesCount = Encoding.UTF8.GetBytes (closeReason' 0' closeReason.Length' playloadData' 2);  	SendDataFragment (websocket' OpCode.Close' playloadData' 0' bytesCount + 2);  } else {  	SendDataFragment (websocket' OpCode.Close' playloadData' 0' playloadData.Length);  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,SendCloseHandshake,The following statement contains a magic number: SendDataFragment (websocket' OpCode.Close' playloadData' 0' bytesCount + 2);  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,GenerateMask,The following statement contains a magic number: for (var i = offset; i < maxPos; i++) {  	mask [i] = (byte)m_Random.Next (0' 255);  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,GenerateMask,The following statement contains a magic number: mask [i] = (byte)m_Random.Next (0' 255);  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,MaskData,The following statement contains a magic number: for (var i = 0; i < length; i++) {  	var pos = offset + i;  	outputData [outputOffset++] = (byte)(rawData [pos] ^ mask [maskOffset + i % 4]);  }  
Magic Number,WebSocket4Net.Protocol,DraftHybi10Processor,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\DraftHybi10Processor.cs,MaskData,The following statement contains a magic number: outputData [outputOffset++] = (byte)(rawData [pos] ^ mask [maskOffset + i % 4]);  
Magic Number,WebSocket4Net.Protocol,ProtocolProcessorBase,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\ProtocolProcessorBase.cs,ValidateVerbLine,The following statement contains a magic number: if (parts.Length < 3)  	return false;  
Magic Number,WebSocket4Net.Protocol,ProtocolProcessorBase,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\ProtocolProcessorBase.cs,ValidateVerbLine,The following statement contains a magic number: return statusCode == 101;  
Magic Number,WebSocket4Net.Protocol.FramePartReader,ExtendedLenghtReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\ExtendedLenghtReader.cs,Process,The following statement contains a magic number: if (frame.PayloadLenght == 126)  	required += 2;  else  	required += 8;  
Magic Number,WebSocket4Net.Protocol.FramePartReader,ExtendedLenghtReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\ExtendedLenghtReader.cs,Process,The following statement contains a magic number: if (frame.PayloadLenght == 126)  	required += 2;  else  	required += 8;  
Magic Number,WebSocket4Net.Protocol.FramePartReader,ExtendedLenghtReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\ExtendedLenghtReader.cs,Process,The following statement contains a magic number: if (frame.PayloadLenght == 126)  	required += 2;  else  	required += 8;  
Magic Number,WebSocket4Net.Protocol.FramePartReader,ExtendedLenghtReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\ExtendedLenghtReader.cs,Process,The following statement contains a magic number: required += 2;  
Magic Number,WebSocket4Net.Protocol.FramePartReader,ExtendedLenghtReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\ExtendedLenghtReader.cs,Process,The following statement contains a magic number: required += 8;  
Magic Number,WebSocket4Net.Protocol.FramePartReader,FixPartReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\FixPartReader.cs,Process,The following statement contains a magic number: if (frame.Length < 2) {  	nextPartReader = this;  	return -1;  }  
Magic Number,WebSocket4Net.Protocol.FramePartReader,FixPartReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\FixPartReader.cs,Process,The following statement contains a magic number: if (frame.PayloadLenght < 126) {  	if (frame.HasMask)  		nextPartReader = MaskKeyReader;  	else {  		if (frame.ActualPayloadLength == 0) {  			nextPartReader = null;  			return (int)((long)frame.Length - 2);  		}  		nextPartReader = PayloadDataReader;  	}  } else {  	nextPartReader = ExtendedLenghtReader;  }  
Magic Number,WebSocket4Net.Protocol.FramePartReader,FixPartReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\FixPartReader.cs,Process,The following statement contains a magic number: if (frame.PayloadLenght < 126) {  	if (frame.HasMask)  		nextPartReader = MaskKeyReader;  	else {  		if (frame.ActualPayloadLength == 0) {  			nextPartReader = null;  			return (int)((long)frame.Length - 2);  		}  		nextPartReader = PayloadDataReader;  	}  } else {  	nextPartReader = ExtendedLenghtReader;  }  
Magic Number,WebSocket4Net.Protocol.FramePartReader,FixPartReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\FixPartReader.cs,Process,The following statement contains a magic number: if (frame.HasMask)  	nextPartReader = MaskKeyReader;  else {  	if (frame.ActualPayloadLength == 0) {  		nextPartReader = null;  		return (int)((long)frame.Length - 2);  	}  	nextPartReader = PayloadDataReader;  }  
Magic Number,WebSocket4Net.Protocol.FramePartReader,FixPartReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\FixPartReader.cs,Process,The following statement contains a magic number: if (frame.ActualPayloadLength == 0) {  	nextPartReader = null;  	return (int)((long)frame.Length - 2);  }  
Magic Number,WebSocket4Net.Protocol.FramePartReader,FixPartReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\FixPartReader.cs,Process,The following statement contains a magic number: return (int)((long)frame.Length - 2);  
Magic Number,WebSocket4Net.Protocol.FramePartReader,FixPartReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\FixPartReader.cs,Process,The following statement contains a magic number: if (frame.Length > 2)  	return nextPartReader.Process (2' frame' out nextPartReader);  
Magic Number,WebSocket4Net.Protocol.FramePartReader,FixPartReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\FixPartReader.cs,Process,The following statement contains a magic number: if (frame.Length > 2)  	return nextPartReader.Process (2' frame' out nextPartReader);  
Magic Number,WebSocket4Net.Protocol.FramePartReader,FixPartReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\FixPartReader.cs,Process,The following statement contains a magic number: return nextPartReader.Process (2' frame' out nextPartReader);  
Magic Number,WebSocket4Net.Protocol.FramePartReader,MaskKeyReader,F:\newReposMay17\kerryjiang_WebSocket4Net\WebSocket4Net\Protocol\FramePartReader\MaskKeyReader.cs,Process,The following statement contains a magic number: frame.MaskKey = frame.InnerData.ToArrayData (lastLength' 4);  
