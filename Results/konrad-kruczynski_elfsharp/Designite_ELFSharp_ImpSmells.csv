Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ELFSharp.ELF.Sections,SymbolEntry<T>,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\Sections\SymbolEntry.cs,SymbolEntry,The method has 7 parameters. Parameters: name' value' size' binding' type' elf' sectionIdx
Long Parameter List,ELFSharp.MachO,Section,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\MachO\Section.cs,Section,The method has 6 parameters. Parameters: name' address' size' offsetInSegment' alignExponent' segment
Long Statement,ELFSharp.ELF,ELF<T>,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\ELF.cs,GetSection,The length of the statement  "                throw new InvalidOperationException("Given ELF does not contain section header string table' therefore names of sections cannot be obtained."); " is 143.
Long Statement,ELFSharp.ELF,ELF<T>,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\ELF.cs,ToString,The length of the statement  "			                     "NumberOfSections={5}' NumberOfSegments={6}]"' Endianess' Class' Type' Machine' EntryPoint' sections.Count' segments.Count); " is 124.
Long Statement,ELFSharp.ELF,ELF<T>,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\ELF.cs,ReadStringTable,The length of the statement  "                throw new InvalidOperationException("Given index of section header does not point at string table which was expected."); " is 120.
Long Statement,ELFSharp.ELF.Sections,StringTable<T>,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\Sections\StringTable.cs,ReadStringData,The length of the statement  "                Debug.Assert(blob.Length == 0 || (blob[0] == 0 && blob[blob.Length - 1] == 0)' "First and last bytes must be the null character (except for empty string tables)"); " is 163.
Magic Number,ELFSharp.ELF,ELF<T>,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\ELF.cs,ReadIdentificator,The following statement contains a magic number: reader.ReadBytes(4);
Magic Number,ELFSharp.ELF,ELF<T>,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\ELF.cs,ReadIdentificator,The following statement contains a magic number: switch(classByte)              {                  case 1:                      Class = Class.Bit32;                      break;                  case 2:                      Class = Class.Bit64;                      break;                  default:                      throw new ArgumentException(string.Format(                          "Given ELF file is of unknown class {0}."'                          classByte                      ));              }
Magic Number,ELFSharp.ELF,ELF<T>,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\ELF.cs,ReadIdentificator,The following statement contains a magic number: switch(endianessByte)              {                  case 1:                      Endianess = Endianess.LittleEndian;                      break;                  case 2:                      Endianess = Endianess.BigEndian;                      break;                  default:                      throw new ArgumentException(string.Format(                          "Given ELF file uses unknown endianess {0}."'                          endianessByte                      ));              }
Magic Number,ELFSharp.ELF,ELF<T>,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\ELF.cs,ReadIdentificator,The following statement contains a magic number: reader.ReadBytes(10);
Magic Number,ELFSharp.ELF,ELFReader,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\ELFReader.cs,CheckELFType,The following statement contains a magic number: using(var reader = new BinaryReader(File.OpenRead(fileName)))  			{  				var magic = reader.ReadBytes(4);  				for(var i = 0; i < 4; i++)  				{  					if(magic[i] != Magic[i])  					{  						return Class.NotELF;  					}  				}  				var value = reader.ReadByte();  				return value == 1 ? Class.Bit32 : Class.Bit64;  			}
Magic Number,ELFSharp.ELF,ELFReader,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\ELFReader.cs,CheckELFType,The following statement contains a magic number: using(var reader = new BinaryReader(File.OpenRead(fileName)))  			{  				var magic = reader.ReadBytes(4);  				for(var i = 0; i < 4; i++)  				{  					if(magic[i] != Magic[i])  					{  						return Class.NotELF;  					}  				}  				var value = reader.ReadByte();  				return value == 1 ? Class.Bit32 : Class.Bit64;  			}
Magic Number,ELFSharp.ELF.Sections,SymbolTable<T>,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\Sections\SymbolTable.cs,ReadSymbols,The following statement contains a magic number: using(var reader = ObtainReader())              {                  entries = new List<SymbolEntry<T>>();                  var adder = elf.Class == Class.Bit32 ? Consts.SymbolEntrySize32 : Consts.SymbolEntrySize64;                  for(var i = 0; i < Header.Size; i += adder)                  {                      var value = 0UL;                      var size = 0UL;                      var nameIdx = reader.ReadUInt32();                      if(elf.Class == Class.Bit32)                      {                          value = reader.ReadUInt32();                          size = reader.ReadUInt32();                      }                      var info = reader.ReadByte();                      reader.ReadByte(); // other is read' which holds zero					                      var sectionIdx = reader.ReadUInt16();                      if(elf.Class == Class.Bit64)                      {                          value = reader.ReadUInt64();                          size = reader.ReadUInt64();                      }                      var name = table == null ? "<corrupt>" : table[nameIdx];                      var binding = (SymbolBinding)(info >> 4);                      var type = (SymbolType)(info & 0x0F);                      entries.Add(new SymbolEntry<T>(name' value.To<T>()' size.To<T>()' binding' type' elf' sectionIdx));                  }              }
Magic Number,ELFSharp.ELF.Segments,Segment<T>,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\Segments\Segment.cs,GetRawHeader,The following statement contains a magic number: using(var reader = ObtainReader(headerOffset))              {                  return reader.ReadBytesOrThrow(elfClass == Class.Bit32 ? 32 : 56);              }
Magic Number,ELFSharp.ELF.Segments,Segment<T>,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\ELF\Segments\Segment.cs,GetRawHeader,The following statement contains a magic number: using(var reader = ObtainReader(headerOffset))              {                  return reader.ReadBytesOrThrow(elfClass == Class.Bit32 ? 32 : 56);              }
Magic Number,ELFSharp.UImage,UImage,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\UImage\UImage.cs,UImage,The following statement contains a magic number: using(var reader = new BinaryReader(File.OpenRead(fileName)))  			{  				reader.ReadBytes(8); // magic and CRC' already checked  				Timestamp = (new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc) + TimeSpan.FromSeconds(reader.ReadInt32BigEndian())).ToLocalTime();  				Size = reader.ReadUInt32BigEndian();  				LoadAddress = reader.ReadUInt32BigEndian();  				EntryPoint = reader.ReadUInt32BigEndian();  				CRC = reader.ReadUInt32BigEndian();  				OperatingSystem = (OS)reader.ReadByte();  				Architecture = (Architecture)reader.ReadByte();  				Type = (ImageType)reader.ReadByte();  				Compression = (CompressionType)reader.ReadByte();  				var nameAsBytes = reader.ReadBytes(32);  				Name = Encoding.UTF8.GetString(nameAsBytes.Reverse().SkipWhile(x => x == 0).Reverse().ToArray());  				image = reader.ReadBytes((int)Size);  			}
Magic Number,ELFSharp.UImage,UImage,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\UImage\UImage.cs,UImage,The following statement contains a magic number: using(var reader = new BinaryReader(File.OpenRead(fileName)))  			{  				reader.ReadBytes(8); // magic and CRC' already checked  				Timestamp = (new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc) + TimeSpan.FromSeconds(reader.ReadInt32BigEndian())).ToLocalTime();  				Size = reader.ReadUInt32BigEndian();  				LoadAddress = reader.ReadUInt32BigEndian();  				EntryPoint = reader.ReadUInt32BigEndian();  				CRC = reader.ReadUInt32BigEndian();  				OperatingSystem = (OS)reader.ReadByte();  				Architecture = (Architecture)reader.ReadByte();  				Type = (ImageType)reader.ReadByte();  				Compression = (CompressionType)reader.ReadByte();  				var nameAsBytes = reader.ReadBytes(32);  				Name = Encoding.UTF8.GetString(nameAsBytes.Reverse().SkipWhile(x => x == 0).Reverse().ToArray());  				image = reader.ReadBytes((int)Size);  			}
Magic Number,ELFSharp.UImage,UImage,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\UImage\UImage.cs,UImage,The following statement contains a magic number: using(var reader = new BinaryReader(File.OpenRead(fileName)))  			{  				reader.ReadBytes(8); // magic and CRC' already checked  				Timestamp = (new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc) + TimeSpan.FromSeconds(reader.ReadInt32BigEndian())).ToLocalTime();  				Size = reader.ReadUInt32BigEndian();  				LoadAddress = reader.ReadUInt32BigEndian();  				EntryPoint = reader.ReadUInt32BigEndian();  				CRC = reader.ReadUInt32BigEndian();  				OperatingSystem = (OS)reader.ReadByte();  				Architecture = (Architecture)reader.ReadByte();  				Type = (ImageType)reader.ReadByte();  				Compression = (CompressionType)reader.ReadByte();  				var nameAsBytes = reader.ReadBytes(32);  				Name = Encoding.UTF8.GetString(nameAsBytes.Reverse().SkipWhile(x => x == 0).Reverse().ToArray());  				image = reader.ReadBytes((int)Size);  			}
Magic Number,ELFSharp.UImage,UImageReader,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\UImage\UImageReader.cs,TryLoad,The following statement contains a magic number: if(new FileInfo(fileName).Length < 64)  			{  				return UImageResult.NotUImage;  			}
Magic Number,ELFSharp.UImage,UImageReader,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\UImage\UImageReader.cs,TryLoad,The following statement contains a magic number: using(var reader = new BinaryReader(File.OpenRead(fileName)))  			{  				headerForCrc = reader.ReadBytes(64);  				// we need to zero crc part  				for(var i = 4; i < 8; i++)  				{  					headerForCrc[i] = 0;  				}  			}
Magic Number,ELFSharp.UImage,UImageReader,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\UImage\UImageReader.cs,TryLoad,The following statement contains a magic number: using(var reader = new BinaryReader(File.OpenRead(fileName)))  			{  				headerForCrc = reader.ReadBytes(64);  				// we need to zero crc part  				for(var i = 4; i < 8; i++)  				{  					headerForCrc[i] = 0;  				}  			}
Magic Number,ELFSharp.UImage,UImageReader,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\UImage\UImageReader.cs,TryLoad,The following statement contains a magic number: using(var reader = new BinaryReader(File.OpenRead(fileName)))  			{  				headerForCrc = reader.ReadBytes(64);  				// we need to zero crc part  				for(var i = 4; i < 8; i++)  				{  					headerForCrc[i] = 0;  				}  			}
Magic Number,ELFSharp.UImage,UImageReader,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\UImage\UImageReader.cs,TryLoad,The following statement contains a magic number: using(var reader = new BinaryReader(File.OpenRead(fileName)))  			{  				var magic = reader.ReadUInt32BigEndian();  				if(magic != Magic)  				{  					return UImageResult.NotUImage;  				}  				var crc = reader.ReadUInt32BigEndian();  				if(crc != GzipCrc32(headerForCrc))  				{  					return UImageResult.BadChecksum;  				}  				reader.ReadBytes(22);  				var imageType = (ImageType)reader.ReadByte();  				if(!Enum.IsDefined(typeof(ImageType)' imageType))  				{  					return UImageResult.NotSupportedImageType;  				}  				// TODO: check CRC of the header  				uImage = new UImage(fileName);  				return UImageResult.OK;  			}
Magic Number,ELFSharp.UImage,UImageReader,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\UImage\UImageReader.cs,GzipCrc32,The following statement contains a magic number: for(var i = 0; i < data.Length; i++)  			{  				remainder ^= data[i];  				for(var j = 0; j < 8; j++)  				{  					if((remainder & 1) != 0)  					{  						remainder = (remainder >> 1) ^ Polynomial;  					}  					else  					{  						remainder >>= 1;  					}  				}  			}
Magic Number,ELFSharp.MachO,MachO,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\MachO\MachO.cs,MachO,The following statement contains a magic number: using(var reader = new BinaryReader(OpenStream()))              {                                  reader.ReadBytes(4); // header' already checked                  Machine = (Machine)reader.ReadInt32();                  reader.ReadBytes(4); // we don't support the cpu subtype now                  FileType = (FileType)reader.ReadUInt32();                  var noOfCommands = reader.ReadInt32();                  var sizeOfCommands = reader.ReadInt32();                  reader.ReadBytes(4); // we don't support flags now                  if(is64)                  {                      reader.ReadBytes(4); // reserved                  }                  commands = new Command[noOfCommands];                  ReadCommands(noOfCommands' sizeOfCommands' reader);              }
Magic Number,ELFSharp.MachO,MachO,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\MachO\MachO.cs,MachO,The following statement contains a magic number: using(var reader = new BinaryReader(OpenStream()))              {                                  reader.ReadBytes(4); // header' already checked                  Machine = (Machine)reader.ReadInt32();                  reader.ReadBytes(4); // we don't support the cpu subtype now                  FileType = (FileType)reader.ReadUInt32();                  var noOfCommands = reader.ReadInt32();                  var sizeOfCommands = reader.ReadInt32();                  reader.ReadBytes(4); // we don't support flags now                  if(is64)                  {                      reader.ReadBytes(4); // reserved                  }                  commands = new Command[noOfCommands];                  ReadCommands(noOfCommands' sizeOfCommands' reader);              }
Magic Number,ELFSharp.MachO,MachO,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\MachO\MachO.cs,MachO,The following statement contains a magic number: using(var reader = new BinaryReader(OpenStream()))              {                                  reader.ReadBytes(4); // header' already checked                  Machine = (Machine)reader.ReadInt32();                  reader.ReadBytes(4); // we don't support the cpu subtype now                  FileType = (FileType)reader.ReadUInt32();                  var noOfCommands = reader.ReadInt32();                  var sizeOfCommands = reader.ReadInt32();                  reader.ReadBytes(4); // we don't support flags now                  if(is64)                  {                      reader.ReadBytes(4); // reserved                  }                  commands = new Command[noOfCommands];                  ReadCommands(noOfCommands' sizeOfCommands' reader);              }
Magic Number,ELFSharp.MachO,MachO,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\MachO\MachO.cs,MachO,The following statement contains a magic number: using(var reader = new BinaryReader(OpenStream()))              {                                  reader.ReadBytes(4); // header' already checked                  Machine = (Machine)reader.ReadInt32();                  reader.ReadBytes(4); // we don't support the cpu subtype now                  FileType = (FileType)reader.ReadUInt32();                  var noOfCommands = reader.ReadInt32();                  var sizeOfCommands = reader.ReadInt32();                  reader.ReadBytes(4); // we don't support flags now                  if(is64)                  {                      reader.ReadBytes(4); // reserved                  }                  commands = new Command[noOfCommands];                  ReadCommands(noOfCommands' sizeOfCommands' reader);              }
Magic Number,ELFSharp.MachO,MachO,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\MachO\MachO.cs,ReadCommands,The following statement contains a magic number: for(var i = 0; i < noOfCommands; i++)              {                  var loadCommandType = reader.ReadUInt32();                  var commandSize = reader.ReadUInt32();                  switch((CommandType)loadCommandType)                  {                  case CommandType.SymbolTable:                      commands[i] = new SymbolTable(reader' OpenStream' is64);                      break;                  case CommandType.Main:                      commands[i] = new EntryPoint(reader' OpenStream);                      break;                  case CommandType.Segment:                  case CommandType.Segment64:                      commands[i] = new Segment(reader' OpenStream' is64);                      break;                  default:                      reader.ReadBytes((int)commandSize - 8); // 8 bytes is the size of the common command header                      break;                  }              }
Magic Number,ELFSharp.MachO,SymbolTable,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\MachO\SymbolTable.cs,ReadSymbols,The following statement contains a magic number: try              {                  for(var i = 0; i < numberOfSymbols; i++)                  {                      var nameOffset = symbolReader.ReadInt32();                      var name = ReadStringFromOffset(stringTableStream' stringTableOffset + nameOffset);                      symbolReader.ReadBytes(4); // ignoring for now                      long value = is64 ? symbolReader.ReadInt64() : symbolReader.ReadInt32();                      var symbol = new Symbol(name' value);                      symbols[i] = symbol;                  }              }              finally              {                  symbolReader.Close();                  stringTableStream.Close();              }
Magic Number,ELFSharp.MachO,Segment,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\MachO\Segment.cs,Segment,The following statement contains a magic number: for(var i = 0; i < numberOfSections; i++)              {                  var sectionName = ReadSectionOrSegmentName();                  var segmentName = ReadSectionOrSegmentName();                  if(segmentName != Name)                  {                      throw new InvalidOperationException("Unexpected name of the section's segment.");                  }                  var sectionAddress = ReadInt32OrInt64();                  var sectionSize = ReadInt32OrInt64();                  var offsetInSegment = ReadInt32OrInt64() - fileOffset;                  if(offsetInSegment < 0)                  {                      throw new InvalidOperationException("Unexpected section offset lower than segment offset.");                  }                  var alignExponent = Reader.ReadInt32();                  Reader.ReadBytes(20);                  var section = new Section(sectionName' sectionAddress' sectionSize' offsetInSegment' alignExponent' this);                  sections.Add(section);              }
Magic Number,ELFSharp.MachO,Segment,C:\repos\konrad-kruczynski_elfsharp\ELFSharp\MachO\Segment.cs,ReadSectionOrSegmentName,The following statement contains a magic number: var nameAsBytes = Reader.ReadBytes(16).TakeWhile(x => x != 0).ToArray();
