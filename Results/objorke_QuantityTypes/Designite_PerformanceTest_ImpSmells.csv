Implementation smell,Namespace,Class,File,Method,Description
Long Method,PerformanceTest,Program,C:\research\architectureSmells\repos\objorke_QuantityTypes\Source\Examples\PerformanceTest\Program.cs,TestQuantityTypes,The method has 101 lines of code.
Complex Method,PerformanceTest,Program,C:\research\architectureSmells\repos\objorke_QuantityTypes\Source\Examples\PerformanceTest\Program.cs,TestQuantityTypes,Cyclomatic complexity of the method is 15
Complex Method,PerformanceTest,Program,C:\research\architectureSmells\repos\objorke_QuantityTypes\Source\Examples\PerformanceTest\Program.cs,TestQuantityTypesDynamic,Cyclomatic complexity of the method is 11
Magic Number,PerformanceTest,Program,C:\research\architectureSmells\repos\objorke_QuantityTypes\Source\Examples\PerformanceTest\Program.cs,Main,The following statement contains a magic number: int N = 2000000;
Magic Number,PerformanceTest,Program,C:\research\architectureSmells\repos\objorke_QuantityTypes\Source\Examples\PerformanceTest\Program.cs,TestQuantityTypes,The following statement contains a magic number: a2[i] = (Area)(a1[i] ^ 2);
Magic Number,PerformanceTest,Program,C:\research\architectureSmells\repos\objorke_QuantityTypes\Source\Examples\PerformanceTest\Program.cs,TestQuantityTypesDynamic,The following statement contains a magic number: a2[i] = new DynamicQuantity(a1[i].Value * a1[i].Value' new Dimensions(0' 2' 0));
Magic Number,PerformanceTest,Timer,C:\research\architectureSmells\repos\objorke_QuantityTypes\Source\Examples\PerformanceTest\Timer.cs,Stop,The following statement contains a magic number: return this.ElapsedMicroseconds / 1000;
