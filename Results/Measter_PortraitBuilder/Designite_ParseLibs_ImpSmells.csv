Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Parsers.DLC,DLCReader,C:\repos\Measter_PortraitBuilder\ParseLibs\DLC\DLCReader.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,Parsers.Mod,ModReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Mod\ModReader.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParsePortraitType,Cyclomatic complexity of the method is 21
Complex Method,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseSpriteType,Cyclomatic complexity of the method is 17
Complex Method,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,Cyclomatic complexity of the method is 9
Long Parameter List,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParsePortraitType,The method has 6 parameters.
Long Parameter List,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The method has 5 parameters.
Long Parameter List,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The method has 6 parameters.
Long Statement,Parsers.Portrait,PortraitType,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitType.cs,ToString,The length of the statement  "	return string.Format ("Name: {0}' Layers: {1}' HairColours: {2}' EyeColours: {3}"' Name' Layers.Count' HairColours.Count' EyeColours.Count); " is 140.
Magic Number,Parsers.DLC,DLCReader,C:\repos\Measter_PortraitBuilder\ParseLibs\DLC\DLCReader.cs,Parse,The following statement contains a magic number: using (StreamReader sr = new StreamReader (filename' Encoding.GetEncoding (1252))) {  	while ((line = sr.ReadLine ()) != null) {  		if (line.StartsWith ("#"))  			continue;  		if (line.StartsWith ("name"))  			d.Name = line.Split ('=') [1].Split ('#') [0].Replace ("\""' "").Trim ();  		if (line.StartsWith ("archive"))  			d.Archive = line.Split ('=') [1].Split ('#') [0].Replace ("\""' "").Trim ();  		if (line.StartsWith ("checksum"))  			d.Checksum = line.Split ('=') [1].Split ('#') [0].Replace ("\""' "").Trim ();  		if (line.StartsWith ("steam_id")) {  			if (Int32.TryParse (line.Split ('=') [1].Split ('#') [0].Replace ("\""' "").Trim ()' out intOut))  				d.SteamID = intOut;  			else  				Errors.Add (string.Format ("Error parsing Steam ID in file: {0}"' f.Name));  		}  		if (line.StartsWith ("gamersgate_id")) {  			if (Int32.TryParse (line.Split ('=') [1].Split ('#') [0].Replace ("\""' "").Trim ()' out intOut))  				d.GamersGateID = intOut;  			else  				Errors.Add (string.Format ("Error parsing GamersGate ID in file: {0}"' f.Name));  		}  		if (line.StartsWith ("affects_checksum"))  			d.AffectsChecksum = line.Split ('=') [1].Split ('#') [0].Replace ("\""' "").Trim () == "yes";  	}  }  
Magic Number,Parsers.Mod,ModReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Mod\ModReader.cs,Parse,The following statement contains a magic number: using (StreamReader sr = new StreamReader (filename' Encoding.GetEncoding (1252))) {  	while ((line = sr.ReadLine ()) != null) {  		if (line.StartsWith ("#"))  			continue;  		if (line.StartsWith ("name"))  			m.Name = line.Split ('=') [1].Split ('#') [0].Replace ("\""' "").Trim ();  		if (line.StartsWith ("path") || line.StartsWith ("archive"))  			m.Path = line.Split ('=') [1].Split ('#') [0].Replace ("\""' "").Trim ();  		if (line.StartsWith ("user_dir") || line.StartsWith ("archive"))  			m.UserDir = line.Split ('=') [1].Split ('#') [0].Replace ("\""' "").Trim ();  		if (line.StartsWith ("extend"))  			m.Extends.Add (line.Split ('=') [1].Split ('#') [0].Replace ("\""' "").Trim ());  		if (line.StartsWith ("replace"))  			m.Replaces.Add (line.Split ('=') [1].Split ('#') [0].Replace ("\""' "").Trim ().Replace ('/'' '\\'));  		if (line.StartsWith ("dependencies")) {  			string[] tstring = line.Split ('=') [1].Split ('#') [0].Replace ("{"' "").Replace ("}"' "").Trim ().Split ('"');  			foreach (string s in tstring) {  				if (s.Trim () != string.Empty) {  					m.Dependencies.Add (s);  				}  			}  		}  	}  }  
Magic Number,Parsers.Portrait,Colour,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\Colour.cs,Clamp,The following statement contains a magic number: if (i > 255)  	return 255;  
Magic Number,Parsers.Portrait,Colour,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\Colour.cs,Clamp,The following statement contains a magic number: if (i > 255)  	return 255;  
Magic Number,Parsers.Portrait,Colour,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\Colour.cs,Clamp,The following statement contains a magic number: return 255;  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseEyeColours,The following statement contains a magic number: foreach (SyntaxTreeNode child in children) {  	Log (" --Parsing Eye Colour");  	c = new Colour ();  	value = child.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = child.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = child.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	Log ("   --Colour: " + c.Red + " " + c.Green + " " + c.Blue);  	p.EyeColours.Add (c);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseEyeColours,The following statement contains a magic number: value = child.Children [2].Symbol as SymbolTokenText;  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseHairColours,The following statement contains a magic number: for (int i = 0; i < children.Count; i += 3) {  	Log (" --Parsing Hair Colour");  	h = new Hair ();  	c = new Colour ();  	token = children [i];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Dark = c;  	Log ("   --Dark: " + c.Red + " " + c.Green + " " + c.Blue);  	c = new Colour ();  	token = children [i + 1];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Base = c;  	Log ("   --Base: " + c.Red + " " + c.Green + " " + c.Blue);  	c = new Colour ();  	token = children [i + 2];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Highlight = c;  	Log ("   --Highlight: " + c.Red + " " + c.Green + " " + c.Blue);  	p.HairColours.Add (h);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseHairColours,The following statement contains a magic number: for (int i = 0; i < children.Count; i += 3) {  	Log (" --Parsing Hair Colour");  	h = new Hair ();  	c = new Colour ();  	token = children [i];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Dark = c;  	Log ("   --Dark: " + c.Red + " " + c.Green + " " + c.Blue);  	c = new Colour ();  	token = children [i + 1];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Base = c;  	Log ("   --Base: " + c.Red + " " + c.Green + " " + c.Blue);  	c = new Colour ();  	token = children [i + 2];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Highlight = c;  	Log ("   --Highlight: " + c.Red + " " + c.Green + " " + c.Blue);  	p.HairColours.Add (h);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseHairColours,The following statement contains a magic number: for (int i = 0; i < children.Count; i += 3) {  	Log (" --Parsing Hair Colour");  	h = new Hair ();  	c = new Colour ();  	token = children [i];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Dark = c;  	Log ("   --Dark: " + c.Red + " " + c.Green + " " + c.Blue);  	c = new Colour ();  	token = children [i + 1];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Base = c;  	Log ("   --Base: " + c.Red + " " + c.Green + " " + c.Blue);  	c = new Colour ();  	token = children [i + 2];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Highlight = c;  	Log ("   --Highlight: " + c.Red + " " + c.Green + " " + c.Blue);  	p.HairColours.Add (h);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseHairColours,The following statement contains a magic number: for (int i = 0; i < children.Count; i += 3) {  	Log (" --Parsing Hair Colour");  	h = new Hair ();  	c = new Colour ();  	token = children [i];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Dark = c;  	Log ("   --Dark: " + c.Red + " " + c.Green + " " + c.Blue);  	c = new Colour ();  	token = children [i + 1];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Base = c;  	Log ("   --Base: " + c.Red + " " + c.Green + " " + c.Blue);  	c = new Colour ();  	token = children [i + 2];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Highlight = c;  	Log ("   --Highlight: " + c.Red + " " + c.Green + " " + c.Blue);  	p.HairColours.Add (h);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseHairColours,The following statement contains a magic number: for (int i = 0; i < children.Count; i += 3) {  	Log (" --Parsing Hair Colour");  	h = new Hair ();  	c = new Colour ();  	token = children [i];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Dark = c;  	Log ("   --Dark: " + c.Red + " " + c.Green + " " + c.Blue);  	c = new Colour ();  	token = children [i + 1];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Base = c;  	Log ("   --Base: " + c.Red + " " + c.Green + " " + c.Blue);  	c = new Colour ();  	token = children [i + 2];  	value = token.Children [0].Symbol as SymbolTokenText;  	c.Red = byte.Parse (value.ValueText);  	value = token.Children [1].Symbol as SymbolTokenText;  	c.Green = byte.Parse (value.ValueText);  	value = token.Children [2].Symbol as SymbolTokenText;  	c.Blue = byte.Parse (value.ValueText);  	h.Highlight = c;  	Log ("   --Highlight: " + c.Red + " " + c.Green + " " + c.Blue);  	p.HairColours.Add (h);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseHairColours,The following statement contains a magic number: i += 3
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseHairColours,The following statement contains a magic number: value = token.Children [2].Symbol as SymbolTokenText;  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseHairColours,The following statement contains a magic number: value = token.Children [2].Symbol as SymbolTokenText;  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseHairColours,The following statement contains a magic number: token = children [i + 2];  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseHairColours,The following statement contains a magic number: value = token.Children [2].Symbol as SymbolTokenText;  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: foreach (SyntaxTreeNode child in node.Children) {  	Log (" --Parsing Layer");  	s = ((SymbolTokenText)child.Symbol).ValueText.Replace ("\""' "").Split (':');  	l = new Layer ();  	l.Filename = filename;  	l.Name = s [0];  	l.LayerType = s [1] [0] == 'd' ? Layer.Type.DNA : Layer.Type.Property;  	l.Index = int.Parse (s [1].Substring (1));  	if (s.Length >= 3) {  		if (s [2] == "h" || s [2] == "x")  			l.IsHair = true;  		else if (s [2] == "e")  			l.IsEye = true;  	}  	if (s.Length == 4)  		l.DontRefreshIfValid = s [3] == "y";  	Log ("   --ID: " + l.Name);  	Log ("   --Index: " + l.Index);  	Log ("   --Layer Type: " + (l.LayerType == Layer.Type.DNA ? "DNA" : "Property"));  	Log ("   --Is Hair: " + l.IsHair);  	Log ("   --Is Eye: " + l.IsEye);  	p.Layers.Add (l);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: foreach (SyntaxTreeNode child in node.Children) {  	Log (" --Parsing Layer");  	s = ((SymbolTokenText)child.Symbol).ValueText.Replace ("\""' "").Split (':');  	l = new Layer ();  	l.Filename = filename;  	l.Name = s [0];  	l.LayerType = s [1] [0] == 'd' ? Layer.Type.DNA : Layer.Type.Property;  	l.Index = int.Parse (s [1].Substring (1));  	if (s.Length >= 3) {  		if (s [2] == "h" || s [2] == "x")  			l.IsHair = true;  		else if (s [2] == "e")  			l.IsEye = true;  	}  	if (s.Length == 4)  		l.DontRefreshIfValid = s [3] == "y";  	Log ("   --ID: " + l.Name);  	Log ("   --Index: " + l.Index);  	Log ("   --Layer Type: " + (l.LayerType == Layer.Type.DNA ? "DNA" : "Property"));  	Log ("   --Is Hair: " + l.IsHair);  	Log ("   --Is Eye: " + l.IsEye);  	p.Layers.Add (l);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: foreach (SyntaxTreeNode child in node.Children) {  	Log (" --Parsing Layer");  	s = ((SymbolTokenText)child.Symbol).ValueText.Replace ("\""' "").Split (':');  	l = new Layer ();  	l.Filename = filename;  	l.Name = s [0];  	l.LayerType = s [1] [0] == 'd' ? Layer.Type.DNA : Layer.Type.Property;  	l.Index = int.Parse (s [1].Substring (1));  	if (s.Length >= 3) {  		if (s [2] == "h" || s [2] == "x")  			l.IsHair = true;  		else if (s [2] == "e")  			l.IsEye = true;  	}  	if (s.Length == 4)  		l.DontRefreshIfValid = s [3] == "y";  	Log ("   --ID: " + l.Name);  	Log ("   --Index: " + l.Index);  	Log ("   --Layer Type: " + (l.LayerType == Layer.Type.DNA ? "DNA" : "Property"));  	Log ("   --Is Hair: " + l.IsHair);  	Log ("   --Is Eye: " + l.IsEye);  	p.Layers.Add (l);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: foreach (SyntaxTreeNode child in node.Children) {  	Log (" --Parsing Layer");  	s = ((SymbolTokenText)child.Symbol).ValueText.Replace ("\""' "").Split (':');  	l = new Layer ();  	l.Filename = filename;  	l.Name = s [0];  	l.LayerType = s [1] [0] == 'd' ? Layer.Type.DNA : Layer.Type.Property;  	l.Index = int.Parse (s [1].Substring (1));  	if (s.Length >= 3) {  		if (s [2] == "h" || s [2] == "x")  			l.IsHair = true;  		else if (s [2] == "e")  			l.IsEye = true;  	}  	if (s.Length == 4)  		l.DontRefreshIfValid = s [3] == "y";  	Log ("   --ID: " + l.Name);  	Log ("   --Index: " + l.Index);  	Log ("   --Layer Type: " + (l.LayerType == Layer.Type.DNA ? "DNA" : "Property"));  	Log ("   --Is Hair: " + l.IsHair);  	Log ("   --Is Eye: " + l.IsEye);  	p.Layers.Add (l);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: foreach (SyntaxTreeNode child in node.Children) {  	Log (" --Parsing Layer");  	s = ((SymbolTokenText)child.Symbol).ValueText.Replace ("\""' "").Split (':');  	l = new Layer ();  	l.Filename = filename;  	l.Name = s [0];  	l.LayerType = s [1] [0] == 'd' ? Layer.Type.DNA : Layer.Type.Property;  	l.Index = int.Parse (s [1].Substring (1));  	if (s.Length >= 3) {  		if (s [2] == "h" || s [2] == "x")  			l.IsHair = true;  		else if (s [2] == "e")  			l.IsEye = true;  	}  	if (s.Length == 4)  		l.DontRefreshIfValid = s [3] == "y";  	Log ("   --ID: " + l.Name);  	Log ("   --Index: " + l.Index);  	Log ("   --Layer Type: " + (l.LayerType == Layer.Type.DNA ? "DNA" : "Property"));  	Log ("   --Is Hair: " + l.IsHair);  	Log ("   --Is Eye: " + l.IsEye);  	p.Layers.Add (l);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: foreach (SyntaxTreeNode child in node.Children) {  	Log (" --Parsing Layer");  	s = ((SymbolTokenText)child.Symbol).ValueText.Replace ("\""' "").Split (':');  	l = new Layer ();  	l.Filename = filename;  	l.Name = s [0];  	l.LayerType = s [1] [0] == 'd' ? Layer.Type.DNA : Layer.Type.Property;  	l.Index = int.Parse (s [1].Substring (1));  	if (s.Length >= 3) {  		if (s [2] == "h" || s [2] == "x")  			l.IsHair = true;  		else if (s [2] == "e")  			l.IsEye = true;  	}  	if (s.Length == 4)  		l.DontRefreshIfValid = s [3] == "y";  	Log ("   --ID: " + l.Name);  	Log ("   --Index: " + l.Index);  	Log ("   --Layer Type: " + (l.LayerType == Layer.Type.DNA ? "DNA" : "Property"));  	Log ("   --Is Hair: " + l.IsHair);  	Log ("   --Is Eye: " + l.IsEye);  	p.Layers.Add (l);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: if (s.Length >= 3) {  	if (s [2] == "h" || s [2] == "x")  		l.IsHair = true;  	else if (s [2] == "e")  		l.IsEye = true;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: if (s.Length >= 3) {  	if (s [2] == "h" || s [2] == "x")  		l.IsHair = true;  	else if (s [2] == "e")  		l.IsEye = true;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: if (s.Length >= 3) {  	if (s [2] == "h" || s [2] == "x")  		l.IsHair = true;  	else if (s [2] == "e")  		l.IsEye = true;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: if (s.Length >= 3) {  	if (s [2] == "h" || s [2] == "x")  		l.IsHair = true;  	else if (s [2] == "e")  		l.IsEye = true;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: if (s [2] == "h" || s [2] == "x")  	l.IsHair = true;  else if (s [2] == "e")  	l.IsEye = true;  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: if (s [2] == "h" || s [2] == "x")  	l.IsHair = true;  else if (s [2] == "e")  	l.IsEye = true;  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: if (s [2] == "h" || s [2] == "x")  	l.IsHair = true;  else if (s [2] == "e")  	l.IsEye = true;  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: if (s [2] == "e")  	l.IsEye = true;  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: if (s.Length == 4)  	l.DontRefreshIfValid = s [3] == "y";  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: if (s.Length == 4)  	l.DontRefreshIfValid = s [3] == "y";  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseLayers,The following statement contains a magic number: l.DontRefreshIfValid = s [3] == "y";  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: if (dna.Length >= 9 == false || properties.Length >= 9 == false) {  	DrawErrors.Add ("DNA or Property strings are too short.");  	Log ("  --Error: DNA or Portrait string too short.");  	return null;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: if (dna.Length >= 9 == false || properties.Length >= 9 == false) {  	DrawErrors.Add ("DNA or Property strings are too short.");  	Log ("  --Error: DNA or Portrait string too short.");  	return null;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: foreach (Layer l in pType.Layers) {  	Log ("--Drawing Layer");  	if (Sprites.ContainsKey (l.Name)) {  		Log ("  --Searching for sprite ID: " + l.Name);  		sprite = Sprites [l.Name];  	}  	else {  		Log ("  --Sprite not found.");  		DrawErrors.Add ("Sprite not found: " + l.Name);  		continue;  	}  	//Check if loaded; if not' then load  	if (!sprite.IsLoaded) {  		if (File.Exists (dir + "/" + selMod.Path + "/" + sprite.TextureFilePath)) {  			Log ("  --Loading sprite from: " + dir + "/" + selMod.Path + "/" + sprite.TextureFilePath);  			sprite.Load (dir + "/" + selMod.Path);  		}  		else if (File.Exists (ckDir + "/" + sprite.TextureFilePath)) {  			Log ("  --Loading sprite from: " + ckDir + "/" + sprite.TextureFilePath);  			sprite.Load (ckDir + "/");  		}  		else {  			Log ("  --Error: Unable to find file: " + sprite.TextureFilePath);  			DrawErrors.Add ("Unable to find file: " + sprite.TextureFilePath);  			continue;  		}  	}  	//Get DNA/Properties letter' then the index of the tile to draw  	letter = l.LayerType == Layer.Type.DNA ? dna [l.Index] : properties [l.Index];  	Log ("  --Layer Type: " + (l.LayerType == Layer.Type.DNA ? "DNA" : "Property"));  	Log ("  --Layer Index: " + l.Index);  	Log ("  --Layer Letter: " + letter);  	tileIndex = GetIndex (letter' sprite.FrameCount);  	Log ("  --Tile Index: " + tileIndex);  	//Draw tile  	if (l.IsHair) {  		Log ("  --Drawing Layer as Hair");  		letter = dna [pType.HairColourIndex];  		hairEyeIndex = GetIndex (letter' pType.HairColours.Count);  		hairEyeTemp = DrawHair (sprite.Tiles [tileIndex]' pType.HairColours [hairEyeIndex]);  		g.DrawImage (hairEyeTemp' 12' 12);  	}  	else if (l.IsEye) {  		Log ("  --Drawing Layer as Eye");  		letter = dna [pType.EyeColourIndex];  		hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  		hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  		g.DrawImage (hairEyeTemp' 12' 12);  	}  	else {  		Log ("  --Drawing Layer");  		g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: foreach (Layer l in pType.Layers) {  	Log ("--Drawing Layer");  	if (Sprites.ContainsKey (l.Name)) {  		Log ("  --Searching for sprite ID: " + l.Name);  		sprite = Sprites [l.Name];  	}  	else {  		Log ("  --Sprite not found.");  		DrawErrors.Add ("Sprite not found: " + l.Name);  		continue;  	}  	//Check if loaded; if not' then load  	if (!sprite.IsLoaded) {  		if (File.Exists (dir + "/" + selMod.Path + "/" + sprite.TextureFilePath)) {  			Log ("  --Loading sprite from: " + dir + "/" + selMod.Path + "/" + sprite.TextureFilePath);  			sprite.Load (dir + "/" + selMod.Path);  		}  		else if (File.Exists (ckDir + "/" + sprite.TextureFilePath)) {  			Log ("  --Loading sprite from: " + ckDir + "/" + sprite.TextureFilePath);  			sprite.Load (ckDir + "/");  		}  		else {  			Log ("  --Error: Unable to find file: " + sprite.TextureFilePath);  			DrawErrors.Add ("Unable to find file: " + sprite.TextureFilePath);  			continue;  		}  	}  	//Get DNA/Properties letter' then the index of the tile to draw  	letter = l.LayerType == Layer.Type.DNA ? dna [l.Index] : properties [l.Index];  	Log ("  --Layer Type: " + (l.LayerType == Layer.Type.DNA ? "DNA" : "Property"));  	Log ("  --Layer Index: " + l.Index);  	Log ("  --Layer Letter: " + letter);  	tileIndex = GetIndex (letter' sprite.FrameCount);  	Log ("  --Tile Index: " + tileIndex);  	//Draw tile  	if (l.IsHair) {  		Log ("  --Drawing Layer as Hair");  		letter = dna [pType.HairColourIndex];  		hairEyeIndex = GetIndex (letter' pType.HairColours.Count);  		hairEyeTemp = DrawHair (sprite.Tiles [tileIndex]' pType.HairColours [hairEyeIndex]);  		g.DrawImage (hairEyeTemp' 12' 12);  	}  	else if (l.IsEye) {  		Log ("  --Drawing Layer as Eye");  		letter = dna [pType.EyeColourIndex];  		hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  		hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  		g.DrawImage (hairEyeTemp' 12' 12);  	}  	else {  		Log ("  --Drawing Layer");  		g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: foreach (Layer l in pType.Layers) {  	Log ("--Drawing Layer");  	if (Sprites.ContainsKey (l.Name)) {  		Log ("  --Searching for sprite ID: " + l.Name);  		sprite = Sprites [l.Name];  	}  	else {  		Log ("  --Sprite not found.");  		DrawErrors.Add ("Sprite not found: " + l.Name);  		continue;  	}  	//Check if loaded; if not' then load  	if (!sprite.IsLoaded) {  		if (File.Exists (dir + "/" + selMod.Path + "/" + sprite.TextureFilePath)) {  			Log ("  --Loading sprite from: " + dir + "/" + selMod.Path + "/" + sprite.TextureFilePath);  			sprite.Load (dir + "/" + selMod.Path);  		}  		else if (File.Exists (ckDir + "/" + sprite.TextureFilePath)) {  			Log ("  --Loading sprite from: " + ckDir + "/" + sprite.TextureFilePath);  			sprite.Load (ckDir + "/");  		}  		else {  			Log ("  --Error: Unable to find file: " + sprite.TextureFilePath);  			DrawErrors.Add ("Unable to find file: " + sprite.TextureFilePath);  			continue;  		}  	}  	//Get DNA/Properties letter' then the index of the tile to draw  	letter = l.LayerType == Layer.Type.DNA ? dna [l.Index] : properties [l.Index];  	Log ("  --Layer Type: " + (l.LayerType == Layer.Type.DNA ? "DNA" : "Property"));  	Log ("  --Layer Index: " + l.Index);  	Log ("  --Layer Letter: " + letter);  	tileIndex = GetIndex (letter' sprite.FrameCount);  	Log ("  --Tile Index: " + tileIndex);  	//Draw tile  	if (l.IsHair) {  		Log ("  --Drawing Layer as Hair");  		letter = dna [pType.HairColourIndex];  		hairEyeIndex = GetIndex (letter' pType.HairColours.Count);  		hairEyeTemp = DrawHair (sprite.Tiles [tileIndex]' pType.HairColours [hairEyeIndex]);  		g.DrawImage (hairEyeTemp' 12' 12);  	}  	else if (l.IsEye) {  		Log ("  --Drawing Layer as Eye");  		letter = dna [pType.EyeColourIndex];  		hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  		hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  		g.DrawImage (hairEyeTemp' 12' 12);  	}  	else {  		Log ("  --Drawing Layer");  		g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: foreach (Layer l in pType.Layers) {  	Log ("--Drawing Layer");  	if (Sprites.ContainsKey (l.Name)) {  		Log ("  --Searching for sprite ID: " + l.Name);  		sprite = Sprites [l.Name];  	}  	else {  		Log ("  --Sprite not found.");  		DrawErrors.Add ("Sprite not found: " + l.Name);  		continue;  	}  	//Check if loaded; if not' then load  	if (!sprite.IsLoaded) {  		if (File.Exists (dir + "/" + selMod.Path + "/" + sprite.TextureFilePath)) {  			Log ("  --Loading sprite from: " + dir + "/" + selMod.Path + "/" + sprite.TextureFilePath);  			sprite.Load (dir + "/" + selMod.Path);  		}  		else if (File.Exists (ckDir + "/" + sprite.TextureFilePath)) {  			Log ("  --Loading sprite from: " + ckDir + "/" + sprite.TextureFilePath);  			sprite.Load (ckDir + "/");  		}  		else {  			Log ("  --Error: Unable to find file: " + sprite.TextureFilePath);  			DrawErrors.Add ("Unable to find file: " + sprite.TextureFilePath);  			continue;  		}  	}  	//Get DNA/Properties letter' then the index of the tile to draw  	letter = l.LayerType == Layer.Type.DNA ? dna [l.Index] : properties [l.Index];  	Log ("  --Layer Type: " + (l.LayerType == Layer.Type.DNA ? "DNA" : "Property"));  	Log ("  --Layer Index: " + l.Index);  	Log ("  --Layer Letter: " + letter);  	tileIndex = GetIndex (letter' sprite.FrameCount);  	Log ("  --Tile Index: " + tileIndex);  	//Draw tile  	if (l.IsHair) {  		Log ("  --Drawing Layer as Hair");  		letter = dna [pType.HairColourIndex];  		hairEyeIndex = GetIndex (letter' pType.HairColours.Count);  		hairEyeTemp = DrawHair (sprite.Tiles [tileIndex]' pType.HairColours [hairEyeIndex]);  		g.DrawImage (hairEyeTemp' 12' 12);  	}  	else if (l.IsEye) {  		Log ("  --Drawing Layer as Eye");  		letter = dna [pType.EyeColourIndex];  		hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  		hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  		g.DrawImage (hairEyeTemp' 12' 12);  	}  	else {  		Log ("  --Drawing Layer");  		g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: foreach (Layer l in pType.Layers) {  	Log ("--Drawing Layer");  	if (Sprites.ContainsKey (l.Name)) {  		Log ("  --Searching for sprite ID: " + l.Name);  		sprite = Sprites [l.Name];  	}  	else {  		Log ("  --Sprite not found.");  		DrawErrors.Add ("Sprite not found: " + l.Name);  		continue;  	}  	//Check if loaded; if not' then load  	if (!sprite.IsLoaded) {  		if (File.Exists (dir + "/" + selMod.Path + "/" + sprite.TextureFilePath)) {  			Log ("  --Loading sprite from: " + dir + "/" + selMod.Path + "/" + sprite.TextureFilePath);  			sprite.Load (dir + "/" + selMod.Path);  		}  		else if (File.Exists (ckDir + "/" + sprite.TextureFilePath)) {  			Log ("  --Loading sprite from: " + ckDir + "/" + sprite.TextureFilePath);  			sprite.Load (ckDir + "/");  		}  		else {  			Log ("  --Error: Unable to find file: " + sprite.TextureFilePath);  			DrawErrors.Add ("Unable to find file: " + sprite.TextureFilePath);  			continue;  		}  	}  	//Get DNA/Properties letter' then the index of the tile to draw  	letter = l.LayerType == Layer.Type.DNA ? dna [l.Index] : properties [l.Index];  	Log ("  --Layer Type: " + (l.LayerType == Layer.Type.DNA ? "DNA" : "Property"));  	Log ("  --Layer Index: " + l.Index);  	Log ("  --Layer Letter: " + letter);  	tileIndex = GetIndex (letter' sprite.FrameCount);  	Log ("  --Tile Index: " + tileIndex);  	//Draw tile  	if (l.IsHair) {  		Log ("  --Drawing Layer as Hair");  		letter = dna [pType.HairColourIndex];  		hairEyeIndex = GetIndex (letter' pType.HairColours.Count);  		hairEyeTemp = DrawHair (sprite.Tiles [tileIndex]' pType.HairColours [hairEyeIndex]);  		g.DrawImage (hairEyeTemp' 12' 12);  	}  	else if (l.IsEye) {  		Log ("  --Drawing Layer as Eye");  		letter = dna [pType.EyeColourIndex];  		hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  		hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  		g.DrawImage (hairEyeTemp' 12' 12);  	}  	else {  		Log ("  --Drawing Layer");  		g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: foreach (Layer l in pType.Layers) {  	Log ("--Drawing Layer");  	if (Sprites.ContainsKey (l.Name)) {  		Log ("  --Searching for sprite ID: " + l.Name);  		sprite = Sprites [l.Name];  	}  	else {  		Log ("  --Sprite not found.");  		DrawErrors.Add ("Sprite not found: " + l.Name);  		continue;  	}  	//Check if loaded; if not' then load  	if (!sprite.IsLoaded) {  		if (File.Exists (dir + "/" + selMod.Path + "/" + sprite.TextureFilePath)) {  			Log ("  --Loading sprite from: " + dir + "/" + selMod.Path + "/" + sprite.TextureFilePath);  			sprite.Load (dir + "/" + selMod.Path);  		}  		else if (File.Exists (ckDir + "/" + sprite.TextureFilePath)) {  			Log ("  --Loading sprite from: " + ckDir + "/" + sprite.TextureFilePath);  			sprite.Load (ckDir + "/");  		}  		else {  			Log ("  --Error: Unable to find file: " + sprite.TextureFilePath);  			DrawErrors.Add ("Unable to find file: " + sprite.TextureFilePath);  			continue;  		}  	}  	//Get DNA/Properties letter' then the index of the tile to draw  	letter = l.LayerType == Layer.Type.DNA ? dna [l.Index] : properties [l.Index];  	Log ("  --Layer Type: " + (l.LayerType == Layer.Type.DNA ? "DNA" : "Property"));  	Log ("  --Layer Index: " + l.Index);  	Log ("  --Layer Letter: " + letter);  	tileIndex = GetIndex (letter' sprite.FrameCount);  	Log ("  --Tile Index: " + tileIndex);  	//Draw tile  	if (l.IsHair) {  		Log ("  --Drawing Layer as Hair");  		letter = dna [pType.HairColourIndex];  		hairEyeIndex = GetIndex (letter' pType.HairColours.Count);  		hairEyeTemp = DrawHair (sprite.Tiles [tileIndex]' pType.HairColours [hairEyeIndex]);  		g.DrawImage (hairEyeTemp' 12' 12);  	}  	else if (l.IsEye) {  		Log ("  --Drawing Layer as Eye");  		letter = dna [pType.EyeColourIndex];  		hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  		hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  		g.DrawImage (hairEyeTemp' 12' 12);  	}  	else {  		Log ("  --Drawing Layer");  		g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: if (l.IsHair) {  	Log ("  --Drawing Layer as Hair");  	letter = dna [pType.HairColourIndex];  	hairEyeIndex = GetIndex (letter' pType.HairColours.Count);  	hairEyeTemp = DrawHair (sprite.Tiles [tileIndex]' pType.HairColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else if (l.IsEye) {  	Log ("  --Drawing Layer as Eye");  	letter = dna [pType.EyeColourIndex];  	hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  	hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else {  	Log ("  --Drawing Layer");  	g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: if (l.IsHair) {  	Log ("  --Drawing Layer as Hair");  	letter = dna [pType.HairColourIndex];  	hairEyeIndex = GetIndex (letter' pType.HairColours.Count);  	hairEyeTemp = DrawHair (sprite.Tiles [tileIndex]' pType.HairColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else if (l.IsEye) {  	Log ("  --Drawing Layer as Eye");  	letter = dna [pType.EyeColourIndex];  	hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  	hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else {  	Log ("  --Drawing Layer");  	g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: if (l.IsHair) {  	Log ("  --Drawing Layer as Hair");  	letter = dna [pType.HairColourIndex];  	hairEyeIndex = GetIndex (letter' pType.HairColours.Count);  	hairEyeTemp = DrawHair (sprite.Tiles [tileIndex]' pType.HairColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else if (l.IsEye) {  	Log ("  --Drawing Layer as Eye");  	letter = dna [pType.EyeColourIndex];  	hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  	hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else {  	Log ("  --Drawing Layer");  	g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: if (l.IsHair) {  	Log ("  --Drawing Layer as Hair");  	letter = dna [pType.HairColourIndex];  	hairEyeIndex = GetIndex (letter' pType.HairColours.Count);  	hairEyeTemp = DrawHair (sprite.Tiles [tileIndex]' pType.HairColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else if (l.IsEye) {  	Log ("  --Drawing Layer as Eye");  	letter = dna [pType.EyeColourIndex];  	hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  	hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else {  	Log ("  --Drawing Layer");  	g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: if (l.IsHair) {  	Log ("  --Drawing Layer as Hair");  	letter = dna [pType.HairColourIndex];  	hairEyeIndex = GetIndex (letter' pType.HairColours.Count);  	hairEyeTemp = DrawHair (sprite.Tiles [tileIndex]' pType.HairColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else if (l.IsEye) {  	Log ("  --Drawing Layer as Eye");  	letter = dna [pType.EyeColourIndex];  	hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  	hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else {  	Log ("  --Drawing Layer");  	g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: if (l.IsHair) {  	Log ("  --Drawing Layer as Hair");  	letter = dna [pType.HairColourIndex];  	hairEyeIndex = GetIndex (letter' pType.HairColours.Count);  	hairEyeTemp = DrawHair (sprite.Tiles [tileIndex]' pType.HairColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else if (l.IsEye) {  	Log ("  --Drawing Layer as Eye");  	letter = dna [pType.EyeColourIndex];  	hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  	hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else {  	Log ("  --Drawing Layer");  	g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: g.DrawImage (hairEyeTemp' 12' 12);  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: g.DrawImage (hairEyeTemp' 12' 12);  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: if (l.IsEye) {  	Log ("  --Drawing Layer as Eye");  	letter = dna [pType.EyeColourIndex];  	hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  	hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else {  	Log ("  --Drawing Layer");  	g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: if (l.IsEye) {  	Log ("  --Drawing Layer as Eye");  	letter = dna [pType.EyeColourIndex];  	hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  	hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else {  	Log ("  --Drawing Layer");  	g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: if (l.IsEye) {  	Log ("  --Drawing Layer as Eye");  	letter = dna [pType.EyeColourIndex];  	hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  	hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else {  	Log ("  --Drawing Layer");  	g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: if (l.IsEye) {  	Log ("  --Drawing Layer as Eye");  	letter = dna [pType.EyeColourIndex];  	hairEyeIndex = GetIndex (letter' pType.EyeColours.Count);  	hairEyeTemp = DrawEye (sprite.Tiles [tileIndex]' pType.EyeColours [hairEyeIndex]);  	g.DrawImage (hairEyeTemp' 12' 12);  }  else {  	Log ("  --Drawing Layer");  	g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: g.DrawImage (hairEyeTemp' 12' 12);  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: g.DrawImage (hairEyeTemp' 12' 12);  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawPortrait,The following statement contains a magic number: g.DrawImage (sprite.Tiles [tileIndex]' 12' 12);  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Red = brow [x * pixelSize + 2];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  				c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  				c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Red = brow [x * pixelSize + 2];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  				c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  				c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Red = brow [x * pixelSize + 2];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  				c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  				c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Red = brow [x * pixelSize + 2];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  				c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  				c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Red = brow [x * pixelSize + 2];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  				c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  				c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Red = brow [x * pixelSize + 2];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  				c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  				c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Red = brow [x * pixelSize + 2];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  				c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  				c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Red = brow [x * pixelSize + 2];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  				c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  				c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Red = brow [x * pixelSize + 2];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  				c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  				c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Red = brow [x * pixelSize + 2];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  			c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  			c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Red = brow [x * pixelSize + 2];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  			c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  			c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Red = brow [x * pixelSize + 2];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  			c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  			c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Red = brow [x * pixelSize + 2];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  			c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  			c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Red = brow [x * pixelSize + 2];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  			c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  			c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Red = brow [x * pixelSize + 2];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  			c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  			c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Red = brow [x * pixelSize + 2];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  			c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  			c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Red = brow [x * pixelSize + 2];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  			c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  			c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Red = brow [x * pixelSize + 2];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  			c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  			c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Red = brow [x * pixelSize + 2];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  		c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  		c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Red = brow [x * pixelSize + 2];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  		c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  		c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Red = brow [x * pixelSize + 2];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  		c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  		c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Red = brow [x * pixelSize + 2];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  		c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  		c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Red = brow [x * pixelSize + 2];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  		c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  		c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Red = brow [x * pixelSize + 2];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  		c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  		c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Red = brow [x * pixelSize + 2];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  		c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  		c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Red = brow [x * pixelSize + 2];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  		c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  		c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: c1.Red = brow [x * pixelSize + 2];  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: c1.Alpha = brow [x * pixelSize + 3];  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: if (c1.Alpha > 0) {  	c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  	c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  	c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  	orow [x * pixelSize] = c2.Blue;  	orow [x * pixelSize + 1] = c2.Green;  	orow [x * pixelSize + 2] = c2.Red;  	orow [x * pixelSize + 3] = c1.Alpha;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: if (c1.Alpha > 0) {  	c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  	c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  	c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  	orow [x * pixelSize] = c2.Blue;  	orow [x * pixelSize + 1] = c2.Green;  	orow [x * pixelSize + 2] = c2.Red;  	orow [x * pixelSize + 3] = c1.Alpha;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: if (c1.Alpha > 0) {  	c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  	c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  	c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  	orow [x * pixelSize] = c2.Blue;  	orow [x * pixelSize + 1] = c2.Green;  	orow [x * pixelSize + 2] = c2.Red;  	orow [x * pixelSize + 3] = c1.Alpha;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: if (c1.Alpha > 0) {  	c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  	c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  	c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  	orow [x * pixelSize] = c2.Blue;  	orow [x * pixelSize + 1] = c2.Green;  	orow [x * pixelSize + 2] = c2.Red;  	orow [x * pixelSize + 3] = c1.Alpha;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: if (c1.Alpha > 0) {  	c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  	c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  	c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  	orow [x * pixelSize] = c2.Blue;  	orow [x * pixelSize + 1] = c2.Green;  	orow [x * pixelSize + 2] = c2.Red;  	orow [x * pixelSize + 3] = c1.Alpha;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: c2.Red = (byte)(255 * ((ec.Red / 255f) * (c1.Red / 255f)));  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: c2.Green = (byte)(255 * ((ec.Green / 255f) * (c1.Red / 255f)));  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: c2.Blue = (byte)(255 * ((ec.Blue / 255f) * (c1.Red / 255f)));  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: orow [x * pixelSize + 2] = c2.Red;  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawEye,The following statement contains a magic number: orow [x * pixelSize + 3] = c1.Alpha;  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Green = brow [x * pixelSize + 1];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  				c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Green = brow [x * pixelSize + 1];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  				c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Green = brow [x * pixelSize + 1];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  				c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Green = brow [x * pixelSize + 1];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  				c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Green = brow [x * pixelSize + 1];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  				c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Green = brow [x * pixelSize + 1];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  				c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Green = brow [x * pixelSize + 1];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  				c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: unsafe {  	for (int y = 0; y < 152; y++) {  		byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  		byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  		for (int x = 0; x < 152; x++) {  			c1.Green = brow [x * pixelSize + 1];  			c1.Alpha = brow [x * pixelSize + 3];  			if (c1.Alpha > 0) {  				c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  				c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  				orow [x * pixelSize] = c2.Blue;  				orow [x * pixelSize + 1] = c2.Green;  				orow [x * pixelSize + 2] = c2.Red;  				orow [x * pixelSize + 3] = c1.Alpha;  			}  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Green = brow [x * pixelSize + 1];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  			c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Green = brow [x * pixelSize + 1];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  			c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Green = brow [x * pixelSize + 1];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  			c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Green = brow [x * pixelSize + 1];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  			c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Green = brow [x * pixelSize + 1];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  			c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Green = brow [x * pixelSize + 1];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  			c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Green = brow [x * pixelSize + 1];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  			c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int y = 0; y < 152; y++) {  	byte* brow = (byte*)bdata.Scan0 + (y * bdata.Stride);  	byte* orow = (byte*)odata.Scan0 + (y * odata.Stride);  	for (int x = 0; x < 152; x++) {  		c1.Green = brow [x * pixelSize + 1];  		c1.Alpha = brow [x * pixelSize + 3];  		if (c1.Alpha > 0) {  			c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  			c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  			orow [x * pixelSize] = c2.Blue;  			orow [x * pixelSize + 1] = c2.Green;  			orow [x * pixelSize + 2] = c2.Red;  			orow [x * pixelSize + 3] = c1.Alpha;  		}  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Green = brow [x * pixelSize + 1];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  		c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Green = brow [x * pixelSize + 1];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  		c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Green = brow [x * pixelSize + 1];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  		c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Green = brow [x * pixelSize + 1];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  		c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Green = brow [x * pixelSize + 1];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  		c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Green = brow [x * pixelSize + 1];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  		c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: for (int x = 0; x < 152; x++) {  	c1.Green = brow [x * pixelSize + 1];  	c1.Alpha = brow [x * pixelSize + 3];  	if (c1.Alpha > 0) {  		c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  		c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  		orow [x * pixelSize] = c2.Blue;  		orow [x * pixelSize + 1] = c2.Green;  		orow [x * pixelSize + 2] = c2.Red;  		orow [x * pixelSize + 3] = c1.Alpha;  	}  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: c1.Alpha = brow [x * pixelSize + 3];  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: if (c1.Alpha > 0) {  	c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  	c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  	orow [x * pixelSize] = c2.Blue;  	orow [x * pixelSize + 1] = c2.Green;  	orow [x * pixelSize + 2] = c2.Red;  	orow [x * pixelSize + 3] = c1.Alpha;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: if (c1.Alpha > 0) {  	c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  	c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  	orow [x * pixelSize] = c2.Blue;  	orow [x * pixelSize + 1] = c2.Green;  	orow [x * pixelSize + 2] = c2.Red;  	orow [x * pixelSize + 3] = c1.Alpha;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: if (c1.Alpha > 0) {  	c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  	c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  	orow [x * pixelSize] = c2.Blue;  	orow [x * pixelSize + 1] = c2.Green;  	orow [x * pixelSize + 2] = c2.Red;  	orow [x * pixelSize + 3] = c1.Alpha;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: if (c1.Alpha > 0) {  	c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  	c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  	orow [x * pixelSize] = c2.Blue;  	orow [x * pixelSize + 1] = c2.Green;  	orow [x * pixelSize + 2] = c2.Red;  	orow [x * pixelSize + 3] = c1.Alpha;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: if (c1.Alpha > 0) {  	c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  	c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  	orow [x * pixelSize] = c2.Blue;  	orow [x * pixelSize + 1] = c2.Green;  	orow [x * pixelSize + 2] = c2.Red;  	orow [x * pixelSize + 3] = c1.Alpha;  }  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: c2 = Colour.Lerp (hc.Dark' hc.Base' Colour.Clamp (c1.Green * 2));  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: c2 = Colour.Lerp (c2' hc.Highlight' Colour.Clamp ((c1.Green - 128) * 2));  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: orow [x * pixelSize + 2] = c2.Red;  
Magic Number,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,DrawHair,The following statement contains a magic number: orow [x * pixelSize + 3] = c1.Alpha;  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_12_0,The following statement contains a magic number: family.AddChild (nodes [2]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_13_0,The following statement contains a magic number: family.AddChild (nodes [2]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_14_0,The following statement contains a magic number: family.AddChild (nodes [2]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_15_0,The following statement contains a magic number: family.AddChild (nodes [2]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_16_0,The following statement contains a magic number: nodes [2].Action = SyntaxTreeNodeAction.Drop;  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_16_0,The following statement contains a magic number: family.AddChild (nodes [2]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_16_0,The following statement contains a magic number: nodes [3].Action = SyntaxTreeNodeAction.Drop;  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_16_0,The following statement contains a magic number: family.AddChild (nodes [3]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_16_1,The following statement contains a magic number: nodes [2].Action = SyntaxTreeNodeAction.Drop;  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_16_1,The following statement contains a magic number: family.AddChild (nodes [2]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_16_1,The following statement contains a magic number: family.AddChild (nodes [3]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_16_1,The following statement contains a magic number: nodes [4].Action = SyntaxTreeNodeAction.Drop;  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_16_1,The following statement contains a magic number: family.AddChild (nodes [4]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_17_0,The following statement contains a magic number: family.AddChild (nodes [2]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_17_0,The following statement contains a magic number: family.AddChild (nodes [3]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_17_0,The following statement contains a magic number: nodes [4].Action = SyntaxTreeNodeAction.Drop;  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_17_0,The following statement contains a magic number: family.AddChild (nodes [4]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_18_0,The following statement contains a magic number: nodes [2].Action = SyntaxTreeNodeAction.Drop;  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_18_0,The following statement contains a magic number: family.AddChild (nodes [2]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_18_0,The following statement contains a magic number: family.AddChild (nodes [3]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_18_0,The following statement contains a magic number: nodes [4].Action = SyntaxTreeNodeAction.Drop;  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_18_0,The following statement contains a magic number: family.AddChild (nodes [4]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_19_0,The following statement contains a magic number: nodes [2].Action = SyntaxTreeNodeAction.Drop;  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_19_0,The following statement contains a magic number: family.AddChild (nodes [2]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_19_0,The following statement contains a magic number: family.AddChild (nodes [3]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_19_0,The following statement contains a magic number: nodes [4].Action = SyntaxTreeNodeAction.Drop;  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_19_0,The following statement contains a magic number: family.AddChild (nodes [4]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_1B_0,The following statement contains a magic number: nodes [2].Action = SyntaxTreeNodeAction.Drop;  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_1B_0,The following statement contains a magic number: family.AddChild (nodes [2]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_1B_0,The following statement contains a magic number: family.AddChild (nodes [3]);  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_1B_0,The following statement contains a magic number: nodes [4].Action = SyntaxTreeNodeAction.Drop;  
Magic Number,Parsers.Portrait,EventReaderParser,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReaderParser.cs,Production_1B_0,The following statement contains a magic number: family.AddChild (nodes [4]);  
Missing Default,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParsePortraitType,The following switch statement is missing a default case: switch (token.Symbol.Name) {  case "stringOption":  	if (id.ValueText == "name")  		p.Name = value.ValueText.Replace ("\""' "");  	if (id.ValueText == "effectFile")  		p.EffectFile = value.ValueText.Replace ("\""' "").Replace (@"\\"' @"\");  	break;  case "numberOption":  	if (id.ValueText == "hair_color_index")  		p.HairColourIndex = Int32.Parse (value.ValueText);  	if (id.ValueText == "eye_color_index")  		p.EyeColourIndex = Int32.Parse (value.ValueText);  	break;  }  
Missing Default,Parsers.Portrait,PortraitReader,C:\repos\Measter_PortraitBuilder\ParseLibs\Portrait\PortraitReader.cs,ParseSpriteType,The following switch statement is missing a default case: switch (token.Symbol.Name) {  case "stringOption":  	if (id.ValueText == "name")  		s.Name = value.ValueText.Replace ("\""' "");  	if (id.ValueText == "texturefile")  		s.TextureFilePath = value.ValueText.Replace ("\""' "").Replace (@"\\"' @"\");  	break;  case "boolOption":  	if (id.ValueText == "norefcount")  		s.NoRefCount = value.ValueText == "yes";  	break;  case "numberOption":  	if (id.ValueText == "noOfFrames")  		s.FrameCount = Int32.Parse (value.ValueText);  	break;  }  
