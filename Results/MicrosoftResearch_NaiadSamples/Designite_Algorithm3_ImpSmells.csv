Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Build,Cyclomatic complexity of the method is 11
Complex Method,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,IntersectSortedArrays,Cyclomatic complexity of the method is 10
Complex Method,Algorithm3,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,RenameTwitterByDegree,Cyclomatic complexity of the method is 13
Long Parameter List,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Count,The method has 5 parameters. Parameters: prefixes' length' keyFunc' output' identifier
Long Parameter List,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Improve,The method has 5 parameters. Parameters: proposals' length' key' output' identifier
Long Parameter List,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Count,The method has 5 parameters. Parameters: prefixes' length' keyFunc' output' identifier
Long Parameter List,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Improve,The method has 5 parameters. Parameters: proposals' length' key' output' identifier
Long Parameter List,Algorithm3,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,NewBinaryAzureInterGraphStream,The method has 5 parameters. Parameters: controller' containerName' prefix' transformation' trans
Long Statement,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Build,The length of the statement  "                //Console.WriteLine("MaxError: {0}\tAvgError: {1:0.00}\tDirectHits: {2:0.00}"' maxError' ((double)totError) / this.Values.Length' ((double) hits) / this.Values.Length); " is 168.
Long Statement,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Count,The length of the statement  "                        output.Send(new ExtensionProposal<TPrefix>(identifier' prefixes[i]' this.Offsets[localName + 1] - this.Offsets[localName])); " is 124.
Long Statement,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Count,The length of the statement  "                        output.Send(new ExtensionProposal<TPrefix>(identifier' prefixes[i]' this.Offsets[localName + 1] - this.Offsets[localName])); " is 124.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,CountExtensions,The length of the statement  "                return this.FragmentJoin<TPrefix' ExtensionProposal<TPrefix>>(stream' keySelector' (index' prefixes' length' output) => index.Count(prefixes' length' keySelector' output' identifier)); " is 184.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,ImproveExtensions,The length of the statement  "                return this.FragmentJoin<ExtensionProposal<TPrefix>' ExtensionProposal<TPrefix>>(stream' proposal => keySelector(proposal.Record)' " is 130.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,CountExtensions,The length of the statement  "                return this.FragmentJoin<TPrefix' ExtensionProposal<TPrefix>>(stream' keySelector' (index' prefixes' length' output) => index.Count(prefixes' length' keySelector' output' identifier)); " is 184.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,ImproveExtensions,The length of the statement  "                return this.FragmentJoin<ExtensionProposal<TPrefix>' ExtensionProposal<TPrefix>>(stream' proposal => keySelector(proposal.Record)' " is 130.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,ExtendPrefixes,The length of the statement  "                return this.FragmentJoin<TPrefix' Pair<TPrefix' TValue[]>>(stream.Where(x => x.Index == identifier).Select(x => x.Record)' " is 122.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,CountExtensions,The length of the statement  "                           .IndexJoin(stream' tupleKey' (index' tuple) => new ExtensionProposal<TPrefix>(identifier' tuple' index.Count(tupleKey(tuple)))); " is 128.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,ValidateExtensions,The length of the statement  "                           .IndexJoin(stream' tuple => tupleKey(tuple.First)' (index' tuple) => tuple.First.PairWith(index.Validate(tupleKey(tuple.First).PairWith(tuple.Second)).Second)) " is 159.
Long Statement,Algorithm3.Indices,EmptyPrefixExtender<TPrefix>,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\EmptyKeyIndex.cs,ValidateExtensions,The length of the statement  "                             .IndexJoin(partitioned' pair => pair.Second' (hashset' extension) => extension.First.PairWith(hashset.Contains(extension.Second) ? new TValue[] { extension.Second } " is 164.
Long Statement,Algorithm3,Program,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,Main,The length of the statement  "                    // triangles.Expand().Where(x => { Console.WriteLine("{0} Triangle observed: {1}"' stopwatch.Elapsed' x); return true; }); " is 122.
Long Statement,Algorithm3,Program,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,Main,The length of the statement  "                    triangles.Select(x => x.Second.Length).Aggregate(x => true' y => y' (x' y) => x + y' (k' sum) => sum' true).Subscribe(x => { foreach (var y in x) Console.WriteLine("Triangles: {0}"' y); }); " is 189.
Long Statement,Algorithm3,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,OrientFromLowToHighDegree,The length of the statement  "                        .Select(x => x.value.value.First == x.value.value.Second ? (x.node.index < x.value.node.index ? new Edge(x.node' x.value.node) " is 126.
Long Statement,Algorithm3,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,AssessWork,The length of the statement  "                        .Select(x => x.value.value.First == x.value.value.Second ? (x.node.index < x.value.node.index ? x.node.WithValue(x.value.value.First) " is 133.
Long Statement,Algorithm3,CustomOperators,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,IndexJoin,The length of the statement  "            return stream1.NewBinaryStage(stream2' (i' s) => new IndexJoinVertex<TInput1' TInput2' TKey' TOutput' TTime>(i' s' resultSelector)' null' x => keySelector(x).GetHashCode()' null' "Join"); " is 187.
Long Statement,Algorithm3,CustomOperators,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,IndexJoin,The length of the statement  "            return stream1.NewBinaryStage(stream2' (i' s) => new IndexJoinVertex2<TInput1' TInput2' TKey' TOutput>(i' s' action)' null' x => keySelector(x).GetHashCode()' null' "Join"); " is 173.
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: var bytes = new byte[8];
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: var ints = new int[bytes.Length / 4];
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: reader.Read(bytes' 0' 8);
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: Buffer.BlockCopy(bytes' 0' ints' 0' 8);
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: bytes = new byte[4 * degree];
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: bytes.Length < 4 * degree
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: reader.Read(bytes' 0' 4 * degree);
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: this.Offsets = new int[MaxIndex + 2];
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: reader.Read(bytes' 0' 8);
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: Buffer.BlockCopy(bytes' 0' ints' 0' 8);
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: bytes = new byte[4 * degree];
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: bytes.Length < 4 * degree
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: reader.Read(bytes' 0' 4 * degree);
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: Buffer.BlockCopy(bytes' 0' this.Values' cursor' 4 * degree);
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Build,The following statement contains a magic number: this.Offsets = new int[(this.tempList.Max(x => x.First) / this.Parts) + 2];
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Build,The following statement contains a magic number: this.Offsets = new int[(this.tempList.Max(x => x.First) / this.Parts) + 2];
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,AdvanceCursor,The following statement contains a magic number: step *= 2;
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,AdvanceCursor,The following statement contains a magic number: step = step / 2;
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,AdvanceCursor,The following statement contains a magic number: step = step / 2;
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Validate,The following statement contains a magic number: tempArray = new TValue[Math.Max(Math.Min(offsetCount.Second' extensions.Second.Length) + 1' 2 * tempArray.Length)];
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,AdvanceCursor,The following statement contains a magic number: step *= 2;
Magic Number,Algorithm3.Indices,Fragment,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,AdvanceCursor,The following statement contains a magic number: step = step / 2;
Magic Number,Algorithm3,Program,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: bytesToRead -= 4 * (1 + 1 + degree);
Magic Number,Algorithm3,Program,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: threshold += 1000000;
Magic Number,Algorithm3,Program,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: returned > threshold + 1000000
Magic Number,Algorithm3,Program,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep(1000);
Magic Number,Algorithm3,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: var bytes = new byte[8];
Magic Number,Algorithm3,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: var ints = new int[2];
Magic Number,Algorithm3,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: bytesToRead -= reader.Read(bytes' 0' 8);
Magic Number,Algorithm3,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: Buffer.BlockCopy(bytes' 0' ints' 0' 8);
Magic Number,Algorithm3,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: ints = new int[Math.Max(degree' ints.Length * 2)];
Magic Number,Algorithm3,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: bytes = new byte[4 * ints.Length];
Magic Number,Algorithm3,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: bytesToRead -= reader.Read(bytes' 0' 4 * degree);
Magic Number,Algorithm3,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: Buffer.BlockCopy(bytes' 0' ints' 0' 4 * degree);
Magic Number,Algorithm3,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,RenameTwitterByDegree,The following statement contains a magic number: var nodes = 65000000;
