Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Build,Cyclomatic complexity of the method is 11
Complex Method,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,IntersectSortedArrays,Cyclomatic complexity of the method is 10
Long Parameter List,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Count,The method has 5 parameters. Parameters: prefixes' length' keyFunc' output' identifier
Long Parameter List,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Improve,The method has 5 parameters. Parameters: proposals' length' key' output' identifier
Long Parameter List,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Count,The method has 5 parameters. Parameters: prefixes' length' keyFunc' output' identifier
Long Parameter List,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Improve,The method has 5 parameters. Parameters: proposals' length' key' output' identifier
Long Parameter List,Algorithm3,ExtensionMethods,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,NewBinaryAzureInterGraphStream,The method has 5 parameters. Parameters: controller' containerName' prefix' transformation' trans
Long Statement,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Build,The length of the statement  "                //Console.WriteLine("MaxError: {0}\tAvgError: {1:0.00}\tDirectHits: {2:0.00}"' maxError' ((double)totError) / this.Values.Length' ((double) hits) / this.Values.Length); " is 168.
Long Statement,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Count,The length of the statement  "                        output.Send(new ExtensionProposal<TPrefix>(identifier' prefixes[i]' this.Offsets[localName + 1] - this.Offsets[localName])); " is 124.
Long Statement,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Count,The length of the statement  "                        output.Send(new ExtensionProposal<TPrefix>(identifier' prefixes[i]' this.Offsets[localName + 1] - this.Offsets[localName])); " is 124.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,CountExtensions,The length of the statement  "                return this.FragmentJoin<TPrefix' ExtensionProposal<TPrefix>>(stream' keySelector' (index' prefixes' length' output) => index.Count(prefixes' length' keySelector' output' identifier)); " is 184.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,ImproveExtensions,The length of the statement  "                return this.FragmentJoin<ExtensionProposal<TPrefix>' ExtensionProposal<TPrefix>>(stream' proposal => keySelector(proposal.Record)' " is 130.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,CountExtensions,The length of the statement  "                return this.FragmentJoin<TPrefix' ExtensionProposal<TPrefix>>(stream' keySelector' (index' prefixes' length' output) => index.Count(prefixes' length' keySelector' output' identifier)); " is 184.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,ImproveExtensions,The length of the statement  "                return this.FragmentJoin<ExtensionProposal<TPrefix>' ExtensionProposal<TPrefix>>(stream' proposal => keySelector(proposal.Record)' " is 130.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,ExtendPrefixes,The length of the statement  "                return this.FragmentJoin<TPrefix' Pair<TPrefix' TValue[]>>(stream.Where(x => x.Index == identifier).Select(x => x.Record)' " is 122.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,CountExtensions,The length of the statement  "                           .IndexJoin(stream' tupleKey' (index' tuple) => new ExtensionProposal<TPrefix>(identifier' tuple' index.Count(tupleKey(tuple)))); " is 128.
Long Statement,Algorithm3.Indices,Extender<TPrefix>,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,ValidateExtensions,The length of the statement  "                           .IndexJoin(stream' tuple => tupleKey(tuple.First)' (index' tuple) => tuple.First.PairWith(index.Validate(tupleKey(tuple.First).PairWith(tuple.Second)).Second)) " is 159.
Long Statement,Algorithm3.Indices,EmptyPrefixExtender<TPrefix>,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\EmptyKeyIndex.cs,ValidateExtensions,The length of the statement  "                             .IndexJoin(partitioned' pair => pair.Second' (hashset' extension) => extension.First.PairWith(hashset.Contains(extension.Second) ? new TValue[] { extension.Second } " is 164.
Long Statement,Algorithm3,Program,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,Main,The length of the statement  "                    // triangles.Expand().Where(x => { Console.WriteLine("{0} Triangle observed: {1}"' stopwatch.Elapsed' x); return true; }); " is 122.
Long Statement,Algorithm3,Program,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,Main,The length of the statement  "                    triangles.Select(x => x.Second.Length).Aggregate(x => true' y => y' (x' y) => x + y' (k' sum) => sum' true).Subscribe(x => { foreach (var y in x) Console.WriteLine("Triangles: {0}"' y); }); " is 189.
Long Statement,Algorithm3,ExtensionMethods,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,OrientFromLowToHighDegree,The length of the statement  "                        .Select(x => x.value.value.First == x.value.value.Second ? (x.node.index < x.value.node.index ? new Edge(x.node' x.value.node) " is 126.
Long Statement,Algorithm3,ExtensionMethods,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,AssessWork,The length of the statement  "                        .Select(x => x.value.value.First == x.value.value.Second ? (x.node.index < x.value.node.index ? x.node.WithValue(x.value.value.First) " is 133.
Long Statement,Algorithm3,CustomOperators,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,IndexJoin,The length of the statement  "            return stream1.NewBinaryStage(stream2' (i' s) => new IndexJoinVertex<TInput1' TInput2' TKey' TOutput' TTime>(i' s' resultSelector)' null' x => keySelector(x).GetHashCode()' null' "Join"); " is 187.
Long Statement,Algorithm3,CustomOperators,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,IndexJoin,The length of the statement  "            return stream1.NewBinaryStage(stream2' (i' s) => new IndexJoinVertex2<TInput1' TInput2' TKey' TOutput>(i' s' action)' null' x => keySelector(x).GetHashCode()' null' "Join"); " is 173.
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: var bytes = new byte[8];
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: var ints = new int[bytes.Length / 4];
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))                  {                      reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (bytes.Length < 4 * degree)                      {                          bytes = new byte[4 * degree];                          ints = new int[degree];                      }                        reader.Read(bytes' 0' 4 * degree);                        if (MaxIndex < vertex)                          MaxIndex = vertex;                        ValueCnt += degree;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))                  {                      reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (bytes.Length < 4 * degree)                      {                          bytes = new byte[4 * degree];                          ints = new int[degree];                      }                        reader.Read(bytes' 0' 4 * degree);                        if (MaxIndex < vertex)                          MaxIndex = vertex;                        ValueCnt += degree;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))                  {                      reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (bytes.Length < 4 * degree)                      {                          bytes = new byte[4 * degree];                          ints = new int[degree];                      }                        reader.Read(bytes' 0' 4 * degree);                        if (MaxIndex < vertex)                          MaxIndex = vertex;                        ValueCnt += degree;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))                  {                      reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (bytes.Length < 4 * degree)                      {                          bytes = new byte[4 * degree];                          ints = new int[degree];                      }                        reader.Read(bytes' 0' 4 * degree);                        if (MaxIndex < vertex)                          MaxIndex = vertex;                        ValueCnt += degree;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))                  {                      reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (bytes.Length < 4 * degree)                      {                          bytes = new byte[4 * degree];                          ints = new int[degree];                      }                        reader.Read(bytes' 0' 4 * degree);                        if (MaxIndex < vertex)                          MaxIndex = vertex;                        ValueCnt += degree;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: this.Offsets = new int[MaxIndex + 2];
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))                  {                      reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (prevVertex != -1 && prevVertex > vertex)                          throw new Exception("Loaded DenseIntKeyIndex from improper file format; vertices not in order");                        this.Offsets[vertex] = cursor;                        if (bytes.Length < 4 * degree)                      {                          bytes = new byte[4 * degree];                          ints = new int[degree];                      }                        reader.Read(bytes' 0' 4 * degree);                      Buffer.BlockCopy(bytes' 0' this.Values' cursor' 4 * degree);                        this.Offsets[vertex + 1] = cursor + degree;                      cursor += degree;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))                  {                      reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (prevVertex != -1 && prevVertex > vertex)                          throw new Exception("Loaded DenseIntKeyIndex from improper file format; vertices not in order");                        this.Offsets[vertex] = cursor;                        if (bytes.Length < 4 * degree)                      {                          bytes = new byte[4 * degree];                          ints = new int[degree];                      }                        reader.Read(bytes' 0' 4 * degree);                      Buffer.BlockCopy(bytes' 0' this.Values' cursor' 4 * degree);                        this.Offsets[vertex + 1] = cursor + degree;                      cursor += degree;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))                  {                      reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (prevVertex != -1 && prevVertex > vertex)                          throw new Exception("Loaded DenseIntKeyIndex from improper file format; vertices not in order");                        this.Offsets[vertex] = cursor;                        if (bytes.Length < 4 * degree)                      {                          bytes = new byte[4 * degree];                          ints = new int[degree];                      }                        reader.Read(bytes' 0' 4 * degree);                      Buffer.BlockCopy(bytes' 0' this.Values' cursor' 4 * degree);                        this.Offsets[vertex + 1] = cursor + degree;                      cursor += degree;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))                  {                      reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (prevVertex != -1 && prevVertex > vertex)                          throw new Exception("Loaded DenseIntKeyIndex from improper file format; vertices not in order");                        this.Offsets[vertex] = cursor;                        if (bytes.Length < 4 * degree)                      {                          bytes = new byte[4 * degree];                          ints = new int[degree];                      }                        reader.Read(bytes' 0' 4 * degree);                      Buffer.BlockCopy(bytes' 0' this.Values' cursor' 4 * degree);                        this.Offsets[vertex + 1] = cursor + degree;                      cursor += degree;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))                  {                      reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (prevVertex != -1 && prevVertex > vertex)                          throw new Exception("Loaded DenseIntKeyIndex from improper file format; vertices not in order");                        this.Offsets[vertex] = cursor;                        if (bytes.Length < 4 * degree)                      {                          bytes = new byte[4 * degree];                          ints = new int[degree];                      }                        reader.Read(bytes' 0' 4 * degree);                      Buffer.BlockCopy(bytes' 0' this.Values' cursor' 4 * degree);                        this.Offsets[vertex + 1] = cursor + degree;                      cursor += degree;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Load,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))                  {                      reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (prevVertex != -1 && prevVertex > vertex)                          throw new Exception("Loaded DenseIntKeyIndex from improper file format; vertices not in order");                        this.Offsets[vertex] = cursor;                        if (bytes.Length < 4 * degree)                      {                          bytes = new byte[4 * degree];                          ints = new int[degree];                      }                        reader.Read(bytes' 0' 4 * degree);                      Buffer.BlockCopy(bytes' 0' this.Values' cursor' 4 * degree);                        this.Offsets[vertex + 1] = cursor + degree;                      cursor += degree;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Build,The following statement contains a magic number: this.Offsets = new int[(this.tempList.Max(x => x.First) / this.Parts) + 2];
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Build,The following statement contains a magic number: this.Offsets = new int[(this.tempList.Max(x => x.First) / this.Parts) + 2];
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,AdvanceCursor,The following statement contains a magic number: while (cursor + step < extent && values[cursor + step].CompareTo(otherValue) < 0)                  {                      cursor = cursor + step;                      step *= 2;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,AdvanceCursor,The following statement contains a magic number: step = step / 2;
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,AdvanceCursor,The following statement contains a magic number: while (step > 0)                  {                      if (cursor + step < extent)                      {                          var comparison = values[cursor + step].CompareTo(otherValue);                          if (comparison == 0)                              return cursor + step;                            if (comparison < 0)                              cursor = cursor + step;                      }                        step = step / 2;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,Validate,The following statement contains a magic number: if (this.OffsetCounts.ContainsKey(extensions.First))                  {                      var offsetCount = this.OffsetCounts[extensions.First];                        if (Math.Min(offsetCount.Second' extensions.Second.Length) >= tempArray.Length)                          tempArray = new TValue[Math.Max(Math.Min(offsetCount.Second' extensions.Second.Length) + 1' 2 * tempArray.Length)];                        var counter = IntersectSortedArrays(new ArraySegment<TValue>(this.Values' offsetCount.First' offsetCount.Second)'                                                          new ArraySegment<TValue>(extensions.Second)'                                                          tempArray);                        if (counter > 0)                      {                          var resultArray = new TValue[counter];                            Array.Copy(tempArray' resultArray' counter);                            return extensions.First.PairWith(resultArray);                      }                      else                          return extensions.First.PairWith((TValue[])null);                  }                  else                      return extensions.First.PairWith((TValue[])null);
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,AdvanceCursor,The following statement contains a magic number: while (cursor + step < extent && values.Array[cursor + step].CompareTo(otherValue) <= 0)                  {                      cursor = cursor + step;                      step *= 2;                  }
Magic Number,Algorithm3.Indices,Fragment,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Indices\DenseIntKeyIndex.cs,AdvanceCursor,The following statement contains a magic number: while (step > 0)                  {                      if (cursor + step < extent && values.Array[cursor + step].CompareTo(otherValue) <= 0)                          cursor = cursor + step;                        step = step / 2;                  }
Magic Number,Algorithm3,Program,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: using (var reader = new System.IO.BinaryReader(stream))              {                  while (bytesToRead > 0 && returned < limit)                  {                      var vertex = reader.ReadInt32();                      var degree = reader.ReadInt32();                        for (int i = 0; i < degree; i++)                          yield return vertex.PairWith(reader.ReadInt32());                        bytesToRead -= 4 * (1 + 1 + degree);                        returned += degree;                        if (returned > threshold + 1000000)                      {                          Console.WriteLine("{1}\tRead {0}"' returned' System.DateTime.Now);                          threshold += 1000000;                      }                  }              }
Magic Number,Algorithm3,Program,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: using (var reader = new System.IO.BinaryReader(stream))              {                  while (bytesToRead > 0 && returned < limit)                  {                      var vertex = reader.ReadInt32();                      var degree = reader.ReadInt32();                        for (int i = 0; i < degree; i++)                          yield return vertex.PairWith(reader.ReadInt32());                        bytesToRead -= 4 * (1 + 1 + degree);                        returned += degree;                        if (returned > threshold + 1000000)                      {                          Console.WriteLine("{1}\tRead {0}"' returned' System.DateTime.Now);                          threshold += 1000000;                      }                  }              }
Magic Number,Algorithm3,Program,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: using (var reader = new System.IO.BinaryReader(stream))              {                  while (bytesToRead > 0 && returned < limit)                  {                      var vertex = reader.ReadInt32();                      var degree = reader.ReadInt32();                        for (int i = 0; i < degree; i++)                          yield return vertex.PairWith(reader.ReadInt32());                        bytesToRead -= 4 * (1 + 1 + degree);                        returned += degree;                        if (returned > threshold + 1000000)                      {                          Console.WriteLine("{1}\tRead {0}"' returned' System.DateTime.Now);                          threshold += 1000000;                      }                  }              }
Magic Number,Algorithm3,Program,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,Main,The following statement contains a magic number: using (var controller = NewController.FromArgs(ref args))              {                  Console.WriteLine("{0}\tController constructed"' stopwatch.Elapsed);                    InterGraphDataSink<Pair<int' int>> graph;                    var useAzure = false;                  if (useAzure)                  {                      var container = args[0];                      var prefix = args[1];                        #if false                                    graph = controller.NewAzureInterGraphStream(container' prefix' stream => stream.Select(x => x.ParseString()));                      #else                            #if true                            graph = controller.NewNaiadAzureInterGraphStream<Pair<Int32' Int32>>(container' prefix);    #else                      using (var computation = controller.NewComputation())                      {                          //controller.SetConsoleOut(computation.DefaultBlobContainer("naiad-output")' "output-{0}.txt");                          //controller.SetConsoleError(computation.DefaultBlobContainer("naiad-output")' "error-{0}.txt");                            var graphContainer = computation.DefaultBlobContainer(container);                            var data = computation.ReadFromAzureBlobs(graphContainer' prefix' stream => ReadEdges(stream' Int32.MaxValue))                                                //.Where(x => x.First != x.Second)                                                //.Select(x => x.First < x.Second ? x : x.Second.PairWith(x.First))                                                //.Distinct()                                                .WriteBinaryToAzureBlobs(graphContainer' "twitter-oriented/part-{0:000}-{1:000}.bin");                            computation.Activate();                          computation.Join();                      }                        controller.Join();                        return;  #endif  #endif                  }                  else                  {                      var format = args[0];                      var parts = Int32.Parse(args[1]);                        graph = controller.NewInterGraphStream(Enumerable.Range(0' parts)' stream => stream.Distinct()                                                                                                         .SelectMany(x => string.Format(format' x).ReadEdges()));                  }                    Console.WriteLine("{0} Graph data loaded."' stopwatch.Elapsed);                    // normalize the graph to remove self-loops' point from smaller id to larger' and remove duplicates.  #if true                            graph = controller.NewInterGraphStream(graph' edges => edges.Where(x => x.First != x.Second)                                                                              .Select(x => x.First < x.Second ? x : x.Second.PairWith(x.First))                                                                            //.GroupBy(x => true' (k' l) => l.RandomlyRename())                                                                              .Distinct());  #endif                    // symmetrize the graph' just because...                  // graph = controller.NewInterGraphStream(graph' edges => edges.Select(x => x.Second.PairWith(x.First)).Concat(edges));                    Console.WriteLine("{0} Graph data normalized"' stopwatch.Elapsed);                    // re-orient graph edges from lower undirected degree to larger undirected degree.                  // graph = controller.NewInterGraphStream(graph' edges => edges.GroupBy(x => true' (k'l) => l.RenameByDegree()));                  // graph = controller.NewInterGraphStream(graph' edges => edges.OrientFromLowToHighDegree());                    Console.WriteLine("{0} Graph data oriented from low to high degree"' stopwatch.Elapsed);                    // we build two indices' one keyed on "no" attributes and one keyed on the first.                  var emptyKeyIndex = graph.ToEmptyIndex(controller' x => x.First);                  var denseKeyIndex = graph.ToDenseKeyIndex(controller' x => x.First' x => x.Second);                    graph.Seal();   // perhaps release the memory associated with graph. probably better to make it disposable.                    Console.WriteLine("{0} Relation prefix indices built"' stopwatch.Elapsed);                  Console.WriteLine("{0} Starting query construction"' stopwatch.Elapsed);                    using (var computation = controller.NewComputation())                  {                      // we seed the computation with a single "true" record.                      var queryseed = new BatchedDataSource<bool>();                        var triangles = computation.NewInput(queryseed).Distinct()                                                 .Triangles(emptyKeyIndex' denseKeyIndex);                        // optional things to comment/uncomment' based on what sort of output we would like to see.                      // triangles.Where(x => false).Subscribe();                      // triangles.Expand().Where(x => { Console.WriteLine("{0} Triangle observed: {1}"' stopwatch.Elapsed' x); return true; });                      triangles.Select(x => x.Second.Length).Aggregate(x => true' y => y' (x' y) => x + y' (k' sum) => sum' true).Subscribe(x => { foreach (var y in x) Console.WriteLine("Triangles: {0}"' y); });                        queryseed.OnNext();                        computation.Activate();                      computation.Sync(0);                        Console.WriteLine("{0} Synchronized"' stopwatch.Elapsed);                      System.Threading.Thread.Sleep(1000);                      Console.WriteLine("{0} Starting query execution"' stopwatch.Elapsed);                        queryseed.OnCompleted(true);                        computation.Join();                  }                    controller.Join();              }
Magic Number,Algorithm3,ExtensionMethods,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: var bytes = new byte[8];
Magic Number,Algorithm3,ExtensionMethods,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: var ints = new int[2];
Magic Number,Algorithm3,ExtensionMethods,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))              {                  var bytesToRead = reader.Length;                    while (bytesToRead > 0)                  {                      // read vertex name and degree                      bytesToRead -= reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (ints.Length < degree)                      {                          ints = new int[Math.Max(degree' ints.Length * 2)];                          bytes = new byte[4 * ints.Length];                      }                        // read names of neighbors                      bytesToRead -= reader.Read(bytes' 0' 4 * degree);                      Buffer.BlockCopy(bytes' 0' ints' 0' 4 * degree);                        for (int i = 0; i < degree; i++)                          yield return vertex.PairWith(ints[i]);                  }              }
Magic Number,Algorithm3,ExtensionMethods,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))              {                  var bytesToRead = reader.Length;                    while (bytesToRead > 0)                  {                      // read vertex name and degree                      bytesToRead -= reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (ints.Length < degree)                      {                          ints = new int[Math.Max(degree' ints.Length * 2)];                          bytes = new byte[4 * ints.Length];                      }                        // read names of neighbors                      bytesToRead -= reader.Read(bytes' 0' 4 * degree);                      Buffer.BlockCopy(bytes' 0' ints' 0' 4 * degree);                        for (int i = 0; i < degree; i++)                          yield return vertex.PairWith(ints[i]);                  }              }
Magic Number,Algorithm3,ExtensionMethods,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))              {                  var bytesToRead = reader.Length;                    while (bytesToRead > 0)                  {                      // read vertex name and degree                      bytesToRead -= reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (ints.Length < degree)                      {                          ints = new int[Math.Max(degree' ints.Length * 2)];                          bytes = new byte[4 * ints.Length];                      }                        // read names of neighbors                      bytesToRead -= reader.Read(bytes' 0' 4 * degree);                      Buffer.BlockCopy(bytes' 0' ints' 0' 4 * degree);                        for (int i = 0; i < degree; i++)                          yield return vertex.PairWith(ints[i]);                  }              }
Magic Number,Algorithm3,ExtensionMethods,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))              {                  var bytesToRead = reader.Length;                    while (bytesToRead > 0)                  {                      // read vertex name and degree                      bytesToRead -= reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (ints.Length < degree)                      {                          ints = new int[Math.Max(degree' ints.Length * 2)];                          bytes = new byte[4 * ints.Length];                      }                        // read names of neighbors                      bytesToRead -= reader.Read(bytes' 0' 4 * degree);                      Buffer.BlockCopy(bytes' 0' ints' 0' 4 * degree);                        for (int i = 0; i < degree; i++)                          yield return vertex.PairWith(ints[i]);                  }              }
Magic Number,Algorithm3,ExtensionMethods,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))              {                  var bytesToRead = reader.Length;                    while (bytesToRead > 0)                  {                      // read vertex name and degree                      bytesToRead -= reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (ints.Length < degree)                      {                          ints = new int[Math.Max(degree' ints.Length * 2)];                          bytes = new byte[4 * ints.Length];                      }                        // read names of neighbors                      bytesToRead -= reader.Read(bytes' 0' 4 * degree);                      Buffer.BlockCopy(bytes' 0' ints' 0' 4 * degree);                        for (int i = 0; i < degree; i++)                          yield return vertex.PairWith(ints[i]);                  }              }
Magic Number,Algorithm3,ExtensionMethods,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,ReadEdges,The following statement contains a magic number: using (var reader = System.IO.File.OpenRead(filename))              {                  var bytesToRead = reader.Length;                    while (bytesToRead > 0)                  {                      // read vertex name and degree                      bytesToRead -= reader.Read(bytes' 0' 8);                      Buffer.BlockCopy(bytes' 0' ints' 0' 8);                        var vertex = ints[0];                      var degree = ints[1];                        if (ints.Length < degree)                      {                          ints = new int[Math.Max(degree' ints.Length * 2)];                          bytes = new byte[4 * ints.Length];                      }                        // read names of neighbors                      bytesToRead -= reader.Read(bytes' 0' 4 * degree);                      Buffer.BlockCopy(bytes' 0' ints' 0' 4 * degree);                        for (int i = 0; i < degree; i++)                          yield return vertex.PairWith(ints[i]);                  }              }
Magic Number,Algorithm3,ExtensionMethods,C:\repos\MicrosoftResearch_NaiadSamples\Join\Algorithm3\Program.cs,RenameTwitterByDegree,The following statement contains a magic number: var nodes = 65000000;
