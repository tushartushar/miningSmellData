Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Castle.Facilities.NHibernate,NHibernateFacility,D:\research\architectureSmells\repos\haf_Castle.Facilities.NHibernate\src\Castle.Facilities.NHibernate\NHibernateFacility.cs,Init,Cyclomatic complexity of the method is 10
Complex Method,Castle.Facilities.NHibernate,NHibernateFacility,D:\research\architectureSmells\repos\haf_Castle.Facilities.NHibernate\src\Castle.Facilities.NHibernate\NHibernateFacility.cs,GetLifeStyle,Cyclomatic complexity of the method is 13
Magic Number,Castle.Facilities.NHibernate,NHibernateFacility,D:\research\architectureSmells\repos\haf_Castle.Facilities.NHibernate\src\Castle.Facilities.NHibernate\NHibernateFacility.cs,Init,The following statement contains a magic number: var installed = installers  				.Select(x =>  				{  					Configuration configuration = x.Deserialize();    					if (configuration == null)  					{                          configuration = x.Config;  						x.Serialize(configuration);  					}    					x.AfterDeserialize(configuration);    					return new  					{  						Config = configuration'  						Instance = x  					};    				})  				.Select(x => new Data { Config = x.Config' Instance = x.Instance' Factory = x.Config.BuildSessionFactory() })  				.OrderByDescending(x => x.Instance.IsDefault)  				.Do(x =>  				{  					if (!added.Add(x.Instance.SessionFactoryKey))  						throw new FacilityException(  							string.Format(  								"Duplicate session factory keys '{0}' added. Verify that your INHibernateInstaller instances are not named the same."'  								x.Instance.SessionFactoryKey));  				})  				.Do(x => Kernel.Register(  					Component.For<Configuration>()  						.Instance(x.Config)  						.LifeStyle.Singleton  						.Named(x.Instance.SessionFactoryKey + "-cfg")'  					Component.For<ISessionFactory>()  						.Instance(x.Factory)  						.LifeStyle.Singleton  						.Named(x.Instance.SessionFactoryKey)'  					RegisterSession(x' 0)'  					RegisterSession(x' 1)'  					RegisterSession(x' 2)'  					RegisterStatelessSession(x' 0)'  					RegisterStatelessSession(x' 1)'  					RegisterStatelessSession(x' 2)'  					Component.For<ISessionManager>().Instance(new SessionManager(() =>  					{  						var factory = Kernel.Resolve<ISessionFactory>(x.Instance.SessionFactoryKey);  						var s = x.Instance.Interceptor.Do(y => factory.OpenSession(y)).OrDefault(factory.OpenSession());  						s.FlushMode = flushMode;  						return s;  					}' Kernel.Resolve<ITransactionManager>()))  						.Named(x.Instance.SessionFactoryKey + SessionManagerSuffix)  						.LifeStyle.Singleton))  				.ToList();
Magic Number,Castle.Facilities.NHibernate,NHibernateFacility,D:\research\architectureSmells\repos\haf_Castle.Facilities.NHibernate\src\Castle.Facilities.NHibernate\NHibernateFacility.cs,Init,The following statement contains a magic number: var installed = installers  				.Select(x =>  				{  					Configuration configuration = x.Deserialize();    					if (configuration == null)  					{                          configuration = x.Config;  						x.Serialize(configuration);  					}    					x.AfterDeserialize(configuration);    					return new  					{  						Config = configuration'  						Instance = x  					};    				})  				.Select(x => new Data { Config = x.Config' Instance = x.Instance' Factory = x.Config.BuildSessionFactory() })  				.OrderByDescending(x => x.Instance.IsDefault)  				.Do(x =>  				{  					if (!added.Add(x.Instance.SessionFactoryKey))  						throw new FacilityException(  							string.Format(  								"Duplicate session factory keys '{0}' added. Verify that your INHibernateInstaller instances are not named the same."'  								x.Instance.SessionFactoryKey));  				})  				.Do(x => Kernel.Register(  					Component.For<Configuration>()  						.Instance(x.Config)  						.LifeStyle.Singleton  						.Named(x.Instance.SessionFactoryKey + "-cfg")'  					Component.For<ISessionFactory>()  						.Instance(x.Factory)  						.LifeStyle.Singleton  						.Named(x.Instance.SessionFactoryKey)'  					RegisterSession(x' 0)'  					RegisterSession(x' 1)'  					RegisterSession(x' 2)'  					RegisterStatelessSession(x' 0)'  					RegisterStatelessSession(x' 1)'  					RegisterStatelessSession(x' 2)'  					Component.For<ISessionManager>().Instance(new SessionManager(() =>  					{  						var factory = Kernel.Resolve<ISessionFactory>(x.Instance.SessionFactoryKey);  						var s = x.Instance.Interceptor.Do(y => factory.OpenSession(y)).OrDefault(factory.OpenSession());  						s.FlushMode = flushMode;  						return s;  					}' Kernel.Resolve<ITransactionManager>()))  						.Named(x.Instance.SessionFactoryKey + SessionManagerSuffix)  						.LifeStyle.Singleton))  				.ToList();
Magic Number,Castle.Facilities.NHibernate,NHibernateFacility,D:\research\architectureSmells\repos\haf_Castle.Facilities.NHibernate\src\Castle.Facilities.NHibernate\NHibernateFacility.cs,RegisterStatelessSession,The following statement contains a magic number: Contract.Requires(index < 3'  							  "there are only three supported lifestyles; per transaction' per web request and transient");
Magic Number,Castle.Facilities.NHibernate,NHibernateFacility,D:\research\architectureSmells\repos\haf_Castle.Facilities.NHibernate\src\Castle.Facilities.NHibernate\NHibernateFacility.cs,RegisterSession,The following statement contains a magic number: Contract.Requires(index < 3'  							  "there are only three supported lifestyles; per transaction' per web request and transient");
Magic Number,Castle.Facilities.NHibernate,NHibernateFacility,D:\research\architectureSmells\repos\haf_Castle.Facilities.NHibernate\src\Castle.Facilities.NHibernate\NHibernateFacility.cs,GetLifeStyle,The following statement contains a magic number: Contract.Requires(index < 3'  							  "there are only three supported lifestyles; per transaction' per web request and transient");
Magic Number,Castle.Facilities.NHibernate,NHibernateFacility,D:\research\architectureSmells\repos\haf_Castle.Facilities.NHibernate\src\Castle.Facilities.NHibernate\NHibernateFacility.cs,GetLifeStyle,The following statement contains a magic number: switch (defaultLifeStyle)  			{  				case DefaultSessionLifeStyleOption.SessionPerTransaction:  					if (index == 0)  						return registration.Named(baseName + SessionPerTxSuffix).LifeStyle.PerTopTransaction();  					if (index == 1)  						return registration.Named(baseName + SessionPWRSuffix).LifeStyle.PerWebRequest;  					if (index == 2)  						return registration.Named(baseName + SessionTransientSuffix).LifeStyle.Transient;  					break;  				case DefaultSessionLifeStyleOption.SessionPerWebRequest:  					if (index == 0)  						return registration.Named(baseName + SessionPWRSuffix).LifeStyle.PerWebRequest;  					if (index == 1)  						return registration.Named(baseName + SessionPerTxSuffix).LifeStyle.PerTopTransaction();  					if (index == 2)  						return registration.Named(baseName + SessionTransientSuffix).LifeStyle.Transient;  					break;  				case DefaultSessionLifeStyleOption.SessionTransient:  					if (index == 0)  						return registration.Named(baseName + SessionTransientSuffix).LifeStyle.Transient;  					if (index == 1)  						return registration.Named(baseName + SessionPerTxSuffix).LifeStyle.PerTopTransaction();  					if (index == 2)  						return registration.Named(baseName + SessionPWRSuffix).LifeStyle.PerWebRequest;  					break;  				default:  					throw new FacilityException("Unknown default life style - please file a bug report");  			}
Magic Number,Castle.Facilities.NHibernate,NHibernateFacility,D:\research\architectureSmells\repos\haf_Castle.Facilities.NHibernate\src\Castle.Facilities.NHibernate\NHibernateFacility.cs,GetLifeStyle,The following statement contains a magic number: switch (defaultLifeStyle)  			{  				case DefaultSessionLifeStyleOption.SessionPerTransaction:  					if (index == 0)  						return registration.Named(baseName + SessionPerTxSuffix).LifeStyle.PerTopTransaction();  					if (index == 1)  						return registration.Named(baseName + SessionPWRSuffix).LifeStyle.PerWebRequest;  					if (index == 2)  						return registration.Named(baseName + SessionTransientSuffix).LifeStyle.Transient;  					break;  				case DefaultSessionLifeStyleOption.SessionPerWebRequest:  					if (index == 0)  						return registration.Named(baseName + SessionPWRSuffix).LifeStyle.PerWebRequest;  					if (index == 1)  						return registration.Named(baseName + SessionPerTxSuffix).LifeStyle.PerTopTransaction();  					if (index == 2)  						return registration.Named(baseName + SessionTransientSuffix).LifeStyle.Transient;  					break;  				case DefaultSessionLifeStyleOption.SessionTransient:  					if (index == 0)  						return registration.Named(baseName + SessionTransientSuffix).LifeStyle.Transient;  					if (index == 1)  						return registration.Named(baseName + SessionPerTxSuffix).LifeStyle.PerTopTransaction();  					if (index == 2)  						return registration.Named(baseName + SessionPWRSuffix).LifeStyle.PerWebRequest;  					break;  				default:  					throw new FacilityException("Unknown default life style - please file a bug report");  			}
Magic Number,Castle.Facilities.NHibernate,NHibernateFacility,D:\research\architectureSmells\repos\haf_Castle.Facilities.NHibernate\src\Castle.Facilities.NHibernate\NHibernateFacility.cs,GetLifeStyle,The following statement contains a magic number: switch (defaultLifeStyle)  			{  				case DefaultSessionLifeStyleOption.SessionPerTransaction:  					if (index == 0)  						return registration.Named(baseName + SessionPerTxSuffix).LifeStyle.PerTopTransaction();  					if (index == 1)  						return registration.Named(baseName + SessionPWRSuffix).LifeStyle.PerWebRequest;  					if (index == 2)  						return registration.Named(baseName + SessionTransientSuffix).LifeStyle.Transient;  					break;  				case DefaultSessionLifeStyleOption.SessionPerWebRequest:  					if (index == 0)  						return registration.Named(baseName + SessionPWRSuffix).LifeStyle.PerWebRequest;  					if (index == 1)  						return registration.Named(baseName + SessionPerTxSuffix).LifeStyle.PerTopTransaction();  					if (index == 2)  						return registration.Named(baseName + SessionTransientSuffix).LifeStyle.Transient;  					break;  				case DefaultSessionLifeStyleOption.SessionTransient:  					if (index == 0)  						return registration.Named(baseName + SessionTransientSuffix).LifeStyle.Transient;  					if (index == 1)  						return registration.Named(baseName + SessionPerTxSuffix).LifeStyle.PerTopTransaction();  					if (index == 2)  						return registration.Named(baseName + SessionPWRSuffix).LifeStyle.PerWebRequest;  					break;  				default:  					throw new FacilityException("Unknown default life style - please file a bug report");  			}
