Implementation smell,Namespace,Class,File,Method,Description
Complex Method,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,Cyclomatic complexity of the method is 9
Magic Number,UltraSFV.HashFunctions,Crc32,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\CRC32.cs,GetFileCRC32,The following statement contains a magic number: using (FileStream fs = new FileStream (path' FileMode.Open' FileAccess.Read)) {  	byte[] buffer = new byte[4096];  	int bytesRead = 0;  	long size = fs.Length;  	long totalBytesRead = 0;  	int ticks = 0;  	while ((bytesRead = fs.Read (buffer' 0' buffer.Length)) != 0) {  		ticks++;  		totalBytesRead += bytesRead;  		byteCount += bytesRead;  		crc32.Update (buffer' 0' bytesRead);  		if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  		 {  			bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  			ticks = 0;  		}  	}  }  
Magic Number,UltraSFV.HashFunctions,Crc32,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\CRC32.cs,GetFileCRC32,The following statement contains a magic number: using (FileStream fs = new FileStream (path' FileMode.Open' FileAccess.Read)) {  	byte[] buffer = new byte[4096];  	int bytesRead = 0;  	long size = fs.Length;  	long totalBytesRead = 0;  	int ticks = 0;  	while ((bytesRead = fs.Read (buffer' 0' buffer.Length)) != 0) {  		ticks++;  		totalBytesRead += bytesRead;  		byteCount += bytesRead;  		crc32.Update (buffer' 0' bytesRead);  		if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  		 {  			bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  			ticks = 0;  		}  	}  }  
Magic Number,UltraSFV.HashFunctions,Crc32,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\CRC32.cs,GetFileCRC32,The following statement contains a magic number: using (FileStream fs = new FileStream (path' FileMode.Open' FileAccess.Read)) {  	byte[] buffer = new byte[4096];  	int bytesRead = 0;  	long size = fs.Length;  	long totalBytesRead = 0;  	int ticks = 0;  	while ((bytesRead = fs.Read (buffer' 0' buffer.Length)) != 0) {  		ticks++;  		totalBytesRead += bytesRead;  		byteCount += bytesRead;  		crc32.Update (buffer' 0' bytesRead);  		if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  		 {  			bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  			ticks = 0;  		}  	}  }  
Magic Number,UltraSFV.HashFunctions,Crc32,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\CRC32.cs,GetFileCRC32,The following statement contains a magic number: while ((bytesRead = fs.Read (buffer' 0' buffer.Length)) != 0) {  	ticks++;  	totalBytesRead += bytesRead;  	byteCount += bytesRead;  	crc32.Update (buffer' 0' bytesRead);  	if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  	 {  		bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  		ticks = 0;  	}  }  
Magic Number,UltraSFV.HashFunctions,Crc32,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\CRC32.cs,GetFileCRC32,The following statement contains a magic number: while ((bytesRead = fs.Read (buffer' 0' buffer.Length)) != 0) {  	ticks++;  	totalBytesRead += bytesRead;  	byteCount += bytesRead;  	crc32.Update (buffer' 0' bytesRead);  	if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  	 {  		bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  		ticks = 0;  	}  }  
Magic Number,UltraSFV.HashFunctions,Crc32,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\CRC32.cs,GetFileCRC32,The following statement contains a magic number: if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU   {  	bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  	ticks = 0;  }  
Magic Number,UltraSFV.HashFunctions,Crc32,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\CRC32.cs,GetFileCRC32,The following statement contains a magic number: if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU   {  	bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  	ticks = 0;  }  
Magic Number,UltraSFV.HashFunctions,Crc32,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\CRC32.cs,GetFileCRC32,The following statement contains a magic number: bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  
Magic Number,UltraSFV.HashFunctions,Crc32,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\CRC32.cs,Update,The following statement contains a magic number: crc = CrcTable [(crc ^ bval) & 0xFF] ^ (crc >> 8);  
Magic Number,UltraSFV.HashFunctions,Crc32,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\CRC32.cs,Update,The following statement contains a magic number: while (--len >= 0) {  	crc = CrcTable [(crc ^ buf [off++]) & 0xFF] ^ (crc >> 8);  }  
Magic Number,UltraSFV.HashFunctions,Crc32,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\CRC32.cs,Update,The following statement contains a magic number: crc = CrcTable [(crc ^ buf [off++]) & 0xFF] ^ (crc >> 8);  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: using (Stream stream = File.OpenRead (filePath)) {  	using (HashAlgorithm hashAlgorithm = MD5.Create ()) {  		byte[] oldBuffer;  		int oldBytesRead;  		long size = stream.Length;  		byte[] buffer = new byte[4096];  		int bytesRead = stream.Read (buffer' 0' buffer.Length);  		long totalBytesRead = bytesRead;  		byteCount += bytesRead;  		int ticks = 0;  		do {  			oldBytesRead = bytesRead;  			oldBuffer = buffer;  			buffer = new byte[4096];  			bytesRead = stream.Read (buffer' 0' buffer.Length);  			ticks++;  			totalBytesRead += bytesRead;  			byteCount += bytesRead;  			if (bytesRead == 0) {  				hashAlgorithm.TransformFinalBlock (oldBuffer' 0' oldBytesRead);  			}  			else {  				hashAlgorithm.TransformBlock (oldBuffer' 0' oldBytesRead' oldBuffer' 0);  			}  			if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  			 {  				bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  				ticks = 0;  			}  		}  		while (bytesRead != 0);  		FileHash = hashAlgorithm.Hash;  	}  }  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: using (Stream stream = File.OpenRead (filePath)) {  	using (HashAlgorithm hashAlgorithm = MD5.Create ()) {  		byte[] oldBuffer;  		int oldBytesRead;  		long size = stream.Length;  		byte[] buffer = new byte[4096];  		int bytesRead = stream.Read (buffer' 0' buffer.Length);  		long totalBytesRead = bytesRead;  		byteCount += bytesRead;  		int ticks = 0;  		do {  			oldBytesRead = bytesRead;  			oldBuffer = buffer;  			buffer = new byte[4096];  			bytesRead = stream.Read (buffer' 0' buffer.Length);  			ticks++;  			totalBytesRead += bytesRead;  			byteCount += bytesRead;  			if (bytesRead == 0) {  				hashAlgorithm.TransformFinalBlock (oldBuffer' 0' oldBytesRead);  			}  			else {  				hashAlgorithm.TransformBlock (oldBuffer' 0' oldBytesRead' oldBuffer' 0);  			}  			if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  			 {  				bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  				ticks = 0;  			}  		}  		while (bytesRead != 0);  		FileHash = hashAlgorithm.Hash;  	}  }  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: using (Stream stream = File.OpenRead (filePath)) {  	using (HashAlgorithm hashAlgorithm = MD5.Create ()) {  		byte[] oldBuffer;  		int oldBytesRead;  		long size = stream.Length;  		byte[] buffer = new byte[4096];  		int bytesRead = stream.Read (buffer' 0' buffer.Length);  		long totalBytesRead = bytesRead;  		byteCount += bytesRead;  		int ticks = 0;  		do {  			oldBytesRead = bytesRead;  			oldBuffer = buffer;  			buffer = new byte[4096];  			bytesRead = stream.Read (buffer' 0' buffer.Length);  			ticks++;  			totalBytesRead += bytesRead;  			byteCount += bytesRead;  			if (bytesRead == 0) {  				hashAlgorithm.TransformFinalBlock (oldBuffer' 0' oldBytesRead);  			}  			else {  				hashAlgorithm.TransformBlock (oldBuffer' 0' oldBytesRead' oldBuffer' 0);  			}  			if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  			 {  				bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  				ticks = 0;  			}  		}  		while (bytesRead != 0);  		FileHash = hashAlgorithm.Hash;  	}  }  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: using (Stream stream = File.OpenRead (filePath)) {  	using (HashAlgorithm hashAlgorithm = MD5.Create ()) {  		byte[] oldBuffer;  		int oldBytesRead;  		long size = stream.Length;  		byte[] buffer = new byte[4096];  		int bytesRead = stream.Read (buffer' 0' buffer.Length);  		long totalBytesRead = bytesRead;  		byteCount += bytesRead;  		int ticks = 0;  		do {  			oldBytesRead = bytesRead;  			oldBuffer = buffer;  			buffer = new byte[4096];  			bytesRead = stream.Read (buffer' 0' buffer.Length);  			ticks++;  			totalBytesRead += bytesRead;  			byteCount += bytesRead;  			if (bytesRead == 0) {  				hashAlgorithm.TransformFinalBlock (oldBuffer' 0' oldBytesRead);  			}  			else {  				hashAlgorithm.TransformBlock (oldBuffer' 0' oldBytesRead' oldBuffer' 0);  			}  			if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  			 {  				bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  				ticks = 0;  			}  		}  		while (bytesRead != 0);  		FileHash = hashAlgorithm.Hash;  	}  }  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: using (HashAlgorithm hashAlgorithm = MD5.Create ()) {  	byte[] oldBuffer;  	int oldBytesRead;  	long size = stream.Length;  	byte[] buffer = new byte[4096];  	int bytesRead = stream.Read (buffer' 0' buffer.Length);  	long totalBytesRead = bytesRead;  	byteCount += bytesRead;  	int ticks = 0;  	do {  		oldBytesRead = bytesRead;  		oldBuffer = buffer;  		buffer = new byte[4096];  		bytesRead = stream.Read (buffer' 0' buffer.Length);  		ticks++;  		totalBytesRead += bytesRead;  		byteCount += bytesRead;  		if (bytesRead == 0) {  			hashAlgorithm.TransformFinalBlock (oldBuffer' 0' oldBytesRead);  		}  		else {  			hashAlgorithm.TransformBlock (oldBuffer' 0' oldBytesRead' oldBuffer' 0);  		}  		if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  		 {  			bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  			ticks = 0;  		}  	}  	while (bytesRead != 0);  	FileHash = hashAlgorithm.Hash;  }  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: using (HashAlgorithm hashAlgorithm = MD5.Create ()) {  	byte[] oldBuffer;  	int oldBytesRead;  	long size = stream.Length;  	byte[] buffer = new byte[4096];  	int bytesRead = stream.Read (buffer' 0' buffer.Length);  	long totalBytesRead = bytesRead;  	byteCount += bytesRead;  	int ticks = 0;  	do {  		oldBytesRead = bytesRead;  		oldBuffer = buffer;  		buffer = new byte[4096];  		bytesRead = stream.Read (buffer' 0' buffer.Length);  		ticks++;  		totalBytesRead += bytesRead;  		byteCount += bytesRead;  		if (bytesRead == 0) {  			hashAlgorithm.TransformFinalBlock (oldBuffer' 0' oldBytesRead);  		}  		else {  			hashAlgorithm.TransformBlock (oldBuffer' 0' oldBytesRead' oldBuffer' 0);  		}  		if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  		 {  			bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  			ticks = 0;  		}  	}  	while (bytesRead != 0);  	FileHash = hashAlgorithm.Hash;  }  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: using (HashAlgorithm hashAlgorithm = MD5.Create ()) {  	byte[] oldBuffer;  	int oldBytesRead;  	long size = stream.Length;  	byte[] buffer = new byte[4096];  	int bytesRead = stream.Read (buffer' 0' buffer.Length);  	long totalBytesRead = bytesRead;  	byteCount += bytesRead;  	int ticks = 0;  	do {  		oldBytesRead = bytesRead;  		oldBuffer = buffer;  		buffer = new byte[4096];  		bytesRead = stream.Read (buffer' 0' buffer.Length);  		ticks++;  		totalBytesRead += bytesRead;  		byteCount += bytesRead;  		if (bytesRead == 0) {  			hashAlgorithm.TransformFinalBlock (oldBuffer' 0' oldBytesRead);  		}  		else {  			hashAlgorithm.TransformBlock (oldBuffer' 0' oldBytesRead' oldBuffer' 0);  		}  		if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  		 {  			bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  			ticks = 0;  		}  	}  	while (bytesRead != 0);  	FileHash = hashAlgorithm.Hash;  }  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: using (HashAlgorithm hashAlgorithm = MD5.Create ()) {  	byte[] oldBuffer;  	int oldBytesRead;  	long size = stream.Length;  	byte[] buffer = new byte[4096];  	int bytesRead = stream.Read (buffer' 0' buffer.Length);  	long totalBytesRead = bytesRead;  	byteCount += bytesRead;  	int ticks = 0;  	do {  		oldBytesRead = bytesRead;  		oldBuffer = buffer;  		buffer = new byte[4096];  		bytesRead = stream.Read (buffer' 0' buffer.Length);  		ticks++;  		totalBytesRead += bytesRead;  		byteCount += bytesRead;  		if (bytesRead == 0) {  			hashAlgorithm.TransformFinalBlock (oldBuffer' 0' oldBytesRead);  		}  		else {  			hashAlgorithm.TransformBlock (oldBuffer' 0' oldBytesRead' oldBuffer' 0);  		}  		if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  		 {  			bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  			ticks = 0;  		}  	}  	while (bytesRead != 0);  	FileHash = hashAlgorithm.Hash;  }  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: do {  	oldBytesRead = bytesRead;  	oldBuffer = buffer;  	buffer = new byte[4096];  	bytesRead = stream.Read (buffer' 0' buffer.Length);  	ticks++;  	totalBytesRead += bytesRead;  	byteCount += bytesRead;  	if (bytesRead == 0) {  		hashAlgorithm.TransformFinalBlock (oldBuffer' 0' oldBytesRead);  	}  	else {  		hashAlgorithm.TransformBlock (oldBuffer' 0' oldBytesRead' oldBuffer' 0);  	}  	if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  	 {  		bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  		ticks = 0;  	}  }  while (bytesRead != 0);  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: do {  	oldBytesRead = bytesRead;  	oldBuffer = buffer;  	buffer = new byte[4096];  	bytesRead = stream.Read (buffer' 0' buffer.Length);  	ticks++;  	totalBytesRead += bytesRead;  	byteCount += bytesRead;  	if (bytesRead == 0) {  		hashAlgorithm.TransformFinalBlock (oldBuffer' 0' oldBytesRead);  	}  	else {  		hashAlgorithm.TransformBlock (oldBuffer' 0' oldBytesRead' oldBuffer' 0);  	}  	if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  	 {  		bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  		ticks = 0;  	}  }  while (bytesRead != 0);  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: do {  	oldBytesRead = bytesRead;  	oldBuffer = buffer;  	buffer = new byte[4096];  	bytesRead = stream.Read (buffer' 0' buffer.Length);  	ticks++;  	totalBytesRead += bytesRead;  	byteCount += bytesRead;  	if (bytesRead == 0) {  		hashAlgorithm.TransformFinalBlock (oldBuffer' 0' oldBytesRead);  	}  	else {  		hashAlgorithm.TransformBlock (oldBuffer' 0' oldBytesRead' oldBuffer' 0);  	}  	if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU  	 {  		bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  		ticks = 0;  	}  }  while (bytesRead != 0);  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: buffer = new byte[4096];  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU   {  	bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  	ticks = 0;  }  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: if (bw != null && ticks == 10)// Only report once every 10 loops so we dont hose the CPU   {  	bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  	ticks = 0;  }  
Magic Number,UltraSFV.HashFunctions,Md5,C:\repos\stevenbenner_ultrasfv\UltraSFV.HashFunctions\MD5.cs,GetFileMD5,The following statement contains a magic number: bw.ReportProgress ((int)((double)totalBytesRead * 100 / size));  
