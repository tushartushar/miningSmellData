Implementation smell,Namespace,Class,File,Method,Description
Long Method,automark.Git,UnifiedDiffToMyersDifference,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Git\UnifiedDiffToMyersDifference.cs,DifferenceFromHunk,The method has 143 lines of code.
Long Method,automark,Program,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Program.cs,Main,The method has 165 lines of code.
Long Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_bisect,The method has 109 lines of code.
Long Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_cleanupSemantic,The method has 105 lines of code.
Long Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_cleanupMerge,The method has 125 lines of code.
Complex Method,automark.Generate.Export,AsMarkdown,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Generate\Export\AsMarkdown.cs,Export,Cyclomatic complexity of the method is 17
Complex Method,automark.Git,UnifiedDiffToMyersDifference,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Git\UnifiedDiffToMyersDifference.cs,DifferenceFromHunk,Cyclomatic complexity of the method is 20
Complex Method,automark,Program,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Program.cs,Main,Cyclomatic complexity of the method is 21
Complex Method,DiffMatchPatch,Patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_bisect,Cyclomatic complexity of the method is 20
Complex Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_commonOverlap,Cyclomatic complexity of the method is 8
Complex Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_cleanupSemantic,Cyclomatic complexity of the method is 12
Complex Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_cleanupSemanticLossless,Cyclomatic complexity of the method is 9
Complex Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_cleanupEfficiency,Cyclomatic complexity of the method is 9
Complex Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_cleanupMerge,Cyclomatic complexity of the method is 18
Complex Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_fromDelta,Cyclomatic complexity of the method is 8
Complex Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,match_bitap,Cyclomatic complexity of the method is 13
Complex Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,patch_make,Cyclomatic complexity of the method is 12
Complex Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,patch_apply,Cyclomatic complexity of the method is 15
Complex Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,patch_splitMax,Cyclomatic complexity of the method is 14
Complex Method,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,patch_fromText,Cyclomatic complexity of the method is 13
Long Parameter List,automark.Git,UnifiedDiffToMyersDifference,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Git\UnifiedDiffToMyersDifference.cs,EmitNew,The method has 7 parameters. Parameters: leftStart' leftEnd' rightStart' rightEnd' rightDiffStart' rightDiffEnd' hunk
Long Parameter List,automark.Git,UnifiedDiffToMyersDifference,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Git\UnifiedDiffToMyersDifference.cs,EmitChange,The method has 9 parameters. Parameters: leftStart' leftEnd' rightStart' rightEnd' leftDiffStart' leftDiffEnd' rightDiffStart' rightDiffEnd' hunk
Long Parameter List,automark.Git,UnifiedDiffToMyersDifference,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Git\UnifiedDiffToMyersDifference.cs,EmitRemove,The method has 5 parameters. Parameters: leftStart' leftEnd' rightStart' rightEnd' hunk
Long Parameter List,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_bisectSplit,The method has 5 parameters. Parameters: text1' text2' x' y' deadline
Long Statement,automark.Connections.Browser,FirefoxConnector,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Connections\Browser\FirefoxConnector.cs,FindDbPath,The length of the statement  "                string ffPath = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' @"Mozilla\Firefox\Profiles\"); " is 139.
Long Statement,automark.Generate.Export,AsMarkdown,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Generate\Export\AsMarkdown.cs,Export,The length of the statement  "                w.WriteLine("Please make sure that *autogit* is properly saving changes in your solution directory in the hidden folder `.HistoryData/LocalHistory`"); " is 150.
Long Statement,automark.Generate.Export,AsMarkdown,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Generate\Export\AsMarkdown.cs,Export,The length of the statement  "                    w.WriteLine(string.Format("<div class='section'>{0}<div></div><div class='summary'></div></div>"' EmitTime(commit.CommitTimeStamp))); " is 133.
Long Statement,automark.Generate.Export,AsMarkdown,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Generate\Export\AsMarkdown.cs,Export,The length of the statement  "                                    w.WriteLine(string.Join("'"' innerDiffs.Where(d => d.operation != DiffMatchPatch.Operation.EQUAL).Select(d => d.text))); " is 120.
Long Statement,automark,Program,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Program.cs,CodeWebHistory,The length of the statement  "            string dbPath = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)' @"Google\Chrome\User Data\Default\History"); " is 158.
Long Statement,automark.Util,GitCommands,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\GitCommands.cs,ListSha,The length of the statement  "            var output = RunProcess(string.Format(" --git-dir=\"{0}/.git\" --work-tree=\"{1}\" log --name-only"' path.Replace("\\"' "/")' path.Replace("\\"' "/"))); " is 152.
Long Statement,automark.Util,GitCommands,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\GitCommands.cs,ListShaWithFiles,The length of the statement  "            var output = RunProcess(string.Format(" --git-dir=\"{0}/.git\" --work-tree=\"{1}\" log --name-status"' path.Replace("\\"' "/")' path.Replace("\\"' "/"))); " is 154.
Long Statement,automark.Util,GitCommands,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\GitCommands.cs,ShowDiffRange,The length of the statement  "            var output = RunProcess(string.Format(" --git-dir=\"{0}/.git\" --work-tree=\"{1}\" diff {2} {3} --ignore-all-space"' path.Replace("\\"' "/")' path.Replace("\\"' "/")' shaBefore' shaAfter)); " is 189.
Long Statement,automark.Util,GitCommands,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\GitCommands.cs,ShowSha,The length of the statement  "            var output = RunProcess(string.Format(" --git-dir=\"{0}/.git\" --work-tree=\"{1}\" show {2} --ignore-all-space"' path.Replace("\\"' "/")' path.Replace("\\"' "/")' sha)); " is 169.
Long Statement,automark.Util,GitCommands,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\GitCommands.cs,ShowFileAfterCommit,The length of the statement  "            var output = RunProcess(string.Format(" --git-dir=\"{0}/.git\" --work-tree=\"{1}\" show {2}:\"{3}\""' path.Replace("\\"' "/")' path.Replace("\\"' "/")' sha' file)); " is 164.
Long Statement,automark.Util,GitCommands,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\GitCommands.cs,ShowFileBeforeCommit,The length of the statement  "            var output = RunProcess(string.Format(" --git-dir=\"{0}/.git\" --work-tree=\"{1}\" show {2}~1:\"{3}\""' path.Replace("\\"' "/")' path.Replace("\\"' "/")' sha' file)); " is 166.
Complex Conditional,automark.Generate.Export,AsMarkdown,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Generate\Export\AsMarkdown.cs,Export,The conditional expression  "isFirstCommit || (span != TimeSpan.MaxValue && span.TotalHours > 2) || !IsCommitOnSameDay(commit' previousCommit)"  is complex.
Complex Conditional,automark.Git,ParseGitLog,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Git\ParseGitLog.cs,Parse,The conditional expression  "line.Length > 0 && line[0] == '\t' ||                          (line.Length > 4 && line.Substring(0'4).All( ch => ch == ' ') )"  is complex.
Complex Conditional,automark,Program,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Program.cs,Main,The conditional expression  "accumalatedDifference.TotalMinutes <= 3 &&                           prevCommit.Files.All(f => commit.Files.Select(c => c.File).Contains(f.File)) &&                           prevCommit.Files.Any( f => f.Status != "A" || f.Status != "D" )"  is complex.
Complex Conditional,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_cleanupEfficiency,The conditional expression  "(lastequality.Length != 0)                && ((pre_ins && pre_del && post_ins && post_del)                || ((lastequality.Length < this.Diff_EditCost / 2)                && ((pre_ins ? 1 : 0) + (pre_del ? 1 : 0) + (post_ins ? 1 : 0)                + (post_del ? 1 : 0)) == 3))"  is complex.
Complex Conditional,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,patch_splitMax,The conditional expression  "diff_type == Operation.DELETE && patch.diffs.Count == 1                  && patch.diffs.First().operation == Operation.EQUAL                  && diff_text.Length > 2 * patch_size"  is complex.
Magic Number,automark.Connections.Browser,ChromeHistory,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Connections\Browser\ChromeConnector.cs,RecentStackoverflow,The following statement contains a magic number: var timeEpoch = reader.GetInt64(1) / 1000;
Magic Number,automark.Connections.Browser,ChromeHistory,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Connections\Browser\ChromeConnector.cs,RecentStackoverflow,The following statement contains a magic number: var title = reader.GetString(2);
Magic Number,automark.Connections.Browser,ChromeHistory,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Connections\Browser\ChromeConnector.cs,FromUnixTime,The following statement contains a magic number: var epoch = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,automark.Connections.Browser,ChromeHistory,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Connections\Browser\ChromeConnector.cs,FromGoogleTime,The following statement contains a magic number: var epoch = new DateTime(1601' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,automark.Connections.Browser,FirefoxConnector,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Connections\Browser\FirefoxConnector.cs,RecentStackoverflow,The following statement contains a magic number: var title = reader.GetString(2);
Magic Number,automark.Generate.Export,AsMarkdown,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Generate\Export\AsMarkdown.cs,Export,The following statement contains a magic number: isFirstCommit || (span != TimeSpan.MaxValue && span.TotalHours > 2) || !IsCommitOnSameDay(commit' previousCommit)
Magic Number,automark.Git,GitDiffParser,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Git\GitDiffParser.cs,GetFileName,The following statement contains a magic number: var fileA = fileInfo.FirstOrDefault().Remove(0' 4);
Magic Number,automark.Git,GitDiffParser,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Git\GitDiffParser.cs,GetFileName,The following statement contains a magic number: var fileB = fileInfo.Skip(1).FirstOrDefault().Remove(0' 4);
Magic Number,automark.Git,GitDiffParser,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Git\GitDiffParser.cs,GetFileName,The following statement contains a magic number: return fileA.Remove(0' 2).Trim();
Magic Number,automark.Git,GitDiffParser,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Git\GitDiffParser.cs,GetFileName,The following statement contains a magic number: return fileB.Remove(0' 2).Trim();
Magic Number,automark.Git,ParseGitLog,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Git\ParseGitLog.cs,Parse,The following statement contains a magic number: line.Length > 0 && line[0] == '\t' ||                          (line.Length > 4 && line.Substring(0'4).All( ch => ch == ' ') )
Magic Number,automark.Git,ParseGitLog,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Git\ParseGitLog.cs,Parse,The following statement contains a magic number: line.Length > 0 && line[0] == '\t' ||                          (line.Length > 4 && line.Substring(0'4).All( ch => ch == ' ') )
Magic Number,automark,Program,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Program.cs,Main,The following statement contains a magic number: commit.UnifiedDiff.Length > 500000
Magic Number,automark,Program,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Program.cs,Main,The following statement contains a magic number: accumalatedDifference.TotalMinutes <= 3 &&                           prevCommit.Files.All(f => commit.Files.Select(c => c.File).Contains(f.File)) &&                           prevCommit.Files.Any( f => f.Status != "A" || f.Status != "D" )
Magic Number,automark,Program,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Program.cs,Main,The following statement contains a magic number: Console.WriteLine(string.Format("## {0:dddd' MMMM dd' yyyy}\u00e5"' DateTime.Now.AddDays(-2)));
Magic Number,automark,Program,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Program.cs,GetWebVisits,The following statement contains a magic number: new System.Threading.Thread((db) =>                      {                          System.Threading.Thread.Sleep(1000);                          System.IO.File.Delete((string)db);                      }).Start(tempPath);
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_compute,The following statement contains a magic number: string text2_a = hm[2];
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_compute,The following statement contains a magic number: string text2_b = hm[3];
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_compute,The following statement contains a magic number: string mid_common = hm[4];
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_compute,The following statement contains a magic number: checklines && text1.Length > 100 && text2.Length > 100
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_compute,The following statement contains a magic number: checklines && text1.Length > 100 && text2.Length > 100
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_lineMode,The following statement contains a magic number: List<string> linearray = (List<string>)b[2];
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: int max_d = (text1_length + text2_length + 1) / 2;
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: int v_length = 2 * max_d;
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: bool front = (delta % 2 != 0);
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: k1end += 2;
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: k2end += 2;
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: longtext.Length < 4 || shorttext.Length * 2 < longtext.Length
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: longtext.Length < 4 || shorttext.Length * 2 < longtext.Length
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: string[] hm1 = diff_halfMatchI(longtext' shorttext'                                       (longtext.Length + 3) / 4);
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: string[] hm1 = diff_halfMatchI(longtext' shorttext'                                       (longtext.Length + 3) / 4);
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: string[] hm2 = diff_halfMatchI(longtext' shorttext'                                       (longtext.Length + 1) / 2);
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_halfMatchI,The following statement contains a magic number: string seed = longtext.Substring(i' longtext.Length / 4);
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_halfMatchI,The following statement contains a magic number: best_common.Length * 2 >= longtext.Length
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_cleanupSemantic,The following statement contains a magic number: overlap_length1 >= deletion.Length / 2.0 ||                  overlap_length1 >= insertion.Length / 2.0
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_cleanupSemantic,The following statement contains a magic number: overlap_length1 >= deletion.Length / 2.0 ||                  overlap_length1 >= insertion.Length / 2.0
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_cleanupSemanticScore,The following statement contains a magic number: return 6;
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_cleanupSemanticScore,The following statement contains a magic number: return 5;
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,match_bitap,The following statement contains a magic number: bin_mid = (bin_max - bin_min) / 2 + bin_min;
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,match_bitap,The following statement contains a magic number: int[] rd = new int[finish + 2];
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,match_bitap,The following statement contains a magic number: start = Math.Max(1' 2 * loc - best_loc);
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,patch_make,The following statement contains a magic number: diffs.Count > 2
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,patch_make,The following statement contains a magic number: switch (aDiff.operation) {            case Operation.INSERT:              patch.diffs.Add(aDiff);              patch.length2 += aDiff.text.Length;              postpatch_text = postpatch_text.Insert(char_count2' aDiff.text);              break;            case Operation.DELETE:              patch.length1 += aDiff.text.Length;              patch.diffs.Add(aDiff);              postpatch_text = postpatch_text.Remove(char_count2'                  aDiff.text.Length);              break;            case Operation.EQUAL:              if (aDiff.text.Length <= 2 * Patch_Margin                  && patch.diffs.Count() != 0 && aDiff != diffs.Last()) {                // Small equality inside a patch.                patch.diffs.Add(aDiff);                patch.length1 += aDiff.text.Length;                patch.length2 += aDiff.text.Length;              }                if (aDiff.text.Length >= 2 * Patch_Margin) {                // Time for a new patch.                if (patch.diffs.Count != 0) {                  patch_addContext(patch' prepatch_text);                  patches.Add(patch);                  patch = new Patch();                  // Unlike Unidiff' our patch lists have a rolling context.                  // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff                  // Update prepatch text & pos to reflect the application of the                  // just completed patch.                  prepatch_text = postpatch_text;                  char_count1 = char_count2;                }              }              break;          }
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,patch_make,The following statement contains a magic number: switch (aDiff.operation) {            case Operation.INSERT:              patch.diffs.Add(aDiff);              patch.length2 += aDiff.text.Length;              postpatch_text = postpatch_text.Insert(char_count2' aDiff.text);              break;            case Operation.DELETE:              patch.length1 += aDiff.text.Length;              patch.diffs.Add(aDiff);              postpatch_text = postpatch_text.Remove(char_count2'                  aDiff.text.Length);              break;            case Operation.EQUAL:              if (aDiff.text.Length <= 2 * Patch_Margin                  && patch.diffs.Count() != 0 && aDiff != diffs.Last()) {                // Small equality inside a patch.                patch.diffs.Add(aDiff);                patch.length1 += aDiff.text.Length;                patch.length2 += aDiff.text.Length;              }                if (aDiff.text.Length >= 2 * Patch_Margin) {                // Time for a new patch.                if (patch.diffs.Count != 0) {                  patch_addContext(patch' prepatch_text);                  patches.Add(patch);                  patch = new Patch();                  // Unlike Unidiff' our patch lists have a rolling context.                  // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff                  // Update prepatch text & pos to reflect the application of the                  // just completed patch.                  prepatch_text = postpatch_text;                  char_count1 = char_count2;                }              }              break;          }
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,patch_apply,The following statement contains a magic number: text = text.Substring(nullPadding.Length' text.Length            - 2 * nullPadding.Length);
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,patch_fromText,The following statement contains a magic number: m.Groups[2].Length == 0
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,patch_fromText,The following statement contains a magic number: patch.start2 = Convert.ToInt32(m.Groups[3].Value);
Magic Number,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,patch_fromText,The following statement contains a magic number: m.Groups[4].Length == 0
Missing Default,DiffMatchPatch,Patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,ToString,The following switch statement is missing a default case: switch (aDiff.operation) {            case Operation.INSERT:              text.Append('+');              break;            case Operation.DELETE:              text.Append('-');              break;            case Operation.EQUAL:              text.Append(' ');              break;          }
Missing Default,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_lineMode,The following switch statement is missing a default case: switch (diffs[pointer].operation) {            case Operation.INSERT:              count_insert++;              text_insert += diffs[pointer].text;              break;            case Operation.DELETE:              count_delete++;              text_delete += diffs[pointer].text;              break;            case Operation.EQUAL:              // Upon reaching an equality' check for prior redundancies.              if (count_delete >= 1 && count_insert >= 1) {                // Delete the offending records and add the merged ones.                diffs.RemoveRange(pointer - count_delete - count_insert'                    count_delete + count_insert);                pointer = pointer - count_delete - count_insert;                List<Diff> a =                    this.diff_main(text_delete' text_insert' false' deadline);                diffs.InsertRange(pointer' a);                pointer = pointer + a.Count;              }              count_insert = 0;              count_delete = 0;              text_delete = string.Empty;              text_insert = string.Empty;              break;          }
Missing Default,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_cleanupMerge,The following switch statement is missing a default case: switch (diffs[pointer].operation) {            case Operation.INSERT:              count_insert++;              text_insert += diffs[pointer].text;              pointer++;              break;            case Operation.DELETE:              count_delete++;              text_delete += diffs[pointer].text;              pointer++;              break;            case Operation.EQUAL:              // Upon reaching an equality' check for prior redundancies.              if (count_delete + count_insert > 1) {                if (count_delete != 0 && count_insert != 0) {                  // Factor out any common prefixies.                  commonlength = this.diff_commonPrefix(text_insert' text_delete);                  if (commonlength != 0) {                    if ((pointer - count_delete - count_insert) > 0 &&                      diffs[pointer - count_delete - count_insert - 1].operation                          == Operation.EQUAL) {                      diffs[pointer - count_delete - count_insert - 1].text                          += text_insert.Substring(0' commonlength);                    } else {                      diffs.Insert(0' new Diff(Operation.EQUAL'                          text_insert.Substring(0' commonlength)));                      pointer++;                    }                    text_insert = text_insert.Substring(commonlength);                    text_delete = text_delete.Substring(commonlength);                  }                  // Factor out any common suffixies.                  commonlength = this.diff_commonSuffix(text_insert' text_delete);                  if (commonlength != 0) {                    diffs[pointer].text = text_insert.Substring(text_insert.Length                        - commonlength) + diffs[pointer].text;                    text_insert = text_insert.Substring(0' text_insert.Length                        - commonlength);                    text_delete = text_delete.Substring(0' text_delete.Length                        - commonlength);                  }                }                // Delete the offending records and add the merged ones.                if (count_delete == 0) {                  diffs.Splice(pointer - count_insert'                      count_delete + count_insert'                      new Diff(Operation.INSERT' text_insert));                } else if (count_insert == 0) {                  diffs.Splice(pointer - count_delete'                      count_delete + count_insert'                      new Diff(Operation.DELETE' text_delete));                } else {                  diffs.Splice(pointer - count_delete - count_insert'                      count_delete + count_insert'                      new Diff(Operation.DELETE' text_delete)'                      new Diff(Operation.INSERT' text_insert));                }                pointer = pointer - count_delete - count_insert +                    (count_delete != 0 ? 1 : 0) + (count_insert != 0 ? 1 : 0) + 1;              } else if (pointer != 0                  && diffs[pointer - 1].operation == Operation.EQUAL) {                // Merge this equality with the previous one.                diffs[pointer - 1].text += diffs[pointer].text;                diffs.RemoveAt(pointer);              } else {                pointer++;              }              count_insert = 0;              count_delete = 0;              text_delete = string.Empty;              text_insert = string.Empty;              break;          }
Missing Default,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_prettyHtml,The following switch statement is missing a default case: switch (aDiff.operation) {            case Operation.INSERT:              html.Append("<ins style=\"background:#e6ffe6;\">").Append(text)                  .Append("</ins>");              break;            case Operation.DELETE:              html.Append("<del style=\"background:#ffe6e6;\">").Append(text)                  .Append("</del>");              break;            case Operation.EQUAL:              html.Append("<span>").Append(text).Append("</span>");              break;          }
Missing Default,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_levenshtein,The following switch statement is missing a default case: switch (aDiff.operation) {            case Operation.INSERT:              insertions += aDiff.text.Length;              break;            case Operation.DELETE:              deletions += aDiff.text.Length;              break;            case Operation.EQUAL:              // A deletion and an insertion is one substitution.              levenshtein += Math.Max(insertions' deletions);              insertions = 0;              deletions = 0;              break;          }
Missing Default,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,diff_toDelta,The following switch statement is missing a default case: switch (aDiff.operation) {            case Operation.INSERT:              text.Append("+").Append(HttpUtility.UrlEncode(aDiff.text'                  new UTF8Encoding()).Replace('+'' ' ')).Append("\t");              break;            case Operation.DELETE:              text.Append("-").Append(aDiff.text.Length).Append("\t");              break;            case Operation.EQUAL:              text.Append("=").Append(aDiff.text.Length).Append("\t");              break;          }
Missing Default,DiffMatchPatch,diff_match_patch,D:\research\architectureSmells\repos\chrisparnin_automark\Source\automark\automark\Util\DiffMatchPatch.cs,patch_make,The following switch statement is missing a default case: switch (aDiff.operation) {            case Operation.INSERT:              patch.diffs.Add(aDiff);              patch.length2 += aDiff.text.Length;              postpatch_text = postpatch_text.Insert(char_count2' aDiff.text);              break;            case Operation.DELETE:              patch.length1 += aDiff.text.Length;              patch.diffs.Add(aDiff);              postpatch_text = postpatch_text.Remove(char_count2'                  aDiff.text.Length);              break;            case Operation.EQUAL:              if (aDiff.text.Length <= 2 * Patch_Margin                  && patch.diffs.Count() != 0 && aDiff != diffs.Last()) {                // Small equality inside a patch.                patch.diffs.Add(aDiff);                patch.length1 += aDiff.text.Length;                patch.length2 += aDiff.text.Length;              }                if (aDiff.text.Length >= 2 * Patch_Margin) {                // Time for a new patch.                if (patch.diffs.Count != 0) {                  patch_addContext(patch' prepatch_text);                  patches.Add(patch);                  patch = new Patch();                  // Unlike Unidiff' our patch lists have a rolling context.                  // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff                  // Update prepatch text & pos to reflect the application of the                  // just completed patch.                  prepatch_text = postpatch_text;                  char_count1 = char_count2;                }              }              break;          }
