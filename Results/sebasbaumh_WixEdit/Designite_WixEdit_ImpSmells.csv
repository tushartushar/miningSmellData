Implementation smell,Namespace,Class,File,Method,Description
Long Method,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The method has 122 lines of code.
Long Method,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The method has 262 lines of code.
Long Method,WixEdit.Import,RegistryImport,C:\repos\sebasbaumh_WixEdit\src\Import\RegistryImport.cs,Import,The method has 120 lines of code.
Long Method,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,GetDisplayName,The method has 146 lines of code.
Long Method,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The method has 219 lines of code.
Long Method,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,PopupDialogTreeViewContextMenu,The method has 104 lines of code.
Long Method,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,OpenLine,The method has 131 lines of code.
Long Method,WixEdit.PropertyGridExtensions,IntegerConverter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\IntegerConverter.cs,IsValid,The method has 114 lines of code.
Long Method,WixEdit.PropertyGridExtensions,XmlAttributeAdapter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\XmlAttributeAdapter.cs,GetProperties,The method has 149 lines of code.
Long Method,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The method has 106 lines of code.
Long Method,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,GetDisplayName,The method has 133 lines of code.
Long Method,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The method has 189 lines of code.
Long Method,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnNext,The method has 142 lines of code.
Long Method,WixEdit.Xml,DefineManager,C:\repos\sebasbaumh_WixEdit\src\Xml\DefineManager.cs,LoadDefines,The method has 112 lines of code.
Long Method,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,LoadWxsFile,The method has 104 lines of code.
Complex Method,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,Cyclomatic complexity of the method is 8
Complex Method,WixEdit.Controls,ErrorProviderFixManager,C:\repos\sebasbaumh_WixEdit\src\Controls\ErrorProviderFixed.cs,tmr_CheckHandels,Cyclomatic complexity of the method is 10
Complex Method,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,_pathTextBox_KeyUp,Cyclomatic complexity of the method is 9
Complex Method,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,toolsOptions_Click,Cyclomatic complexity of the method is 8
Complex Method,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,CloseWxsFile,Cyclomatic complexity of the method is 11
Complex Method,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,WixEdit,ElementEditForm,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ElementEditForm.cs,OnPropertyGridPopupContextMenu,Cyclomatic complexity of the method is 11
Complex Method,WixEdit,ElementEditForm,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ElementEditForm.cs,OnNewPropertyGridItem,Cyclomatic complexity of the method is 12
Complex Method,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetRelativePath,Cyclomatic complexity of the method is 8
Complex Method,WixEdit.Import,DirectoryImport,C:\repos\sebasbaumh_WixEdit\src\Import\DirectoryImport.cs,RecurseDirectories,Cyclomatic complexity of the method is 8
Complex Method,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,GetTextFromXmlElement,Cyclomatic complexity of the method is 8
Complex Method,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,OnPropertyGridPopupContextMenu,Cyclomatic complexity of the method is 11
Complex Method,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,OnNewPropertyGridItem,Cyclomatic complexity of the method is 12
Complex Method,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,AddTreeNodesRecursive,Cyclomatic complexity of the method is 11
Complex Method,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,PopupTreeViewContextMenu,Cyclomatic complexity of the method is 8
Complex Method,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,ShowCustomTable,Cyclomatic complexity of the method is 8
Complex Method,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,ShowNode,Cyclomatic complexity of the method is 11
Complex Method,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,OnImportWxsDialogsItem,Cyclomatic complexity of the method is 10
Complex Method,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,OnNewPropertyGridItem,Cyclomatic complexity of the method is 14
Complex Method,WixEdit.Panels,EditFilesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditFilesPanel.cs,treeView_DragOver,Cyclomatic complexity of the method is 8
Complex Method,WixEdit.Panels,EditFilesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditFilesPanel.cs,ImportFilesInComponent,Cyclomatic complexity of the method is 10
Complex Method,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,OpenLine,Cyclomatic complexity of the method is 10
Complex Method,WixEdit.Panels,SearchPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\SearchPanel.cs,OpenLine,Cyclomatic complexity of the method is 8
Complex Method,WixEdit.PropertyGridExtensions,IntegerConverter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\IntegerConverter.cs,IsValid,Cyclomatic complexity of the method is 13
Complex Method,WixEdit.PropertyGridExtensions,XmlAttributeAdapter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\XmlAttributeAdapter.cs,GetProperties,Cyclomatic complexity of the method is 17
Complex Method,WixEdit.Settings,WixEditData,C:\repos\sebasbaumh_WixEdit\src\Settings\WixEditSettings.cs,WixEditData,Cyclomatic complexity of the method is 12
Complex Method,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,AddTreeNodesRecursive,Cyclomatic complexity of the method is 11
Complex Method,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,ImportFilesInComponent,Cyclomatic complexity of the method is 10
Complex Method,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,Cyclomatic complexity of the method is 17
Complex Method,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnNext,Cyclomatic complexity of the method is 11
Complex Method,WixEdit.Xml,DefineManager,C:\repos\sebasbaumh_WixEdit\src\Xml\DefineManager.cs,LoadDefines,Cyclomatic complexity of the method is 13
Complex Method,WixEdit.Xml,IncludeManager,C:\repos\sebasbaumh_WixEdit\src\Xml\IncludeManager.cs,LoadIncludes,Cyclomatic complexity of the method is 9
Complex Method,WixEdit.Xml,IncludeManager,C:\repos\sebasbaumh_WixEdit\src\Xml\IncludeManager.cs,FindIncludeFile,Cyclomatic complexity of the method is 9
Complex Method,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,LoadWxsFile,Cyclomatic complexity of the method is 18
Complex Method,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,LoadNewWxsFile,Cyclomatic complexity of the method is 17
Complex Method,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,GetXsdSubElements,Cyclomatic complexity of the method is 8
Complex Method,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,Save,Cyclomatic complexity of the method is 15
Complex Method,WixEdit.Xml,XmlDocumentationManager,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDocumentationManager.cs,GetDocumentation,Cyclomatic complexity of the method is 8
Long Parameter List,WixEdit.Images,FileIconFactory,C:\repos\sebasbaumh_WixEdit\src\Images\FileIconFactory.cs,SHGetFileInfo,The method has 5 parameters. Parameters: pszPath' dwFileAttributes' psfi' cbFileInfo' uFlags
Long Parameter List,WixEdit.Panels,DisplaySimpleBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplaySimpleBasePanel.cs,DisplaySimpleBasePanel,The method has 5 parameters. Parameters: wixFiles' xpath' elementName' keyName' valueName
Long Parameter List,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,DisplayTreeBasePanel,The method has 5 parameters. Parameters: wixFiles' xpath' elementName' keyName' fullExpandTreeAtStart
Long Parameter List,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,LaunchFile,The method has 5 parameters. Parameters: filename' anchorNumber' numberOfAnchors' lineNumber' message
Long Parameter List,WixEdit.PropertyGridExtensions,CustomXmlPropertyDescriptorBase,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\CustomXmlPropertyDescriptorBase.cs,CustomXmlPropertyDescriptorBase,The method has 5 parameters. Parameters: wixFiles' xmlElement' name' propInfo' attrs
Long Parameter List,WixEdit.PropertyGridExtensions,FileXmlAttributePropertyDescriptor,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\FileXmlAttributePropertyDescriptor.cs,FileXmlAttributePropertyDescriptor,The method has 5 parameters. Parameters: element' wixFiles' description' name' attrs
Long Parameter List,WixEdit.PropertyGridExtensions,XmlAttributePropertyDescriptor,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\XmlAttributePropertyDescriptor.cs,XmlAttributePropertyDescriptor,The method has 5 parameters. Parameters: wixFiles' attribute' description' name' attrs
Long Parameter List,WixEdit.Xml,ChangeCommand,C:\repos\sebasbaumh_WixEdit\src\Xml\UndoManager.cs,ChangeCommand,The method has 5 parameters. Parameters: changedNode' oldValue' newValue' beginCommandRange' affectedInclude
Long Identifier,WixEdit,ElementEditForm,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ElementEditForm.cs,,The length of the parameter elementPropertyGridContextMenu is 30.
Long Identifier,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,,The length of the parameter xsdExtensionTargetNamespacesReverseMap is 38.
Long Identifier,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,,The length of the parameter xsdExtensionPrefixesReverseMap is 30.
Long Statement,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The length of the statement  "					g.DrawLine(pen' boundsRectangle.Left + 1' boundsRectangle.Bottom - 3' boundsRectangle.Right - 1' boundsRectangle.Bottom-3); " is 123.
Long Statement,WixEdit.Controls,ErrorProviderFixManager,C:\repos\sebasbaumh_WixEdit\src\Controls\ErrorProviderFixed.cs,GetFieldValue,The length of the statement  "                fInfo = type.GetField(name' System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.NonPublic | BindingFlags.Instance); " is 144.
Long Statement,WixEdit.Controls,FileSelectEditingControl,C:\repos\sebasbaumh_WixEdit\src\Controls\FileSelectEditingControl.cs,selectFileButton_Click,The length of the statement  "                    MessageBox.Show(String.Format("{0} could not be located"' path)' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 122.
Long Statement,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.TreeNode treeNode5 = new System.Windows.Forms.TreeNode("Node1"' new System.Windows.Forms.TreeNode[] { " is 122.
Long Statement,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.TreeNode treeNode6 = new System.Windows.Forms.TreeNode("Node0"' new System.Windows.Forms.TreeNode[] { " is 122.
Long Statement,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The length of the statement  "            this._descriptionLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 150.
Long Statement,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The length of the statement  "            this._pathTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 145.
Long Statement,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The length of the statement  "            this._cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The length of the statement  "            this._selectButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The length of the statement  "            this._folderTreeView.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 151.
Long Statement,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The length of the statement  "            this._folderTreeView.BeforeExpand += new System.Windows.Forms.TreeViewCancelEventHandler(this._folderTreeView_BeforeExpand); " is 124.
Long Statement,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The length of the statement  "            this._folderTreeView.BeforeSelect += new System.Windows.Forms.TreeViewCancelEventHandler(this._folderTreeView_BeforeSelect); " is 124.
Long Statement,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The length of the statement  "            this._newFolderButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 154.
Long Statement,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawMainMenu,The length of the statement  "                graphics.DrawLine(new Pen(selectedBorder)' dest.Left + 1 + (dest.Width - 1)' dest.Top + 1' dest.Left + 1 + (dest.Width - 1)' dest.Bottom - 1); " is 142.
Long Statement,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,MakeMonochrome,The length of the statement  "            BitmapData data1 = input.LockBits(new Rectangle(0' 0' num1' num2)' ImageLockMode.ReadOnly' PixelFormat.Format32bppArgb); " is 120.
Long Statement,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,MakeMonochrome,The length of the statement  "            BitmapData data2 = bitmap1.LockBits(new Rectangle(0' 0' num1' num2)' ImageLockMode.WriteOnly' PixelFormat.Format32bppArgb); " is 123.
Long Statement,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The length of the statement  "            } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) { " is 130.
Long Statement,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The length of the statement  "            } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) { " is 129.
Long Statement,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,DrawSelection,The length of the statement  "            formGraphics.FillRectangles(Brushes.White' new Rectangle[] {leftTop' rightTop' leftBottom' rightBottom' leftMid' rightMid' midBottom' midTop}); " is 143.
Long Statement,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,DrawSelection,The length of the statement  "            formGraphics.DrawRectangles(Pens.Black' new Rectangle[] {leftTop' rightTop' leftBottom' rightBottom' leftMid' rightMid' midBottom' midTop}); " is 140.
Long Statement,WixEdit.Controls,TabButtonControl,C:\repos\sebasbaumh_WixEdit\src\Controls\TabButtonControl.cs,tabButtons_DrawItem,The length of the statement  "            SizeF textSize = e.Graphics.MeasureString(tabButtons.Items[e.Index].ToString()' e.Font' new Point(e.Bounds.X' e.Bounds.Y)' textFormat); " is 135.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The length of the statement  "                string tryPath = Path.Combine(wixEditExe.Directory.Parent.FullName' @"tools\StateBrowser\sliver.Windows.Forms.StateBrowser.dll"); " is 129.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The length of the statement  "                    tryPath = Path.Combine(wixEditExe.Directory.Parent.Parent.FullName' @"tools\StateBrowser\sliver.Windows.Forms.StateBrowser.dll"); " is 129.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The length of the statement  "                    stateBrowserAssm = Assembly.Load("sliver.windows.forms.statebrowser' Version=1.5.0.0' Culture=neutral' PublicKeyToken=34afe62596d00324' Custom=null"); " is 150.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,fileNewEmpty_Click,The length of the statement  "                MessageBox.Show("Creating new wxs files with the wizard is not supported for WiX 2.\r\n\r\nPlease use WiX 3 or higher instead."' "Older version of WiX"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 203.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,NewWizard,The length of the statement  "                MessageBox.Show("Creating new wxs files with the wizard is not supported for WiX 2.\r\n\r\nPlease use WiX 3 or higher instead."' "Older version of WiX"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 203.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,OpenFile,The length of the statement  "            openWxsFileDialog.Filter = "WiX Files (*.xml;*.wxs)|*.XML;*.WXS|MSI Files (*.msi;*.msm)|*.MSI;*.MSM|All files (*.*)|*.*"; " is 121.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,OpenFile,The length of the statement  "                            MessageBox.Show("The existing wxs file will be overwritten.\r\n\r\nAre you sure you want to continue?"' "Overwrite?"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) " is 188.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,OnDecompileComplete,The length of the statement  "                MessageBox.Show("Dark.exe failed to decompile the msi."' "Failed to decompile"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 124.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,Save,The length of the statement  "                    MessageBox.Show("Failed to save " + wixFiles.WxsFile.Name + ":\r\n\r\n" + ex.Message' "Failed to save"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 148.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,SaveAs,The length of the statement  "                    MessageBox.Show("Failed to save " + newName + ":\r\n\r\n" + ex.Message' "Failed to save"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 134.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,toolsMenu_Popup,The length of the statement  "            bool hasExternalEditor = (WixEditSettings.Instance.ExternalXmlEditor != null && File.Exists(WixEditSettings.Instance.ExternalXmlEditor)); " is 137.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,buildWixInstall_Click,The length of the statement  "                        MessageBox.Show("Install package doesn't exist. Compile the package first."' "Need to compile"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 146.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,buildWixInstall_Click,The length of the statement  "                        if (DialogResult.Cancel == MessageBox.Show("In memory changes to \"" + wixFiles.WxsFile.Name + "\" will be discared with this install."' "Discard changes"' MessageBoxButtons.OKCancel' MessageBoxIcon.Information)) " is 212.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,buildWixInstall_Click,The length of the statement  "                        DialogResult outOfDate = MessageBox.Show("The MSI file is out of date' continue?"' "Discard changes"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Information); " is 161.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,buildWixUninstall_Click,The length of the statement  "                        MessageBox.Show("Install package doesn't exist. Compile and install the package first."' "Need to compile"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 158.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,Compile,The length of the statement  "                throw new WixEditException("The executable \"candle.exe\" could not be found.\r\n\r\nPlease specify the correct path to the Wix binaries in the settings dialog."); " is 163.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,Compile,The length of the statement  "                throw new WixEditException("The executable \"light.exe\" could not be found.\r\n\r\nPlease specify the correct path to the Wix binaries in the settings dialog."); " is 162.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,Decompile,The length of the statement  "                throw new WixEditException("The executable \"dark.exe\" could not be found.\r\n\r\nPlease specify the correct path to the Wix binaries in the settings dialog."); " is 161.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,Decompile,The length of the statement  "            psiDark.Arguments = String.Format("-nologo -x \"{0}\" \"{1}\" \"{2}\""' msiFile.DirectoryName' msiFile.FullName' Path.ChangeExtension(msiFile.FullName' "wxs")); " is 160.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,toolsOptions_Click,The length of the statement  "                    MessageBox.Show("You must close all files first before the new setting can be applied."' "Apply settings"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 157.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,toolsOptions_Click,The length of the statement  "                        MessageBox.Show("Windows Installer XML (WiX) Toolset installation is required to run WixEdit.\r\n\r\nThe WiX installation can be downloaded from http://wix.sourceforge.net/. Please download and install WiX and specify the install location in the WixEdit options."' "Missing WiX"); " is 280.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,toolsOptions_Click,The length of the statement  "                        MessageBox.Show("Please check your WiX installation!\r\n\r\nCannot find Wix.xsd! It should be located in the 'doc' subdirectory of your WiX installation. Please check your WiX installation and the XSDs location in the WixEdit options. This file is required to determine the correct xml schema for your version of WiX."' "Missing Wix.xsd"); " is 339.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The length of the statement  "                MessageBox.Show(String.Format("File does not exist. ({0}))"' file.Name)' "File not found"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 141.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The length of the statement  "                MessageBox.Show(String.Format("Access is denied. ({0}))"' file.Name)' "Acces denied"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 136.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The length of the statement  "                MessageBox.Show(String.Format("Failed to open file. ({0}) The xml is not valid:\r\n\r\n{1}"' file.Name' ex.Message)' "Open failed"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 182.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The length of the statement  "                MessageBox.Show(String.Format("Cannot open file:\r\n\r\n{0}"' ex.Message)' "Open failed"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 140.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The length of the statement  "                MessageBox.Show(String.Format("Failed to open file. ({0}))"' file.Name)' "Open failed"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 138.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The length of the statement  "            tabButtonControl.AddTab("Global"' editGlobalDataPanel' new Bitmap(WixFiles.GetResourceStream("tabbuttons.global.png"))); " is 120.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The length of the statement  "            tabButtonControl.AddTab("Properties"' editPropertiesPanel' new Bitmap(WixFiles.GetResourceStream("tabbuttons.properties.png"))); " is 128.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The length of the statement  "            tabButtonControl.AddTab("Resources"' editResourcesPanel' new Bitmap(WixFiles.GetResourceStream("tabbuttons.resources.png"))); " is 125.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The length of the statement  "            tabButtonControl.AddTab("Tables"' editCustomTablePanel' new Bitmap(WixFiles.GetResourceStream("tabbuttons.customtables.png"))); " is 127.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,Main,The length of the statement  "                string message = "Caught unhandled exception! Please press OK to report this error to the WixEdit website' so this error can be fixed."; " is 136.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,ReloadAll,The length of the statement  "                string message = "Error with reloading all views' please press OK to report this error to the WixEdit website' so this error can be fixed."; " is 140.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,Application_ThreadException,The length of the statement  "                    MessageBox.Show(String.Format("You cannot change \"{0}\""' ifcException.Command.AffectedInclude)' "Cannot change includes"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 174.
Long Statement,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,Application_ThreadException,The length of the statement  "            string message = "Unable to perform your action' an error occured! Please press OK to report this error to the WixEdit website' so this error can be fixed."; " is 157.
Long Statement,WixEdit,ElementEditForm,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ElementEditForm.cs,OnPropertyGridPopupContextMenu,The length of the statement  "            XmlAttributePropertyDescriptor desc = elementPropertyGrid.SelectedGridItem.PropertyDescriptor as XmlAttributePropertyDescriptor; " is 128.
Long Statement,WixEdit,ElementEditForm,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ElementEditForm.cs,OnPropertyGridPopupContextMenu,The length of the statement  "                XmlNode xmlAttributeDefinition = attAdapter.XmlNodeDefinition.SelectSingleNode(String.Format("xs:attribute[@name='{0}']"' att.Name)' wixFiles.XsdNsmgr); " is 152.
Long Statement,WixEdit,ElementEditForm,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ElementEditForm.cs,GetSelectedProperty,The length of the statement  "                XmlAttributePropertyDescriptor desc = elementPropertyGrid.SelectedGridItem.PropertyDescriptor as XmlAttributePropertyDescriptor; " is 128.
Long Statement,WixEdit,ElementEditForm,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ElementEditForm.cs,GetSelectedProperty,The length of the statement  "                CustomXmlPropertyDescriptorBase desc = elementPropertyGrid.SelectedGridItem.PropertyDescriptor as CustomXmlPropertyDescriptorBase; " is 130.
Long Statement,WixEdit,ElementEditForm,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ElementEditForm.cs,GetSelectedProperty,The length of the statement  "                throw new Exception(String.Format("Expected XmlAttributePropertyDescriptor' but got {0} in GetSelectedProperty"' typeString)); " is 126.
Long Statement,WixEdit,ErrorReporter,C:\repos\sebasbaumh_WixEdit\src\Server\ErrorReporter.cs,Report,The length of the statement  "            buffer.Append("LastModified ").Append(File.GetLastWriteTimeUtc(Assembly.GetExecutingAssembly().Location).ToString("yyyy-MM-ddTHH:mm:ssZ")).Append("\r\n"); " is 154.
Long Statement,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The length of the statement  "            this.itemListView.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 148.
Long Statement,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The length of the statement  "            this.upButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The length of the statement  "            this.downButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The length of the statement  "            this.okButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,WixEdit.Forms,ProjectSettingsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProjectSettingsForm.cs,InitializeComponent,The length of the statement  "            okButton.Location = new Point(ClientSize.Width - cancelButton.Width - padding - okButton.Width - padding' lightArgs.Bottom + padding); " is 134.
Long Statement,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetRelativePath,The length of the statement  "                throw new WixEditException(String.Format("The the path \"{0}\" is too long after being fully qualified. Make sure path is less than 260 characters."' relativeValue)' ex); " is 170.
Long Statement,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetRelativePath,The length of the statement  "            if (WixEditSettings.Instance.UseRelativeOrAbsolutePaths == PathHandling.ForceRelativePaths && Path.IsPathRooted(relativeValue) == true) " is 135.
Long Statement,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetRelativePath,The length of the statement  "                throw new WixEditException(String.Format("{0} is invalid. {1} should be relative to {2}' or change your preference in the WixEdit settings."' relativeValue' path' wxsDirectory)); " is 178.
Long Statement,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetShortFileName,The length of the statement  "            while (componentElement.SelectSingleNode(String.Format("wix:File[@{0}={1}]"' ShortName' XPathHelper.EscapeXPathInputString(shortFileName))' wixFiles.WxsNsmgr) != null) " is 167.
Long Statement,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetShortDirectoryName,The length of the statement  "            while (componentElement.SelectSingleNode(String.Format("wix:Directory[@{0}={1}]"' ShortName' XPathHelper.EscapeXPathInputString(shortDirectoryName))' wixFiles.WxsNsmgr) != null) " is 177.
Long Statement,WixEdit.Import,DirectoryImport,C:\repos\sebasbaumh_WixEdit\src\Import\DirectoryImport.cs,RecurseDirectories,The length of the statement  "                    newElement.SetAttribute(ShortName' FileImport.GenerateValidShortName(PathHelper.GetShortDirectoryName(dirInfo' wixFiles' parentDirectoryElement))); " is 147.
Long Statement,WixEdit.Import,DirectoryImport,C:\repos\sebasbaumh_WixEdit\src\Import\DirectoryImport.cs,AddFiles,The length of the statement  "                XmlElement newComponentElement = parentDirectoryElement.OwnerDocument.CreateElement("Component"' WixFiles.WixNamespaceUri); " is 123.
Long Statement,WixEdit.Import,DirectoryImport,C:\repos\sebasbaumh_WixEdit\src\Import\DirectoryImport.cs,AddFiles,The length of the statement  "                newComponentElement.SetAttribute("Id"' FileImport.GenerateValidIdentifier(fileInfo.Name' newComponentElement' wixFiles)); " is 121.
Long Statement,WixEdit.Import,DirectoryImport,C:\repos\sebasbaumh_WixEdit\src\Import\DirectoryImport.cs,AddFiles,The length of the statement  "                    newFileElement.SetAttribute(ShortName' FileImport.GenerateValidShortName(PathHelper.GetShortFileName(fileInfo' wixFiles' newComponentElement))); " is 144.
Long Statement,WixEdit.Import,FileImport,C:\repos\sebasbaumh_WixEdit\src\Import\FileImport.cs,Import,The length of the statement  "                newElement.SetAttribute(ShortName' GenerateValidShortName(PathHelper.GetShortFileName(fileInfo' wixFiles' componentElement))); " is 126.
Long Statement,WixEdit.Import,RegistryImport,C:\repos\sebasbaumh_WixEdit\src\Import\RegistryImport.cs,Import,The length of the statement  "                        XmlElement registryKey = componentElement.OwnerDocument.CreateElement(registryKeyElementName' WixFiles.WixNamespaceUri); " is 120.
Long Statement,WixEdit.Import,RegistryImport,C:\repos\sebasbaumh_WixEdit\src\Import\RegistryImport.cs,Import,The length of the statement  "                        throw new ImportException(String.Format("Invalid line (Line {0})' missing key specification: \"{1}\""' lineNumber' trimmedLine)); " is 129.
Long Statement,WixEdit.Import,RegistryImport,C:\repos\sebasbaumh_WixEdit\src\Import\RegistryImport.cs,Import,The length of the statement  "                            throw new ImportException(String.Format("Invalid line (Line {0})' missing part of value: \"{1}\""' lineNumber' trimmedLine)); " is 125.
Long Statement,WixEdit.Import,RegistryImport,C:\repos\sebasbaumh_WixEdit\src\Import\RegistryImport.cs,Import,The length of the statement  "                    XmlElement registryKey = componentElement.OwnerDocument.CreateElement(registryValueElementName' WixFiles.WixNamespaceUri); " is 122.
Long Statement,WixEdit.Import,RegistryImport,C:\repos\sebasbaumh_WixEdit\src\Import\RegistryImport.cs,Import,The length of the statement  "                XmlElement registryKey = componentElement.OwnerDocument.CreateElement(registryKeyElementName' WixFiles.WixNamespaceUri); " is 120.
Long Statement,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,GenerateDialog,The length of the statement  "            newDialog.ClientSize = new Size(DialogUnitsToPixelsWidth(XmlConvert.ToInt32(dialog.Attributes["Width"].Value.Trim()))' DialogUnitsToPixelsHeight(XmlConvert.ToInt32(dialog.Attributes["Height"].Value.Trim()))); " is 208.
Long Statement,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,ExpandWixProperties,The length of the statement  "                XmlNode propertyNode = wixFiles.WxsDocument.SelectSingleNode(String.Format("//wix:Property[@Id='{0}']"' propName)' wixFiles.WxsNsmgr); " is 134.
Long Statement,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddRadioButtonGroups,The length of the statement  "                    XmlNode radioGroup = wixFiles.WxsDocument.SelectSingleNode(String.Format("//wix:RadioGroup[@Property='{0}']"' radioGroupName)' wixFiles.WxsNsmgr); " is 146.
Long Statement,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddRadioButtonGroups,The length of the statement  "                        radioGroup = wixFiles.WxsDocument.SelectSingleNode(String.Format("//wix:RadioButtonGroup[@Property='{0}']"' radioGroupName)' wixFiles.WxsNsmgr); " is 144.
Long Statement,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,SetControlAttributes,The length of the statement  "            //control.ClientSize = new Size(DialogUnitsToPixels(XmlConvert.ToInt32(controlElement.Attributes["Width"].Value))' DialogUnitsToPixels(XmlConvert.ToInt32(button.Attributes["Height"].Value))); " is 191.
Long Statement,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,GetBinaryStream,The length of the statement  "            XmlNode binaryNode = wixFiles.WxsDocument.SelectSingleNode(String.Format("//wix:Binary[@Id='{0}']"' binaryId)' wixFiles.WxsNsmgr); " is 130.
Long Statement,WixEdit.Panels,DisplaySimpleBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplaySimpleBasePanel.cs,OnNewPropertyGridItem,The length of the statement  "                MessageBox.Show(String.Format("No location found to add \"{0}\" element' need element like module or product!"' CurrentElementName)); " is 133.
Long Statement,WixEdit.Panels,DisplaySimpleBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplaySimpleBasePanel.cs,GetSelectedGridObject,The length of the statement  "            CustomXmlPropertyDescriptorBase desc = CurrentGrid.SelectedGridItem.PropertyDescriptor as CustomXmlPropertyDescriptorBase; " is 122.
Long Statement,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,GetShowingNode,The length of the statement  "                CustomXmlPropertyDescriptorBase desc = currentGrid.SelectedGridItem.PropertyDescriptor as CustomXmlPropertyDescriptorBase; " is 122.
Long Statement,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,OnPropertyGridPopupContextMenu,The length of the statement  "            XmlAttributePropertyDescriptor desc = CurrentGrid.SelectedGridItem.PropertyDescriptor as XmlAttributePropertyDescriptor; " is 120.
Long Statement,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,OnPropertyGridPopupContextMenu,The length of the statement  "                XmlNode xmlAttributeDefinition = attAdapter.XmlNodeDefinition.SelectSingleNode(String.Format("xs:attribute[@name='{0}']"' att.Name)' WixFiles.XsdNsmgr); " is 152.
Long Statement,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,GetSelectedProperty,The length of the statement  "                XmlAttributePropertyDescriptor desc = CurrentGrid.SelectedGridItem.PropertyDescriptor as XmlAttributePropertyDescriptor; " is 120.
Long Statement,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,GetSelectedProperty,The length of the statement  "                CustomXmlPropertyDescriptorBase desc = CurrentGrid.SelectedGridItem.PropertyDescriptor as CustomXmlPropertyDescriptorBase; " is 122.
Long Statement,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,GetSelectedProperty,The length of the statement  "                throw new Exception(String.Format("Expected XmlAttributePropertyDescriptor' but got {0} in GetSelectedProperty"' typeString)); " is 126.
Long Statement,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,CreateNewCustomElement,The length of the statement  "                MessageBox.Show(String.Format("No location found to add \"{0}\" element' need element like module or product!"' elementName)); " is 126.
Long Statement,WixEdit.Panels,EditBinariesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditBinariesPanel.cs,GetValueAttributeName,The length of the statement  "            if (wixFiles.XsdDocument.SelectSingleNode("/xs:schema/xs:element[@name='Binary']/xs:complexType/xs:attribute[@name='SourceFile']"' wixFiles.XsdNsmgr) != null) " is 158.
Long Statement,WixEdit.Panels,EditBinariesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditBinariesPanel.cs,GetValueAttributeName,The length of the statement  "            else if (wixFiles.XsdDocument.SelectSingleNode("/xs:schema/xs:element[@name='Binary']/xs:complexType/xs:attribute[@name='src']"' wixFiles.XsdNsmgr) != null) " is 156.
Long Statement,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,GetCustomTableNode,The length of the statement  "            XmlNode table = WixFiles.WxsDocument.SelectSingleNode(String.Format("/wix:Wix/*/wix:CustomTable[@Id='{0}']"' tableId)' WixFiles.WxsNsmgr); " is 138.
Long Statement,WixEdit.Panels,CustomTableRowBindingList,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,ApplySortCore,The length of the statement  "                PropertyComparer<CustomTableRowElementAdapter> pc = new PropertyComparer<CustomTableRowElementAdapter>(property' direction); " is 124.
Long Statement,WixEdit.Panels,EditCustomTableDefinitionPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDefinitionPanel.cs,CurrentGrid_PropertyValueChanged,The length of the statement  "                XmlNodeList equalNamedColumns = pd.Attribute.OwnerElement.ParentNode.SelectNodes(String.Format("wix:Column[@Id='{0}']"' item.Value)' WixFiles.WxsNsmgr); " is 152.
Long Statement,WixEdit.Panels,EditCustomTableDefinitionPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDefinitionPanel.cs,CurrentGrid_PropertyValueChanged,The length of the statement  "                    MessageBox.Show(String.Format("There is already a column with the name \"{0}\"!"' item.Value)' "Duplicate column name"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 164.
Long Statement,WixEdit.Panels,EditCustomTableDefinitionPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDefinitionPanel.cs,CurrentGrid_PropertyValueChanged,The length of the statement  "                    foreach (XmlElement dataElement in pd.Attribute.OwnerElement.ParentNode.SelectNodes(String.Format("wix:Row/wix:Data[@Column='{0}']"' e.OldValue)' WixFiles.WxsNsmgr)) " is 165.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The length of the statement  "            newControlElementMenu = new IconMenuItem("New Control"' new Bitmap(WixFiles.GetResourceStream("elements.control.bmp"))); " is 120.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,OnPropertyGridPopupContextMenu,The length of the statement  "            XmlAttributePropertyDescriptor desc = CurrentGrid.SelectedGridItem.PropertyDescriptor as XmlAttributePropertyDescriptor; " is 120.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,OnPropertyGridPopupContextMenu,The length of the statement  "                XmlNode xmlAttributeDefinition = attAdapter.XmlNodeDefinition.SelectSingleNode(String.Format("xs:attribute[@name='{0}']"' att.Name)' WixFiles.XsdNsmgr); " is 152.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,OnImportWxsDialogsItem,The length of the statement  "                MessageBox.Show("Failed to load XML from file' is it a valid XML file?"' "Failed to load XML"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 139.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,OnImportWxsDialogsItem,The length of the statement  "                    MessageBox.Show("No location found to add UI element' need element like module or product!"' "Missing UI element"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 159.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,OnImportWxsDialogsItem,The length of the statement  "                    MessageBox.Show(String.Format("Skipped import of dialogs with the following ID's because dialogs with those ID's already exist:\r\n\r\n{0}"' String.Join("' "' (String[])duplicateDialogs.ToArray(typeof(String))))' "Skipped dialogs"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 282.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,GetDialogNode,The length of the statement  "            XmlNode dialog = WixFiles.WxsDocument.SelectSingleNode(String.Format("/wix:Wix/*/wix:UI/wix:Dialog[@Id='{0}']"' dialogId)' WixFiles.WxsNsmgr); " is 142.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,OnDeleteWxsDialogsItem,The length of the statement  "                    throw new Exception(String.Format("Unable to delete dialog \"{0}\"' the dialog could not be found in the source file."' currentDialogId)); " is 138.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,OnCopyWxsDialogsItem,The length of the statement  "                    throw new Exception(String.Format("Unable to copy dialog \"{0}\"' the dialog could not be found in the source file."' currentDialogId)); " is 136.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,OnDeletePropertyGridItem,The length of the statement  "            CustomXmlPropertyDescriptorBase desc = (CustomXmlPropertyDescriptorBase)CurrentGrid.SelectedGridItem.PropertyDescriptor; " is 120.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,IsAttributeAllowedOnControlType,The length of the statement  "                controlTypeAttributeMap.Add("CDROM"' new List<string>(new string[] { "DirectoryCombo"' "DirectoryList"' "VolumeCostList"' "VolumeSelectCombo" })); " is 146.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,IsAttributeAllowedOnControlType,The length of the statement  "                controlTypeAttributeMap.Add("Fixed"' new List<string>(new string[] { "DirectoryCombo"' "DirectoryList"' "VolumeCostList"' "VolumeSelectCombo" })); " is 146.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,IsAttributeAllowedOnControlType,The length of the statement  "                controlTypeAttributeMap.Add("Floppy"' new List<string>(new string[] { "DirectoryCombo"' "DirectoryList"' "VolumeCostList"' "VolumeSelectCombo" })); " is 147.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,IsAttributeAllowedOnControlType,The length of the statement  "                controlTypeAttributeMap.Add("RAMDisk"' new List<string>(new string[] { "DirectoryCombo"' "DirectoryList"' "VolumeCostList"' "VolumeSelectCombo" })); " is 148.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,IsAttributeAllowedOnControlType,The length of the statement  "                controlTypeAttributeMap.Add("Remote"' new List<string>(new string[] { "DirectoryCombo"' "DirectoryList"' "VolumeCostList"' "VolumeSelectCombo" })); " is 147.
Long Statement,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,IsAttributeAllowedOnControlType,The length of the statement  "                controlTypeAttributeMap.Add("Removable"' new List<string>(new string[] { "DirectoryCombo"' "DirectoryList"' "VolumeCostList"' "VolumeSelectCombo" })); " is 150.
Long Statement,WixEdit.Panels,EditFilesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditFilesPanel.cs,AddCustomTreeViewContextMenuItems,The length of the statement  "                IconMenuItem importFilesMenu = new IconMenuItem("&Import Files"' new Bitmap(WixFiles.GetResourceStream("bmp.import.bmp"))); " is 123.
Long Statement,WixEdit.Panels,EditFilesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditFilesPanel.cs,AddCustomTreeViewContextMenuItems,The length of the statement  "                IconMenuItem importFolderMenu = new IconMenuItem("&Import Folder"' new Bitmap(WixFiles.GetResourceStream("bmp.import.bmp"))); " is 125.
Long Statement,WixEdit.Panels,EditFilesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditFilesPanel.cs,ImportFoldersInDirectory,The length of the statement  "                    MessageBox.Show(String.Format("Failed to complete import: {0}\r\n\r\nThe import is aborted and could be partially completed."' ex.Message)' "Import Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 200.
Long Statement,WixEdit.Panels,EditFilesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditFilesPanel.cs,ImportFoldersInDirectory,The length of the statement  "                    ErrorReportHandler r = new ErrorReportHandler(ex' this.TopLevelControl' "An exception occured during the import! Please press OK to report this error to the WixEdit website' so this error can be fixed."); " is 204.
Long Statement,WixEdit.Panels,EditFilesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditFilesPanel.cs,ImportFilesInComponent,The length of the statement  "                    DialogResult result = MessageBox.Show(this' "Import Registry (*.reg) files to Registry elements?"' "Import?"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 166.
Long Statement,WixEdit.Panels,EditFilesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditFilesPanel.cs,ImportFilesInComponent,The length of the statement  "                        string message = String.Format("An exception occured during the import of \"{0}\"! Please press OK to report this error to the WixEdit website' so this error can be fixed."' fileInfo.Name); " is 189.
Long Statement,WixEdit.Panels,EditFilesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditFilesPanel.cs,ImportFilesInComponent,The length of the statement  "                    MessageBox.Show(this' "Import failed for the following files:\r\n\r\n" + errorMessageBuilder.ToString()' "Import failed"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 166.
Long Statement,WixEdit.Panels,EditIconsPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditIconsPanel.cs,GetValueAttributeName,The length of the statement  "            if (wixFiles.XsdDocument.SelectSingleNode("/xs:schema/xs:element[@name='Icon']/xs:complexType/xs:attribute[@name='SourceFile']"' wixFiles.XsdNsmgr) != null) " is 156.
Long Statement,WixEdit.Panels,EditIconsPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditIconsPanel.cs,GetValueAttributeName,The length of the statement  "            else if (wixFiles.XsdDocument.SelectSingleNode("/xs:schema/xs:element[@name='Icon']/xs:complexType/xs:attribute[@name='src']"' wixFiles.XsdNsmgr) != null) " is 154.
Long Statement,WixEdit.Panels,EditPropertiesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditPropertiesPanel.cs,GetValueAttributeName,The length of the statement  "            if (wixFiles.XsdDocument.SelectSingleNode("/xs:schema/xs:element[@name='Property']/xs:complexType/xs:attribute[@name='Value']"' wixFiles.XsdNsmgr) != null) " is 155.
Long Statement,WixEdit.Panels,EditPropertiesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditPropertiesPanel.cs,OnPropertyGridPopupContextMenu,The length of the statement  "                    MenuItem subMenuItem = new IconMenuItem("Remove " + selectedSubElements[0].Name' new Bitmap(WixFiles.GetResourceStream("bmp.new.bmp"))); " is 136.
Long Statement,WixEdit.Panels,EditPropertiesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditPropertiesPanel.cs,OnPropertyGridPopupContextMenu,The length of the statement  "                    MenuItem subMenuItem = new IconMenuItem("Multiple subitems in property are unsupported!"' new Bitmap(WixFiles.GetResourceStream("bmp.new.bmp"))); " is 145.
Long Statement,WixEdit.Panels,EditPropertiesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditPropertiesPanel.cs,OnNewSubPropertyGridItem,The length of the statement  "                    if (DialogResult.No == MessageBox.Show(String.Format("The property has the value \"{0}\"' adding an element {1} will remove this value.\r\n\r\nContinue adding the sub element {1}?"' selectedElement.GetAttribute("Value")' typeName)' "Remove existing property value?"' MessageBoxButtons.YesNo)) " is 292.
Long Statement,WixEdit.Panels,EditPropertiesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditPropertiesPanel.cs,OnNewSubPropertyGridItem,The length of the statement  "                if (DialogResult.No == MessageBox.Show(String.Format("The property has the value \"{0}\"' adding an element {1} will remove this value.\r\n\r\nContinue adding the sub element {1}?"' selectedElement.InnerText' typeName)' "Remove existing property value?"' MessageBoxButtons.YesNo)) " is 280.
Long Statement,WixEdit.Panels,EditUIPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditUIPanel.cs,IsOwnerOfNode,The length of the statement  "            bool ret = (editDialogPanel.IsOwnerOfNode(node) || editUISequencePanel.IsOwnerOfNode(node) || editUITextPanel.IsOwnerOfNode(node) || editProgressTextPanel.IsOwnerOfNode(node) || editErrorPanel.IsOwnerOfNode(node)); " is 214.
Long Statement,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,OpenLine,The length of the statement  "            outputTextBox.SelectionBackColor = Color.DarkBlue; //SystemColors.Highlight; // HighLight colors seem not to be working. " is 120.
Long Statement,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,LaunchFile,The length of the statement  "                    (File.GetLastWriteTimeUtc(outputFile).CompareTo(File.GetLastWriteTimeUtc(Assembly.GetExecutingAssembly().Location)) > 0)) == false " is 130.
Long Statement,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,LaunchFile,The length of the statement  "                MessageBox.Show("Failed to show XML' is it a valid XML file?\r\n\r\nMessage:\r\n" + ex.Message' "Failed to load XML"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 162.
Long Statement,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,InternalThreadRunMultiple,The length of the statement  "                    Invoke(invokeOutputLine' new object[] { "Error in " + Path.GetFileNameWithoutExtension(activeProcess.StartInfo.FileName)' true }); " is 130.
Long Statement,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,Output,The length of the statement  "            outputTextBox.SelectedRtf = String.Format(@"{{\rtf1\ansi\ansicpg1252\deff0\deflang1033{{\fonttbl{{\f0\fmodern\fprq1\fcharset0 Courier New;}}}}" + " is 145.
Long Statement,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,OutputLine,The length of the statement  "            outputTextBox.SelectedRtf = String.Format(@"{{\rtf1\ansi\ansicpg1252\deff0\deflang1033{{\fonttbl{{\f0\fmodern\fprq1\fcharset0 Courier New;}}}}" + " is 145.
Long Statement,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,OutputStart,The length of the statement  "            OutputLine(String.Format("----- Starting {0} {1} at {2}"' processStartInfo.FileName' processStartInfo.Arguments' start)' true); " is 127.
Long Statement,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,Cancel,The length of the statement  "            if (DialogResult.Yes == MessageBox.Show("Do you want to stop your current action?"' "WixEdit"' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1)) " is 178.
Long Statement,WixEdit.Panels,SearchPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\SearchPanel.cs,InternalSearch,The length of the statement  "                string searchAttrib = String.Format("//@*[contains(translate(.''ABCDEFGHIJKLMNOPQRSTUVWXYZ'''abcdefghijklmnopqrstuvwxyz')'{0})]"' XPathHelper.EscapeXPathInputString(currentSearch.ToLower())); " is 191.
Long Statement,WixEdit.Panels,SearchPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\SearchPanel.cs,InternalSearch,The length of the statement  "                string searchElement = String.Format("//*[contains(translate(text()''ABCDEFGHIJKLMNOPQRSTUVWXYZ'''abcdefghijklmnopqrstuvwxyz')'{0})]"' XPathHelper.EscapeXPathInputString(currentSearch.ToLower())); " is 196.
Long Statement,WixEdit.Panels,SearchPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\SearchPanel.cs,InternalSearch,The length of the statement  "                    Output(String.Format("Found \"{0}\" {1} {2}"' currentSearch' lastNodes.Count' (lastNodes.Count == 1) ? "time" : "times")' true); " is 128.
Long Statement,WixEdit.Panels,SearchPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\SearchPanel.cs,OpenLine,The length of the statement  "                outputTextBox.SelectionBackColor = Color.DarkBlue; //SystemColors.Highlight; // HighLight colors seem not to be working. " is 120.
Long Statement,WixEdit.Panels,SearchPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\SearchPanel.cs,OutputRaw,The length of the statement  "            outputTextBox.SelectedRtf = String.Format(@"{{\rtf1\ansi\ansicpg1252\deff0\deflang1033{{\fonttbl{{\f0\fmodern\fprq1\fcharset0 Courier New;}}}}" + " is 145.
Long Statement,WixEdit.PropertyGridExtensions,BinaryElementPropertyDescriptor,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\BinaryElementPropertyDescriptor.cs,SetValue,The length of the statement  "                    MessageBox.Show(String.Format("{0} could not be located"' path)' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 122.
Long Statement,WixEdit.PropertyGridExtensions,CustomPropertyGrid,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\CustomPropertyGrid.cs,ProcessDialogKey,The length of the statement  "                CustomXmlPropertyDescriptorBase descriptor = this.SelectedGridItem.PropertyDescriptor as CustomXmlPropertyDescriptorBase; " is 121.
Long Statement,WixEdit.PropertyGridExtensions,CustomTableRowElementPropertyDescriptor,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\CustomTableRowElementPropertyDescriptor.cs,GetValue,The length of the statement  "            XmlNode node = adapter.XmlElement.SelectSingleNode(String.Format("wix:Data[@Column='{0}']"' this.Name)' this.wixFiles.WxsNsmgr); " is 128.
Long Statement,WixEdit.PropertyGridExtensions,CustomTableRowElementPropertyDescriptor,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\CustomTableRowElementPropertyDescriptor.cs,SetValue,The length of the statement  "            XmlNode node = adapter.XmlElement.SelectSingleNode(String.Format("wix:Data[@Column='{0}']"' this.Name)' this.wixFiles.WxsNsmgr); " is 128.
Long Statement,WixEdit.PropertyGridExtensions,ErrorElementAdapter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ErrorElementAdapter.cs,GetProperties,The length of the statement  "                ErrorElementPropertyDescriptor pd = new ErrorElementPropertyDescriptor(wixFiles' errorNode' errorNode.Attributes["Id"].Value' attrArray); " is 137.
Long Statement,WixEdit.PropertyGridExtensions,FileXmlAttributePropertyDescriptor,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\FileXmlAttributePropertyDescriptor.cs,SetValue,The length of the statement  "                    MessageBox.Show(String.Format("{0} could not be located"' path)' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 122.
Long Statement,WixEdit.PropertyGridExtensions,ProgressTextElementAdapter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ProgressTextElementAdapter.cs,GetProperties,The length of the statement  "                ProgressTextElementPropertyDescriptor pd = new ProgressTextElementPropertyDescriptor(wixFiles' progressTextNode' progressTextNode.Attributes["Action"].Value' attrArray); " is 169.
Long Statement,WixEdit.PropertyGridExtensions,UITextElementAdapter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\UITextElementAdapter.cs,GetProperties,The length of the statement  "                UITextElementPropertyDescriptor pd = new UITextElementPropertyDescriptor(wixFiles' uiTextNode' uiTextNode.Attributes["Id"].Value' attrArray); " is 141.
Long Statement,WixEdit.PropertyGridExtensions,XmlAttributeAdapter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\XmlAttributeAdapter.cs,RemoveProperty,The length of the statement  "                XmlNode xmlAttributeDefinition = xmlNodeDefinition.SelectSingleNode(String.Format("xs:attribute[@name='{0}']"' xmlElement.Name)' wixFiles.XsdNsmgr); " is 148.
Long Statement,WixEdit.PropertyGridExtensions,XmlAttributeAdapter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\XmlAttributeAdapter.cs,GetProperties,The length of the statement  "                XmlNode deprecated = xmlAttributeDefinition.SelectSingleNode("xs:annotation/xs:appinfo/xse:deprecated"' wixFiles.XsdNsmgr); " is 123.
Long Statement,WixEdit.PropertyGridExtensions,XmlAttributeAdapter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\XmlAttributeAdapter.cs,GetProperties,The length of the statement  "                    FileXmlAttributePropertyDescriptor pd = new FileXmlAttributePropertyDescriptor(xmlNode' wixFiles' xmlAttributeDefinition' xmlAttributeDefinition.Attributes["name"].Value' attrArray); " is 182.
Long Statement,WixEdit.PropertyGridExtensions,XmlAttributeAdapter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\XmlAttributeAdapter.cs,GetAttributeTypeConverter,The length of the statement  "            XmlNode xmlDefinitionRestriction = xmlNodeDefinition.SelectSingleNode(String.Format("//xs:simpleType[@name='{0}']/xs:restriction"' name)' wixFiles.XsdNsmgr); " is 157.
Long Statement,WixEdit.Settings,BinDirectoryStructure,C:\repos\sebasbaumh_WixEdit\src\Settings\BinDirectoryStructure.cs,HasSameBinDirectory,The length of the statement  "            if (wixEditData.CandleLocation == null && wixEditData.DarkLocation == null && wixEditData.LightLocation == null && wixEditData.XsdsLocation == null) { " is 150.
Long Statement,WixEdit.Settings,BinDirectoryStructureEditor,C:\repos\sebasbaumh_WixEdit\src\Settings\BinDirectoryStructureEditor.cs,EditValue,The length of the statement  "            DescriptionAttribute descAtt = (DescriptionAttribute) context.PropertyDescriptor.Attributes[typeof(DescriptionAttribute)]; " is 122.
Long Statement,WixEdit.Settings,BinDirectoryStructureEditor,C:\repos\sebasbaumh_WixEdit\src\Settings\BinDirectoryStructureEditor.cs,EditValue,The length of the statement  "            DescriptionAttribute descAtt = (DescriptionAttribute) context.PropertyDescriptor.Attributes[typeof(DescriptionAttribute)]; " is 122.
Long Statement,WixEdit.Settings,WixEditSettings,C:\repos\sebasbaumh_WixEdit\src\Settings\WixEditSettings.cs,LoadFromDisk,The length of the statement  "                            MessageBox.Show(String.Format("The version of the configuration file is newer than the version of this application' if any problems occur remove the settings file: {0}."' SettingsFile)' "Configuration file"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 254.
Long Statement,WixEdit.Settings,WixEditSettings,C:\repos\sebasbaumh_WixEdit\src\Settings\WixEditSettings.cs,LoadFromDisk,The length of the statement  "                MessageBox.Show("Failed to convert the existing configuration file to the current version' using a default configuration."' "Configuration file"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 192.
Long Statement,WixEdit.Settings,WixEditSettings,C:\repos\sebasbaumh_WixEdit\src\Settings\WixEditSettings.cs,GetProperties,The length of the statement  "            foreach (PropertyInfo propInfo in GetType().GetProperties(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance)) { " is 133.
Long Statement,WixEdit.Settings,WixEditSettings,C:\repos\sebasbaumh_WixEdit\src\Settings\WixEditSettings.cs,GetProperties,The length of the statement  "                propertyDescriptors.Add(new CustomDisplayNamePropertyDescriptor(null' propInfo' (Attribute[]) atts.ToArray(typeof(Attribute))' true)); " is 134.
Long Statement,WixEdit.Settings,WixEditSettings,C:\repos\sebasbaumh_WixEdit\src\Settings\WixEditSettings.cs,GetProperties,The length of the statement  "            return new PropertyDescriptorCollection((PropertyDescriptor[]) propertyDescriptors.ToArray(typeof(PropertyDescriptor))); " is 120.
Long Statement,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,importDirectoryButton_Click,The length of the statement  "                MessageBox.Show("Please select a folder in the tree first."' "Select folder"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 122.
Long Statement,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,importFilesButton_Click,The length of the statement  "                MessageBox.Show("Please select a component in the tree first."' "Select folder"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 125.
Long Statement,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,removeButton_Click,The length of the statement  "                MessageBox.Show("Please select an item in the tree first."' "Select folder"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 121.
Long Statement,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,removeButton_Click,The length of the statement  "                MessageBox.Show("Cannot remove the SourceDir with the id \"TARGETDIR\"."' "Select folder"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 135.
Long Statement,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,newFolderButton_Click,The length of the statement  "                MessageBox.Show("Please select a folder in the tree first."' "Select folder"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 122.
Long Statement,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,contextMenu_Popup,The length of the statement  "            //    IconMenuItem importFilesMenu = new IconMenuItem("&Import Files"' new Bitmap(WixFiles.GetResourceStream("bmp.import.bmp"))); " is 129.
Long Statement,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,contextMenu_Popup,The length of the statement  "            //    IconMenuItem newFolderMenu = new IconMenuItem("&New Folder"' new Bitmap(WixFiles.GetResourceStream("bmp.new.bmp"))); " is 122.
Long Statement,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,contextMenu_Popup,The length of the statement  "            //    IconMenuItem importFolderMenu = new IconMenuItem("&Import Folder"' new Bitmap(WixFiles.GetResourceStream("bmp.import.bmp"))); " is 131.
Long Statement,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,ImportFoldersInDirectory,The length of the statement  "                    MessageBox.Show(String.Format("Failed to complete import: {0}\r\n\r\nThe import is aborted and could be partially completed."' ex.Message)' "Import Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 200.
Long Statement,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,ImportFoldersInDirectory,The length of the statement  "                    ErrorReportHandler r = new ErrorReportHandler(ex' this.TopLevelControl' "An exception occured during the import! Please press OK to report this error to the WixEdit website' so this error can be fixed."); " is 204.
Long Statement,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,ImportFilesInComponent,The length of the statement  "                    DialogResult result = MessageBox.Show(this' "Import Registry (*.reg) files to Registry elements?"' "Import?"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 166.
Long Statement,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,ImportFilesInComponent,The length of the statement  "                        string message = String.Format("An exception occured during the import of \"{0}\"! Please press OK to report this error to the WixEdit website' so this error can be fixed."' fileInfo.Name); " is 189.
Long Statement,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,ImportFilesInComponent,The length of the statement  "                    MessageBox.Show(this' "Import failed for the following files:\r\n\r\n" + errorMessageBuilder.ToString()' "Import failed"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 166.
Long Statement,WixEdit.Wizard,FinishSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FinishSheet.cs,OnShow,The length of the statement  "                XmlNodeList componentRefNodes = wxsDoc.SelectNodes(String.Format("//wix:ComponentRef[@Id='{0}']"' componentNode.GetAttribute("Id"))' wxsNsmgr); " is 143.
Long Statement,WixEdit.Wizard,FinishSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FinishSheet.cs,OnShow,The length of the statement  "                    XmlNodeList targetDir = Wizard.WixFiles.WxsDocument.SelectNodes("//wix:Directory[@Id='TARGETDIR']"' Wizard.WixFiles.WxsNsmgr); " is 126.
Long Statement,WixEdit.Wizard,FinishSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FinishSheet.cs,OnShow,The length of the statement  "                    descriptionLabel.Text = "Please note:\r\nThere are more than one Feature elements to add the orphaned Components to. Please make sure all components are added to one or more feature.\r\n\r\n" " is 191.
Long Statement,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,checkList_SelectedIndexChanged,The length of the statement  "                templateDescriptionLabel.Height = templateDescriptionLabel.GetPreferredSize(new Size(templateDescriptionLabel.Width' 1000)).Height; " is 131.
Long Statement,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The length of the statement  "                    XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr); " is 132.
Long Statement,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The length of the statement  "                        label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " "); " is 129.
Long Statement,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnNext,The length of the statement  "                        target = Wizard.WixFiles.WxsDocument.SelectSingleNode(TranslateNamespace(templatePart.GetAttribute("Target"))' Wizard.WixFiles.WxsNsmgr); " is 137.
Long Statement,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The length of the statement  "            this.cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The length of the statement  "            this.nextButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The length of the statement  "            this.backButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The length of the statement  "            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 142.
Long Statement,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The length of the statement  "            this.contentPanel.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 148.
Long Statement,WixEdit.Xml,ElementLocator,C:\repos\sebasbaumh_WixEdit\src\Xml\ElementLocator.cs,GetUIElement,The length of the statement  "                    XmlNode def = wixFiles.XsdDocument.SelectSingleNode(String.Format("/xs:schema/xs:element[@name='{0}']/xs:complexType/xs:sequence//xs:element[@ref='UI']"' possibleParent.Name)' wixFiles.XsdNsmgr); " is 195.
Long Statement,WixEdit.Xml,IncludeManager,C:\repos\sebasbaumh_WixEdit\src\Xml\IncludeManager.cs,SaveIncludes,The length of the statement  "                    } while (DialogResult.Retry == MessageBox.Show("Failed to save include file. " + theEx.Message' "Failed to save include file"' MessageBoxButtons.RetryCancel' MessageBoxIcon.Warning)); " is 183.
Long Statement,WixEdit.Xml,UndoManager,C:\repos\sebasbaumh_WixEdit\src\Xml\UndoManager.cs,HandleChangedInclude,The length of the statement  "                    MessageBox.Show(String.Format("You cannot change include file \"{0}\"."' cmd.AffectedInclude)' "Cannot modify include file."' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 176.
Long Statement,WixEdit.Xml,UndoManager,C:\repos\sebasbaumh_WixEdit\src\Xml\UndoManager.cs,HandleChangedInclude,The length of the statement  "                    throw new ApplicationException("Not allowed to change include file."' new IncludeFileChangedException(this' cmd' true)); " is 120.
Long Statement,WixEdit.Xml,UndoManager,C:\repos\sebasbaumh_WixEdit\src\Xml\UndoManager.cs,HandleChangedInclude,The length of the statement  "                    DialogResult result = MessageBox.Show(String.Format("You are changing \"{0}\"' do you wish to continue?"' cmd.AffectedInclude)' "Modify include file?"' MessageBoxButtons.YesNo' MessageBoxIcon.Question); " is 202.
Long Statement,WixEdit.Xml,UndoManager,C:\repos\sebasbaumh_WixEdit\src\Xml\UndoManager.cs,HandleChangedInclude,The length of the statement  "                            throw new ApplicationException("Not allowed to change include file."' new IncludeFileChangedException(this' cmd' false)); " is 121.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,FromTemplate,The length of the statement  "  <Product Id=""{0}"" Name=""TestProduct"" Language=""1033"" Version=""0.0.0.1"" Manufacturer=""WixEdit"" UpgradeCode=""{1}""> " is 124.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,LoadWxsFile,The length of the statement  "                string errorMessage = String.Format("\"{0}\" has the wrong namespace!\r\n\r\nFound namespace \"{1}\"'\r\nbut WiX binaries version \"{2}\" require \"{3}\".\r\n\r\nYou can either convert the WiX source file to use the correct namespace (use WixCop.exe for upgrading from 2.0 to 3.0)' or configure the correct version of the WiX binaries in the WixEdit settings."' wxsFile.Name' wxsDocument.DocumentElement.GetAttribute("xmlns")' WixEditSettings.Instance.WixBinariesVersion' WixNamespaceUri); " is 489.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,LoadWxsFile,The length of the statement  "                MessageBox.Show(String.Format("\"{0}\" is read-only."' wxsFile.Name)' "Read Only!"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 130.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,LoadNewWxsFile,The length of the statement  "                string errorMessage = String.Format("\"{0}\" has the wrong namespace!\r\n\r\nFound namespace \"{1}\"'\r\nbut WiX binaries version \"{2}\" require \"{3}\".\r\n\r\nYou can either convert the WiX source file to use the correct namespace (use WixCop.exe for upgrading from 2.0 to 3.0)' or configure the correct version of the WiX binaries in the WixEdit settings."' wxsFile.Name' wxsDocument.DocumentElement.GetAttribute("xmlns")' WixEditSettings.Instance.WixBinariesVersion' WixNamespaceUri); " is 489.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,GetXsdElementNode,The length of the statement  "                        ret = extensionXsdDocument.SelectSingleNode(String.Format("//xs:element[@name='{0}']"' theNodeName)' extensionXsdNsmgr); " is 120.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,GetXsdSubElements,The length of the statement  "                XmlNodeList xmlSubElements = xsdDocument.SelectNodes(String.Format("/xs:schema/xs:element[@name='{0}']/xs:complexType//xs:element"' elementName)' xsdNsmgr); " is 156.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,GetXsdSubElements,The length of the statement  "                    XmlNodeList subNodes = extXsd.SelectNodes(String.Format("/xs:schema/xs:element[xs:annotation/xs:appinfo/xse:parent/@ref='{0}']"' elementName)' extXsdNsmgr); " is 156.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,GetXsdSubElements,The length of the statement  "                    XmlNodeList xmlSubElements = extXsd.SelectNodes(String.Format("/xs:schema/xs:element[@name='{0}']/xs:complexType//xs:element"' theNodeName)' extXsdNsmgr); " is 154.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,ReloadExtensionXsds,The length of the statement  "                WixEditSettings.Instance.WixBinariesDirectory.Xsds != null && WixEditSettings.Instance.WixBinariesDirectory.Xsds.Length > 0) " is 124.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,GetLightArguments,The length of the statement  "                string ret = String.Format("-nologo \"{0}\" -out \"{1}\""' Path.ChangeExtension(wxsFile.FullName' "wixobj")' OutputFile); " is 121.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,GetCandleArguments,The length of the statement  "                string ret = String.Format("-nologo \"{0}\" -out \"{1}\""' wxsFile.FullName' Path.ChangeExtension(wxsFile.FullName' "wixobj")); " is 127.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,Save,The length of the statement  "                MessageBox.Show(String.Format("\"{0}\" is read-only' cannot save this file."' wxsFile.Name)' "Read Only!"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 153.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,Save,The length of the statement  "                    if (DialogResult.Yes == MessageBox.Show(String.Format("Do you want to save the following changed include files?\r\n\r\n\x2022 {0}"' filesString)' "Save?"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) " is 205.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,OnWxsChanged,The length of the statement  "                result = MessageBox.Show(mainForm' String.Format("An external program changed \"{0}\"' do you want to load the changes from disk and ignore the changes in memory?"' wxsFile.Name)' "Reload?"' MessageBoxButtons.YesNo' MessageBoxIcon.Question); " is 241.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,OnWxsChanged,The length of the statement  "                result = MessageBox.Show(mainForm' String.Format("An external program changed \"{0}\"' do you want to load the changes from disk?"' wxsFile.Name)' "Reload?"' MessageBoxButtons.YesNo' MessageBoxIcon.Question); " is 208.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,OnWxsChanged,The length of the statement  "                    MessageBox.Show(String.Format("Access is denied. ({0}))"' wxsFile.Name)' "Acces denied"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 139.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,OnWxsChanged,The length of the statement  "                    MessageBox.Show(String.Format("Failed to open file. ({0}) The xml is not valid:\r\n\r\n{1}"' wxsFile.Name' ex.Message)' "Open failed"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 185.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,OnWxsChanged,The length of the statement  "                    MessageBox.Show(String.Format("Cannot open file:\r\n\r\n{0}"' ex.Message)' "Open failed"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 140.
Long Statement,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,OnWxsChanged,The length of the statement  "                    MessageBox.Show(String.Format("Failed to open file. ({0}))"' wxsFile.Name)' "Open failed"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 141.
Long Statement,WixEdit.Xml,XmlDocumentationManager,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDocumentationManager.cs,HasDocumentation,The length of the statement  "                documentation = xmlNodeDefinition.SelectSingleNode("xs:simpleContent/xs:extension/xs:annotation/xs:documentation"' wixFiles.XsdNsmgr); " is 134.
Long Statement,WixEdit.Xml,XmlDocumentationManager,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDocumentationManager.cs,GetXmlNodeDefinition,The length of the statement  "                    xmlNodeDefinition = xmlNodeElement.SelectSingleNode(String.Format("xs:complexType/xs:attribute[@name='{0}']"' xmlNode.Name)' wixFiles.XsdNsmgr); " is 144.
Long Statement,WixEdit.Xml,XmlDocumentationManager,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDocumentationManager.cs,GetXmlNodeDefinition,The length of the statement  "                xmlNodeDefinition = wixFiles.XsdDocument.SelectSingleNode(String.Format("/xs:schema/xs:complexType[@name='{0}']/xs:simpleContent/xs:extension"' xmlNodeElement.Attributes["type"].Value)' wixFiles.XsdNsmgr); " is 205.
Long Statement,WixEdit.Xml,XmlDocumentationManager,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDocumentationManager.cs,GetXmlNodeDefinition,The length of the statement  "                    xmlNodeDefinition = wixFiles.XsdDocument.SelectSingleNode(String.Format("/xs:schema/xs:complexType[@name='{0}']"' xmlNodeElement.Attributes["type"].Value)' wixFiles.XsdNsmgr); " is 175.
Complex Conditional,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The conditional expression  "(clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)"  is complex.
Complex Conditional,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The conditional expression  "(clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)"  is complex.
Complex Conditional,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,GenerateDialog,The conditional expression  "dialog.Attributes["Width"] == null ||                  dialog.Attributes["Width"].Value.Trim().Length == 0 ||                  dialog.Attributes["Height"] == null ||                  dialog.Attributes["Height"].Value.Trim().Length == 0"  is complex.
Complex Conditional,WixEdit.PropertyGridExtensions,CustomPropertyGrid,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\CustomPropertyGrid.cs,ProcessDialogKey,The conditional expression  "SelectedGridItem != null &&                  ActiveControl != null &&                  ActiveControl.GetType().ToString() == "System.Windows.Forms.PropertyGridInternal.PropertyGridView" &&                  keyData == Keys.Delete"  is complex.
Complex Conditional,WixEdit.PropertyGridExtensions,IntegerConverter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\IntegerConverter.cs,ConvertFrom,The conditional expression  "textValue.StartsWith("0x") ||                           textValue.StartsWith("0X") ||                          textValue.StartsWith("&h") ||                          textValue.StartsWith("&H")"  is complex.
Complex Conditional,WixEdit.PropertyGridExtensions,XmlAttributeAdapter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\XmlAttributeAdapter.cs,GetProperties,The conditional expression  "(XmlNodeDefinition.Name == "xs:extension" &&                      ( (xmlNode.InnerText != null && xmlNode.InnerText.Length > 0) || showInnerTextIfEmpty == true) ) ||                  (XmlNodeDefinition.Name == "xs:element" && showInnerTextIfEmpty == true)"  is complex.
Complex Conditional,WixEdit.PropertyGridExtensions,XmlAttributeAdapter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\XmlAttributeAdapter.cs,GetAttributeTypeConverter,The conditional expression  "xmlAttributeDefinition.Attributes["name"] != null &&                  xmlAttributeDefinition.Attributes["name"].Value == "Type" &&                  XmlNodeElement.Attributes["name"] != null &&                  XmlNodeElement.Attributes["name"].Value == "Control""  is complex.
Complex Conditional,WixEdit.PropertyGridExtensions,XmlAttributeAdapter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\XmlAttributeAdapter.cs,GetAttributeTypeConverter,The conditional expression  "xmlDefinitionRestriction != null &&                  xmlDefinitionRestriction.Attributes["base"] != null &&                  xmlDefinitionRestriction.Attributes["base"].Value != null &&                  xmlDefinitionRestriction.Attributes["base"].Value.Length > 0"  is complex.
Complex Conditional,WixEdit.Settings,BinDirectoryStructure,C:\repos\sebasbaumh_WixEdit\src\Settings\BinDirectoryStructure.cs,HasSameBinDirectory,The conditional expression  "wixEditData.CandleLocation == null && wixEditData.DarkLocation == null && wixEditData.LightLocation == null && wixEditData.XsdsLocation == null"  is complex.
Complex Conditional,WixEdit.Settings,BinDirectoryStructure,C:\repos\sebasbaumh_WixEdit\src\Settings\BinDirectoryStructure.cs,HasSameBinDirectory,The conditional expression  "Candle == null || Dark == null || Light == null || Xsds == null"  is complex.
Complex Conditional,WixEdit.Settings,WixEditData,C:\repos\sebasbaumh_WixEdit\src\Settings\WixEditSettings.cs,WixEditData,The conditional expression  "!String.IsNullOrEmpty(BinDirectory) &&                      (String.IsNullOrEmpty(DarkLocation) && String.IsNullOrEmpty(CandleLocation) && String.IsNullOrEmpty(LightLocation) && String.IsNullOrEmpty(XsdsLocation))"  is complex.
Empty Catch Block,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,FillTree,The method has an empty catch block.
Empty Catch Block,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,getSubDirs,The method has an empty catch block.
Empty Catch Block,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,getSubDirs,The method has an empty catch block.
Empty Catch Block,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,fixPath,The method has an empty catch block.
Empty Catch Block,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,_pathTextBox_KeyUp,The method has an empty catch block.
Empty Catch Block,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The method has an empty catch block.
Empty Catch Block,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,FindOtherProcess,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,ReadFonts,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddButtons,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddEditBoxes,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddCheckBoxes,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddPathEditBoxes,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddLines,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddTexts,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddRftTextBoxes,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddGroupBoxes,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddIcons,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddIcons,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddListBoxes,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddComboBoxes,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddProgressBars,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddRadioButtonGroups,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddMaskedEdits,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddVolumeCostLists,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddVolumeComboBoxes,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddDirectoryCombos,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddDirectoryLists,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddSelectionTrees,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddBackgroundBitmaps,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddBackgroundBitmaps,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddHyperlinks,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,AddTreeNodesRecursive,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,SetDefaultValues,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,ShowElement,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,ReadLogFile,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,ReadLogFile,The method has an empty catch block.
Empty Catch Block,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,Cancel,The method has an empty catch block.
Empty Catch Block,WixEdit.Settings,WixEditSettings,C:\repos\sebasbaumh_WixEdit\src\Settings\WixEditSettings.cs,LoadFromDisk,The method has an empty catch block.
Empty Catch Block,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,AddTreeNodesRecursive,The method has an empty catch block.
Magic Number,WixEdit.About,AboutForm,C:\repos\sebasbaumh_WixEdit\src\About\AboutForm.cs,Initialize,The following statement contains a magic number: Width = 320;
Magic Number,WixEdit.About,AboutForm,C:\repos\sebasbaumh_WixEdit\src\About\AboutForm.cs,Initialize,The following statement contains a magic number: Height = 160;
Magic Number,WixEdit.About,AboutForm,C:\repos\sebasbaumh_WixEdit\src\About\AboutForm.cs,Initialize,The following statement contains a magic number: int labelHeight = 16;
Magic Number,WixEdit.About,AboutForm,C:\repos\sebasbaumh_WixEdit\src\About\AboutForm.cs,Initialize,The following statement contains a magic number: versionLabel.Left = 70;
Magic Number,WixEdit.About,AboutForm,C:\repos\sebasbaumh_WixEdit\src\About\AboutForm.cs,Initialize,The following statement contains a magic number: versionLabel.Top = 86;
Magic Number,WixEdit.About,AboutForm,C:\repos\sebasbaumh_WixEdit\src\About\AboutForm.cs,Initialize,The following statement contains a magic number: versionLabel.Width = 300;
Magic Number,WixEdit.About,AboutForm,C:\repos\sebasbaumh_WixEdit\src\About\AboutForm.cs,Initialize,The following statement contains a magic number: copyrightLabel.Left = 70;
Magic Number,WixEdit.About,AboutForm,C:\repos\sebasbaumh_WixEdit\src\About\AboutForm.cs,Initialize,The following statement contains a magic number: copyrightLabel.Width = 300;
Magic Number,WixEdit.About,AboutForm,C:\repos\sebasbaumh_WixEdit\src\About\AboutForm.cs,Initialize,The following statement contains a magic number: urlLabel.Left = 70;
Magic Number,WixEdit.About,AboutForm,C:\repos\sebasbaumh_WixEdit\src\About\AboutForm.cs,Initialize,The following statement contains a magic number: urlLabel.Width = 160;
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawControl,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {      			tabRectangle.Width += 7;      			tabRectangle.Height += 8;         		    tabRectangle.Offset(-4' -5);              } else {      			tabRectangle.Width += 7;      			tabRectangle.Height += 7;         		    tabRectangle.Offset(-4' -4);              }
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawControl,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {      			tabRectangle.Width += 7;      			tabRectangle.Height += 8;         		    tabRectangle.Offset(-4' -5);              } else {      			tabRectangle.Width += 7;      			tabRectangle.Height += 7;         		    tabRectangle.Offset(-4' -4);              }
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawControl,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {      			tabRectangle.Width += 7;      			tabRectangle.Height += 8;         		    tabRectangle.Offset(-4' -5);              } else {      			tabRectangle.Width += 7;      			tabRectangle.Height += 7;         		    tabRectangle.Offset(-4' -4);              }
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawControl,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {      			tabRectangle.Width += 7;      			tabRectangle.Height += 8;         		    tabRectangle.Offset(-4' -5);              } else {      			tabRectangle.Width += 7;      			tabRectangle.Height += 7;         		    tabRectangle.Offset(-4' -4);              }
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawControl,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {      			tabRectangle.Width += 7;      			tabRectangle.Height += 8;         		    tabRectangle.Offset(-4' -5);              } else {      			tabRectangle.Width += 7;      			tabRectangle.Height += 7;         		    tabRectangle.Offset(-4' -4);              }
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawControl,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {      			tabRectangle.Width += 7;      			tabRectangle.Height += 8;         		    tabRectangle.Offset(-4' -5);              } else {      			tabRectangle.Width += 7;      			tabRectangle.Height += 7;         		    tabRectangle.Offset(-4' -4);              }
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawControl,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {      			tabRectangle.Width += 7;      			tabRectangle.Height += 8;         		    tabRectangle.Offset(-4' -5);              } else {      			tabRectangle.Width += 7;      			tabRectangle.Height += 7;         		    tabRectangle.Offset(-4' -4);              }
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawControl,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {      			tabRectangle.Width += 7;      			tabRectangle.Height += 8;         		    tabRectangle.Offset(-4' -5);              } else {      			tabRectangle.Width += 7;      			tabRectangle.Height += 7;         		    tabRectangle.Offset(-4' -4);              }
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: int isSelectOffset = 2;
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: Point[] pts = new Point[6];
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 3);  				pts[1] = new Point(boundsRectangle.Left' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[2] = new Point(boundsRectangle.Left + 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Top - 2 + isSelectOffset);  				pts[4] = new Point(boundsRectangle.Right' boundsRectangle.Top + 2 - 2 + isSelectOffset);  				pts[5] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 3);  			} else {  				pts[0] = new Point(boundsRectangle.Left' boundsRectangle.Top + 1);  				pts[1] = new Point(boundsRectangle.Right' boundsRectangle.Top + 1);  				pts[2] = new Point(boundsRectangle.Right' boundsRectangle.Bottom - 2 - isSelectOffset);  				pts[3] = new Point(boundsRectangle.Right - 2' boundsRectangle.Bottom - isSelectOffset);  				pts[4] = new Point(boundsRectangle.Left + 2' boundsRectangle.Bottom - isSelectOffset);  				pts[5] = new Point(boundsRectangle.Left' boundsRectangle.Bottom - 2 - isSelectOffset);  			}
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (isSelected) {      			g.DrawPolygon(SystemPens.ControlDark' pts);    				Pen pen = new Pen(tabPage.BackColor);  				if  (this.Alignment == TabAlignment.Top) {  					g.DrawLine(pen' boundsRectangle.Left + 1' boundsRectangle.Bottom - 3' boundsRectangle.Right - 1' boundsRectangle.Bottom-3);                  } else {  					g.DrawLine(pen' boundsRectangle.Left + 1' boundsRectangle.Top + 1' boundsRectangle.Right - 1' boundsRectangle.Top+1);  				}  								  				pen.Dispose();  			} else {      			g.DrawPolygon(SystemPens.ControlDark' pts);              }
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (isSelected) {      			g.DrawPolygon(SystemPens.ControlDark' pts);    				Pen pen = new Pen(tabPage.BackColor);  				if  (this.Alignment == TabAlignment.Top) {  					g.DrawLine(pen' boundsRectangle.Left + 1' boundsRectangle.Bottom - 3' boundsRectangle.Right - 1' boundsRectangle.Bottom-3);                  } else {  					g.DrawLine(pen' boundsRectangle.Left + 1' boundsRectangle.Top + 1' boundsRectangle.Right - 1' boundsRectangle.Top+1);  				}  								  				pen.Dispose();  			} else {      			g.DrawPolygon(SystemPens.ControlDark' pts);              }
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {         		    tabTextArea.Offset(0' -2);                  if (isSelected == false) {         		        tabTextArea.Offset(0' isSelectOffset/2);                  }              } else {         		    tabTextArea.Offset(0' 1);                  if (isSelected == false) {         		        tabTextArea.Offset(0' isSelectOffset/-2);                  }              }
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {         		    tabTextArea.Offset(0' -2);                  if (isSelected == false) {         		        tabTextArea.Offset(0' isSelectOffset/2);                  }              } else {         		    tabTextArea.Offset(0' 1);                  if (isSelected == false) {         		        tabTextArea.Offset(0' isSelectOffset/-2);                  }              }
Magic Number,WixEdit.Controls,CustomTabControl,C:\repos\sebasbaumh_WixEdit\src\Controls\CustomTabControl.cs,DrawTab,The following statement contains a magic number: if (this.Alignment == TabAlignment.Top) {         		    tabTextArea.Offset(0' -2);                  if (isSelected == false) {         		        tabTextArea.Offset(0' isSelectOffset/2);                  }              } else {         		    tabTextArea.Offset(0' 1);                  if (isSelected == false) {         		        tabTextArea.Offset(0' isSelectOffset/-2);                  }              }
Magic Number,WixEdit.Controls,ErrorProviderFixManager,C:\repos\sebasbaumh_WixEdit\src\Controls\ErrorProviderFixed.cs,ErrorProviderFixManager,The following statement contains a magic number: mTmrCheckHandelsProc.Interval = 1000;
Magic Number,WixEdit.Controls,ErrorProviderFixManager,C:\repos\sebasbaumh_WixEdit\src\Controls\ErrorProviderFixed.cs,tmr_CheckHandels,The following statement contains a magic number: if (mTheErrorProvider.ContainerControl.Visible)              {                  Hashtable hashRes = (Hashtable)GetFieldValue(mTheErrorProvider' "windows");                  if (hashRes.Count > 0)                  {                      foreach (Object obj in hashRes.Keys)                      {                          ErrorProviderNativeWindowHook hook = null;                          if (mHashOfNativeWindows.Contains(obj))                          {                              hook = (ErrorProviderNativeWindowHook)mHashOfNativeWindows[obj];                          }                          else                          {                              hook = new ErrorProviderNativeWindowHook();                              mHashOfNativeWindows[obj] = hook;                          }                            NativeWindow nativeWindow = GetFieldValue(hashRes[obj]' "tipWindow") as NativeWindow;                          if (nativeWindow != null && hook.Handle == IntPtr.Zero)                          {                              hook.AssignHandle(nativeWindow.Handle);                                if (mTheErrorProvider.AutoPopDelay != ErrorProviderFixed.DefaultAutoPopDelay)                              {                                  SendMessage(nativeWindow.Handle' 0x403' (IntPtr)2' (IntPtr)mTheErrorProvider.AutoPopDelay);                              }                          }                      }                  }                    foreach (ErrorProviderNativeWindowHook hook in mHashOfNativeWindows.Values)                  {                      if (hook.mBlnTrigerRefresh)                      {                          hook.mBlnTrigerRefresh = false;                          RefreshProviderErrors();                      }                  }              }
Magic Number,WixEdit.Controls,ErrorProviderNativeWindowHook,C:\repos\sebasbaumh_WixEdit\src\Controls\ErrorProviderFixed.cs,WndProc,The following statement contains a magic number: if (m.Msg == 0x407)              {                  mInt407Count++;                  if (mInt407Count > 3)  // if this occures we need to release...                  {                      this.ReleaseHandle();                      mBlnTrigerRefresh = true;                  }              }              else              {                  mInt407Count = 0;              }
Magic Number,WixEdit.Controls,FileSelectEditingControl,C:\repos\sebasbaumh_WixEdit\src\Controls\FileSelectEditingControl.cs,FileSelectEditingControl,The following statement contains a magic number: filePathTextBox.Location = new Point(3' 4);
Magic Number,WixEdit.Controls,FileSelectEditingControl,C:\repos\sebasbaumh_WixEdit\src\Controls\FileSelectEditingControl.cs,FileSelectEditingControl,The following statement contains a magic number: filePathTextBox.Location = new Point(3' 4);
Magic Number,WixEdit.Controls,FileSelectEditingControl,C:\repos\sebasbaumh_WixEdit\src\Controls\FileSelectEditingControl.cs,FileSelectEditingControl,The following statement contains a magic number: filePathTextBox.Size = new Size(this.Width - (2*filePathTextBox.Left) - buttonWidth' filePathTextBox.Height);
Magic Number,WixEdit.Controls,FileSelectEditingControl,C:\repos\sebasbaumh_WixEdit\src\Controls\FileSelectEditingControl.cs,FileSelectEditingControl,The following statement contains a magic number: selectFileButton.Location = new Point(filePathTextBox.Width + (2*filePathTextBox.Left)' 0);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,getSubDirs,The following statement contains a magic number: try              {                  // if we have not scanned this folder before                  if (parent.Nodes.Count == 0)                  {                                            directory = new DirectoryInfo(parent.FullPath);                      foreach (DirectoryInfo dir in directory.GetDirectories())                      {                          TreeNode newNode = new TreeNode(dir.Name);                          if (dir.Name == "RECYCLER" || dir.Name == "RECYCLED" || dir.Name == "Recycled")                          {                              newNode.ImageIndex = 1;                              newNode.SelectedImageIndex = 2;                          }                          else                          {                              newNode.ImageIndex = 1;                              newNode.SelectedImageIndex = 2;                          }                          newNode.Tag = dir;                            parent.Nodes.Add(newNode);                      }                  }                    // now that we have the children of the parent' see if they                  // have any child members that need to be scanned.  Scanning                   // the first level of sub folders insures that you properly                   // see the '+' or '-' expanding controls on each node that represents                  // a sub folder with it's own children.                  foreach (TreeNode node in parent.Nodes)                  {                      // if we have not scanned this node before.                      if (node.Nodes.Count == 0)                      {                          // get the folder information for the specified path.                          directory = new DirectoryInfo(node.FullPath);                            try                           {                              // check this folder for any possible sub-folders                              foreach (DirectoryInfo dir in directory.GetDirectories())                              {                                  // make a new TreeNode and add it to the treeView.                                  TreeNode newNode = new TreeNode(dir.Name);                                  newNode.ImageIndex = 1;                                  newNode.SelectedImageIndex = 2;                                  newNode.Tag = dir;                                  node.Nodes.Add(newNode);                              }                          }                          catch                          {                          }                      }                  }              }              catch              {              }
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,getSubDirs,The following statement contains a magic number: try              {                  // if we have not scanned this folder before                  if (parent.Nodes.Count == 0)                  {                                            directory = new DirectoryInfo(parent.FullPath);                      foreach (DirectoryInfo dir in directory.GetDirectories())                      {                          TreeNode newNode = new TreeNode(dir.Name);                          if (dir.Name == "RECYCLER" || dir.Name == "RECYCLED" || dir.Name == "Recycled")                          {                              newNode.ImageIndex = 1;                              newNode.SelectedImageIndex = 2;                          }                          else                          {                              newNode.ImageIndex = 1;                              newNode.SelectedImageIndex = 2;                          }                          newNode.Tag = dir;                            parent.Nodes.Add(newNode);                      }                  }                    // now that we have the children of the parent' see if they                  // have any child members that need to be scanned.  Scanning                   // the first level of sub folders insures that you properly                   // see the '+' or '-' expanding controls on each node that represents                  // a sub folder with it's own children.                  foreach (TreeNode node in parent.Nodes)                  {                      // if we have not scanned this node before.                      if (node.Nodes.Count == 0)                      {                          // get the folder information for the specified path.                          directory = new DirectoryInfo(node.FullPath);                            try                           {                              // check this folder for any possible sub-folders                              foreach (DirectoryInfo dir in directory.GetDirectories())                              {                                  // make a new TreeNode and add it to the treeView.                                  TreeNode newNode = new TreeNode(dir.Name);                                  newNode.ImageIndex = 1;                                  newNode.SelectedImageIndex = 2;                                  newNode.Tag = dir;                                  node.Nodes.Add(newNode);                              }                          }                          catch                          {                          }                      }                  }              }              catch              {              }
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,getSubDirs,The following statement contains a magic number: try              {                  // if we have not scanned this folder before                  if (parent.Nodes.Count == 0)                  {                                            directory = new DirectoryInfo(parent.FullPath);                      foreach (DirectoryInfo dir in directory.GetDirectories())                      {                          TreeNode newNode = new TreeNode(dir.Name);                          if (dir.Name == "RECYCLER" || dir.Name == "RECYCLED" || dir.Name == "Recycled")                          {                              newNode.ImageIndex = 1;                              newNode.SelectedImageIndex = 2;                          }                          else                          {                              newNode.ImageIndex = 1;                              newNode.SelectedImageIndex = 2;                          }                          newNode.Tag = dir;                            parent.Nodes.Add(newNode);                      }                  }                    // now that we have the children of the parent' see if they                  // have any child members that need to be scanned.  Scanning                   // the first level of sub folders insures that you properly                   // see the '+' or '-' expanding controls on each node that represents                  // a sub folder with it's own children.                  foreach (TreeNode node in parent.Nodes)                  {                      // if we have not scanned this node before.                      if (node.Nodes.Count == 0)                      {                          // get the folder information for the specified path.                          directory = new DirectoryInfo(node.FullPath);                            try                           {                              // check this folder for any possible sub-folders                              foreach (DirectoryInfo dir in directory.GetDirectories())                              {                                  // make a new TreeNode and add it to the treeView.                                  TreeNode newNode = new TreeNode(dir.Name);                                  newNode.ImageIndex = 1;                                  newNode.SelectedImageIndex = 2;                                  newNode.Tag = dir;                                  node.Nodes.Add(newNode);                              }                          }                          catch                          {                          }                      }                  }              }              catch              {              }
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._descriptionLabel.Location = new System.Drawing.Point(6' 6);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._descriptionLabel.Location = new System.Drawing.Point(6' 6);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._descriptionLabel.Size = new System.Drawing.Size(240' 15);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._descriptionLabel.Size = new System.Drawing.Size(240' 15);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._pathTextBox.Location = new System.Drawing.Point(9' 24);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._pathTextBox.Location = new System.Drawing.Point(9' 24);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._pathTextBox.Size = new System.Drawing.Size(237' 20);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._pathTextBox.Size = new System.Drawing.Size(237' 20);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(171' 234);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(171' 234);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.TabIndex = 5;
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectButton.Location = new System.Drawing.Point(90' 234);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectButton.Location = new System.Drawing.Point(90' 234);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectButton.TabIndex = 4;
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._folderTreeView.Location = new System.Drawing.Point(9' 50);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._folderTreeView.Location = new System.Drawing.Point(9' 50);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._folderTreeView.Size = new System.Drawing.Size(237' 178);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._folderTreeView.Size = new System.Drawing.Size(237' 178);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._folderTreeView.TabIndex = 2;
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._imageList.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._imageList.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._newFolderButton.Location = new System.Drawing.Point(9' 234);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._newFolderButton.Location = new System.Drawing.Point(9' 234);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._newFolderButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._newFolderButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this._newFolderButton.TabIndex = 3;
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(255' 266);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(255' 266);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(263' 300);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(263' 300);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(6);
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,_pathTextBox_KeyUp,The following statement contains a magic number: try              {                  string path = _pathTextBox.Text.Trim();                  if (path.Length >= 3 && (path.StartsWith(@"\\") || path.Substring(1' 2) == (@":\")))                  {                      if (Directory.Exists(_pathTextBox.Text))                      {                          DirectoryInfo dir = new DirectoryInfo(path);                          ArrayList dirs = new ArrayList();                          DirectoryInfo iDir = dir;                          while (iDir.Parent != null)                          {                              dirs.Add(iDir);                              iDir = iDir.Parent;                          }                            dirs.Add(iDir);                            TreeNode foundNode = null;                          TreeNodeCollection nodes = _folderTreeView.Nodes;                          for (int i = dirs.Count - 1; i >= 0; i--)                          {                              if (foundNode != null)                              {                                  foundNode.Expand();                              }                                foundNode = null;                              foreach (TreeNode node in nodes)                              {                                  if (((DirectoryInfo)dirs[i]).Name.ToLower() == ((DirectoryInfo)node.Tag).Name.ToLower())                                  {                                      foundNode = node;                                      break;                                  }                              }                                if (foundNode == null)                              {                                  break;                              }                              else                              {                                  nodes = foundNode.Nodes;                              }                          }                            _folderTreeView.SelectedNode = foundNode;                      }                  }              }              catch              {              }
Magic Number,WixEdit.Controls,FolderSelectDialog,C:\repos\sebasbaumh_WixEdit\src\Controls\FolderSelectDialog.cs,_pathTextBox_KeyUp,The following statement contains a magic number: try              {                  string path = _pathTextBox.Text.Trim();                  if (path.Length >= 3 && (path.StartsWith(@"\\") || path.Substring(1' 2) == (@":\")))                  {                      if (Directory.Exists(_pathTextBox.Text))                      {                          DirectoryInfo dir = new DirectoryInfo(path);                          ArrayList dirs = new ArrayList();                          DirectoryInfo iDir = dir;                          while (iDir.Parent != null)                          {                              dirs.Add(iDir);                              iDir = iDir.Parent;                          }                            dirs.Add(iDir);                            TreeNode foundNode = null;                          TreeNodeCollection nodes = _folderTreeView.Nodes;                          for (int i = dirs.Count - 1; i >= 0; i--)                          {                              if (foundNode != null)                              {                                  foundNode.Expand();                              }                                foundNode = null;                              foreach (TreeNode node in nodes)                              {                                  if (((DirectoryInfo)dirs[i]).Name.ToLower() == ((DirectoryInfo)node.Tag).Name.ToLower())                                  {                                      foundNode = node;                                      break;                                  }                              }                                if (foundNode == null)                              {                                  break;                              }                              else                              {                                  nodes = foundNode.Nodes;                              }                          }                            _folderTreeView.SelectedNode = foundNode;                      }                  }              }              catch              {              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,HasFancyMenus,The following statement contains a magic number: return (Environment.OSVersion.Version.Major > 5  ||                  ( Environment.OSVersion.Version.Major == 5 && Environment.OSVersion.Version.Minor >= 1 ));
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,HasFancyMenus,The following statement contains a magic number: return (Environment.OSVersion.Version.Major > 5  ||                  ( Environment.OSVersion.Version.Major == 5 && Environment.OSVersion.Version.Minor >= 1 ));
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: selectedGradientLeft = Color.FromArgb(199'199'202);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: selectedGradientLeft = Color.FromArgb(199'199'202);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: selectedGradientLeft = Color.FromArgb(199'199'202);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: selectedGradientRight = Color.FromArgb(199'199'202);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: selectedGradientRight = Color.FromArgb(199'199'202);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: selectedGradientRight = Color.FromArgb(199'199'202);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: selectedBorder = Color.FromArgb(169'171'181);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: selectedBorder = Color.FromArgb(169'171'181);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: selectedBorder = Color.FromArgb(169'171'181);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: menuSeperaterColor = Color.FromArgb(229'228'232);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: menuSeperaterColor = Color.FromArgb(229'228'232);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: menuSeperaterColor = Color.FromArgb(229'228'232);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: if (HasFancyMenus()) {                  sideBarColor = Color.FromArgb(229'228'232);              } else {                  sideBarColor = menuBackColor;              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: if (HasFancyMenus()) {                  sideBarColor = Color.FromArgb(229'228'232);              } else {                  sideBarColor = menuBackColor;              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: if (HasFancyMenus()) {                  sideBarColor = Color.FromArgb(229'228'232);              } else {                  sideBarColor = menuBackColor;              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,Init,The following statement contains a magic number: sideBarWidth = 20;
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,OnMeasureItem,The following statement contains a magic number: float textWidth = e.Graphics.MeasureString(GetFormattedText()' font' 50000' format).Width;
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,OnMeasureItem,The following statement contains a magic number: if (Parent.GetType().Equals(typeof(MainMenu))) {                  e.ItemWidth = (int) (textWidth) - 2;                  e.ItemHeight = SystemInformation.MenuHeight + 2;              } else {                  e.ItemWidth = e.ItemHeight + (int)Math.Ceiling(textWidth) + sideBarWidth + 10;                    if (IsSeparator()) {                      e.ItemHeight = menuSeperaterWidth + 2;                  } else {                      e.ItemHeight = SystemInformation.MenuHeight + 2;                  }              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,OnMeasureItem,The following statement contains a magic number: if (Parent.GetType().Equals(typeof(MainMenu))) {                  e.ItemWidth = (int) (textWidth) - 2;                  e.ItemHeight = SystemInformation.MenuHeight + 2;              } else {                  e.ItemWidth = e.ItemHeight + (int)Math.Ceiling(textWidth) + sideBarWidth + 10;                    if (IsSeparator()) {                      e.ItemHeight = menuSeperaterWidth + 2;                  } else {                      e.ItemHeight = SystemInformation.MenuHeight + 2;                  }              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,OnMeasureItem,The following statement contains a magic number: if (Parent.GetType().Equals(typeof(MainMenu))) {                  e.ItemWidth = (int) (textWidth) - 2;                  e.ItemHeight = SystemInformation.MenuHeight + 2;              } else {                  e.ItemWidth = e.ItemHeight + (int)Math.Ceiling(textWidth) + sideBarWidth + 10;                    if (IsSeparator()) {                      e.ItemHeight = menuSeperaterWidth + 2;                  } else {                      e.ItemHeight = SystemInformation.MenuHeight + 2;                  }              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,OnMeasureItem,The following statement contains a magic number: if (Parent.GetType().Equals(typeof(MainMenu))) {                  e.ItemWidth = (int) (textWidth) - 2;                  e.ItemHeight = SystemInformation.MenuHeight + 2;              } else {                  e.ItemWidth = e.ItemHeight + (int)Math.Ceiling(textWidth) + sideBarWidth + 10;                    if (IsSeparator()) {                      e.ItemHeight = menuSeperaterWidth + 2;                  } else {                      e.ItemHeight = SystemInformation.MenuHeight + 2;                  }              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,OnMeasureItem,The following statement contains a magic number: if (Parent.GetType().Equals(typeof(MainMenu))) {                  e.ItemWidth = (int) (textWidth) - 2;                  e.ItemHeight = SystemInformation.MenuHeight + 2;              } else {                  e.ItemWidth = e.ItemHeight + (int)Math.Ceiling(textWidth) + sideBarWidth + 10;                    if (IsSeparator()) {                      e.ItemHeight = menuSeperaterWidth + 2;                  } else {                      e.ItemHeight = SystemInformation.MenuHeight + 2;                  }              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSelectedIcon,The following statement contains a magic number: Rectangle iconDest = new Rectangle(dest.Left + 4' dest.Top + 5' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSelectedIcon,The following statement contains a magic number: Rectangle iconDest = new Rectangle(dest.Left + 4' dest.Top + 5' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSelectedIcon,The following statement contains a magic number: Rectangle iconDest = new Rectangle(dest.Left + 4' dest.Top + 5' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSelectedIcon,The following statement contains a magic number: Rectangle iconDest = new Rectangle(dest.Left + 4' dest.Top + 5' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSelectedIcon,The following statement contains a magic number: graphics.DrawImage(MakeMonochrome(Bitmap' Color.Gray)' iconDest' 0'0'16'16' GraphicsUnit.Pixel' a);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSelectedIcon,The following statement contains a magic number: graphics.DrawImage(MakeMonochrome(Bitmap' Color.Gray)' iconDest' 0'0'16'16' GraphicsUnit.Pixel' a);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSelectedIcon,The following statement contains a magic number: iconDest = new Rectangle(dest.Left + 2' dest.Top + 3' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSelectedIcon,The following statement contains a magic number: iconDest = new Rectangle(dest.Left + 2' dest.Top + 3' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSelectedIcon,The following statement contains a magic number: iconDest = new Rectangle(dest.Left + 2' dest.Top + 3' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSelectedIcon,The following statement contains a magic number: iconDest = new Rectangle(dest.Left + 2' dest.Top + 3' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSelectedIcon,The following statement contains a magic number: graphics.DrawImage(Bitmap' iconDest' 0'0'16'16' GraphicsUnit.Pixel' a);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSelectedIcon,The following statement contains a magic number: graphics.DrawImage(Bitmap' iconDest' 0'0'16'16' GraphicsUnit.Pixel' a);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawDisabledIcon,The following statement contains a magic number: ControlPaint.DrawImageDisabled(graphics' Bitmap' dest.Left + 3' dest.Top + 4' menuBackColor);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawDisabledIcon,The following statement contains a magic number: ControlPaint.DrawImageDisabled(graphics' Bitmap' dest.Left + 3' dest.Top + 4' menuBackColor);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawNormalIcon,The following statement contains a magic number: Rectangle iconDest = new Rectangle(dest.Left + 3' dest.Top + 4' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawNormalIcon,The following statement contains a magic number: Rectangle iconDest = new Rectangle(dest.Left + 3' dest.Top + 4' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawNormalIcon,The following statement contains a magic number: Rectangle iconDest = new Rectangle(dest.Left + 3' dest.Top + 4' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawNormalIcon,The following statement contains a magic number: Rectangle iconDest = new Rectangle(dest.Left + 3' dest.Top + 4' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawNormalIcon,The following statement contains a magic number: graphics.DrawImage(Bitmap' iconDest' 0'0'16'16' GraphicsUnit.Pixel' a);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawNormalIcon,The following statement contains a magic number: graphics.DrawImage(Bitmap' iconDest' 0'0'16'16' GraphicsUnit.Pixel' a);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawText,The following statement contains a magic number: format.SetTabStops(60' new Single[] {0});
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawText,The following statement contains a magic number: float scTextWidth = graphics.MeasureString(GetShortcutText()' font' 50000' format).Width;
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawText,The following statement contains a magic number: int tabStopWidth = dest.Width - sideBarWidth - 5 - (int) Math.Ceiling(scTextWidth);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawText,The following statement contains a magic number: graphics.DrawString(GetFormattedText()' font' br' dest.Left + sideBarWidth + 5' dest.Top + 4' format);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawText,The following statement contains a magic number: graphics.DrawString(GetFormattedText()' font' br' dest.Left + sideBarWidth + 5' dest.Top + 4' format);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawMainMenu,The following statement contains a magic number: format.SetTabStops(60' new Single[] {0});
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawMainMenu,The following statement contains a magic number: graphics.DrawString(Text' font' Brushes.Black' dest.Left + 6' dest.Top + 3' format);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawMainMenu,The following statement contains a magic number: graphics.DrawString(Text' font' Brushes.Black' dest.Left + 6' dest.Top + 3' format);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSeparator,The following statement contains a magic number: if (HasFancyMenus()) {                  graphics.FillRectangle(new SolidBrush(menuSeperaterColor)' sideBarWidth + 5' dest.Top + dest.Height/2' dest.Width' 1);                  graphics.FillRectangle(new SolidBrush(sideBarColor)' 0' dest.Top' sideBarWidth' dest.Height);              } else {                  int mid = (dest.Top+dest.Bottom)/2;                  graphics.DrawLine(SystemPens.ControlDark' 0' mid' dest.Left + 1 + (dest.Width - 1)' mid);                  graphics.DrawLine(SystemPens.ControlLightLight' 0' mid+1' dest.Left + 1 + (dest.Width - 1)' mid+1);              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSeparator,The following statement contains a magic number: if (HasFancyMenus()) {                  graphics.FillRectangle(new SolidBrush(menuSeperaterColor)' sideBarWidth + 5' dest.Top + dest.Height/2' dest.Width' 1);                  graphics.FillRectangle(new SolidBrush(sideBarColor)' 0' dest.Top' sideBarWidth' dest.Height);              } else {                  int mid = (dest.Top+dest.Bottom)/2;                  graphics.DrawLine(SystemPens.ControlDark' 0' mid' dest.Left + 1 + (dest.Width - 1)' mid);                  graphics.DrawLine(SystemPens.ControlLightLight' 0' mid+1' dest.Left + 1 + (dest.Width - 1)' mid+1);              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawSeparator,The following statement contains a magic number: if (HasFancyMenus()) {                  graphics.FillRectangle(new SolidBrush(menuSeperaterColor)' sideBarWidth + 5' dest.Top + dest.Height/2' dest.Width' 1);                  graphics.FillRectangle(new SolidBrush(sideBarColor)' 0' dest.Top' sideBarWidth' dest.Height);              } else {                  int mid = (dest.Top+dest.Bottom)/2;                  graphics.DrawLine(SystemPens.ControlDark' 0' mid' dest.Left + 1 + (dest.Width - 1)' mid);                  graphics.DrawLine(SystemPens.ControlLightLight' 0' mid+1' dest.Left + 1 + (dest.Width - 1)' mid+1);              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheckedIcon,The following statement contains a magic number: Rectangle iconDest = new Rectangle(dest.Left + 2' dest.Top + 2' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheckedIcon,The following statement contains a magic number: Rectangle iconDest = new Rectangle(dest.Left + 2' dest.Top + 2' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheckedIcon,The following statement contains a magic number: Rectangle iconDest = new Rectangle(dest.Left + 2' dest.Top + 2' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheckedIcon,The following statement contains a magic number: Rectangle iconDest = new Rectangle(dest.Left + 2' dest.Top + 2' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheckedIcon,The following statement contains a magic number: graphics.DrawImage(Bitmap' iconDest' 0'0'16'16' GraphicsUnit.Pixel' a);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheckedIcon,The following statement contains a magic number: graphics.DrawImage(Bitmap' iconDest' 0'0'16'16' GraphicsUnit.Pixel' a);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheckedIcon,The following statement contains a magic number: graphics.DrawRectangle(pen' 1' dest.Top' 20' 20);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheckedIcon,The following statement contains a magic number: graphics.DrawRectangle(pen' 1' dest.Top' 20' 20);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheckedIcon,The following statement contains a magic number: graphics.DrawRectangle(pen' 3' dest.Top + 2' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheckedIcon,The following statement contains a magic number: graphics.DrawRectangle(pen' 3' dest.Top + 2' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheckedIcon,The following statement contains a magic number: graphics.DrawRectangle(pen' 3' dest.Top + 2' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheckedIcon,The following statement contains a magic number: graphics.DrawRectangle(pen' 3' dest.Top + 2' 16' 16);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: if (HasFancyMenus()) {                  graphics.DrawRectangle(rectPen' 1' dest.Top+1' sideBarWidth - 2' SystemInformation.MenuHeight-1);              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: Point[] pnts = new Point[6];
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[0] = new Point(dest.Left + 13' dest.Top + 8);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[0] = new Point(dest.Left + 13' dest.Top + 8);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[1] = new Point(dest.Left + 9' dest.Top + 12);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[1] = new Point(dest.Left + 9' dest.Top + 12);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[2] = new Point(dest.Left + 7' dest.Top + 10);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[2] = new Point(dest.Left + 7' dest.Top + 10);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[2] = new Point(dest.Left + 7' dest.Top + 10);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[3] = new Point(dest.Left + 7' dest.Top + 11);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[3] = new Point(dest.Left + 7' dest.Top + 11);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[3] = new Point(dest.Left + 7' dest.Top + 11);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[4] = new Point(dest.Left + 9' dest.Top + 13);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[4] = new Point(dest.Left + 9' dest.Top + 13);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[4] = new Point(dest.Left + 9' dest.Top + 13);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[5] = new Point(dest.Left + 13' dest.Top + 9);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[5] = new Point(dest.Left + 13' dest.Top + 9);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,DrawCheck,The following statement contains a magic number: pnts[5] = new Point(dest.Left + 13' dest.Top + 9);
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,MakeMonochrome,The following statement contains a magic number: for (int num4 = 0; num4 < num2; num4++) {                  IntPtr ptr1 = (IntPtr) (((long) data1.Scan0) + (num4 * data1.Stride));                  IntPtr ptr2 = (IntPtr) (((long) data2.Scan0) + (num4 * data2.Stride));                  for (int num5 = 0; num5 < num1; num5++) {                      int num6 = System.Runtime.InteropServices.Marshal.ReadInt32(ptr1' (int) (num5 * 4));                      if ((num6 >> 0x18) == 0) {                          System.Runtime.InteropServices.Marshal.WriteInt32(ptr2' (int) (num5 * 4)' 0);                      }                      else {                          System.Runtime.InteropServices.Marshal.WriteInt32(ptr2' (int) (num5 * 4)' num3);                      }                  }              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,MakeMonochrome,The following statement contains a magic number: for (int num4 = 0; num4 < num2; num4++) {                  IntPtr ptr1 = (IntPtr) (((long) data1.Scan0) + (num4 * data1.Stride));                  IntPtr ptr2 = (IntPtr) (((long) data2.Scan0) + (num4 * data2.Stride));                  for (int num5 = 0; num5 < num1; num5++) {                      int num6 = System.Runtime.InteropServices.Marshal.ReadInt32(ptr1' (int) (num5 * 4));                      if ((num6 >> 0x18) == 0) {                          System.Runtime.InteropServices.Marshal.WriteInt32(ptr2' (int) (num5 * 4)' 0);                      }                      else {                          System.Runtime.InteropServices.Marshal.WriteInt32(ptr2' (int) (num5 * 4)' num3);                      }                  }              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,MakeMonochrome,The following statement contains a magic number: for (int num4 = 0; num4 < num2; num4++) {                  IntPtr ptr1 = (IntPtr) (((long) data1.Scan0) + (num4 * data1.Stride));                  IntPtr ptr2 = (IntPtr) (((long) data2.Scan0) + (num4 * data2.Stride));                  for (int num5 = 0; num5 < num1; num5++) {                      int num6 = System.Runtime.InteropServices.Marshal.ReadInt32(ptr1' (int) (num5 * 4));                      if ((num6 >> 0x18) == 0) {                          System.Runtime.InteropServices.Marshal.WriteInt32(ptr2' (int) (num5 * 4)' 0);                      }                      else {                          System.Runtime.InteropServices.Marshal.WriteInt32(ptr2' (int) (num5 * 4)' num3);                      }                  }              }
Magic Number,WixEdit.Controls,IconMenuItem,C:\repos\sebasbaumh_WixEdit\src\Controls\IconMenuItem.cs,GetFormattedText,The following statement contains a magic number: if (ShowShortcut && Shortcut != Shortcut.None) {                  Shortcut s = Shortcut;                                    Keys k = (Keys)s;                  text = text + Convert.ToChar(9) + TypeDescriptor.GetConverter(typeof(Keys)).ConvertToString(k);              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,GotSelection,The following statement contains a magic number: if (isSelected == false) {                  SuspendLayout();                    Size = new Size(Width + 14' Height + 14);                  Location = new Point(Left - 7' Top - 7);                  control.Location = new Point(7' 7);                    isSelected = true;                    ResumeLayout();                    if (control is PictureControl || control is GroupBox) {                      SendToBack();                  } else {                      BringToFront();                  }                    if (control is PictureControl) {                      PictureControl picControl = (PictureControl) control;                      picControl.Redraw();                  }                    if (SelectionChanged != null) {                      SelectionChanged(xmlNode);                  }              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,GotSelection,The following statement contains a magic number: if (isSelected == false) {                  SuspendLayout();                    Size = new Size(Width + 14' Height + 14);                  Location = new Point(Left - 7' Top - 7);                  control.Location = new Point(7' 7);                    isSelected = true;                    ResumeLayout();                    if (control is PictureControl || control is GroupBox) {                      SendToBack();                  } else {                      BringToFront();                  }                    if (control is PictureControl) {                      PictureControl picControl = (PictureControl) control;                      picControl.Redraw();                  }                    if (SelectionChanged != null) {                      SelectionChanged(xmlNode);                  }              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,GotSelection,The following statement contains a magic number: if (isSelected == false) {                  SuspendLayout();                    Size = new Size(Width + 14' Height + 14);                  Location = new Point(Left - 7' Top - 7);                  control.Location = new Point(7' 7);                    isSelected = true;                    ResumeLayout();                    if (control is PictureControl || control is GroupBox) {                      SendToBack();                  } else {                      BringToFront();                  }                    if (control is PictureControl) {                      PictureControl picControl = (PictureControl) control;                      picControl.Redraw();                  }                    if (SelectionChanged != null) {                      SelectionChanged(xmlNode);                  }              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,GotSelection,The following statement contains a magic number: if (isSelected == false) {                  SuspendLayout();                    Size = new Size(Width + 14' Height + 14);                  Location = new Point(Left - 7' Top - 7);                  control.Location = new Point(7' 7);                    isSelected = true;                    ResumeLayout();                    if (control is PictureControl || control is GroupBox) {                      SendToBack();                  } else {                      BringToFront();                  }                    if (control is PictureControl) {                      PictureControl picControl = (PictureControl) control;                      picControl.Redraw();                  }                    if (SelectionChanged != null) {                      SelectionChanged(xmlNode);                  }              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,GotSelection,The following statement contains a magic number: if (isSelected == false) {                  SuspendLayout();                    Size = new Size(Width + 14' Height + 14);                  Location = new Point(Left - 7' Top - 7);                  control.Location = new Point(7' 7);                    isSelected = true;                    ResumeLayout();                    if (control is PictureControl || control is GroupBox) {                      SendToBack();                  } else {                      BringToFront();                  }                    if (control is PictureControl) {                      PictureControl picControl = (PictureControl) control;                      picControl.Redraw();                  }                    if (SelectionChanged != null) {                      SelectionChanged(xmlNode);                  }              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,GotSelection,The following statement contains a magic number: if (isSelected == false) {                  SuspendLayout();                    Size = new Size(Width + 14' Height + 14);                  Location = new Point(Left - 7' Top - 7);                  control.Location = new Point(7' 7);                    isSelected = true;                    ResumeLayout();                    if (control is PictureControl || control is GroupBox) {                      SendToBack();                  } else {                      BringToFront();                  }                    if (control is PictureControl) {                      PictureControl picControl = (PictureControl) control;                      picControl.Redraw();                  }                    if (SelectionChanged != null) {                      SelectionChanged(xmlNode);                  }              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,LostSelection,The following statement contains a magic number: if (isSelected) {                  SuspendLayout();                    Size = new Size(Width - 14' Height - 14);                  Location = new Point(Left + 7' Top + 7);                  control.Location = new Point(0' 0);                                    isSelected = false;                    ResumeLayout();              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,LostSelection,The following statement contains a magic number: if (isSelected) {                  SuspendLayout();                    Size = new Size(Width - 14' Height - 14);                  Location = new Point(Left + 7' Top + 7);                  control.Location = new Point(0' 0);                                    isSelected = false;                    ResumeLayout();              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,LostSelection,The following statement contains a magic number: if (isSelected) {                  SuspendLayout();                    Size = new Size(Width - 14' Height - 14);                  Location = new Point(Left + 7' Top + 7);                  control.Location = new Point(0' 0);                                    isSelected = false;                    ResumeLayout();              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,LostSelection,The following statement contains a magic number: if (isSelected) {                  SuspendLayout();                    Size = new Size(Width - 14' Height - 14);                  Location = new Point(Left + 7' Top + 7);                  control.Location = new Point(0' 0);                                    isSelected = false;                    ResumeLayout();              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckMouseDown,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  sizingDirection = SizingDirection.SizingNE;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  sizingDirection = SizingDirection.SizingSE;              } else if (clientPoint.X < 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  sizingDirection = SizingDirection.SizingE;              } else if (clientPoint.Y < 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingN;              } else if (clientPoint.Y > Height - 7 && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  sizingDirection = SizingDirection.SizingS;              } else {                  isMoving = true;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,OnMove,The following statement contains a magic number: if (isMoving) {                  bool needsRedraw = false;                  if (Math.Abs(currentPoint.X - isPositionPoint.X) >= snapToGrid) {                      if (snapToGrid <= 1) {                          Left = Left + currentPoint.X - isPositionPoint.X;                          isPositionPoint.X = currentPoint.X;                      } else {                          Left = (((Left + 7 + currentPoint.X - isPositionPoint.X) / snapToGrid) * snapToGrid) - 7;                          isPositionPoint.X = currentPoint.X - ((Left + 7 + currentPoint.X - isPositionPoint.X) % snapToGrid);                      }                      needsRedraw = true;                  }                    if (snapToGrid <= 1 || Math.Abs(currentPoint.Y - isPositionPoint.Y) >= snapToGrid) {                      if (snapToGrid <= 1) {                          Top = Top + currentPoint.Y - isPositionPoint.Y;                          isPositionPoint.Y = currentPoint.Y;                      } else {                          Top = (((Top + 7 + currentPoint.Y - isPositionPoint.Y) / snapToGrid) * snapToGrid) - 7;                          isPositionPoint.Y = currentPoint.Y - ((Top + 7 + currentPoint.Y - isPositionPoint.Y) % snapToGrid);                      }                      needsRedraw = true;                  }                    if (needsRedraw && control is PictureControl) {                      PictureControl picControl = (PictureControl) control;                      picControl.Redraw();                  }              } else if (sizingDirection != SizingDirection.None) {                  Point snapToGridPoint = new Point(currentPoint.X' currentPoint.Y);                  bool needsRedraw = false;                  if (snapToGrid <= 1 || Math.Abs(currentPoint.X - isPositionPoint.X) >= snapToGrid) {                      snapToGridPoint.X = currentPoint.X;                      needsRedraw = true;                  }                    if (snapToGrid <= 1 || Math.Abs(currentPoint.Y - isPositionPoint.Y) >= snapToGrid) {                      snapToGridPoint.Y = currentPoint.Y;                      needsRedraw = true;                  }                    if (needsRedraw) {                      ResizeControl(snapToGridPoint);                      isPositionPoint = snapToGridPoint;                            if (control is PictureControl) {                          PictureControl picControl = (PictureControl) control;                          picControl.Redraw();                      }                  }              } else {                  CheckCursor(currentPoint);              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,OnMove,The following statement contains a magic number: if (isMoving) {                  bool needsRedraw = false;                  if (Math.Abs(currentPoint.X - isPositionPoint.X) >= snapToGrid) {                      if (snapToGrid <= 1) {                          Left = Left + currentPoint.X - isPositionPoint.X;                          isPositionPoint.X = currentPoint.X;                      } else {                          Left = (((Left + 7 + currentPoint.X - isPositionPoint.X) / snapToGrid) * snapToGrid) - 7;                          isPositionPoint.X = currentPoint.X - ((Left + 7 + currentPoint.X - isPositionPoint.X) % snapToGrid);                      }                      needsRedraw = true;                  }                    if (snapToGrid <= 1 || Math.Abs(currentPoint.Y - isPositionPoint.Y) >= snapToGrid) {                      if (snapToGrid <= 1) {                          Top = Top + currentPoint.Y - isPositionPoint.Y;                          isPositionPoint.Y = currentPoint.Y;                      } else {                          Top = (((Top + 7 + currentPoint.Y - isPositionPoint.Y) / snapToGrid) * snapToGrid) - 7;                          isPositionPoint.Y = currentPoint.Y - ((Top + 7 + currentPoint.Y - isPositionPoint.Y) % snapToGrid);                      }                      needsRedraw = true;                  }                    if (needsRedraw && control is PictureControl) {                      PictureControl picControl = (PictureControl) control;                      picControl.Redraw();                  }              } else if (sizingDirection != SizingDirection.None) {                  Point snapToGridPoint = new Point(currentPoint.X' currentPoint.Y);                  bool needsRedraw = false;                  if (snapToGrid <= 1 || Math.Abs(currentPoint.X - isPositionPoint.X) >= snapToGrid) {                      snapToGridPoint.X = currentPoint.X;                      needsRedraw = true;                  }                    if (snapToGrid <= 1 || Math.Abs(currentPoint.Y - isPositionPoint.Y) >= snapToGrid) {                      snapToGridPoint.Y = currentPoint.Y;                      needsRedraw = true;                  }                    if (needsRedraw) {                      ResizeControl(snapToGridPoint);                      isPositionPoint = snapToGridPoint;                            if (control is PictureControl) {                          PictureControl picControl = (PictureControl) control;                          picControl.Redraw();                      }                  }              } else {                  CheckCursor(currentPoint);              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,OnMove,The following statement contains a magic number: if (isMoving) {                  bool needsRedraw = false;                  if (Math.Abs(currentPoint.X - isPositionPoint.X) >= snapToGrid) {                      if (snapToGrid <= 1) {                          Left = Left + currentPoint.X - isPositionPoint.X;                          isPositionPoint.X = currentPoint.X;                      } else {                          Left = (((Left + 7 + currentPoint.X - isPositionPoint.X) / snapToGrid) * snapToGrid) - 7;                          isPositionPoint.X = currentPoint.X - ((Left + 7 + currentPoint.X - isPositionPoint.X) % snapToGrid);                      }                      needsRedraw = true;                  }                    if (snapToGrid <= 1 || Math.Abs(currentPoint.Y - isPositionPoint.Y) >= snapToGrid) {                      if (snapToGrid <= 1) {                          Top = Top + currentPoint.Y - isPositionPoint.Y;                          isPositionPoint.Y = currentPoint.Y;                      } else {                          Top = (((Top + 7 + currentPoint.Y - isPositionPoint.Y) / snapToGrid) * snapToGrid) - 7;                          isPositionPoint.Y = currentPoint.Y - ((Top + 7 + currentPoint.Y - isPositionPoint.Y) % snapToGrid);                      }                      needsRedraw = true;                  }                    if (needsRedraw && control is PictureControl) {                      PictureControl picControl = (PictureControl) control;                      picControl.Redraw();                  }              } else if (sizingDirection != SizingDirection.None) {                  Point snapToGridPoint = new Point(currentPoint.X' currentPoint.Y);                  bool needsRedraw = false;                  if (snapToGrid <= 1 || Math.Abs(currentPoint.X - isPositionPoint.X) >= snapToGrid) {                      snapToGridPoint.X = currentPoint.X;                      needsRedraw = true;                  }                    if (snapToGrid <= 1 || Math.Abs(currentPoint.Y - isPositionPoint.Y) >= snapToGrid) {                      snapToGridPoint.Y = currentPoint.Y;                      needsRedraw = true;                  }                    if (needsRedraw) {                      ResizeControl(snapToGridPoint);                      isPositionPoint = snapToGridPoint;                            if (control is PictureControl) {                          PictureControl picControl = (PictureControl) control;                          picControl.Redraw();                      }                  }              } else {                  CheckCursor(currentPoint);              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,OnMove,The following statement contains a magic number: if (isMoving) {                  bool needsRedraw = false;                  if (Math.Abs(currentPoint.X - isPositionPoint.X) >= snapToGrid) {                      if (snapToGrid <= 1) {                          Left = Left + currentPoint.X - isPositionPoint.X;                          isPositionPoint.X = currentPoint.X;                      } else {                          Left = (((Left + 7 + currentPoint.X - isPositionPoint.X) / snapToGrid) * snapToGrid) - 7;                          isPositionPoint.X = currentPoint.X - ((Left + 7 + currentPoint.X - isPositionPoint.X) % snapToGrid);                      }                      needsRedraw = true;                  }                    if (snapToGrid <= 1 || Math.Abs(currentPoint.Y - isPositionPoint.Y) >= snapToGrid) {                      if (snapToGrid <= 1) {                          Top = Top + currentPoint.Y - isPositionPoint.Y;                          isPositionPoint.Y = currentPoint.Y;                      } else {                          Top = (((Top + 7 + currentPoint.Y - isPositionPoint.Y) / snapToGrid) * snapToGrid) - 7;                          isPositionPoint.Y = currentPoint.Y - ((Top + 7 + currentPoint.Y - isPositionPoint.Y) % snapToGrid);                      }                      needsRedraw = true;                  }                    if (needsRedraw && control is PictureControl) {                      PictureControl picControl = (PictureControl) control;                      picControl.Redraw();                  }              } else if (sizingDirection != SizingDirection.None) {                  Point snapToGridPoint = new Point(currentPoint.X' currentPoint.Y);                  bool needsRedraw = false;                  if (snapToGrid <= 1 || Math.Abs(currentPoint.X - isPositionPoint.X) >= snapToGrid) {                      snapToGridPoint.X = currentPoint.X;                      needsRedraw = true;                  }                    if (snapToGrid <= 1 || Math.Abs(currentPoint.Y - isPositionPoint.Y) >= snapToGrid) {                      snapToGridPoint.Y = currentPoint.Y;                      needsRedraw = true;                  }                    if (needsRedraw) {                      ResizeControl(snapToGridPoint);                      isPositionPoint = snapToGridPoint;                            if (control is PictureControl) {                          PictureControl picControl = (PictureControl) control;                          picControl.Redraw();                      }                  }              } else {                  CheckCursor(currentPoint);              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,OnMove,The following statement contains a magic number: if (isMoving) {                  bool needsRedraw = false;                  if (Math.Abs(currentPoint.X - isPositionPoint.X) >= snapToGrid) {                      if (snapToGrid <= 1) {                          Left = Left + currentPoint.X - isPositionPoint.X;                          isPositionPoint.X = currentPoint.X;                      } else {                          Left = (((Left + 7 + currentPoint.X - isPositionPoint.X) / snapToGrid) * snapToGrid) - 7;                          isPositionPoint.X = currentPoint.X - ((Left + 7 + currentPoint.X - isPositionPoint.X) % snapToGrid);                      }                      needsRedraw = true;                  }                    if (snapToGrid <= 1 || Math.Abs(currentPoint.Y - isPositionPoint.Y) >= snapToGrid) {                      if (snapToGrid <= 1) {                          Top = Top + currentPoint.Y - isPositionPoint.Y;                          isPositionPoint.Y = currentPoint.Y;                      } else {                          Top = (((Top + 7 + currentPoint.Y - isPositionPoint.Y) / snapToGrid) * snapToGrid) - 7;                          isPositionPoint.Y = currentPoint.Y - ((Top + 7 + currentPoint.Y - isPositionPoint.Y) % snapToGrid);                      }                      needsRedraw = true;                  }                    if (needsRedraw && control is PictureControl) {                      PictureControl picControl = (PictureControl) control;                      picControl.Redraw();                  }              } else if (sizingDirection != SizingDirection.None) {                  Point snapToGridPoint = new Point(currentPoint.X' currentPoint.Y);                  bool needsRedraw = false;                  if (snapToGrid <= 1 || Math.Abs(currentPoint.X - isPositionPoint.X) >= snapToGrid) {                      snapToGridPoint.X = currentPoint.X;                      needsRedraw = true;                  }                    if (snapToGrid <= 1 || Math.Abs(currentPoint.Y - isPositionPoint.Y) >= snapToGrid) {                      snapToGridPoint.Y = currentPoint.Y;                      needsRedraw = true;                  }                    if (needsRedraw) {                      ResizeControl(snapToGridPoint);                      isPositionPoint = snapToGridPoint;                            if (control is PictureControl) {                          PictureControl picControl = (PictureControl) control;                          picControl.Redraw();                      }                  }              } else {                  CheckCursor(currentPoint);              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,OnMove,The following statement contains a magic number: if (isMoving) {                  bool needsRedraw = false;                  if (Math.Abs(currentPoint.X - isPositionPoint.X) >= snapToGrid) {                      if (snapToGrid <= 1) {                          Left = Left + currentPoint.X - isPositionPoint.X;                          isPositionPoint.X = currentPoint.X;                      } else {                          Left = (((Left + 7 + currentPoint.X - isPositionPoint.X) / snapToGrid) * snapToGrid) - 7;                          isPositionPoint.X = currentPoint.X - ((Left + 7 + currentPoint.X - isPositionPoint.X) % snapToGrid);                      }                      needsRedraw = true;                  }                    if (snapToGrid <= 1 || Math.Abs(currentPoint.Y - isPositionPoint.Y) >= snapToGrid) {                      if (snapToGrid <= 1) {                          Top = Top + currentPoint.Y - isPositionPoint.Y;                          isPositionPoint.Y = currentPoint.Y;                      } else {                          Top = (((Top + 7 + currentPoint.Y - isPositionPoint.Y) / snapToGrid) * snapToGrid) - 7;                          isPositionPoint.Y = currentPoint.Y - ((Top + 7 + currentPoint.Y - isPositionPoint.Y) % snapToGrid);                      }                      needsRedraw = true;                  }                    if (needsRedraw && control is PictureControl) {                      PictureControl picControl = (PictureControl) control;                      picControl.Redraw();                  }              } else if (sizingDirection != SizingDirection.None) {                  Point snapToGridPoint = new Point(currentPoint.X' currentPoint.Y);                  bool needsRedraw = false;                  if (snapToGrid <= 1 || Math.Abs(currentPoint.X - isPositionPoint.X) >= snapToGrid) {                      snapToGridPoint.X = currentPoint.X;                      needsRedraw = true;                  }                    if (snapToGrid <= 1 || Math.Abs(currentPoint.Y - isPositionPoint.Y) >= snapToGrid) {                      snapToGridPoint.Y = currentPoint.Y;                      needsRedraw = true;                  }                    if (needsRedraw) {                      ResizeControl(snapToGridPoint);                      isPositionPoint = snapToGridPoint;                            if (control is PictureControl) {                          PictureControl picControl = (PictureControl) control;                          picControl.Redraw();                      }                  }              } else {                  CheckCursor(currentPoint);              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,ResizeControl,The following statement contains a magic number: switch (sizingDirection) {                  case SizingDirection.SizingSE:                      Height = clientY;                      Width = clientX;                      control.Height = clientY - 14;                      control.Width = clientX - 14;                      break;                  case SizingDirection.SizingSW:                      Left += clientX;                      Height = clientY;                      Width -= clientX;                      control.Height = clientY - 14;                      control.Width -= clientX;                      break;                  case SizingDirection.SizingNW:                      Top += clientY;                      Left += clientX;                      Height -= clientY;                      Width -= clientX;                      control.Height -= clientY;                      control.Width -= clientX;                      break;                  case SizingDirection.SizingNE:                      Top += clientY;                      Height -= clientY;                      Width = clientX;                      control.Height -= clientY;                      control.Width = clientX;                      break;                  case SizingDirection.SizingS:                      Height = clientY;                      control.Height = clientY - 14;                      break;                  case SizingDirection.SizingN:                      Top += clientY;                      Height -= clientY;                      control.Height -= clientY;                      break;                  case SizingDirection.SizingE:                      Width = clientX;                      control.Width = clientX - 14;                      break;                  case SizingDirection.SizingW:                      Left += clientX;                      Width -= clientX;                      control.Width -= clientX;                      break;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,ResizeControl,The following statement contains a magic number: switch (sizingDirection) {                  case SizingDirection.SizingSE:                      Height = clientY;                      Width = clientX;                      control.Height = clientY - 14;                      control.Width = clientX - 14;                      break;                  case SizingDirection.SizingSW:                      Left += clientX;                      Height = clientY;                      Width -= clientX;                      control.Height = clientY - 14;                      control.Width -= clientX;                      break;                  case SizingDirection.SizingNW:                      Top += clientY;                      Left += clientX;                      Height -= clientY;                      Width -= clientX;                      control.Height -= clientY;                      control.Width -= clientX;                      break;                  case SizingDirection.SizingNE:                      Top += clientY;                      Height -= clientY;                      Width = clientX;                      control.Height -= clientY;                      control.Width = clientX;                      break;                  case SizingDirection.SizingS:                      Height = clientY;                      control.Height = clientY - 14;                      break;                  case SizingDirection.SizingN:                      Top += clientY;                      Height -= clientY;                      control.Height -= clientY;                      break;                  case SizingDirection.SizingE:                      Width = clientX;                      control.Width = clientX - 14;                      break;                  case SizingDirection.SizingW:                      Left += clientX;                      Width -= clientX;                      control.Width -= clientX;                      break;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,ResizeControl,The following statement contains a magic number: switch (sizingDirection) {                  case SizingDirection.SizingSE:                      Height = clientY;                      Width = clientX;                      control.Height = clientY - 14;                      control.Width = clientX - 14;                      break;                  case SizingDirection.SizingSW:                      Left += clientX;                      Height = clientY;                      Width -= clientX;                      control.Height = clientY - 14;                      control.Width -= clientX;                      break;                  case SizingDirection.SizingNW:                      Top += clientY;                      Left += clientX;                      Height -= clientY;                      Width -= clientX;                      control.Height -= clientY;                      control.Width -= clientX;                      break;                  case SizingDirection.SizingNE:                      Top += clientY;                      Height -= clientY;                      Width = clientX;                      control.Height -= clientY;                      control.Width = clientX;                      break;                  case SizingDirection.SizingS:                      Height = clientY;                      control.Height = clientY - 14;                      break;                  case SizingDirection.SizingN:                      Top += clientY;                      Height -= clientY;                      control.Height -= clientY;                      break;                  case SizingDirection.SizingE:                      Width = clientX;                      control.Width = clientX - 14;                      break;                  case SizingDirection.SizingW:                      Left += clientX;                      Width -= clientX;                      control.Width -= clientX;                      break;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,ResizeControl,The following statement contains a magic number: switch (sizingDirection) {                  case SizingDirection.SizingSE:                      Height = clientY;                      Width = clientX;                      control.Height = clientY - 14;                      control.Width = clientX - 14;                      break;                  case SizingDirection.SizingSW:                      Left += clientX;                      Height = clientY;                      Width -= clientX;                      control.Height = clientY - 14;                      control.Width -= clientX;                      break;                  case SizingDirection.SizingNW:                      Top += clientY;                      Left += clientX;                      Height -= clientY;                      Width -= clientX;                      control.Height -= clientY;                      control.Width -= clientX;                      break;                  case SizingDirection.SizingNE:                      Top += clientY;                      Height -= clientY;                      Width = clientX;                      control.Height -= clientY;                      control.Width = clientX;                      break;                  case SizingDirection.SizingS:                      Height = clientY;                      control.Height = clientY - 14;                      break;                  case SizingDirection.SizingN:                      Top += clientY;                      Height -= clientY;                      control.Height -= clientY;                      break;                  case SizingDirection.SizingE:                      Width = clientX;                      control.Width = clientX - 14;                      break;                  case SizingDirection.SizingW:                      Left += clientX;                      Width -= clientX;                      control.Width -= clientX;                      break;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,ResizeControl,The following statement contains a magic number: switch (sizingDirection) {                  case SizingDirection.SizingSE:                      Height = clientY;                      Width = clientX;                      control.Height = clientY - 14;                      control.Width = clientX - 14;                      break;                  case SizingDirection.SizingSW:                      Left += clientX;                      Height = clientY;                      Width -= clientX;                      control.Height = clientY - 14;                      control.Width -= clientX;                      break;                  case SizingDirection.SizingNW:                      Top += clientY;                      Left += clientX;                      Height -= clientY;                      Width -= clientX;                      control.Height -= clientY;                      control.Width -= clientX;                      break;                  case SizingDirection.SizingNE:                      Top += clientY;                      Height -= clientY;                      Width = clientX;                      control.Height -= clientY;                      control.Width = clientX;                      break;                  case SizingDirection.SizingS:                      Height = clientY;                      control.Height = clientY - 14;                      break;                  case SizingDirection.SizingN:                      Top += clientY;                      Height -= clientY;                      control.Height -= clientY;                      break;                  case SizingDirection.SizingE:                      Width = clientX;                      control.Width = clientX - 14;                      break;                  case SizingDirection.SizingW:                      Left += clientX;                      Width -= clientX;                      control.Width -= clientX;                      break;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,CheckCursor,The following statement contains a magic number: if (clientPoint.X < 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNWSE;              } else if (clientPoint.X > Width - 7 && clientPoint.Y < 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X < 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNESW;              } else if (clientPoint.X > Width - 7 && clientPoint.Y > Height - 7) {                  Cursor = Cursors.SizeNWSE;              } else if ((clientPoint.X < 7 || clientPoint.X > Width - 7) && clientPoint.Y > ((Height-7)/2) && clientPoint.Y < ((Height+7)/2)) {                  Cursor = Cursors.SizeWE;              } else if ((clientPoint.Y < 7 || clientPoint.Y > Height - 7) && clientPoint.X > ((Width-7)/2) && clientPoint.X < ((Width+7)/2)) {                  Cursor = Cursors.SizeNS;              } else {                  Cursor = Cursors.SizeAll;              }
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,DrawSelection,The following statement contains a magic number: int size = 6;
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,DrawSelection,The following statement contains a magic number: Rectangle leftMid = new Rectangle(ctrl.Left - size - 1' ctrl.Top + (ctrl.Height-size)/2' size' size);
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,DrawSelection,The following statement contains a magic number: Rectangle rightMid = new Rectangle(ctrl.Right' ctrl.Top + (ctrl.Height-size)/2' size' size);
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,DrawSelection,The following statement contains a magic number: Rectangle midBottom = new Rectangle(ctrl.Left + (ctrl.Width-size)/2' ctrl.Bottom' size' size);
Magic Number,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,DrawSelection,The following statement contains a magic number: Rectangle midTop = new Rectangle(ctrl.Left + (ctrl.Width-size)/2' ctrl.Top - size - 1' size' size);
Magic Number,WixEdit.Controls,TabButtonControl,C:\repos\sebasbaumh_WixEdit\src\Controls\TabButtonControl.cs,TabButtonControl,The following statement contains a magic number: tabButtons.Size = new Size(72' 264);
Magic Number,WixEdit.Controls,TabButtonControl,C:\repos\sebasbaumh_WixEdit\src\Controls\TabButtonControl.cs,TabButtonControl,The following statement contains a magic number: tabButtons.Size = new Size(72' 264);
Magic Number,WixEdit.Controls,TabButtonControl,C:\repos\sebasbaumh_WixEdit\src\Controls\TabButtonControl.cs,tabButtons_DrawItem,The following statement contains a magic number: Point imgPos = new Point(e.Bounds.X' e.Bounds.Y+2);
Magic Number,WixEdit.Controls,TabButtonControl,C:\repos\sebasbaumh_WixEdit\src\Controls\TabButtonControl.cs,tabButtons_DrawItem,The following statement contains a magic number: imgPos.X += (e.Bounds.Width-img.Width)/2;
Magic Number,WixEdit.Controls,TabButtonControl,C:\repos\sebasbaumh_WixEdit\src\Controls\TabButtonControl.cs,tabButtons_DrawItem,The following statement contains a magic number: imgPos.Y += ((e.Bounds.Height-Convert.ToInt32(textSize.Height))/2) - ((img.Width)/2);
Magic Number,WixEdit.Controls,TabButtonControl,C:\repos\sebasbaumh_WixEdit\src\Controls\TabButtonControl.cs,tabButtons_DrawItem,The following statement contains a magic number: imgPos.Y += ((e.Bounds.Height-Convert.ToInt32(textSize.Height))/2) - ((img.Width)/2);
Magic Number,WixEdit.Controls,TabButtonControl,C:\repos\sebasbaumh_WixEdit\src\Controls\TabButtonControl.cs,tabButtons_MeasureItem,The following statement contains a magic number: e.ItemHeight += 50;
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(800' 600);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(800' 600);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: MinimumSize = new Size(250' 200);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: MinimumSize = new Size(250' 200);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: fileMenu.MenuItems.Add(2' fileLoad);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: fileMenu.MenuItems.Add(3' fileRecent);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: fileMenu.MenuItems.Add(4' fileSave);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: fileMenu.MenuItems.Add(5' fileSaveAs);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: fileMenu.MenuItems.Add(6' fileClose);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: fileMenu.MenuItems.Add(7' fileSeparator);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: fileMenu.MenuItems.Add(8' fileExit);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: editMenu.MenuItems.Add(2' new IconMenuItem("-"));
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: editMenu.MenuItems.Add(3' editFind);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: editMenu.MenuItems.Add(4' editFindNext);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: editMenu.MenuItems.Add(5' editFindPrev);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: editMenu.MenuItems.Add(6' new IconMenuItem("-"));
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: editMenu.MenuItems.Add(7' editWizard);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: buildMenu.MenuItems.Add(2' buildWixInstall);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: buildMenu.MenuItems.Add(3' buildWixUninstall);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: buildMenu.MenuItems.Add(4' new IconMenuItem("-"));
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: buildMenu.MenuItems.Add(5' buildProjectSettings);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: mainMenu.MenuItems.Add(2' buildMenu);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: toolsMenu.MenuItems.Add(2' toolsOptions);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: mainMenu.MenuItems.Add(3' toolsMenu);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: helpAbout = new IconMenuItem(new Icon(WixFiles.GetResourceStream("dialog.source.ico")' 16' 16));
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: helpAbout = new IconMenuItem(new Icon(WixFiles.GetResourceStream("dialog.source.ico")' 16' 16));
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: resultsSplitter.Height = 2;
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: resultsPanel.Height = 100;
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: resultsPanel.Size = new Size(200' 216);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,InitializeComponent,The following statement contains a magic number: resultsPanel.Size = new Size(200' 216);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,EditorForm_Activated,The following statement contains a magic number: if (splashIsDone)              {                  HideSplash();              }              else              {                  ShowSplash();                    System.Windows.Forms.Timer t = new System.Windows.Forms.Timer();                  t.Interval = 1500;                  t.Tick += new EventHandler(t_Tick);                  t.Start();              }
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,ShowSplash,The following statement contains a magic number: splash.Left = this.Left + (this.Width / 2) - (splash.Width / 2);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,ShowSplash,The following statement contains a magic number: splash.Left = this.Left + (this.Width / 2) - (splash.Width / 2);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,ShowSplash,The following statement contains a magic number: splash.Top = this.Top + (this.Height / 2) - (splash.Height / 2);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,ShowSplash,The following statement contains a magic number: splash.Top = this.Top + (this.Height / 2) - (splash.Height / 2);
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,fileRecent_Popup,The following statement contains a magic number: if (recentFiles.Length == 0)              {                  fileRecent.MenuItems.Add(0' fileRecentEmpty);              }              else              {                  bool hasObsolete = false;                    int i = 0;                  foreach (string recentFile in recentFiles)                  {                      string recentFileText = recentFile;                      if (recentFile.Length > 100)                      {                          recentFileText = "..." + recentFile.Substring(recentFile.Length - 98' 98);                      }                        IconMenuItem recentFileMenuItem = new IconMenuItem();                      recentFileMenuItem.Text = String.Format("&{0} {1}"' i + 1' recentFileText);                      recentFileMenuItem.Click += new EventHandler(recentFile_Click);                        if (File.Exists(recentFile))                      {                          Icon ico = FileIconFactory.GetFileIcon(recentFile);                          recentFileMenuItem.Bitmap = ico.ToBitmap();                      }                      else                      {                          recentFileMenuItem.Enabled = false;                          hasObsolete = true;                      }                        fileRecent.MenuItems.Add(i' recentFileMenuItem);                        i++;                  }                    fileRecent.MenuItems.Add(i++' new IconMenuItem("-"));                    // only show clean if there are obsolete files                  if (hasObsolete)                  {                      fileRecent.MenuItems.Add(i++' fileRecentClean);                  }                    fileRecent.MenuItems.Add(i' fileRecentClear);              }
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,fileRecent_Popup,The following statement contains a magic number: if (recentFiles.Length == 0)              {                  fileRecent.MenuItems.Add(0' fileRecentEmpty);              }              else              {                  bool hasObsolete = false;                    int i = 0;                  foreach (string recentFile in recentFiles)                  {                      string recentFileText = recentFile;                      if (recentFile.Length > 100)                      {                          recentFileText = "..." + recentFile.Substring(recentFile.Length - 98' 98);                      }                        IconMenuItem recentFileMenuItem = new IconMenuItem();                      recentFileMenuItem.Text = String.Format("&{0} {1}"' i + 1' recentFileText);                      recentFileMenuItem.Click += new EventHandler(recentFile_Click);                        if (File.Exists(recentFile))                      {                          Icon ico = FileIconFactory.GetFileIcon(recentFile);                          recentFileMenuItem.Bitmap = ico.ToBitmap();                      }                      else                      {                          recentFileMenuItem.Enabled = false;                          hasObsolete = true;                      }                        fileRecent.MenuItems.Add(i' recentFileMenuItem);                        i++;                  }                    fileRecent.MenuItems.Add(i++' new IconMenuItem("-"));                    // only show clean if there are obsolete files                  if (hasObsolete)                  {                      fileRecent.MenuItems.Add(i++' fileRecentClean);                  }                    fileRecent.MenuItems.Add(i' fileRecentClear);              }
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,fileRecent_Popup,The following statement contains a magic number: if (recentFiles.Length == 0)              {                  fileRecent.MenuItems.Add(0' fileRecentEmpty);              }              else              {                  bool hasObsolete = false;                    int i = 0;                  foreach (string recentFile in recentFiles)                  {                      string recentFileText = recentFile;                      if (recentFile.Length > 100)                      {                          recentFileText = "..." + recentFile.Substring(recentFile.Length - 98' 98);                      }                        IconMenuItem recentFileMenuItem = new IconMenuItem();                      recentFileMenuItem.Text = String.Format("&{0} {1}"' i + 1' recentFileText);                      recentFileMenuItem.Click += new EventHandler(recentFile_Click);                        if (File.Exists(recentFile))                      {                          Icon ico = FileIconFactory.GetFileIcon(recentFile);                          recentFileMenuItem.Bitmap = ico.ToBitmap();                      }                      else                      {                          recentFileMenuItem.Enabled = false;                          hasObsolete = true;                      }                        fileRecent.MenuItems.Add(i' recentFileMenuItem);                        i++;                  }                    fileRecent.MenuItems.Add(i++' new IconMenuItem("-"));                    // only show clean if there are obsolete files                  if (hasObsolete)                  {                      fileRecent.MenuItems.Add(i++' fileRecentClean);                  }                    fileRecent.MenuItems.Add(i' fileRecentClear);              }
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,toolsOptions_Click,The following statement contains a magic number: if (xsds != WixEditSettings.Instance.WixBinariesDirectory.Xsds ||                  version != WixEditSettings.Instance.WixBinariesVersion.Substring(0' 1))              {                  // Close all files...                  if (wixFiles != null || formInstances.Count > 1)                  {                      MessageBox.Show("You must close all files first before the new setting can be applied."' "Apply settings"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);                        HandlePendingChanges(null' true);                        this.CloseWxsFile();                        EditorForm[] constEditorArray = new EditorForm[formInstances.Count];                      formInstances.CopyTo(constEditorArray);                      for (int i = 0; i < constEditorArray.Length; i++)                      {                          EditorForm edit = constEditorArray[i];                            if (edit == this)                          {                              continue;                          }                            edit.Invoke(new VoidVoidDelegate(edit.ForceClose));                      }                        while (formInstances.Count != 1)                      {                          Thread.Sleep(100);                      }                        // and reload xsds.                      WixFiles.ReloadXsd();                        MessageBox.Show("Settings applied successfully."' "Apply settings"' MessageBoxButtons.OK' MessageBoxIcon.Information);                  }                  else                  {                      // and reload xsds.                      WixFiles.ReloadXsd();                  }                    if (xsdWarningIsDone == false && WixFiles.CheckForXsd() == false)                  {                      xsdWarningIsDone = true;                        if (String.IsNullOrEmpty(WixEditSettings.Instance.WixBinariesDirectory.BinDirectory) ||                      Directory.Exists(WixEditSettings.Instance.WixBinariesDirectory.BinDirectory) == false)                      {                          MessageBox.Show("Windows Installer XML (WiX) Toolset installation is required to run WixEdit.\r\n\r\nThe WiX installation can be downloaded from http://wix.sourceforge.net/. Please download and install WiX and specify the install location in the WixEdit options."' "Missing WiX");                      }                      else                      {                          MessageBox.Show("Please check your WiX installation!\r\n\r\nCannot find Wix.xsd! It should be located in the 'doc' subdirectory of your WiX installation. Please check your WiX installation and the XSDs location in the WixEdit options. This file is required to determine the correct xml schema for your version of WiX."' "Missing Wix.xsd");                      }                  }              }
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,OnTabChanged,The following statement contains a magic number: if (panels[oldTabIndex].Menu != null)              {                  mainMenu.MenuItems.RemoveAt(2);              }
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,OnTabChanged,The following statement contains a magic number: if (panels[tabButtonControl.SelectedIndex].Menu != null)              {                  mainMenu.MenuItems.Add(2' panels[tabButtonControl.SelectedIndex].Menu);              }
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The following statement contains a magic number: if (editInstallDataPanel.Menu != null)              {                  mainMenu.MenuItems.Add(2' editInstallDataPanel.Menu);              }
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The following statement contains a magic number: panels[2] = editPropertiesPanel;
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The following statement contains a magic number: panels[3] = editUIPanel;
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The following statement contains a magic number: panels[4] = editResourcesPanel;
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The following statement contains a magic number: panels[5] = editActionsPanel;
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,LoadWxsFile,The following statement contains a magic number: panels[6] = editCustomTablePanel;
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,CloseWxsFile,The following statement contains a magic number: if (oldTabIndex >= 0 && oldTabIndex < panels.Length && panels[oldTabIndex].Menu != null)              {                  mainMenu.MenuItems.RemoveAt(2);              }
Magic Number,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,Main,The following statement contains a magic number: if (args.Length == 2)              {                  string xmlFile = args[1];                  if (xmlFile != null && xmlFile.Length > 0)                  {                      if (File.Exists(xmlFile))                      {                          fileToOpen = xmlFile;                      }                      else if (xmlFile == "-last" || xmlFile == "/last")                      {                          string[] recentFiles = WixEditSettings.Instance.GetRecentlyUsedFiles();                          if (recentFiles.Length > 0)                          {                              fileToOpen = recentFiles[0];                          }                      }                  }              }
Magic Number,WixEdit,ElementEditForm,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ElementEditForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(384' 256);
Magic Number,WixEdit,ElementEditForm,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ElementEditForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(384' 256);
Magic Number,WixEdit,ElementEditForm,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ElementEditForm.cs,InitializeComponent,The following statement contains a magic number: elementPropertyGrid.Size = new Size(ClientSize.Width' ClientSize.Height-29);
Magic Number,WixEdit,ElementEditForm,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ElementEditForm.cs,InitializeComponent,The following statement contains a magic number: buttonOk.Left = ClientSize.Width - buttonOk.Width - 2;
Magic Number,WixEdit,ElementEditForm,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ElementEditForm.cs,InitializeComponent,The following statement contains a magic number: buttonOk.Top = elementPropertyGrid.Top + elementPropertyGrid.Height + 3;
Magic Number,WixEdit.Forms,EnterStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\EnterStringForm.cs,InitializeComponent,The following statement contains a magic number: ButtonOk.Location = new Point(0' 23);
Magic Number,WixEdit.Forms,EnterStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\EnterStringForm.cs,InitializeComponent,The following statement contains a magic number: ButtonCancel.Location = new Point(ButtonOk.Width + 2' 23);
Magic Number,WixEdit.Forms,EnterStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\EnterStringForm.cs,InitializeComponent,The following statement contains a magic number: ButtonCancel.Location = new Point(ButtonOk.Width + 2' 23);
Magic Number,WixEdit.Forms,EnterStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\EnterStringForm.cs,InitializeComponent,The following statement contains a magic number: StringEdit.Size = new Size(ButtonCancel.Width + 2 + ButtonOk.Width' 23);
Magic Number,WixEdit.Forms,EnterStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\EnterStringForm.cs,InitializeComponent,The following statement contains a magic number: StringEdit.Size = new Size(ButtonCancel.Width + 2 + ButtonOk.Width' 23);
Magic Number,WixEdit.Forms,EnterStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\EnterStringForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(ButtonCancel.Width + 2 + ButtonOk.Width' 46);
Magic Number,WixEdit.Forms,EnterStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\EnterStringForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(ButtonCancel.Width + 2 + ButtonOk.Width' 46);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: okButton.Location = new System.Drawing.Point(160' 100);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: okButton.Location = new System.Drawing.Point(160' 100);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: cancelButton.Location = new System.Drawing.Point(240' 100);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: cancelButton.Location = new System.Drawing.Point(240' 100);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: detailsButton.Location = new System.Drawing.Point(320' 100);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: detailsButton.Location = new System.Drawing.Point(320' 100);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: detailsButton.TabIndex = 2;
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: pictureBox.Location = new System.Drawing.Point(11' 11);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: pictureBox.Location = new System.Drawing.Point(11' 11);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: pictureBox.Size = new System.Drawing.Size(40' 40);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: pictureBox.Size = new System.Drawing.Size(40' 40);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: pictureBox.TabIndex = 3;
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: errorLabel.Location = new System.Drawing.Point(64' 20);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: errorLabel.Location = new System.Drawing.Point(64' 20);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: errorLabel.Size = new System.Drawing.Size(456' 40);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: errorLabel.Size = new System.Drawing.Size(456' 40);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: errorLabel.TabIndex = 4;
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: errorMessageLabel.Location = new System.Drawing.Point(64' 60);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: errorMessageLabel.Location = new System.Drawing.Point(64' 60);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: errorMessageLabel.Size = new System.Drawing.Size(456' 40);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: errorMessageLabel.Size = new System.Drawing.Size(456' 40);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: errorMessageLabel.TabIndex = 4;
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new System.Drawing.Size(545' 134);
Magic Number,WixEdit.Forms,ExceptionForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ExceptionForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new System.Drawing.Size(545' 134);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.itemListView.Location = new System.Drawing.Point(12' 12);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.itemListView.Location = new System.Drawing.Point(12' 12);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.itemListView.Size = new System.Drawing.Size(208' 289);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.itemListView.Size = new System.Drawing.Size(208' 289);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.upButton.Location = new System.Drawing.Point(226' 12);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.upButton.Location = new System.Drawing.Point(226' 12);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.upButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.upButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.downButton.Location = new System.Drawing.Point(226' 41);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.downButton.Location = new System.Drawing.Point(226' 41);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.downButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.downButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.downButton.TabIndex = 2;
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(226' 278);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(226' 278);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.okButton.TabIndex = 4;
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(313' 313);
Magic Number,WixEdit.Forms,OrderItemsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\OrderItemsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(313' 313);
Magic Number,WixEdit.Forms,ProductPropertiesForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProductPropertiesForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(384' 256);
Magic Number,WixEdit.Forms,ProductPropertiesForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProductPropertiesForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(384' 256);
Magic Number,WixEdit.Forms,ProductPropertiesForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProductPropertiesForm.cs,InitializeComponent,The following statement contains a magic number: productPropertyGrid.Size = new Size(ClientSize.Width' ClientSize.Height - 29);
Magic Number,WixEdit.Forms,ProductPropertiesForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProductPropertiesForm.cs,InitializeComponent,The following statement contains a magic number: buttonOk.Left = ClientSize.Width - buttonOk.Width - 2;
Magic Number,WixEdit.Forms,ProductPropertiesForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProductPropertiesForm.cs,InitializeComponent,The following statement contains a magic number: buttonOk.Top = productPropertyGrid.Top + productPropertyGrid.Height + 3;
Magic Number,WixEdit.Forms,ProjectSettingsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProjectSettingsForm.cs,InitializeComponent,The following statement contains a magic number: int padding = 4;
Magic Number,WixEdit.Forms,ProjectSettingsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProjectSettingsForm.cs,InitializeComponent,The following statement contains a magic number: int indent = 16;
Magic Number,WixEdit.Forms,ProjectSettingsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProjectSettingsForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(400' 200);
Magic Number,WixEdit.Forms,ProjectSettingsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProjectSettingsForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(400' 200);
Magic Number,WixEdit.Forms,ProjectSettingsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProjectSettingsForm.cs,InitializeComponent,The following statement contains a magic number: candleArgsCheck.Size = new Size(ClientSize.Width - padding * 2' 27);
Magic Number,WixEdit.Forms,ProjectSettingsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProjectSettingsForm.cs,InitializeComponent,The following statement contains a magic number: candleArgsCheck.Size = new Size(ClientSize.Width - padding * 2' 27);
Magic Number,WixEdit.Forms,ProjectSettingsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProjectSettingsForm.cs,InitializeComponent,The following statement contains a magic number: candleArgs.Size = new Size(ClientSize.Width - indent - padding * 2' 27);
Magic Number,WixEdit.Forms,ProjectSettingsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProjectSettingsForm.cs,InitializeComponent,The following statement contains a magic number: candleArgs.Size = new Size(ClientSize.Width - indent - padding * 2' 27);
Magic Number,WixEdit.Forms,ProjectSettingsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProjectSettingsForm.cs,InitializeComponent,The following statement contains a magic number: lightArgsCheck.Size = new Size(ClientSize.Width - padding * 2' 27);
Magic Number,WixEdit.Forms,ProjectSettingsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProjectSettingsForm.cs,InitializeComponent,The following statement contains a magic number: lightArgsCheck.Size = new Size(ClientSize.Width - padding * 2' 27);
Magic Number,WixEdit.Forms,ProjectSettingsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProjectSettingsForm.cs,InitializeComponent,The following statement contains a magic number: lightArgs.Size = new Size(ClientSize.Width - indent - padding * 2' 27);
Magic Number,WixEdit.Forms,ProjectSettingsForm,C:\repos\sebasbaumh_WixEdit\src\Forms\ProjectSettingsForm.cs,InitializeComponent,The following statement contains a magic number: lightArgs.Size = new Size(ClientSize.Width - indent - padding * 2' 27);
Magic Number,WixEdit.Forms,SelectStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\SelectStringForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(ButtonCancel.Width + 2 + ButtonOk.Width' 262);
Magic Number,WixEdit.Forms,SelectStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\SelectStringForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(ButtonCancel.Width + 2 + ButtonOk.Width' 262);
Magic Number,WixEdit.Forms,SelectStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\SelectStringForm.cs,InitializeComponent,The following statement contains a magic number: MinimumSize = new Size(ButtonCancel.Width + 2 + ButtonOk.Width' 262);
Magic Number,WixEdit.Forms,SelectStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\SelectStringForm.cs,InitializeComponent,The following statement contains a magic number: MinimumSize = new Size(ButtonCancel.Width + 2 + ButtonOk.Width' 262);
Magic Number,WixEdit.Forms,SelectStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\SelectStringForm.cs,InitializeComponent,The following statement contains a magic number: ButtonOk.Location = new Point(0' 262 - ButtonOk.Height);
Magic Number,WixEdit.Forms,SelectStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\SelectStringForm.cs,InitializeComponent,The following statement contains a magic number: ButtonCancel.Location = new Point(2 + ButtonOk.Width' 262 - ButtonOk.Height);
Magic Number,WixEdit.Forms,SelectStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\SelectStringForm.cs,InitializeComponent,The following statement contains a magic number: ButtonCancel.Location = new Point(2 + ButtonOk.Width' 262 - ButtonOk.Height);
Magic Number,WixEdit.Forms,SelectStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\SelectStringForm.cs,InitializeComponent,The following statement contains a magic number: StringList.Size = new Size(ButtonCancel.Width + 2 + ButtonOk.Width' 238);
Magic Number,WixEdit.Forms,SelectStringForm,C:\repos\sebasbaumh_WixEdit\src\Forms\SelectStringForm.cs,InitializeComponent,The following statement contains a magic number: StringList.Size = new Size(ButtonCancel.Width + 2 + ButtonOk.Width' 238);
Magic Number,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetRelativePath,The following statement contains a magic number: try              {                  if (Path.IsPathRooted(relativeValue) == false)                  {                      testRelativeValue = new FileInfo(Path.Combine(wxsDirectory' relativeValue));                  }                  else                  {                      if (relativeValue.StartsWith("file:"))                      {                          relativeValue.Remove(0' 5);                      }                        testRelativeValue = new FileInfo(relativeValue);                  }              }              catch (NotSupportedException ex)              {                  throw new WixEditException(String.Format("The format of the path \"{0}\" is not supported!"' relativeValue)' ex);              }              catch (PathTooLongException ex)              {                  throw new WixEditException(String.Format("The the path \"{0}\" is too long after being fully qualified. Make sure path is less than 260 characters."' relativeValue)' ex);              }
Magic Number,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetShortFileName,The following statement contains a magic number: if (nameStart.Length > 7)              {                  nameStart = nameStart.Substring(0' 7);              }              else              {                  tooShort = 7 - nameStart.Length;              }
Magic Number,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetShortFileName,The following statement contains a magic number: if (nameStart.Length > 7)              {                  nameStart = nameStart.Substring(0' 7);              }              else              {                  tooShort = 7 - nameStart.Length;              }
Magic Number,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetShortFileName,The following statement contains a magic number: if (nameStart.Length > 7)              {                  nameStart = nameStart.Substring(0' 7);              }              else              {                  tooShort = 7 - nameStart.Length;              }
Magic Number,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetShortFileName,The following statement contains a magic number: if (nameExtension.Length > 4)              {                  nameExtension = nameExtension.Substring(0' 4);              }
Magic Number,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetShortFileName,The following statement contains a magic number: if (nameExtension.Length > 4)              {                  nameExtension = nameExtension.Substring(0' 4);              }
Magic Number,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetShortFileName,The following statement contains a magic number: while (componentElement.SelectSingleNode(String.Format("wix:File[@{0}={1}]"' ShortName' XPathHelper.EscapeXPathInputString(shortFileName))' wixFiles.WxsNsmgr) != null)              {                  if (i % 10 == 0 && Math.Log10(i) % 1 == 0.00)                  {                      if (tooShort > 0)                      {                          tooShort--;                      }                      else                      {                          if (nameStart.Length <= 1)                          {                              throw new WixEditException("Cannot determine unique short name for " + fileInfo.Name);                          }                          nameStart = nameStart.Substring(0' nameStart.Length - 1);                      }                  }                    shortFileName = String.Format("{0}{1}{2}"' nameStart' i' nameExtension);                    i++;              }
Magic Number,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetShortDirectoryName,The following statement contains a magic number: if (nameStart.Length > 7)              {                  nameStart = nameStart.Substring(0' 7);              }              else              {                  tooShort = 7 - nameStart.Length;              }
Magic Number,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetShortDirectoryName,The following statement contains a magic number: if (nameStart.Length > 7)              {                  nameStart = nameStart.Substring(0' 7);              }              else              {                  tooShort = 7 - nameStart.Length;              }
Magic Number,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetShortDirectoryName,The following statement contains a magic number: if (nameStart.Length > 7)              {                  nameStart = nameStart.Substring(0' 7);              }              else              {                  tooShort = 7 - nameStart.Length;              }
Magic Number,WixEdit.Helpers,PathHelper,C:\repos\sebasbaumh_WixEdit\src\Helpers\PathHelper.cs,GetShortDirectoryName,The following statement contains a magic number: while (componentElement.SelectSingleNode(String.Format("wix:Directory[@{0}={1}]"' ShortName' XPathHelper.EscapeXPathInputString(shortDirectoryName))' wixFiles.WxsNsmgr) != null)              {                  if (i % 10 == 0 && Math.Log10(i) % 1 == 0.00)                  {                      if (tooShort > 0)                      {                          tooShort--;                      }                      else                      {                          nameStart = nameStart.Substring(0' nameStart.Length - 1);                      }                  }                    shortDirectoryName = String.Format("{0}{1}"' nameStart' ++i);              }
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,CreateImageList,The following statement contains a magic number: foreach (string type in types)              {                  try                  {                      typeBmp = null;                        if (type.StartsWith("deprecated"))                      {                          if (WixFiles.HasResource(String.Format("elements.{0}.bmp"' type.Remove(0' 11).ToLower())))                          {                              typeBmp = new Bitmap(WixFiles.GetResourceStream(String.Format("elements.{0}.bmp"' type.Remove(0' 11).ToLower())));                              Bitmap tmpBmp = OverlayWarning(typeBmp);                              typeBmp.Dispose();                              typeBmp = tmpBmp;                          }                      }                      else                      {                          if (WixFiles.HasResource(String.Format("elements.{0}.bmp"' type.ToLower())))                          {                              typeBmp = new Bitmap(WixFiles.GetResourceStream(String.Format("elements.{0}.bmp"' type.ToLower())));                          }                      }                      if (typeBmp != null)                      {                          typeBmp.MakeTransparent();                      }                      else                      {                          typeBmp = unknownBmp;                      }                  }                  catch                  {                      typeBmp = unknownBmp;                  }                    images.Images.Add(typeBmp);              }
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,CreateImageList,The following statement contains a magic number: foreach (string type in types)              {                  try                  {                      typeBmp = null;                        if (type.StartsWith("deprecated"))                      {                          if (WixFiles.HasResource(String.Format("elements.{0}.bmp"' type.Remove(0' 11).ToLower())))                          {                              typeBmp = new Bitmap(WixFiles.GetResourceStream(String.Format("elements.{0}.bmp"' type.Remove(0' 11).ToLower())));                              Bitmap tmpBmp = OverlayWarning(typeBmp);                              typeBmp.Dispose();                              typeBmp = tmpBmp;                          }                      }                      else                      {                          if (WixFiles.HasResource(String.Format("elements.{0}.bmp"' type.ToLower())))                          {                              typeBmp = new Bitmap(WixFiles.GetResourceStream(String.Format("elements.{0}.bmp"' type.ToLower())));                          }                      }                      if (typeBmp != null)                      {                          typeBmp.MakeTransparent();                      }                      else                      {                          typeBmp = unknownBmp;                      }                  }                  catch                  {                      typeBmp = unknownBmp;                  }                    images.Images.Add(typeBmp);              }
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.FillPolygon(Brushes.Yellow' new Point[] { new Point(5' 15)' new Point(15' 15)' new Point(10' 5) });
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.FillPolygon(Brushes.Yellow' new Point[] { new Point(5' 15)' new Point(15' 15)' new Point(10' 5) });
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.FillPolygon(Brushes.Yellow' new Point[] { new Point(5' 15)' new Point(15' 15)' new Point(10' 5) });
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.FillPolygon(Brushes.Yellow' new Point[] { new Point(5' 15)' new Point(15' 15)' new Point(10' 5) });
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.FillPolygon(Brushes.Yellow' new Point[] { new Point(5' 15)' new Point(15' 15)' new Point(10' 5) });
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.FillPolygon(Brushes.Yellow' new Point[] { new Point(5' 15)' new Point(15' 15)' new Point(10' 5) });
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 5' 15' 15' 15);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 5' 15' 15' 15);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 5' 15' 15' 15);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 5' 15' 15' 15);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 5' 14' 10' 5);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 5' 14' 10' 5);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 5' 14' 10' 5);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 5' 14' 10' 5);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 10' 5' 15' 14);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 10' 5' 15' 14);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 10' 5' 15' 14);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 10' 5' 15' 14);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 10' 13' 10' 14);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 10' 13' 10' 14);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 10' 13' 10' 14);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 10' 13' 10' 14);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Yellow' 9' 14' 10' 14);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Yellow' 9' 14' 10' 14);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Yellow' 9' 14' 10' 14);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Yellow' 9' 14' 10' 14);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 10' 8' 10' 11);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 10' 8' 10' 11);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 10' 8' 10' 11);
Magic Number,WixEdit.Images,ImageListFactory,C:\repos\sebasbaumh_WixEdit\src\Images\ImageListFactory.cs,OverlayWarning,The following statement contains a magic number: g.DrawLine(Pens.Black' 10' 8' 10' 11);
Magic Number,WixEdit.Import,RegistryImport,C:\repos\sebasbaumh_WixEdit\src\Import\RegistryImport.cs,Import,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)              {                  lineNumber++;                  trimmedLine = line.Trim();                    if (trimmedLine == "")                  {                      continue;                  }                  else if (trimmedLine.StartsWith("["))                  {                      if (trimmedLine.EndsWith("]") == false ||                          trimmedLine.IndexOf("\\") < 0)                      {                          throw new ImportException(String.Format("Invalid line (Line {0}): \"{1}\""' lineNumber' trimmedLine));                      }                        if (currentKeyUsed == false && currentKey != null && currentRoot != null)                      {                          XmlElement registryKey = componentElement.OwnerDocument.CreateElement(registryKeyElementName' WixFiles.WixNamespaceUri);                          registryKey.SetAttribute("Root"' currentRoot);                          registryKey.SetAttribute("Key"' currentKey);                            createdChildren.Add(registryKey);                      }                        currentKey = null;                      currentRoot = null;                      currentKeyUsed = false;                        string fullRegKey = line.Substring(1' line.Length - 2);                      int rootSeparatePos = fullRegKey.IndexOf("\\");                      string fullRoot = fullRegKey.Substring(0' rootSeparatePos);                      string root = GetRootString(fullRoot);                      if (root == null || fullRegKey.Length - rootSeparatePos - 1 <= 0)                      {                          throw new ImportException(String.Format("Invalid line (Line {0}): \"{1}\""' lineNumber' trimmedLine));                      }                      string restKey = fullRegKey.Substring(rootSeparatePos + 1' fullRegKey.Length - rootSeparatePos - 1);                        currentRoot = root;                      currentKey = restKey;                  }                  else if (trimmedLine.StartsWith("\"") || trimmedLine.StartsWith("@"))                  {                      if ((trimmedLine.IndexOf("@") != 0 && trimmedLine.IndexOf("\""' 1) < 0) ||                          trimmedLine.IndexOf("=") < 0)                      {                          throw new ImportException(String.Format("Invalid line (Line {0}): \"{1}\""' lineNumber' trimmedLine));                      }                      else if (currentRoot == null || currentKey == null)                      {                          throw new ImportException(String.Format("Invalid line (Line {0})' missing key specification: \"{1}\""' lineNumber' trimmedLine));                      }                        string nextLine = null;                      while (trimmedLine.EndsWith("\\"))                      {                          trimmedLine = trimmedLine.Remove(trimmedLine.Length - 1' 1);                            nextLine = reader.ReadLine();                          lineNumber++;                          if (nextLine == null)                          {                              throw new ImportException(String.Format("Invalid line (Line {0})' missing part of value: \"{1}\""' lineNumber' trimmedLine));                          }                            trimmedLine += nextLine.Trim();                      }                        int equalsPos = trimmedLine.IndexOf("=");                      string nameString = trimmedLine.Substring(0' equalsPos).Trim();                      string valueString = trimmedLine.Substring(equalsPos + 1).Trim();                        string currentName = GetNameString(nameString);                      string currentType = GetTypeString(valueString);                        XmlElement registryKey = componentElement.OwnerDocument.CreateElement(registryValueElementName' WixFiles.WixNamespaceUri);                      if (currentName != null && currentName != "")                      {                          registryKey.SetAttribute("Name"' currentName);                      }                      registryKey.SetAttribute("Root"' currentRoot);                      registryKey.SetAttribute("Key"' currentKey);                      registryKey.SetAttribute("Type"' currentType);                        SetValue(registryKey' currentType' valueString);                        createdChildren.Add(registryKey);                        currentKeyUsed = true;                  }                  else                  {                      throw new ImportException(String.Format("Invalid line (Line {0}): \"{1}\""' lineNumber' trimmedLine));                  }              }
Magic Number,WixEdit.Import,RegistryImport,C:\repos\sebasbaumh_WixEdit\src\Import\RegistryImport.cs,GetNameString,The following statement contains a magic number: return rawNameString.Substring(1' rawNameString.Length - 2);
Magic Number,WixEdit.Import,RegistryImport,C:\repos\sebasbaumh_WixEdit\src\Import\RegistryImport.cs,GetTypeString,The following statement contains a magic number: if (rawValueString.StartsWith("\"") &&                  rawValueString.EndsWith("\""))              {                  return "string";              }              else if (rawValueString.StartsWith("dword"))              {                  return "integer";              }              else if (rawValueString.StartsWith("hex"))              {                  string rest = rawValueString.Remove(0' 3).Trim();                  rest = rest.Replace(" "' "");                    if (rest.StartsWith(":"))                  {                      return "binary";                  }                  else if (rest.StartsWith("(2):"))                  {                      return "expandable";                  }                  else if (rest.StartsWith("(7):"))                  {                      return "multiString";                  }                  else                  {                      throw new ImportException(String.Format("Invalid hex specification (Line {0}): \"{1}\""' lineNumber' rawValueString));                  }              }              else              {                  throw new ImportException(String.Format("Invalid value (Line {0}): \"{1}\""' lineNumber' rawValueString));              }
Magic Number,WixEdit.Import,RegistryImport,C:\repos\sebasbaumh_WixEdit\src\Import\RegistryImport.cs,SetValue,The following statement contains a magic number: switch (currentType)              {                  case "string":                      ret = valueString.Substring(1' valueString.Length - 2);                      break;                  case "integer":                      string intStr = valueString.Substring(valStart' valueString.Length - valStart).Trim();                      try                      {                          ret = Int32.Parse(intStr' System.Globalization.NumberStyles.HexNumber).ToString();                      }                      catch (FormatException ex)                      {                          throw new ImportException(String.Format("Failed to parse dword value (Line {0}): {1}"' lineNumber' intStr)' ex);                      }                      break;                  case "binary":                      ret = valueString.Substring(valStart' valueString.Length - valStart).Trim();                      ret = ret.Replace("'"' "");                      ret = ret.Replace(" "' "");                      break;                  case "expandable":                      ret = ret.Replace(" "' "");                      ret = valueString.Substring(valStart' valueString.Length - valStart).Trim();                        ret = GetStringFromBinary(ret);                        ret = ret.Trim('\0');                      break;                  case "multiString":                      ret = ret.Replace(" "' "");                      ret = valueString.Substring(valStart' valueString.Length - valStart).Trim();                        ret = GetStringFromBinary(ret);                      if (ret.EndsWith("\0"))                      {                          ret = ret.Remove(ret.Length - 1' 1);                      }                        break;              }
Magic Number,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,DialogUnitsToPixelsWidth,The following statement contains a magic number: return (int)Math.Round(((double)scale * dlus * HorDLUs) / 6);
Magic Number,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,DialogUnitsToPixelsHeight,The following statement contains a magic number: int VerDLUs = (int)(DLUs >> 16) & 0xFFFF;
Magic Number,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,DialogUnitsToPixelsHeight,The following statement contains a magic number: return (int)Math.Round(((double)scale * dlus * VerDLUs) / 12);
Magic Number,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,PixelsToDialogUnitsWidth,The following statement contains a magic number: return (int)Math.Round(((double)pix * 6) / (scale * HorDLUs));
Magic Number,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,PixelsToDialogUnitsHeight,The following statement contains a magic number: int VerDLUs = (int)(DLUs >> 16) & 0xFFFF;
Magic Number,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,PixelsToDialogUnitsHeight,The following statement contains a magic number: return (int)Math.Round(((double)pix * 12) / (scale * VerDLUs));
Magic Number,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddLines,The following statement contains a magic number: foreach (XmlNode line in lines)              {                  try                  {                      Label label = new Label();                      SetControlAttributes(label' line);                        label.Height = 2;                      label.BorderStyle = BorderStyle.Fixed3D;                        newDialog.AddControl(line' label);                  }                  catch                  {                  }              }
Magic Number,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddProgressBars,The following statement contains a magic number: foreach (XmlNode progressbar in progressBars)              {                  try                  {                      ProgressBar progressCtrl = new ProgressBar();                      SetControlAttributes(progressCtrl' progressbar);                        progressCtrl.Maximum = 100;                      progressCtrl.Value = 33;                        newDialog.AddControl(progressbar' progressCtrl);                  }                  catch                  {                  }              }
Magic Number,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,AddProgressBars,The following statement contains a magic number: foreach (XmlNode progressbar in progressBars)              {                  try                  {                      ProgressBar progressCtrl = new ProgressBar();                      SetControlAttributes(progressCtrl' progressbar);                        progressCtrl.Maximum = 100;                      progressCtrl.Value = 33;                        newDialog.AddControl(progressbar' progressCtrl);                  }                  catch                  {                  }              }
Magic Number,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,SetText,The following statement contains a magic number: if (startFont >= 0)              {                  int endFont = textValue.IndexOf("}"' startFont);                    Font font = definedFonts[textValue.Substring(startFont + 2' endFont - startFont - 2)] as Font;                  if (font != null)                  {                      textControl.Font = font;                  }                    textValue = textValue.Remove(startFont' endFont - startFont + 1);              }
Magic Number,WixEdit.Panels,DialogGenerator,C:\repos\sebasbaumh_WixEdit\src\Panels\DialogGenerator.cs,SetText,The following statement contains a magic number: if (startFont >= 0)              {                  int endFont = textValue.IndexOf("}"' startFont);                    Font font = definedFonts[textValue.Substring(startFont + 2' endFont - startFont - 2)] as Font;                  if (font != null)                  {                      textControl.Font = font;                  }                    textValue = textValue.Remove(startFont' endFont - startFont + 1);              }
Magic Number,WixEdit.Panels,DisplaySimpleBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplaySimpleBasePanel.cs,InitializeComponent,The following statement contains a magic number: currGrid.Location = new Point(140' 0);
Magic Number,WixEdit.Panels,DisplaySimpleBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplaySimpleBasePanel.cs,InitializeComponent,The following statement contains a magic number: currGrid.Size = new Size(269' 266);
Magic Number,WixEdit.Panels,DisplaySimpleBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplaySimpleBasePanel.cs,InitializeComponent,The following statement contains a magic number: currGrid.Size = new Size(269' 266);
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: currTreeView.Size = new Size(256' 266);
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: currTreeView.Size = new Size(256' 266);
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: currTreeView.TabIndex = 6;
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: splitter1.Location = new Point(140' 0);
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: splitter1.Size = new Size(2' 266);
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: splitter1.Size = new Size(2' 266);
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: splitter1.TabIndex = 7;
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: currGrid.Location = new Point(140' 0);
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: currGrid.Size = new Size(250' 266);
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: currGrid.Size = new Size(250' 266);
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: panel1.Location = new Point(142' 0);
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: panel1.Size = new Size(409' 266);
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: panel1.Size = new Size(409' 266);
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,InitializeComponent,The following statement contains a magic number: panel1.TabIndex = 9;
Magic Number,WixEdit.Panels,DisplayTreeBasePanel,C:\repos\sebasbaumh_WixEdit\src\Panels\DisplayTreeBasePanel.cs,AddTreeNodesRecursive,The following statement contains a magic number: if (file.ChildNodes.Count > 10000)              {                  TreeNode tooManyNodes = new TreeNode("<< Too many children to display >>");                  node.ImageIndex = ImageListFactory.GetUnsupportedImageIndex();                  node.SelectedImageIndex = ImageListFactory.GetUnsupportedImageIndex();                  node.Nodes.Add(tooManyNodes);                    return;              }
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,OnResizeWxsCustomTables,The following statement contains a magic number: if (wxsCustomTables.Columns.Count > 0 && wxsCustomTables.Columns[0] != null)              {                  wxsCustomTables.Columns[0].Width = wxsCustomTables.ClientSize.Width - 4;              }
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,InitializeComponent,The following statement contains a magic number: wxsCustomTables.Size = new Size(140' 264);
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,InitializeComponent,The following statement contains a magic number: wxsCustomTables.Size = new Size(140' 264);
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,InitializeComponent,The following statement contains a magic number: splitter1.Location = new Point(140' 0);
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,InitializeComponent,The following statement contains a magic number: splitter1.Size = new Size(2' 266);
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,InitializeComponent,The following statement contains a magic number: splitter1.Size = new Size(2' 266);
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,InitializeComponent,The following statement contains a magic number: splitter1.TabIndex = 7;
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,InitializeComponent,The following statement contains a magic number: dataGridView.Size = new System.Drawing.Size(292' 266);
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,InitializeComponent,The following statement contains a magic number: dataGridView.Size = new System.Drawing.Size(292' 266);
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,InitializeComponent,The following statement contains a magic number: panel1.Location = new Point(142' 0);
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,InitializeComponent,The following statement contains a magic number: panel1.Size = new Size(409' 266);
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,InitializeComponent,The following statement contains a magic number: panel1.Size = new Size(409' 266);
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,InitializeComponent,The following statement contains a magic number: panel1.TabIndex = 9;
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,InitializeComponent,The following statement contains a magic number: wxsCustomTables.Columns.Add("Item Column"' -2' HorizontalAlignment.Left);
Magic Number,WixEdit.Panels,EditCustomTableDataPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDataPanel.cs,ShowCustomTable,The following statement contains a magic number: if (table != null)              {                  foreach (XmlNode xmlNode in table.ChildNodes)                  {                      if (xmlNode.Name != "Column")                      {                          continue;                      }                        XmlElement xmlElement = (XmlElement)xmlNode;                        string id = xmlElement.GetAttribute("Id");                      if (String.IsNullOrEmpty(id))                      {                          continue;                      }                        DataGridViewColumn newColumn = null;                        string type = xmlElement.GetAttribute("Type");                        switch (type)                      {                          case "integer":                          case "int":                              newColumn = new NumericTextBoxColumn();                              break;                          case "binary":                              newColumn = new FileSelectColumn();                              ((FileSelectColumn)newColumn).WixFiles = WixFiles;                              break;                          default:                              newColumn = new DataGridViewTextBoxColumn();                              break;                      }                        DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();                      dataGridViewCellStyle.NullValue = null;                        newColumn.DefaultCellStyle = dataGridViewCellStyle;                      newColumn.HeaderText = id;                      newColumn.Name = id;                      newColumn.DataPropertyName = id;                      newColumn.MinimumWidth = 40;                        this.dataGridView.Columns.Add(newColumn);                  }                    CustomTableRowBindingList data = new CustomTableRowBindingList();                  data.AllowEdit = true;                  data.AllowNew = true;                  data.AllowRemove = true;                  data.AddingNew += new AddingNewEventHandler(OnAddingNew);                  data.RaiseListChangedEvents = true;                    foreach (XmlNode xmlNode in table.SelectNodes("wix:Row"' WixFiles.WxsNsmgr))                  {                      if (xmlNode.Name != "Row")                      {                          continue;                      }                        XmlElement xmlElement = (XmlElement)xmlNode;                        data.Add(new CustomTableRowElementAdapter(xmlElement' WixFiles));                  }                    dataGridView.DataSource = data;              }
Magic Number,WixEdit.Panels,EditCustomTableDefinitionPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditCustomTableDefinitionPanel.cs,CurrentGrid_PropertyValueChanged,The following statement contains a magic number: if (item.Label == "Id" && !String.IsNullOrEmpty((string)e.OldValue))              {                  XmlAttributePropertyDescriptor pd = (XmlAttributePropertyDescriptor)item.PropertyDescriptor;                  XmlNodeList equalNamedColumns = pd.Attribute.OwnerElement.ParentNode.SelectNodes(String.Format("wix:Column[@Id='{0}']"' item.Value)' WixFiles.WxsNsmgr);                  if (equalNamedColumns.Count >= 2)                  {                      MessageBox.Show(String.Format("There is already a column with the name \"{0}\"!"' item.Value)' "Duplicate column name"' MessageBoxButtons.OK' MessageBoxIcon.Error);                                            // Rollback                      WixFiles.UndoManager.Undo();                        // Refresh the tree                      if (CurrentTreeView.SelectedNode != null)                      {                          XmlNode node = (XmlNode)currTreeView.SelectedNode.Tag;                          string displayName = GetDisplayName(node);                          if (displayName != null && displayName.Length > 0 &&                              currTreeView.SelectedNode.Text != displayName)                          {                              currTreeView.SelectedNode.Text = displayName;                          }                      }                        // and the grid                      CurrentGrid.Refresh();                  }                  else                  {                      // Rename all row elements                      foreach (XmlElement dataElement in pd.Attribute.OwnerElement.ParentNode.SelectNodes(String.Format("wix:Row/wix:Data[@Column='{0}']"' e.OldValue)' WixFiles.WxsNsmgr))                      {                          dataElement.SetAttribute("Column"' (string)item.Value);                      }                  }              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,OnResizeWxsDialogs,The following statement contains a magic number: if (wxsDialogs.Columns.Count > 0 && wxsDialogs.Columns[0] != null)              {                  wxsDialogs.Columns[0].Width = wxsDialogs.ClientSize.Width - 4;              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: Opacity50.Index = 2;
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: Opacity25.Index = 3;
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: Separator.Index = 4;
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: AlwaysOnTop.Index = 5;
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: SnapToGrid.Index = 6;
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: DialogScale.Index = 6;
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: dialogTreeView.Size = new Size(170' 266);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: dialogTreeView.Size = new Size(170' 266);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: dialogTreeView.TabIndex = 6;
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: propertyGrid.Location = new Point(140' 0);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: propertyGrid.Size = new Size(250' 266);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: propertyGrid.Size = new Size(250' 266);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: wxsDialogs.Size = new Size(140' 264);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: wxsDialogs.Size = new Size(140' 264);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: splitter1.Location = new Point(140' 0);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: splitter1.Size = new Size(2' 266);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: splitter1.Size = new Size(2' 266);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: splitter1.TabIndex = 7;
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: panel1.Location = new Point(142' 0);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: panel1.Size = new Size(409' 266);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: panel1.Size = new Size(409' 266);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: panel1.TabIndex = 9;
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: splitter2.Location = new Point(140' 0);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: splitter2.Size = new Size(2' 266);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: splitter2.Size = new Size(2' 266);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: splitter2.TabIndex = 7;
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(553' 266);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(553' 266);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: if (opacity == 1.00)              {                  Opacity100.Checked = true;              }              else if (opacity == 0.75)              {                  Opacity75.Checked = true;              }              else if (opacity == 0.50)              {                  Opacity50.Checked = true;              }              else if (opacity == 0.25)              {                  Opacity25.Checked = true;              }              else              {                  Opacity100.Checked = true;              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: if (opacity == 1.00)              {                  Opacity100.Checked = true;              }              else if (opacity == 0.75)              {                  Opacity75.Checked = true;              }              else if (opacity == 0.50)              {                  Opacity50.Checked = true;              }              else if (opacity == 0.25)              {                  Opacity25.Checked = true;              }              else              {                  Opacity100.Checked = true;              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: if (opacity == 1.00)              {                  Opacity100.Checked = true;              }              else if (opacity == 0.75)              {                  Opacity75.Checked = true;              }              else if (opacity == 0.50)              {                  Opacity50.Checked = true;              }              else if (opacity == 0.25)              {                  Opacity25.Checked = true;              }              else              {                  Opacity100.Checked = true;              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,InitializeComponent,The following statement contains a magic number: wxsDialogs.Columns.Add("Item Column"' -2' HorizontalAlignment.Left);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,SetDefaultValues,The following statement contains a magic number: if (node.Name.ToLower() == "control")              {                  int left = 0;                  int top = 0;                  int width = 50;                  int height = 17;                    XmlAttribute typeAtt = node.Attributes["Type"];                  if (typeAtt != null && typeAtt.Value.Length > 0)                  {                      switch (typeAtt.Value.ToLower())                      {                          case "pushbutton":                              width = 56;                              height = 17;                              break;                          default:                              break;                      }                  }                    XmlAttribute att = WixFiles.WxsDocument.CreateAttribute("Width");                  att.Value = width.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Height");                  att.Value = height.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("X");                  att.Value = left.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Y");                  att.Value = top.ToString();                  node.Attributes.Append(att);              }              else              { // A sub-node                  int width = 50;                  int height = 17;                  int left = 0;                  int top = parentNode.ChildNodes.Count * height * 3 / 2;                  XmlAttributeAdapter attAdapter = new XmlAttributeAdapter(node' WixFiles);                    XmlNodeList xmlAttributes = attAdapter.XmlNodeDefinition.SelectNodes("xs:attribute"' WixFiles.XsdNsmgr);                  foreach (XmlNode at in xmlAttributes)                  {                      string attName = at.Attributes["name"].Value;                      // Add only required attributes                      if ((at.Attributes["use"] != null &&                          at.Attributes["use"].Value == "required") ||                          (attName == "Value"))                      {                          XmlAttribute att = WixFiles.WxsDocument.CreateAttribute(attName);                          switch (attName)                          {                              case "Width":                                  att.Value = width.ToString();                                  break;                              case "Height":                                  att.Value = height.ToString();                                    // Give the parent more room to display this item                                  if (parentNode.ParentNode != null &&                                      parentNode.ParentNode.Attributes["Height"] != null)                                  {                                      try                                      {                                          int currentParentHeight = Int32.Parse(parentNode.ParentNode.Attributes["Height"].Value);                                          if (currentParentHeight < top + height)                                          {                                              parentNode.ParentNode.Attributes["Height"].Value = (top + height).ToString();                                          }                                      }                                      catch { }                                  }                                  break;                              case "X":                                  att.Value = left.ToString();                                  break;                              case "Y":                                  att.Value = top.ToString();                                  break;                          }                            node.Attributes.Append(att);                      }                  }              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,SetDefaultValues,The following statement contains a magic number: if (node.Name.ToLower() == "control")              {                  int left = 0;                  int top = 0;                  int width = 50;                  int height = 17;                    XmlAttribute typeAtt = node.Attributes["Type"];                  if (typeAtt != null && typeAtt.Value.Length > 0)                  {                      switch (typeAtt.Value.ToLower())                      {                          case "pushbutton":                              width = 56;                              height = 17;                              break;                          default:                              break;                      }                  }                    XmlAttribute att = WixFiles.WxsDocument.CreateAttribute("Width");                  att.Value = width.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Height");                  att.Value = height.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("X");                  att.Value = left.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Y");                  att.Value = top.ToString();                  node.Attributes.Append(att);              }              else              { // A sub-node                  int width = 50;                  int height = 17;                  int left = 0;                  int top = parentNode.ChildNodes.Count * height * 3 / 2;                  XmlAttributeAdapter attAdapter = new XmlAttributeAdapter(node' WixFiles);                    XmlNodeList xmlAttributes = attAdapter.XmlNodeDefinition.SelectNodes("xs:attribute"' WixFiles.XsdNsmgr);                  foreach (XmlNode at in xmlAttributes)                  {                      string attName = at.Attributes["name"].Value;                      // Add only required attributes                      if ((at.Attributes["use"] != null &&                          at.Attributes["use"].Value == "required") ||                          (attName == "Value"))                      {                          XmlAttribute att = WixFiles.WxsDocument.CreateAttribute(attName);                          switch (attName)                          {                              case "Width":                                  att.Value = width.ToString();                                  break;                              case "Height":                                  att.Value = height.ToString();                                    // Give the parent more room to display this item                                  if (parentNode.ParentNode != null &&                                      parentNode.ParentNode.Attributes["Height"] != null)                                  {                                      try                                      {                                          int currentParentHeight = Int32.Parse(parentNode.ParentNode.Attributes["Height"].Value);                                          if (currentParentHeight < top + height)                                          {                                              parentNode.ParentNode.Attributes["Height"].Value = (top + height).ToString();                                          }                                      }                                      catch { }                                  }                                  break;                              case "X":                                  att.Value = left.ToString();                                  break;                              case "Y":                                  att.Value = top.ToString();                                  break;                          }                            node.Attributes.Append(att);                      }                  }              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,SetDefaultValues,The following statement contains a magic number: if (node.Name.ToLower() == "control")              {                  int left = 0;                  int top = 0;                  int width = 50;                  int height = 17;                    XmlAttribute typeAtt = node.Attributes["Type"];                  if (typeAtt != null && typeAtt.Value.Length > 0)                  {                      switch (typeAtt.Value.ToLower())                      {                          case "pushbutton":                              width = 56;                              height = 17;                              break;                          default:                              break;                      }                  }                    XmlAttribute att = WixFiles.WxsDocument.CreateAttribute("Width");                  att.Value = width.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Height");                  att.Value = height.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("X");                  att.Value = left.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Y");                  att.Value = top.ToString();                  node.Attributes.Append(att);              }              else              { // A sub-node                  int width = 50;                  int height = 17;                  int left = 0;                  int top = parentNode.ChildNodes.Count * height * 3 / 2;                  XmlAttributeAdapter attAdapter = new XmlAttributeAdapter(node' WixFiles);                    XmlNodeList xmlAttributes = attAdapter.XmlNodeDefinition.SelectNodes("xs:attribute"' WixFiles.XsdNsmgr);                  foreach (XmlNode at in xmlAttributes)                  {                      string attName = at.Attributes["name"].Value;                      // Add only required attributes                      if ((at.Attributes["use"] != null &&                          at.Attributes["use"].Value == "required") ||                          (attName == "Value"))                      {                          XmlAttribute att = WixFiles.WxsDocument.CreateAttribute(attName);                          switch (attName)                          {                              case "Width":                                  att.Value = width.ToString();                                  break;                              case "Height":                                  att.Value = height.ToString();                                    // Give the parent more room to display this item                                  if (parentNode.ParentNode != null &&                                      parentNode.ParentNode.Attributes["Height"] != null)                                  {                                      try                                      {                                          int currentParentHeight = Int32.Parse(parentNode.ParentNode.Attributes["Height"].Value);                                          if (currentParentHeight < top + height)                                          {                                              parentNode.ParentNode.Attributes["Height"].Value = (top + height).ToString();                                          }                                      }                                      catch { }                                  }                                  break;                              case "X":                                  att.Value = left.ToString();                                  break;                              case "Y":                                  att.Value = top.ToString();                                  break;                          }                            node.Attributes.Append(att);                      }                  }              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,SetDefaultValues,The following statement contains a magic number: if (node.Name.ToLower() == "control")              {                  int left = 0;                  int top = 0;                  int width = 50;                  int height = 17;                    XmlAttribute typeAtt = node.Attributes["Type"];                  if (typeAtt != null && typeAtt.Value.Length > 0)                  {                      switch (typeAtt.Value.ToLower())                      {                          case "pushbutton":                              width = 56;                              height = 17;                              break;                          default:                              break;                      }                  }                    XmlAttribute att = WixFiles.WxsDocument.CreateAttribute("Width");                  att.Value = width.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Height");                  att.Value = height.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("X");                  att.Value = left.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Y");                  att.Value = top.ToString();                  node.Attributes.Append(att);              }              else              { // A sub-node                  int width = 50;                  int height = 17;                  int left = 0;                  int top = parentNode.ChildNodes.Count * height * 3 / 2;                  XmlAttributeAdapter attAdapter = new XmlAttributeAdapter(node' WixFiles);                    XmlNodeList xmlAttributes = attAdapter.XmlNodeDefinition.SelectNodes("xs:attribute"' WixFiles.XsdNsmgr);                  foreach (XmlNode at in xmlAttributes)                  {                      string attName = at.Attributes["name"].Value;                      // Add only required attributes                      if ((at.Attributes["use"] != null &&                          at.Attributes["use"].Value == "required") ||                          (attName == "Value"))                      {                          XmlAttribute att = WixFiles.WxsDocument.CreateAttribute(attName);                          switch (attName)                          {                              case "Width":                                  att.Value = width.ToString();                                  break;                              case "Height":                                  att.Value = height.ToString();                                    // Give the parent more room to display this item                                  if (parentNode.ParentNode != null &&                                      parentNode.ParentNode.Attributes["Height"] != null)                                  {                                      try                                      {                                          int currentParentHeight = Int32.Parse(parentNode.ParentNode.Attributes["Height"].Value);                                          if (currentParentHeight < top + height)                                          {                                              parentNode.ParentNode.Attributes["Height"].Value = (top + height).ToString();                                          }                                      }                                      catch { }                                  }                                  break;                              case "X":                                  att.Value = left.ToString();                                  break;                              case "Y":                                  att.Value = top.ToString();                                  break;                          }                            node.Attributes.Append(att);                      }                  }              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,SetDefaultValues,The following statement contains a magic number: if (node.Name.ToLower() == "control")              {                  int left = 0;                  int top = 0;                  int width = 50;                  int height = 17;                    XmlAttribute typeAtt = node.Attributes["Type"];                  if (typeAtt != null && typeAtt.Value.Length > 0)                  {                      switch (typeAtt.Value.ToLower())                      {                          case "pushbutton":                              width = 56;                              height = 17;                              break;                          default:                              break;                      }                  }                    XmlAttribute att = WixFiles.WxsDocument.CreateAttribute("Width");                  att.Value = width.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Height");                  att.Value = height.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("X");                  att.Value = left.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Y");                  att.Value = top.ToString();                  node.Attributes.Append(att);              }              else              { // A sub-node                  int width = 50;                  int height = 17;                  int left = 0;                  int top = parentNode.ChildNodes.Count * height * 3 / 2;                  XmlAttributeAdapter attAdapter = new XmlAttributeAdapter(node' WixFiles);                    XmlNodeList xmlAttributes = attAdapter.XmlNodeDefinition.SelectNodes("xs:attribute"' WixFiles.XsdNsmgr);                  foreach (XmlNode at in xmlAttributes)                  {                      string attName = at.Attributes["name"].Value;                      // Add only required attributes                      if ((at.Attributes["use"] != null &&                          at.Attributes["use"].Value == "required") ||                          (attName == "Value"))                      {                          XmlAttribute att = WixFiles.WxsDocument.CreateAttribute(attName);                          switch (attName)                          {                              case "Width":                                  att.Value = width.ToString();                                  break;                              case "Height":                                  att.Value = height.ToString();                                    // Give the parent more room to display this item                                  if (parentNode.ParentNode != null &&                                      parentNode.ParentNode.Attributes["Height"] != null)                                  {                                      try                                      {                                          int currentParentHeight = Int32.Parse(parentNode.ParentNode.Attributes["Height"].Value);                                          if (currentParentHeight < top + height)                                          {                                              parentNode.ParentNode.Attributes["Height"].Value = (top + height).ToString();                                          }                                      }                                      catch { }                                  }                                  break;                              case "X":                                  att.Value = left.ToString();                                  break;                              case "Y":                                  att.Value = top.ToString();                                  break;                          }                            node.Attributes.Append(att);                      }                  }              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,SetDefaultValues,The following statement contains a magic number: if (node.Name.ToLower() == "control")              {                  int left = 0;                  int top = 0;                  int width = 50;                  int height = 17;                    XmlAttribute typeAtt = node.Attributes["Type"];                  if (typeAtt != null && typeAtt.Value.Length > 0)                  {                      switch (typeAtt.Value.ToLower())                      {                          case "pushbutton":                              width = 56;                              height = 17;                              break;                          default:                              break;                      }                  }                    XmlAttribute att = WixFiles.WxsDocument.CreateAttribute("Width");                  att.Value = width.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Height");                  att.Value = height.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("X");                  att.Value = left.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Y");                  att.Value = top.ToString();                  node.Attributes.Append(att);              }              else              { // A sub-node                  int width = 50;                  int height = 17;                  int left = 0;                  int top = parentNode.ChildNodes.Count * height * 3 / 2;                  XmlAttributeAdapter attAdapter = new XmlAttributeAdapter(node' WixFiles);                    XmlNodeList xmlAttributes = attAdapter.XmlNodeDefinition.SelectNodes("xs:attribute"' WixFiles.XsdNsmgr);                  foreach (XmlNode at in xmlAttributes)                  {                      string attName = at.Attributes["name"].Value;                      // Add only required attributes                      if ((at.Attributes["use"] != null &&                          at.Attributes["use"].Value == "required") ||                          (attName == "Value"))                      {                          XmlAttribute att = WixFiles.WxsDocument.CreateAttribute(attName);                          switch (attName)                          {                              case "Width":                                  att.Value = width.ToString();                                  break;                              case "Height":                                  att.Value = height.ToString();                                    // Give the parent more room to display this item                                  if (parentNode.ParentNode != null &&                                      parentNode.ParentNode.Attributes["Height"] != null)                                  {                                      try                                      {                                          int currentParentHeight = Int32.Parse(parentNode.ParentNode.Attributes["Height"].Value);                                          if (currentParentHeight < top + height)                                          {                                              parentNode.ParentNode.Attributes["Height"].Value = (top + height).ToString();                                          }                                      }                                      catch { }                                  }                                  break;                              case "X":                                  att.Value = left.ToString();                                  break;                              case "Y":                                  att.Value = top.ToString();                                  break;                          }                            node.Attributes.Append(att);                      }                  }              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,SetDefaultValues,The following statement contains a magic number: if (node.Name.ToLower() == "control")              {                  int left = 0;                  int top = 0;                  int width = 50;                  int height = 17;                    XmlAttribute typeAtt = node.Attributes["Type"];                  if (typeAtt != null && typeAtt.Value.Length > 0)                  {                      switch (typeAtt.Value.ToLower())                      {                          case "pushbutton":                              width = 56;                              height = 17;                              break;                          default:                              break;                      }                  }                    XmlAttribute att = WixFiles.WxsDocument.CreateAttribute("Width");                  att.Value = width.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Height");                  att.Value = height.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("X");                  att.Value = left.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Y");                  att.Value = top.ToString();                  node.Attributes.Append(att);              }              else              { // A sub-node                  int width = 50;                  int height = 17;                  int left = 0;                  int top = parentNode.ChildNodes.Count * height * 3 / 2;                  XmlAttributeAdapter attAdapter = new XmlAttributeAdapter(node' WixFiles);                    XmlNodeList xmlAttributes = attAdapter.XmlNodeDefinition.SelectNodes("xs:attribute"' WixFiles.XsdNsmgr);                  foreach (XmlNode at in xmlAttributes)                  {                      string attName = at.Attributes["name"].Value;                      // Add only required attributes                      if ((at.Attributes["use"] != null &&                          at.Attributes["use"].Value == "required") ||                          (attName == "Value"))                      {                          XmlAttribute att = WixFiles.WxsDocument.CreateAttribute(attName);                          switch (attName)                          {                              case "Width":                                  att.Value = width.ToString();                                  break;                              case "Height":                                  att.Value = height.ToString();                                    // Give the parent more room to display this item                                  if (parentNode.ParentNode != null &&                                      parentNode.ParentNode.Attributes["Height"] != null)                                  {                                      try                                      {                                          int currentParentHeight = Int32.Parse(parentNode.ParentNode.Attributes["Height"].Value);                                          if (currentParentHeight < top + height)                                          {                                              parentNode.ParentNode.Attributes["Height"].Value = (top + height).ToString();                                          }                                      }                                      catch { }                                  }                                  break;                              case "X":                                  att.Value = left.ToString();                                  break;                              case "Y":                                  att.Value = top.ToString();                                  break;                          }                            node.Attributes.Append(att);                      }                  }              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,SetDefaultValues,The following statement contains a magic number: if (node.Name.ToLower() == "control")              {                  int left = 0;                  int top = 0;                  int width = 50;                  int height = 17;                    XmlAttribute typeAtt = node.Attributes["Type"];                  if (typeAtt != null && typeAtt.Value.Length > 0)                  {                      switch (typeAtt.Value.ToLower())                      {                          case "pushbutton":                              width = 56;                              height = 17;                              break;                          default:                              break;                      }                  }                    XmlAttribute att = WixFiles.WxsDocument.CreateAttribute("Width");                  att.Value = width.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Height");                  att.Value = height.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("X");                  att.Value = left.ToString();                  node.Attributes.Append(att);                    att = WixFiles.WxsDocument.CreateAttribute("Y");                  att.Value = top.ToString();                  node.Attributes.Append(att);              }              else              { // A sub-node                  int width = 50;                  int height = 17;                  int left = 0;                  int top = parentNode.ChildNodes.Count * height * 3 / 2;                  XmlAttributeAdapter attAdapter = new XmlAttributeAdapter(node' WixFiles);                    XmlNodeList xmlAttributes = attAdapter.XmlNodeDefinition.SelectNodes("xs:attribute"' WixFiles.XsdNsmgr);                  foreach (XmlNode at in xmlAttributes)                  {                      string attName = at.Attributes["name"].Value;                      // Add only required attributes                      if ((at.Attributes["use"] != null &&                          at.Attributes["use"].Value == "required") ||                          (attName == "Value"))                      {                          XmlAttribute att = WixFiles.WxsDocument.CreateAttribute(attName);                          switch (attName)                          {                              case "Width":                                  att.Value = width.ToString();                                  break;                              case "Height":                                  att.Value = height.ToString();                                    // Give the parent more room to display this item                                  if (parentNode.ParentNode != null &&                                      parentNode.ParentNode.Attributes["Height"] != null)                                  {                                      try                                      {                                          int currentParentHeight = Int32.Parse(parentNode.ParentNode.Attributes["Height"].Value);                                          if (currentParentHeight < top + height)                                          {                                              parentNode.ParentNode.Attributes["Height"].Value = (top + height).ToString();                                          }                                      }                                      catch { }                                  }                                  break;                              case "X":                                  att.Value = left.ToString();                                  break;                              case "Y":                                  att.Value = top.ToString();                                  break;                          }                            node.Attributes.Append(att);                      }                  }              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,ShowWixDialog,The following statement contains a magic number: if (currentDialog != null)              {                  prevTop = currentDialog.Top;                  prevLeft = currentDialog.Left;                  prevDialog = currentDialog;              }              else              {                  if (TopLevelControl != null)                  {                      prevTop = TopLevelControl.Top;                      prevLeft = TopLevelControl.Right;                        if (prevLeft >= Screen.PrimaryScreen.WorkingArea.Width)                      {                          prevLeft = prevLeft / 3;                      }                      if (prevTop >= Screen.PrimaryScreen.WorkingArea.Height)                      {                          prevTop = prevTop / 3;                      }                  }              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,ShowWixDialog,The following statement contains a magic number: if (currentDialog != null)              {                  prevTop = currentDialog.Top;                  prevLeft = currentDialog.Left;                  prevDialog = currentDialog;              }              else              {                  if (TopLevelControl != null)                  {                      prevTop = TopLevelControl.Top;                      prevLeft = TopLevelControl.Right;                        if (prevLeft >= Screen.PrimaryScreen.WorkingArea.Width)                      {                          prevLeft = prevLeft / 3;                      }                      if (prevTop >= Screen.PrimaryScreen.WorkingArea.Height)                      {                          prevTop = prevTop / 3;                      }                  }              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,DialogScale_Click,The following statement contains a magic number: form.SelectedInteger = (int)(WixEditSettings.Instance.Scale * 100);
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,DialogScale_Click,The following statement contains a magic number: if (form.ShowDialog() == DialogResult.OK)              {                  DialogGenerator.Scale = ((double)form.SelectedInteger) / 100.00;                  WixEditSettings.Instance.Scale = ((double)form.SelectedInteger) / 100.00;                  WixEditSettings.Instance.SaveChanges();                    if (prevSelectedIndex >= 0 && wxsDialogs.Items.Count > prevSelectedIndex)                  {                      XmlNode dialog = (XmlNode)wxsDialogs.Items[prevSelectedIndex].Tag;                        ShowWixDialog(dialog);                  }              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,DialogScale_Click,The following statement contains a magic number: if (form.ShowDialog() == DialogResult.OK)              {                  DialogGenerator.Scale = ((double)form.SelectedInteger) / 100.00;                  WixEditSettings.Instance.Scale = ((double)form.SelectedInteger) / 100.00;                  WixEditSettings.Instance.SaveChanges();                    if (prevSelectedIndex >= 0 && wxsDialogs.Items.Count > prevSelectedIndex)                  {                      XmlNode dialog = (XmlNode)wxsDialogs.Items[prevSelectedIndex].Tag;                        ShowWixDialog(dialog);                  }              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,GetOpacity,The following statement contains a magic number: if (Opacity100.Checked)              {                  return 1.00;              }              else if (Opacity75.Checked)              {                  return 0.75;              }              else if (Opacity50.Checked)              {                  return 0.50;              }              else if (Opacity25.Checked)              {                  return 0.25;              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,GetOpacity,The following statement contains a magic number: if (Opacity100.Checked)              {                  return 1.00;              }              else if (Opacity75.Checked)              {                  return 0.75;              }              else if (Opacity50.Checked)              {                  return 0.50;              }              else if (Opacity25.Checked)              {                  return 0.25;              }
Magic Number,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,GetOpacity,The following statement contains a magic number: if (Opacity100.Checked)              {                  return 1.00;              }              else if (Opacity75.Checked)              {                  return 0.75;              }              else if (Opacity50.Checked)              {                  return 0.50;              }              else if (Opacity25.Checked)              {                  return 0.25;              }
Magic Number,WixEdit.Panels,EditFeaturesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditFeaturesPanel.cs,AddCustomTreeViewContextMenuItems,The following statement contains a magic number: if (node.Name == "Feature")              {                  IconMenuItem item = new IconMenuItem("Select Components to add");                  item.Click += new EventHandler(mnuAddComponents_Click);                  currTreeViewContextMenu.MenuItems.Add(2' new IconMenuItem("-")); // "separator"                  currTreeViewContextMenu.MenuItems.Add(3' item);              }
Magic Number,WixEdit.Panels,EditFeaturesPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditFeaturesPanel.cs,AddCustomTreeViewContextMenuItems,The following statement contains a magic number: if (node.Name == "Feature")              {                  IconMenuItem item = new IconMenuItem("Select Components to add");                  item.Click += new EventHandler(mnuAddComponents_Click);                  currTreeViewContextMenu.MenuItems.Add(2' new IconMenuItem("-")); // "separator"                  currTreeViewContextMenu.MenuItems.Add(3' item);              }
Magic Number,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,OutputPanel,The following statement contains a magic number: doubleClickTimer.Interval = 100;
Magic Number,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,doubleClickTimer_Tick,The following statement contains a magic number: milliseconds += 100;
Magic Number,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,InternalThreadRunSingleWithLogFile,The following statement contains a magic number: while (activeProcess.WaitForExit(100) == false)              {                  if (File.Exists(currentLogFile))                  {                      ReadLogFile(currentLogFile);                      break;                  }                  Application.DoEvents();              }
Magic Number,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,ReadLogFile,The following statement contains a magic number: if (log.Exists)              {                  int read = 0;                  string line = null;                    byte[] bytes = new byte[1024];                  char[] chars = new char[1024];                    using (FileStream fs = log.Open(FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                  {                      TextReader r = new StreamReader(fs);                      while (isCancelled == false)                      {                          if (fs.Position == fs.Length)                          {                              if (activeProcess.WaitForExit(200))                              {                                  if (fs.Position == fs.Length)                                  {                                      break;                                  }                              }                              else                              {                                  continue;                              }                          }                            try                          {                              read = r.Read(chars' 0' 1024);                              if (read > 0)                              {                                  try                                  {                                      line = null;                                      line = new String(chars' 0' read);                                  }                                  catch { }                                    if (line != null)                                  {                                      Invoke(invokeOutput' new object[] { line });                                  }                              }                          }                          catch (IOException)                          {                          }                            Application.DoEvents();                      }                  }              }
Magic Number,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,ReadLogFile,The following statement contains a magic number: if (log.Exists)              {                  int read = 0;                  string line = null;                    byte[] bytes = new byte[1024];                  char[] chars = new char[1024];                    using (FileStream fs = log.Open(FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                  {                      TextReader r = new StreamReader(fs);                      while (isCancelled == false)                      {                          if (fs.Position == fs.Length)                          {                              if (activeProcess.WaitForExit(200))                              {                                  if (fs.Position == fs.Length)                                  {                                      break;                                  }                              }                              else                              {                                  continue;                              }                          }                            try                          {                              read = r.Read(chars' 0' 1024);                              if (read > 0)                              {                                  try                                  {                                      line = null;                                      line = new String(chars' 0' read);                                  }                                  catch { }                                    if (line != null)                                  {                                      Invoke(invokeOutput' new object[] { line });                                  }                              }                          }                          catch (IOException)                          {                          }                            Application.DoEvents();                      }                  }              }
Magic Number,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,ReadLogFile,The following statement contains a magic number: if (log.Exists)              {                  int read = 0;                  string line = null;                    byte[] bytes = new byte[1024];                  char[] chars = new char[1024];                    using (FileStream fs = log.Open(FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                  {                      TextReader r = new StreamReader(fs);                      while (isCancelled == false)                      {                          if (fs.Position == fs.Length)                          {                              if (activeProcess.WaitForExit(200))                              {                                  if (fs.Position == fs.Length)                                  {                                      break;                                  }                              }                              else                              {                                  continue;                              }                          }                            try                          {                              read = r.Read(chars' 0' 1024);                              if (read > 0)                              {                                  try                                  {                                      line = null;                                      line = new String(chars' 0' read);                                  }                                  catch { }                                    if (line != null)                                  {                                      Invoke(invokeOutput' new object[] { line });                                  }                              }                          }                          catch (IOException)                          {                          }                            Application.DoEvents();                      }                  }              }
Magic Number,WixEdit.Panels,OutputPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\OutputPanel.cs,ReadLogFile,The following statement contains a magic number: if (log.Exists)              {                  int read = 0;                  string line = null;                    byte[] bytes = new byte[1024];                  char[] chars = new char[1024];                    using (FileStream fs = log.Open(FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                  {                      TextReader r = new StreamReader(fs);                      while (isCancelled == false)                      {                          if (fs.Position == fs.Length)                          {                              if (activeProcess.WaitForExit(200))                              {                                  if (fs.Position == fs.Length)                                  {                                      break;                                  }                              }                              else                              {                                  continue;                              }                          }                            try                          {                              read = r.Read(chars' 0' 1024);                              if (read > 0)                              {                                  try                                  {                                      line = null;                                      line = new String(chars' 0' read);                                  }                                  catch { }                                    if (line != null)                                  {                                      Invoke(invokeOutput' new object[] { line });                                  }                              }                          }                          catch (IOException)                          {                          }                            Application.DoEvents();                      }                  }              }
Magic Number,WixEdit.Panels,ResultsPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\ResultsPanel.cs,InitializeComponent,The following statement contains a magic number: int buttonWidth = 11;
Magic Number,WixEdit.Panels,ResultsPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\ResultsPanel.cs,InitializeComponent,The following statement contains a magic number: int buttonHeigth = 11;
Magic Number,WixEdit.Panels,ResultsPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\ResultsPanel.cs,InitializeComponent,The following statement contains a magic number: int paddingX = 2;
Magic Number,WixEdit.Panels,ResultsPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\ResultsPanel.cs,InitializeComponent,The following statement contains a magic number: int paddingY = 2;
Magic Number,WixEdit.Panels,ResultsPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\ResultsPanel.cs,InitializeComponent,The following statement contains a magic number: closeButton.Location = new Point(ClientSize.Width - buttonWidth - 2 * paddingX' paddingY);
Magic Number,WixEdit.Panels,ResultsPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\ResultsPanel.cs,InitializeComponent,The following statement contains a magic number: tabControl.Location = new Point(0' buttonHeigth + 3 * paddingY);
Magic Number,WixEdit.Panels,ResultsPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\ResultsPanel.cs,InitializeComponent,The following statement contains a magic number: tabControl.Size = new Size(200' ClientSize.Height - tabControl.Location.Y);
Magic Number,WixEdit.Panels,ResultsPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\ResultsPanel.cs,InitializeComponent,The following statement contains a magic number: outputLabel.Size = new Size(ClientSize.Width - 2 * paddingX' buttonHeigth + (2 * paddingY));
Magic Number,WixEdit.Panels,ResultsPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\ResultsPanel.cs,InitializeComponent,The following statement contains a magic number: outputLabel.Size = new Size(ClientSize.Width - 2 * paddingX' buttonHeigth + (2 * paddingY));
Magic Number,WixEdit.Panels,SearchPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\SearchPanel.cs,InitializeComponent,The following statement contains a magic number: doubleClickTimer.Interval = 100;
Magic Number,WixEdit.Panels,SearchPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\SearchPanel.cs,FindPrev,The following statement contains a magic number: if (lastLineY >= 0)              {                  int charIndex = outputTextBox.GetCharIndexFromPosition(new Point(1' lastLineY));                  int line = outputTextBox.GetLineFromCharIndex(charIndex) - 1;                  if (line >= 0)                  {                      int newCharIndex = outputTextBox.GetFirstCharIndexFromLine(line);                        Point p = outputTextBox.GetPositionFromCharIndex(newCharIndex);                        OpenLine(p.X' p.Y);                  }                  else                  {                      OpenLine(-1' -1);                  }              }              else              {                  int line = outputTextBox.GetLineFromCharIndex(outputTextBox.Text.Length) - 3;                  if (line >= 0)                  {                      int newCharIndex = outputTextBox.GetFirstCharIndexFromLine(line);                        Point p = outputTextBox.GetPositionFromCharIndex(newCharIndex);                        OpenLine(p.X' p.Y);                  }              }
Magic Number,WixEdit.Panels,SearchPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\SearchPanel.cs,doubleClickTimer_Tick,The following statement contains a magic number: milliseconds += 100;
Magic Number,WixEdit.PropertyGridExtensions,IntegerConverter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\IntegerConverter.cs,ConvertFrom,The following statement contains a magic number: if (value is string) {                  string textValue = ((string) value).Trim();                  Int64 returnValue;                  try {                      if (textValue[0] == '#') {                          return Convert.ToInt64(textValue.Substring(1)' 0x10);                      }                      if (textValue.StartsWith("0x") ||                           textValue.StartsWith("0X") ||                          textValue.StartsWith("&h") ||                          textValue.StartsWith("&H")) {                          return Convert.ToInt64(textValue.Substring(2)' 0x10);                      }                      if (culture == null) {                          culture = CultureInfo.CurrentCulture;                      }                      NumberFormatInfo formatInfo = (NumberFormatInfo) culture.GetFormat(typeof(NumberFormatInfo));                      returnValue = Int64.Parse(textValue' NumberStyles.Integer' formatInfo);                  } catch (Exception exception) {                      throw new Exception("Failed to ConvertFrom: " + textValue' exception);                  }                    if (IsValid(context' returnValue) == false) {                      throw new Exception("Value is not in the valid range of numbers.");                  }                    return returnValue;              }
Magic Number,WixEdit.PropertyGridExtensions,ReferenceConverter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ReferenceConverter.cs,GetStandardValues,The following statement contains a magic number: if (nodeNameRef.EndsWith("Ref")) {                  string nodeName = nodeNameRef.Remove(nodeNameRef.Length-3' 3);                    XmlNodeList referencedNodes = null;                  if (nodeName.IndexOf(":") < 0) {                      referencedNodes = xmlNode.OwnerDocument.SelectNodes(String.Format("//wix:{0}"' nodeName)' adapter.WixFiles.WxsNsmgr);                  } else {                      referencedNodes = xmlNode.OwnerDocument.SelectNodes(String.Format("//{0}"' nodeName)' adapter.WixFiles.WxsNsmgr);                  }                      ArrayList strings = new ArrayList();                  foreach (XmlNode node in referencedNodes) {                      if (node.Attributes["Id"] != null) {                          strings.Add(node.Attributes["Id"].Value);                      }                  }                    return new StandardValuesCollection(strings.ToArray(typeof(string)));              } else if (xmlNode.Attributes["BinaryKey"] != null) {                  XmlNodeList referencedNodes = xmlNode.OwnerDocument.SelectNodes("//wix:Binary"' adapter.WixFiles.WxsNsmgr);                    ArrayList strings = new ArrayList();                  foreach (XmlNode node in referencedNodes) {                      strings.Add(node.Attributes["Id"].Value);                  }                    return new StandardValuesCollection(strings.ToArray(typeof(string)));              } else if (xmlNode.Attributes["FileKey"] != null) {                  XmlNodeList referencedNodes = xmlNode.OwnerDocument.SelectNodes("//wix:File"' adapter.WixFiles.WxsNsmgr);                    ArrayList strings = new ArrayList();                  foreach (XmlNode node in referencedNodes) {                      strings.Add(node.Attributes["Id"].Value);                  }                    return new StandardValuesCollection(strings.ToArray(typeof(string)));              } else {                  throw new Exception(nodeNameRef + " should be a reference to another nodes. (Should end on \"Ref\")");              }
Magic Number,WixEdit.PropertyGridExtensions,ReferenceConverter,C:\repos\sebasbaumh_WixEdit\src\PropertyGridExtensions\ReferenceConverter.cs,GetStandardValues,The following statement contains a magic number: if (nodeNameRef.EndsWith("Ref")) {                  string nodeName = nodeNameRef.Remove(nodeNameRef.Length-3' 3);                    XmlNodeList referencedNodes = null;                  if (nodeName.IndexOf(":") < 0) {                      referencedNodes = xmlNode.OwnerDocument.SelectNodes(String.Format("//wix:{0}"' nodeName)' adapter.WixFiles.WxsNsmgr);                  } else {                      referencedNodes = xmlNode.OwnerDocument.SelectNodes(String.Format("//{0}"' nodeName)' adapter.WixFiles.WxsNsmgr);                  }                      ArrayList strings = new ArrayList();                  foreach (XmlNode node in referencedNodes) {                      if (node.Attributes["Id"] != null) {                          strings.Add(node.Attributes["Id"].Value);                      }                  }                    return new StandardValuesCollection(strings.ToArray(typeof(string)));              } else if (xmlNode.Attributes["BinaryKey"] != null) {                  XmlNodeList referencedNodes = xmlNode.OwnerDocument.SelectNodes("//wix:Binary"' adapter.WixFiles.WxsNsmgr);                    ArrayList strings = new ArrayList();                  foreach (XmlNode node in referencedNodes) {                      strings.Add(node.Attributes["Id"].Value);                  }                    return new StandardValuesCollection(strings.ToArray(typeof(string)));              } else if (xmlNode.Attributes["FileKey"] != null) {                  XmlNodeList referencedNodes = xmlNode.OwnerDocument.SelectNodes("//wix:File"' adapter.WixFiles.WxsNsmgr);                    ArrayList strings = new ArrayList();                  foreach (XmlNode node in referencedNodes) {                      strings.Add(node.Attributes["Id"].Value);                  }                    return new StandardValuesCollection(strings.ToArray(typeof(string)));              } else {                  throw new Exception(nodeNameRef + " should be a reference to another nodes. (Should end on \"Ref\")");              }
Magic Number,WixEdit.Settings,SettingsForm,C:\repos\sebasbaumh_WixEdit\src\Settings\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new System.Drawing.Size(500' 450);
Magic Number,WixEdit.Settings,SettingsForm,C:\repos\sebasbaumh_WixEdit\src\Settings\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new System.Drawing.Size(500' 450);
Magic Number,WixEdit.Settings,SettingsForm,C:\repos\sebasbaumh_WixEdit\src\Settings\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: int padding = 2;
Magic Number,WixEdit.Settings,SettingsForm,C:\repos\sebasbaumh_WixEdit\src\Settings\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: propertyGrid.Size = new Size(ClientSize.Width' ClientSize.Height - (padding*2) - ok.ClientSize.Height);
Magic Number,WixEdit.Settings,WixEditSettings,C:\repos\sebasbaumh_WixEdit\src\Settings\WixEditSettings.cs,AddRecentlyUsedFile,The following statement contains a magic number: while (recent.Count > 16) {                  recent.RemoveAt(16);              }
Magic Number,WixEdit.Settings,WixEditSettings,C:\repos\sebasbaumh_WixEdit\src\Settings\WixEditSettings.cs,AddRecentlyUsedFile,The following statement contains a magic number: while (recent.Count > 16) {                  recent.RemoveAt(16);              }
Magic Number,WixEdit.Settings,WixEditData,C:\repos\sebasbaumh_WixEdit\src\Settings\WixEditSettings.cs,WixEditData,The following statement contains a magic number: XmlIndentation = 4;
Magic Number,WixEdit.Wizard,BaseSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\BaseSheet.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(471' 244);
Magic Number,WixEdit.Wizard,BaseSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\BaseSheet.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(471' 244);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: titleLabel.Height = 20;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: titleLabel.Padding = new Padding(5' 5' 5' 0);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: titleLabel.Padding = new Padding(5' 5' 5' 0);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: titleLabel.Padding = new Padding(5' 5' 5' 0);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: titleLabel.Font = new Font("Verdana"'                          10'                          FontStyle.Bold'                          GraphicsUnit.Point                      );
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: descriptionLabel.Height = 50 - titleLabel.Height;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: descriptionLabel.Padding = new Padding(8' 3' 5' 0);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: descriptionLabel.Padding = new Padding(8' 3' 5' 0);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: descriptionLabel.Padding = new Padding(8' 3' 5' 0);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: lineLabel.Size = new Size(this.Width' 2);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: tree.Location = new Point(4' titleLabel.Height + descriptionLabel.Height + lineLabel.Height + 5);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: tree.Location = new Point(4' titleLabel.Height + descriptionLabel.Height + lineLabel.Height + 5);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: tree.Width = this.Width - 8 - 100 - 8;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: tree.Width = this.Width - 8 - 100 - 8;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: tree.Width = this.Width - 8 - 100 - 8;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: tree.Height = this.Height - tree.Top - 7;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: newFolderButton.Location = new Point(tree.Location.X + tree.Width + 8' tree.Top);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: newFolderButton.Width = 100;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: newFolderButton.Height = 23;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: removeButton.Location = new Point(tree.Location.X + tree.Width + 8' newFolderButton.Bottom + 8);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: removeButton.Location = new Point(tree.Location.X + tree.Width + 8' newFolderButton.Bottom + 8);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: removeButton.Width = 100;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: removeButton.Height = 23;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: importDirectoryButton.Location = new Point(tree.Location.X + tree.Width + 8' removeButton.Bottom + 8);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: importDirectoryButton.Location = new Point(tree.Location.X + tree.Width + 8' removeButton.Bottom + 8);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: importDirectoryButton.Width = 100;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: importDirectoryButton.Height = 23;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: importFilesButton.Location = new Point(tree.Location.X + tree.Width + 8' importDirectoryButton.Bottom + 8);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: importFilesButton.Location = new Point(tree.Location.X + tree.Width + 8' importDirectoryButton.Bottom + 8);
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: importFilesButton.Width = 100;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,FileSheet,The following statement contains a magic number: importFilesButton.Height = 23;
Magic Number,WixEdit.Wizard,FileSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FileSheet.cs,AddTreeNodesRecursive,The following statement contains a magic number: if (file.ChildNodes.Count > 10000)              {                  TreeNode tooManyNodes = new TreeNode("<< Too many children to display >>");                  node.ImageIndex = ImageListFactory.GetUnsupportedImageIndex();                  node.SelectedImageIndex = node.ImageIndex;                  node.Nodes.Add(tooManyNodes);                    return;              }
Magic Number,WixEdit.Wizard,FinishSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FinishSheet.cs,Initialize,The following statement contains a magic number: picture.Width = 164;
Magic Number,WixEdit.Wizard,FinishSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FinishSheet.cs,Initialize,The following statement contains a magic number: titleLabel.Height = 50;
Magic Number,WixEdit.Wizard,FinishSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FinishSheet.cs,Initialize,The following statement contains a magic number: titleLabel.Padding = new Padding(7' 12' 0' 0);
Magic Number,WixEdit.Wizard,FinishSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FinishSheet.cs,Initialize,The following statement contains a magic number: titleLabel.Padding = new Padding(7' 12' 0' 0);
Magic Number,WixEdit.Wizard,FinishSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FinishSheet.cs,Initialize,The following statement contains a magic number: titleLabel.Font = new Font("Verdana"'                                          13'                                          FontStyle.Bold'                                          GraphicsUnit.Point                                      );
Magic Number,WixEdit.Wizard,FinishSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FinishSheet.cs,Initialize,The following statement contains a magic number: descriptionLabel.Padding = new Padding(7' 15' 5' 5);
Magic Number,WixEdit.Wizard,FinishSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FinishSheet.cs,Initialize,The following statement contains a magic number: descriptionLabel.Padding = new Padding(7' 15' 5' 5);
Magic Number,WixEdit.Wizard,FinishSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FinishSheet.cs,Initialize,The following statement contains a magic number: descriptionLabel.Padding = new Padding(7' 15' 5' 5);
Magic Number,WixEdit.Wizard,FinishSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\FinishSheet.cs,Initialize,The following statement contains a magic number: descriptionLabel.Padding = new Padding(7' 15' 5' 5);
Magic Number,WixEdit.Wizard,IntroductionSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\IntroductionSheet.cs,Initialize,The following statement contains a magic number: picture.Width = 164;
Magic Number,WixEdit.Wizard,IntroductionSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\IntroductionSheet.cs,Initialize,The following statement contains a magic number: titleLabel.Height = 50;
Magic Number,WixEdit.Wizard,IntroductionSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\IntroductionSheet.cs,Initialize,The following statement contains a magic number: titleLabel.Padding = new Padding(7' 12' 0' 0);
Magic Number,WixEdit.Wizard,IntroductionSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\IntroductionSheet.cs,Initialize,The following statement contains a magic number: titleLabel.Padding = new Padding(7' 12' 0' 0);
Magic Number,WixEdit.Wizard,IntroductionSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\IntroductionSheet.cs,Initialize,The following statement contains a magic number: titleLabel.Font = new Font("Verdana"'                                          13'                                          FontStyle.Bold'                                          GraphicsUnit.Point                                      );
Magic Number,WixEdit.Wizard,IntroductionSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\IntroductionSheet.cs,Initialize,The following statement contains a magic number: descriptionLabel.Padding = new Padding(7' 15' 5' 5);
Magic Number,WixEdit.Wizard,IntroductionSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\IntroductionSheet.cs,Initialize,The following statement contains a magic number: descriptionLabel.Padding = new Padding(7' 15' 5' 5);
Magic Number,WixEdit.Wizard,IntroductionSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\IntroductionSheet.cs,Initialize,The following statement contains a magic number: descriptionLabel.Padding = new Padding(7' 15' 5' 5);
Magic Number,WixEdit.Wizard,IntroductionSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\IntroductionSheet.cs,Initialize,The following statement contains a magic number: descriptionLabel.Padding = new Padding(7' 15' 5' 5);
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: titleLabel.Height = 20;
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: titleLabel.Padding = new Padding(5' 5' 5' 0);
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: titleLabel.Padding = new Padding(5' 5' 5' 0);
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: titleLabel.Padding = new Padding(5' 5' 5' 0);
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: titleLabel.Font = new Font("Verdana"'                          10'                          FontStyle.Bold'                          GraphicsUnit.Point                      );
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: descriptionLabel.Height = 50 - titleLabel.Height;
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: descriptionLabel.Padding = new Padding(8' 3' 5' 0);
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: descriptionLabel.Padding = new Padding(8' 3' 5' 0);
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: descriptionLabel.Padding = new Padding(8' 3' 5' 0);
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: lineLabel.Size = new Size(this.Width' 2);
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: checkList.Location = new Point(4' lineLabel.Top + lineLabel.Height + 5);
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: checkList.Location = new Point(4' lineLabel.Top + lineLabel.Height + 5);
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: checkList.Width = this.Width - 8 - 190;
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: checkList.Width = this.Width - 8 - 190;
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: checkList.Height = this.Height - checkList.Top - 5;
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: templateDescriptionGroupBox.Location = new Point(checkList.Width + 12' checkList.Top);
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: templateDescriptionGroupBox.Width = 190 - 8;
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,SelectTemplatesSheet,The following statement contains a magic number: templateDescriptionGroupBox.Width = 190 - 8;
Magic Number,WixEdit.Wizard,SelectTemplatesSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\SelectTemplatesSheet.cs,checkList_SelectedIndexChanged,The following statement contains a magic number: if (checkList.SelectedIndex < 0)              {                  templateDescriptionLabel.Text = "";                  templateDescriptionLabel.Visible = false;              }              else              {                  XmlAttribute titleAtt = checkList.SelectedItem as XmlAttribute;                  XmlElement template = titleAtt.OwnerElement;                  StringBuilder text = new StringBuilder(template.GetAttribute("Description"));                  text.Replace(@"\r\n"' "\r\n");                  text.Replace(@"\r"' "\r\n");                  text.Replace(@"\n"' "\r\n");                  text.Replace(@"\t"' "    ");                  templateDescriptionLabel.Text = text.ToString();                  templateDescriptionLabel.Visible = true;                  templateDescriptionLabel.Height = templateDescriptionLabel.GetPreferredSize(new Size(templateDescriptionLabel.Width' 1000)).Height;              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,StepSheet,The following statement contains a magic number: errorProvider.AutoPopDelay = 20000;
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: titleLabel.Height = 20;
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: titleLabel.Padding = new Padding(5' 5' 5' 0);
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: titleLabel.Padding = new Padding(5' 5' 5' 0);
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: titleLabel.Padding = new Padding(5' 5' 5' 0);
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: titleLabel.Font = new Font("Verdana"'                          10'                          FontStyle.Bold'                          GraphicsUnit.Point                      );
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: descriptionLabel.Height = 50 - titleLabel.Height;
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: descriptionLabel.Padding = new Padding(8' 3' 5' 0);
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: descriptionLabel.Padding = new Padding(8' 3' 5' 0);
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: descriptionLabel.Padding = new Padding(8' 3' 5' 0);
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: lineLabel.Size = new System.Drawing.Size(this.Width' 2);
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement templatePartNode in stepElement.SelectNodes("TemplatePart"))              {                  String ifNotPresent = templatePartNode.GetAttribute("IfNotPresent");                  if (!String.IsNullOrEmpty(ifNotPresent))                  {                      XmlNodeList ifNotPresentNodes = Wizard.WixFiles.WxsDocument.SelectNodes(ifNotPresent' Wizard.WixFiles.WxsNsmgr);                      if (ifNotPresentNodes.Count > 0)                      {                          ifNotPresentList.Add(ifNotPresent);                          continue;                      }                  }                    XmlElement templatePart = (XmlElement)templatePartNode;                  String selectionTarget = templatePart.GetAttribute("SelectionTarget");                  if (selectionTarget != null && selectionTarget != String.Empty)                  {                      Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = "Select target location";                        String selectionTargetDescription = templatePart.GetAttribute("Description");                      if (selectionTargetDescription != null && selectionTargetDescription != String.Empty)                      {                          label.Text = selectionTargetDescription;                      }                        label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        ComboBox text = new ComboBox();                      text.DropDownStyle = ComboBoxStyle.DropDownList;                      foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                      {                          text.Items.Add(dir.Attributes["Id"]);                      }                      text.DisplayMember = "Value";                      text.Width = this.Width - 14;                      text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      // text.Items...                      text.Top = prevControl.Bottom + label.Height + 4;                      text.Left = 7;                      text.Name = selectionTarget;                      this.Controls.Add(text);                        prevControl = text;                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement templatePartNode in stepElement.SelectNodes("TemplatePart"))              {                  String ifNotPresent = templatePartNode.GetAttribute("IfNotPresent");                  if (!String.IsNullOrEmpty(ifNotPresent))                  {                      XmlNodeList ifNotPresentNodes = Wizard.WixFiles.WxsDocument.SelectNodes(ifNotPresent' Wizard.WixFiles.WxsNsmgr);                      if (ifNotPresentNodes.Count > 0)                      {                          ifNotPresentList.Add(ifNotPresent);                          continue;                      }                  }                    XmlElement templatePart = (XmlElement)templatePartNode;                  String selectionTarget = templatePart.GetAttribute("SelectionTarget");                  if (selectionTarget != null && selectionTarget != String.Empty)                  {                      Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = "Select target location";                        String selectionTargetDescription = templatePart.GetAttribute("Description");                      if (selectionTargetDescription != null && selectionTargetDescription != String.Empty)                      {                          label.Text = selectionTargetDescription;                      }                        label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        ComboBox text = new ComboBox();                      text.DropDownStyle = ComboBoxStyle.DropDownList;                      foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                      {                          text.Items.Add(dir.Attributes["Id"]);                      }                      text.DisplayMember = "Value";                      text.Width = this.Width - 14;                      text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      // text.Items...                      text.Top = prevControl.Bottom + label.Height + 4;                      text.Left = 7;                      text.Name = selectionTarget;                      this.Controls.Add(text);                        prevControl = text;                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement templatePartNode in stepElement.SelectNodes("TemplatePart"))              {                  String ifNotPresent = templatePartNode.GetAttribute("IfNotPresent");                  if (!String.IsNullOrEmpty(ifNotPresent))                  {                      XmlNodeList ifNotPresentNodes = Wizard.WixFiles.WxsDocument.SelectNodes(ifNotPresent' Wizard.WixFiles.WxsNsmgr);                      if (ifNotPresentNodes.Count > 0)                      {                          ifNotPresentList.Add(ifNotPresent);                          continue;                      }                  }                    XmlElement templatePart = (XmlElement)templatePartNode;                  String selectionTarget = templatePart.GetAttribute("SelectionTarget");                  if (selectionTarget != null && selectionTarget != String.Empty)                  {                      Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = "Select target location";                        String selectionTargetDescription = templatePart.GetAttribute("Description");                      if (selectionTargetDescription != null && selectionTargetDescription != String.Empty)                      {                          label.Text = selectionTargetDescription;                      }                        label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        ComboBox text = new ComboBox();                      text.DropDownStyle = ComboBoxStyle.DropDownList;                      foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                      {                          text.Items.Add(dir.Attributes["Id"]);                      }                      text.DisplayMember = "Value";                      text.Width = this.Width - 14;                      text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      // text.Items...                      text.Top = prevControl.Bottom + label.Height + 4;                      text.Left = 7;                      text.Name = selectionTarget;                      this.Controls.Add(text);                        prevControl = text;                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement templatePartNode in stepElement.SelectNodes("TemplatePart"))              {                  String ifNotPresent = templatePartNode.GetAttribute("IfNotPresent");                  if (!String.IsNullOrEmpty(ifNotPresent))                  {                      XmlNodeList ifNotPresentNodes = Wizard.WixFiles.WxsDocument.SelectNodes(ifNotPresent' Wizard.WixFiles.WxsNsmgr);                      if (ifNotPresentNodes.Count > 0)                      {                          ifNotPresentList.Add(ifNotPresent);                          continue;                      }                  }                    XmlElement templatePart = (XmlElement)templatePartNode;                  String selectionTarget = templatePart.GetAttribute("SelectionTarget");                  if (selectionTarget != null && selectionTarget != String.Empty)                  {                      Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = "Select target location";                        String selectionTargetDescription = templatePart.GetAttribute("Description");                      if (selectionTargetDescription != null && selectionTargetDescription != String.Empty)                      {                          label.Text = selectionTargetDescription;                      }                        label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        ComboBox text = new ComboBox();                      text.DropDownStyle = ComboBoxStyle.DropDownList;                      foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                      {                          text.Items.Add(dir.Attributes["Id"]);                      }                      text.DisplayMember = "Value";                      text.Width = this.Width - 14;                      text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      // text.Items...                      text.Top = prevControl.Bottom + label.Height + 4;                      text.Left = 7;                      text.Name = selectionTarget;                      this.Controls.Add(text);                        prevControl = text;                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement templatePartNode in stepElement.SelectNodes("TemplatePart"))              {                  String ifNotPresent = templatePartNode.GetAttribute("IfNotPresent");                  if (!String.IsNullOrEmpty(ifNotPresent))                  {                      XmlNodeList ifNotPresentNodes = Wizard.WixFiles.WxsDocument.SelectNodes(ifNotPresent' Wizard.WixFiles.WxsNsmgr);                      if (ifNotPresentNodes.Count > 0)                      {                          ifNotPresentList.Add(ifNotPresent);                          continue;                      }                  }                    XmlElement templatePart = (XmlElement)templatePartNode;                  String selectionTarget = templatePart.GetAttribute("SelectionTarget");                  if (selectionTarget != null && selectionTarget != String.Empty)                  {                      Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = "Select target location";                        String selectionTargetDescription = templatePart.GetAttribute("Description");                      if (selectionTargetDescription != null && selectionTargetDescription != String.Empty)                      {                          label.Text = selectionTargetDescription;                      }                        label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        ComboBox text = new ComboBox();                      text.DropDownStyle = ComboBoxStyle.DropDownList;                      foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                      {                          text.Items.Add(dir.Attributes["Id"]);                      }                      text.DisplayMember = "Value";                      text.Width = this.Width - 14;                      text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      // text.Items...                      text.Top = prevControl.Bottom + label.Height + 4;                      text.Left = 7;                      text.Name = selectionTarget;                      this.Controls.Add(text);                        prevControl = text;                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement templatePartNode in stepElement.SelectNodes("TemplatePart"))              {                  String ifNotPresent = templatePartNode.GetAttribute("IfNotPresent");                  if (!String.IsNullOrEmpty(ifNotPresent))                  {                      XmlNodeList ifNotPresentNodes = Wizard.WixFiles.WxsDocument.SelectNodes(ifNotPresent' Wizard.WixFiles.WxsNsmgr);                      if (ifNotPresentNodes.Count > 0)                      {                          ifNotPresentList.Add(ifNotPresent);                          continue;                      }                  }                    XmlElement templatePart = (XmlElement)templatePartNode;                  String selectionTarget = templatePart.GetAttribute("SelectionTarget");                  if (selectionTarget != null && selectionTarget != String.Empty)                  {                      Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = "Select target location";                        String selectionTargetDescription = templatePart.GetAttribute("Description");                      if (selectionTargetDescription != null && selectionTargetDescription != String.Empty)                      {                          label.Text = selectionTargetDescription;                      }                        label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        ComboBox text = new ComboBox();                      text.DropDownStyle = ComboBoxStyle.DropDownList;                      foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                      {                          text.Items.Add(dir.Attributes["Id"]);                      }                      text.DisplayMember = "Value";                      text.Width = this.Width - 14;                      text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      // text.Items...                      text.Top = prevControl.Bottom + label.Height + 4;                      text.Left = 7;                      text.Name = selectionTarget;                      this.Controls.Add(text);                        prevControl = text;                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement templatePartNode in stepElement.SelectNodes("TemplatePart"))              {                  String ifNotPresent = templatePartNode.GetAttribute("IfNotPresent");                  if (!String.IsNullOrEmpty(ifNotPresent))                  {                      XmlNodeList ifNotPresentNodes = Wizard.WixFiles.WxsDocument.SelectNodes(ifNotPresent' Wizard.WixFiles.WxsNsmgr);                      if (ifNotPresentNodes.Count > 0)                      {                          ifNotPresentList.Add(ifNotPresent);                          continue;                      }                  }                    XmlElement templatePart = (XmlElement)templatePartNode;                  String selectionTarget = templatePart.GetAttribute("SelectionTarget");                  if (selectionTarget != null && selectionTarget != String.Empty)                  {                      Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = "Select target location";                        String selectionTargetDescription = templatePart.GetAttribute("Description");                      if (selectionTargetDescription != null && selectionTargetDescription != String.Empty)                      {                          label.Text = selectionTargetDescription;                      }                        label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        ComboBox text = new ComboBox();                      text.DropDownStyle = ComboBoxStyle.DropDownList;                      foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                      {                          text.Items.Add(dir.Attributes["Id"]);                      }                      text.DisplayMember = "Value";                      text.Width = this.Width - 14;                      text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      // text.Items...                      text.Top = prevControl.Bottom + label.Height + 4;                      text.Left = 7;                      text.Name = selectionTarget;                      this.Controls.Add(text);                        prevControl = text;                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,StepSheet,C:\repos\sebasbaumh_WixEdit\src\Wizard\StepSheet.cs,OnShow,The following statement contains a magic number: foreach (XmlElement edit in stepElement.SelectNodes("Edit"))              {                  string editMode = edit.GetAttribute("Mode");                  if (editMode == "GenerateGuid" || editMode == "CopyFromTarget")                  {                      continue;                  }                    string refAtt = edit.GetAttribute("Ref");                  ExtractNamespaces(edit' xmlnsmgr' refAtt);                    // TODO: What if this edit thingie is in the template part that is not shown due to IfNotPresent?                   // Check the template part from theNode                    XmlNode theNode = stepElement.SelectSingleNode("TemplatePart/" + TranslateNamespace(refAtt)' xmlnsmgr);                  if (theNode != null) // Could be that the IfNotPresent prevents it.                  {                      XmlElement theTemplateNode = (XmlElement)stepElement.SelectSingleNode("TemplatePart[" + TranslateNamespace(refAtt) + "]"' xmlnsmgr);                      String ifNotPresent = theTemplateNode.GetAttribute("IfNotPresent");                      if (!String.IsNullOrEmpty(ifNotPresent))                      {                          if (ifNotPresentList.Contains(ifNotPresent))                          {                              continue;                          }                      }                        Label label = new Label();                      label.Width = this.Width - 10;                      label.Height = 14;                      label.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                      label.Text = edit.GetAttribute("Description");                      if (label.Text == String.Empty)                      {                          label.Text = edit.GetAttribute("Name");                      }                      if (label.Text == String.Empty)                      {                          label.Text = refAtt.Replace('/'' ' ').Replace('['' ' ').Replace(']'' ' ').Replace(':'' ' ').Replace('@'' ' ').Replace("  "' " ");                      }                      label.Top = prevControl.Bottom + 4;                      label.Left = 5;                      this.Controls.Add(label);                        XmlDocumentationManager mgr = new XmlDocumentationManager(this.Wizard.WixFiles);                      XmlNode xmlNodeDefinition = mgr.GetXmlNodeDefinition(theNode);                        switch (editMode)                      {                          case "Select":                              ComboBox select = new ComboBox();                              select.DropDownStyle = ComboBoxStyle.DropDownList;                              select.Width = this.Width - 14;                              select.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                                String selectionTarget = edit.GetAttribute("Selection");                                foreach (XmlNode dir in Wizard.WixFiles.WxsDocument.SelectNodes(selectionTarget' Wizard.WixFiles.WxsNsmgr))                              {                                  select.Items.Add(dir);                              }                                select.DisplayMember = "Value";                              select.Top = prevControl.Bottom + label.Height + 4;                              select.Left = 7;                              select.Name = refAtt;                              this.Controls.Add(select);                                prevControl = select;                              break;                          case "Dropdown":                              ComboBox combo = new ComboBox();                              combo.DropDownStyle = ComboBoxStyle.DropDownList;                              combo.Width = this.Width - 14;                              combo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              combo.DisplayMember = "InnerText";                              foreach (XmlNode optionNode in edit.SelectNodes("Option"))                              {                                  XmlElement optionElement = (XmlElement)optionNode;                                  combo.Items.Add(optionNode);                                  if (optionElement.GetAttribute("Value") == theNode.InnerText)                                  {                                      combo.SelectedItem = optionNode;                                  }                              }                                combo.Top = prevControl.Bottom + label.Height + 4;                              combo.Left = 7;                              combo.Name = refAtt;                              this.Controls.Add(combo);                                prevControl = combo;                              break;                          default:                              TextBox text = new TextBox();                              text.Width = this.Width - 14;                              text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;                              text.Text = theNode.Value;                              text.Top = prevControl.Bottom + label.Height + 4;                              text.Left = 7;                              text.Name = refAtt;                              this.Controls.Add(text);                                prevControl = text;                              break;                      }                        if (xmlNodeDefinition != null)                      {                          string docu = mgr.GetDocumentation(xmlNodeDefinition' true);                          if (!string.IsNullOrEmpty(docu))                          {                              prevControl.Width = prevControl.Width - 18;                              errorProvider.SetError(prevControl' docu);                              errorProvider.SetIconPadding(prevControl' 4);                          }                      }                  }              }
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(385' 261);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(385' 261);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.nextButton.Location = new System.Drawing.Point(304' 261);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.nextButton.Location = new System.Drawing.Point(304' 261);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.nextButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.nextButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.backButton.Location = new System.Drawing.Point(223' 261);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.backButton.Location = new System.Drawing.Point(223' 261);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.backButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.backButton.Size = new System.Drawing.Size(75' 23);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.backButton.TabIndex = 2;
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(-1' 248);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(480' 2);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(480' 2);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 3;
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.contentPanel.Size = new System.Drawing.Size(472' 248);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.contentPanel.Size = new System.Drawing.Size(472' 248);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.contentPanel.TabIndex = 4;
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(472' 296);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(472' 296);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(480' 330);
Magic Number,WixEdit.Wizard,WizardForm,C:\repos\sebasbaumh_WixEdit\src\Wizard\WizardForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(480' 330);
Magic Number,WixEdit.Xml,DefineManager,C:\repos\sebasbaumh_WixEdit\src\Xml\DefineManager.cs,splitKeyValue,The following statement contains a magic number: if (!String.IsNullOrEmpty(data))  			{  				return data.Split(new char[] { '=' }' 2);  			}
Magic Number,WixEdit.Xml,DefineManager,C:\repos\sebasbaumh_WixEdit\src\Xml\DefineManager.cs,LoadDefines,The following statement contains a magic number: try  			{  				// Verify valid xml  				foreach (XmlNode node in GetAllChildNodes(wxsDocument))  				{  					XmlProcessingInstruction define = node as XmlProcessingInstruction;  					if (define != null)  					{  						if (define.Name == "endif")  						{  							//reduce level  							if (iSkipToEndIf > 0)  							{  								iSkipToEndIf--;  							}  							if (iSkipElse > 0)  							{  								iSkipElse--;  							}  							continue;  						}  						else if (define.Name == "else")  						{  							if (iSkipElse > 0)  							{  								iSkipElse--;  								continue;  							}  						}    						String[] a = splitKeyValue(define.Data);  						if (a == null)  						{  							continue;  						}    						if (a.Length >= 1)  						{  							//check  							if (define.Name == "ifdef")  							{  								if (iSkipToEndIf > 0)  								{  									iSkipToEndIf++;  									iSkipElse++;  								}  								else if (!dVarDefines.ContainsKey(a[0]))  								{  									iSkipToEndIf++;  								}  							}  							//check  							else if (define.Name == "ifndef")  							{  								if (iSkipToEndIf > 0)  								{  									iSkipToEndIf++;  									iSkipElse++;  								}  								else if (dVarDefines.ContainsKey(a[0]))  								{  									iSkipToEndIf++;  								}  							}  						}    						if (iSkipToEndIf > 0)  						{  							continue;  						}    						if (define.Name == "undef")  						{  							dVarDefines.Remove(a[0]);  						}  						else if (define.Name == "define")  						{  							if (a.Length == 2)  							{  								String key = a[0];  								String value = a[1].Trim('\"');  								//add mapping and apply defines  								dVarDefines[key] = ApplyDefines(value' file != null ? file.FullName : null);  							}  							//length of 1 denotes conditional define  							else if (a.Length == 1)  							{  								dVarDefines[a[0]] = null;  							}  						}  					}  					else  					{  						//remove nodes in skipped blocks later on  						if (iSkipToEndIf > 0)  						{  							nodesToRemove.Add(node);  						}  					}  				}  				//remove nodes' which belong to skipped blocks  				foreach (XmlNode n in nodesToRemove)  				{  					n.ParentNode.RemoveChild(n);  				}  			}  			catch (Exception ex)  			{  				throw new WixEditException("Loading of defines failed!!!"' ex);  			}
Magic Number,WixEdit.Xml,UndoManager,C:\repos\sebasbaumh_WixEdit\src\Xml\UndoManager.cs,CheckTime,The following statement contains a magic number: if (diff.TotalMilliseconds > 250)              {                  // System.Windows.Forms.MessageBox.Show("Warning' the undo-system might be corrupted.");              }
Magic Number,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,LoadWxsFile,The following statement contains a magic number: foreach (XmlAttribute att in wxsDocument.DocumentElement.Attributes)              {                  string attName = att.Name;                  if (attName.StartsWith("xmlns:"))                  {                      if (xsdExtensionTargetNamespacesReverseMap.ContainsKey(att.Value))                      {                          string existingNamespaceName = (string)xsdExtensionTargetNamespacesReverseMap[att.Value];                          string namespaceName = attName.Substring(6);                          if (namespaceName != existingNamespaceName)                          {                              xsdExtensionPrefixesMap.Add(namespaceName' existingNamespaceName);                              xsdExtensionPrefixesReverseMap.Add(existingNamespaceName' namespaceName);                          }                      }                  }              }
Magic Number,WixEdit.Xml,WixFiles,C:\repos\sebasbaumh_WixEdit\src\Xml\WixFiles.cs,LoadNewWxsFile,The following statement contains a magic number: foreach (XmlAttribute att in wxsDocument.DocumentElement.Attributes)              {                  string attName = att.Name;                  if (attName.StartsWith("xmlns:"))                  {                      if (xsdExtensionTargetNamespacesReverseMap.ContainsKey(att.Value))                      {                          string existingNamespaceName = (string)xsdExtensionTargetNamespacesReverseMap[att.Value];                          string namespaceName = attName.Substring(6);                          if (namespaceName != existingNamespaceName)                          {                              xsdExtensionPrefixesMap.Add(namespaceName' existingNamespaceName);                              xsdExtensionPrefixesReverseMap.Add(existingNamespaceName' namespaceName);                          }                      }                  }              }
Magic Number,WixEdit.Xml,XmlDisplayForm,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDisplayForm.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,WixEdit.Xml,XmlDisplayForm,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDisplayForm.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,WixEdit.Xml,XmlDisplayForm,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDisplayForm.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser.Size = new System.Drawing.Size(800' 600);
Magic Number,WixEdit.Xml,XmlDisplayForm,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDisplayForm.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser.Size = new System.Drawing.Size(800' 600);
Magic Number,WixEdit.Xml,XmlDisplayForm,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDisplayForm.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser.TabIndex = 2;
Magic Number,WixEdit.Xml,XmlDisplayForm,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDisplayForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(800' 600);
Magic Number,WixEdit.Xml,XmlDisplayForm,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDisplayForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(800' 600);
Magic Number,WixEdit.Xml,XmlDocumentationManager,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDocumentationManager.cs,GetDocumentation,The following statement contains a magic number: if (documentationStrings.Count > 0)              {                  StringBuilder messageBuilder = new StringBuilder();                  foreach (string documentationString in documentationStrings)                  {                      messageBuilder.Append(documentationString);                      messageBuilder.Append("\r\n\r\n");                  }                  messageBuilder.Remove(messageBuilder.Length - 4' 4);                  message = messageBuilder.ToString();              }              else if (!allowEmpty)              {                  message = "No documentation found.";              }
Magic Number,WixEdit.Xml,XmlDocumentationManager,C:\repos\sebasbaumh_WixEdit\src\Xml\XmlDocumentationManager.cs,GetDocumentation,The following statement contains a magic number: if (documentationStrings.Count > 0)              {                  StringBuilder messageBuilder = new StringBuilder();                  foreach (string documentationString in documentationStrings)                  {                      messageBuilder.Append(documentationString);                      messageBuilder.Append("\r\n\r\n");                  }                  messageBuilder.Remove(messageBuilder.Length - 4' 4);                  message = messageBuilder.ToString();              }              else if (!allowEmpty)              {                  message = "No documentation found.";              }
Missing Default,WixEdit.Controls,FileSelectEditingControl,C:\repos\sebasbaumh_WixEdit\src\Controls\FileSelectEditingControl.cs,EditingControlWantsInputKey,The following switch statement is missing a default case: switch (keyData & Keys.KeyCode)              {                  case Keys.Right:                      //                      // If the end of the selection is at the end of the string                      // let the DataGridView treat the key message                      //                      if (!(filePathTextBox.SelectionLength == 0                            && filePathTextBox.SelectionStart == filePathTextBox.Text.Length))                      {                          return true;                      }                      break;                    case Keys.Left:                      //                      // If the end of the selection is at the begining of the                      // string or if the entire text is selected send this character                       // to the dataGridView; else process the key event.                      //                      if (!(filePathTextBox.SelectionLength == 0                            && filePathTextBox.SelectionStart == 0))                      {                          return true;                      }                      break;                    case Keys.Home:                  case Keys.End:                      if (filePathTextBox.SelectionLength != filePathTextBox.Text.Length)                      {                          return true;                      }                      break;                    case Keys.Prior:                  case Keys.Next:                      if (this.valueChanged)                      {                          return true;                      }                      break;                    case Keys.Delete:                      if (filePathTextBox.SelectionLength > 0 || filePathTextBox.SelectionStart < filePathTextBox.Text.Length)                      {                          return true;                      }                      break;              }
Missing Default,WixEdit.Controls,FileSelectEditingControl,C:\repos\sebasbaumh_WixEdit\src\Controls\FileSelectEditingControl.cs,translateAlignment,The following switch statement is missing a default case: switch (align)              {                  case DataGridViewContentAlignment.TopLeft:                  case DataGridViewContentAlignment.MiddleLeft:                  case DataGridViewContentAlignment.BottomLeft:                      return HorizontalAlignment.Left;                    case DataGridViewContentAlignment.TopCenter:                  case DataGridViewContentAlignment.MiddleCenter:                  case DataGridViewContentAlignment.BottomCenter:                      return HorizontalAlignment.Center;                    case DataGridViewContentAlignment.TopRight:                  case DataGridViewContentAlignment.MiddleRight:                  case DataGridViewContentAlignment.BottomRight:                      return HorizontalAlignment.Right;              }
Missing Default,WixEdit.Controls,NumericTextBoxEditingControl,C:\repos\sebasbaumh_WixEdit\src\Controls\NumericTextBoxEditingControl.cs,EditingControlWantsInputKey,The following switch statement is missing a default case: switch (keyData & Keys.KeyCode)              {                  case Keys.Right:                      //                      // If the end of the selection is at the end of the string                      // let the DataGridView treat the key message                      //                      if (!(this.SelectionLength == 0                            && this.SelectionStart == this.ToString().Length))                      {                          return true;                      }                      break;                    case Keys.Left:                      //                      // If the end of the selection is at the begining of the                      // string or if the entire text is selected send this character                       // to the dataGridView; else process the key event.                      //                      if (!(this.SelectionLength == 0                            && this.SelectionStart == 0))                      {                          return true;                      }                      break;                    case Keys.Home:                  case Keys.End:                      if (this.SelectionLength != this.ToString().Length)                      {                          return true;                      }                      break;                    case Keys.Prior:                  case Keys.Next:                      if (this.valueChanged)                      {                          return true;                      }                      break;                    case Keys.Delete:                      if (this.SelectionLength > 0 || this.SelectionStart < this.ToString().Length)                      {                          return true;                      }                      break;              }
Missing Default,WixEdit.Controls,NumericTextBoxEditingControl,C:\repos\sebasbaumh_WixEdit\src\Controls\NumericTextBoxEditingControl.cs,translateAlignment,The following switch statement is missing a default case: switch (align)              {                  case DataGridViewContentAlignment.TopLeft:                  case DataGridViewContentAlignment.MiddleLeft:                  case DataGridViewContentAlignment.BottomLeft:                      return HorizontalAlignment.Left;                    case DataGridViewContentAlignment.TopCenter:                  case DataGridViewContentAlignment.MiddleCenter:                  case DataGridViewContentAlignment.BottomCenter:                      return HorizontalAlignment.Center;                    case DataGridViewContentAlignment.TopRight:                  case DataGridViewContentAlignment.MiddleRight:                  case DataGridViewContentAlignment.BottomRight:                      return HorizontalAlignment.Right;              }
Missing Default,WixEdit.Controls,SelectionOverlay,C:\repos\sebasbaumh_WixEdit\src\Controls\SelectionOverlay.cs,ResizeControl,The following switch statement is missing a default case: switch (sizingDirection) {                  case SizingDirection.SizingSE:                      Height = clientY;                      Width = clientX;                      control.Height = clientY - 14;                      control.Width = clientX - 14;                      break;                  case SizingDirection.SizingSW:                      Left += clientX;                      Height = clientY;                      Width -= clientX;                      control.Height = clientY - 14;                      control.Width -= clientX;                      break;                  case SizingDirection.SizingNW:                      Top += clientY;                      Left += clientX;                      Height -= clientY;                      Width -= clientX;                      control.Height -= clientY;                      control.Width -= clientX;                      break;                  case SizingDirection.SizingNE:                      Top += clientY;                      Height -= clientY;                      Width = clientX;                      control.Height -= clientY;                      control.Width = clientX;                      break;                  case SizingDirection.SizingS:                      Height = clientY;                      control.Height = clientY - 14;                      break;                  case SizingDirection.SizingN:                      Top += clientY;                      Height -= clientY;                      control.Height -= clientY;                      break;                  case SizingDirection.SizingE:                      Width = clientX;                      control.Width = clientX - 14;                      break;                  case SizingDirection.SizingW:                      Left += clientX;                      Width -= clientX;                      control.Width -= clientX;                      break;              }
Missing Default,WixEdit,EditorForm,C:\repos\sebasbaumh_WixEdit\src\EditorForm.cs,DoAction,The following switch statement is missing a default case: switch (action)              {                  case "open":                      EditorForm foundForm = null;                      foreach (EditorForm edit in formInstances)                      {                          // Hmmm' how can you compare 2 paths?!                          if (edit.wixFiles != null && edit.wixFiles.WxsFile.FullName.ToLower() == new FileInfo(argument).FullName.ToLower())                          {                              foundForm = edit;                          }                      }                        if (foundForm != null)                      {                          if (IsIconic(foundForm.Handle))                          {                              ShowWindowAsync(foundForm.Handle' SW_RESTORE);                          }                          SetForegroundWindow(foundForm.Handle);                      }                      else                      {                          if (wixFiles == null || WixEditSettings.Instance.UseInstanceOnly)                          {                              LoadWxsFile(argument);                          }                          else                          {                              NewInstanceStarter starter = new NewInstanceStarter(argument);                              starter.Start();                          }                      }                      break;              }
Missing Default,WixEdit.Import,RegistryImport,C:\repos\sebasbaumh_WixEdit\src\Import\RegistryImport.cs,GetRootString,The following switch statement is missing a default case: switch (fullRoot)              {                  case "HKEY_CLASSES_ROOT":                      ret = "HKCR";                      break;                  case "HKEY_CURRENT_USER":                      ret = "HKCU";                      break;                  case "HKEY_LOCAL_MACHINE":                      ret = "HKLM";                      break;                  case "HKEY_USERS":                      ret = "HKU";                      break;              }
Missing Default,WixEdit.Import,RegistryImport,C:\repos\sebasbaumh_WixEdit\src\Import\RegistryImport.cs,SetValue,The following switch statement is missing a default case: switch (currentType)              {                  case "string":                      ret = valueString.Substring(1' valueString.Length - 2);                      break;                  case "integer":                      string intStr = valueString.Substring(valStart' valueString.Length - valStart).Trim();                      try                      {                          ret = Int32.Parse(intStr' System.Globalization.NumberStyles.HexNumber).ToString();                      }                      catch (FormatException ex)                      {                          throw new ImportException(String.Format("Failed to parse dword value (Line {0}): {1}"' lineNumber' intStr)' ex);                      }                      break;                  case "binary":                      ret = valueString.Substring(valStart' valueString.Length - valStart).Trim();                      ret = ret.Replace("'"' "");                      ret = ret.Replace(" "' "");                      break;                  case "expandable":                      ret = ret.Replace(" "' "");                      ret = valueString.Substring(valStart' valueString.Length - valStart).Trim();                        ret = GetStringFromBinary(ret);                        ret = ret.Trim('\0');                      break;                  case "multiString":                      ret = ret.Replace(" "' "");                      ret = valueString.Substring(valStart' valueString.Length - valStart).Trim();                        ret = GetStringFromBinary(ret);                      if (ret.EndsWith("\0"))                      {                          ret = ret.Remove(ret.Length - 1' 1);                      }                        break;              }
Missing Default,WixEdit.Panels,EditDialogPanel,C:\repos\sebasbaumh_WixEdit\src\Panels\EditDialogPanel.cs,SetDefaultValues,The following switch statement is missing a default case: switch (attName)                          {                              case "Width":                                  att.Value = width.ToString();                                  break;                              case "Height":                                  att.Value = height.ToString();                                    // Give the parent more room to display this item                                  if (parentNode.ParentNode != null &&                                      parentNode.ParentNode.Attributes["Height"] != null)                                  {                                      try                                      {                                          int currentParentHeight = Int32.Parse(parentNode.ParentNode.Attributes["Height"].Value);                                          if (currentParentHeight < top + height)                                          {                                              parentNode.ParentNode.Attributes["Height"].Value = (top + height).ToString();                                          }                                      }                                      catch { }                                  }                                  break;                              case "X":                                  att.Value = left.ToString();                                  break;                              case "Y":                                  att.Value = top.ToString();                                  break;                          }
