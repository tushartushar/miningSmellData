Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnResolveReply,The method has 10 parameters. Parameters: sdRef' flags' interfaceIndex' errorCode' fullname' hosttarget' port' txtLen' txtRecord' contex
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The method has 11 parameters. Parameters: sdRef' flags' interfaceIndex' errorCode' fullname' rrtype' rrclass' rdlen' rdata' ttl' context
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\Native.cs,DNSServiceBrowse,The method has 7 parameters. Parameters: sdRef' flags' interfaceIndex' regtype' domain' callBack' context
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\Native.cs,DNSServiceResolve,The method has 8 parameters. Parameters: sdRef' flags' interfaceIndex' name' regtype' domain' callBack' context
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\Native.cs,DNSServiceRegister,The method has 12 parameters. Parameters: sdRef' flags' interfaceIndex' name' regtype' domain' host' port' txtLen' txtRecord' callBack' context
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\Native.cs,DNSServiceQueryRecord,The method has 8 parameters. Parameters: sdRef' flags' interfaceIndex' fullname' rrtype' rrclass' callBack' context
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\Native.cs,TXTRecordGetItemAtIndex,The method has 7 parameters. Parameters: txtLen' txtRecord' index' keyBufLen' key' valueLen' value
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,RegisterService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\RegisterService.cs,OnRegisterReply,The method has 7 parameters. Parameters: sdRef' flags' errorCode' name' regtype' domain' context
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,ServiceBrowser,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\ServiceBrowser.cs,OnBrowseReply,The method has 8 parameters. Parameters: sdRef' flags' interfaceIndex' errorCode' serviceName' regtype' replyDomain' context
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(hostentry == null) {                          hostentry = new IPHostEntry();                          hostentry.HostName = hosttarget;                      }                                            if(hostentry.AddressList != null) {                          ArrayList list = new ArrayList(hostentry.AddressList);                          list.Add(address);                          hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          hostentry.AddressList = new IPAddress [] { address };                      }                                            ServiceResolvedEventHandler handler = Resolved;                      if(handler != null) {                          handler(this' new ServiceResolvedEventArgs(this));                      }                                            break;                  case ServiceType.TXT:                      if(TxtRecord != null) {                          TxtRecord.Dispose();                      }                                    TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(hostentry == null) {                          hostentry = new IPHostEntry();                          hostentry.HostName = hosttarget;                      }                                            if(hostentry.AddressList != null) {                          ArrayList list = new ArrayList(hostentry.AddressList);                          list.Add(address);                          hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          hostentry.AddressList = new IPAddress [] { address };                      }                                            ServiceResolvedEventHandler handler = Resolved;                      if(handler != null) {                          handler(this' new ServiceResolvedEventArgs(this));                      }                                            break;                  case ServiceType.TXT:                      if(TxtRecord != null) {                          TxtRecord.Dispose();                      }                                    TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(hostentry == null) {                          hostentry = new IPHostEntry();                          hostentry.HostName = hosttarget;                      }                                            if(hostentry.AddressList != null) {                          ArrayList list = new ArrayList(hostentry.AddressList);                          list.Add(address);                          hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          hostentry.AddressList = new IPAddress [] { address };                      }                                            ServiceResolvedEventHandler handler = Resolved;                      if(handler != null) {                          handler(this' new ServiceResolvedEventArgs(this));                      }                                            break;                  case ServiceType.TXT:                      if(TxtRecord != null) {                          TxtRecord.Dispose();                      }                                    TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(hostentry == null) {                          hostentry = new IPHostEntry();                          hostentry.HostName = hosttarget;                      }                                            if(hostentry.AddressList != null) {                          ArrayList list = new ArrayList(hostentry.AddressList);                          list.Add(address);                          hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          hostentry.AddressList = new IPAddress [] { address };                      }                                            ServiceResolvedEventHandler handler = Resolved;                      if(handler != null) {                          handler(this' new ServiceResolvedEventArgs(this));                      }                                            break;                  case ServiceType.TXT:                      if(TxtRecord != null) {                          TxtRecord.Dispose();                      }                                    TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(hostentry == null) {                          hostentry = new IPHostEntry();                          hostentry.HostName = hosttarget;                      }                                            if(hostentry.AddressList != null) {                          ArrayList list = new ArrayList(hostentry.AddressList);                          list.Add(address);                          hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          hostentry.AddressList = new IPAddress [] { address };                      }                                            ServiceResolvedEventHandler handler = Resolved;                      if(handler != null) {                          handler(this' new ServiceResolvedEventArgs(this));                      }                                            break;                  case ServiceType.TXT:                      if(TxtRecord != null) {                          TxtRecord.Dispose();                      }                                    TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(hostentry == null) {                          hostentry = new IPHostEntry();                          hostentry.HostName = hosttarget;                      }                                            if(hostentry.AddressList != null) {                          ArrayList list = new ArrayList(hostentry.AddressList);                          list.Add(address);                          hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          hostentry.AddressList = new IPAddress [] { address };                      }                                            ServiceResolvedEventHandler handler = Resolved;                      if(handler != null) {                          handler(this' new ServiceResolvedEventArgs(this));                      }                                            break;                  case ServiceType.TXT:                      if(TxtRecord != null) {                          TxtRecord.Dispose();                      }                                    TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(hostentry == null) {                          hostentry = new IPHostEntry();                          hostentry.HostName = hosttarget;                      }                                            if(hostentry.AddressList != null) {                          ArrayList list = new ArrayList(hostentry.AddressList);                          list.Add(address);                          hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          hostentry.AddressList = new IPAddress [] { address };                      }                                            ServiceResolvedEventHandler handler = Resolved;                      if(handler != null) {                          handler(this' new ServiceResolvedEventArgs(this));                      }                                            break;                  case ServiceType.TXT:                      if(TxtRecord != null) {                          TxtRecord.Dispose();                      }                                    TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,TxtRecord,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\TxtRecord.cs,TxtRecord,The following statement contains a magic number: handle = Marshal.AllocHGlobal(16);
Magic Number,Mono.Zeroconf.Providers.Bonjour,TxtRecord,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.Bonjour\Mono.Zeroconf.Providers.Bonjour\TxtRecord.cs,GetItemAt,The following statement contains a magic number: byte [] key = new byte[32];
