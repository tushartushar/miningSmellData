Implementation smell,Namespace,Class,File,Method,Description
Long Method,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,GenHookupMethod,The method has 106 lines of code.
Complex Method,NDesk.DBus,BusObject,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\BusObject.cs,Invoke,Cyclomatic complexity of the method is 8
Complex Method,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,ReadMessage,Cyclomatic complexity of the method is 10
Complex Method,NDesk.DBus,Mapper,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Mapper.cs,GetMethod,Cyclomatic complexity of the method is 8
Complex Method,NDesk.DBus,MatchRule,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MatchRule.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,NDesk.DBus,MatchRule,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MatchRule.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,NDesk.DBus,MatchRule,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MatchRule.cs,Matches,Cyclomatic complexity of the method is 18
Complex Method,NDesk.DBus,MatchRule,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MatchRule.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,NDesk.DBus,Signature,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Signature.cs,TypeToDType,Cyclomatic complexity of the method is 11
Complex Method,NDesk.DBus,Signature,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Signature.cs,GetSig,Cyclomatic complexity of the method is 12
Complex Method,NDesk.DBus,TypeDefiner,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeDefiner.cs,Define,Cyclomatic complexity of the method is 17
Complex Method,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,GenHookupMethod,Cyclomatic complexity of the method is 12
Long Parameter List,Mono.Zeroconf.Providers.AvahiDBus,IAvahiServer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\IAvahiServer.cs,ServiceBrowserNew,The method has 5 parameters. Parameters: interface' protocol' type' domain' flags
Long Parameter List,Mono.Zeroconf.Providers.AvahiDBus,IAvahiServer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\IAvahiServer.cs,ServiceResolverNew,The method has 7 parameters. Parameters: interface' protocol' name' type' dmain' aprotocol' flags
Long Parameter List,Mono.Zeroconf.Providers.AvahiDBus,ServiceBrowser,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\ServiceBrowser.cs,OnItemNew,The method has 6 parameters. Parameters: interface' protocol' name' type' domain' flags
Long Parameter List,Mono.Zeroconf.Providers.AvahiDBus,ServiceBrowser,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\ServiceBrowser.cs,OnItemRemove,The method has 6 parameters. Parameters: interface' protocol' name' type' domain' flags
Long Parameter List,Mono.Zeroconf.Providers.AvahiDBus,Service,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\Service.cs,Service,The method has 5 parameters. Parameters: name' regtype' replyDomain' interface' aprotocol
Long Parameter List,Mono.Zeroconf.Providers.AvahiDBus,BrowseService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\BrowseService.cs,BrowseService,The method has 5 parameters. Parameters: name' regtype' replyDomain' interface' aprotocol
Long Parameter List,Mono.Zeroconf.Providers.AvahiDBus,BrowseService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\BrowseService.cs,OnResolveFound,The method has 11 parameters. Parameters: interface' protocol' name' type' domain' host' aprotocol' address' port' txt' flags
Long Parameter List,Mono.Zeroconf.Providers.AvahiDBus,RegisterService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\RegisterService.cs,RegisterService,The method has 5 parameters. Parameters: name' regtype' replyDomain' interface' aprotocol
Long Parameter List,Mono.Zeroconf.Providers.AvahiDBus,IAvahiEntryGroup,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\IAvahiEntryGroup.cs,AddService,The method has 9 parameters. Parameters: interface' protocol' flags' name' type' domain' host' port' txt
Long Parameter List,Mono.Zeroconf.Providers.AvahiDBus,IAvahiEntryGroup,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\IAvahiEntryGroup.cs,AddServiceSubtype,The method has 7 parameters. Parameters: interface' protocol' flags' name' type' domain' subtype
Long Parameter List,Mono.Zeroconf.Providers.AvahiDBus,IAvahiEntryGroup,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\IAvahiEntryGroup.cs,UpdateServiceTxt,The method has 7 parameters. Parameters: interface' protocol' flags' name' type' domain' txt
Long Parameter List,Mono.Zeroconf.Providers.AvahiDBus,IAvahiEntryGroup,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\IAvahiEntryGroup.cs,AddAddress,The method has 5 parameters. Parameters: interface' protocol' flags' name' address
Long Parameter List,Mono.Zeroconf.Providers.AvahiDBus,IAvahiEntryGroup,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\IAvahiEntryGroup.cs,AddRecord,The method has 8 parameters. Parameters: interface' protocol' flags' name' clazz' type' ttl' rdata
Long Parameter List,NDesk.DBus,BusObject,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\BusObject.cs,SendSignal,The method has 6 parameters. Parameters: iface' member' inSigStr' writer' retType' exception
Long Parameter List,NDesk.DBus,BusObject,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\BusObject.cs,SendMethodCall,The method has 6 parameters. Parameters: iface' member' inSigStr' writer' retType' exception
Long Parameter List,NDesk.DBus,BusObject,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\BusObject.cs,Invoke,The method has 6 parameters. Parameters: methodBase' methodName' inArgs' outArgs' retVal' exception
Long Parameter List,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,GenHookupMethod,The method has 5 parameters. Parameters: ilg' declMethod' invokeMethod' interface' member
Long Parameter List,NDesk.DBus,MethodCall,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Wrapper.cs,MethodCall,The method has 5 parameters. Parameters: path' interface' member' destination' signature
Long Identifier,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,,The length of the parameter argumentNullExceptionConstructor is 32.
Long Statement,NDesk.DBus,BusObject,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\BusObject.cs,SendMethodCall,The length of the statement  "				throw new Exception ("Got unexpected message of type " + retMsg.Header.MessageType + " while waiting for a MethodReturn or Error"); " is 131.
Long Statement,NDesk.DBus,BusObject,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\BusObject.cs,Invoke,The length of the statement  "				throw new Exception ("Got unexpected message of type " + retMsg.Header.MessageType + " while waiting for a MethodReturn or Error"); " is 131.
Long Statement,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,WriteMessage,The length of the statement  "				throw new Exception ("Message length " + msgLength + " exceeds maximum allowed " + Protocol.MaxMessageLength + " bytes"); " is 121.
Long Statement,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,ReadMessage,The length of the statement  "					Console.Error.WriteLine ("Warning: Protocol version '" + version.ToString () + "' is not explicitly supported but may be compatible"); " is 134.
Long Statement,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,ReadMessage,The length of the statement  "				throw new Exception ("Message length " + msgLength + " exceeds maximum allowed " + Protocol.MaxMessageLength + " bytes"); " is 121.
Long Statement,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,HandleMessage,The length of the statement  "						Console.Error.WriteLine ("Unexpected reply message received: MessageType='" + msg.Header.MessageType + "'' ReplySerial=" + reply_serial); " is 137.
Long Statement,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,HandleMethodCall,The length of the statement  "			//TODO: Ping and Introspect need to be abstracted and moved somewhere more appropriate once message filter infrastructure is complete " is 133.
Long Statement,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,HandleMethodCall,The length of the statement  "			//FIXME: these special cases are slightly broken for the case where the member but not the interface is specified in the message " is 128.
Long Statement,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,GetObject,The length of the statement  "					Console.Error.WriteLine ("Warning: Note that MarshalByRefObject use is not recommended; for best performance' define interfaces"); " is 130.
Long Statement,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,Register,The length of the statement  "			//TODO: implement some kind of tree data structure or internal object hierarchy. right now we are ignoring the name and putting all object paths in one namespace' which is bad " is 175.
Long Statement,NDesk.DBus,DProxy,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\DProxy.cs,Invoke,The length of the statement  "			busObject.Invoke (callMessage.MethodBase' callMessage.MethodName' callMessage.InArgs' out outArgs' out retVal' out exception); " is 126.
Long Statement,NDesk.DBus,ExportObject,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\ExportObject.cs,HandleMethodCall,The length of the statement  "			//object retObj = type.InvokeMember (msg.Member' BindingFlags.InvokeMethod' null' obj' MessageHelper.GetDynamicValues (msg)); " is 125.
Long Statement,NDesk.DBus,Introspector,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Introspection.cs,GetProductDescription,The length of the statement  "			AssemblyInformationalVersionAttribute iversion = Attribute.GetCustomAttribute (assembly' typeof (AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute; " is 178.
Long Statement,NDesk.DBus,Introspector,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Introspection.cs,WriteArg,The length of the statement  "			//we can't rely on the default direction (qt-dbus requires a direction at time of writing)' so we use a boolean to reverse the parameter direction and make it explicit " is 167.
Long Statement,NDesk.DBus,Introspector,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Introspection.cs,WriteInterface,The length of the statement  "						Console.Error.WriteLine ("Warning: Unhandled MemberType '{0}' encountered while introspecting {1}"' mbi.MemberType' type.FullName); " is 131.
Long Statement,NDesk.DBus,Mapper,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Mapper.cs,GetMethod,The length of the statement  "				//this could be made more efficient by using the given interface name earlier and avoiding walking through all public interfaces " is 128.
Long Statement,NDesk.DBus,MessageHelper,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Mapper.cs,CreateUnknownMethodError,The length of the statement  "			string errMsg = String.Format ("Method \"{0}\" with signature \"{1}\" on interface \"{2}\" doesn't exist"' method_call.Member' method_call.Signature.Value' method_call.Interface); " is 179.
Long Statement,NDesk.DBus,MessageHelper,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Mapper.cs,GetDynamicValues,The length of the statement  "			//TODO: this validation check should provide better information' eg. message dump or a stack trace' or at least the interface/member " is 132.
Long Statement,NDesk.DBus,MessageHelper,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Mapper.cs,GetDynamicValues,The length of the statement  "					Console.Error.WriteLine ("Warning: The signature of the message does not match that of the handler: " + "Expected '" + expected + "'' got '" + actual + "'"); " is 157.
Long Statement,NDesk.DBus,MessageHelper,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Mapper.cs,GetDynamicValues,The length of the statement  "			//TODO: this validation check should provide better information' eg. message dump or a stack trace' or at least the interface/member " is 132.
Long Statement,NDesk.DBus,MessageHelper,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Mapper.cs,GetDynamicValues,The length of the statement  "					Console.Error.WriteLine ("Warning: The signature of the message does not match that of the handler: " + "Expected '" + expected + "'' got '" + actual + "'"); " is 157.
Long Statement,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,ReadValue,The length of the statement  "				System.Collections.IDictionary idict = (System.Collections.IDictionary)Activator.CreateInstance(dictType' new object[0]); " is 121.
Long Statement,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,Write,The length of the statement  "				throw new Exception ("Signature length " + ascii_data.Length + " exceeds maximum allowed " + Protocol.MaxSignatureLength + " bytes"); " is 133.
Long Statement,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,WriteComplex,The length of the statement  "			} else if (type.IsGenericType && (type.GetGenericTypeDefinition () == typeof (IDictionary<'>) || type.GetGenericTypeDefinition () == typeof (Dictionary<'>))) { " is 159.
Long Statement,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,Write,The length of the statement  "			} else if (type.IsGenericType && (type.GetGenericTypeDefinition () == typeof (IDictionary<'>) || type.GetGenericTypeDefinition () == typeof (Dictionary<'>))) { " is 159.
Long Statement,NDesk.DBus,Signature,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Signature.cs,GetElementSignature,The length of the statement  "				throw new NotSupportedException ("Parsing signatures with more than one primitive value is not supported (signature was '" + this + "')"); " is 138.
Long Statement,NDesk.DBus,Signature,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Signature.cs,ToType,The length of the statement  "					throw new NotSupportedException ("Parsing or converting this signature is not yet supported (signature was '" + this + "')' at DType." + dtype); " is 144.
Long Statement,NDesk.DBus,Signature,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Signature.cs,GetSig,The length of the statement  "			if (type.IsGenericType && (type.GetGenericTypeDefinition () == typeof (IDictionary<'>) || type.GetGenericTypeDefinition () == typeof (Dictionary<'>))) { " is 152.
Long Statement,NDesk.DBus,TypeDefiner,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeDefiner.cs,InitHack,The length of the statement  "			//asmBdef = System.Threading.Thread.GetDomain ().DefineDynamicAssembly (new AssemblyName ("DefAssembly")' AssemblyBuilderAccess.RunAndSave); " is 140.
Long Statement,NDesk.DBus,TypeDefiner,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeDefiner.cs,Define,The length of the statement  "			//using the full interface name is ok' but makes consuming the type from C# difficult since namespaces/Type names may overlap " is 125.
Long Statement,NDesk.DBus,TypeDefiner,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeDefiner.cs,Define,The length of the statement  "			TypeBuilder typeB = modBdef.DefineType (nsName + Type.Delimiter + "I" + ifaceName' TypeAttributes.Public | TypeAttributes.Interface); " is 133.
Long Statement,NDesk.DBus,TypeDefiner,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeDefiner.cs,Define,The length of the statement  "				//MethodBuilder method_builder = typeB.DefineMethod (declMethod.Name' MethodAttributes.Public | MethodAttributes.Virtual' declMethod.ReturnType' Mapper.GetTypes (ArgDirection.In' declMethod.GetParameters ())); " is 209.
Long Statement,NDesk.DBus,TypeDefiner,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeDefiner.cs,Define,The length of the statement  "					prop_builder.SetGetMethod (typeB.DefineMethod ("get_" + prop.Name' ifaceMethAttr | MethodAttributes.SpecialName' propType' Type.EmptyTypes)); " is 141.
Long Statement,NDesk.DBus,TypeDefiner,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeDefiner.cs,Define,The length of the statement  "					prop_builder.SetSetMethod (typeB.DefineMethod ("set_" + prop.Name' ifaceMethAttr | MethodAttributes.SpecialName' null' new Type[] {propType})); " is 143.
Long Statement,NDesk.DBus,TypeDefiner,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeDefiner.cs,Define,The length of the statement  "				event_builder.SetAddOnMethod (typeB.DefineMethod ("add_" + signal.Name' ifaceMethAttr | MethodAttributes.SpecialName' null' new Type[] {eventType})); " is 149.
Long Statement,NDesk.DBus,TypeDefiner,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeDefiner.cs,Define,The length of the statement  "				event_builder.SetRemoveOnMethod (typeB.DefineMethod ("remove_" + signal.Name' ifaceMethAttr | MethodAttributes.SpecialName' null' new Type[] {eventType})); " is 155.
Long Statement,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,InitHack,The length of the statement  "			asmB = AppDomain.CurrentDomain.DefineDynamicAssembly (new AssemblyName ("NDesk.DBus.Proxies")' AssemblyBuilderAccess.Run); " is 122.
Long Statement,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,GetImplementation,The length of the statement  "			TypeBuilder typeB = modB.DefineType (declType.Name + "Proxy"' TypeAttributes.Class | TypeAttributes.Public' typeof (BusObject)); " is 128.
Long Statement,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,GetHookupMethod,The length of the statement  "			DynamicMethod hookupMethod = new DynamicMethod ("Handle" + member' declMethod.ReturnType' hookupParms' typeof (MessageWriter)); " is 127.
Long Statement,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,GetWriteMethod,The length of the statement  "			meth = typeof (MessageWriter).GetMethod ("Write"' BindingFlags.ExactBinding | BindingFlags.Instance | BindingFlags.Public' null' new Type[] {tUnder}' null); " is 156.
Long Statement,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,GetWriteMethod,The length of the statement  "			DynamicMethod method_builder = new DynamicMethod ("Write" + t.Name' typeof (void)' new Type[] {typeof (MessageWriter)' t}' typeof (MessageWriter)); " is 147.
Long Statement,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,GenWriter,The length of the statement  "			MethodInfo exactWriteMethod = typeof (MessageWriter).GetMethod ("Write"' BindingFlags.ExactBinding | BindingFlags.Instance | BindingFlags.Public' null' new Type[] {tUnder}' null); " is 179.
Long Statement,NDesk.DBus.Transports,UnixSocket,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\UnixNativeTransport.cs,Connect,The length of the statement  "			//we should get the Exception from UnixMarshal and throw it here for a better stack trace' but the relevant API seems to be private " is 131.
Complex Conditional,NDesk.DBus,AddressEntry,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Address.cs,Escape,The conditional expression  "Char.IsLetterOrDigit (c) || c == '-' || c == '_' || c == '/' || c == '\\' || c == '.'"  is complex.
Complex Conditional,NDesk.DBus,BusObject,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\BusObject.cs,Invoke,The conditional expression  "mi != null && mi.IsSpecialName && (methodName.StartsWith ("add_") || methodName.StartsWith ("remove_"))"  is complex.
Magic Number,Mono.Zeroconf.Providers.AvahiDBus,TxtRecord,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\TxtRecord.cs,TxtRecord,The following statement contains a magic number: foreach (byte [] raw_item in data) {                  Regex item_regex = new Regex (@"""[^""]*""|[^']+"' RegexOptions.IgnorePatternWhitespace);                  foreach (Match item_match in item_regex.Matches (encoding.GetString (raw_item))) {                      string item = item_match.Groups[0].Value;                      string [] split_item = item.Split (new char [] { '=' }' 2);                        if (split_item.Length == 1)                          Add (split_item[0]' String.Empty);                      else                           Add (split_item[0]' split_item[1]);                  }              }
Magic Number,NDesk.DBus,AddressEntry,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Address.cs,Parse,The following statement contains a magic number: if (parts.Length < 2)  				throw new BadAddressException ("No colon found");
Magic Number,NDesk.DBus,AddressEntry,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Address.cs,Parse,The following statement contains a magic number: if (parts.Length > 2)  				throw new BadAddressException ("Too many colons found");
Magic Number,NDesk.DBus,AddressEntry,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Address.cs,Parse,The following statement contains a magic number: foreach (string propStr in parts[1].Split (''')) {  				parts = propStr.Split ('=');    				if (parts.Length < 2)  					throw new BadAddressException ("No equals sign found");  				if (parts.Length > 2)  					throw new BadAddressException ("Too many equals signs found");    				entry.Properties[parts[0]] = Unescape (parts[1]);  			}
Magic Number,NDesk.DBus,AddressEntry,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Address.cs,Parse,The following statement contains a magic number: foreach (string propStr in parts[1].Split (''')) {  				parts = propStr.Split ('=');    				if (parts.Length < 2)  					throw new BadAddressException ("No equals sign found");  				if (parts.Length > 2)  					throw new BadAddressException ("Too many equals signs found");    				entry.Properties[parts[0]] = Unescape (parts[1]);  			}
Magic Number,NDesk.DBus,BusObject,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\BusObject.cs,Invoke,The following statement contains a magic number: if (mi != null && mi.IsSpecialName && (methodName.StartsWith ("add_") || methodName.StartsWith ("remove_"))) {  				string[] parts = methodName.Split (new char[]{'_'}' 2);  				string ename = parts[1];  				Delegate dlg = (Delegate)inArgs[0];    				ToggleSignal (Mapper.GetInterfaceName (mi)' ename' dlg' parts[0] == "add");    				return;  			}
Magic Number,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,ReadMessage,The following statement contains a magic number: byte[] hbuf = new byte[16];
Magic Number,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,ReadMessage,The following statement contains a magic number: read = ns.Read (hbuf' 0' 16);
Magic Number,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,ReadMessage,The following statement contains a magic number: if (read != 16)  				throw new Exception ("Header read length mismatch: " + read + " of expected " + "16");
Magic Number,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,ReadMessage,The following statement contains a magic number: toRead = Protocol.Padded (toRead' 8);
Magic Number,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,ReadMessage,The following statement contains a magic number: header = new byte[16 + toRead];
Magic Number,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,ReadMessage,The following statement contains a magic number: Array.Copy (hbuf' header' 16);
Magic Number,NDesk.DBus,Connection,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Connection.cs,ReadMessage,The following statement contains a magic number: read = ns.Read (header' 16' toRead);
Magic Number,NDesk.DBus,MatchRule,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MatchRule.cs,Parse,The following statement contains a magic number: foreach (string propStr in text.Split (''')) {  				string[] parts = propStr.Split ('=');    				if (parts.Length < 2)  					throw new Exception ("No equals sign found");  				if (parts.Length > 2)  					throw new Exception ("Too many equals signs found");    				string key = parts[0].Trim ();  				string value = parts[1].Trim ();    				if (!value.StartsWith ("'") || !value.EndsWith ("'"))  					throw new Exception ("Too many equals signs found");    				value = value.Substring (1' value.Length - 2);    				if (key.StartsWith ("arg")) {  					int argnum = Int32.Parse (key.Remove (0' "arg".Length));    					if (argnum < 0 || argnum > 63)  						throw new Exception ("arg match must be between 0 and 63 inclusive");    					if (r.Args.ContainsKey (argnum))  						return null;    					r.Args[argnum] = value;    					continue;  				}    				//TODO: more consistent error handling  				switch (key) {  					case "type":  						if (r.MessageType != null)  							return null;  						r.MessageType = MessageFilter.StringToMessageType (value);  						break;  					case "interface":  						if (r.Interface != null)  							return null;  						r.Interface = value;  						break;  					case "member":  						if (r.Member != null)  							return null;  						r.Member = value;  						break;  					case "path":  						if (r.Path != null)  							return null;  						r.Path = new ObjectPath (value);  						break;  					case "sender":  						if (r.Sender != null)  							return null;  						r.Sender = value;  						break;  					case "destination":  						if (r.Destination != null)  							return null;  						r.Destination = value;  						break;  					default:  						if (Protocol.Verbose)  							Console.Error.WriteLine ("Warning: Unrecognized match rule key: " + key);  						break;  				}  			}
Magic Number,NDesk.DBus,MatchRule,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MatchRule.cs,Parse,The following statement contains a magic number: foreach (string propStr in text.Split (''')) {  				string[] parts = propStr.Split ('=');    				if (parts.Length < 2)  					throw new Exception ("No equals sign found");  				if (parts.Length > 2)  					throw new Exception ("Too many equals signs found");    				string key = parts[0].Trim ();  				string value = parts[1].Trim ();    				if (!value.StartsWith ("'") || !value.EndsWith ("'"))  					throw new Exception ("Too many equals signs found");    				value = value.Substring (1' value.Length - 2);    				if (key.StartsWith ("arg")) {  					int argnum = Int32.Parse (key.Remove (0' "arg".Length));    					if (argnum < 0 || argnum > 63)  						throw new Exception ("arg match must be between 0 and 63 inclusive");    					if (r.Args.ContainsKey (argnum))  						return null;    					r.Args[argnum] = value;    					continue;  				}    				//TODO: more consistent error handling  				switch (key) {  					case "type":  						if (r.MessageType != null)  							return null;  						r.MessageType = MessageFilter.StringToMessageType (value);  						break;  					case "interface":  						if (r.Interface != null)  							return null;  						r.Interface = value;  						break;  					case "member":  						if (r.Member != null)  							return null;  						r.Member = value;  						break;  					case "path":  						if (r.Path != null)  							return null;  						r.Path = new ObjectPath (value);  						break;  					case "sender":  						if (r.Sender != null)  							return null;  						r.Sender = value;  						break;  					case "destination":  						if (r.Destination != null)  							return null;  						r.Destination = value;  						break;  					default:  						if (Protocol.Verbose)  							Console.Error.WriteLine ("Warning: Unrecognized match rule key: " + key);  						break;  				}  			}
Magic Number,NDesk.DBus,MatchRule,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MatchRule.cs,Parse,The following statement contains a magic number: foreach (string propStr in text.Split (''')) {  				string[] parts = propStr.Split ('=');    				if (parts.Length < 2)  					throw new Exception ("No equals sign found");  				if (parts.Length > 2)  					throw new Exception ("Too many equals signs found");    				string key = parts[0].Trim ();  				string value = parts[1].Trim ();    				if (!value.StartsWith ("'") || !value.EndsWith ("'"))  					throw new Exception ("Too many equals signs found");    				value = value.Substring (1' value.Length - 2);    				if (key.StartsWith ("arg")) {  					int argnum = Int32.Parse (key.Remove (0' "arg".Length));    					if (argnum < 0 || argnum > 63)  						throw new Exception ("arg match must be between 0 and 63 inclusive");    					if (r.Args.ContainsKey (argnum))  						return null;    					r.Args[argnum] = value;    					continue;  				}    				//TODO: more consistent error handling  				switch (key) {  					case "type":  						if (r.MessageType != null)  							return null;  						r.MessageType = MessageFilter.StringToMessageType (value);  						break;  					case "interface":  						if (r.Interface != null)  							return null;  						r.Interface = value;  						break;  					case "member":  						if (r.Member != null)  							return null;  						r.Member = value;  						break;  					case "path":  						if (r.Path != null)  							return null;  						r.Path = new ObjectPath (value);  						break;  					case "sender":  						if (r.Sender != null)  							return null;  						r.Sender = value;  						break;  					case "destination":  						if (r.Destination != null)  							return null;  						r.Destination = value;  						break;  					default:  						if (Protocol.Verbose)  							Console.Error.WriteLine ("Warning: Unrecognized match rule key: " + key);  						break;  				}  			}
Magic Number,NDesk.DBus,MatchRule,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MatchRule.cs,Parse,The following statement contains a magic number: foreach (string propStr in text.Split (''')) {  				string[] parts = propStr.Split ('=');    				if (parts.Length < 2)  					throw new Exception ("No equals sign found");  				if (parts.Length > 2)  					throw new Exception ("Too many equals signs found");    				string key = parts[0].Trim ();  				string value = parts[1].Trim ();    				if (!value.StartsWith ("'") || !value.EndsWith ("'"))  					throw new Exception ("Too many equals signs found");    				value = value.Substring (1' value.Length - 2);    				if (key.StartsWith ("arg")) {  					int argnum = Int32.Parse (key.Remove (0' "arg".Length));    					if (argnum < 0 || argnum > 63)  						throw new Exception ("arg match must be between 0 and 63 inclusive");    					if (r.Args.ContainsKey (argnum))  						return null;    					r.Args[argnum] = value;    					continue;  				}    				//TODO: more consistent error handling  				switch (key) {  					case "type":  						if (r.MessageType != null)  							return null;  						r.MessageType = MessageFilter.StringToMessageType (value);  						break;  					case "interface":  						if (r.Interface != null)  							return null;  						r.Interface = value;  						break;  					case "member":  						if (r.Member != null)  							return null;  						r.Member = value;  						break;  					case "path":  						if (r.Path != null)  							return null;  						r.Path = new ObjectPath (value);  						break;  					case "sender":  						if (r.Sender != null)  							return null;  						r.Sender = value;  						break;  					case "destination":  						if (r.Destination != null)  							return null;  						r.Destination = value;  						break;  					default:  						if (Protocol.Verbose)  							Console.Error.WriteLine ("Warning: Unrecognized match rule key: " + key);  						break;  				}  			}
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalUShort,The following statement contains a magic number: ReadPad (2);
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalUShort,The following statement contains a magic number: pos += 2;
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalUInt,The following statement contains a magic number: ReadPad (4);
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[pos + 0];  				dst[1] = data[pos + 1];  				dst[2] = data[pos + 2];  				dst[3] = data[pos + 3];  			} else {  				dst[0] = data[pos + 3];  				dst[1] = data[pos + 2];  				dst[2] = data[pos + 1];  				dst[3] = data[pos + 0];  			}
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[pos + 0];  				dst[1] = data[pos + 1];  				dst[2] = data[pos + 2];  				dst[3] = data[pos + 3];  			} else {  				dst[0] = data[pos + 3];  				dst[1] = data[pos + 2];  				dst[2] = data[pos + 1];  				dst[3] = data[pos + 0];  			}
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[pos + 0];  				dst[1] = data[pos + 1];  				dst[2] = data[pos + 2];  				dst[3] = data[pos + 3];  			} else {  				dst[0] = data[pos + 3];  				dst[1] = data[pos + 2];  				dst[2] = data[pos + 1];  				dst[3] = data[pos + 0];  			}
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[pos + 0];  				dst[1] = data[pos + 1];  				dst[2] = data[pos + 2];  				dst[3] = data[pos + 3];  			} else {  				dst[0] = data[pos + 3];  				dst[1] = data[pos + 2];  				dst[2] = data[pos + 1];  				dst[3] = data[pos + 0];  			}
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[pos + 0];  				dst[1] = data[pos + 1];  				dst[2] = data[pos + 2];  				dst[3] = data[pos + 3];  			} else {  				dst[0] = data[pos + 3];  				dst[1] = data[pos + 2];  				dst[2] = data[pos + 1];  				dst[3] = data[pos + 0];  			}
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[pos + 0];  				dst[1] = data[pos + 1];  				dst[2] = data[pos + 2];  				dst[3] = data[pos + 3];  			} else {  				dst[0] = data[pos + 3];  				dst[1] = data[pos + 2];  				dst[2] = data[pos + 1];  				dst[3] = data[pos + 0];  			}
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[pos + 0];  				dst[1] = data[pos + 1];  				dst[2] = data[pos + 2];  				dst[3] = data[pos + 3];  			} else {  				dst[0] = data[pos + 3];  				dst[1] = data[pos + 2];  				dst[2] = data[pos + 1];  				dst[3] = data[pos + 0];  			}
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[pos + 0];  				dst[1] = data[pos + 1];  				dst[2] = data[pos + 2];  				dst[3] = data[pos + 3];  			} else {  				dst[0] = data[pos + 3];  				dst[1] = data[pos + 2];  				dst[2] = data[pos + 1];  				dst[3] = data[pos + 0];  			}
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalUInt,The following statement contains a magic number: pos += 4;
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalULong,The following statement contains a magic number: ReadPad (8);
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalULong,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				for (int i = 0; i < 8; ++i)  					dst[i] = data[pos + i];  			} else {  				for (int i = 0; i < 8; ++i)  					dst[i] = data[pos + (7 - i)];  			}
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalULong,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				for (int i = 0; i < 8; ++i)  					dst[i] = data[pos + i];  			} else {  				for (int i = 0; i < 8; ++i)  					dst[i] = data[pos + (7 - i)];  			}
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalULong,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				for (int i = 0; i < 8; ++i)  					dst[i] = data[pos + i];  			} else {  				for (int i = 0; i < 8; ++i)  					dst[i] = data[pos + (7 - i)];  			}
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,MarshalULong,The following statement contains a magic number: pos += 8;
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,GetValueToDict,The following statement contains a magic number: ReadPad (8);
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,GetValueToDict,The following statement contains a magic number: while (pos < endPos)  			{  				ReadPad (8);    				val.Add (ReadValue (keyType)' ReadValue (valType));  			}
Magic Number,NDesk.DBus,MessageReader,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageReader.cs,ReadStruct,The following statement contains a magic number: ReadPad (8);
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,CloseWrite,The following statement contains a magic number: WritePad (8);
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUShort,The following statement contains a magic number: WritePad (2);
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUShort,The following statement contains a magic number: byte[] dst = new byte[2];
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUShort,The following statement contains a magic number: stream.Write (dst' 0' 2);
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUInt,The following statement contains a magic number: WritePad (4);
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUInt,The following statement contains a magic number: byte[] dst = new byte[4];
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[0];  				dst[1] = data[1];  				dst[2] = data[2];  				dst[3] = data[3];  			} else {  				dst[0] = data[3];  				dst[1] = data[2];  				dst[2] = data[1];  				dst[3] = data[0];  			}
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[0];  				dst[1] = data[1];  				dst[2] = data[2];  				dst[3] = data[3];  			} else {  				dst[0] = data[3];  				dst[1] = data[2];  				dst[2] = data[1];  				dst[3] = data[0];  			}
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[0];  				dst[1] = data[1];  				dst[2] = data[2];  				dst[3] = data[3];  			} else {  				dst[0] = data[3];  				dst[1] = data[2];  				dst[2] = data[1];  				dst[3] = data[0];  			}
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[0];  				dst[1] = data[1];  				dst[2] = data[2];  				dst[3] = data[3];  			} else {  				dst[0] = data[3];  				dst[1] = data[2];  				dst[2] = data[1];  				dst[3] = data[0];  			}
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[0];  				dst[1] = data[1];  				dst[2] = data[2];  				dst[3] = data[3];  			} else {  				dst[0] = data[3];  				dst[1] = data[2];  				dst[2] = data[1];  				dst[3] = data[0];  			}
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[0];  				dst[1] = data[1];  				dst[2] = data[2];  				dst[3] = data[3];  			} else {  				dst[0] = data[3];  				dst[1] = data[2];  				dst[2] = data[1];  				dst[3] = data[0];  			}
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[0];  				dst[1] = data[1];  				dst[2] = data[2];  				dst[3] = data[3];  			} else {  				dst[0] = data[3];  				dst[1] = data[2];  				dst[2] = data[1];  				dst[3] = data[0];  			}
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUInt,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				dst[0] = data[0];  				dst[1] = data[1];  				dst[2] = data[2];  				dst[3] = data[3];  			} else {  				dst[0] = data[3];  				dst[1] = data[2];  				dst[2] = data[1];  				dst[3] = data[0];  			}
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalUInt,The following statement contains a magic number: stream.Write (dst' 0' 4);
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalULong,The following statement contains a magic number: WritePad (8);
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalULong,The following statement contains a magic number: byte[] dst = new byte[8];
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalULong,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				for (int i = 0; i < 8; ++i)  					dst[i] = data[i];  			} else {  				for (int i = 0; i < 8; ++i)  					dst[i] = data[7 - i];  			}
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalULong,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				for (int i = 0; i < 8; ++i)  					dst[i] = data[i];  			} else {  				for (int i = 0; i < 8; ++i)  					dst[i] = data[7 - i];  			}
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalULong,The following statement contains a magic number: if (endianness == Connection.NativeEndianness) {  				for (int i = 0; i < 8; ++i)  					dst[i] = data[i];  			} else {  				for (int i = 0; i < 8; ++i)  					dst[i] = data[7 - i];  			}
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,MarshalULong,The following statement contains a magic number: stream.Write (dst' 0' 8);
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,WriteFromDict,The following statement contains a magic number: WritePad (8);
Magic Number,NDesk.DBus,MessageWriter,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\MessageWriter.cs,WriteFromDict,The following statement contains a magic number: foreach (System.Collections.DictionaryEntry entry in val)  			{  				WritePad (8);    				Write (keyType' entry.Key);  				Write (valType' entry.Value);  			}
Magic Number,NDesk.DBus,Protocol,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Protocol.cs,GetAlignment,The following statement contains a magic number: switch (dtype) {  				case DType.Byte:  					return 1;  				case DType.Boolean:  					return 4;  				case DType.Int16:  				case DType.UInt16:  					return 2;  				case DType.Int32:  				case DType.UInt32:  					return 4;  				case DType.Int64:  				case DType.UInt64:  					return 8;  #if !DISABLE_SINGLE  				case DType.Single: //Not yet supported!  					return 4;  #endif  				case DType.Double:  					return 8;  				case DType.String:  					return 4;  				case DType.ObjectPath:  					return 4;  				case DType.Signature:  					return 1;  				case DType.Array:  					return 4;  				case DType.Struct:  					return 8;  				case DType.Variant:  					return 1;  				case DType.DictEntry:  					return 8;  				case DType.Invalid:  				default:  					throw new Exception ("Cannot determine alignment of " + dtype);  			}
Magic Number,NDesk.DBus,Protocol,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Protocol.cs,GetAlignment,The following statement contains a magic number: switch (dtype) {  				case DType.Byte:  					return 1;  				case DType.Boolean:  					return 4;  				case DType.Int16:  				case DType.UInt16:  					return 2;  				case DType.Int32:  				case DType.UInt32:  					return 4;  				case DType.Int64:  				case DType.UInt64:  					return 8;  #if !DISABLE_SINGLE  				case DType.Single: //Not yet supported!  					return 4;  #endif  				case DType.Double:  					return 8;  				case DType.String:  					return 4;  				case DType.ObjectPath:  					return 4;  				case DType.Signature:  					return 1;  				case DType.Array:  					return 4;  				case DType.Struct:  					return 8;  				case DType.Variant:  					return 1;  				case DType.DictEntry:  					return 8;  				case DType.Invalid:  				default:  					throw new Exception ("Cannot determine alignment of " + dtype);  			}
Magic Number,NDesk.DBus,Protocol,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Protocol.cs,GetAlignment,The following statement contains a magic number: switch (dtype) {  				case DType.Byte:  					return 1;  				case DType.Boolean:  					return 4;  				case DType.Int16:  				case DType.UInt16:  					return 2;  				case DType.Int32:  				case DType.UInt32:  					return 4;  				case DType.Int64:  				case DType.UInt64:  					return 8;  #if !DISABLE_SINGLE  				case DType.Single: //Not yet supported!  					return 4;  #endif  				case DType.Double:  					return 8;  				case DType.String:  					return 4;  				case DType.ObjectPath:  					return 4;  				case DType.Signature:  					return 1;  				case DType.Array:  					return 4;  				case DType.Struct:  					return 8;  				case DType.Variant:  					return 1;  				case DType.DictEntry:  					return 8;  				case DType.Invalid:  				default:  					throw new Exception ("Cannot determine alignment of " + dtype);  			}
Magic Number,NDesk.DBus,Protocol,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Protocol.cs,GetAlignment,The following statement contains a magic number: switch (dtype) {  				case DType.Byte:  					return 1;  				case DType.Boolean:  					return 4;  				case DType.Int16:  				case DType.UInt16:  					return 2;  				case DType.Int32:  				case DType.UInt32:  					return 4;  				case DType.Int64:  				case DType.UInt64:  					return 8;  #if !DISABLE_SINGLE  				case DType.Single: //Not yet supported!  					return 4;  #endif  				case DType.Double:  					return 8;  				case DType.String:  					return 4;  				case DType.ObjectPath:  					return 4;  				case DType.Signature:  					return 1;  				case DType.Array:  					return 4;  				case DType.Struct:  					return 8;  				case DType.Variant:  					return 1;  				case DType.DictEntry:  					return 8;  				case DType.Invalid:  				default:  					throw new Exception ("Cannot determine alignment of " + dtype);  			}
Magic Number,NDesk.DBus,Protocol,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Protocol.cs,GetAlignment,The following statement contains a magic number: switch (dtype) {  				case DType.Byte:  					return 1;  				case DType.Boolean:  					return 4;  				case DType.Int16:  				case DType.UInt16:  					return 2;  				case DType.Int32:  				case DType.UInt32:  					return 4;  				case DType.Int64:  				case DType.UInt64:  					return 8;  #if !DISABLE_SINGLE  				case DType.Single: //Not yet supported!  					return 4;  #endif  				case DType.Double:  					return 8;  				case DType.String:  					return 4;  				case DType.ObjectPath:  					return 4;  				case DType.Signature:  					return 1;  				case DType.Array:  					return 4;  				case DType.Struct:  					return 8;  				case DType.Variant:  					return 1;  				case DType.DictEntry:  					return 8;  				case DType.Invalid:  				default:  					throw new Exception ("Cannot determine alignment of " + dtype);  			}
Magic Number,NDesk.DBus,Protocol,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Protocol.cs,GetAlignment,The following statement contains a magic number: switch (dtype) {  				case DType.Byte:  					return 1;  				case DType.Boolean:  					return 4;  				case DType.Int16:  				case DType.UInt16:  					return 2;  				case DType.Int32:  				case DType.UInt32:  					return 4;  				case DType.Int64:  				case DType.UInt64:  					return 8;  #if !DISABLE_SINGLE  				case DType.Single: //Not yet supported!  					return 4;  #endif  				case DType.Double:  					return 8;  				case DType.String:  					return 4;  				case DType.ObjectPath:  					return 4;  				case DType.Signature:  					return 1;  				case DType.Array:  					return 4;  				case DType.Struct:  					return 8;  				case DType.Variant:  					return 1;  				case DType.DictEntry:  					return 8;  				case DType.Invalid:  				default:  					throw new Exception ("Cannot determine alignment of " + dtype);  			}
Magic Number,NDesk.DBus,Protocol,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Protocol.cs,GetAlignment,The following statement contains a magic number: switch (dtype) {  				case DType.Byte:  					return 1;  				case DType.Boolean:  					return 4;  				case DType.Int16:  				case DType.UInt16:  					return 2;  				case DType.Int32:  				case DType.UInt32:  					return 4;  				case DType.Int64:  				case DType.UInt64:  					return 8;  #if !DISABLE_SINGLE  				case DType.Single: //Not yet supported!  					return 4;  #endif  				case DType.Double:  					return 8;  				case DType.String:  					return 4;  				case DType.ObjectPath:  					return 4;  				case DType.Signature:  					return 1;  				case DType.Array:  					return 4;  				case DType.Struct:  					return 8;  				case DType.Variant:  					return 1;  				case DType.DictEntry:  					return 8;  				case DType.Invalid:  				default:  					throw new Exception ("Cannot determine alignment of " + dtype);  			}
Magic Number,NDesk.DBus,Protocol,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Protocol.cs,GetAlignment,The following statement contains a magic number: switch (dtype) {  				case DType.Byte:  					return 1;  				case DType.Boolean:  					return 4;  				case DType.Int16:  				case DType.UInt16:  					return 2;  				case DType.Int32:  				case DType.UInt32:  					return 4;  				case DType.Int64:  				case DType.UInt64:  					return 8;  #if !DISABLE_SINGLE  				case DType.Single: //Not yet supported!  					return 4;  #endif  				case DType.Double:  					return 8;  				case DType.String:  					return 4;  				case DType.ObjectPath:  					return 4;  				case DType.Signature:  					return 1;  				case DType.Array:  					return 4;  				case DType.Struct:  					return 8;  				case DType.Variant:  					return 1;  				case DType.DictEntry:  					return 8;  				case DType.Invalid:  				default:  					throw new Exception ("Cannot determine alignment of " + dtype);  			}
Magic Number,NDesk.DBus,Protocol,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Protocol.cs,GetAlignment,The following statement contains a magic number: switch (dtype) {  				case DType.Byte:  					return 1;  				case DType.Boolean:  					return 4;  				case DType.Int16:  				case DType.UInt16:  					return 2;  				case DType.Int32:  				case DType.UInt32:  					return 4;  				case DType.Int64:  				case DType.UInt64:  					return 8;  #if !DISABLE_SINGLE  				case DType.Single: //Not yet supported!  					return 4;  #endif  				case DType.Double:  					return 8;  				case DType.String:  					return 4;  				case DType.ObjectPath:  					return 4;  				case DType.Signature:  					return 1;  				case DType.Array:  					return 4;  				case DType.Struct:  					return 8;  				case DType.Variant:  					return 1;  				case DType.DictEntry:  					return 8;  				case DType.Invalid:  				default:  					throw new Exception ("Cannot determine alignment of " + dtype);  			}
Magic Number,NDesk.DBus,Protocol,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Protocol.cs,GetAlignment,The following statement contains a magic number: switch (dtype) {  				case DType.Byte:  					return 1;  				case DType.Boolean:  					return 4;  				case DType.Int16:  				case DType.UInt16:  					return 2;  				case DType.Int32:  				case DType.UInt32:  					return 4;  				case DType.Int64:  				case DType.UInt64:  					return 8;  #if !DISABLE_SINGLE  				case DType.Single: //Not yet supported!  					return 4;  #endif  				case DType.Double:  					return 8;  				case DType.String:  					return 4;  				case DType.ObjectPath:  					return 4;  				case DType.Signature:  					return 1;  				case DType.Array:  					return 4;  				case DType.Struct:  					return 8;  				case DType.Variant:  					return 1;  				case DType.DictEntry:  					return 8;  				case DType.Invalid:  				default:  					throw new Exception ("Cannot determine alignment of " + dtype);  			}
Magic Number,NDesk.DBus,Protocol,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Protocol.cs,GetAlignment,The following statement contains a magic number: switch (dtype) {  				case DType.Byte:  					return 1;  				case DType.Boolean:  					return 4;  				case DType.Int16:  				case DType.UInt16:  					return 2;  				case DType.Int32:  				case DType.UInt32:  					return 4;  				case DType.Int64:  				case DType.UInt64:  					return 8;  #if !DISABLE_SINGLE  				case DType.Single: //Not yet supported!  					return 4;  #endif  				case DType.Double:  					return 8;  				case DType.String:  					return 4;  				case DType.ObjectPath:  					return 4;  				case DType.Signature:  					return 1;  				case DType.Array:  					return 4;  				case DType.Struct:  					return 8;  				case DType.Variant:  					return 1;  				case DType.DictEntry:  					return 8;  				case DType.Invalid:  				default:  					throw new Exception ("Cannot determine alignment of " + dtype);  			}
Magic Number,NDesk.DBus,Signature,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Signature.cs,GetElementSignature,The following statement contains a magic number: if (Length != 2)  				throw new NotSupportedException ("Parsing signatures with more than one primitive value is not supported (signature was '" + this + "')");
Magic Number,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,GenMarshalWrite,The following statement contains a magic number: ilg.Emit (OpCodes.Ldc_I4' 8);
Magic Number,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,GenHookupMethod,The following statement contains a magic number: if (declMethod.IsSpecialName && (declMethod.Name.StartsWith ("add_") || declMethod.Name.StartsWith ("remove_"))) {  				string[] parts = declMethod.Name.Split (new char[]{'_'}' 2);  				string ename = parts[1];  				//Delegate dlg = (Delegate)inArgs[0];  				bool adding = parts[0] == "add";    				ilg.Emit (OpCodes.Ldstr' ename);    				ilg.Emit (OpCodes.Ldarg_1);    				ilg.Emit (OpCodes.Ldc_I4' adding ? 1 : 0);    				ilg.Emit (OpCodes.Tailcall);  				ilg.Emit (toggleSignalMethod.IsFinal ? OpCodes.Call : OpCodes.Callvirt' toggleSignalMethod);  				ilg.Emit (OpCodes.Ret);  				return;  			}
Magic Number,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,GenHookupMethod,The following statement contains a magic number: if (declMethod.IsSpecialName) {  				if (member.StartsWith ("get_"))  					member = "Get" + member.Substring (4);  				else if (member.StartsWith ("set_"))  					member = "Set" + member.Substring (4);  			}
Magic Number,NDesk.DBus,TypeImplementer,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\TypeImplementer.cs,GenHookupMethod,The following statement contains a magic number: if (declMethod.IsSpecialName) {  				if (member.StartsWith ("get_"))  					member = "Get" + member.Substring (4);  				else if (member.StartsWith ("set_"))  					member = "Set" + member.Substring (4);  			}
Magic Number,NDesk.DBus.Authentication,SaslClient,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Authentication.cs,UnixToDateTime,The following statement contains a magic number: DateTime LocalUnixEpoch = new DateTime (1970' 1' 1);
Magic Number,NDesk.DBus.Authentication,SaslClient,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Authentication.cs,DateTimeToUnix,The following statement contains a magic number: DateTime LocalUnixEpoch = new DateTime (1970' 1' 1);
Magic Number,NDesk.DBus.Authentication,SaslClient,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Authentication.cs,ToHex,The following statement contains a magic number: StringBuilder sb = new StringBuilder (input.Length * 2);
Magic Number,NDesk.DBus.Authentication,SaslClient,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Authentication.cs,FromHexChar,The following statement contains a magic number: if ((c >= 'a') && (c <= 'f'))  				return (byte) (c - 'a' + 10);
Magic Number,NDesk.DBus.Authentication,SaslClient,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Authentication.cs,FromHexChar,The following statement contains a magic number: if ((c >= 'A') && (c <= 'F'))  				return (byte) (c - 'A' + 10);
Magic Number,NDesk.DBus.Authentication,SaslClient,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Authentication.cs,FromHex,The following statement contains a magic number: while (n < result.Length) {  				result [n] = (byte) (FromHexChar (hex [i++]) << 4);  				result [n++] += FromHexChar (hex [i++]);  			}
Magic Number,NDesk.DBus.Transports,UnixSocket,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\UnixNativeTransport.cs,Accept,The following statement contains a magic number: byte[] addr = new byte[110];
Magic Number,NDesk.DBus.Transports,UnixNativeTransport,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\UnixNativeTransport.cs,OpenAbstractUnix,The following statement contains a magic number: byte[] sa = new byte[2 + 1 + p.Length];
Magic Number,NDesk.DBus.Transports,UnixNativeTransport,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\UnixNativeTransport.cs,OpenAbstractUnix,The following statement contains a magic number: sa[2] = 0;
Magic Number,NDesk.DBus.Transports,UnixNativeTransport,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\UnixNativeTransport.cs,OpenAbstractUnix,The following statement contains a magic number: for (int i = 0 ; i != p.Length ; i++)  				sa[3 + i] = p[i];
Magic Number,NDesk.DBus.Transports,UnixNativeTransport,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\UnixNativeTransport.cs,OpenUnix,The following statement contains a magic number: byte[] sa = new byte[2 + p.Length + 1];
Magic Number,NDesk.DBus.Transports,UnixNativeTransport,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\UnixNativeTransport.cs,OpenUnix,The following statement contains a magic number: for (int i = 0 ; i != p.Length ; i++)  				sa[2 + i] = p[i];
Magic Number,NDesk.DBus.Transports,UnixNativeTransport,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\UnixNativeTransport.cs,OpenUnix,The following statement contains a magic number: sa[2 + p.Length] = 0;
Missing Default,Mono.Zeroconf.Providers.AvahiDBus,RegisterService,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\Mono.Zeroconf.Providers.AvahiDBus\RegisterService.cs,OnEntryGroupStateChanged,The following switch statement is missing a default case: switch (state) {                  case EntryGroupState.Collision:                      if (!OnResponse (ErrorCode.Collision)) {                          throw new ApplicationException ();                      }                      break;                  case EntryGroupState.Failure:                      if (!OnResponse (ErrorCode.Failure)) {                          throw new ApplicationException ();                      }                      break;                  case EntryGroupState.Established:                      OnResponse (ErrorCode.Ok);                      break;              }
Missing Default,NDesk.DBus,Mapper,C:\repos\mono_Mono.Zeroconf\src\Mono.Zeroconf.Providers.AvahiDBus\NDesk.DBus\Mapper.cs,GetTypes,The following switch statement is missing a default case: switch (dir) {  					case ArgDirection.In:  						//docs say IsIn isn't reliable' and this is indeed true  						//if (parms[i].IsIn)  						if (!parms[i].IsOut)  							types.Add (parms[i].ParameterType);  						break;  					case ArgDirection.Out:  						if (parms[i].IsOut) {  							//TODO: note that IsOut is optional to the compiler' we may want to use IsByRef instead  						//eg: if (parms[i].ParameterType.IsByRef)  							types.Add (parms[i].ParameterType.GetElementType ());  						}  						break;  				}
