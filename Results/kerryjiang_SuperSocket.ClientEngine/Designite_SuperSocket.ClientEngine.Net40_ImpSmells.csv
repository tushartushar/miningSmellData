Implementation smell,Namespace,Class,File,Method,Description
Long Method,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,ProcessReceive,The method has 107 lines of code.
Complex Method,SuperSocket.ClientEngine,Extensions,C:\repos\kerryjiang_SuperSocket.ClientEngine\Common\Extensions.cs,SearchMark,Cyclomatic complexity of the method is 13
Complex Method,SuperSocket.ClientEngine,SslStreamTcpSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\SslStreamTcpSession.cs,ValidateRemoteCertificate,Cyclomatic complexity of the method is 11
Complex Method,SuperSocket.ClientEngine,TcpClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\TcpClientSession.cs,ProcessConnect,Cyclomatic complexity of the method is 8
Complex Method,SuperSocket.ClientEngine.Proxy,HttpConnectProxy,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\HttpConnectProxy.cs,ProcessReceive,Cyclomatic complexity of the method is 10
Long Parameter List,SuperSocket.ClientEngine,Extensions,C:\repos\kerryjiang_SuperSocket.ClientEngine\Common\Extensions.cs,SearchMark,The method has 5 parameters. Parameters: source' offset' length' mark' matched
Long Statement,SuperSocket.ClientEngine,ConnectAsyncExtension,C:\repos\kerryjiang_SuperSocket.ClientEngine\Common\ConnectAsyncExtension.cs,ConnectAsync,The length of the statement  "                m_ConnectMethod.Invoke(null' new object[] { SocketType.Stream' ProtocolType.Tcp' CreateSocketAsyncEventArgs(remoteEndPoint' callback' state) }); " is 144.
Long Statement,SuperSocket.ClientEngine,SslStreamTcpSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\SslStreamTcpSession.cs,OnGetSocket,The length of the statement  "                sslStream.BeginAuthenticateAsClient(HostName' securityOption.Certificates' securityOption.EnabledSslProtocols' false' OnAuthenticated' sslStream); " is 146.
Long Statement,SuperSocket.ClientEngine,SslStreamTcpSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\SslStreamTcpSession.cs,StartRead,The length of the statement  "            m_SslStream.BeginRead(buffer.Array' buffer.Offset' buffer.Count' OnDataRead' new SslAsyncState { SslStream = m_SslStream' Client = client }); " is 141.
Long Statement,SuperSocket.ClientEngine,TcpClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\TcpClientSession.cs,EnsureSocketClosed,The length of the statement  "            if (prevClient != null && prevClient != client)//originalClient is previous disconnected socket' so we needn't fire event for it " is 128.
Long Statement,SuperSocket.ClientEngine,TcpClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\TcpClientSession.cs,GetSendingQueue,The length of the statement  "                m_SendingQueue = new ConcurrentBatchQueue<ArraySegment<byte>>(Math.Max(SendingQueueSize' 1024)' (t) => t.Array == null || t.Count == 0); " is 136.
Long Statement,SuperSocket.ClientEngine.Proxy,HttpConnectProxy,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\HttpConnectProxy.cs,ProcessReceive,The length of the statement  "            if (!int.TryParse(line.Substring(pos + 1' statusPos - pos - 1)' out statusCode) || (statusCode > 299 || statusCode < 200)) " is 122.
Long Statement,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The length of the statement  "            var bufferLength = Math.Max(8' (string.IsNullOrEmpty(UserID) ? 0 : ASCIIEncoding.GetMaxByteCount(UserID.Length)) + 5 + 4 + ASCIIEncoding.GetMaxByteCount(targetDnsEndPoint.Host.Length) + 1); " is 189.
Long Statement,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The length of the statement  "            actualLength += ASCIIEncoding.GetBytes(targetDnsEndPoint.Host' 0' targetDnsEndPoint.Host.Length' handshake' actualLength); " is 122.
Long Statement,SuperSocket.ClientEngine.Proxy,Socks4Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4Connector.cs,GetSendingBuffer,The length of the statement  "            var bufferLength = Math.Max(8' (string.IsNullOrEmpty(UserID) ? 0 : ASCIIEncoding.GetMaxByteCount(UserID.Length)) + 5 + addressBytes.Length); " is 140.
Long Statement,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,ProcessConnect,The length of the statement  "            e.UserToken = new SocksContext { TargetEndPoint = (EndPoint)targetEndPoint' Socket = socket' State = SocksState.NotAuthenticated }; " is 131.
Complex Conditional,SuperSocket.ClientEngine,TcpClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\TcpClientSession.cs,IsIgnorableSocketError,The conditional expression  "errorCode == 10058 || errorCode == 10053 || errorCode == 10054 || errorCode == 995"  is complex.
Empty Catch Block,SuperSocket.ClientEngine,AsyncTcpSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\AsyncTcpSession.cs,SendInternal,The method has an empty catch block.
Empty Catch Block,SuperSocket.ClientEngine,ClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\ClientSession.cs,OnConnected,The method has an empty catch block.
Empty Catch Block,SuperSocket.ClientEngine,TcpClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\TcpClientSession.cs,ProcessConnect,The method has an empty catch block.
Empty Catch Block,SuperSocket.ClientEngine,TcpClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\TcpClientSession.cs,ProcessConnect,The method has an empty catch block.
Empty Catch Block,SuperSocket.ClientEngine,TcpClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\TcpClientSession.cs,EnsureSocketClosed,The method has an empty catch block.
Empty Catch Block,SuperSocket.ClientEngine,TcpClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\TcpClientSession.cs,EnsureSocketClosed,The method has an empty catch block.
Magic Number,SuperSocket.ClientEngine,Extensions,C:\repos\kerryjiang_SuperSocket.ClientEngine\Common\Extensions.cs,RandomOrder,The following statement contains a magic number: var n = source.Length / 2;
Magic Number,SuperSocket.ClientEngine,TcpClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\TcpClientSession.cs,IsIgnorableSocketError,The following statement contains a magic number: if (errorCode == 10058 || errorCode == 10053 || errorCode == 10054 || errorCode == 995)                  return true;
Magic Number,SuperSocket.ClientEngine,TcpClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\TcpClientSession.cs,IsIgnorableSocketError,The following statement contains a magic number: if (errorCode == 10058 || errorCode == 10053 || errorCode == 10054 || errorCode == 995)                  return true;
Magic Number,SuperSocket.ClientEngine,TcpClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\TcpClientSession.cs,IsIgnorableSocketError,The following statement contains a magic number: if (errorCode == 10058 || errorCode == 10053 || errorCode == 10054 || errorCode == 995)                  return true;
Magic Number,SuperSocket.ClientEngine,TcpClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\TcpClientSession.cs,IsIgnorableSocketError,The following statement contains a magic number: if (errorCode == 10058 || errorCode == 10053 || errorCode == 10054 || errorCode == 995)                  return true;
Magic Number,SuperSocket.ClientEngine,TcpClientSession,C:\repos\kerryjiang_SuperSocket.ClientEngine\Core\TcpClientSession.cs,GetSendingQueue,The following statement contains a magic number: lock (this)              {                  if (m_SendingQueue != null)                      return m_SendingQueue;                    //Sending queue size must be greater than 3                  m_SendingQueue = new ConcurrentBatchQueue<ArraySegment<byte>>(Math.Max(SendingQueueSize' 1024)' (t) => t.Array == null || t.Count == 0);                  return m_SendingQueue;              }
Magic Number,SuperSocket.ClientEngine.Proxy,HttpConnectProxy,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\HttpConnectProxy.cs,ProcessReceive,The following statement contains a magic number: if (pos <= 0 || line.Length <= (pos + 2))              {                  OnException("protocol error: invalid response");                  return;              }
Magic Number,SuperSocket.ClientEngine.Proxy,HttpConnectProxy,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\HttpConnectProxy.cs,ProcessReceive,The following statement contains a magic number: if (!int.TryParse(line.Substring(pos + 1' statusPos - pos - 1)' out statusCode) || (statusCode > 299 || statusCode < 200))              {                  OnException("the proxy server refused the connection");                  return;              }
Magic Number,SuperSocket.ClientEngine.Proxy,HttpConnectProxy,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\HttpConnectProxy.cs,ProcessReceive,The following statement contains a magic number: if (!int.TryParse(line.Substring(pos + 1' statusPos - pos - 1)' out statusCode) || (statusCode > 299 || statusCode < 200))              {                  OnException("the proxy server refused the connection");                  return;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The following statement contains a magic number: var bufferLength = Math.Max(8' (string.IsNullOrEmpty(UserID) ? 0 : ASCIIEncoding.GetMaxByteCount(UserID.Length)) + 5 + 4 + ASCIIEncoding.GetMaxByteCount(targetDnsEndPoint.Host.Length) + 1);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The following statement contains a magic number: var bufferLength = Math.Max(8' (string.IsNullOrEmpty(UserID) ? 0 : ASCIIEncoding.GetMaxByteCount(UserID.Length)) + 5 + 4 + ASCIIEncoding.GetMaxByteCount(targetDnsEndPoint.Host.Length) + 1);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The following statement contains a magic number: var bufferLength = Math.Max(8' (string.IsNullOrEmpty(UserID) ? 0 : ASCIIEncoding.GetMaxByteCount(UserID.Length)) + 5 + 4 + ASCIIEncoding.GetMaxByteCount(targetDnsEndPoint.Host.Length) + 1);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The following statement contains a magic number: handshake[2] = (byte)(targetDnsEndPoint.Port / 256);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The following statement contains a magic number: handshake[2] = (byte)(targetDnsEndPoint.Port / 256);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The following statement contains a magic number: handshake[3] = (byte)(targetDnsEndPoint.Port % 256);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The following statement contains a magic number: handshake[3] = (byte)(targetDnsEndPoint.Port % 256);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The following statement contains a magic number: handshake[4] = 0x00;
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The following statement contains a magic number: handshake[5] = 0x00;
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The following statement contains a magic number: handshake[6] = 0x00;
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The following statement contains a magic number: handshake[7] = (byte)m_Random.Next(1' 255);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The following statement contains a magic number: handshake[7] = (byte)m_Random.Next(1' 255);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4aConnector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4aConnector.cs,GetSendingBuffer,The following statement contains a magic number: actualLength = 8;
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4Connector.cs,GetSendingBuffer,The following statement contains a magic number: var bufferLength = Math.Max(8' (string.IsNullOrEmpty(UserID) ? 0 : ASCIIEncoding.GetMaxByteCount(UserID.Length)) + 5 + addressBytes.Length);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4Connector.cs,GetSendingBuffer,The following statement contains a magic number: var bufferLength = Math.Max(8' (string.IsNullOrEmpty(UserID) ? 0 : ASCIIEncoding.GetMaxByteCount(UserID.Length)) + 5 + addressBytes.Length);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4Connector.cs,GetSendingBuffer,The following statement contains a magic number: handshake[2] = (byte)(targetIPEndPoint.Port / 256);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4Connector.cs,GetSendingBuffer,The following statement contains a magic number: handshake[2] = (byte)(targetIPEndPoint.Port / 256);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4Connector.cs,GetSendingBuffer,The following statement contains a magic number: handshake[3] = (byte)(targetIPEndPoint.Port % 256);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4Connector.cs,GetSendingBuffer,The following statement contains a magic number: handshake[3] = (byte)(targetIPEndPoint.Port % 256);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4Connector.cs,GetSendingBuffer,The following statement contains a magic number: Buffer.BlockCopy(addressBytes' 0' handshake' 4' addressBytes.Length);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4Connector.cs,GetSendingBuffer,The following statement contains a magic number: actualLength = 4 + addressBytes.Length;
Magic Number,SuperSocket.ClientEngine.Proxy,Socks4Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks4Connector.cs,ProcessSend,The following statement contains a magic number: e.SetBuffer(0' 8);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,Socks5Connector,The following statement contains a magic number: var buffer = new byte[3 + ASCIIEncoding.GetMaxByteCount(username.Length) + (string.IsNullOrEmpty(password) ? 0 : ASCIIEncoding.GetMaxByteCount(password.Length))];
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,Socks5Connector,The following statement contains a magic number: var len = ASCIIEncoding.GetBytes(username' 0' username.Length' buffer' 2);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,Socks5Connector,The following statement contains a magic number: if (len > 255)                  throw new ArgumentException("the length of username cannot exceed 255"' "username");
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,Socks5Connector,The following statement contains a magic number: actualLength = len + 2;
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,Socks5Connector,The following statement contains a magic number: if (!string.IsNullOrEmpty(password))              {                  len = ASCIIEncoding.GetBytes(password' 0' password.Length' buffer' actualLength + 1);                    if (len > 255)                      throw new ArgumentException("the length of password cannot exceed 255"' "password");                    buffer[actualLength] = (byte)len;                  actualLength += len + 1;              }              else              {                  buffer[actualLength] = 0x00;                  actualLength++;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,ProcessSend,The following statement contains a magic number: if (context.State == SocksState.NotAuthenticated)              {                  e.SetBuffer(0' 2);                  StartReceive(context.Socket' e);              }              else if (context.State == SocksState.Authenticating)              {                  e.SetBuffer(0' 2);                  StartReceive(context.Socket' e);              }              else              {                  e.SetBuffer(0' e.Buffer.Length);                  StartReceive(context.Socket' e);              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,ProcessSend,The following statement contains a magic number: if (context.State == SocksState.NotAuthenticated)              {                  e.SetBuffer(0' 2);                  StartReceive(context.Socket' e);              }              else if (context.State == SocksState.Authenticating)              {                  e.SetBuffer(0' 2);                  StartReceive(context.Socket' e);              }              else              {                  e.SetBuffer(0' e.Buffer.Length);                  StartReceive(context.Socket' e);              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,ProcessAuthenticationResponse,The following statement contains a magic number: if (total < 2)              {                  e.SetBuffer(total' 2 - total);                  StartReceive(socket' e);                  return false;              }              else if (total > 2)              {                  OnException("received length exceeded");                  return false;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,ProcessAuthenticationResponse,The following statement contains a magic number: if (total < 2)              {                  e.SetBuffer(total' 2 - total);                  StartReceive(socket' e);                  return false;              }              else if (total > 2)              {                  OnException("received length exceeded");                  return false;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,ProcessAuthenticationResponse,The following statement contains a magic number: if (total < 2)              {                  e.SetBuffer(total' 2 - total);                  StartReceive(socket' e);                  return false;              }              else if (total > 2)              {                  OnException("received length exceeded");                  return false;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,ProcessReceive,The following statement contains a magic number: if (context.State == SocksState.NotAuthenticated)              {                  if (!ProcessAuthenticationResponse(context.Socket' e))                      return;                    var method = e.Buffer[1];                    if (method == 0x00)                  {                      context.State = SocksState.Authenticated;                      SendHandshake(e);                      return;                  }                  else if (method == 0x02)                  {                      context.State = SocksState.Authenticating;                      AutheticateWithUserNamePassword(e);                      return;                  }                  else if (method == 0xff)                  {                      OnException("no acceptable methods were offered");                      return;                  }                  else                  {                      OnException("protocol error");                      return;                  }              }              else if (context.State == SocksState.Authenticating)              {                  if (!ProcessAuthenticationResponse(context.Socket' e))                      return;                    var method = e.Buffer[1];                    if (method == 0x00)                  {                      context.State = SocksState.Authenticated;                      SendHandshake(e);                      return;                  }                  else                  {                      OnException("authentication failure");                      return;                  }              }              else              {                  byte[] data = new byte[e.BytesTransferred];                  Buffer.BlockCopy(e.Buffer' e.Offset' data' 0' e.BytesTransferred);                    context.ReceivedData.AddRange(data);                    if (context.ExpectedLength > context.ReceivedData.Count)                  {                      StartReceive(context.Socket'e);                      return;                  }                  else                  {                      if (context.State != SocksState.FoundLength)                      {                          var addressType = context.ReceivedData[3];                          int expectedLength;                            if (addressType == 0x01)                          {                              expectedLength = 10;                          }                          else if (addressType == 0x03)                          {                              expectedLength = 4 + 1 + 2 + (int)context.ReceivedData[4];                          }                          else                          {                              expectedLength = 22;                          }                            if (context.ReceivedData.Count < expectedLength)                          {                              context.ExpectedLength = expectedLength;                              StartReceive(context.Socket' e);                              return;                          }                          else if (context.ReceivedData.Count > expectedLength)                          {                              OnException("response length exceeded");                              return;                          }                          else                          {                              OnGetFullResponse(context);                              return;                          }                      }                      else                      {                          if (context.ReceivedData.Count > context.ExpectedLength)                          {                              OnException("response length exceeded");                              return;                          }                            OnGetFullResponse(context);                          return;                      }                  }              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,ProcessReceive,The following statement contains a magic number: if (context.State == SocksState.NotAuthenticated)              {                  if (!ProcessAuthenticationResponse(context.Socket' e))                      return;                    var method = e.Buffer[1];                    if (method == 0x00)                  {                      context.State = SocksState.Authenticated;                      SendHandshake(e);                      return;                  }                  else if (method == 0x02)                  {                      context.State = SocksState.Authenticating;                      AutheticateWithUserNamePassword(e);                      return;                  }                  else if (method == 0xff)                  {                      OnException("no acceptable methods were offered");                      return;                  }                  else                  {                      OnException("protocol error");                      return;                  }              }              else if (context.State == SocksState.Authenticating)              {                  if (!ProcessAuthenticationResponse(context.Socket' e))                      return;                    var method = e.Buffer[1];                    if (method == 0x00)                  {                      context.State = SocksState.Authenticated;                      SendHandshake(e);                      return;                  }                  else                  {                      OnException("authentication failure");                      return;                  }              }              else              {                  byte[] data = new byte[e.BytesTransferred];                  Buffer.BlockCopy(e.Buffer' e.Offset' data' 0' e.BytesTransferred);                    context.ReceivedData.AddRange(data);                    if (context.ExpectedLength > context.ReceivedData.Count)                  {                      StartReceive(context.Socket'e);                      return;                  }                  else                  {                      if (context.State != SocksState.FoundLength)                      {                          var addressType = context.ReceivedData[3];                          int expectedLength;                            if (addressType == 0x01)                          {                              expectedLength = 10;                          }                          else if (addressType == 0x03)                          {                              expectedLength = 4 + 1 + 2 + (int)context.ReceivedData[4];                          }                          else                          {                              expectedLength = 22;                          }                            if (context.ReceivedData.Count < expectedLength)                          {                              context.ExpectedLength = expectedLength;                              StartReceive(context.Socket' e);                              return;                          }                          else if (context.ReceivedData.Count > expectedLength)                          {                              OnException("response length exceeded");                              return;                          }                          else                          {                              OnGetFullResponse(context);                              return;                          }                      }                      else                      {                          if (context.ReceivedData.Count > context.ExpectedLength)                          {                              OnException("response length exceeded");                              return;                          }                            OnGetFullResponse(context);                          return;                      }                  }              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,ProcessReceive,The following statement contains a magic number: if (context.State == SocksState.NotAuthenticated)              {                  if (!ProcessAuthenticationResponse(context.Socket' e))                      return;                    var method = e.Buffer[1];                    if (method == 0x00)                  {                      context.State = SocksState.Authenticated;                      SendHandshake(e);                      return;                  }                  else if (method == 0x02)                  {                      context.State = SocksState.Authenticating;                      AutheticateWithUserNamePassword(e);                      return;                  }                  else if (method == 0xff)                  {                      OnException("no acceptable methods were offered");                      return;                  }                  else                  {                      OnException("protocol error");                      return;                  }              }              else if (context.State == SocksState.Authenticating)              {                  if (!ProcessAuthenticationResponse(context.Socket' e))                      return;                    var method = e.Buffer[1];                    if (method == 0x00)                  {                      context.State = SocksState.Authenticated;                      SendHandshake(e);                      return;                  }                  else                  {                      OnException("authentication failure");                      return;                  }              }              else              {                  byte[] data = new byte[e.BytesTransferred];                  Buffer.BlockCopy(e.Buffer' e.Offset' data' 0' e.BytesTransferred);                    context.ReceivedData.AddRange(data);                    if (context.ExpectedLength > context.ReceivedData.Count)                  {                      StartReceive(context.Socket'e);                      return;                  }                  else                  {                      if (context.State != SocksState.FoundLength)                      {                          var addressType = context.ReceivedData[3];                          int expectedLength;                            if (addressType == 0x01)                          {                              expectedLength = 10;                          }                          else if (addressType == 0x03)                          {                              expectedLength = 4 + 1 + 2 + (int)context.ReceivedData[4];                          }                          else                          {                              expectedLength = 22;                          }                            if (context.ReceivedData.Count < expectedLength)                          {                              context.ExpectedLength = expectedLength;                              StartReceive(context.Socket' e);                              return;                          }                          else if (context.ReceivedData.Count > expectedLength)                          {                              OnException("response length exceeded");                              return;                          }                          else                          {                              OnGetFullResponse(context);                              return;                          }                      }                      else                      {                          if (context.ReceivedData.Count > context.ExpectedLength)                          {                              OnException("response length exceeded");                              return;                          }                            OnGetFullResponse(context);                          return;                      }                  }              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,ProcessReceive,The following statement contains a magic number: if (context.State == SocksState.NotAuthenticated)              {                  if (!ProcessAuthenticationResponse(context.Socket' e))                      return;                    var method = e.Buffer[1];                    if (method == 0x00)                  {                      context.State = SocksState.Authenticated;                      SendHandshake(e);                      return;                  }                  else if (method == 0x02)                  {                      context.State = SocksState.Authenticating;                      AutheticateWithUserNamePassword(e);                      return;                  }                  else if (method == 0xff)                  {                      OnException("no acceptable methods were offered");                      return;                  }                  else                  {                      OnException("protocol error");                      return;                  }              }              else if (context.State == SocksState.Authenticating)              {                  if (!ProcessAuthenticationResponse(context.Socket' e))                      return;                    var method = e.Buffer[1];                    if (method == 0x00)                  {                      context.State = SocksState.Authenticated;                      SendHandshake(e);                      return;                  }                  else                  {                      OnException("authentication failure");                      return;                  }              }              else              {                  byte[] data = new byte[e.BytesTransferred];                  Buffer.BlockCopy(e.Buffer' e.Offset' data' 0' e.BytesTransferred);                    context.ReceivedData.AddRange(data);                    if (context.ExpectedLength > context.ReceivedData.Count)                  {                      StartReceive(context.Socket'e);                      return;                  }                  else                  {                      if (context.State != SocksState.FoundLength)                      {                          var addressType = context.ReceivedData[3];                          int expectedLength;                            if (addressType == 0x01)                          {                              expectedLength = 10;                          }                          else if (addressType == 0x03)                          {                              expectedLength = 4 + 1 + 2 + (int)context.ReceivedData[4];                          }                          else                          {                              expectedLength = 22;                          }                            if (context.ReceivedData.Count < expectedLength)                          {                              context.ExpectedLength = expectedLength;                              StartReceive(context.Socket' e);                              return;                          }                          else if (context.ReceivedData.Count > expectedLength)                          {                              OnException("response length exceeded");                              return;                          }                          else                          {                              OnGetFullResponse(context);                              return;                          }                      }                      else                      {                          if (context.ReceivedData.Count > context.ExpectedLength)                          {                              OnException("response length exceeded");                              return;                          }                            OnGetFullResponse(context);                          return;                      }                  }              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,ProcessReceive,The following statement contains a magic number: if (context.State == SocksState.NotAuthenticated)              {                  if (!ProcessAuthenticationResponse(context.Socket' e))                      return;                    var method = e.Buffer[1];                    if (method == 0x00)                  {                      context.State = SocksState.Authenticated;                      SendHandshake(e);                      return;                  }                  else if (method == 0x02)                  {                      context.State = SocksState.Authenticating;                      AutheticateWithUserNamePassword(e);                      return;                  }                  else if (method == 0xff)                  {                      OnException("no acceptable methods were offered");                      return;                  }                  else                  {                      OnException("protocol error");                      return;                  }              }              else if (context.State == SocksState.Authenticating)              {                  if (!ProcessAuthenticationResponse(context.Socket' e))                      return;                    var method = e.Buffer[1];                    if (method == 0x00)                  {                      context.State = SocksState.Authenticated;                      SendHandshake(e);                      return;                  }                  else                  {                      OnException("authentication failure");                      return;                  }              }              else              {                  byte[] data = new byte[e.BytesTransferred];                  Buffer.BlockCopy(e.Buffer' e.Offset' data' 0' e.BytesTransferred);                    context.ReceivedData.AddRange(data);                    if (context.ExpectedLength > context.ReceivedData.Count)                  {                      StartReceive(context.Socket'e);                      return;                  }                  else                  {                      if (context.State != SocksState.FoundLength)                      {                          var addressType = context.ReceivedData[3];                          int expectedLength;                            if (addressType == 0x01)                          {                              expectedLength = 10;                          }                          else if (addressType == 0x03)                          {                              expectedLength = 4 + 1 + 2 + (int)context.ReceivedData[4];                          }                          else                          {                              expectedLength = 22;                          }                            if (context.ReceivedData.Count < expectedLength)                          {                              context.ExpectedLength = expectedLength;                              StartReceive(context.Socket' e);                              return;                          }                          else if (context.ReceivedData.Count > expectedLength)                          {                              OnException("response length exceeded");                              return;                          }                          else                          {                              OnGetFullResponse(context);                              return;                          }                      }                      else                      {                          if (context.ReceivedData.Count > context.ExpectedLength)                          {                              OnException("response length exceeded");                              return;                          }                            OnGetFullResponse(context);                          return;                      }                  }              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,ProcessReceive,The following statement contains a magic number: if (context.State == SocksState.NotAuthenticated)              {                  if (!ProcessAuthenticationResponse(context.Socket' e))                      return;                    var method = e.Buffer[1];                    if (method == 0x00)                  {                      context.State = SocksState.Authenticated;                      SendHandshake(e);                      return;                  }                  else if (method == 0x02)                  {                      context.State = SocksState.Authenticating;                      AutheticateWithUserNamePassword(e);                      return;                  }                  else if (method == 0xff)                  {                      OnException("no acceptable methods were offered");                      return;                  }                  else                  {                      OnException("protocol error");                      return;                  }              }              else if (context.State == SocksState.Authenticating)              {                  if (!ProcessAuthenticationResponse(context.Socket' e))                      return;                    var method = e.Buffer[1];                    if (method == 0x00)                  {                      context.State = SocksState.Authenticated;                      SendHandshake(e);                      return;                  }                  else                  {                      OnException("authentication failure");                      return;                  }              }              else              {                  byte[] data = new byte[e.BytesTransferred];                  Buffer.BlockCopy(e.Buffer' e.Offset' data' 0' e.BytesTransferred);                    context.ReceivedData.AddRange(data);                    if (context.ExpectedLength > context.ReceivedData.Count)                  {                      StartReceive(context.Socket'e);                      return;                  }                  else                  {                      if (context.State != SocksState.FoundLength)                      {                          var addressType = context.ReceivedData[3];                          int expectedLength;                            if (addressType == 0x01)                          {                              expectedLength = 10;                          }                          else if (addressType == 0x03)                          {                              expectedLength = 4 + 1 + 2 + (int)context.ReceivedData[4];                          }                          else                          {                              expectedLength = 22;                          }                            if (context.ReceivedData.Count < expectedLength)                          {                              context.ExpectedLength = expectedLength;                              StartReceive(context.Socket' e);                              return;                          }                          else if (context.ReceivedData.Count > expectedLength)                          {                              OnException("response length exceeded");                              return;                          }                          else                          {                              OnGetFullResponse(context);                              return;                          }                      }                      else                      {                          if (context.ReceivedData.Count > context.ExpectedLength)                          {                              OnException("response length exceeded");                              return;                          }                            OnGetFullResponse(context);                          return;                      }                  }              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: if (targetEndPoint is IPEndPoint)              {                  var endPoint = targetEndPoint as IPEndPoint;                  port = endPoint.Port;                    if (endPoint.AddressFamily == AddressFamily.InterNetwork)                  {                      buffer = new byte[10];                      buffer[3] = 0x01;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 4);                  }                  else if (endPoint.AddressFamily == AddressFamily.InterNetworkV6)                  {                      buffer = new byte[22];                      buffer[3] = 0x04;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 16);                  }                  else                  {                      OnException("unknown address family");                      return;                  }                    actualLength = buffer.Length;              }              else              {                  var endPoint = targetEndPoint as DnsEndPoint;                    port = endPoint.Port;                    var maxLen = 7 + ASCIIEncoding.GetMaxByteCount(endPoint.Host.Length);                  buffer = new byte[maxLen];                    buffer[3] = 0x03;                    actualLength = 5;                  actualLength += ASCIIEncoding.GetBytes(endPoint.Host' 0' endPoint.Host.Length' buffer' actualLength);                  actualLength += 2;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: if (targetEndPoint is IPEndPoint)              {                  var endPoint = targetEndPoint as IPEndPoint;                  port = endPoint.Port;                    if (endPoint.AddressFamily == AddressFamily.InterNetwork)                  {                      buffer = new byte[10];                      buffer[3] = 0x01;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 4);                  }                  else if (endPoint.AddressFamily == AddressFamily.InterNetworkV6)                  {                      buffer = new byte[22];                      buffer[3] = 0x04;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 16);                  }                  else                  {                      OnException("unknown address family");                      return;                  }                    actualLength = buffer.Length;              }              else              {                  var endPoint = targetEndPoint as DnsEndPoint;                    port = endPoint.Port;                    var maxLen = 7 + ASCIIEncoding.GetMaxByteCount(endPoint.Host.Length);                  buffer = new byte[maxLen];                    buffer[3] = 0x03;                    actualLength = 5;                  actualLength += ASCIIEncoding.GetBytes(endPoint.Host' 0' endPoint.Host.Length' buffer' actualLength);                  actualLength += 2;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: if (targetEndPoint is IPEndPoint)              {                  var endPoint = targetEndPoint as IPEndPoint;                  port = endPoint.Port;                    if (endPoint.AddressFamily == AddressFamily.InterNetwork)                  {                      buffer = new byte[10];                      buffer[3] = 0x01;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 4);                  }                  else if (endPoint.AddressFamily == AddressFamily.InterNetworkV6)                  {                      buffer = new byte[22];                      buffer[3] = 0x04;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 16);                  }                  else                  {                      OnException("unknown address family");                      return;                  }                    actualLength = buffer.Length;              }              else              {                  var endPoint = targetEndPoint as DnsEndPoint;                    port = endPoint.Port;                    var maxLen = 7 + ASCIIEncoding.GetMaxByteCount(endPoint.Host.Length);                  buffer = new byte[maxLen];                    buffer[3] = 0x03;                    actualLength = 5;                  actualLength += ASCIIEncoding.GetBytes(endPoint.Host' 0' endPoint.Host.Length' buffer' actualLength);                  actualLength += 2;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: if (targetEndPoint is IPEndPoint)              {                  var endPoint = targetEndPoint as IPEndPoint;                  port = endPoint.Port;                    if (endPoint.AddressFamily == AddressFamily.InterNetwork)                  {                      buffer = new byte[10];                      buffer[3] = 0x01;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 4);                  }                  else if (endPoint.AddressFamily == AddressFamily.InterNetworkV6)                  {                      buffer = new byte[22];                      buffer[3] = 0x04;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 16);                  }                  else                  {                      OnException("unknown address family");                      return;                  }                    actualLength = buffer.Length;              }              else              {                  var endPoint = targetEndPoint as DnsEndPoint;                    port = endPoint.Port;                    var maxLen = 7 + ASCIIEncoding.GetMaxByteCount(endPoint.Host.Length);                  buffer = new byte[maxLen];                    buffer[3] = 0x03;                    actualLength = 5;                  actualLength += ASCIIEncoding.GetBytes(endPoint.Host' 0' endPoint.Host.Length' buffer' actualLength);                  actualLength += 2;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: if (targetEndPoint is IPEndPoint)              {                  var endPoint = targetEndPoint as IPEndPoint;                  port = endPoint.Port;                    if (endPoint.AddressFamily == AddressFamily.InterNetwork)                  {                      buffer = new byte[10];                      buffer[3] = 0x01;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 4);                  }                  else if (endPoint.AddressFamily == AddressFamily.InterNetworkV6)                  {                      buffer = new byte[22];                      buffer[3] = 0x04;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 16);                  }                  else                  {                      OnException("unknown address family");                      return;                  }                    actualLength = buffer.Length;              }              else              {                  var endPoint = targetEndPoint as DnsEndPoint;                    port = endPoint.Port;                    var maxLen = 7 + ASCIIEncoding.GetMaxByteCount(endPoint.Host.Length);                  buffer = new byte[maxLen];                    buffer[3] = 0x03;                    actualLength = 5;                  actualLength += ASCIIEncoding.GetBytes(endPoint.Host' 0' endPoint.Host.Length' buffer' actualLength);                  actualLength += 2;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: if (targetEndPoint is IPEndPoint)              {                  var endPoint = targetEndPoint as IPEndPoint;                  port = endPoint.Port;                    if (endPoint.AddressFamily == AddressFamily.InterNetwork)                  {                      buffer = new byte[10];                      buffer[3] = 0x01;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 4);                  }                  else if (endPoint.AddressFamily == AddressFamily.InterNetworkV6)                  {                      buffer = new byte[22];                      buffer[3] = 0x04;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 16);                  }                  else                  {                      OnException("unknown address family");                      return;                  }                    actualLength = buffer.Length;              }              else              {                  var endPoint = targetEndPoint as DnsEndPoint;                    port = endPoint.Port;                    var maxLen = 7 + ASCIIEncoding.GetMaxByteCount(endPoint.Host.Length);                  buffer = new byte[maxLen];                    buffer[3] = 0x03;                    actualLength = 5;                  actualLength += ASCIIEncoding.GetBytes(endPoint.Host' 0' endPoint.Host.Length' buffer' actualLength);                  actualLength += 2;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: if (targetEndPoint is IPEndPoint)              {                  var endPoint = targetEndPoint as IPEndPoint;                  port = endPoint.Port;                    if (endPoint.AddressFamily == AddressFamily.InterNetwork)                  {                      buffer = new byte[10];                      buffer[3] = 0x01;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 4);                  }                  else if (endPoint.AddressFamily == AddressFamily.InterNetworkV6)                  {                      buffer = new byte[22];                      buffer[3] = 0x04;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 16);                  }                  else                  {                      OnException("unknown address family");                      return;                  }                    actualLength = buffer.Length;              }              else              {                  var endPoint = targetEndPoint as DnsEndPoint;                    port = endPoint.Port;                    var maxLen = 7 + ASCIIEncoding.GetMaxByteCount(endPoint.Host.Length);                  buffer = new byte[maxLen];                    buffer[3] = 0x03;                    actualLength = 5;                  actualLength += ASCIIEncoding.GetBytes(endPoint.Host' 0' endPoint.Host.Length' buffer' actualLength);                  actualLength += 2;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: if (targetEndPoint is IPEndPoint)              {                  var endPoint = targetEndPoint as IPEndPoint;                  port = endPoint.Port;                    if (endPoint.AddressFamily == AddressFamily.InterNetwork)                  {                      buffer = new byte[10];                      buffer[3] = 0x01;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 4);                  }                  else if (endPoint.AddressFamily == AddressFamily.InterNetworkV6)                  {                      buffer = new byte[22];                      buffer[3] = 0x04;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 16);                  }                  else                  {                      OnException("unknown address family");                      return;                  }                    actualLength = buffer.Length;              }              else              {                  var endPoint = targetEndPoint as DnsEndPoint;                    port = endPoint.Port;                    var maxLen = 7 + ASCIIEncoding.GetMaxByteCount(endPoint.Host.Length);                  buffer = new byte[maxLen];                    buffer[3] = 0x03;                    actualLength = 5;                  actualLength += ASCIIEncoding.GetBytes(endPoint.Host' 0' endPoint.Host.Length' buffer' actualLength);                  actualLength += 2;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: if (targetEndPoint is IPEndPoint)              {                  var endPoint = targetEndPoint as IPEndPoint;                  port = endPoint.Port;                    if (endPoint.AddressFamily == AddressFamily.InterNetwork)                  {                      buffer = new byte[10];                      buffer[3] = 0x01;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 4);                  }                  else if (endPoint.AddressFamily == AddressFamily.InterNetworkV6)                  {                      buffer = new byte[22];                      buffer[3] = 0x04;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 16);                  }                  else                  {                      OnException("unknown address family");                      return;                  }                    actualLength = buffer.Length;              }              else              {                  var endPoint = targetEndPoint as DnsEndPoint;                    port = endPoint.Port;                    var maxLen = 7 + ASCIIEncoding.GetMaxByteCount(endPoint.Host.Length);                  buffer = new byte[maxLen];                    buffer[3] = 0x03;                    actualLength = 5;                  actualLength += ASCIIEncoding.GetBytes(endPoint.Host' 0' endPoint.Host.Length' buffer' actualLength);                  actualLength += 2;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: if (targetEndPoint is IPEndPoint)              {                  var endPoint = targetEndPoint as IPEndPoint;                  port = endPoint.Port;                    if (endPoint.AddressFamily == AddressFamily.InterNetwork)                  {                      buffer = new byte[10];                      buffer[3] = 0x01;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 4);                  }                  else if (endPoint.AddressFamily == AddressFamily.InterNetworkV6)                  {                      buffer = new byte[22];                      buffer[3] = 0x04;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 16);                  }                  else                  {                      OnException("unknown address family");                      return;                  }                    actualLength = buffer.Length;              }              else              {                  var endPoint = targetEndPoint as DnsEndPoint;                    port = endPoint.Port;                    var maxLen = 7 + ASCIIEncoding.GetMaxByteCount(endPoint.Host.Length);                  buffer = new byte[maxLen];                    buffer[3] = 0x03;                    actualLength = 5;                  actualLength += ASCIIEncoding.GetBytes(endPoint.Host' 0' endPoint.Host.Length' buffer' actualLength);                  actualLength += 2;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: if (targetEndPoint is IPEndPoint)              {                  var endPoint = targetEndPoint as IPEndPoint;                  port = endPoint.Port;                    if (endPoint.AddressFamily == AddressFamily.InterNetwork)                  {                      buffer = new byte[10];                      buffer[3] = 0x01;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 4);                  }                  else if (endPoint.AddressFamily == AddressFamily.InterNetworkV6)                  {                      buffer = new byte[22];                      buffer[3] = 0x04;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 16);                  }                  else                  {                      OnException("unknown address family");                      return;                  }                    actualLength = buffer.Length;              }              else              {                  var endPoint = targetEndPoint as DnsEndPoint;                    port = endPoint.Port;                    var maxLen = 7 + ASCIIEncoding.GetMaxByteCount(endPoint.Host.Length);                  buffer = new byte[maxLen];                    buffer[3] = 0x03;                    actualLength = 5;                  actualLength += ASCIIEncoding.GetBytes(endPoint.Host' 0' endPoint.Host.Length' buffer' actualLength);                  actualLength += 2;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: if (targetEndPoint is IPEndPoint)              {                  var endPoint = targetEndPoint as IPEndPoint;                  port = endPoint.Port;                    if (endPoint.AddressFamily == AddressFamily.InterNetwork)                  {                      buffer = new byte[10];                      buffer[3] = 0x01;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 4);                  }                  else if (endPoint.AddressFamily == AddressFamily.InterNetworkV6)                  {                      buffer = new byte[22];                      buffer[3] = 0x04;                        Buffer.BlockCopy(endPoint.Address.GetAddressBytes()' 0' buffer' 4' 16);                  }                  else                  {                      OnException("unknown address family");                      return;                  }                    actualLength = buffer.Length;              }              else              {                  var endPoint = targetEndPoint as DnsEndPoint;                    port = endPoint.Port;                    var maxLen = 7 + ASCIIEncoding.GetMaxByteCount(endPoint.Host.Length);                  buffer = new byte[maxLen];                    buffer[3] = 0x03;                    actualLength = 5;                  actualLength += ASCIIEncoding.GetBytes(endPoint.Host' 0' endPoint.Host.Length' buffer' actualLength);                  actualLength += 2;              }
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: buffer[2] = 0x00;
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: buffer[actualLength - 2] = (byte)(port / 256);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: buffer[actualLength - 2] = (byte)(port / 256);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: buffer[actualLength - 1] = (byte)(port % 256);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: context.ReceivedData = new List<byte>(actualLength + 5);
Magic Number,SuperSocket.ClientEngine.Proxy,Socks5Connector,C:\repos\kerryjiang_SuperSocket.ClientEngine\Proxy\Socks5Connector.cs,SendHandshake,The following statement contains a magic number: context.ExpectedLength = 5;
