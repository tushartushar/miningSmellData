Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,dnGREP.Engines.Word,GrepEngineWord,C:\repos\dnGrep_dnGrep\dnGREP.WordEngine\GrepEngineWord.cs,Search,The method has 5 parameters. Parameters: file' searchPattern' searchType' searchOptions' encoding
Long Parameter List,dnGREP.Engines.Word,GrepEngineWord,C:\repos\dnGrep_dnGrep\dnGREP.WordEngine\GrepEngineWord.cs,Search,The method has 6 parameters. Parameters: input' fileName' searchPattern' searchType' searchOptions' encoding
Long Parameter List,dnGREP.Engines.Word,GrepEngineWord,C:\repos\dnGrep_dnGrep\dnGREP.WordEngine\GrepEngineWord.cs,Replace,The method has 7 parameters. Parameters: sourceFile' destinationFile' searchPattern' replacePattern' searchType' searchOptions' encoding
Magic Number,dnGREP.Engines.Word,GrepEngineWord,C:\repos\dnGrep_dnGrep\dnGREP.WordEngine\GrepEngineWord.cs,openDocument,The following statement contains a magic number: if (isAvailable && wordDocuments != null && wordDocuments != null)              {                  return wordDocuments.GetType().InvokeMember("Open"' BindingFlags.InvokeMethod'                      null' wordDocuments' new object[3] { path' MISSING_VALUE' bReadOnly });              }
Missing Default,dnGREP.Engines.Word,GrepEngineWord,C:\repos\dnGrep_dnGrep\dnGREP.WordEngine\GrepEngineWord.cs,Search,The following switch statement is missing a default case: switch (searchType)              {                  case SearchType.PlainText:                  case SearchType.XPath:                      if ((searchOptions & GrepSearchOption.CaseSensitive) == GrepSearchOption.CaseSensitive)                      {                          searchMethodMultiline = doTextSearchCaseSensitive;                      }                      else                      {                          searchMethodMultiline = doTextSearchCaseInsensitive;                      }                      break;                  case SearchType.Regex:                      searchMethodMultiline = doRegexSearch;                      break;                  case SearchType.Soundex:                      searchMethodMultiline = doFuzzySearchMultiline;                      break;              }
