Implementation smell,Namespace,Class,File,Method,Description
Long Method,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetFileListEx,The method has 123 lines of code.
Long Method,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetLinesEx,The method has 127 lines of code.
Long Method,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The method has 105 lines of code.
Complex Method,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetFileListEx,Cyclomatic complexity of the method is 32
Complex Method,Ude.Core,Big5Prober,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\Big5Prober.cs,HandleData,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,EUCJPProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\EUCJPProber.cs,HandleData,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,EUCKRProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\EUCKRProber.cs,HandleData,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,EUCTWProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\EUCTWProber.cs,HandleData,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,GB18030Prober,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\GB18030Prober.cs,HandleData,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,SingleByteCharSetProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCharsetProber.cs,HandleData,Cyclomatic complexity of the method is 9
Complex Method,Ude.Core,SJISProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SJISProber.cs,HandleData,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,Cyclomatic complexity of the method is 15
Complex Method,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,DataEnd,Cyclomatic complexity of the method is 8
Complex Method,Ude.Core,UTF8Prober,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UTF8Prober.cs,HandleData,Cyclomatic complexity of the method is 8
Long Parameter List,dnGREP.Common,FileFilter,C:\repos\dnGrep_dnGrep\dnGREP.Common\FileFilter.cs,FileFilter,The method has 13 parameters. Parameters: path' namePatternToInclude' namePatternToExclude' isRegex' includeSubfolders' includeHidden' includeBinary' includeArchive' sizeFrom' sizeTo' dateFilter' startTime' endTime
Long Parameter List,dnGREP.Common,GrepSearchResult,C:\repos\dnGrep_dnGrep\dnGREP.Common\GrepSearchResult.cs,GrepSearchResult,The method has 5 parameters. Parameters: file' pattern' matches' encoding' success
Long Parameter List,dnGREP.Common,OpenFileArgs,C:\repos\dnGrep_dnGrep\dnGREP.Common\OpenFileArgs.cs,OpenFileArgs,The method has 6 parameters. Parameters: searchResult' pattern' line' useCustomEditor' customEditor' customEditorArgs
Long Parameter List,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetFileList,The method has 13 parameters. Parameters: path' namePatternToInclude' namePatternToExclude' isRegex' includeSubfolders' includeHidden' includeBinary' includeArchive' sizeFrom' sizeTo' dateFilter' startTime' endTime
Long Parameter List,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetLines,The method has 5 parameters. Parameters: body' index' length' matches' lineNumbers
Long Parameter List,Ude.Core,BitPackage,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\BitPackage.cs,BitPackage,The method has 5 parameters. Parameters: indexShift' shiftMask' bitShift' unitMask' data
Long Parameter List,Ude.Core,BitPackage,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\BitPackage.cs,Pack4bits,The method has 8 parameters. Parameters: a' b' c' d' e' f' g' h
Long Parameter List,Ude.Core,SequenceModel,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SequenceModel.cs,SequenceModel,The method has 5 parameters. Parameters: charToOrderMap' precedenceMatrix' typicalPositiveRatio' keepEnglishLetter' charsetName
Long Parameter List,Ude.Core,SMModel,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SMModel.cs,SMModel,The method has 5 parameters. Parameters: classTable' classFactor' stateTable' charLenTable' name
Long Identifier,dnGREP.Common,Key,C:\repos\dnGrep_dnGrep\dnGREP.Common\GrepApplicationSettings.cs,,The length of the parameter AllowSearchingForFileNamePattern is 32.
Long Identifier,Ude.Core,GB18030DistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,,The length of the parameter GB2312_TYPICAL_DISTRIBUTION_RATIO is 33.
Long Identifier,Ude.Core,EUCTWDistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,,The length of the parameter EUCTW_TYPICAL_DISTRIBUTION_RATIO is 32.
Long Identifier,Ude.Core,EUCKRDistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,,The length of the parameter EUCKR_TYPICAL_DISTRIBUTION_RATIO is 32.
Long Identifier,Ude.Core,BIG5DistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,,The length of the parameter BIG5_TYPICAL_DISTRIBUTION_RATIO is 31.
Long Identifier,Ude.Core,SJISDistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,,The length of the parameter SJIS_TYPICAL_DISTRIBUTION_RATIO is 31.
Long Statement,dnGREP.Common,PublishedVersionExtractor,C:\repos\dnGrep_dnGrep\dnGREP.Common\PublishedVersionExtractor.cs,QueryLatestVersion,The length of the statement  "                client.DefaultRequestHeaders.TryAddWithoutValidation("User-Agent"' "http://developer.github.com/v3/#user-agent-required"); " is 122.
Long Statement,dnGREP.Common,GrepSettings,C:\repos\dnGrep_dnGrep\dnGREP.Common\GrepApplicationSettings.cs,getDefaultValue,The length of the statement  "            DefaultValueAttribute[] attr = info.GetCustomAttributes(typeof(DefaultValueAttribute)' false) as DefaultValueAttribute[]; " is 121.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,CopyFiles,The length of the statement  "                    FileInfo destinationFileInfo = new FileInfo(destinationDirectory + result.FileNameReal.Substring(sourceDirectory.Length)); " is 122.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,SaveResultsReport,The length of the statement  "            int fileCount = source.Where(r => !string.IsNullOrWhiteSpace(r.FileNameReal)).Select(r => r.FileNameReal).Distinct().Count(); " is 125.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetResultsAsCSV,The length of the statement  "                            sb.AppendLine("\"" + result.FileNameDisplayed + "\"'" + line.LineNumber + "'\"" + line.LineText.Replace("\""' "\"\"") + "\""); " is 126.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetFileEncoding,The length of the statement  "            // TODO: Unit tests. At least a regression test for Google Code issue 204. In order to properly unit test this method' we should decouple it from the file system by passing in an object that can be easily faked/mocked (a Stream object?). " is 237.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetFileEncoding,The length of the statement  "                return DotNetEncodingFromUde(detector.Charset) ?? Encoding.Default; // If we detected an encoding' use it' otherwise use default. " is 129.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetFileListEx,The length of the statement  "                    new string[] { subPath }.AsEnumerable().Concat(Directory.EnumerateDirectories(subPath' "*"' SearchOption.AllDirectories)))) " is 123.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,CheckShebang,The length of the statement  "                        return Regex.IsMatch(firstLine.Substring(2).Trim()' pattern.Substring(2)' RegexOptions.Compiled | RegexOptions.IgnoreCase); " is 123.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,IsReadOnly,The length of the statement  "            if (File.Exists(result.FileNameReal) && (File.GetAttributes(result.FileNameReal) & FileAttributes.ReadOnly) == FileAttributes.ReadOnly || result.ReadOnly) " is 154.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetLines,The length of the statement  "                    matches.Add(new GrepSearchResult.GrepMatch(lines1.Length + i' index - subBody1.Length + lines1[lines1.Length - 1].Length' lines2[0].Length)); " is 141.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetLinesEx,The length of the statement  "                        if (bodyMatchesClone[0].StartLocation >= currentIndex && bodyMatchesClone[0].StartLocation < currentIndex + line.Length && !startMatched) " is 137.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetLinesEx,The length of the statement  "                                    matches.Add(new GrepSearchResult.GrepMatch(i' 0' bodyMatchesClone[0].Length - tempLinesTotalLength + line.Length + startIndex)); " is 128.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetLinesEx,The length of the statement  "                        if (bodyMatchesClone.Count > 0 && bodyMatchesClone[0].StartLocation >= currentIndex && bodyMatchesClone[0].StartLocation < currentIndex + line.Length && !startMatched) " is 167.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetLinesEx,The length of the statement  "            // Removing duplicate lines (when more than 1 match is on the same line) and grouping all matches belonging to the same line " is 124.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetSnippets,The length of the statement  "                        yield return new NumberedString { Text = snippetText.ToString().TrimEndOfLine()' FirstLineNumber = firstLine' LineCount = lines.Count }; " is 136.
Long Statement,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetSnippets,The length of the statement  "                    yield return new NumberedString { Text = snippetText.ToString().TrimEndOfLine()' FirstLineNumber = firstLine' LineCount = lines.Count }; " is 136.
Complex Conditional,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,CheckShebang,The conditional expression  "pattern == null || pattern.Length <= 2 || (pattern[0] != '#' && pattern[1] != '!')"  is complex.
Complex Conditional,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,CheckShebang,The conditional expression  "firstLine[i] == ' ' || firstLine[i] == '\r' || firstLine[i] == '\n' || firstLine[i] == '\t'"  is complex.
Complex Conditional,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetLines,The conditional expression  "body == null || index < 0 || index + 1 > body.Length || index + length + 1 > body.Length"  is complex.
Complex Conditional,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetLinesEx,The conditional expression  "bodyMatchesClone.Count > 0 && bodyMatchesClone[0].StartLocation >= currentIndex && bodyMatchesClone[0].StartLocation < currentIndex + line.Length && !startMatched"  is complex.
Complex Conditional,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,IsValidBeginText,The conditional expression  "beginText.Equals(string.Empty) ||                 beginText.EndsWith(" ") ||                 beginText.EndsWith("<") ||                 beginText.EndsWith(">") ||                 beginText.EndsWith("$") ||                 beginText.EndsWith("+") ||                 beginText.EndsWith("*") ||                 beginText.EndsWith("[") ||                 beginText.EndsWith("{") ||                 beginText.EndsWith("(") ||                 beginText.EndsWith(".") ||                 beginText.EndsWith("?") ||                 beginText.EndsWith("!") ||                 beginText.EndsWith("'") ||                 beginText.EndsWith(":") ||                 beginText.EndsWith(";") ||                 beginText.EndsWith("-") ||                 beginText.EndsWith("\\") ||                 beginText.EndsWith("/") ||                 beginText.EndsWith("'") ||                 beginText.EndsWith("\"") ||                 beginText.EndsWith(Environment.NewLine) ||                 beginText.EndsWith("\r\n") ||                 beginText.EndsWith("\r") ||                 beginText.EndsWith("\n") ||                 beginText.EndsWith("\t")"  is complex.
Complex Conditional,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,IsValidEndText,The conditional expression  "endText.Equals(string.Empty) ||                 endText.StartsWith(" ") ||                 endText.StartsWith("<") ||                 endText.StartsWith("$") ||                 endText.StartsWith("+") ||                 endText.StartsWith("*") ||                 endText.StartsWith("[") ||                 endText.StartsWith("{") ||                 endText.StartsWith("(") ||                 endText.StartsWith(".") ||                 endText.StartsWith("?") ||                 endText.StartsWith("!") ||                 endText.StartsWith("'") ||                 endText.StartsWith(":") ||                 endText.StartsWith(";") ||                 endText.StartsWith("-") ||                 endText.StartsWith(">") ||                 endText.StartsWith("]") ||                 endText.StartsWith("}") ||                 endText.StartsWith(")") ||                 endText.StartsWith("\\") ||                 endText.StartsWith("/") ||                 endText.StartsWith("'") ||                 endText.StartsWith("\"") ||                 endText.StartsWith(Environment.NewLine) ||                 endText.StartsWith("\r\n") ||                 endText.StartsWith("\r") ||                 endText.StartsWith("\n") ||                 endText.StartsWith("\t")"  is complex.
Complex Conditional,Ude.Core,CharsetProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharsetProber.cs,FilterWithoutEnglishLetters,The conditional expression  "b < CAPITAL_A || (b > CAPITAL_Z && b < SMALL_A)                                 || b > SMALL_Z"  is complex.
Complex Conditional,Ude.Core,CharsetProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharsetProber.cs,FilterWithEnglishLetters,The conditional expression  "(b & 0x80) == 0 && (b < CAPITAL_A || b > SMALL_Z                             || (b > CAPITAL_Z && b < SMALL_A))"  is complex.
Complex Conditional,Ude.Core,SJISContextAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\JapaneseContextAnalyser.cs,GetOrder,The conditional expression  "buf[offset] >= 0x81 && buf[offset] <= 0x9F                   || buf[offset] >= 0xe0 && buf[offset] <= 0xFC"  is complex.
Complex Conditional,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The conditional expression  "inputState == InputState.PureASCII &&                          (buf[i] == 0x33 || (buf[i] == 0x7B && lastChar == 0x7E))"  is complex.
Virtual Method Call from Constructor,Ude.Core,CharDistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,CharDistributionAnalyser,The constructor "CharDistributionAnalyser" calls a virtual method "Reset".
Empty Catch Block,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,ParseEnum,The method has an empty catch block.
Empty Catch Block,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,hasWriteAccessToFolder,The method has an empty catch block.
Magic Number,dnGREP.Common,EolReader,C:\repos\dnGrep_dnGrep\dnGREP.Common\EolReader.cs,EolReader,The following statement contains a magic number: charBuffer = new char[1024];
Magic Number,dnGREP.Common,EolReader,C:\repos\dnGrep_dnGrep\dnGREP.Common\EolReader.cs,ReadBuffer,The following statement contains a magic number: charLen = baseReader.ReadBlock(charBuffer' 0' 1024);
Magic Number,dnGREP.Common,EolReader,C:\repos\dnGrep_dnGrep\dnGREP.Common\EolReader.cs,ReadLine,The following statement contains a magic number: do              {                  int i = charPos;                  do                  {                      char ch = charBuffer[i];                      i++;                      // Note the following common line feed chars:                      // \n - UNIX   \r\n - DOS   \r - Mac                        if (ch == '\r' || ch == '\n')                      {                          String s;                          if (sb != null)                          {                              sb.Append(charBuffer' charPos' i - charPos);                              s = sb.ToString();                          }                          else                          {                              s = new String(charBuffer' charPos' i - charPos);                          }                            charPos = i;                          if (ch == '\r' && (charPos < charLen || ReadBuffer() > 0))                          {                              if (charBuffer[charPos] == '\n')                              {                                  charPos++;                                  s += '\n';                              }                          }                          return s;                      }                    } while (i < charLen);                    i = charLen - charPos;                    if (sb == null) sb = new StringBuilder(i + 80);                  sb.Append(charBuffer' charPos' i);                } while (ReadBuffer() > 0);
Magic Number,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetResultLinesWithContext,The following statement contains a magic number: foreach (var result in source)              {                  // this call to SearchResults can be expensive if the results are not yet cached                  var searchResults = result.SearchResults;                  if (searchResults != null)                  {                      int matchCount = (result.Matches == null ? 0 : result.Matches.Count);                      var lineCount = result.Matches.Where(r => r.LineNumber > 0)                          .Select(r => r.LineNumber).Distinct().Count();                        sb.AppendLine(result.FileNameDisplayed)                        .AppendFormat("has {0} matches on {1} lines:"' matchCount' lineCount).AppendLine();                        if (searchResults.Any())                      {                          int prevLineNum = -1;                          foreach (var line in searchResults)                          {                              // Adding separator                              if (line.LineNumber != prevLineNum + 1)                                  sb.AppendLine();                                sb.Append(line.LineNumber.ToString().PadLeft(6' ' ')).Append(":  ").AppendLine(line.LineText);                              prevLineNum = line.LineNumber;                          }                      }                      else                      {                          sb.AppendLine("[File not found: has it been deleted or moved?]");                      }                  }                  sb.AppendLine("--------------------------------------------------------------------------------").AppendLine();              }
Magic Number,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,IsBinary,The following statement contains a magic number: try              {                  byte[] buffer = new byte[1024];                  int count = stream.Read(buffer' 0' buffer.Length);                  for (int i = 0; i < count - 1; i = i + 2)                  {                      if (buffer[i] == 0 && buffer[i + 1] == 0)                      {                          return true;                      }                  }                  return false;              }              catch              {                  return false;              }
Magic Number,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,IsBinary,The following statement contains a magic number: try              {                  byte[] buffer = new byte[1024];                  int count = stream.Read(buffer' 0' buffer.Length);                  for (int i = 0; i < count - 1; i = i + 2)                  {                      if (buffer[i] == 0 && buffer[i + 1] == 0)                      {                          return true;                      }                  }                  return false;              }              catch              {                  return false;              }
Magic Number,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,GetFileListEx,The following statement contains a magic number: foreach (var subPath in SplitPath(filter.Path))              {                  if (File.Exists(subPath))                  {                      if (!matches.Contains(subPath))                      {                          matches.Add(subPath);                          yield return subPath;                      }                      continue;                  }                  else if (!Directory.Exists(subPath))                  {                      continue;                  }                  foreach (var dirPath in (!filter.IncludeSubfolders ? new string[] { subPath }.AsEnumerable() :                      new string[] { subPath }.AsEnumerable().Concat(Directory.EnumerateDirectories(subPath' "*"' SearchOption.AllDirectories))))                  {                      DirectoryInfo dirInfo = null;                      if (!filter.IncludeHidden)                      {                          if (dirInfo == null)                              dirInfo = new DirectoryInfo(dirPath);                          if (dirInfo.Root.Name != dirInfo.Name && (dirInfo.Attributes & FileAttributes.Hidden) == FileAttributes.Hidden)                              continue;                      }                      if (!hasListPermissionOnDir(dirPath))                          continue;                      foreach (var filePath in Directory.EnumerateFiles(dirPath))                      {                          bool excludeMatch = false;                          bool includeMatch = false;                          FileInfo fileInfo = null;                          try                          {                              if (!filter.IncludeHidden)                              {                                  if (fileInfo == null)                                      fileInfo = new FileInfo(filePath);                                  if ((fileInfo.Attributes & FileAttributes.Hidden) == FileAttributes.Hidden)                                      continue;                              }                                if (!filter.IncludeArchive && IsArchive(filePath))                                  continue;                                if (!IsArchive(filePath) && !filter.IncludeBinary && IsBinary(filePath))                                  continue;                                if (filter.SizeFrom > 0 || filter.SizeTo > 0)                              {                                  if (fileInfo == null)                                      fileInfo = new FileInfo(filePath);                                    long sizeKB = fileInfo.Length / 1000;                                  if (filter.SizeFrom > 0 && sizeKB < filter.SizeFrom)                                  {                                      continue;                                  }                                  if (filter.SizeTo > 0 && sizeKB > filter.SizeTo)                                  {                                      continue;                                  }                              }                              if (filter.DateFilter != FileDateFilter.None)                              {                                  if (fileInfo == null)                                      fileInfo = new FileInfo(filePath);                                    DateTime fileDate = filter.DateFilter == FileDateFilter.Created ? fileInfo.CreationTime : fileInfo.LastWriteTime;                                  if (filter.StartTime.HasValue && fileDate < filter.StartTime.Value)                                  {                                      continue;                                  }                                  if (filter.EndTime.HasValue && fileDate >= filter.EndTime.Value)                                  {                                      continue;                                  }                              }                              if (filter.IncludeArchive && IsArchive(filePath))                              {                                  includeMatch = true;                              }                              if (!includeMatch)                              {                                  foreach (var pattern in includeRegexPatterns)                                  {                                      if (pattern.IsMatch(filePath) || CheckShebang(filePath' pattern.ToString()))                                      {                                          includeMatch = true;                                          break;                                      }                                  }                              }                              foreach (var pattern in excludeRegexPatterns)                              {                                  if (pattern.IsMatch(filePath) || CheckShebang(filePath' pattern.ToString()))                                  {                                      excludeMatch = true;                                      break;                                  }                              }                              if (excludeMatch || !includeMatch)                                  continue;                          }                          catch (Exception ex)                          {                              logger.Log<Exception>(LogLevel.Error' ex.Message' ex);                          }                            if (!matches.Contains(filePath))                          {                              matches.Add(filePath);                              yield return filePath;                          }                      }                  }              }
Magic Number,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,CheckShebang,The following statement contains a magic number: if (pattern == null || pattern.Length <= 2 || (pattern[0] != '#' && pattern[1] != '!'))                  return false;
Magic Number,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,CheckShebang,The following statement contains a magic number: try              {                  using (FileStream readStream = new FileStream(file' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                  using (StreamReader streamReader = new StreamReader(readStream))                  {                      string firstLine = streamReader.ReadLine();                      // Check if first 2 bytes are '#!'                      if (firstLine[0] == 0x23 && firstLine[1] == 0x21)                      {                          // Do more reading (start from 3rd character in case there is a space after #!)                          for (int i = 3; i < firstLine.Length; i++)                          {                              if (firstLine[i] == ' ' || firstLine[i] == '\r' || firstLine[i] == '\n' || firstLine[i] == '\t')                              {                                  firstLine = firstLine.Substring(0' i);                                  break;                              }                          }                          return Regex.IsMatch(firstLine.Substring(2).Trim()' pattern.Substring(2)' RegexOptions.Compiled | RegexOptions.IgnoreCase);                      }                      else                      {                          // Does not have shebang                          return false;                      }                  }              }              catch (IOException)              {                  return false;              }
Magic Number,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,CheckShebang,The following statement contains a magic number: try              {                  using (FileStream readStream = new FileStream(file' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                  using (StreamReader streamReader = new StreamReader(readStream))                  {                      string firstLine = streamReader.ReadLine();                      // Check if first 2 bytes are '#!'                      if (firstLine[0] == 0x23 && firstLine[1] == 0x21)                      {                          // Do more reading (start from 3rd character in case there is a space after #!)                          for (int i = 3; i < firstLine.Length; i++)                          {                              if (firstLine[i] == ' ' || firstLine[i] == '\r' || firstLine[i] == '\n' || firstLine[i] == '\t')                              {                                  firstLine = firstLine.Substring(0' i);                                  break;                              }                          }                          return Regex.IsMatch(firstLine.Substring(2).Trim()' pattern.Substring(2)' RegexOptions.Compiled | RegexOptions.IgnoreCase);                      }                      else                      {                          // Does not have shebang                          return false;                      }                  }              }              catch (IOException)              {                  return false;              }
Magic Number,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,CheckShebang,The following statement contains a magic number: try              {                  using (FileStream readStream = new FileStream(file' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                  using (StreamReader streamReader = new StreamReader(readStream))                  {                      string firstLine = streamReader.ReadLine();                      // Check if first 2 bytes are '#!'                      if (firstLine[0] == 0x23 && firstLine[1] == 0x21)                      {                          // Do more reading (start from 3rd character in case there is a space after #!)                          for (int i = 3; i < firstLine.Length; i++)                          {                              if (firstLine[i] == ' ' || firstLine[i] == '\r' || firstLine[i] == '\n' || firstLine[i] == '\t')                              {                                  firstLine = firstLine.Substring(0' i);                                  break;                              }                          }                          return Regex.IsMatch(firstLine.Substring(2).Trim()' pattern.Substring(2)' RegexOptions.Compiled | RegexOptions.IgnoreCase);                      }                      else                      {                          // Does not have shebang                          return false;                      }                  }              }              catch (IOException)              {                  return false;              }
Magic Number,dnGREP.Common,TextReaderEx,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,TrimEndOfLine,The following statement contains a magic number: if (text.EndsWith("\r\n"))                  return text.Substring(0' text.Length - 2);              else if (text.EndsWith("\r"))                  return text.Substring(0' text.Length - 1);              else if (text.EndsWith("\n"))                  return text.Substring(0' text.Length - 1);              else                  return text;
Magic Number,Ude.Core,BitPackage,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\BitPackage.cs,Pack16bits,The following statement contains a magic number: return ((b << 16) | a);
Magic Number,Ude.Core,BitPackage,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\BitPackage.cs,Pack8bits,The following statement contains a magic number: return Pack16bits((b << 8) | a' (d << 8) | c);
Magic Number,Ude.Core,BitPackage,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\BitPackage.cs,Pack8bits,The following statement contains a magic number: return Pack16bits((b << 8) | a' (d << 8) | c);
Magic Number,Ude.Core,BitPackage,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\BitPackage.cs,Pack4bits,The following statement contains a magic number: return Pack8bits((b << 4) | a' (d << 4) | c'                               (f << 4) | e' (h << 4) | g);
Magic Number,Ude.Core,BitPackage,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\BitPackage.cs,Pack4bits,The following statement contains a magic number: return Pack8bits((b << 4) | a' (d << 4) | c'                               (f << 4) | e' (h << 4) | g);
Magic Number,Ude.Core,BitPackage,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\BitPackage.cs,Pack4bits,The following statement contains a magic number: return Pack8bits((b << 4) | a' (d << 4) | c'                               (f << 4) | e' (h << 4) | g);
Magic Number,Ude.Core,BitPackage,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\BitPackage.cs,Pack4bits,The following statement contains a magic number: return Pack8bits((b << 4) | a' (d << 4) | c'                               (f << 4) | e' (h << 4) | g);
Magic Number,Ude.Core,CharDistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,HandleOneChar,The following statement contains a magic number: int order = (charLen == 2) ? GetOrder(buf' offset) : -1;
Magic Number,Ude.Core,CharDistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,HandleOneChar,The following statement contains a magic number: if (order >= 0) {                 totalChars++;                 if (order < tableSize) { // order is valid                     if (512 > charToFreqOrder[order])                         freqChars++;                 }             }
Magic Number,Ude.Core,GB18030DistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf[offset] >= 0xB0 && buf[offset+1] >= 0xA1)                   return 94 * (buf[offset] - 0xb0) + buf[offset+1] - 0xA1;             else                 return -1;
Magic Number,Ude.Core,EUCTWDistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf[offset] >= 0xC4)                   return 94 * (buf[offset] - 0xC4) + buf[offset+1] - 0xA1;             else                 return -1;
Magic Number,Ude.Core,EUCKRDistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf[offset] >= 0xB0)                   return 94 * (buf[offset] - 0xB0) + buf[offset+1] - 0xA1;             else                 return -1;
Magic Number,Ude.Core,BIG5DistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf[offset] >= 0xA4) {                 if (buf[offset+1] >= 0xA1)                     return 157 * (buf[offset] - 0xA4) + buf[offset+1] - 0xA1 + 63;                 else                     return 157 * (buf[offset] - 0xA4) + buf[offset+1] - 0x40;             } else {                 return -1;                         }
Magic Number,Ude.Core,BIG5DistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf[offset] >= 0xA4) {                 if (buf[offset+1] >= 0xA1)                     return 157 * (buf[offset] - 0xA4) + buf[offset+1] - 0xA1 + 63;                 else                     return 157 * (buf[offset] - 0xA4) + buf[offset+1] - 0x40;             } else {                 return -1;                         }
Magic Number,Ude.Core,BIG5DistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf[offset] >= 0xA4) {                 if (buf[offset+1] >= 0xA1)                     return 157 * (buf[offset] - 0xA4) + buf[offset+1] - 0xA1 + 63;                 else                     return 157 * (buf[offset] - 0xA4) + buf[offset+1] - 0x40;             } else {                 return -1;                         }
Magic Number,Ude.Core,SJISDistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf[offset] >= 0x81 && buf[offset] <= 0x9F)                   order = 188 * (buf[offset] - 0x81);             else if (buf[offset] >= 0xE0 && buf[offset] <= 0xEF)                   order = 188 * (buf[offset] - 0xE0 + 31);             else                 return -1;
Magic Number,Ude.Core,SJISDistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf[offset] >= 0x81 && buf[offset] <= 0x9F)                   order = 188 * (buf[offset] - 0x81);             else if (buf[offset] >= 0xE0 && buf[offset] <= 0xEF)                   order = 188 * (buf[offset] - 0xE0 + 31);             else                 return -1;
Magic Number,Ude.Core,SJISDistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf[offset] >= 0x81 && buf[offset] <= 0x9F)                   order = 188 * (buf[offset] - 0x81);             else if (buf[offset] >= 0xE0 && buf[offset] <= 0xEF)                   order = 188 * (buf[offset] - 0xE0 + 31);             else                 return -1;
Magic Number,Ude.Core,EUCJPDistributionAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\CharDistributionAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf[offset] >= 0xA0)                   return 94 * (buf[offset] - 0xA1) + buf[offset+1] - 0xA1;             else                 return -1;
Magic Number,Ude.Core,EscCharsetProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\EscCharsetProber.cs,EscCharsetProber,The following statement contains a magic number: codingSM[2] = new CodingStateMachine(new ISO2022JPSMModel());
Magic Number,Ude.Core,EscCharsetProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\EscCharsetProber.cs,EscCharsetProber,The following statement contains a magic number: codingSM[3] = new CodingStateMachine(new ISO2022KRSMModel());
Magic Number,Ude.Core,GB18030Prober,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\GB18030Prober.cs,GB18030Prober,The following statement contains a magic number: lastChar = new byte[2];
Magic Number,Ude.Core,JapaneseContextAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\JapaneseContextAnalyser.cs,HandleOneChar,The following statement contains a magic number: int order = (charLen == 2) ? GetOrder(buf' offset) : -1;
Magic Number,Ude.Core,SJISContextAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\JapaneseContextAnalyser.cs,GetOrder,The following statement contains a magic number: if (buf[offset] >= 0x81 && buf[offset] <= 0x9F                   || buf[offset] >= 0xe0 && buf[offset] <= 0xFC)                  charLen = 2;              else                   charLen = 1;
Magic Number,Ude.Core,EUCJPContextAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\JapaneseContextAnalyser.cs,GetOrder,The following statement contains a magic number: if (high == 0x8E || high >= 0xA1 && high <= 0xFE)                  charLen = 2;              else if (high == 0xBF)                  charLen = 3;              else                  charLen = 1;
Magic Number,Ude.Core,EUCJPContextAnalyser,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\JapaneseContextAnalyser.cs,GetOrder,The following statement contains a magic number: if (high == 0x8E || high >= 0xA1 && high <= 0xFE)                  charLen = 2;              else if (high == 0xBF)                  charLen = 3;              else                  charLen = 1;
Magic Number,Ude.Core,Latin1Prober,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\Latin1Prober.cs,GetConfidence,The following statement contains a magic number: if (total <= 0) {                  confidence = 0.0f;              } else {                  confidence = freqCounter[3] * 1.0f / total;                  confidence -= freqCounter[1] * 20.0f / total;              }
Magic Number,Ude.Core,MBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\MBCSGroupProber.cs,MBCSGroupProber,The following statement contains a magic number: probers[2] = new EUCJPProber();
Magic Number,Ude.Core,MBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\MBCSGroupProber.cs,MBCSGroupProber,The following statement contains a magic number: probers[3] = new GB18030Prober();
Magic Number,Ude.Core,MBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\MBCSGroupProber.cs,MBCSGroupProber,The following statement contains a magic number: probers[4] = new EUCKRProber();
Magic Number,Ude.Core,MBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\MBCSGroupProber.cs,MBCSGroupProber,The following statement contains a magic number: probers[5] = new Big5Prober();
Magic Number,Ude.Core,MBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\MBCSGroupProber.cs,MBCSGroupProber,The following statement contains a magic number: probers[6] = new EUCTWProber();
Magic Number,Ude.Core,SingleByteCharSetProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCharsetProber.cs,Reset,The following statement contains a magic number: lastOrder = 255;
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers[2] = new SingleByteCharSetProber(new Latin5Model());
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers[3] = new SingleByteCharSetProber(new MacCyrillicModel());
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers[4] = new SingleByteCharSetProber(new Ibm866Model());
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers[5] = new SingleByteCharSetProber(new Ibm855Model());
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers[6] = new SingleByteCharSetProber(new Latin7Model());
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers[7] = new SingleByteCharSetProber(new Win1253Model());
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers[8] = new SingleByteCharSetProber(new Latin5BulgarianModel());
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers[9] = new SingleByteCharSetProber(new Win1251BulgarianModel());
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers[10] = hebprober;
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers[11] = new SingleByteCharSetProber(new Win1255Model()' false' hebprober);
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: probers[12] = new SingleByteCharSetProber(new Win1255Model()' true' hebprober);
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: hebprober.SetModelProbers(probers[11]' probers[12]);
Magic Number,Ude.Core,SBCSGroupProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SBCSGroupProber.cs,SBCSGroupProber,The following statement contains a magic number: hebprober.SetModelProbers(probers[11]' probers[12]);
Magic Number,Ude.Core,SJISProber,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\SJISProber.cs,HandleData,The following statement contains a magic number: for (int i = offset; i < max; i++) {                  codingState = codingSM.NextState(buf[i]);                  if (codingState == SMModel.ERROR) {                      state = ProbingState.NotMe;                      break;                  }                  if (codingState == SMModel.ITSME) {                      state = ProbingState.FoundIt;                      break;                  }                  if (codingState == SMModel.START) {                      int charLen = codingSM.CurrentCharLen;                      if (i == offset) {                          lastChar[1] = buf[offset];                          contextAnalyser.HandleOneChar(lastChar' 2-charLen' charLen);                          distributionAnalyser.HandleOneChar(lastChar' 0' charLen);                      } else {                          contextAnalyser.HandleOneChar(buf' i+1-charLen' charLen);                          distributionAnalyser.HandleOneChar(buf' i-1' charLen);                      }                  }              }
Magic Number,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {                  start = false;                  if (len > 3) {                      switch (buf[0]) {                      case 0xEF:                          if (0xBB == buf[1] && 0xBF == buf[2])                              detectedCharset = "UTF-8";                          break;                      case 0xFE:                          if (0xFF == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              // FE FF 00 00  UCS-4' unusual octet order BOM (3412)                              detectedCharset = "X-ISO-10646-UCS-4-3412";                          else if (0xFF == buf[1])                              detectedCharset = "UTF-16BE";                          break;                      case 0x00:                          if (0x00 == buf[1] && 0xFE == buf[2] && 0xFF == buf[3])                              detectedCharset = "UTF-32BE";                          else if (0x00 == buf[1] && 0xFF == buf[2] && 0xFE == buf[3])                              // 00 00 FF FE  UCS-4' unusual octet order BOM (2143)                              detectedCharset = "X-ISO-10646-UCS-4-2143";                          break;                      case 0xFF:                          if (0xFE == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              detectedCharset = "UTF-32LE";                          else if (0xFE == buf[1])                              detectedCharset = "UTF-16LE";                          break;                      }  // switch                  }                  if (detectedCharset != null) {                      done = true;                      return;                  }              }
Magic Number,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {                  start = false;                  if (len > 3) {                      switch (buf[0]) {                      case 0xEF:                          if (0xBB == buf[1] && 0xBF == buf[2])                              detectedCharset = "UTF-8";                          break;                      case 0xFE:                          if (0xFF == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              // FE FF 00 00  UCS-4' unusual octet order BOM (3412)                              detectedCharset = "X-ISO-10646-UCS-4-3412";                          else if (0xFF == buf[1])                              detectedCharset = "UTF-16BE";                          break;                      case 0x00:                          if (0x00 == buf[1] && 0xFE == buf[2] && 0xFF == buf[3])                              detectedCharset = "UTF-32BE";                          else if (0x00 == buf[1] && 0xFF == buf[2] && 0xFE == buf[3])                              // 00 00 FF FE  UCS-4' unusual octet order BOM (2143)                              detectedCharset = "X-ISO-10646-UCS-4-2143";                          break;                      case 0xFF:                          if (0xFE == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              detectedCharset = "UTF-32LE";                          else if (0xFE == buf[1])                              detectedCharset = "UTF-16LE";                          break;                      }  // switch                  }                  if (detectedCharset != null) {                      done = true;                      return;                  }              }
Magic Number,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {                  start = false;                  if (len > 3) {                      switch (buf[0]) {                      case 0xEF:                          if (0xBB == buf[1] && 0xBF == buf[2])                              detectedCharset = "UTF-8";                          break;                      case 0xFE:                          if (0xFF == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              // FE FF 00 00  UCS-4' unusual octet order BOM (3412)                              detectedCharset = "X-ISO-10646-UCS-4-3412";                          else if (0xFF == buf[1])                              detectedCharset = "UTF-16BE";                          break;                      case 0x00:                          if (0x00 == buf[1] && 0xFE == buf[2] && 0xFF == buf[3])                              detectedCharset = "UTF-32BE";                          else if (0x00 == buf[1] && 0xFF == buf[2] && 0xFE == buf[3])                              // 00 00 FF FE  UCS-4' unusual octet order BOM (2143)                              detectedCharset = "X-ISO-10646-UCS-4-2143";                          break;                      case 0xFF:                          if (0xFE == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              detectedCharset = "UTF-32LE";                          else if (0xFE == buf[1])                              detectedCharset = "UTF-16LE";                          break;                      }  // switch                  }                  if (detectedCharset != null) {                      done = true;                      return;                  }              }
Magic Number,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {                  start = false;                  if (len > 3) {                      switch (buf[0]) {                      case 0xEF:                          if (0xBB == buf[1] && 0xBF == buf[2])                              detectedCharset = "UTF-8";                          break;                      case 0xFE:                          if (0xFF == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              // FE FF 00 00  UCS-4' unusual octet order BOM (3412)                              detectedCharset = "X-ISO-10646-UCS-4-3412";                          else if (0xFF == buf[1])                              detectedCharset = "UTF-16BE";                          break;                      case 0x00:                          if (0x00 == buf[1] && 0xFE == buf[2] && 0xFF == buf[3])                              detectedCharset = "UTF-32BE";                          else if (0x00 == buf[1] && 0xFF == buf[2] && 0xFE == buf[3])                              // 00 00 FF FE  UCS-4' unusual octet order BOM (2143)                              detectedCharset = "X-ISO-10646-UCS-4-2143";                          break;                      case 0xFF:                          if (0xFE == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              detectedCharset = "UTF-32LE";                          else if (0xFE == buf[1])                              detectedCharset = "UTF-16LE";                          break;                      }  // switch                  }                  if (detectedCharset != null) {                      done = true;                      return;                  }              }
Magic Number,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {                  start = false;                  if (len > 3) {                      switch (buf[0]) {                      case 0xEF:                          if (0xBB == buf[1] && 0xBF == buf[2])                              detectedCharset = "UTF-8";                          break;                      case 0xFE:                          if (0xFF == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              // FE FF 00 00  UCS-4' unusual octet order BOM (3412)                              detectedCharset = "X-ISO-10646-UCS-4-3412";                          else if (0xFF == buf[1])                              detectedCharset = "UTF-16BE";                          break;                      case 0x00:                          if (0x00 == buf[1] && 0xFE == buf[2] && 0xFF == buf[3])                              detectedCharset = "UTF-32BE";                          else if (0x00 == buf[1] && 0xFF == buf[2] && 0xFE == buf[3])                              // 00 00 FF FE  UCS-4' unusual octet order BOM (2143)                              detectedCharset = "X-ISO-10646-UCS-4-2143";                          break;                      case 0xFF:                          if (0xFE == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              detectedCharset = "UTF-32LE";                          else if (0xFE == buf[1])                              detectedCharset = "UTF-16LE";                          break;                      }  // switch                  }                  if (detectedCharset != null) {                      done = true;                      return;                  }              }
Magic Number,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {                  start = false;                  if (len > 3) {                      switch (buf[0]) {                      case 0xEF:                          if (0xBB == buf[1] && 0xBF == buf[2])                              detectedCharset = "UTF-8";                          break;                      case 0xFE:                          if (0xFF == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              // FE FF 00 00  UCS-4' unusual octet order BOM (3412)                              detectedCharset = "X-ISO-10646-UCS-4-3412";                          else if (0xFF == buf[1])                              detectedCharset = "UTF-16BE";                          break;                      case 0x00:                          if (0x00 == buf[1] && 0xFE == buf[2] && 0xFF == buf[3])                              detectedCharset = "UTF-32BE";                          else if (0x00 == buf[1] && 0xFF == buf[2] && 0xFE == buf[3])                              // 00 00 FF FE  UCS-4' unusual octet order BOM (2143)                              detectedCharset = "X-ISO-10646-UCS-4-2143";                          break;                      case 0xFF:                          if (0xFE == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              detectedCharset = "UTF-32LE";                          else if (0xFE == buf[1])                              detectedCharset = "UTF-16LE";                          break;                      }  // switch                  }                  if (detectedCharset != null) {                      done = true;                      return;                  }              }
Magic Number,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {                  start = false;                  if (len > 3) {                      switch (buf[0]) {                      case 0xEF:                          if (0xBB == buf[1] && 0xBF == buf[2])                              detectedCharset = "UTF-8";                          break;                      case 0xFE:                          if (0xFF == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              // FE FF 00 00  UCS-4' unusual octet order BOM (3412)                              detectedCharset = "X-ISO-10646-UCS-4-3412";                          else if (0xFF == buf[1])                              detectedCharset = "UTF-16BE";                          break;                      case 0x00:                          if (0x00 == buf[1] && 0xFE == buf[2] && 0xFF == buf[3])                              detectedCharset = "UTF-32BE";                          else if (0x00 == buf[1] && 0xFF == buf[2] && 0xFE == buf[3])                              // 00 00 FF FE  UCS-4' unusual octet order BOM (2143)                              detectedCharset = "X-ISO-10646-UCS-4-2143";                          break;                      case 0xFF:                          if (0xFE == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              detectedCharset = "UTF-32LE";                          else if (0xFE == buf[1])                              detectedCharset = "UTF-16LE";                          break;                      }  // switch                  }                  if (detectedCharset != null) {                      done = true;                      return;                  }              }
Magic Number,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {                  start = false;                  if (len > 3) {                      switch (buf[0]) {                      case 0xEF:                          if (0xBB == buf[1] && 0xBF == buf[2])                              detectedCharset = "UTF-8";                          break;                      case 0xFE:                          if (0xFF == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              // FE FF 00 00  UCS-4' unusual octet order BOM (3412)                              detectedCharset = "X-ISO-10646-UCS-4-3412";                          else if (0xFF == buf[1])                              detectedCharset = "UTF-16BE";                          break;                      case 0x00:                          if (0x00 == buf[1] && 0xFE == buf[2] && 0xFF == buf[3])                              detectedCharset = "UTF-32BE";                          else if (0x00 == buf[1] && 0xFF == buf[2] && 0xFE == buf[3])                              // 00 00 FF FE  UCS-4' unusual octet order BOM (2143)                              detectedCharset = "X-ISO-10646-UCS-4-2143";                          break;                      case 0xFF:                          if (0xFE == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              detectedCharset = "UTF-32LE";                          else if (0xFE == buf[1])                              detectedCharset = "UTF-16LE";                          break;                      }  // switch                  }                  if (detectedCharset != null) {                      done = true;                      return;                  }              }
Magic Number,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {                  start = false;                  if (len > 3) {                      switch (buf[0]) {                      case 0xEF:                          if (0xBB == buf[1] && 0xBF == buf[2])                              detectedCharset = "UTF-8";                          break;                      case 0xFE:                          if (0xFF == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              // FE FF 00 00  UCS-4' unusual octet order BOM (3412)                              detectedCharset = "X-ISO-10646-UCS-4-3412";                          else if (0xFF == buf[1])                              detectedCharset = "UTF-16BE";                          break;                      case 0x00:                          if (0x00 == buf[1] && 0xFE == buf[2] && 0xFF == buf[3])                              detectedCharset = "UTF-32BE";                          else if (0x00 == buf[1] && 0xFF == buf[2] && 0xFE == buf[3])                              // 00 00 FF FE  UCS-4' unusual octet order BOM (2143)                              detectedCharset = "X-ISO-10646-UCS-4-2143";                          break;                      case 0xFF:                          if (0xFE == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              detectedCharset = "UTF-32LE";                          else if (0xFE == buf[1])                              detectedCharset = "UTF-16LE";                          break;                      }  // switch                  }                  if (detectedCharset != null) {                      done = true;                      return;                  }              }
Magic Number,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: if (start) {                  start = false;                  if (len > 3) {                      switch (buf[0]) {                      case 0xEF:                          if (0xBB == buf[1] && 0xBF == buf[2])                              detectedCharset = "UTF-8";                          break;                      case 0xFE:                          if (0xFF == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              // FE FF 00 00  UCS-4' unusual octet order BOM (3412)                              detectedCharset = "X-ISO-10646-UCS-4-3412";                          else if (0xFF == buf[1])                              detectedCharset = "UTF-16BE";                          break;                      case 0x00:                          if (0x00 == buf[1] && 0xFE == buf[2] && 0xFF == buf[3])                              detectedCharset = "UTF-32BE";                          else if (0x00 == buf[1] && 0xFF == buf[2] && 0xFE == buf[3])                              // 00 00 FF FE  UCS-4' unusual octet order BOM (2143)                              detectedCharset = "X-ISO-10646-UCS-4-2143";                          break;                      case 0xFF:                          if (0xFE == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              detectedCharset = "UTF-32LE";                          else if (0xFE == buf[1])                              detectedCharset = "UTF-16LE";                          break;                      }  // switch                  }                  if (detectedCharset != null) {                      done = true;                      return;                  }              }
Magic Number,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: for (int i = 0; i < len; i++) {                                    // other than 0xa0' if every other character is ascii' the page is ascii                  if ((buf[i] & 0x80) != 0 && buf[i] != 0xA0)  {                      // we got a non-ascii byte (high-byte)                      if (inputState != InputState.Highbyte) {                          inputState = InputState.Highbyte;                            // kill EscCharsetProber if it is active                          if (escCharsetProber != null) {                              escCharsetProber = null;                          }                            // start multibyte and singlebyte charset prober                          if (charsetProbers[0] == null)                              charsetProbers[0] = new MBCSGroupProber();                          if (charsetProbers[1] == null)                              charsetProbers[1] = new SBCSGroupProber();                          if (charsetProbers[2] == null)                              charsetProbers[2] = new Latin1Prober();                       }                  } else {                       if (inputState == InputState.PureASCII &&                          (buf[i] == 0x33 || (buf[i] == 0x7B && lastChar == 0x7E))) {                          // found escape character or HZ "~{"                          inputState = InputState.EscASCII;                      }                      lastChar = buf[i];                  }              }
Magic Number,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The following statement contains a magic number: for (int i = 0; i < len; i++) {                                    // other than 0xa0' if every other character is ascii' the page is ascii                  if ((buf[i] & 0x80) != 0 && buf[i] != 0xA0)  {                      // we got a non-ascii byte (high-byte)                      if (inputState != InputState.Highbyte) {                          inputState = InputState.Highbyte;                            // kill EscCharsetProber if it is active                          if (escCharsetProber != null) {                              escCharsetProber = null;                          }                            // start multibyte and singlebyte charset prober                          if (charsetProbers[0] == null)                              charsetProbers[0] = new MBCSGroupProber();                          if (charsetProbers[1] == null)                              charsetProbers[1] = new SBCSGroupProber();                          if (charsetProbers[2] == null)                              charsetProbers[2] = new Latin1Prober();                       }                  } else {                       if (inputState == InputState.PureASCII &&                          (buf[i] == 0x33 || (buf[i] == 0x7B && lastChar == 0x7E))) {                          // found escape character or HZ "~{"                          inputState = InputState.EscASCII;                      }                      lastChar = buf[i];                  }              }
Magic Number,Ude.Core,UTF8Prober,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UTF8Prober.cs,HandleData,The following statement contains a magic number: for (int i = offset; i < max; i++) {                    codingState = codingSM.NextState(buf[i]);                    if (codingState == SMModel.ERROR) {                      state = ProbingState.NotMe;                      break;                  }                    if (codingState == SMModel.ITSME) {                      state = ProbingState.FoundIt;                      break;                  }                    if (codingState == SMModel.START) {                      if (codingSM.CurrentCharLen >= 2)                          numOfMBChar++;                  }              }
Magic Number,Ude.Core,UTF8Prober,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UTF8Prober.cs,GetConfidence,The following statement contains a magic number: if (numOfMBChar < 6) {                  for (int i = 0; i < numOfMBChar; i++)                      unlike *= ONE_CHAR_PROB;                  confidence = 1.0f - unlike;              } else {                  confidence = 0.99f;              }
Magic Number,Ude,CharsetDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude\CharsetDetector.cs,Feed,The following statement contains a magic number: byte[] buff = new byte[1024];
Missing Default,dnGREP.Common,Utils,C:\repos\dnGrep_dnGrep\dnGREP.Common\Utils.cs,ParseBoolean,The following switch statement is missing a default case: switch (value.Trim().ToLower())                  {                      case "true":                      case "yes":                      case "y":                      case "on":                      case "1":                          return true;                      case "false":                      case "no":                      case "n":                      case "off":                      case "0":                          return false;                  }
Missing Default,Ude.Core,UniversalDetector,C:\repos\dnGrep_dnGrep\dnGREP.Common\Ude.Core\UniversalDetector.cs,Feed,The following switch statement is missing a default case: switch (buf[0]) {                      case 0xEF:                          if (0xBB == buf[1] && 0xBF == buf[2])                              detectedCharset = "UTF-8";                          break;                      case 0xFE:                          if (0xFF == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              // FE FF 00 00  UCS-4' unusual octet order BOM (3412)                              detectedCharset = "X-ISO-10646-UCS-4-3412";                          else if (0xFF == buf[1])                              detectedCharset = "UTF-16BE";                          break;                      case 0x00:                          if (0x00 == buf[1] && 0xFE == buf[2] && 0xFF == buf[3])                              detectedCharset = "UTF-32BE";                          else if (0x00 == buf[1] && 0xFF == buf[2] && 0xFE == buf[3])                              // 00 00 FF FE  UCS-4' unusual octet order BOM (2143)                              detectedCharset = "X-ISO-10646-UCS-4-2143";                          break;                      case 0xFF:                          if (0xFE == buf[1] && 0x00 == buf[2] && 0x00 == buf[3])                              detectedCharset = "UTF-32LE";                          else if (0xFE == buf[1])                              detectedCharset = "UTF-16LE";                          break;                      }
