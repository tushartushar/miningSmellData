Implementation smell,Namespace,Class,File,Method,Description
Long Method,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,ProcessExpression,The method has 115 lines of code.
Long Method,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,Calculate,The method has 113 lines of code.
Long Method,JinianNet.JNTemplate.Dynamic,ReflectionProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ReflectionProvider.cs,GetMethod,The method has 106 lines of code.
Long Method,JinianNet.JNTemplate.Parser,ComplexParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ComplexParser.cs,Parse,The method has 129 lines of code.
Complex Method,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,Calculate,Cyclomatic complexity of the method is 10
Complex Method,JinianNet.JNTemplate.Dynamic,DynamicHelper,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\DynamicHelper.cs,ToIEnumerable,Cyclomatic complexity of the method is 9
Complex Method,JinianNet.JNTemplate.Dynamic,ILProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ILProvider.cs,CreateExcuteMethodProxy,Cyclomatic complexity of the method is 8
Complex Method,JinianNet.JNTemplate.Dynamic,ReflectionProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ReflectionProvider.cs,GetMethod,Cyclomatic complexity of the method is 16
Complex Method,JinianNet.JNTemplate,TemplateRender,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\TemplateRender.cs,Render,Cyclomatic complexity of the method is 8
Complex Method,JinianNet.JNTemplate.Parser,ComplexParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ComplexParser.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,JinianNet.JNTemplate.Parser,ForParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForParser.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,JinianNet.JNTemplate.Parser,TemplateLexer,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\TemplateLexer.cs,ReadToken,Cyclomatic complexity of the method is 14
Long Statement,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,ProcessExpression,The length of the statement  "                                            if (GetPriority(eX.ToString()) >= GetPriority(eY.ToString()) && stack.Peek().ToString() != "(")// && stack.Peek() != '(' " is 120.
Long Statement,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,Calculate,The length of the statement  "                    throw new Exception.TemplateException(String.Concat("Operator \""' value' "\" can not be applied operand \"Object\" and \"Object\"")); " is 134.
Long Statement,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,Calculate,The length of the statement  "                    throw new Exception.TemplateException(String.Concat("Operator \""' value' "\" can not be applied operand \"Boolean\" and \"Boolean\"")); " is 136.
Long Statement,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,Calculate,The length of the statement  "                    throw new Exception.TemplateException(String.Concat("Operator \""' value' "\" can not be applied operand \"String\" and \"String\"")); " is 134.
Long Statement,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,Calculate,The length of the statement  "                    throw new Exception.TemplateException(String.Concat("Operator \""' value' "\" can not be applied operand \"DateTime\" and \"DateTime\"")); " is 138.
Long Statement,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,Calculate,The length of the statement  "                    throw new Exception.TemplateException(String.Concat("Operator \""' value' "\" can not be applied operand \"Double\" and \"Double\"")); " is 134.
Long Statement,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,Calculate,The length of the statement  "                    throw new Exception.TemplateException(String.Concat("Operator \""' value' "\" can not be applied operand \"Single\" and \"Single\"")); " is 134.
Long Statement,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,Calculate,The length of the statement  "                    throw new Exception.TemplateException(String.Concat("Operator \""' value' "\" can not be applied operand \"Decimal\" and \"Decimal\"")); " is 136.
Long Statement,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,Calculate,The length of the statement  "                    throw new Exception.TemplateException(String.Concat("Operator \""' value' "\" can not be applied operand \"Int32\" and \"Int32\"")); " is 132.
Long Statement,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,Calculate,The length of the statement  "                    throw new Exception.TemplateException(String.Concat("Operator \""' value' "\" can not be applied operand \"Int64\" and \"Int64\"")); " is 132.
Long Statement,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,Calculate,The length of the statement  "                    throw new Exception.TemplateException(String.Concat("Operator \""' value' "\" can not be applied operand \"Int16\" and \"Int16\"")); " is 132.
Long Statement,JinianNet.JNTemplate.Dynamic,ILProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ILProvider.cs,CreateGetPropertyOrFieldProxy,The length of the statement  "            if ((mi = type.GetMethod(String.Concat("get_"' propertyName)' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static | Engine.BindIgnoreCase' null' " is 183.
Long Statement,JinianNet.JNTemplate.Dynamic,ILProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ILProvider.cs,CreateGetPropertyOrFieldProxy,The length of the statement  "            else if (isNumberRegex.Match(propertyName).Success && (mi = type.GetMethod("get_Item"' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static | Engine.BindIgnoreCase' null' " is 208.
Long Statement,JinianNet.JNTemplate.Dynamic,ILProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ILProvider.cs,CreateGetPropertyOrFieldProxy,The length of the statement  "            else if ((mi = type.GetMethod("get_Item"' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static | Engine.BindIgnoreCase' null' " is 163.
Long Statement,JinianNet.JNTemplate.Dynamic,ILProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ILProvider.cs,CreateGetPropertyOrFieldProxy,The length of the statement  "            else if ((fi = type.GetField(propertyName' BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)) != null) " is 144.
Long Statement,JinianNet.JNTemplate.Dynamic,ILProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ILProvider.cs,CreateGetPropertyOrFieldProxy,The length of the statement  "                //if ((fi.FieldType.IsArray && (fi.FieldType.GetArrayRank() > 1 || (!(t = fi.FieldType.GetElementType()).IsValueType && t != typeof(String) && t.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' Type.EmptyTypes' null) == null))) || " is 272.
Long Statement,JinianNet.JNTemplate.Dynamic,ILProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ILProvider.cs,CreateGetPropertyOrFieldProxy,The length of the statement  "                //                          (!fi.FieldType.IsArray && fi.FieldType.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' Type.EmptyTypes' null) == null)) " is 190.
Long Statement,JinianNet.JNTemplate.Dynamic,ILProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ILProvider.cs,CreateExcuteMethodProxy,The length of the statement  "                MethodInfo[] mis = type.GetMethods(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 127.
Long Statement,JinianNet.JNTemplate.Dynamic,ReflectionProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ReflectionProvider.cs,GetIndexedProperty,The length of the statement  "            PropertyInfo info = t.GetProperty("Item"' BindingFlags.Public | BindingFlags.Instance' null' null' new Type[] { propIndex.GetType() }' null); " is 141.
Long Statement,JinianNet.JNTemplate.Dynamic,ReflectionProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ReflectionProvider.cs,GetPropertyOrField,The length of the statement  "                    t.GetProperty(propName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static | Engine.BindIgnoreCase); " is 140.
Long Statement,JinianNet.JNTemplate.Dynamic,ReflectionProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ReflectionProvider.cs,GetPropertyOrField,The length of the statement  "                FieldInfo f = t.GetField(propName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static | Engine.BindIgnoreCase); " is 151.
Long Statement,JinianNet.JNTemplate.Dynamic,ReflectionProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ReflectionProvider.cs,GetPropertyOrField,The length of the statement  "                exp = System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression.Constant(container)' propName); " is 123.
Long Statement,JinianNet.JNTemplate.Dynamic,ReflectionProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ReflectionProvider.cs,GetMethod,The length of the statement  "                type.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Static | Engine.BindIgnoreCase); " is 132.
Long Statement,JinianNet.JNTemplate.Parser,ElseifParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ElseifParser.cs,Parse,The length of the statement  "                    throw new Exception.ParseException(String.Concat("syntax error near if:"' tc)' tc.First.BeginLine' tc.First.BeginColumn); " is 121.
Long Statement,JinianNet.JNTemplate.Parser,ForeachParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForeachParser.cs,Parse,The length of the statement  "                    throw new Exception.ParseException(String.Concat("foreach is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn); " is 144.
Long Statement,JinianNet.JNTemplate.Parser,ForeachParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForeachParser.cs,Parse,The length of the statement  "                    throw new Exception.ParseException(String.Concat("syntax error near foreach:"' tc)' tc.First.BeginLine' tc.First.BeginColumn); " is 126.
Long Statement,JinianNet.JNTemplate.Parser,ForParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForParser.cs,Parse,The length of the statement  "                        throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn); " is 122.
Long Statement,JinianNet.JNTemplate.Parser,ForParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForParser.cs,Parse,The length of the statement  "                    throw new Exception.ParseException(String.Concat("for is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn); " is 140.
Long Statement,JinianNet.JNTemplate.Parser,ForParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForParser.cs,Parse,The length of the statement  "                    throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn); " is 122.
Long Statement,JinianNet.JNTemplate.Parser,IfParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\IfParser.cs,Parse,The length of the statement  "                    throw new Exception.ParseException(String.Concat("if is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn); " is 139.
Long Statement,JinianNet.JNTemplate.Parser,IfParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\IfParser.cs,Parse,The length of the statement  "                    throw new Exception.ParseException(String.Concat("syntax error near if:"' tc)' tc.First.BeginLine' tc.First.BeginColumn); " is 121.
Long Statement,JinianNet.JNTemplate.Parser,TemplateLexer,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\TemplateLexer.cs,IsTagEnd,The length of the statement  "                //    if (Char.IsControl(value) || (Char.IsPunctuation(value) && value != '_') || Char.IsSeparator(value) || Char.IsSymbol(value) || Char.IsWhiteSpace(value) || (Int32)value > 167) " is 180.
Long Statement,JinianNet.JNTemplate.Parser,TemplateParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\TemplateParser.cs,Read,The length of the statement  "                    throw new Exception.ParseException(String.Concat("Parse error:"' tc' "\r\nError message:"' e.Message)' tc.First.BeginLine' tc.First.BeginColumn);//标签分析异常 " is 153.
Long Statement,JinianNet.JNTemplate.Parser,TemplateParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\TemplateParser.cs,Read,The length of the statement  "                    throw new Exception.ParseException(String.Concat("Unexpected  tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn); //未知的标签 " is 124.
Complex Conditional,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,Calculate,The conditional expression  "!String.IsNullOrEmpty(strX = x.ToString())                              && !String.IsNullOrEmpty(strY = y.ToString())                              && Single.TryParse(strX' out fx)                              && Single.TryParse(strY' out fy)"  is complex.
Complex Conditional,JinianNet.JNTemplate.Dynamic,ILProvider,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Dynamic\ILProvider.cs,Call,The conditional expression  "mi.IsStatic || (!mi.IsAbstract && !mi.IsVirtual) || type.IsValueType"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,BooleanParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\BooleanParser.cs,Parse,The conditional expression  "tc!=null                  && tc.Count == 1                  && (tc.First.Text == "true" || tc.First.Text == "false")"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,EleseParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\EleseParser.cs,Parse,The conditional expression  "tc != null                  && parser != null                  && tc.Count == 1                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_ELSE)"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,ElseifParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ElseifParser.cs,Parse,The conditional expression  "tc != null                  && parser != null                  && tc.Count > 3                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_ELSEIF)"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,ForeachParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForeachParser.cs,Parse,The conditional expression  "tc != null                  && parser != null                  && tc.Count > 0                   && Common.Utility.IsEqual(Field.KEY_FOREACH' tc.First.Text)"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,ForeachParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForeachParser.cs,Parse,The conditional expression  "tc.Count > 5                      && tc[1].TokenKind == TokenKind.LeftParentheses                      && tc[2].TokenKind == TokenKind.TextData                      && Common.Utility.IsEqual(tc[3].Text' Field.KEY_IN)                      && tc.Last.TokenKind == TokenKind.RightParentheses"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,ForParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForParser.cs,Parse,The conditional expression  "tc != null                  && parser != null                  && tc.Count > 3                   && Common.Utility.IsEqual(Field.KEY_FOR' tc.First.Text)"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,FunctionParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\FunctionParser.cs,Parse,The conditional expression  "tc != null                  && parser != null                  && tc.First.TokenKind == TokenKind.TextData                  && tc.Count > 2                  && (tc[1].TokenKind == TokenKind.LeftParentheses)                  && tc.Last.TokenKind == TokenKind.RightParentheses"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,IfParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\IfParser.cs,Parse,The conditional expression  "tc != null                  && parser != null                  && tc.Count > 3                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_IF)"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,IncludeParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\IncludeParser.cs,Parse,The conditional expression  "tc != null                      && parser != null                      && tc.Count > 2                      && (tc[1].TokenKind == TokenKind.LeftParentheses)                      && tc.Last.TokenKind == TokenKind.RightParentheses"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,LoadParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\LoadParser.cs,Parse,The conditional expression  "tc != null                      && parser != null                      && tc.Count > 2                      && (tc[1].TokenKind == TokenKind.LeftParentheses)                      && tc.Last.TokenKind == TokenKind.RightParentheses"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,SetParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\SetParser.cs,Parse,The conditional expression  "tc.Count > 5                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_SET)                  && tc[1].TokenKind == TokenKind.LeftParentheses                  && tc[3].Text == "="                  && tc.Last.TokenKind == TokenKind.RightParentheses"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,SetParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\SetParser.cs,Parse,The conditional expression  "tc.Count == 2                  && tc.First.TokenKind == TokenKind.TextData                  && tc.Last.TokenKind == TokenKind.Operator                  && (tc.Last.Text == "++" || tc.Last.Text == "--")"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,StringParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\StringParser.cs,Parse,The conditional expression  "tc!=null                  && tc.Count == 3                  && tc.First.TokenKind == TokenKind.StringStart                  && tc[1].TokenKind == TokenKind.String                  && tc.Last.TokenKind == TokenKind.StringEnd"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,TemplateLexer,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\TemplateLexer.cs,IsTagEnd,The conditional expression  "((value == '(' || Common.Utility.IsWord(value)) && Common.Utility.IsWord(this._scanner.Read(-1)))                          || (Common.Utility.IsWord(value) && (this._scanner.Read(-1) == '.'))"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,TemplateLexer,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\TemplateLexer.cs,ReadToken,The conditional expression  "this._kind == TokenKind.TagStart                          || this._kind == TokenKind.LeftBracket                          || this._kind == TokenKind.LeftParentheses                          || this._kind == TokenKind.Operator                          || this._kind == TokenKind.Punctuation                          || this._kind == TokenKind.Comma                          || this._kind == TokenKind.Space"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,TemplateLexer,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\TemplateLexer.cs,ReadToken,The conditional expression  "Char.IsNumber(this._scanner.Read(1)) &&                          (this._kind != TokenKind.Number                          && this._kind != TokenKind.RightBracket                          && this._kind != TokenKind.RightParentheses                          && this._kind != TokenKind.String                           && this._kind != TokenKind.Tag                          && this._kind != TokenKind.TextData)"  is complex.
Complex Conditional,JinianNet.JNTemplate.Parser,TemplateLexer,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\TemplateLexer.cs,ReadToken,The conditional expression  "(this._kind != tk || this._kind == TokenKind.LeftParentheses || this._kind == TokenKind.RightParentheses)                      && (tk != TokenKind.Number || this._kind != TokenKind.TextData)"  is complex.
Magic Number,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,GetPriority,The following statement contains a magic number: switch (c)              {                  case "||":                  case "|":                  case "&":                  case "&&":                  case "Or":                  case "LogicalOr":                  case "LogicAnd":                  case "And":                      return 5;                  case ">":                  case ">=":                  case "<":                  case "<=":                  case "==":                  case "!=":                    case "GreaterThan":                  case "GreaterThanOrEqual":                  case "LessThan":                  case "LessThanOrEqual":                  case "Equal":                  case "NotEqual":                      return 6;                  case "+":                  case "-":                    case "Plus":                  case "Minus":                      return 7;                  case "%":                  case "*":                    case "Percent":                  case "Times":                      return 8;                  case "/":                  case "Divided":                      return 9;                  default:                      return 9;              }
Magic Number,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,GetPriority,The following statement contains a magic number: switch (c)              {                  case "||":                  case "|":                  case "&":                  case "&&":                  case "Or":                  case "LogicalOr":                  case "LogicAnd":                  case "And":                      return 5;                  case ">":                  case ">=":                  case "<":                  case "<=":                  case "==":                  case "!=":                    case "GreaterThan":                  case "GreaterThanOrEqual":                  case "LessThan":                  case "LessThanOrEqual":                  case "Equal":                  case "NotEqual":                      return 6;                  case "+":                  case "-":                    case "Plus":                  case "Minus":                      return 7;                  case "%":                  case "*":                    case "Percent":                  case "Times":                      return 8;                  case "/":                  case "Divided":                      return 9;                  default:                      return 9;              }
Magic Number,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,GetPriority,The following statement contains a magic number: switch (c)              {                  case "||":                  case "|":                  case "&":                  case "&&":                  case "Or":                  case "LogicalOr":                  case "LogicAnd":                  case "And":                      return 5;                  case ">":                  case ">=":                  case "<":                  case "<=":                  case "==":                  case "!=":                    case "GreaterThan":                  case "GreaterThanOrEqual":                  case "LessThan":                  case "LessThanOrEqual":                  case "Equal":                  case "NotEqual":                      return 6;                  case "+":                  case "-":                    case "Plus":                  case "Minus":                      return 7;                  case "%":                  case "*":                    case "Percent":                  case "Times":                      return 8;                  case "/":                  case "Divided":                      return 9;                  default:                      return 9;              }
Magic Number,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,GetPriority,The following statement contains a magic number: switch (c)              {                  case "||":                  case "|":                  case "&":                  case "&&":                  case "Or":                  case "LogicalOr":                  case "LogicAnd":                  case "And":                      return 5;                  case ">":                  case ">=":                  case "<":                  case "<=":                  case "==":                  case "!=":                    case "GreaterThan":                  case "GreaterThanOrEqual":                  case "LessThan":                  case "LessThanOrEqual":                  case "Equal":                  case "NotEqual":                      return 6;                  case "+":                  case "-":                    case "Plus":                  case "Minus":                      return 7;                  case "%":                  case "*":                    case "Percent":                  case "Times":                      return 8;                  case "/":                  case "Divided":                      return 9;                  default:                      return 9;              }
Magic Number,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,GetPriority,The following statement contains a magic number: switch (c)              {                  case "||":                  case "|":                  case "&":                  case "&&":                  case "Or":                  case "LogicalOr":                  case "LogicAnd":                  case "And":                      return 5;                  case ">":                  case ">=":                  case "<":                  case "<=":                  case "==":                  case "!=":                    case "GreaterThan":                  case "GreaterThanOrEqual":                  case "LessThan":                  case "LessThanOrEqual":                  case "Equal":                  case "NotEqual":                      return 6;                  case "+":                  case "-":                    case "Plus":                  case "Minus":                      return 7;                  case "%":                  case "*":                    case "Percent":                  case "Times":                      return 8;                  case "/":                  case "Divided":                      return 9;                  default:                      return 9;              }
Magic Number,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,GetPriority,The following statement contains a magic number: switch (c)              {                  case "||":                  case "|":                  case "&":                  case "&&":                  case "Or":                  case "LogicalOr":                  case "LogicAnd":                  case "And":                      return 5;                  case ">":                  case ">=":                  case "<":                  case "<=":                  case "==":                  case "!=":                    case "GreaterThan":                  case "GreaterThanOrEqual":                  case "LessThan":                  case "LessThanOrEqual":                  case "Equal":                  case "NotEqual":                      return 6;                  case "+":                  case "-":                    case "Plus":                  case "Minus":                      return 7;                  case "%":                  case "*":                    case "Percent":                  case "Times":                      return 8;                  case "/":                  case "Divided":                      return 9;                  default:                      return 9;              }
Magic Number,JinianNet.JNTemplate.Parser,ComplexParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ComplexParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 2)              {                  Int32 start' end' pos;                  start = end = pos = 0;                    Boolean isFunc = false;                    List<Token> data = new List<Token>();                    Queue<TokenCollection> queue = new Queue<TokenCollection>();                    for (Int32 i = 0; i < tc.Count; i++)                  {                      end = i;                      if (tc[i].TokenKind == TokenKind.LeftParentheses)                      {                          if (pos == 0)                          {                              if (i > 0 && tc[i - 1].TokenKind == TokenKind.TextData)                              {                                  isFunc = true;                              }                          }                          pos++;                      }                      else if (tc[i].TokenKind == TokenKind.RightParentheses)                      {                          if (pos > 0)                          {                              pos--;                          }                          else                          {                              throw new Exception.ParseException(String.Concat("syntax error near ):"' tc)' data[i].BeginLine' data[i].BeginColumn);                          }                            if (pos == 0)                          {                              TokenCollection coll = new TokenCollection();                              if (!isFunc)                              {                                  coll.Add(tc' start + 1' end - 1);                              }                              else                              {                                  coll.Add(tc' start' end);                              }                              queue.Enqueue(coll);                              data.Add(null);                              start = i + 1;                              //tag.AddChild(parser.Read(coll));                          }                      }                      else if (pos == 0 && (tc[i].TokenKind == TokenKind.Dot || tc[i].TokenKind == TokenKind.Operator))                      {                          if (end > start)                          {                              TokenCollection coll = new TokenCollection();                              coll.Add(tc' start' end - 1);                              queue.Enqueue(coll);                              data.Add(null);                          }                          start = i + 1;                          data.Add(tc[i]);                      }                        if (i == tc.Count - 1 && end >= start)                      {                          if (start == 0 && end == i)                          {                              throw new Exception.ParseException(String.Concat("Unexpected  tag:"' tc)' tc[0].BeginLine' tc[0].BeginColumn);                          }                          TokenCollection coll = new TokenCollection();                          coll.Add(tc' start' end);                          queue.Enqueue(coll);                          data.Add(null);                          start = i + 1;                      }                  }                    if (queue.Count == 1 && queue.Peek().Equals(tc))                  {                      return null;                  }                  List<Tag> tags = new List<Tag>();                    for (Int32 i = 0; i < data.Count; i++)                  {                      if (data[i] == null)                      {                          tags.Add(parser.Read(queue.Dequeue()));                      }                      else if (data[i].TokenKind == TokenKind.Dot)                      {                          if (tags.Count == 0 || i == data.Count - 1 || data[i + 1] != null)                          {                              throw new Exception.ParseException(String.Concat("syntax error near .:"' tc)' data[i].BeginLine' data[i].BeginColumn);                          }                          if (tags[tags.Count - 1] is ReferenceTag)                          {                              tags[tags.Count - 1].AddChild(parser.Read(queue.Dequeue()));                          }                          else                          {                              ReferenceTag t = new ReferenceTag();                              t.AddChild(tags[tags.Count - 1]);                              t.AddChild(parser.Read(queue.Dequeue()));                              tags[tags.Count - 1] = t;                          }                          i++;                      }                      else if (data[i].TokenKind == TokenKind.Operator)                      {                          tags.Add(new TextTag());                          tags[tags.Count - 1].FirstToken = data[i];                        }                  }                    if (tags.Count == 1)                  {                      return tags[0];                  }                  if (tags.Count > 1)                  {                      ExpressionTag t = new ExpressionTag();                        for (Int32 i = 0; i < tags.Count; i++)                      {                          t.AddChild(tags[i]);                      }                        tags.Clear();                      return t;                  }              }
Magic Number,JinianNet.JNTemplate.Parser,ElseifParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ElseifParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 3                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_ELSEIF))              {                    if (tc[1].TokenKind == TokenKind.LeftParentheses                     && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      ElseifTag tag = new ElseifTag();                        TokenCollection coll = new TokenCollection();                      coll.Add(tc' 2' tc.Count - 2);                      tag.Test = parser.Read(coll);                        return tag;                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near if:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }              }
Magic Number,JinianNet.JNTemplate.Parser,ElseifParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ElseifParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 3                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_ELSEIF))              {                    if (tc[1].TokenKind == TokenKind.LeftParentheses                     && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      ElseifTag tag = new ElseifTag();                        TokenCollection coll = new TokenCollection();                      coll.Add(tc' 2' tc.Count - 2);                      tag.Test = parser.Read(coll);                        return tag;                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near if:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }              }
Magic Number,JinianNet.JNTemplate.Parser,ElseifParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ElseifParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 3                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_ELSEIF))              {                    if (tc[1].TokenKind == TokenKind.LeftParentheses                     && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      ElseifTag tag = new ElseifTag();                        TokenCollection coll = new TokenCollection();                      coll.Add(tc' 2' tc.Count - 2);                      tag.Test = parser.Read(coll);                        return tag;                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near if:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }              }
Magic Number,JinianNet.JNTemplate.Parser,ForeachParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForeachParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 0                   && Common.Utility.IsEqual(Field.KEY_FOREACH' tc.First.Text))              {                  if (tc.Count > 5                      && tc[1].TokenKind == TokenKind.LeftParentheses                      && tc[2].TokenKind == TokenKind.TextData                      && Common.Utility.IsEqual(tc[3].Text' Field.KEY_IN)                      && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      ForeachTag tag = new ForeachTag();                      tag.Name = tc[2].Text;                      TokenCollection coll = new TokenCollection();                      coll.Add(tc' 4' tc.Count - 2);                      tag.Source = parser.Read(coll);                        while (parser.MoveNext())                      {                          tag.Children.Add(parser.Current);                          if (parser.Current is EndTag)                          {                              return tag;                          }                      }                        throw new Exception.ParseException(String.Concat("foreach is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near foreach:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                }
Magic Number,JinianNet.JNTemplate.Parser,ForeachParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForeachParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 0                   && Common.Utility.IsEqual(Field.KEY_FOREACH' tc.First.Text))              {                  if (tc.Count > 5                      && tc[1].TokenKind == TokenKind.LeftParentheses                      && tc[2].TokenKind == TokenKind.TextData                      && Common.Utility.IsEqual(tc[3].Text' Field.KEY_IN)                      && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      ForeachTag tag = new ForeachTag();                      tag.Name = tc[2].Text;                      TokenCollection coll = new TokenCollection();                      coll.Add(tc' 4' tc.Count - 2);                      tag.Source = parser.Read(coll);                        while (parser.MoveNext())                      {                          tag.Children.Add(parser.Current);                          if (parser.Current is EndTag)                          {                              return tag;                          }                      }                        throw new Exception.ParseException(String.Concat("foreach is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near foreach:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                }
Magic Number,JinianNet.JNTemplate.Parser,ForeachParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForeachParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 0                   && Common.Utility.IsEqual(Field.KEY_FOREACH' tc.First.Text))              {                  if (tc.Count > 5                      && tc[1].TokenKind == TokenKind.LeftParentheses                      && tc[2].TokenKind == TokenKind.TextData                      && Common.Utility.IsEqual(tc[3].Text' Field.KEY_IN)                      && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      ForeachTag tag = new ForeachTag();                      tag.Name = tc[2].Text;                      TokenCollection coll = new TokenCollection();                      coll.Add(tc' 4' tc.Count - 2);                      tag.Source = parser.Read(coll);                        while (parser.MoveNext())                      {                          tag.Children.Add(parser.Current);                          if (parser.Current is EndTag)                          {                              return tag;                          }                      }                        throw new Exception.ParseException(String.Concat("foreach is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near foreach:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                }
Magic Number,JinianNet.JNTemplate.Parser,ForeachParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForeachParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 0                   && Common.Utility.IsEqual(Field.KEY_FOREACH' tc.First.Text))              {                  if (tc.Count > 5                      && tc[1].TokenKind == TokenKind.LeftParentheses                      && tc[2].TokenKind == TokenKind.TextData                      && Common.Utility.IsEqual(tc[3].Text' Field.KEY_IN)                      && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      ForeachTag tag = new ForeachTag();                      tag.Name = tc[2].Text;                      TokenCollection coll = new TokenCollection();                      coll.Add(tc' 4' tc.Count - 2);                      tag.Source = parser.Read(coll);                        while (parser.MoveNext())                      {                          tag.Children.Add(parser.Current);                          if (parser.Current is EndTag)                          {                              return tag;                          }                      }                        throw new Exception.ParseException(String.Concat("foreach is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near foreach:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                }
Magic Number,JinianNet.JNTemplate.Parser,ForeachParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForeachParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 0                   && Common.Utility.IsEqual(Field.KEY_FOREACH' tc.First.Text))              {                  if (tc.Count > 5                      && tc[1].TokenKind == TokenKind.LeftParentheses                      && tc[2].TokenKind == TokenKind.TextData                      && Common.Utility.IsEqual(tc[3].Text' Field.KEY_IN)                      && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      ForeachTag tag = new ForeachTag();                      tag.Name = tc[2].Text;                      TokenCollection coll = new TokenCollection();                      coll.Add(tc' 4' tc.Count - 2);                      tag.Source = parser.Read(coll);                        while (parser.MoveNext())                      {                          tag.Children.Add(parser.Current);                          if (parser.Current is EndTag)                          {                              return tag;                          }                      }                        throw new Exception.ParseException(String.Concat("foreach is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near foreach:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                }
Magic Number,JinianNet.JNTemplate.Parser,ForeachParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForeachParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 0                   && Common.Utility.IsEqual(Field.KEY_FOREACH' tc.First.Text))              {                  if (tc.Count > 5                      && tc[1].TokenKind == TokenKind.LeftParentheses                      && tc[2].TokenKind == TokenKind.TextData                      && Common.Utility.IsEqual(tc[3].Text' Field.KEY_IN)                      && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      ForeachTag tag = new ForeachTag();                      tag.Name = tc[2].Text;                      TokenCollection coll = new TokenCollection();                      coll.Add(tc' 4' tc.Count - 2);                      tag.Source = parser.Read(coll);                        while (parser.MoveNext())                      {                          tag.Children.Add(parser.Current);                          if (parser.Current is EndTag)                          {                              return tag;                          }                      }                        throw new Exception.ParseException(String.Concat("foreach is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near foreach:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                }
Magic Number,JinianNet.JNTemplate.Parser,ForParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 3                   && Common.Utility.IsEqual(Field.KEY_FOR' tc.First.Text))              {                    if (tc[1].TokenKind == TokenKind.LeftParentheses                     && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      Int32 pos = 0'                          start = 2'                          end;                        List<Tag> ts = new List<Tag>(3);                        ForTag tag = new ForTag();                      for (Int32 i = 2; i < tc.Count - 1; i++)                      {                          end = i;                          if (tc[i].TokenKind == TokenKind.Punctuation && tc[i].Text == ";")                          {                              if (pos == 0)                              {                                  TokenCollection coll = new TokenCollection();                                  coll.Add(tc' start' end - 1);                                  if (coll.Count > 0)                                  {                                      ts.Add(parser.Read(coll));                                  }                                  else                                  {                                      ts.Add(null);                                  }                                  start = i + 1;                                  continue;                              }                          }                            if (tc[i].TokenKind == TokenKind.LeftParentheses)                          {                              pos++;                          }                          else if (tc[i].TokenKind == TokenKind.RightParentheses)                          {                              pos--;                          }                          if (i == tc.Count - 2)                          {                              TokenCollection coll = new TokenCollection();                              coll.Add(tc' start' end);                              if (coll.Count > 0)                              {                                  ts.Add(parser.Read(coll));                              }                              else                              {                                  ts.Add(null);                              }                          }                      }                        if (ts.Count != 3)                      {                          throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                      }                        tag.Initial = ts[0];                      tag.Test = ts[1];                      tag.Do = ts[2];                        while (parser.MoveNext())                      {                          tag.Children.Add(parser.Current);                          if (parser.Current is EndTag)                          {                              return tag;                          }                      }                        throw new Exception.ParseException(String.Concat("for is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }              }
Magic Number,JinianNet.JNTemplate.Parser,ForParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 3                   && Common.Utility.IsEqual(Field.KEY_FOR' tc.First.Text))              {                    if (tc[1].TokenKind == TokenKind.LeftParentheses                     && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      Int32 pos = 0'                          start = 2'                          end;                        List<Tag> ts = new List<Tag>(3);                        ForTag tag = new ForTag();                      for (Int32 i = 2; i < tc.Count - 1; i++)                      {                          end = i;                          if (tc[i].TokenKind == TokenKind.Punctuation && tc[i].Text == ";")                          {                              if (pos == 0)                              {                                  TokenCollection coll = new TokenCollection();                                  coll.Add(tc' start' end - 1);                                  if (coll.Count > 0)                                  {                                      ts.Add(parser.Read(coll));                                  }                                  else                                  {                                      ts.Add(null);                                  }                                  start = i + 1;                                  continue;                              }                          }                            if (tc[i].TokenKind == TokenKind.LeftParentheses)                          {                              pos++;                          }                          else if (tc[i].TokenKind == TokenKind.RightParentheses)                          {                              pos--;                          }                          if (i == tc.Count - 2)                          {                              TokenCollection coll = new TokenCollection();                              coll.Add(tc' start' end);                              if (coll.Count > 0)                              {                                  ts.Add(parser.Read(coll));                              }                              else                              {                                  ts.Add(null);                              }                          }                      }                        if (ts.Count != 3)                      {                          throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                      }                        tag.Initial = ts[0];                      tag.Test = ts[1];                      tag.Do = ts[2];                        while (parser.MoveNext())                      {                          tag.Children.Add(parser.Current);                          if (parser.Current is EndTag)                          {                              return tag;                          }                      }                        throw new Exception.ParseException(String.Concat("for is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }              }
Magic Number,JinianNet.JNTemplate.Parser,ForParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 3                   && Common.Utility.IsEqual(Field.KEY_FOR' tc.First.Text))              {                    if (tc[1].TokenKind == TokenKind.LeftParentheses                     && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      Int32 pos = 0'                          start = 2'                          end;                        List<Tag> ts = new List<Tag>(3);                        ForTag tag = new ForTag();                      for (Int32 i = 2; i < tc.Count - 1; i++)                      {                          end = i;                          if (tc[i].TokenKind == TokenKind.Punctuation && tc[i].Text == ";")                          {                              if (pos == 0)                              {                                  TokenCollection coll = new TokenCollection();                                  coll.Add(tc' start' end - 1);                                  if (coll.Count > 0)                                  {                                      ts.Add(parser.Read(coll));                                  }                                  else                                  {                                      ts.Add(null);                                  }                                  start = i + 1;                                  continue;                              }                          }                            if (tc[i].TokenKind == TokenKind.LeftParentheses)                          {                              pos++;                          }                          else if (tc[i].TokenKind == TokenKind.RightParentheses)                          {                              pos--;                          }                          if (i == tc.Count - 2)                          {                              TokenCollection coll = new TokenCollection();                              coll.Add(tc' start' end);                              if (coll.Count > 0)                              {                                  ts.Add(parser.Read(coll));                              }                              else                              {                                  ts.Add(null);                              }                          }                      }                        if (ts.Count != 3)                      {                          throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                      }                        tag.Initial = ts[0];                      tag.Test = ts[1];                      tag.Do = ts[2];                        while (parser.MoveNext())                      {                          tag.Children.Add(parser.Current);                          if (parser.Current is EndTag)                          {                              return tag;                          }                      }                        throw new Exception.ParseException(String.Concat("for is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }              }
Magic Number,JinianNet.JNTemplate.Parser,ForParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 3                   && Common.Utility.IsEqual(Field.KEY_FOR' tc.First.Text))              {                    if (tc[1].TokenKind == TokenKind.LeftParentheses                     && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      Int32 pos = 0'                          start = 2'                          end;                        List<Tag> ts = new List<Tag>(3);                        ForTag tag = new ForTag();                      for (Int32 i = 2; i < tc.Count - 1; i++)                      {                          end = i;                          if (tc[i].TokenKind == TokenKind.Punctuation && tc[i].Text == ";")                          {                              if (pos == 0)                              {                                  TokenCollection coll = new TokenCollection();                                  coll.Add(tc' start' end - 1);                                  if (coll.Count > 0)                                  {                                      ts.Add(parser.Read(coll));                                  }                                  else                                  {                                      ts.Add(null);                                  }                                  start = i + 1;                                  continue;                              }                          }                            if (tc[i].TokenKind == TokenKind.LeftParentheses)                          {                              pos++;                          }                          else if (tc[i].TokenKind == TokenKind.RightParentheses)                          {                              pos--;                          }                          if (i == tc.Count - 2)                          {                              TokenCollection coll = new TokenCollection();                              coll.Add(tc' start' end);                              if (coll.Count > 0)                              {                                  ts.Add(parser.Read(coll));                              }                              else                              {                                  ts.Add(null);                              }                          }                      }                        if (ts.Count != 3)                      {                          throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                      }                        tag.Initial = ts[0];                      tag.Test = ts[1];                      tag.Do = ts[2];                        while (parser.MoveNext())                      {                          tag.Children.Add(parser.Current);                          if (parser.Current is EndTag)                          {                              return tag;                          }                      }                        throw new Exception.ParseException(String.Concat("for is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }              }
Magic Number,JinianNet.JNTemplate.Parser,ForParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 3                   && Common.Utility.IsEqual(Field.KEY_FOR' tc.First.Text))              {                    if (tc[1].TokenKind == TokenKind.LeftParentheses                     && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      Int32 pos = 0'                          start = 2'                          end;                        List<Tag> ts = new List<Tag>(3);                        ForTag tag = new ForTag();                      for (Int32 i = 2; i < tc.Count - 1; i++)                      {                          end = i;                          if (tc[i].TokenKind == TokenKind.Punctuation && tc[i].Text == ";")                          {                              if (pos == 0)                              {                                  TokenCollection coll = new TokenCollection();                                  coll.Add(tc' start' end - 1);                                  if (coll.Count > 0)                                  {                                      ts.Add(parser.Read(coll));                                  }                                  else                                  {                                      ts.Add(null);                                  }                                  start = i + 1;                                  continue;                              }                          }                            if (tc[i].TokenKind == TokenKind.LeftParentheses)                          {                              pos++;                          }                          else if (tc[i].TokenKind == TokenKind.RightParentheses)                          {                              pos--;                          }                          if (i == tc.Count - 2)                          {                              TokenCollection coll = new TokenCollection();                              coll.Add(tc' start' end);                              if (coll.Count > 0)                              {                                  ts.Add(parser.Read(coll));                              }                              else                              {                                  ts.Add(null);                              }                          }                      }                        if (ts.Count != 3)                      {                          throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                      }                        tag.Initial = ts[0];                      tag.Test = ts[1];                      tag.Do = ts[2];                        while (parser.MoveNext())                      {                          tag.Children.Add(parser.Current);                          if (parser.Current is EndTag)                          {                              return tag;                          }                      }                        throw new Exception.ParseException(String.Concat("for is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }              }
Magic Number,JinianNet.JNTemplate.Parser,ForParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 3                   && Common.Utility.IsEqual(Field.KEY_FOR' tc.First.Text))              {                    if (tc[1].TokenKind == TokenKind.LeftParentheses                     && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      Int32 pos = 0'                          start = 2'                          end;                        List<Tag> ts = new List<Tag>(3);                        ForTag tag = new ForTag();                      for (Int32 i = 2; i < tc.Count - 1; i++)                      {                          end = i;                          if (tc[i].TokenKind == TokenKind.Punctuation && tc[i].Text == ";")                          {                              if (pos == 0)                              {                                  TokenCollection coll = new TokenCollection();                                  coll.Add(tc' start' end - 1);                                  if (coll.Count > 0)                                  {                                      ts.Add(parser.Read(coll));                                  }                                  else                                  {                                      ts.Add(null);                                  }                                  start = i + 1;                                  continue;                              }                          }                            if (tc[i].TokenKind == TokenKind.LeftParentheses)                          {                              pos++;                          }                          else if (tc[i].TokenKind == TokenKind.RightParentheses)                          {                              pos--;                          }                          if (i == tc.Count - 2)                          {                              TokenCollection coll = new TokenCollection();                              coll.Add(tc' start' end);                              if (coll.Count > 0)                              {                                  ts.Add(parser.Read(coll));                              }                              else                              {                                  ts.Add(null);                              }                          }                      }                        if (ts.Count != 3)                      {                          throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                      }                        tag.Initial = ts[0];                      tag.Test = ts[1];                      tag.Do = ts[2];                        while (parser.MoveNext())                      {                          tag.Children.Add(parser.Current);                          if (parser.Current is EndTag)                          {                              return tag;                          }                      }                        throw new Exception.ParseException(String.Concat("for is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }              }
Magic Number,JinianNet.JNTemplate.Parser,ForParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\ForParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 3                   && Common.Utility.IsEqual(Field.KEY_FOR' tc.First.Text))              {                    if (tc[1].TokenKind == TokenKind.LeftParentheses                     && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      Int32 pos = 0'                          start = 2'                          end;                        List<Tag> ts = new List<Tag>(3);                        ForTag tag = new ForTag();                      for (Int32 i = 2; i < tc.Count - 1; i++)                      {                          end = i;                          if (tc[i].TokenKind == TokenKind.Punctuation && tc[i].Text == ";")                          {                              if (pos == 0)                              {                                  TokenCollection coll = new TokenCollection();                                  coll.Add(tc' start' end - 1);                                  if (coll.Count > 0)                                  {                                      ts.Add(parser.Read(coll));                                  }                                  else                                  {                                      ts.Add(null);                                  }                                  start = i + 1;                                  continue;                              }                          }                            if (tc[i].TokenKind == TokenKind.LeftParentheses)                          {                              pos++;                          }                          else if (tc[i].TokenKind == TokenKind.RightParentheses)                          {                              pos--;                          }                          if (i == tc.Count - 2)                          {                              TokenCollection coll = new TokenCollection();                              coll.Add(tc' start' end);                              if (coll.Count > 0)                              {                                  ts.Add(parser.Read(coll));                              }                              else                              {                                  ts.Add(null);                              }                          }                      }                        if (ts.Count != 3)                      {                          throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                      }                        tag.Initial = ts[0];                      tag.Test = ts[1];                      tag.Do = ts[2];                        while (parser.MoveNext())                      {                          tag.Children.Add(parser.Current);                          if (parser.Current is EndTag)                          {                              return tag;                          }                      }                        throw new Exception.ParseException(String.Concat("for is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near for:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }              }
Magic Number,JinianNet.JNTemplate.Parser,FunctionParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\FunctionParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.First.TokenKind == TokenKind.TextData                  && tc.Count > 2                  && (tc[1].TokenKind == TokenKind.LeftParentheses)                  && tc.Last.TokenKind == TokenKind.RightParentheses)              {                  FunctaionTag tag = new FunctaionTag();                    tag.Name = tc.First.Text;                    Int32 pos = 0'                      start = 2'                      end;                    for (Int32 i = 2; i < tc.Count; i++)                  {                      end = i;                      switch (tc[i].TokenKind)                      {                          case TokenKind.Comma:                              if (pos == 0)                              {                                  TokenCollection coll = new TokenCollection();                                  coll.Add(tc' start' end - 1);                                  if (coll.Count > 0)                                  {                                      tag.AddChild(parser.Read(coll));                                  }                                  start = i + 1;                              }                              break;                          default:                              if (tc[i].TokenKind == TokenKind.LeftParentheses)                              {                                  pos++;                              }                              else if (tc[i].TokenKind == TokenKind.RightParentheses)                              {                                  pos--;                              }                              if (i == tc.Count - 1)                              {                                  TokenCollection coll = new TokenCollection();                                  coll.Add(tc' start' end - 1);                                  if (coll.Count > 0)                                  {                                      tag.AddChild(parser.Read(coll));                                  }                              }                              break;                      }                    }                    return tag;                }
Magic Number,JinianNet.JNTemplate.Parser,FunctionParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\FunctionParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.First.TokenKind == TokenKind.TextData                  && tc.Count > 2                  && (tc[1].TokenKind == TokenKind.LeftParentheses)                  && tc.Last.TokenKind == TokenKind.RightParentheses)              {                  FunctaionTag tag = new FunctaionTag();                    tag.Name = tc.First.Text;                    Int32 pos = 0'                      start = 2'                      end;                    for (Int32 i = 2; i < tc.Count; i++)                  {                      end = i;                      switch (tc[i].TokenKind)                      {                          case TokenKind.Comma:                              if (pos == 0)                              {                                  TokenCollection coll = new TokenCollection();                                  coll.Add(tc' start' end - 1);                                  if (coll.Count > 0)                                  {                                      tag.AddChild(parser.Read(coll));                                  }                                  start = i + 1;                              }                              break;                          default:                              if (tc[i].TokenKind == TokenKind.LeftParentheses)                              {                                  pos++;                              }                              else if (tc[i].TokenKind == TokenKind.RightParentheses)                              {                                  pos--;                              }                              if (i == tc.Count - 1)                              {                                  TokenCollection coll = new TokenCollection();                                  coll.Add(tc' start' end - 1);                                  if (coll.Count > 0)                                  {                                      tag.AddChild(parser.Read(coll));                                  }                              }                              break;                      }                    }                    return tag;                }
Magic Number,JinianNet.JNTemplate.Parser,FunctionParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\FunctionParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.First.TokenKind == TokenKind.TextData                  && tc.Count > 2                  && (tc[1].TokenKind == TokenKind.LeftParentheses)                  && tc.Last.TokenKind == TokenKind.RightParentheses)              {                  FunctaionTag tag = new FunctaionTag();                    tag.Name = tc.First.Text;                    Int32 pos = 0'                      start = 2'                      end;                    for (Int32 i = 2; i < tc.Count; i++)                  {                      end = i;                      switch (tc[i].TokenKind)                      {                          case TokenKind.Comma:                              if (pos == 0)                              {                                  TokenCollection coll = new TokenCollection();                                  coll.Add(tc' start' end - 1);                                  if (coll.Count > 0)                                  {                                      tag.AddChild(parser.Read(coll));                                  }                                  start = i + 1;                              }                              break;                          default:                              if (tc[i].TokenKind == TokenKind.LeftParentheses)                              {                                  pos++;                              }                              else if (tc[i].TokenKind == TokenKind.RightParentheses)                              {                                  pos--;                              }                              if (i == tc.Count - 1)                              {                                  TokenCollection coll = new TokenCollection();                                  coll.Add(tc' start' end - 1);                                  if (coll.Count > 0)                                  {                                      tag.AddChild(parser.Read(coll));                                  }                              }                              break;                      }                    }                    return tag;                }
Magic Number,JinianNet.JNTemplate.Parser,IfParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\IfParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 3                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_IF))              {                    if (tc[1].TokenKind == TokenKind.LeftParentheses                     && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      IfTag tag = new IfTag();                        ElseifTag t = new ElseifTag();                      TokenCollection coll = new TokenCollection();                      coll.Add(tc' 2' tc.Count - 2);                      t.Test = parser.Read(coll);                      t.FirstToken = coll.First;                      //t.LastToken = coll.Last;                      tag.AddChild(t);                        while (parser.MoveNext())                      {                          if (parser.Current is EndTag)                          {                              tag.AddChild(parser.Current);                              return tag;                          }                          else if (parser.Current is ElseifTag                              || parser.Current is ElseTag)                          {                              tag.AddChild(parser.Current);                          }                          else                          {                              tag.Children[tag.Children.Count - 1].AddChild(parser.Current);                          }                      }                        throw new Exception.ParseException(String.Concat("if is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near if:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                }
Magic Number,JinianNet.JNTemplate.Parser,IfParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\IfParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 3                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_IF))              {                    if (tc[1].TokenKind == TokenKind.LeftParentheses                     && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      IfTag tag = new IfTag();                        ElseifTag t = new ElseifTag();                      TokenCollection coll = new TokenCollection();                      coll.Add(tc' 2' tc.Count - 2);                      t.Test = parser.Read(coll);                      t.FirstToken = coll.First;                      //t.LastToken = coll.Last;                      tag.AddChild(t);                        while (parser.MoveNext())                      {                          if (parser.Current is EndTag)                          {                              tag.AddChild(parser.Current);                              return tag;                          }                          else if (parser.Current is ElseifTag                              || parser.Current is ElseTag)                          {                              tag.AddChild(parser.Current);                          }                          else                          {                              tag.Children[tag.Children.Count - 1].AddChild(parser.Current);                          }                      }                        throw new Exception.ParseException(String.Concat("if is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near if:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                }
Magic Number,JinianNet.JNTemplate.Parser,IfParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\IfParser.cs,Parse,The following statement contains a magic number: if (tc != null                  && parser != null                  && tc.Count > 3                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_IF))              {                    if (tc[1].TokenKind == TokenKind.LeftParentheses                     && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      IfTag tag = new IfTag();                        ElseifTag t = new ElseifTag();                      TokenCollection coll = new TokenCollection();                      coll.Add(tc' 2' tc.Count - 2);                      t.Test = parser.Read(coll);                      t.FirstToken = coll.First;                      //t.LastToken = coll.Last;                      tag.AddChild(t);                        while (parser.MoveNext())                      {                          if (parser.Current is EndTag)                          {                              tag.AddChild(parser.Current);                              return tag;                          }                          else if (parser.Current is ElseifTag                              || parser.Current is ElseTag)                          {                              tag.AddChild(parser.Current);                          }                          else                          {                              tag.Children[tag.Children.Count - 1].AddChild(parser.Current);                          }                      }                        throw new Exception.ParseException(String.Concat("if is not properly closed by a end tag:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                  else                  {                      throw new Exception.ParseException(String.Concat("syntax error near if:"' tc)' tc.First.BeginLine' tc.First.BeginColumn);                  }                }
Magic Number,JinianNet.JNTemplate.Parser,IncludeParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\IncludeParser.cs,Parse,The following statement contains a magic number: if (Common.Utility.IsEqual(tc.First.Text' Field.KEY_INCLUDE))              {                  if (tc != null                      && parser != null                      && tc.Count > 2                      && (tc[1].TokenKind == TokenKind.LeftParentheses)                      && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      IncludeTag tag = new IncludeTag();                      tag.Path = parser.Read(new TokenCollection(tc' 2' tc.Count - 2));                      return tag;                  }              }
Magic Number,JinianNet.JNTemplate.Parser,IncludeParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\IncludeParser.cs,Parse,The following statement contains a magic number: if (Common.Utility.IsEqual(tc.First.Text' Field.KEY_INCLUDE))              {                  if (tc != null                      && parser != null                      && tc.Count > 2                      && (tc[1].TokenKind == TokenKind.LeftParentheses)                      && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      IncludeTag tag = new IncludeTag();                      tag.Path = parser.Read(new TokenCollection(tc' 2' tc.Count - 2));                      return tag;                  }              }
Magic Number,JinianNet.JNTemplate.Parser,IncludeParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\IncludeParser.cs,Parse,The following statement contains a magic number: if (Common.Utility.IsEqual(tc.First.Text' Field.KEY_INCLUDE))              {                  if (tc != null                      && parser != null                      && tc.Count > 2                      && (tc[1].TokenKind == TokenKind.LeftParentheses)                      && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      IncludeTag tag = new IncludeTag();                      tag.Path = parser.Read(new TokenCollection(tc' 2' tc.Count - 2));                      return tag;                  }              }
Magic Number,JinianNet.JNTemplate.Parser,LoadParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\LoadParser.cs,Parse,The following statement contains a magic number: if (Common.Utility.IsEqual(tc.First.Text' Field.KEY_LOAD))              {                  if (tc != null                      && parser != null                      && tc.Count > 2                      && (tc[1].TokenKind == TokenKind.LeftParentheses)                      && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      LoadTag tag = new LoadTag();                      tag.Path = parser.Read(new TokenCollection(tc' 2' tc.Count - 2));                      return tag;                  }              }
Magic Number,JinianNet.JNTemplate.Parser,LoadParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\LoadParser.cs,Parse,The following statement contains a magic number: if (Common.Utility.IsEqual(tc.First.Text' Field.KEY_LOAD))              {                  if (tc != null                      && parser != null                      && tc.Count > 2                      && (tc[1].TokenKind == TokenKind.LeftParentheses)                      && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      LoadTag tag = new LoadTag();                      tag.Path = parser.Read(new TokenCollection(tc' 2' tc.Count - 2));                      return tag;                  }              }
Magic Number,JinianNet.JNTemplate.Parser,LoadParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\LoadParser.cs,Parse,The following statement contains a magic number: if (Common.Utility.IsEqual(tc.First.Text' Field.KEY_LOAD))              {                  if (tc != null                      && parser != null                      && tc.Count > 2                      && (tc[1].TokenKind == TokenKind.LeftParentheses)                      && tc.Last.TokenKind == TokenKind.RightParentheses)                  {                      LoadTag tag = new LoadTag();                      tag.Path = parser.Read(new TokenCollection(tc' 2' tc.Count - 2));                      return tag;                  }              }
Magic Number,JinianNet.JNTemplate.Parser,SetParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\SetParser.cs,Parse,The following statement contains a magic number: if (tc.Count > 5                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_SET)                  && tc[1].TokenKind == TokenKind.LeftParentheses                  && tc[3].Text == "="                  && tc.Last.TokenKind == TokenKind.RightParentheses)              {                  SetTag tag = new SetTag();                  tag.Name = tc[2].Text;                    TokenCollection coll = new TokenCollection();                  coll.Add(tc' 4' tc.Count - 2);                    tag.Value = parser.Read(coll);                  return tag;                }
Magic Number,JinianNet.JNTemplate.Parser,SetParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\SetParser.cs,Parse,The following statement contains a magic number: if (tc.Count > 5                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_SET)                  && tc[1].TokenKind == TokenKind.LeftParentheses                  && tc[3].Text == "="                  && tc.Last.TokenKind == TokenKind.RightParentheses)              {                  SetTag tag = new SetTag();                  tag.Name = tc[2].Text;                    TokenCollection coll = new TokenCollection();                  coll.Add(tc' 4' tc.Count - 2);                    tag.Value = parser.Read(coll);                  return tag;                }
Magic Number,JinianNet.JNTemplate.Parser,SetParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\SetParser.cs,Parse,The following statement contains a magic number: if (tc.Count > 5                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_SET)                  && tc[1].TokenKind == TokenKind.LeftParentheses                  && tc[3].Text == "="                  && tc.Last.TokenKind == TokenKind.RightParentheses)              {                  SetTag tag = new SetTag();                  tag.Name = tc[2].Text;                    TokenCollection coll = new TokenCollection();                  coll.Add(tc' 4' tc.Count - 2);                    tag.Value = parser.Read(coll);                  return tag;                }
Magic Number,JinianNet.JNTemplate.Parser,SetParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\SetParser.cs,Parse,The following statement contains a magic number: if (tc.Count > 5                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_SET)                  && tc[1].TokenKind == TokenKind.LeftParentheses                  && tc[3].Text == "="                  && tc.Last.TokenKind == TokenKind.RightParentheses)              {                  SetTag tag = new SetTag();                  tag.Name = tc[2].Text;                    TokenCollection coll = new TokenCollection();                  coll.Add(tc' 4' tc.Count - 2);                    tag.Value = parser.Read(coll);                  return tag;                }
Magic Number,JinianNet.JNTemplate.Parser,SetParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\SetParser.cs,Parse,The following statement contains a magic number: if (tc.Count > 5                  && Common.Utility.IsEqual(tc.First.Text' Field.KEY_SET)                  && tc[1].TokenKind == TokenKind.LeftParentheses                  && tc[3].Text == "="                  && tc.Last.TokenKind == TokenKind.RightParentheses)              {                  SetTag tag = new SetTag();                  tag.Name = tc[2].Text;                    TokenCollection coll = new TokenCollection();                  coll.Add(tc' 4' tc.Count - 2);                    tag.Value = parser.Read(coll);                  return tag;                }
Magic Number,JinianNet.JNTemplate.Parser,SetParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\SetParser.cs,Parse,The following statement contains a magic number: if (tc.Count == 2                  && tc.First.TokenKind == TokenKind.TextData                  && tc.Last.TokenKind == TokenKind.Operator                  && (tc.Last.Text == "++" || tc.Last.Text == "--"))              {                  SetTag tag = new SetTag();                  tag.Name = tc.First.Text;                    ExpressionTag c = new ExpressionTag();                  c.AddChild(new VariableTag()                  {                      FirstToken = tc.First'                      Name = tc.First.Text                  });                  c.AddChild(new TextTag()                  {                      FirstToken = new Token(TokenKind.Operator' tc.Last.Text[0].ToString())                  });                  c.AddChild(new NumberTag()                  {                      Value = 1'                      FirstToken = new Token(TokenKind.Number' "1")                  });                    tag.Value = c;                  return tag;              }
Magic Number,JinianNet.JNTemplate.Parser,SetParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\SetParser.cs,Parse,The following statement contains a magic number: if (tc.Count > 2                  && tc.First.TokenKind == TokenKind.TextData                  && tc[1].Text == "=")              {                  SetTag tag = new SetTag();                  tag.Name = tc.First.Text;                    TokenCollection coll = new TokenCollection();                  coll.Add(tc' 2' tc.Count - 1);                    tag.Value = parser.Read(coll);                  return tag;              }
Magic Number,JinianNet.JNTemplate.Parser,SetParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\SetParser.cs,Parse,The following statement contains a magic number: if (tc.Count > 2                  && tc.First.TokenKind == TokenKind.TextData                  && tc[1].Text == "=")              {                  SetTag tag = new SetTag();                  tag.Name = tc.First.Text;                    TokenCollection coll = new TokenCollection();                  coll.Add(tc' 2' tc.Count - 1);                    tag.Value = parser.Read(coll);                  return tag;              }
Magic Number,JinianNet.JNTemplate.Parser,StringParser,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\StringParser.cs,Parse,The following statement contains a magic number: if (tc!=null                  && tc.Count == 3                  && tc.First.TokenKind == TokenKind.StringStart                  && tc[1].TokenKind == TokenKind.String                  && tc.Last.TokenKind == TokenKind.StringEnd                  )              {                  StringTag tag = new StringTag();                  tag.Value = tc[1].Text;                  return tag;              }
Magic Number,JinianNet.JNTemplate.Parser,TemplateLexer,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\TemplateLexer.cs,ReadEndToken,The following statement contains a magic number: if (IsTagEnd())              {                  Boolean add = true;                  if (this._flagMode == FlagMode.Full)                  {                      AddToken(TokenKind.TagEnd);                      Next(this._suffix.Length);                  }  #if ALLOWCOMMENT                  else if (this._flagMode == FlagMode.Comment)                  {                      GetToken(TokenKind.TagEnd);                      Next(2);                      add = false;                  }  #endif                  else                  {                      AddToken(TokenKind.TagEnd);                  }                  this._flagMode = FlagMode.None;                  Token token;                    if (IsTagStart())                  {                      token = GetToken(TokenKind.TagStart);                  }                  else                  {                      token = GetToken(TokenKind.Text);                  }                    if (add)                  {                      AddToken(token);                  }                    return true;              }
Magic Number,JinianNet.JNTemplate.Parser,TemplateLexer,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\TemplateLexer.cs,ReadToken,The following statement contains a magic number: while (Next())              {                  if (this._scanner.Read() == '"')                  {                      if (this._pos.Count > 0 && this._pos.Peek() == "\"")                      {                          if (this._scanner.Read(-1) != '\\'                              || GetPrevCharCount('\\') % 2 == 0)                          {                              if (this._kind == TokenKind.StringStart)                              {                                  AddToken(TokenKind.String);                              }                              AddToken(TokenKind.StringEnd);                              this._pos.Pop();                          }                          continue;                      }                        if (this._kind == TokenKind.TagStart                          || this._kind == TokenKind.LeftBracket                          || this._kind == TokenKind.LeftParentheses                          || this._kind == TokenKind.Operator                          || this._kind == TokenKind.Punctuation                          || this._kind == TokenKind.Comma                          || this._kind == TokenKind.Space)                      {                          AddToken(TokenKind.StringStart);                          this._pos.Push("\"");                          continue;                      }                  }                    if (this._kind == TokenKind.StringStart)                  {                      AddToken(TokenKind.String);                      continue;                  }                    if (this._kind == TokenKind.String)                  {                      continue;                  }                    if (this._scanner.Read() == '(')                  {                      this._pos.Push("(");                  }                  else if (this._scanner.Read() == ')' && this._pos.Count > 0 && this._pos.Peek() == "(")// && this.pos.Count > 2                  {                      this._pos.Pop();                      if (this._pos.Count == 1)                      {                        }                  }                  else if (ReadEndToken())                  {                      break;                  }                    TokenKind tk;                  if (this._scanner.Read() == '+' || this._scanner.Read() == '-') //正负数符号识别                  {                      if (Char.IsNumber(this._scanner.Read(1)) &&                          (this._kind != TokenKind.Number                          && this._kind != TokenKind.RightBracket                          && this._kind != TokenKind.RightParentheses                          && this._kind != TokenKind.String                           && this._kind != TokenKind.Tag                          && this._kind != TokenKind.TextData))                      {                          tk = TokenKind.Number;                      }                      else                      {                          tk = TokenKind.Operator;                      }                  }                  else                  {                      tk = GetTokenKind(this._scanner.Read());                  }                  //if (this.kind == tk || (tk == TokenKind.Number && this.kind == TokenKind.TextData))                  if ((this._kind != tk || this._kind == TokenKind.LeftParentheses || this._kind == TokenKind.RightParentheses)                      && (tk != TokenKind.Number || this._kind != TokenKind.TextData)                      //&& (this.kind == TokenKind.Number && tk != TokenKind.Dot)                      )                  //|| (this.kind != TokenKind.Number && tk == TokenKind.Dot)                  {                      if (tk == TokenKind.Dot && this._kind == TokenKind.Number)                      {                        }                      else                      {                          AddToken(tk);                      }                  }                }
Missing Default,JinianNet.JNTemplate.Common,ExpressionEvaluator,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Common\ExpressionEvaluator.cs,ProcessExpression,The following switch statement is missing a default case: switch (value[i])                  {                      case '+':                      case '-':                      case '*':                      case '/':                      case '(':                      case ')':                      case '%':                          if (j < i)                          {                              num = value.Substring(j' i - j);                              if (num.IndexOf('.') == -1)                              {                                  result.Add(Int32.Parse(value.Substring(j' i - j)));                              }                              else                              {                                  result.Add(Double.Parse(value.Substring(j' i - j)));                              }                              j = i;                          }                          result.Add(OperatorConvert.Parse(value[i].ToString()));                          j++;                          break;                  }
Missing Default,JinianNet.JNTemplate.Parser,TemplateLexer,C:\repos\jiniannet_jntemplate\src\JinianNet.JNTemplate\Parser\TemplateLexer.cs,Parse,The following switch statement is missing a default case: switch (this._kind)                              {                                  case TokenKind.StringStart:                                      this._pos.Push("\"");                                      break;                                  case TokenKind.LeftParentheses:                                      this._pos.Push("(");                                      break;                              }
