Implementation smell,Namespace,Class,File,Method,Description
Complex Method,IronPigeon.Relay,WinPhonePushNotifications,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Code\WinPhonePushNotifications.cs,TileUpdate,Cyclomatic complexity of the method is 8
Long Parameter List,System.Web.Mvc,HtmlExtensions,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Code\HtmlExtensions.cs,AbsoluteAction,The method has 5 parameters.
Long Identifier,IronPigeon.Relay.Controllers,OAuthController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\OAuthController.cs,SaveAccountInfoAsync,The length of the parameter previouslyRecordedEmailAddresses is 32.
Long Identifier,IronPigeon.Relay.Models,PushNotificationContext,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Models\PushNotificationContext.cs,GetAsync,The length of the parameter clientPackageSecurityIdentifier is 31.
Long Statement,IronPigeon.Relay,InboxOwnerAuthorizeAttribute,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\App_Code\InboxOwnerAuthorizeAttribute.cs,OnAuthorization,The length of the statement  "	Verify.Operation (!OutputCacheAttribute.IsChildActionCacheActive ((ControllerContext)filterContext)' "AuthorizeAttribute_CannotUseWithinChildActionCache"); " is 155.
Long Statement,IronPigeon.Relay,InboxOwnerAuthorizeAttribute,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\App_Code\InboxOwnerAuthorizeAttribute.cs,OnAuthorization,The length of the statement  "	if (!filterContext.ActionDescriptor.IsDefined (typeof(AllowAnonymousAttribute)' inherit) && !filterContext.ActionDescriptor.ControllerDescriptor.IsDefined (typeof(AllowAnonymousAttribute)' true)) { " is 197.
Long Statement,IronPigeon.Relay,AzureStorageConfig,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\App_Start\AzureStorageConfig.cs,RegisterConfiguration,The length of the statement  "	var storage = CloudStorageAccount.Parse (ConfigurationManager.ConnectionStrings [DefaultCloudConfigurationName].ConnectionString); " is 130.
Long Statement,IronPigeon.Relay,AzureStorageConfig,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\App_Start\AzureStorageConfig.cs,RegisterConfiguration,The length of the statement  "	var initialization = Task.WhenAll (BlobController.OneTimeInitializeAsync (storage)' InboxController.OneTimeInitializeAsync (storage)' WindowsPushNotificationClientController.OneTimeInitializeAsync (storage)' AddressBookController.OneTimeInitializeAsync (storage)); " is 264.
Long Statement,IronPigeon.Relay,AuthorizationServerHost,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Code\AuthorizationServerHost.cs,GetClient,The length of the statement  "		return new ClientDescription (ConfigurationManager.AppSettings ["TrustedClientSecret"]' // the client secret technically isn't necessary since we only use implicit grants. " is 171.
Long Statement,IronPigeon.Relay,WinPhonePushNotifications,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Code\WinPhonePushNotifications.cs,Toast,The length of the statement  "	return new XElement (XName.Get ("Notification"' WinPhoneNS)' new XElement (XName.Get ("Toast"' WinPhoneNS)' new XElement (XName.Get ("Text1"' WinPhoneNS)' text1)' new XElement (XName.Get ("Text2"' WinPhoneNS)' text2))); " is 219.
Long Statement,IronPigeon.Relay,MvcApplication,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Global.asax.cs,Application_Start,The length of the statement  "		PushBroker.RegisterAppleService (new ApplePushChannelSettings (appleCert' ConfigurationManager.AppSettings ["AppleAPNSCertPassword"])); " is 135.
Long Statement,System.Web.Mvc,HtmlExtensions,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Code\HtmlExtensions.cs,AbsoluteAction,The length of the statement  "	var builder = new UriBuilder (url.Action (actionName' controllerName' new RouteValueDictionary (routeValues)' protocol' null)); " is 127.
Long Statement,IronPigeon.Relay.Controllers,AddressBookController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\AddressBookController.cs,Index,The length of the statement  "	if (this.Request.AcceptTypes != null && !this.Request.AcceptTypes.Contains (AddressBookEntry.ContentType) && this.Request.AcceptTypes.Contains ("text/html")) { " is 159.
Long Statement,IronPigeon.Relay.Controllers,AddressBookController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\AddressBookController.cs,PutMicrosoftAccount,The length of the statement  "	var entity = await this.ClientTable.GetAsync (AddressBookEntity.MicrosoftProvider' this.HttpContext.User.Identity.Name); " is 120.
Long Statement,IronPigeon.Relay.Controllers,AddressBookController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\AddressBookController.cs,OneTimeInitializeAsync,The length of the statement  "	await Task.WhenAll (tableClient.GetTableReference (DefaultTableName).CreateIfNotExistsAsync ()' tableClient.GetTableReference (EmailTableName).CreateIfNotExistsAsync ()); " is 170.
Long Statement,IronPigeon.Relay.Controllers,BlobController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\BlobController.cs,Post,The length of the statement  "	string contentType = this.Request.Content.Headers.ContentType != null ? this.Request.Content.Headers.ContentType.ToString () : null; " is 132.
Long Statement,IronPigeon.Relay.Controllers,BlobController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\BlobController.cs,Post,The length of the statement  "	var blobLocation = await this.CloudBlobStorageProvider.UploadMessageAsync (content' expirationUtc' contentType' contentEncoding); " is 129.
Long Statement,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,PurgeExpiredAsync,The length of the statement  "			var results = await c.ListBlobsSegmentedAsync (string.Empty' useFlatBlobListing: true' pageSize: 50' details: BlobListingDetails.Metadata' options: new BlobRequestOptions ()' operationContext: null); " is 199.
Long Statement,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,OneTimeInitializeAsync,The length of the statement  "	await Task.WhenAll (inboxContainer.CreateContainerWithPublicBlobsIfNotExistAsync ()' inboxTable.GetTableReference (DefaultInboxTableName).CreateIfNotExistsAsync ()); " is 165.
Long Statement,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,RetrieveInboxItemsAsync,The length of the statement  "			var directoryListing = await directory.ListBlobsSegmentedAsync (useFlatBlobListing: true' pageSize: 50' details: BlobListingDetails.Metadata' options: new BlobRequestOptions ()' operationContext: null); " is 202.
Long Statement,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,PushNotifyInboxMessageAsync,The length of the statement  "	await Task.WhenAll (this.PushNotifyInboxMessageWinStoreAsync (inbox)' this.PushNotifyInboxMessageWinPhoneAsync (inbox)' this.PushNotifyInboxMessageGoogleAsync (inbox)' this.PushNotifyInboxMessageAppleAsync (inbox)); " is 215.
Long Statement,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,PushNotifyInboxMessageWinPhoneAsync,The length of the statement  "				if (inbox.LastWinPhone8PushNotificationUtc.HasValue && inbox.LastAuthenticatedInteractionUtc.HasValue && inbox.LastWinPhone8PushNotificationUtc.Value > inbox.LastAuthenticatedInteractionUtc.Value) { " is 198.
Long Statement,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,PushNotifyInboxMessageGoogleAsync,The length of the statement  "		var notifications = new GooglePushNotifications (this.HttpClient' ConfigurationManager.AppSettings ["GoogleApiKey"]' inbox.GoogleCloudMessagingRegistrationId); " is 159.
Long Statement,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,PushNotifyInboxMessageAppleAsync,The length of the statement  "			MvcApplication.PushBroker.QueueNotification (new AppleNotification ().ForDeviceToken (inbox.ApplePushNotificationGatewayDeviceToken).WithBadge (count)); " is 152.
Long Statement,IronPigeon.Relay.Controllers,OAuthController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\OAuthController.cs,AuthorizeWithMicrosoftAccount,The length of the statement  "	var response = this.authorizationServer.PrepareApproveAuthorizationRequest (incomingAuthzRequest' microsoftAccountInfo.Id' new[] { " is 130.
Long Statement,IronPigeon.Relay.Controllers,OAuthController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\OAuthController.cs,SaveAccountInfoAsync,The length of the statement  "	Requires.That (microsoftAccountInfo.Emails != null && microsoftAccountInfo.Emails.Count > 0' "microsoftAccountInfo"' "No emails were provided by Live Connect."); " is 161.
Long Statement,IronPigeon.Relay.Controllers,OAuthController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\OAuthController.cs,SaveAccountInfoAsync,The length of the statement  "		this.ClientTable.DeleteObject (previouslyRecordedEmails.FirstOrDefault (e => e.Email == previouslyRecordedEmailAddress)); " is 121.
Long Statement,IronPigeon.Relay.Models,PushNotificationContext,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Models\PushNotificationContext.cs,GetAsync,The length of the statement  "	Requires.Argument (clientPackageSecurityIdentifier == null || clientPackageSecurityIdentifier.StartsWith (PushNotificationClientEntity.SchemePrefix)' "clientPackageSecurityIdentifier"' "Prefix {0} not found"' PushNotificationClientEntity.SchemePrefix); " is 252.
Long Statement,IronPigeon.Relay.Models,PushNotificationContext,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Models\PushNotificationContext.cs,GetAsync,The length of the statement  "	var query = this.GetQuery (clientPackageSecurityIdentifier.Substring (PushNotificationClientEntity.SchemePrefix.Length)); " is 121.
Empty Catch Block,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,RetrieveInboxItemsAsync,The method has an empty catch block.
Magic Number,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,PurgeExpiredAsync,The following statement contains a magic number: try {  	var results = await c.ListBlobsSegmentedAsync (string.Empty' useFlatBlobListing: true' pageSize: 50' details: BlobListingDetails.Metadata' options: new BlobRequestOptions ()' operationContext: null);  	return from blob in results.OfType<ICloudBlob> ()  	let expires = DateTime.Parse (blob.Metadata [ExpirationDateMetadataKey])  	where expires < deleteBlobsExpiringBefore  	select blob;  } catch (StorageException ex) {  	var webException = ex.InnerException as WebException;  	if (webException != null) {  		var httpResponse = (HttpWebResponse)webException.Response;  		if (httpResponse.StatusCode == HttpStatusCode.NotFound) {  			// it's legit that some tests never created the container to begin with.  			return Enumerable.Empty<ICloudBlob> ();  		}  	}  	throw;  }  
Magic Number,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,PushChannelAsync,The following statement contains a magic number: if (this.Request.Form ["channel_uri"] != null) {  	var channelUri = new Uri (this.Request.Form ["channel_uri"]' UriKind.Absolute);  	var content = this.Request.Form ["channel_content"];  	Requires.Argument (content == null || content.Length <= 4096' "content"' "Push content too large");  	inbox.PushChannelUri = channelUri.AbsoluteUri;  	inbox.PushChannelContent = content;  	inbox.ClientPackageSecurityIdentifier = this.Request.Form ["package_security_identifier"];  } else if (this.Request.Form ["wp8_channel_uri"] != null) {  	var channelUri = new Uri (this.Request.Form ["wp8_channel_uri"]' UriKind.Absolute);  	var content = this.Request.Form ["wp8_channel_content"];  	Requires.Argument (content == null || content.Length <= 4096' "content"' "Push content too large");  	inbox.WinPhone8PushChannelUri = channelUri.AbsoluteUri;  	inbox.WinPhone8PushChannelContent = content;  	inbox.WinPhone8ToastText1 = this.Request.Form ["wp8_channel_toast_text1"];  	inbox.WinPhone8ToastText2 = this.Request.Form ["wp8_channel_toast_text2"];  	inbox.WinPhone8TileTemplate = this.Request.Form ["wp8_channel_tile_template"];  } else if (this.Request.Form ["gcm_registration_id"] != null) {  	inbox.GoogleCloudMessagingRegistrationId = this.Request.Form ["gcm_registration_id"];  } else if (this.Request.Form ["ios_device_token"] != null) {  	inbox.ApplePushNotificationGatewayDeviceToken = this.Request.Form ["ios_device_token"];  } else {  	// No data was posted. So skip updating the entity.  	return new HttpStatusCodeResult (HttpStatusCode.NoContent);  }  
Magic Number,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,PushChannelAsync,The following statement contains a magic number: if (this.Request.Form ["channel_uri"] != null) {  	var channelUri = new Uri (this.Request.Form ["channel_uri"]' UriKind.Absolute);  	var content = this.Request.Form ["channel_content"];  	Requires.Argument (content == null || content.Length <= 4096' "content"' "Push content too large");  	inbox.PushChannelUri = channelUri.AbsoluteUri;  	inbox.PushChannelContent = content;  	inbox.ClientPackageSecurityIdentifier = this.Request.Form ["package_security_identifier"];  } else if (this.Request.Form ["wp8_channel_uri"] != null) {  	var channelUri = new Uri (this.Request.Form ["wp8_channel_uri"]' UriKind.Absolute);  	var content = this.Request.Form ["wp8_channel_content"];  	Requires.Argument (content == null || content.Length <= 4096' "content"' "Push content too large");  	inbox.WinPhone8PushChannelUri = channelUri.AbsoluteUri;  	inbox.WinPhone8PushChannelContent = content;  	inbox.WinPhone8ToastText1 = this.Request.Form ["wp8_channel_toast_text1"];  	inbox.WinPhone8ToastText2 = this.Request.Form ["wp8_channel_toast_text2"];  	inbox.WinPhone8TileTemplate = this.Request.Form ["wp8_channel_tile_template"];  } else if (this.Request.Form ["gcm_registration_id"] != null) {  	inbox.GoogleCloudMessagingRegistrationId = this.Request.Form ["gcm_registration_id"];  } else if (this.Request.Form ["ios_device_token"] != null) {  	inbox.ApplePushNotificationGatewayDeviceToken = this.Request.Form ["ios_device_token"];  } else {  	// No data was posted. So skip updating the entity.  	return new HttpStatusCodeResult (HttpStatusCode.NoContent);  }  
Magic Number,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,PushChannelAsync,The following statement contains a magic number: Requires.Argument (content == null || content.Length <= 4096' "content"' "Push content too large");  
Magic Number,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,PushChannelAsync,The following statement contains a magic number: if (this.Request.Form ["wp8_channel_uri"] != null) {  	var channelUri = new Uri (this.Request.Form ["wp8_channel_uri"]' UriKind.Absolute);  	var content = this.Request.Form ["wp8_channel_content"];  	Requires.Argument (content == null || content.Length <= 4096' "content"' "Push content too large");  	inbox.WinPhone8PushChannelUri = channelUri.AbsoluteUri;  	inbox.WinPhone8PushChannelContent = content;  	inbox.WinPhone8ToastText1 = this.Request.Form ["wp8_channel_toast_text1"];  	inbox.WinPhone8ToastText2 = this.Request.Form ["wp8_channel_toast_text2"];  	inbox.WinPhone8TileTemplate = this.Request.Form ["wp8_channel_tile_template"];  } else if (this.Request.Form ["gcm_registration_id"] != null) {  	inbox.GoogleCloudMessagingRegistrationId = this.Request.Form ["gcm_registration_id"];  } else if (this.Request.Form ["ios_device_token"] != null) {  	inbox.ApplePushNotificationGatewayDeviceToken = this.Request.Form ["ios_device_token"];  } else {  	// No data was posted. So skip updating the entity.  	return new HttpStatusCodeResult (HttpStatusCode.NoContent);  }  
Magic Number,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,PushChannelAsync,The following statement contains a magic number: Requires.Argument (content == null || content.Length <= 4096' "content"' "Push content too large");  
Magic Number,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,RetrieveInboxItemsAsync,The following statement contains a magic number: do {  	try {  		var directoryListing = await directory.ListBlobsSegmentedAsync (useFlatBlobListing: true' pageSize: 50' details: BlobListingDetails.Metadata' options: new BlobRequestOptions ()' operationContext: null);  		var notExpiringBefore = DateTime.UtcNow;  		blobs.AddRange (from blob in directoryListing.OfType<ICloudBlob> ()  		let expirationString = blob.Metadata [ExpirationDateMetadataKey]  		where expirationString != null && DateTime.Parse (expirationString) > notExpiringBefore  		select new IncomingList.IncomingItem {  			Location = blob.Uri'  			DatePostedUtc = blob.Properties.LastModified.Value.UtcDateTime  		});  	} catch (StorageException) {  	}  	if (longPoll && blobs.Count == 0) {  		await WaitIncomingMessageAsync (id).WithCancellation (this.Response.GetClientDisconnectedToken ());  	}  } while (longPoll && blobs.Count == 0);  
Magic Number,IronPigeon.Relay.Controllers,InboxController,F:\newReposMay17\AArnott_IronPigeon\src\IronPigeon.Relay\Controllers\InboxController.cs,RetrieveInboxItemsAsync,The following statement contains a magic number: try {  	var directoryListing = await directory.ListBlobsSegmentedAsync (useFlatBlobListing: true' pageSize: 50' details: BlobListingDetails.Metadata' options: new BlobRequestOptions ()' operationContext: null);  	var notExpiringBefore = DateTime.UtcNow;  	blobs.AddRange (from blob in directoryListing.OfType<ICloudBlob> ()  	let expirationString = blob.Metadata [ExpirationDateMetadataKey]  	where expirationString != null && DateTime.Parse (expirationString) > notExpiringBefore  	select new IncomingList.IncomingItem {  		Location = blob.Uri'  		DatePostedUtc = blob.Properties.LastModified.Value.UtcDateTime  	});  } catch (StorageException) {  }  
