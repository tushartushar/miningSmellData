Implementation smell,Namespace,Class,File,Method,Description
Long Statement,WpfChatroom,ChatroomWindow,F:\newReposMay17\AArnott_IronPigeon\src\WpfChatroom\ChatroomWindow.xaml.cs,ReceiveMessageLoopAsync,The length of the statement  "			var progress = new ProgressWithCompletion<PostalService.MessageReceipt> (m => this.ProcessReceivedMessagedAsync (m.Message)); " is 125.
Long Statement,WpfChatroom,ChatroomWindow,F:\newReposMay17\AArnott_IronPigeon\src\WpfChatroom\ChatroomWindow.xaml.cs,SendMessageButton_Click,The length of the statement  "			var message = new Message (this.PostalService.Channel.Endpoint' this.members.Values.ToList ()' "message"' this.AuthoredMessage.Text) { " is 134.
Long Statement,WpfChatroom,MainWindow,F:\newReposMay17\AArnott_IronPigeon\src\WpfChatroom\MainWindow.xaml.cs,ChatWithAuthor_OnClick,The length of the statement  "	var endpoint = await addressBook.LookupAsync ("http://tinyurl.com/omhxu6l#-Rrs7LRrCE3bV8x58j1l4JUzAT3P2obKia73k3IFG9k"); " is 120.
Magic Number,WpfChatroom,ChatroomWindow,F:\newReposMay17\AArnott_IronPigeon\src\WpfChatroom\ChatroomWindow.xaml.cs,ReceiveMessageLoopAsync,The following statement contains a magic number: while (this.IsLoaded) {  	try {  		await Task.Delay (delay);  		bool lastTimeFailed = delay > TimeSpan.Zero;  		delay = TimeSpan.Zero;  		var progress = new ProgressWithCompletion<PostalService.MessageReceipt> (m => this.ProcessReceivedMessagedAsync (m.Message));  		await this.PostalService.ReceiveAsync (longPoll: !lastTimeFailed' progress: progress);  		this.TopInfoBar.Visibility = Visibility.Collapsed;  	} catch (HttpRequestException) {  		// report the error eventually if it keeps happening.  		// sleep on it for a while.  		delay = TimeSpan.FromSeconds (5);  		this.TopInfoBar.Text = "Unable to receive messages. Will try again soon.";  		this.TopInfoBar.Visibility = Visibility.Visible;  	}  }  
Magic Number,WpfChatroom,ChatroomWindow,F:\newReposMay17\AArnott_IronPigeon\src\WpfChatroom\ChatroomWindow.xaml.cs,ReceiveMessageLoopAsync,The following statement contains a magic number: try {  	await Task.Delay (delay);  	bool lastTimeFailed = delay > TimeSpan.Zero;  	delay = TimeSpan.Zero;  	var progress = new ProgressWithCompletion<PostalService.MessageReceipt> (m => this.ProcessReceivedMessagedAsync (m.Message));  	await this.PostalService.ReceiveAsync (longPoll: !lastTimeFailed' progress: progress);  	this.TopInfoBar.Visibility = Visibility.Collapsed;  } catch (HttpRequestException) {  	// report the error eventually if it keeps happening.  	// sleep on it for a while.  	delay = TimeSpan.FromSeconds (5);  	this.TopInfoBar.Text = "Unable to receive messages. Will try again soon.";  	this.TopInfoBar.Visibility = Visibility.Visible;  }  
Magic Number,WpfChatroom,ChatroomWindow,F:\newReposMay17\AArnott_IronPigeon\src\WpfChatroom\ChatroomWindow.xaml.cs,ReceiveMessageLoopAsync,The following statement contains a magic number: delay = TimeSpan.FromSeconds (5);  
Magic Number,WpfChatroom,ChatroomWindow,F:\newReposMay17\AArnott_IronPigeon\src\WpfChatroom\ChatroomWindow.xaml.cs,SendMessageButton_Click,The following statement contains a magic number: try {  	if (this.AuthoredMessage.Text.Length > 0) {  		var message = new Message (this.PostalService.Channel.Endpoint' this.members.Values.ToList ()' "message"' this.AuthoredMessage.Text) {  			ExpirationUtc = DateTime.UtcNow + TimeSpan.FromDays (14)'  			AuthorName = "WpfChatroom user"'  		};  		await this.PostalService.PostAsync (message);  	}  	this.BottomInfoBar.Visibility = Visibility.Collapsed;  	this.AuthoredMessage.Text = string.Empty;  } catch (Exception ex) {  	this.BottomInfoBar.Text = "Unable to transmit message: " + ex.Message;  	this.BottomInfoBar.Visibility = Visibility.Visible;  } finally {  	this.AuthoredMessage.IsReadOnly = false;  	this.SendMessageButton.IsEnabled = true;  }  
Magic Number,WpfChatroom,ChatroomWindow,F:\newReposMay17\AArnott_IronPigeon\src\WpfChatroom\ChatroomWindow.xaml.cs,SendMessageButton_Click,The following statement contains a magic number: if (this.AuthoredMessage.Text.Length > 0) {  	var message = new Message (this.PostalService.Channel.Endpoint' this.members.Values.ToList ()' "message"' this.AuthoredMessage.Text) {  		ExpirationUtc = DateTime.UtcNow + TimeSpan.FromDays (14)'  		AuthorName = "WpfChatroom user"'  	};  	await this.PostalService.PostAsync (message);  }  
