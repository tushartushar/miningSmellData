Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,speechRecognizer_SpeechRecognized,Cyclomatic complexity of the method is 17
Complex Method,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,Cyclomatic complexity of the method is 30
Complex Method,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,Cyclomatic complexity of the method is 48
Complex Method,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,Cyclomatic complexity of the method is 48
Long Parameter List,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The method has 5 parameters.
Long Parameter List,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseBands,The method has 6 parameters.
Long Statement,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,InitializeRecognition,The length of the statement  "		speechRecognizer.SpeechRecognitionRejected += new EventHandler<SpeechRecognitionRejectedEventArgs> (speechRecognizer_SpeechRecognitionRejected); " is 144.
Long Statement,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,speechRecognizer_SpeechRecognized,The length of the statement  "		string[] result = ParseBands (unit' (string)e.Result.Semantics ["first_band"].Value' (string)e.Result.Semantics ["second_band"].Value' (string)e.Result.Semantics ["third_band"].Value' (string)e.Result.Semantics ["fourth_band"].Value); " is 234.
Long Statement,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,speechRecognizer_SpeechRecognized,The length of the statement  "		string[] result = ParseBands (unit' (string)e.Result.Semantics ["first_band"].Value' (string)e.Result.Semantics ["second_band"].Value' (string)e.Result.Semantics ["third_band"].Value' (string)e.Result.Semantics ["fourth_band"].Value' (string)e.Result.Semantics ["fifth_band"].Value); " is 283.
Long Statement,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,speechRecognizer_SpeechRecognized,The length of the statement  "		string[] result = ParseEIA (unit' (int)e.Result.Semantics ["first_number"].Value' (int)e.Result.Semantics ["second_number"].Value' (string)e.Result.Semantics ["letter"].Value); " is 176.
Long Statement,System.Windows.Forms,MenuStripEx,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MenuStripEx.cs,WndProc,The length of the statement  "	if (this.clickThrough && m.Msg == NativeConstants.WM_MOUSEACTIVATE && m.Result == (IntPtr)NativeConstants.MA_ACTIVATEANDEAT) { " is 126.
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,InitializeSynthesis,The following statement contains a magic number: speechEngine.Volume = 100;  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,InitializeSynthesis,The following statement contains a magic number: speechEngine.Rate = -4;  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,speechRecognizer_SpeechRecognitionRejected,The following statement contains a magic number: toolStripStatusLabel1.Text = "Rejected: " + e.Result.Text + " (" + (e.Result.Confidence * 100) + "%)";  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,speechRecognizer_SpeechRecognized,The following statement contains a magic number: toolStripStatusLabel1.Text = "Command: " + e.Result.Text + " (" + (e.Result.Confidence * 100) + "%)";  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,speechRecognizer_SpeechRecognized,The following statement contains a magic number: if (Matches (e.Result.Text' fourBandStrings)) {  	// Determine the unit  	string unit = UnitConverter.GetUnit (e.Result.Text);  	// Evaluate the four bands.  	string[] result = ParseBands (unit' (string)e.Result.Semantics ["first_band"].Value' (string)e.Result.Semantics ["second_band"].Value' (string)e.Result.Semantics ["third_band"].Value' (string)e.Result.Semantics ["fourth_band"].Value);  	outputLabel.Text = result [0];  	if (speechEnabled) {  		speechEngine.SpeakAsync (e.Result.Text + " is " + result [1]);  		speechEngine.Resume ();  	}  }  // Five band lookup  else if (Matches (e.Result.Text' fiveBandStrings)) {  	// Determine the unit  	string unit = UnitConverter.GetUnit (e.Result.Text);  	// Evaluate the four bands.  	string[] result = ParseBands (unit' (string)e.Result.Semantics ["first_band"].Value' (string)e.Result.Semantics ["second_band"].Value' (string)e.Result.Semantics ["third_band"].Value' (string)e.Result.Semantics ["fourth_band"].Value' (string)e.Result.Semantics ["fifth_band"].Value);  	outputLabel.Text = result [0];  	if (speechEnabled) {  		int i = (sayMetricPrefixes) ? 2 : 1;  		speechEngine.SpeakAsync (e.Result.Text + " is " + result [i]);  	}  }  // EIA lookup  else if (Matches (e.Result.Text' eiaCommandStrings)) {  	// Determine the unit  	string unit = UnitConverter.GetUnit (e.Result.Text);  	// Evaluate  	string[] result = ParseEIA (unit' (int)e.Result.Semantics ["first_number"].Value' (int)e.Result.Semantics ["second_number"].Value' (string)e.Result.Semantics ["letter"].Value);  	outputLabel.Text = result [0];  	if (speechEnabled) {  		int i = (sayMetricPrefixes) ? 2 : 1;  		speechEngine.SpeakAsync (e.Result.Text + " is " + result [i]);  	}  }  // Toggle metric prefixes  else if (Matches (e.Result.Text' toggleMetricPrefixes)) {  	if (e.Result.Text == toggleMetricPrefixes [0]) {  		sayMetricPrefixes = true;  		if (speechEnabled)  			speechEngine.Speak ("Prefixes on.");  	}  	else {  		sayMetricPrefixes = false;  		if (speechEnabled)  			speechEngine.Speak ("Prefixes off.");  	}  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,speechRecognizer_SpeechRecognized,The following statement contains a magic number: if (Matches (e.Result.Text' fourBandStrings)) {  	// Determine the unit  	string unit = UnitConverter.GetUnit (e.Result.Text);  	// Evaluate the four bands.  	string[] result = ParseBands (unit' (string)e.Result.Semantics ["first_band"].Value' (string)e.Result.Semantics ["second_band"].Value' (string)e.Result.Semantics ["third_band"].Value' (string)e.Result.Semantics ["fourth_band"].Value);  	outputLabel.Text = result [0];  	if (speechEnabled) {  		speechEngine.SpeakAsync (e.Result.Text + " is " + result [1]);  		speechEngine.Resume ();  	}  }  // Five band lookup  else if (Matches (e.Result.Text' fiveBandStrings)) {  	// Determine the unit  	string unit = UnitConverter.GetUnit (e.Result.Text);  	// Evaluate the four bands.  	string[] result = ParseBands (unit' (string)e.Result.Semantics ["first_band"].Value' (string)e.Result.Semantics ["second_band"].Value' (string)e.Result.Semantics ["third_band"].Value' (string)e.Result.Semantics ["fourth_band"].Value' (string)e.Result.Semantics ["fifth_band"].Value);  	outputLabel.Text = result [0];  	if (speechEnabled) {  		int i = (sayMetricPrefixes) ? 2 : 1;  		speechEngine.SpeakAsync (e.Result.Text + " is " + result [i]);  	}  }  // EIA lookup  else if (Matches (e.Result.Text' eiaCommandStrings)) {  	// Determine the unit  	string unit = UnitConverter.GetUnit (e.Result.Text);  	// Evaluate  	string[] result = ParseEIA (unit' (int)e.Result.Semantics ["first_number"].Value' (int)e.Result.Semantics ["second_number"].Value' (string)e.Result.Semantics ["letter"].Value);  	outputLabel.Text = result [0];  	if (speechEnabled) {  		int i = (sayMetricPrefixes) ? 2 : 1;  		speechEngine.SpeakAsync (e.Result.Text + " is " + result [i]);  	}  }  // Toggle metric prefixes  else if (Matches (e.Result.Text' toggleMetricPrefixes)) {  	if (e.Result.Text == toggleMetricPrefixes [0]) {  		sayMetricPrefixes = true;  		if (speechEnabled)  			speechEngine.Speak ("Prefixes on.");  	}  	else {  		sayMetricPrefixes = false;  		if (speechEnabled)  			speechEngine.Speak ("Prefixes off.");  	}  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,speechRecognizer_SpeechRecognized,The following statement contains a magic number: if (Matches (e.Result.Text' fiveBandStrings)) {  	// Determine the unit  	string unit = UnitConverter.GetUnit (e.Result.Text);  	// Evaluate the four bands.  	string[] result = ParseBands (unit' (string)e.Result.Semantics ["first_band"].Value' (string)e.Result.Semantics ["second_band"].Value' (string)e.Result.Semantics ["third_band"].Value' (string)e.Result.Semantics ["fourth_band"].Value' (string)e.Result.Semantics ["fifth_band"].Value);  	outputLabel.Text = result [0];  	if (speechEnabled) {  		int i = (sayMetricPrefixes) ? 2 : 1;  		speechEngine.SpeakAsync (e.Result.Text + " is " + result [i]);  	}  }  // EIA lookup  else if (Matches (e.Result.Text' eiaCommandStrings)) {  	// Determine the unit  	string unit = UnitConverter.GetUnit (e.Result.Text);  	// Evaluate  	string[] result = ParseEIA (unit' (int)e.Result.Semantics ["first_number"].Value' (int)e.Result.Semantics ["second_number"].Value' (string)e.Result.Semantics ["letter"].Value);  	outputLabel.Text = result [0];  	if (speechEnabled) {  		int i = (sayMetricPrefixes) ? 2 : 1;  		speechEngine.SpeakAsync (e.Result.Text + " is " + result [i]);  	}  }  // Toggle metric prefixes  else if (Matches (e.Result.Text' toggleMetricPrefixes)) {  	if (e.Result.Text == toggleMetricPrefixes [0]) {  		sayMetricPrefixes = true;  		if (speechEnabled)  			speechEngine.Speak ("Prefixes on.");  	}  	else {  		sayMetricPrefixes = false;  		if (speechEnabled)  			speechEngine.Speak ("Prefixes off.");  	}  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,speechRecognizer_SpeechRecognized,The following statement contains a magic number: if (Matches (e.Result.Text' fiveBandStrings)) {  	// Determine the unit  	string unit = UnitConverter.GetUnit (e.Result.Text);  	// Evaluate the four bands.  	string[] result = ParseBands (unit' (string)e.Result.Semantics ["first_band"].Value' (string)e.Result.Semantics ["second_band"].Value' (string)e.Result.Semantics ["third_band"].Value' (string)e.Result.Semantics ["fourth_band"].Value' (string)e.Result.Semantics ["fifth_band"].Value);  	outputLabel.Text = result [0];  	if (speechEnabled) {  		int i = (sayMetricPrefixes) ? 2 : 1;  		speechEngine.SpeakAsync (e.Result.Text + " is " + result [i]);  	}  }  // EIA lookup  else if (Matches (e.Result.Text' eiaCommandStrings)) {  	// Determine the unit  	string unit = UnitConverter.GetUnit (e.Result.Text);  	// Evaluate  	string[] result = ParseEIA (unit' (int)e.Result.Semantics ["first_number"].Value' (int)e.Result.Semantics ["second_number"].Value' (string)e.Result.Semantics ["letter"].Value);  	outputLabel.Text = result [0];  	if (speechEnabled) {  		int i = (sayMetricPrefixes) ? 2 : 1;  		speechEngine.SpeakAsync (e.Result.Text + " is " + result [i]);  	}  }  // Toggle metric prefixes  else if (Matches (e.Result.Text' toggleMetricPrefixes)) {  	if (e.Result.Text == toggleMetricPrefixes [0]) {  		sayMetricPrefixes = true;  		if (speechEnabled)  			speechEngine.Speak ("Prefixes on.");  	}  	else {  		sayMetricPrefixes = false;  		if (speechEnabled)  			speechEngine.Speak ("Prefixes off.");  	}  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,speechRecognizer_SpeechRecognized,The following statement contains a magic number: if (speechEnabled) {  	int i = (sayMetricPrefixes) ? 2 : 1;  	speechEngine.SpeakAsync (e.Result.Text + " is " + result [i]);  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,speechRecognizer_SpeechRecognized,The following statement contains a magic number: if (Matches (e.Result.Text' eiaCommandStrings)) {  	// Determine the unit  	string unit = UnitConverter.GetUnit (e.Result.Text);  	// Evaluate  	string[] result = ParseEIA (unit' (int)e.Result.Semantics ["first_number"].Value' (int)e.Result.Semantics ["second_number"].Value' (string)e.Result.Semantics ["letter"].Value);  	outputLabel.Text = result [0];  	if (speechEnabled) {  		int i = (sayMetricPrefixes) ? 2 : 1;  		speechEngine.SpeakAsync (e.Result.Text + " is " + result [i]);  	}  }  // Toggle metric prefixes  else if (Matches (e.Result.Text' toggleMetricPrefixes)) {  	if (e.Result.Text == toggleMetricPrefixes [0]) {  		sayMetricPrefixes = true;  		if (speechEnabled)  			speechEngine.Speak ("Prefixes on.");  	}  	else {  		sayMetricPrefixes = false;  		if (speechEnabled)  			speechEngine.Speak ("Prefixes off.");  	}  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,speechRecognizer_SpeechRecognized,The following statement contains a magic number: if (speechEnabled) {  	int i = (sayMetricPrefixes) ? 2 : 1;  	speechEngine.SpeakAsync (e.Result.Text + " is " + result [i]);  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following statement contains a magic number: switch (letter) {  case "Z":  	Multiplier = -3;  	break;  case "Y":  case "R":  	Multiplier = -2;  	break;  case "X":  case "S":  	Multiplier = -1;  	break;  case "A":  	Multiplier = 0;  	break;  case "B":  case "H":  	Multiplier = 1;  	break;  case "C":  	Multiplier = 2;  	break;  case "D":  	Multiplier = 3;  	break;  case "E":  	Multiplier = 4;  	break;  case "F":  	Multiplier = 5;  	break;  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following statement contains a magic number: switch (letter) {  case "Z":  	Multiplier = -3;  	break;  case "Y":  case "R":  	Multiplier = -2;  	break;  case "X":  case "S":  	Multiplier = -1;  	break;  case "A":  	Multiplier = 0;  	break;  case "B":  case "H":  	Multiplier = 1;  	break;  case "C":  	Multiplier = 2;  	break;  case "D":  	Multiplier = 3;  	break;  case "E":  	Multiplier = 4;  	break;  case "F":  	Multiplier = 5;  	break;  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following statement contains a magic number: switch (letter) {  case "Z":  	Multiplier = -3;  	break;  case "Y":  case "R":  	Multiplier = -2;  	break;  case "X":  case "S":  	Multiplier = -1;  	break;  case "A":  	Multiplier = 0;  	break;  case "B":  case "H":  	Multiplier = 1;  	break;  case "C":  	Multiplier = 2;  	break;  case "D":  	Multiplier = 3;  	break;  case "E":  	Multiplier = 4;  	break;  case "F":  	Multiplier = 5;  	break;  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following statement contains a magic number: switch (letter) {  case "Z":  	Multiplier = -3;  	break;  case "Y":  case "R":  	Multiplier = -2;  	break;  case "X":  case "S":  	Multiplier = -1;  	break;  case "A":  	Multiplier = 0;  	break;  case "B":  case "H":  	Multiplier = 1;  	break;  case "C":  	Multiplier = 2;  	break;  case "D":  	Multiplier = 3;  	break;  case "E":  	Multiplier = 4;  	break;  case "F":  	Multiplier = 5;  	break;  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following statement contains a magic number: switch (letter) {  case "Z":  	Multiplier = -3;  	break;  case "Y":  case "R":  	Multiplier = -2;  	break;  case "X":  case "S":  	Multiplier = -1;  	break;  case "A":  	Multiplier = 0;  	break;  case "B":  case "H":  	Multiplier = 1;  	break;  case "C":  	Multiplier = 2;  	break;  case "D":  	Multiplier = 3;  	break;  case "E":  	Multiplier = 4;  	break;  case "F":  	Multiplier = 5;  	break;  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following statement contains a magic number: switch (letter) {  case "Z":  	Multiplier = -3;  	break;  case "Y":  case "R":  	Multiplier = -2;  	break;  case "X":  case "S":  	Multiplier = -1;  	break;  case "A":  	Multiplier = 0;  	break;  case "B":  case "H":  	Multiplier = 1;  	break;  case "C":  	Multiplier = 2;  	break;  case "D":  	Multiplier = 3;  	break;  case "E":  	Multiplier = 4;  	break;  case "F":  	Multiplier = 5;  	break;  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following statement contains a magic number: Multiplier = -3;  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following statement contains a magic number: Multiplier = -2;  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following statement contains a magic number: Multiplier = 2;  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following statement contains a magic number: Multiplier = 3;  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following statement contains a magic number: Multiplier = 4;  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following statement contains a magic number: Multiplier = 5;  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following statement contains a magic number: Renard *= Math.Pow (10' Multiplier);  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseBands,The following statement contains a magic number: if (fifth != "none") {  	// Find color in array  	retValue += (GetDigit (third) * radix);  	radix *= 10;  }  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseBands,The following statement contains a magic number: radix *= 10;  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseBands,The following statement contains a magic number: radix *= 10;  
Magic Number,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseBands,The following statement contains a magic number: retValue *= Math.Pow (10' multiplier);  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "k";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "M";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "G";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "T";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "P";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "E";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "k";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "M";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "G";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "T";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "P";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "E";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d / 1e3).ToString () + "k";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d / 1e6).ToString () + "M";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d / 1e9).ToString () + "G";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d / 1e12).ToString () + "T";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d / 1e15).ToString () + "P";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d / 1e18).ToString () + "E";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d / 1e21).ToString () + "Z";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d / 1e24).ToString () + "Y";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "m";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "μ";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "n";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "p";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "f";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "a";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "m";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "μ";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "n";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "p";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "f";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "a";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d * 1e3).ToString () + "m";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d * 1e6).ToString () + "μ";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d * 1e9).ToString () + "n";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d * 1e12).ToString () + "p";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d * 1e15).ToString () + "f";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d * 1e15).ToString () + "a";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d * 1e15).ToString () + "z";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotation,The following statement contains a magic number: return (d * 1e15).ToString () + "y";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) >= 1) {  	switch ((int)Math.Floor (exp)) {  	case 0:  	case 1:  	case 2:  		return d.ToString ();  	case 3:  	case 4:  	case 5:  		return (d / 1e3).ToString () + "kilo";  	case 6:  	case 7:  	case 8:  		return (d / 1e6).ToString () + "Mega";  	case 9:  	case 10:  	case 11:  		return (d / 1e9).ToString () + "Giga";  	case 12:  	case 13:  	case 14:  		return (d / 1e12).ToString () + "Tera";  	case 15:  	case 16:  	case 17:  		return (d / 1e15).ToString () + "Peta";  	case 18:  	case 19:  	case 20:  		return (d / 1e18).ToString () + "Exa";  	case 21:  	case 22:  	case 23:  		return (d / 1e21).ToString () + "Z";  	default:  		return (d / 1e24).ToString () + "Y";  	}  }  else if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case 0:  case 1:  case 2:  	return d.ToString ();  case 3:  case 4:  case 5:  	return (d / 1e3).ToString () + "kilo";  case 6:  case 7:  case 8:  	return (d / 1e6).ToString () + "Mega";  case 9:  case 10:  case 11:  	return (d / 1e9).ToString () + "Giga";  case 12:  case 13:  case 14:  	return (d / 1e12).ToString () + "Tera";  case 15:  case 16:  case 17:  	return (d / 1e15).ToString () + "Peta";  case 18:  case 19:  case 20:  	return (d / 1e18).ToString () + "Exa";  case 21:  case 22:  case 23:  	return (d / 1e21).ToString () + "Z";  default:  	return (d / 1e24).ToString () + "Y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d / 1e3).ToString () + "kilo";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d / 1e6).ToString () + "Mega";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d / 1e9).ToString () + "Giga";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d / 1e12).ToString () + "Tera";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d / 1e15).ToString () + "Peta";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d / 1e18).ToString () + "Exa";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d / 1e21).ToString () + "Z";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d / 1e24).ToString () + "Y";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: if (Math.Abs (d) > 0) {  	switch ((int)Math.Floor (exp)) {  	case -1:  	case -2:  	case -3:  		return (d * 1e3).ToString () + "milli";  	case -4:  	case -5:  	case -6:  		return (d * 1e6).ToString () + "micro";  	case -7:  	case -8:  	case -9:  		return (d * 1e9).ToString () + "nano";  	case -10:  	case -11:  	case -12:  		return (d * 1e12).ToString () + "pico";  	case -13:  	case -14:  	case -15:  		return (d * 1e15).ToString () + "femto";  	case -16:  	case -17:  	case -18:  		return (d * 1e15).ToString () + "atto";  	case -19:  	case -20:  	case -21:  		return (d * 1e15).ToString () + "z";  	default:  		return (d * 1e15).ToString () + "y";  	}  }  else {  	return "0";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: switch ((int)Math.Floor (exp)) {  case -1:  case -2:  case -3:  	return (d * 1e3).ToString () + "milli";  case -4:  case -5:  case -6:  	return (d * 1e6).ToString () + "micro";  case -7:  case -8:  case -9:  	return (d * 1e9).ToString () + "nano";  case -10:  case -11:  case -12:  	return (d * 1e12).ToString () + "pico";  case -13:  case -14:  case -15:  	return (d * 1e15).ToString () + "femto";  case -16:  case -17:  case -18:  	return (d * 1e15).ToString () + "atto";  case -19:  case -20:  case -21:  	return (d * 1e15).ToString () + "z";  default:  	return (d * 1e15).ToString () + "y";  }  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d * 1e3).ToString () + "milli";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d * 1e6).ToString () + "micro";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d * 1e9).ToString () + "nano";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d * 1e12).ToString () + "pico";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d * 1e15).ToString () + "femto";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d * 1e15).ToString () + "atto";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d * 1e15).ToString () + "z";  
Magic Number,EESpeak,UnitConverter,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\UnitConverter.cs,ToEngineeringNotationSpeech,The following statement contains a magic number: return (d * 1e15).ToString () + "y";  
Missing Default,EESpeak,MainForm,C:\repos\zarthcode_EESpeak\EESpeak\EESpeak\MainForm.cs,ParseEIA,The following switch statement is missing a default case: switch (letter) {  case "Z":  	Multiplier = -3;  	break;  case "Y":  case "R":  	Multiplier = -2;  	break;  case "X":  case "S":  	Multiplier = -1;  	break;  case "A":  	Multiplier = 0;  	break;  case "B":  case "H":  	Multiplier = 1;  	break;  case "C":  	Multiplier = 2;  	break;  case "D":  	Multiplier = 3;  	break;  case "E":  	Multiplier = 4;  	break;  case "F":  	Multiplier = 5;  	break;  }  
