Implementation smell,Namespace,Class,File,Method,Description
Long Method,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The method has 159 lines of code.
Long Method,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,The method has 93 lines of code.
Long Method,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The method has 136 lines of code.
Complex Method,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,Cyclomatic complexity of the method is 14
Complex Method,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,CheckForDockedPair,Cyclomatic complexity of the method is 7
Complex Method,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,IsDockedDockingPortPassable,Cyclomatic complexity of the method is 13
Complex Method,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,IsNodeNavigable,Cyclomatic complexity of the method is 11
Complex Method,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,Cyclomatic complexity of the method is 21
Complex Method,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,AddModuleToParts,Cyclomatic complexity of the method is 8
Complex Method,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DeleteScreenMessages,Cyclomatic complexity of the method is 19
Long Statement,ConnectedLivingSpace,ModuleConnectedLivingSpace,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\ModuleConnectedLivingSpace.cs,SetEventState,The length of the statement  "	Events ["EnablePassable"].guiActiveEditor = Events ["DisablePassable"].guiActiveEditor = Events ["EnableSurfaceAttachable"].guiActiveEditor = Events ["DisableSurfaceAttachable"].guiActiveEditor = Events ["EnableAttachableSurface"].guiActiveEditor = Events ["DisableAttachableSurface"].guiActiveEditor = CLSAddon.EnablePassable; " is 327.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,Populate,The length of the statement  "	// Check that there is a root part' as if this was called in the EditorContext' the Editor.startPod will have been passed in' and that can be null. " is 147.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,The length of the statement  "	// Is the part capable of allowing kerbals to pass? If it is add it to the current space' or if there is no current space' to a new space. " is 138.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,The length of the statement  "	// Now loop through each of the part's children' consider if there is a navigable connection between them' and then make a recursive call. " is 138.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,The length of the statement  "		//Debug.Log($"[CLS]:  Considering the connection between {p.partInfo.title} ({p.uid}) and {child.partInfo.title} ({child.uid})"); " is 129.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,The length of the statement  "			//Debug.Log($"[CLS]:  the attachment on 'this' part is defined by attachment node {node.id} and had been given passable={attachmentIsPassable}"); " is 145.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,The length of the statement  "				//Debug.Log("[CLS]:  The two parts are NOT considered to be docked together - concluding that this part is suface attached"); " is 125.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,The length of the statement  "				// It is not a AttachNode attachment' and it is not a docked connection either. The only other option is that we are dealing with a surface attachment. Does this part allow surfact attachments to be passable? " is 208.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,The length of the statement  "				//Debug.Log($"[CLS]:  the attachment on the child part is defined by attachment node {childNode.id} and had been given passable={attachmentIsPassable}"); " is 153.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,The length of the statement  "					//Debug.Log("[CLS]:  The two parts are NOT considered to be docked together - concluding that the child part is suface attached"); " is 130.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,The length of the statement  "					// It is not a AttachNode attachment' and it is not a docked connection either. The only other option is that we are dealing with a surface attachment. Does this part allow surfact attachments to be passable? " is 208.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,The length of the statement  "			// It is possible to pass between this part and the child part - so the child needs to be in the same space as this part. " is 121.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,The length of the statement  "			//Debug.Log("[CLS]:  The connection between 'this' part and the child part s passable in both directions' so the child part will be added to the same space as this part."); " is 172.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,ProcessPart,The length of the statement  "			//Debug.Log("[CLS]:  The connection between 'this' part and the child part is NOT passable in both directions' so the child part will be added to a new space."); " is 161.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,IsDockedDockingPortPassable,The length of the statement  "	// First things first - does this part even support CLS? If it does not then the dockingPort is certain to be impassable. " is 121.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,IsDockedDockingPortPassable,The length of the statement  "		//Debug.Log($"[CLS]:  Part {thisPart.partInfo.title} ({thisPart.uid}) does not seem to support CLS. Setting it as impassable."); " is 128.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,IsDockedDockingPortPassable,The length of the statement  "				//Debug.Log($"[CLS]:  docking node uses a referenceAttachNode called: {docNode.referenceAttachNode}. In the meantime' passablenodes: {clsModThis.passablenodes} impassablenodes: {clsModThis.impassablenodes}"); " is 208.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,IsDockedDockingPortPassable,The length of the statement  "				//Debug.Log($"[CLS]:  docking node does not use referenceAttachNode' instead considering the nodeType: {docNode.nodeType}. In the meantime' impassableDockingNodeTypes: {clsModThis.impassableDockingNodeTypes} passableDockingNodeTypes: {clsModThis.passableDockingNodeTypes}"); " is 274.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,CheckForNodeDockedToPart,The length of the statement  "	//Debug.Log($"[CLS]:  thisNode.dockedPartUId={thisNode.dockedPartUId} otherPart.flightID={otherPart.flightID} thisNode.state: {thisNode.state}"); " is 145.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,IsNodeNavigable,The length of the statement  "	// Is there a DockingHatch that relates to this node? This would occur in a situation where a docking node was assembled onto another part in the VAB. " is 150.
Long Statement,ConnectedLivingSpace,CLSVessel,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSVessel.cs,IsNodeNavigable,The length of the statement  "		//Debug.Log($"[CLS]:  node is a surface attachment node. Considering if the part is configured to allow passing when it is surface attached. - {passableWhenSurfaceAttached}"); " is 175.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUIAppLauncherReady,The length of the statement  "	_stockToolbarButton = ApplicationLauncher.Instance.AddModApplication (OnCLSButtonToggle' OnCLSButtonToggle' DummyVoid' DummyVoid' DummyVoid' DummyVoid' ApplicationLauncher.AppScenes.VAB | ApplicationLauncher.AppScenes.SPH | ApplicationLauncher.AppScenes.FLIGHT' GameDatabase.Instance.GetTexture ("ConnectedLivingSpace/assets/cls_icon_off"' false)); " is 348.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnCLSButtonToggle,The length of the statement  "		BlizzyToolbarButton.TexturePath = WindowVisable ? "ConnectedLivingSpace/assets/cls_b_icon_on" : "ConnectedLivingSpace/assets/cls_b_icon_off"; " is 141.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnCLSButtonToggle,The length of the statement  "		_stockToolbarButton.SetTexture (GameDatabase.Instance.GetTexture (WindowVisable ? "ConnectedLivingSpace/assets/cls_icon_on" : "ConnectedLivingSpace/assets/cls_icon_off"' false)); " is 178.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The length of the statement  "		_windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80)); " is 258.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The length of the statement  "		_windowOptionsPosition = GUILayout.Window (947696' _windowOptionsPosition' DisplayOptionWindow' _clsLocOptions' _windowStyle' GUILayout.MinHeight (120)' GUILayout.ExpandWidth (true)); " is 183.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The length of the statement  "				_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20)); " is 153.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The length of the statement  "				_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20)); " is 156.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,RequestAddConnection,The length of the statement  "	if (rebuildVessel && ((HighLogic.LoadedSceneIsFlight && part1.vessel == FlightGlobals.ActiveVessel) || HighLogic.LoadedSceneIsEditor)) " is 134.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,RequestAddConnections,The length of the statement  "	if ((HighLogic.LoadedSceneIsFlight && part1.Any ((Part p) => p.vessel == FlightGlobals.ActiveVessel)) || HighLogic.LoadedSceneIsEditor) " is 135.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,RequestRemoveConnection,The length of the statement  "	if (modified && rebuildVessel && ((HighLogic.LoadedSceneIsFlight && part1.vessel == FlightGlobals.ActiveVessel) || HighLogic.LoadedSceneIsEditor)) " is 146.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,RequestRemoveConnections,The length of the statement  "		if ((HighLogic.LoadedSceneIsFlight && part1.Any ((Part p) => p.vessel == FlightGlobals.ActiveVessel)) || HighLogic.LoadedSceneIsEditor) " is 135.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,AddModuleToParts,The length of the statement  "	IEnumerator<AvailablePart> parts = PartLoader.LoadedPartsList.Where (p => p.partPrefab != null && p.partPrefab.CrewCapacity > 0).GetEnumerator (); " is 146.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,AddModuleToParts,The length of the statement  "						// This block is required as calling AddModule and passing in the node throws an exception if Awake has not been called.  " is 120.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,ApplySettings,The length of the statement  "	ConfigNode toolbarNode = _settings.HasNode ("clsSettings") ? _settings.GetNode ("clsSettings") : _settings.AddNode ("clsSettings"); " is 131.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,ApplySettings,The length of the statement  "	EnableBlizzyToolbar = toolbarNode.HasValue ("enableBlizzyToolbar") ? bool.Parse (toolbarNode.GetValue ("enableBlizzyToolbar")) : EnableBlizzyToolbar; " is 149.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,ApplySettings,The length of the statement  "	EnablePassable = toolbarNode.HasValue ("enablePassable") ? bool.Parse (toolbarNode.GetValue ("enablePassable")) : EnablePassable; " is 129.
Long Statement,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,saveSettings,The length of the statement  "	ConfigNode toolbarNode = _settings.HasNode ("clsSettings") ? _settings.GetNode ("clsSettings") : _settings.AddNode ("clsSettings"); " is 131.
Long Statement,ConnectedLivingSpace,ModuleDockingHatch,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\ModuleDockingHatch.cs,OpenHatch,The length of the statement  "	// Finally fire the VesselChange event to cause the CLSAddon to re-evaluate everything. ActiveVessel is only available in flight.  " is 129.
Long Statement,ConnectedLivingSpace,ModuleDockingHatch,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\ModuleDockingHatch.cs,CloseHatch,The length of the statement  "	// Finally fire the VesselChange event to cause the CLSAddon to re-evaluate everything. ActiveVEssel is only available in flight' but then it should only be possible to open and close hatches in flight so we should be OK. " is 221.
Long Statement,ConnectedLivingSpace,ModuleDockingHatch,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\ModuleDockingHatch.cs,OnLoad,The length of the statement  "	// The Loader with have set hatchOpen' but not via the Property HatchOpen' so we need to re-do it to ensure that hatchStatus gets properly set. " is 143.
Complex Conditional,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,RequestAddConnection,The conditional expression  "rebuildVessel && ((HighLogic.LoadedSceneIsFlight && part1.vessel == FlightGlobals.ActiveVessel) || HighLogic.LoadedSceneIsEditor)"  is complex.
Complex Conditional,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,RequestRemoveConnection,The conditional expression  "modified && rebuildVessel && ((HighLogic.LoadedSceneIsFlight && part1.vessel == FlightGlobals.ActiveVessel) || HighLogic.LoadedSceneIsEditor)"  is complex.
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ButtonStyle = new GUIStyle (GUI.skin.button) {  	normal =  {  		textColor = Color.white  	}'  	hover =  {  		textColor = Color.blue  	}'  	fontSize = 12'  	padding =  {  		top = 0'  		bottom = 0  	}'  	fontStyle = FontStyle.Normal'  	alignment = TextAnchor.MiddleCenter'  	clipping = TextClipping.Clip  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ButtonToggledStyle = new GUIStyle (GUI.skin.button) {  	normal =  {  		textColor = Color.green  	}'  	fontSize = 12'  	padding =  {  		top = 0'  		bottom = 0  	}'  	hover =  {  		textColor = Color.blue  	}  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ButtonStyleLeft = new GUIStyle (GUI.skin.button) {  	normal =  {  		textColor = Color.white  	}'  	hover =  {  		textColor = Color.green  	}'  	fontSize = 12'  	padding =  {  		top = 0'  		bottom = 0  	}'  	fontStyle = FontStyle.Normal'  	alignment = TextAnchor.MiddleLeft'  	clipping = TextClipping.Clip  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ButtonToggledStyleLeft = new GUIStyle (GUI.skin.button) {  	normal =  {  		textColor = Color.green  	}'  	fontSize = 12'  	padding =  {  		top = 0'  		bottom = 0  	}'  	hover =  {  		textColor = Color.white  	}  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ToggleStyleHeader = new GUIStyle (GUI.skin.toggle) {  	padding =  {  		top = 10'  		bottom = 6  	}'  	wordWrap = false'  	fontStyle = FontStyle.Bold'  	margin = new RectOffset (0' 0' 0' 0)'  	alignment = TextAnchor.LowerLeft  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ToggleStyleHeader = new GUIStyle (GUI.skin.toggle) {  	padding =  {  		top = 10'  		bottom = 6  	}'  	wordWrap = false'  	fontStyle = FontStyle.Bold'  	margin = new RectOffset (0' 0' 0' 0)'  	alignment = TextAnchor.LowerLeft  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: LabelTabHeader = new GUIStyle (GUI.skin.label) {  	padding =  {  		top = 10'  		bottom = 6  	}'  	wordWrap = false'  	fontStyle = FontStyle.Bold'  	margin = new RectOffset (0' 0' 0' 0)  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: LabelTabHeader = new GUIStyle (GUI.skin.label) {  	padding =  {  		top = 10'  		bottom = 6  	}'  	wordWrap = false'  	fontStyle = FontStyle.Bold'  	margin = new RectOffset (0' 0' 0' 0)  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: LabelStyleHardRule = new GUIStyle (GUI.skin.label) {  	padding =  {  		top = 0'  		bottom = 6  	}'  	wordWrap = false'  	alignment = TextAnchor.LowerLeft'  	fontStyle = FontStyle.Bold'  	margin = new RectOffset (0' 0' 0' 0)  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: LabelStyleBold = new GUIStyle (GUI.skin.label) {  	fontSize = 18'  	fontStyle = FontStyle.Bold'  	alignment = TextAnchor.MiddleCenter  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle (GUI.skin.textArea) {  	border = new RectOffset (4' 4' 4' 4)'  	padding = new RectOffset (5' 5' 5' 5)'  	alignment = TextAnchor.MiddleLeft'  	fontStyle = FontStyle.Italic'  	wordWrap = false'  	normal =  {  		textColor = Color.green  	}'  	hover =  {  		textColor = Color.green  	}  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle (GUI.skin.textArea) {  	border = new RectOffset (4' 4' 4' 4)'  	padding = new RectOffset (5' 5' 5' 5)'  	alignment = TextAnchor.MiddleLeft'  	fontStyle = FontStyle.Italic'  	wordWrap = false'  	normal =  {  		textColor = Color.green  	}'  	hover =  {  		textColor = Color.green  	}  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle (GUI.skin.textArea) {  	border = new RectOffset (4' 4' 4' 4)'  	padding = new RectOffset (5' 5' 5' 5)'  	alignment = TextAnchor.MiddleLeft'  	fontStyle = FontStyle.Italic'  	wordWrap = false'  	normal =  {  		textColor = Color.green  	}'  	hover =  {  		textColor = Color.green  	}  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle (GUI.skin.textArea) {  	border = new RectOffset (4' 4' 4' 4)'  	padding = new RectOffset (5' 5' 5' 5)'  	alignment = TextAnchor.MiddleLeft'  	fontStyle = FontStyle.Italic'  	wordWrap = false'  	normal =  {  		textColor = Color.green  	}'  	hover =  {  		textColor = Color.green  	}  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle (GUI.skin.textArea) {  	border = new RectOffset (4' 4' 4' 4)'  	padding = new RectOffset (5' 5' 5' 5)'  	alignment = TextAnchor.MiddleLeft'  	fontStyle = FontStyle.Italic'  	wordWrap = false'  	normal =  {  		textColor = Color.green  	}'  	hover =  {  		textColor = Color.green  	}  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle (GUI.skin.textArea) {  	border = new RectOffset (4' 4' 4' 4)'  	padding = new RectOffset (5' 5' 5' 5)'  	alignment = TextAnchor.MiddleLeft'  	fontStyle = FontStyle.Italic'  	wordWrap = false'  	normal =  {  		textColor = Color.green  	}'  	hover =  {  		textColor = Color.green  	}  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle (GUI.skin.textArea) {  	border = new RectOffset (4' 4' 4' 4)'  	padding = new RectOffset (5' 5' 5' 5)'  	alignment = TextAnchor.MiddleLeft'  	fontStyle = FontStyle.Italic'  	wordWrap = false'  	normal =  {  		textColor = Color.green  	}'  	hover =  {  		textColor = Color.green  	}  };  
Magic Number,ConnectedLivingSpace,CLSStyles,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSStyles.cs,SetStyles,The following statement contains a magic number: ToolTipStyle = new GUIStyle (GUI.skin.textArea) {  	border = new RectOffset (4' 4' 4' 4)'  	padding = new RectOffset (5' 5' 5' 5)'  	alignment = TextAnchor.MiddleLeft'  	fontStyle = FontStyle.Italic'  	wordWrap = false'  	normal =  {  		textColor = Color.green  	}'  	hover =  {  		textColor = Color.green  	}  };  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: if (WindowVisable) {  	//Set the GUI Skin  	//GUI.skin = HighLogic.Skin;  	CLSStyles.SetupGuiStyles ();  	_windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  	if (!_optionsVisible)  		return;  	if (_windowOptionsPosition == new Rect (0' 0' 0' 0))  		_windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  	_windowOptionsPosition = GUILayout.Window (947696' _windowOptionsPosition' DisplayOptionWindow' _clsLocOptions' _windowStyle' GUILayout.MinHeight (120)' GUILayout.ExpandWidth (true));  } else {  	if (WindowSelectedSpace <= -1)  		return;  	_vessel.Spaces [WindowSelectedSpace].Highlight (false);  	WindowSelectedSpace = -1;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: if (WindowVisable) {  	//Set the GUI Skin  	//GUI.skin = HighLogic.Skin;  	CLSStyles.SetupGuiStyles ();  	_windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  	if (!_optionsVisible)  		return;  	if (_windowOptionsPosition == new Rect (0' 0' 0' 0))  		_windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  	_windowOptionsPosition = GUILayout.Window (947696' _windowOptionsPosition' DisplayOptionWindow' _clsLocOptions' _windowStyle' GUILayout.MinHeight (120)' GUILayout.ExpandWidth (true));  } else {  	if (WindowSelectedSpace <= -1)  		return;  	_vessel.Spaces [WindowSelectedSpace].Highlight (false);  	WindowSelectedSpace = -1;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: if (WindowVisable) {  	//Set the GUI Skin  	//GUI.skin = HighLogic.Skin;  	CLSStyles.SetupGuiStyles ();  	_windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  	if (!_optionsVisible)  		return;  	if (_windowOptionsPosition == new Rect (0' 0' 0' 0))  		_windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  	_windowOptionsPosition = GUILayout.Window (947696' _windowOptionsPosition' DisplayOptionWindow' _clsLocOptions' _windowStyle' GUILayout.MinHeight (120)' GUILayout.ExpandWidth (true));  } else {  	if (WindowSelectedSpace <= -1)  		return;  	_vessel.Spaces [WindowSelectedSpace].Highlight (false);  	WindowSelectedSpace = -1;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: if (WindowVisable) {  	//Set the GUI Skin  	//GUI.skin = HighLogic.Skin;  	CLSStyles.SetupGuiStyles ();  	_windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  	if (!_optionsVisible)  		return;  	if (_windowOptionsPosition == new Rect (0' 0' 0' 0))  		_windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  	_windowOptionsPosition = GUILayout.Window (947696' _windowOptionsPosition' DisplayOptionWindow' _clsLocOptions' _windowStyle' GUILayout.MinHeight (120)' GUILayout.ExpandWidth (true));  } else {  	if (WindowSelectedSpace <= -1)  		return;  	_vessel.Spaces [WindowSelectedSpace].Highlight (false);  	WindowSelectedSpace = -1;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: if (WindowVisable) {  	//Set the GUI Skin  	//GUI.skin = HighLogic.Skin;  	CLSStyles.SetupGuiStyles ();  	_windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  	if (!_optionsVisible)  		return;  	if (_windowOptionsPosition == new Rect (0' 0' 0' 0))  		_windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  	_windowOptionsPosition = GUILayout.Window (947696' _windowOptionsPosition' DisplayOptionWindow' _clsLocOptions' _windowStyle' GUILayout.MinHeight (120)' GUILayout.ExpandWidth (true));  } else {  	if (WindowSelectedSpace <= -1)  		return;  	_vessel.Spaces [WindowSelectedSpace].Highlight (false);  	WindowSelectedSpace = -1;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: if (WindowVisable) {  	//Set the GUI Skin  	//GUI.skin = HighLogic.Skin;  	CLSStyles.SetupGuiStyles ();  	_windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  	if (!_optionsVisible)  		return;  	if (_windowOptionsPosition == new Rect (0' 0' 0' 0))  		_windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  	_windowOptionsPosition = GUILayout.Window (947696' _windowOptionsPosition' DisplayOptionWindow' _clsLocOptions' _windowStyle' GUILayout.MinHeight (120)' GUILayout.ExpandWidth (true));  } else {  	if (WindowSelectedSpace <= -1)  		return;  	_vessel.Spaces [WindowSelectedSpace].Highlight (false);  	WindowSelectedSpace = -1;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: if (WindowVisable) {  	//Set the GUI Skin  	//GUI.skin = HighLogic.Skin;  	CLSStyles.SetupGuiStyles ();  	_windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  	if (!_optionsVisible)  		return;  	if (_windowOptionsPosition == new Rect (0' 0' 0' 0))  		_windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  	_windowOptionsPosition = GUILayout.Window (947696' _windowOptionsPosition' DisplayOptionWindow' _clsLocOptions' _windowStyle' GUILayout.MinHeight (120)' GUILayout.ExpandWidth (true));  } else {  	if (WindowSelectedSpace <= -1)  		return;  	_vessel.Spaces [WindowSelectedSpace].Highlight (false);  	WindowSelectedSpace = -1;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: if (WindowVisable) {  	//Set the GUI Skin  	//GUI.skin = HighLogic.Skin;  	CLSStyles.SetupGuiStyles ();  	_windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  	if (!_optionsVisible)  		return;  	if (_windowOptionsPosition == new Rect (0' 0' 0' 0))  		_windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  	_windowOptionsPosition = GUILayout.Window (947696' _windowOptionsPosition' DisplayOptionWindow' _clsLocOptions' _windowStyle' GUILayout.MinHeight (120)' GUILayout.ExpandWidth (true));  } else {  	if (WindowSelectedSpace <= -1)  		return;  	_vessel.Spaces [WindowSelectedSpace].Highlight (false);  	WindowSelectedSpace = -1;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: if (WindowVisable) {  	//Set the GUI Skin  	//GUI.skin = HighLogic.Skin;  	CLSStyles.SetupGuiStyles ();  	_windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  	if (!_optionsVisible)  		return;  	if (_windowOptionsPosition == new Rect (0' 0' 0' 0))  		_windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  	_windowOptionsPosition = GUILayout.Window (947696' _windowOptionsPosition' DisplayOptionWindow' _clsLocOptions' _windowStyle' GUILayout.MinHeight (120)' GUILayout.ExpandWidth (true));  } else {  	if (WindowSelectedSpace <= -1)  		return;  	_vessel.Spaces [WindowSelectedSpace].Highlight (false);  	WindowSelectedSpace = -1;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: if (WindowVisable) {  	//Set the GUI Skin  	//GUI.skin = HighLogic.Skin;  	CLSStyles.SetupGuiStyles ();  	_windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  	if (!_optionsVisible)  		return;  	if (_windowOptionsPosition == new Rect (0' 0' 0' 0))  		_windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  	_windowOptionsPosition = GUILayout.Window (947696' _windowOptionsPosition' DisplayOptionWindow' _clsLocOptions' _windowStyle' GUILayout.MinHeight (120)' GUILayout.ExpandWidth (true));  } else {  	if (WindowSelectedSpace <= -1)  		return;  	_vessel.Spaces [WindowSelectedSpace].Highlight (false);  	WindowSelectedSpace = -1;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: _windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: _windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: _windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: _windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: _windowPosition = GUILayout.Window (947695' _windowPosition' OnWindow' _clsLocTitle' _windowStyle' GUILayout.MinHeight (80)' GUILayout.MinWidth (400)' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)' GUILayout.Width (400)' GUILayout.Height (80));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: if (_windowOptionsPosition == new Rect (0' 0' 0' 0))  	_windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: if (_windowOptionsPosition == new Rect (0' 0' 0' 0))  	_windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: if (_windowOptionsPosition == new Rect (0' 0' 0' 0))  	_windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: _windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: _windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: _windowOptionsPosition = new Rect (_windowPosition.x + _windowPosition.width + 10' _windowPosition.y' 260' 120);  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: _windowOptionsPosition = GUILayout.Window (947696' _windowOptionsPosition' DisplayOptionWindow' _clsLocOptions' _windowStyle' GUILayout.MinHeight (120)' GUILayout.ExpandWidth (true));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,OnGUI,The following statement contains a magic number: _windowOptionsPosition = GUILayout.Window (947696' _windowOptionsPosition' DisplayOptionWindow' _clsLocOptions' _windowStyle' GUILayout.MinHeight (120)' GUILayout.ExpandWidth (true));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (Event.current.type == EventType.Repaint) {  	_scrollY = _scrollCrew.height > _scrollParts.height ? _scrollCrew.height : _scrollParts.height;  	_scrollXCrew = _scrollCrew.width > 140 ? _scrollCrew.width : 140;  	_scrollXParts = _scrollParts.width > 240 ? _scrollParts.width : 240;  	// reset counters.  	_scrollCrew.height = _scrollParts.height = _scrollCrew.width = _scrollParts.width = 0;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (Event.current.type == EventType.Repaint) {  	_scrollY = _scrollCrew.height > _scrollParts.height ? _scrollCrew.height : _scrollParts.height;  	_scrollXCrew = _scrollCrew.width > 140 ? _scrollCrew.width : 140;  	_scrollXParts = _scrollParts.width > 240 ? _scrollParts.width : 240;  	// reset counters.  	_scrollCrew.height = _scrollParts.height = _scrollCrew.width = _scrollParts.width = 0;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (Event.current.type == EventType.Repaint) {  	_scrollY = _scrollCrew.height > _scrollParts.height ? _scrollCrew.height : _scrollParts.height;  	_scrollXCrew = _scrollCrew.width > 140 ? _scrollCrew.width : 140;  	_scrollXParts = _scrollParts.width > 240 ? _scrollParts.width : 240;  	// reset counters.  	_scrollCrew.height = _scrollParts.height = _scrollCrew.width = _scrollParts.width = 0;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (Event.current.type == EventType.Repaint) {  	_scrollY = _scrollCrew.height > _scrollParts.height ? _scrollCrew.height : _scrollParts.height;  	_scrollXCrew = _scrollCrew.width > 140 ? _scrollCrew.width : 140;  	_scrollXParts = _scrollParts.width > 240 ? _scrollParts.width : 240;  	// reset counters.  	_scrollCrew.height = _scrollParts.height = _scrollCrew.width = _scrollParts.width = 0;  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: _scrollXCrew = _scrollCrew.width > 140 ? _scrollCrew.width : 140;  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: _scrollXCrew = _scrollCrew.width > 140 ? _scrollCrew.width : 140;  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: _scrollXParts = _scrollParts.width > 240 ? _scrollParts.width : 240;  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: _scrollXParts = _scrollParts.width > 240 ? _scrollParts.width : 240;  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: try {  	Rect rect = new Rect (_windowPosition.width - 20' 4' 16' 16);  	if (GUI.Button (rect' "")) {  		OnCLSButtonToggle ();  	}  	rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  	if (GUI.Button (rect' new GUIContent (_clsLocOptions' _clsLocOptionTt)))// "Options"'"Click to view/edit options"  	 {  		_optionsVisible = !_optionsVisible;  	}  	GUILayout.BeginVertical ();  	GUI.enabled = true;  	// Build strings describing the contents of each of the spaces.  	if (null != _vessel) {  		string[] spaceNames = new string[_vessel.Spaces.Count];  		int counter = 0;  		int newSelectedSpace = -1;  		string partsList = "";  		List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  		while (spaces.MoveNext ()) {  			if (spaces.Current == null)  				continue;  			if (spaces.Current.Name == "") {  				spaceNames [counter] = ;  			} else {  				spaceNames [counter] = spaces.Current.Name;  			}  			counter++;  		}  		spaces.Dispose ();  		if (_vessel.Spaces.Count > 0) {  			newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  		}  		// Only fiddle with the highlighting if the selected space has actually changed  		UpdateDisplayHighlghting (newSelectedSpace);  		// Update the space that has been selected.  		WindowSelectedSpace = newSelectedSpace;  		// If one of the spaces has been selected then display lists of the crew and parts that make it up  		if (WindowSelectedSpace != -1) {  			Rect _rect;  			// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  			partsList = ;  			List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  			while (parts.MoveNext ()) {  				if (parts.Current == null)  					continue;  				partsList += ;  			}  			parts.Dispose ();  			string crewList;  			if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  				crewList += ;  			else {  				List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  				while (crewmembers.MoveNext ()) {  					if (crewmembers.Current == null)  						continue;  					crewList += ;  				}  				crewmembers.Dispose ();  			}  			// Display the text box that allows the space name to be changed  			GUILayout.BeginHorizontal ();  			GUILayout.Label ();  			// "Name:"  			_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  			if (GUILayout.Button (_clsLocUpdate))// "Update"  			 {  				_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  			}  			GUILayout.EndHorizontal ();  			// Lets use 2 scrollers for Crew and parts to save space...  			GUILayout.BeginHorizontal ();  			// Crew Scroller  			_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the crew capacity of the space.  			GUILayout.Label ();  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height = _rect.height;  				_scrollCrew.width = _rect.width;  			}  			// Crew Capacity  			GUILayout.Label (crewList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollCrew.height += _rect.height;  				_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			// Part Scroller  			_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  			GUILayout.BeginVertical ();  			// Display the Part count of the space.  			GUILayout.Label ();  			// Selected Space Parts Count  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height = _rect.height;  				_scrollParts.width = _rect.width;  			}  			// Display the list of component parts.  			GUILayout.Label (partsList);  			_rect = GUILayoutUtility.GetLastRect ();  			if (Event.current.type == EventType.Repaint) {  				_scrollParts.height += _rect.height;  				_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  			}  			GUILayout.EndVertical ();  			GUILayout.EndScrollView ();  			GUILayout.EndHorizontal ();  		}  	} else {  		GUILayout.Label (""' GUILayout.Height (20));  		// Add some vertical space.  		GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  		// "No current vessel"  	}  	GUILayout.EndVertical ();  	GUI.DragWindow ();  	RepositionWindow (ref _windowPosition);  } catch (Exception ex) {  	Debug.LogException (ex);  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: rect = new Rect (_windowPosition.width - 90' 4' 65' 16);  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (null != _vessel) {  	string[] spaceNames = new string[_vessel.Spaces.Count];  	int counter = 0;  	int newSelectedSpace = -1;  	string partsList = "";  	List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  	while (spaces.MoveNext ()) {  		if (spaces.Current == null)  			continue;  		if (spaces.Current.Name == "") {  			spaceNames [counter] = ;  		} else {  			spaceNames [counter] = spaces.Current.Name;  		}  		counter++;  	}  	spaces.Dispose ();  	if (_vessel.Spaces.Count > 0) {  		newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  	}  	// Only fiddle with the highlighting if the selected space has actually changed  	UpdateDisplayHighlghting (newSelectedSpace);  	// Update the space that has been selected.  	WindowSelectedSpace = newSelectedSpace;  	// If one of the spaces has been selected then display lists of the crew and parts that make it up  	if (WindowSelectedSpace != -1) {  		Rect _rect;  		// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  		partsList = ;  		List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  		while (parts.MoveNext ()) {  			if (parts.Current == null)  				continue;  			partsList += ;  		}  		parts.Dispose ();  		string crewList;  		if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  			crewList += ;  		else {  			List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  			while (crewmembers.MoveNext ()) {  				if (crewmembers.Current == null)  					continue;  				crewList += ;  			}  			crewmembers.Dispose ();  		}  		// Display the text box that allows the space name to be changed  		GUILayout.BeginHorizontal ();  		GUILayout.Label ();  		// "Name:"  		_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  		if (GUILayout.Button (_clsLocUpdate))// "Update"  		 {  			_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  		}  		GUILayout.EndHorizontal ();  		// Lets use 2 scrollers for Crew and parts to save space...  		GUILayout.BeginHorizontal ();  		// Crew Scroller  		_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the crew capacity of the space.  		GUILayout.Label ();  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height = _rect.height;  			_scrollCrew.width = _rect.width;  		}  		// Crew Capacity  		GUILayout.Label (crewList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height += _rect.height;  			_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		// Part Scroller  		_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the Part count of the space.  		GUILayout.Label ();  		// Selected Space Parts Count  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height = _rect.height;  			_scrollParts.width = _rect.width;  		}  		// Display the list of component parts.  		GUILayout.Label (partsList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height += _rect.height;  			_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		GUILayout.EndHorizontal ();  	}  } else {  	GUILayout.Label (""' GUILayout.Height (20));  	// Add some vertical space.  	GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  	// "No current vessel"  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (null != _vessel) {  	string[] spaceNames = new string[_vessel.Spaces.Count];  	int counter = 0;  	int newSelectedSpace = -1;  	string partsList = "";  	List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  	while (spaces.MoveNext ()) {  		if (spaces.Current == null)  			continue;  		if (spaces.Current.Name == "") {  			spaceNames [counter] = ;  		} else {  			spaceNames [counter] = spaces.Current.Name;  		}  		counter++;  	}  	spaces.Dispose ();  	if (_vessel.Spaces.Count > 0) {  		newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  	}  	// Only fiddle with the highlighting if the selected space has actually changed  	UpdateDisplayHighlghting (newSelectedSpace);  	// Update the space that has been selected.  	WindowSelectedSpace = newSelectedSpace;  	// If one of the spaces has been selected then display lists of the crew and parts that make it up  	if (WindowSelectedSpace != -1) {  		Rect _rect;  		// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  		partsList = ;  		List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  		while (parts.MoveNext ()) {  			if (parts.Current == null)  				continue;  			partsList += ;  		}  		parts.Dispose ();  		string crewList;  		if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  			crewList += ;  		else {  			List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  			while (crewmembers.MoveNext ()) {  				if (crewmembers.Current == null)  					continue;  				crewList += ;  			}  			crewmembers.Dispose ();  		}  		// Display the text box that allows the space name to be changed  		GUILayout.BeginHorizontal ();  		GUILayout.Label ();  		// "Name:"  		_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  		if (GUILayout.Button (_clsLocUpdate))// "Update"  		 {  			_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  		}  		GUILayout.EndHorizontal ();  		// Lets use 2 scrollers for Crew and parts to save space...  		GUILayout.BeginHorizontal ();  		// Crew Scroller  		_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the crew capacity of the space.  		GUILayout.Label ();  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height = _rect.height;  			_scrollCrew.width = _rect.width;  		}  		// Crew Capacity  		GUILayout.Label (crewList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height += _rect.height;  			_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		// Part Scroller  		_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the Part count of the space.  		GUILayout.Label ();  		// Selected Space Parts Count  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height = _rect.height;  			_scrollParts.width = _rect.width;  		}  		// Display the list of component parts.  		GUILayout.Label (partsList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height += _rect.height;  			_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		GUILayout.EndHorizontal ();  	}  } else {  	GUILayout.Label (""' GUILayout.Height (20));  	// Add some vertical space.  	GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  	// "No current vessel"  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (null != _vessel) {  	string[] spaceNames = new string[_vessel.Spaces.Count];  	int counter = 0;  	int newSelectedSpace = -1;  	string partsList = "";  	List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  	while (spaces.MoveNext ()) {  		if (spaces.Current == null)  			continue;  		if (spaces.Current.Name == "") {  			spaceNames [counter] = ;  		} else {  			spaceNames [counter] = spaces.Current.Name;  		}  		counter++;  	}  	spaces.Dispose ();  	if (_vessel.Spaces.Count > 0) {  		newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  	}  	// Only fiddle with the highlighting if the selected space has actually changed  	UpdateDisplayHighlghting (newSelectedSpace);  	// Update the space that has been selected.  	WindowSelectedSpace = newSelectedSpace;  	// If one of the spaces has been selected then display lists of the crew and parts that make it up  	if (WindowSelectedSpace != -1) {  		Rect _rect;  		// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  		partsList = ;  		List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  		while (parts.MoveNext ()) {  			if (parts.Current == null)  				continue;  			partsList += ;  		}  		parts.Dispose ();  		string crewList;  		if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  			crewList += ;  		else {  			List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  			while (crewmembers.MoveNext ()) {  				if (crewmembers.Current == null)  					continue;  				crewList += ;  			}  			crewmembers.Dispose ();  		}  		// Display the text box that allows the space name to be changed  		GUILayout.BeginHorizontal ();  		GUILayout.Label ();  		// "Name:"  		_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  		if (GUILayout.Button (_clsLocUpdate))// "Update"  		 {  			_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  		}  		GUILayout.EndHorizontal ();  		// Lets use 2 scrollers for Crew and parts to save space...  		GUILayout.BeginHorizontal ();  		// Crew Scroller  		_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the crew capacity of the space.  		GUILayout.Label ();  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height = _rect.height;  			_scrollCrew.width = _rect.width;  		}  		// Crew Capacity  		GUILayout.Label (crewList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height += _rect.height;  			_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		// Part Scroller  		_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the Part count of the space.  		GUILayout.Label ();  		// Selected Space Parts Count  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height = _rect.height;  			_scrollParts.width = _rect.width;  		}  		// Display the list of component parts.  		GUILayout.Label (partsList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height += _rect.height;  			_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		GUILayout.EndHorizontal ();  	}  } else {  	GUILayout.Label (""' GUILayout.Height (20));  	// Add some vertical space.  	GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  	// "No current vessel"  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (null != _vessel) {  	string[] spaceNames = new string[_vessel.Spaces.Count];  	int counter = 0;  	int newSelectedSpace = -1;  	string partsList = "";  	List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  	while (spaces.MoveNext ()) {  		if (spaces.Current == null)  			continue;  		if (spaces.Current.Name == "") {  			spaceNames [counter] = ;  		} else {  			spaceNames [counter] = spaces.Current.Name;  		}  		counter++;  	}  	spaces.Dispose ();  	if (_vessel.Spaces.Count > 0) {  		newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  	}  	// Only fiddle with the highlighting if the selected space has actually changed  	UpdateDisplayHighlghting (newSelectedSpace);  	// Update the space that has been selected.  	WindowSelectedSpace = newSelectedSpace;  	// If one of the spaces has been selected then display lists of the crew and parts that make it up  	if (WindowSelectedSpace != -1) {  		Rect _rect;  		// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  		partsList = ;  		List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  		while (parts.MoveNext ()) {  			if (parts.Current == null)  				continue;  			partsList += ;  		}  		parts.Dispose ();  		string crewList;  		if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  			crewList += ;  		else {  			List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  			while (crewmembers.MoveNext ()) {  				if (crewmembers.Current == null)  					continue;  				crewList += ;  			}  			crewmembers.Dispose ();  		}  		// Display the text box that allows the space name to be changed  		GUILayout.BeginHorizontal ();  		GUILayout.Label ();  		// "Name:"  		_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  		if (GUILayout.Button (_clsLocUpdate))// "Update"  		 {  			_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  		}  		GUILayout.EndHorizontal ();  		// Lets use 2 scrollers for Crew and parts to save space...  		GUILayout.BeginHorizontal ();  		// Crew Scroller  		_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the crew capacity of the space.  		GUILayout.Label ();  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height = _rect.height;  			_scrollCrew.width = _rect.width;  		}  		// Crew Capacity  		GUILayout.Label (crewList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height += _rect.height;  			_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		// Part Scroller  		_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the Part count of the space.  		GUILayout.Label ();  		// Selected Space Parts Count  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height = _rect.height;  			_scrollParts.width = _rect.width;  		}  		// Display the list of component parts.  		GUILayout.Label (partsList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height += _rect.height;  			_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		GUILayout.EndHorizontal ();  	}  } else {  	GUILayout.Label (""' GUILayout.Height (20));  	// Add some vertical space.  	GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  	// "No current vessel"  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (null != _vessel) {  	string[] spaceNames = new string[_vessel.Spaces.Count];  	int counter = 0;  	int newSelectedSpace = -1;  	string partsList = "";  	List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  	while (spaces.MoveNext ()) {  		if (spaces.Current == null)  			continue;  		if (spaces.Current.Name == "") {  			spaceNames [counter] = ;  		} else {  			spaceNames [counter] = spaces.Current.Name;  		}  		counter++;  	}  	spaces.Dispose ();  	if (_vessel.Spaces.Count > 0) {  		newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  	}  	// Only fiddle with the highlighting if the selected space has actually changed  	UpdateDisplayHighlghting (newSelectedSpace);  	// Update the space that has been selected.  	WindowSelectedSpace = newSelectedSpace;  	// If one of the spaces has been selected then display lists of the crew and parts that make it up  	if (WindowSelectedSpace != -1) {  		Rect _rect;  		// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  		partsList = ;  		List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  		while (parts.MoveNext ()) {  			if (parts.Current == null)  				continue;  			partsList += ;  		}  		parts.Dispose ();  		string crewList;  		if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  			crewList += ;  		else {  			List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  			while (crewmembers.MoveNext ()) {  				if (crewmembers.Current == null)  					continue;  				crewList += ;  			}  			crewmembers.Dispose ();  		}  		// Display the text box that allows the space name to be changed  		GUILayout.BeginHorizontal ();  		GUILayout.Label ();  		// "Name:"  		_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  		if (GUILayout.Button (_clsLocUpdate))// "Update"  		 {  			_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  		}  		GUILayout.EndHorizontal ();  		// Lets use 2 scrollers for Crew and parts to save space...  		GUILayout.BeginHorizontal ();  		// Crew Scroller  		_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the crew capacity of the space.  		GUILayout.Label ();  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height = _rect.height;  			_scrollCrew.width = _rect.width;  		}  		// Crew Capacity  		GUILayout.Label (crewList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height += _rect.height;  			_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		// Part Scroller  		_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the Part count of the space.  		GUILayout.Label ();  		// Selected Space Parts Count  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height = _rect.height;  			_scrollParts.width = _rect.width;  		}  		// Display the list of component parts.  		GUILayout.Label (partsList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height += _rect.height;  			_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		GUILayout.EndHorizontal ();  	}  } else {  	GUILayout.Label (""' GUILayout.Height (20));  	// Add some vertical space.  	GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  	// "No current vessel"  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (null != _vessel) {  	string[] spaceNames = new string[_vessel.Spaces.Count];  	int counter = 0;  	int newSelectedSpace = -1;  	string partsList = "";  	List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  	while (spaces.MoveNext ()) {  		if (spaces.Current == null)  			continue;  		if (spaces.Current.Name == "") {  			spaceNames [counter] = ;  		} else {  			spaceNames [counter] = spaces.Current.Name;  		}  		counter++;  	}  	spaces.Dispose ();  	if (_vessel.Spaces.Count > 0) {  		newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  	}  	// Only fiddle with the highlighting if the selected space has actually changed  	UpdateDisplayHighlghting (newSelectedSpace);  	// Update the space that has been selected.  	WindowSelectedSpace = newSelectedSpace;  	// If one of the spaces has been selected then display lists of the crew and parts that make it up  	if (WindowSelectedSpace != -1) {  		Rect _rect;  		// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  		partsList = ;  		List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  		while (parts.MoveNext ()) {  			if (parts.Current == null)  				continue;  			partsList += ;  		}  		parts.Dispose ();  		string crewList;  		if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  			crewList += ;  		else {  			List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  			while (crewmembers.MoveNext ()) {  				if (crewmembers.Current == null)  					continue;  				crewList += ;  			}  			crewmembers.Dispose ();  		}  		// Display the text box that allows the space name to be changed  		GUILayout.BeginHorizontal ();  		GUILayout.Label ();  		// "Name:"  		_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  		if (GUILayout.Button (_clsLocUpdate))// "Update"  		 {  			_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  		}  		GUILayout.EndHorizontal ();  		// Lets use 2 scrollers for Crew and parts to save space...  		GUILayout.BeginHorizontal ();  		// Crew Scroller  		_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the crew capacity of the space.  		GUILayout.Label ();  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height = _rect.height;  			_scrollCrew.width = _rect.width;  		}  		// Crew Capacity  		GUILayout.Label (crewList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height += _rect.height;  			_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		// Part Scroller  		_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the Part count of the space.  		GUILayout.Label ();  		// Selected Space Parts Count  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height = _rect.height;  			_scrollParts.width = _rect.width;  		}  		// Display the list of component parts.  		GUILayout.Label (partsList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height += _rect.height;  			_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		GUILayout.EndHorizontal ();  	}  } else {  	GUILayout.Label (""' GUILayout.Height (20));  	// Add some vertical space.  	GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  	// "No current vessel"  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (null != _vessel) {  	string[] spaceNames = new string[_vessel.Spaces.Count];  	int counter = 0;  	int newSelectedSpace = -1;  	string partsList = "";  	List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  	while (spaces.MoveNext ()) {  		if (spaces.Current == null)  			continue;  		if (spaces.Current.Name == "") {  			spaceNames [counter] = ;  		} else {  			spaceNames [counter] = spaces.Current.Name;  		}  		counter++;  	}  	spaces.Dispose ();  	if (_vessel.Spaces.Count > 0) {  		newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  	}  	// Only fiddle with the highlighting if the selected space has actually changed  	UpdateDisplayHighlghting (newSelectedSpace);  	// Update the space that has been selected.  	WindowSelectedSpace = newSelectedSpace;  	// If one of the spaces has been selected then display lists of the crew and parts that make it up  	if (WindowSelectedSpace != -1) {  		Rect _rect;  		// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  		partsList = ;  		List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  		while (parts.MoveNext ()) {  			if (parts.Current == null)  				continue;  			partsList += ;  		}  		parts.Dispose ();  		string crewList;  		if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  			crewList += ;  		else {  			List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  			while (crewmembers.MoveNext ()) {  				if (crewmembers.Current == null)  					continue;  				crewList += ;  			}  			crewmembers.Dispose ();  		}  		// Display the text box that allows the space name to be changed  		GUILayout.BeginHorizontal ();  		GUILayout.Label ();  		// "Name:"  		_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  		if (GUILayout.Button (_clsLocUpdate))// "Update"  		 {  			_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  		}  		GUILayout.EndHorizontal ();  		// Lets use 2 scrollers for Crew and parts to save space...  		GUILayout.BeginHorizontal ();  		// Crew Scroller  		_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the crew capacity of the space.  		GUILayout.Label ();  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height = _rect.height;  			_scrollCrew.width = _rect.width;  		}  		// Crew Capacity  		GUILayout.Label (crewList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height += _rect.height;  			_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		// Part Scroller  		_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the Part count of the space.  		GUILayout.Label ();  		// Selected Space Parts Count  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height = _rect.height;  			_scrollParts.width = _rect.width;  		}  		// Display the list of component parts.  		GUILayout.Label (partsList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height += _rect.height;  			_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		GUILayout.EndHorizontal ();  	}  } else {  	GUILayout.Label (""' GUILayout.Height (20));  	// Add some vertical space.  	GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  	// "No current vessel"  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (null != _vessel) {  	string[] spaceNames = new string[_vessel.Spaces.Count];  	int counter = 0;  	int newSelectedSpace = -1;  	string partsList = "";  	List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  	while (spaces.MoveNext ()) {  		if (spaces.Current == null)  			continue;  		if (spaces.Current.Name == "") {  			spaceNames [counter] = ;  		} else {  			spaceNames [counter] = spaces.Current.Name;  		}  		counter++;  	}  	spaces.Dispose ();  	if (_vessel.Spaces.Count > 0) {  		newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  	}  	// Only fiddle with the highlighting if the selected space has actually changed  	UpdateDisplayHighlghting (newSelectedSpace);  	// Update the space that has been selected.  	WindowSelectedSpace = newSelectedSpace;  	// If one of the spaces has been selected then display lists of the crew and parts that make it up  	if (WindowSelectedSpace != -1) {  		Rect _rect;  		// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  		partsList = ;  		List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  		while (parts.MoveNext ()) {  			if (parts.Current == null)  				continue;  			partsList += ;  		}  		parts.Dispose ();  		string crewList;  		if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  			crewList += ;  		else {  			List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  			while (crewmembers.MoveNext ()) {  				if (crewmembers.Current == null)  					continue;  				crewList += ;  			}  			crewmembers.Dispose ();  		}  		// Display the text box that allows the space name to be changed  		GUILayout.BeginHorizontal ();  		GUILayout.Label ();  		// "Name:"  		_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  		if (GUILayout.Button (_clsLocUpdate))// "Update"  		 {  			_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  		}  		GUILayout.EndHorizontal ();  		// Lets use 2 scrollers for Crew and parts to save space...  		GUILayout.BeginHorizontal ();  		// Crew Scroller  		_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the crew capacity of the space.  		GUILayout.Label ();  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height = _rect.height;  			_scrollCrew.width = _rect.width;  		}  		// Crew Capacity  		GUILayout.Label (crewList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height += _rect.height;  			_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		// Part Scroller  		_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the Part count of the space.  		GUILayout.Label ();  		// Selected Space Parts Count  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height = _rect.height;  			_scrollParts.width = _rect.width;  		}  		// Display the list of component parts.  		GUILayout.Label (partsList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height += _rect.height;  			_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		GUILayout.EndHorizontal ();  	}  } else {  	GUILayout.Label (""' GUILayout.Height (20));  	// Add some vertical space.  	GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  	// "No current vessel"  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (null != _vessel) {  	string[] spaceNames = new string[_vessel.Spaces.Count];  	int counter = 0;  	int newSelectedSpace = -1;  	string partsList = "";  	List<ICLSSpace>.Enumerator spaces = _vessel.Spaces.GetEnumerator ();  	while (spaces.MoveNext ()) {  		if (spaces.Current == null)  			continue;  		if (spaces.Current.Name == "") {  			spaceNames [counter] = ;  		} else {  			spaceNames [counter] = spaces.Current.Name;  		}  		counter++;  	}  	spaces.Dispose ();  	if (_vessel.Spaces.Count > 0) {  		newSelectedSpace = DisplaySpaceButtons (WindowSelectedSpace' spaceNames);  	}  	// Only fiddle with the highlighting if the selected space has actually changed  	UpdateDisplayHighlghting (newSelectedSpace);  	// Update the space that has been selected.  	WindowSelectedSpace = newSelectedSpace;  	// If one of the spaces has been selected then display lists of the crew and parts that make it up  	if (WindowSelectedSpace != -1) {  		Rect _rect;  		// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  		partsList = ;  		List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  		while (parts.MoveNext ()) {  			if (parts.Current == null)  				continue;  			partsList += ;  		}  		parts.Dispose ();  		string crewList;  		if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  			crewList += ;  		else {  			List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  			while (crewmembers.MoveNext ()) {  				if (crewmembers.Current == null)  					continue;  				crewList += ;  			}  			crewmembers.Dispose ();  		}  		// Display the text box that allows the space name to be changed  		GUILayout.BeginHorizontal ();  		GUILayout.Label ();  		// "Name:"  		_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  		if (GUILayout.Button (_clsLocUpdate))// "Update"  		 {  			_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  		}  		GUILayout.EndHorizontal ();  		// Lets use 2 scrollers for Crew and parts to save space...  		GUILayout.BeginHorizontal ();  		// Crew Scroller  		_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the crew capacity of the space.  		GUILayout.Label ();  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height = _rect.height;  			_scrollCrew.width = _rect.width;  		}  		// Crew Capacity  		GUILayout.Label (crewList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollCrew.height += _rect.height;  			_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		// Part Scroller  		_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  		GUILayout.BeginVertical ();  		// Display the Part count of the space.  		GUILayout.Label ();  		// Selected Space Parts Count  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height = _rect.height;  			_scrollParts.width = _rect.width;  		}  		// Display the list of component parts.  		GUILayout.Label (partsList);  		_rect = GUILayoutUtility.GetLastRect ();  		if (Event.current.type == EventType.Repaint) {  			_scrollParts.height += _rect.height;  			_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  		}  		GUILayout.EndVertical ();  		GUILayout.EndScrollView ();  		GUILayout.EndHorizontal ();  	}  } else {  	GUILayout.Label (""' GUILayout.Height (20));  	// Add some vertical space.  	GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  	// "No current vessel"  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (WindowSelectedSpace != -1) {  	Rect _rect;  	// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  	partsList = ;  	List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  	while (parts.MoveNext ()) {  		if (parts.Current == null)  			continue;  		partsList += ;  	}  	parts.Dispose ();  	string crewList;  	if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  		crewList += ;  	else {  		List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  		while (crewmembers.MoveNext ()) {  			if (crewmembers.Current == null)  				continue;  			crewList += ;  		}  		crewmembers.Dispose ();  	}  	// Display the text box that allows the space name to be changed  	GUILayout.BeginHorizontal ();  	GUILayout.Label ();  	// "Name:"  	_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  	if (GUILayout.Button (_clsLocUpdate))// "Update"  	 {  		_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  	}  	GUILayout.EndHorizontal ();  	// Lets use 2 scrollers for Crew and parts to save space...  	GUILayout.BeginHorizontal ();  	// Crew Scroller  	_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the crew capacity of the space.  	GUILayout.Label ();  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height = _rect.height;  		_scrollCrew.width = _rect.width;  	}  	// Crew Capacity  	GUILayout.Label (crewList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height += _rect.height;  		_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	// Part Scroller  	_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the Part count of the space.  	GUILayout.Label ();  	// Selected Space Parts Count  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height = _rect.height;  		_scrollParts.width = _rect.width;  	}  	// Display the list of component parts.  	GUILayout.Label (partsList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height += _rect.height;  		_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	GUILayout.EndHorizontal ();  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (WindowSelectedSpace != -1) {  	Rect _rect;  	// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  	partsList = ;  	List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  	while (parts.MoveNext ()) {  		if (parts.Current == null)  			continue;  		partsList += ;  	}  	parts.Dispose ();  	string crewList;  	if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  		crewList += ;  	else {  		List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  		while (crewmembers.MoveNext ()) {  			if (crewmembers.Current == null)  				continue;  			crewList += ;  		}  		crewmembers.Dispose ();  	}  	// Display the text box that allows the space name to be changed  	GUILayout.BeginHorizontal ();  	GUILayout.Label ();  	// "Name:"  	_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  	if (GUILayout.Button (_clsLocUpdate))// "Update"  	 {  		_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  	}  	GUILayout.EndHorizontal ();  	// Lets use 2 scrollers for Crew and parts to save space...  	GUILayout.BeginHorizontal ();  	// Crew Scroller  	_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the crew capacity of the space.  	GUILayout.Label ();  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height = _rect.height;  		_scrollCrew.width = _rect.width;  	}  	// Crew Capacity  	GUILayout.Label (crewList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height += _rect.height;  		_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	// Part Scroller  	_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the Part count of the space.  	GUILayout.Label ();  	// Selected Space Parts Count  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height = _rect.height;  		_scrollParts.width = _rect.width;  	}  	// Display the list of component parts.  	GUILayout.Label (partsList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height += _rect.height;  		_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	GUILayout.EndHorizontal ();  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (WindowSelectedSpace != -1) {  	Rect _rect;  	// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  	partsList = ;  	List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  	while (parts.MoveNext ()) {  		if (parts.Current == null)  			continue;  		partsList += ;  	}  	parts.Dispose ();  	string crewList;  	if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  		crewList += ;  	else {  		List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  		while (crewmembers.MoveNext ()) {  			if (crewmembers.Current == null)  				continue;  			crewList += ;  		}  		crewmembers.Dispose ();  	}  	// Display the text box that allows the space name to be changed  	GUILayout.BeginHorizontal ();  	GUILayout.Label ();  	// "Name:"  	_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  	if (GUILayout.Button (_clsLocUpdate))// "Update"  	 {  		_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  	}  	GUILayout.EndHorizontal ();  	// Lets use 2 scrollers for Crew and parts to save space...  	GUILayout.BeginHorizontal ();  	// Crew Scroller  	_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the crew capacity of the space.  	GUILayout.Label ();  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height = _rect.height;  		_scrollCrew.width = _rect.width;  	}  	// Crew Capacity  	GUILayout.Label (crewList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height += _rect.height;  		_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	// Part Scroller  	_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the Part count of the space.  	GUILayout.Label ();  	// Selected Space Parts Count  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height = _rect.height;  		_scrollParts.width = _rect.width;  	}  	// Display the list of component parts.  	GUILayout.Label (partsList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height += _rect.height;  		_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	GUILayout.EndHorizontal ();  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (WindowSelectedSpace != -1) {  	Rect _rect;  	// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  	partsList = ;  	List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  	while (parts.MoveNext ()) {  		if (parts.Current == null)  			continue;  		partsList += ;  	}  	parts.Dispose ();  	string crewList;  	if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  		crewList += ;  	else {  		List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  		while (crewmembers.MoveNext ()) {  			if (crewmembers.Current == null)  				continue;  			crewList += ;  		}  		crewmembers.Dispose ();  	}  	// Display the text box that allows the space name to be changed  	GUILayout.BeginHorizontal ();  	GUILayout.Label ();  	// "Name:"  	_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  	if (GUILayout.Button (_clsLocUpdate))// "Update"  	 {  		_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  	}  	GUILayout.EndHorizontal ();  	// Lets use 2 scrollers for Crew and parts to save space...  	GUILayout.BeginHorizontal ();  	// Crew Scroller  	_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the crew capacity of the space.  	GUILayout.Label ();  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height = _rect.height;  		_scrollCrew.width = _rect.width;  	}  	// Crew Capacity  	GUILayout.Label (crewList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height += _rect.height;  		_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	// Part Scroller  	_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the Part count of the space.  	GUILayout.Label ();  	// Selected Space Parts Count  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height = _rect.height;  		_scrollParts.width = _rect.width;  	}  	// Display the list of component parts.  	GUILayout.Label (partsList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height += _rect.height;  		_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	GUILayout.EndHorizontal ();  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (WindowSelectedSpace != -1) {  	Rect _rect;  	// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  	partsList = ;  	List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  	while (parts.MoveNext ()) {  		if (parts.Current == null)  			continue;  		partsList += ;  	}  	parts.Dispose ();  	string crewList;  	if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  		crewList += ;  	else {  		List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  		while (crewmembers.MoveNext ()) {  			if (crewmembers.Current == null)  				continue;  			crewList += ;  		}  		crewmembers.Dispose ();  	}  	// Display the text box that allows the space name to be changed  	GUILayout.BeginHorizontal ();  	GUILayout.Label ();  	// "Name:"  	_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  	if (GUILayout.Button (_clsLocUpdate))// "Update"  	 {  		_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  	}  	GUILayout.EndHorizontal ();  	// Lets use 2 scrollers for Crew and parts to save space...  	GUILayout.BeginHorizontal ();  	// Crew Scroller  	_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the crew capacity of the space.  	GUILayout.Label ();  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height = _rect.height;  		_scrollCrew.width = _rect.width;  	}  	// Crew Capacity  	GUILayout.Label (crewList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height += _rect.height;  		_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	// Part Scroller  	_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the Part count of the space.  	GUILayout.Label ();  	// Selected Space Parts Count  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height = _rect.height;  		_scrollParts.width = _rect.width;  	}  	// Display the list of component parts.  	GUILayout.Label (partsList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height += _rect.height;  		_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	GUILayout.EndHorizontal ();  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (WindowSelectedSpace != -1) {  	Rect _rect;  	// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  	partsList = ;  	List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  	while (parts.MoveNext ()) {  		if (parts.Current == null)  			continue;  		partsList += ;  	}  	parts.Dispose ();  	string crewList;  	if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  		crewList += ;  	else {  		List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  		while (crewmembers.MoveNext ()) {  			if (crewmembers.Current == null)  				continue;  			crewList += ;  		}  		crewmembers.Dispose ();  	}  	// Display the text box that allows the space name to be changed  	GUILayout.BeginHorizontal ();  	GUILayout.Label ();  	// "Name:"  	_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  	if (GUILayout.Button (_clsLocUpdate))// "Update"  	 {  		_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  	}  	GUILayout.EndHorizontal ();  	// Lets use 2 scrollers for Crew and parts to save space...  	GUILayout.BeginHorizontal ();  	// Crew Scroller  	_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the crew capacity of the space.  	GUILayout.Label ();  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height = _rect.height;  		_scrollCrew.width = _rect.width;  	}  	// Crew Capacity  	GUILayout.Label (crewList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height += _rect.height;  		_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	// Part Scroller  	_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the Part count of the space.  	GUILayout.Label ();  	// Selected Space Parts Count  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height = _rect.height;  		_scrollParts.width = _rect.width;  	}  	// Display the list of component parts.  	GUILayout.Label (partsList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height += _rect.height;  		_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	GUILayout.EndHorizontal ();  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: if (WindowSelectedSpace != -1) {  	Rect _rect;  	// Loop through all the parts in the newly selected space and create a list of all the spaces in it.  	partsList = ;  	List<ICLSPart>.Enumerator parts = _vessel.Spaces [WindowSelectedSpace].Parts.GetEnumerator ();  	while (parts.MoveNext ()) {  		if (parts.Current == null)  			continue;  		partsList += ;  	}  	parts.Dispose ();  	string crewList;  	if (_vessel.Spaces [WindowSelectedSpace].Crew.Count == 0)  		crewList += ;  	else {  		List<ICLSKerbal>.Enumerator crewmembers = _vessel.Spaces [WindowSelectedSpace].Crew.GetEnumerator ();  		while (crewmembers.MoveNext ()) {  			if (crewmembers.Current == null)  				continue;  			crewList += ;  		}  		crewmembers.Dispose ();  	}  	// Display the text box that allows the space name to be changed  	GUILayout.BeginHorizontal ();  	GUILayout.Label ();  	// "Name:"  	_spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  	if (GUILayout.Button (_clsLocUpdate))// "Update"  	 {  		_vessel.Spaces [WindowSelectedSpace].Name = _spaceNameEditField;  	}  	GUILayout.EndHorizontal ();  	// Lets use 2 scrollers for Crew and parts to save space...  	GUILayout.BeginHorizontal ();  	// Crew Scroller  	_scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the crew capacity of the space.  	GUILayout.Label ();  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height = _rect.height;  		_scrollCrew.width = _rect.width;  	}  	// Crew Capacity  	GUILayout.Label (crewList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollCrew.height += _rect.height;  		_scrollCrew.width = _scrollCrew.width > _rect.width ? _scrollCrew.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	// Part Scroller  	_scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  	GUILayout.BeginVertical ();  	// Display the Part count of the space.  	GUILayout.Label ();  	// Selected Space Parts Count  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height = _rect.height;  		_scrollParts.width = _rect.width;  	}  	// Display the list of component parts.  	GUILayout.Label (partsList);  	_rect = GUILayoutUtility.GetLastRect ();  	if (Event.current.type == EventType.Repaint) {  		_scrollParts.height += _rect.height;  		_scrollParts.width = _scrollParts.width > _rect.width ? _scrollParts.width : _rect.width;  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  	GUILayout.EndHorizontal ();  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: _spaceNameEditField = GUILayout.TextField (_spaceNameEditField' GUILayout.Width (200));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: _scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: _scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: _scrollViewerCrew = GUILayout.BeginScrollView (_scrollViewerCrew' GUILayout.Width (_scrollXCrew)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: _scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: _scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: _scrollViewerParts = GUILayout.BeginScrollView (_scrollViewerParts' GUILayout.Width (_scrollXParts)' GUILayout.Height (20 > _scrollY ? 20 : _scrollY + 20));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: GUILayout.Label (""' GUILayout.Height (20));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplayCLSWindow,The following statement contains a magic number: GUILayout.Label (_clsLocNoVessel' CLSStyles.LabelStyleBold' GUILayout.Width (380));  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplaySpaceButtons,The following statement contains a magic number: for (int x = 0; x < spaceNames.Length; x++) {  	if (GUILayout.Button (options [x]' styles [x]' GUILayout.Height (20))) {  		if (newSelectedSpace != x)  			newSelectedSpace = x;  		else  			newSelectedSpace = -1;  		// revert to none selected.  	}  }  
Magic Number,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DisplaySpaceButtons,The following statement contains a magic number: if (GUILayout.Button (options [x]' styles [x]' GUILayout.Height (20))) {  	if (newSelectedSpace != x)  		newSelectedSpace = x;  	else  		newSelectedSpace = -1;  	// revert to none selected.  }  
Missing Default,ConnectedLivingSpace,CLSAddon,D:\newReposJune17\codepoetpbowden_ConnectedLivingSpace\plugins\ConnectedLivingSpace\CLSAddon.cs,DeleteScreenMessages,The following switch statement is missing a default case: switch (messagearea) {  case "UC":  	messagetexts = messages.upperCenter.gameObject.GetComponentsInChildren<ScreenMessagesText> ().ToList ();  	break;  case "UL":  	messagetexts = messages.upperLeft.gameObject.GetComponentsInChildren<ScreenMessagesText> ().ToList ();  	break;  case "UR":  	messagetexts = messages.upperRight.gameObject.GetComponentsInChildren<ScreenMessagesText> ().ToList ();  	break;  case "LC":  	messagetexts = messages.lowerCenter.gameObject.GetComponentsInChildren<ScreenMessagesText> ().ToList ();  	break;  case "ALL":  	messagetexts = messages.gameObject.GetComponentsInChildren<ScreenMessagesText> ().ToList ();  	break;  }  
