Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,ApplyBrush,Cyclomatic complexity of the method is 10
Complex Method,AdvancedPhotoFilter.SelectionTools,MagicWandTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\MagicWandTool.cs,Apply,Cyclomatic complexity of the method is 9
Complex Method,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,Cyclomatic complexity of the method is 19
Long Parameter List,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The method has 6 parameters.
Long Statement,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,Delta,The length of the statement  "		_touchQueue.Enqueue (Tuple.Create (e.ManipulationOrigin' new Point (e.ManipulationOrigin.X - _lastPoint.X' e.ManipulationOrigin.Y - _lastPoint.Y))); " is 148.
Long Statement,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The length of the statement  "		_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255)); " is 210.
Long Statement,AdvancedPhotoFilter.SelectionTools,RectSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\RectSelectionTool.cs,Delta,The length of the statement  "	Position = new Point (Math.Min (_startPoint.X' e.ManipulationOrigin.X)' Math.Min (_startPoint.Y' e.ManipulationOrigin.Y)); " is 122.
Complex Conditional,AdvancedPhotoFilter.SelectionTools,MagicWandTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\MagicWandTool.cs,Apply,The conditional expression  "ox < 0 || ox >= _targetWidth || oy < 0 || oy >= _targetHeight"  is complex.
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,BuildBrush,The following statement contains a magic number: _brushMask = new byte[BrushRadius * 2 + 1' BrushRadius * 2 + 1];  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,BuildBrush,The following statement contains a magic number: _brushMask = new byte[BrushRadius * 2 + 1' BrushRadius * 2 + 1];  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,BuildBrush,The following statement contains a magic number: for (var i = 0; i < BrushRadius * 2 + 1; ++i) {  	for (var j = 0; j < BrushRadius * 2 + 1; ++j) {  		// distance squared  		var d2 = (i - BrushRadius) * (i - BrushRadius) + (j - BrushRadius) * (j - BrushRadius);  		byte a;  		if (d2 <= threshold) {  			a = 0xFF;  		}  		else if (d2 > fallout) {  			a = 0;  		}  		else {  			var t = fallout - d2;  			a = (byte)(255.0 * t / delta);  		}  		_brushMask [i' j] = a;  	}  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,BuildBrush,The following statement contains a magic number: for (var i = 0; i < BrushRadius * 2 + 1; ++i) {  	for (var j = 0; j < BrushRadius * 2 + 1; ++j) {  		// distance squared  		var d2 = (i - BrushRadius) * (i - BrushRadius) + (j - BrushRadius) * (j - BrushRadius);  		byte a;  		if (d2 <= threshold) {  			a = 0xFF;  		}  		else if (d2 > fallout) {  			a = 0;  		}  		else {  			var t = fallout - d2;  			a = (byte)(255.0 * t / delta);  		}  		_brushMask [i' j] = a;  	}  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,BuildBrush,The following statement contains a magic number: for (var i = 0; i < BrushRadius * 2 + 1; ++i) {  	for (var j = 0; j < BrushRadius * 2 + 1; ++j) {  		// distance squared  		var d2 = (i - BrushRadius) * (i - BrushRadius) + (j - BrushRadius) * (j - BrushRadius);  		byte a;  		if (d2 <= threshold) {  			a = 0xFF;  		}  		else if (d2 > fallout) {  			a = 0;  		}  		else {  			var t = fallout - d2;  			a = (byte)(255.0 * t / delta);  		}  		_brushMask [i' j] = a;  	}  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,BuildBrush,The following statement contains a magic number: for (var j = 0; j < BrushRadius * 2 + 1; ++j) {  	// distance squared  	var d2 = (i - BrushRadius) * (i - BrushRadius) + (j - BrushRadius) * (j - BrushRadius);  	byte a;  	if (d2 <= threshold) {  		a = 0xFF;  	}  	else if (d2 > fallout) {  		a = 0;  	}  	else {  		var t = fallout - d2;  		a = (byte)(255.0 * t / delta);  	}  	_brushMask [i' j] = a;  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,BuildBrush,The following statement contains a magic number: for (var j = 0; j < BrushRadius * 2 + 1; ++j) {  	// distance squared  	var d2 = (i - BrushRadius) * (i - BrushRadius) + (j - BrushRadius) * (j - BrushRadius);  	byte a;  	if (d2 <= threshold) {  		a = 0xFF;  	}  	else if (d2 > fallout) {  		a = 0;  	}  	else {  		var t = fallout - d2;  		a = (byte)(255.0 * t / delta);  	}  	_brushMask [i' j] = a;  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,BuildBrush,The following statement contains a magic number: if (d2 <= threshold) {  	a = 0xFF;  }  else if (d2 > fallout) {  	a = 0;  }  else {  	var t = fallout - d2;  	a = (byte)(255.0 * t / delta);  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,BuildBrush,The following statement contains a magic number: if (d2 > fallout) {  	a = 0;  }  else {  	var t = fallout - d2;  	a = (byte)(255.0 * t / delta);  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,BuildBrush,The following statement contains a magic number: a = (byte)(255.0 * t / delta);  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,ApplyBrush,The following statement contains a magic number: if (Math.Abs (dx - 0) > 0.001) {  	for (var x0 = x1; x0 <= x2; ++x0) {  		var y0 = y1 + (x0 - x1) * dy / dx;  		var x = (int)(x0 * _targetWidth / ImageWidth);  		var y = (int)(y0 * _targetHeight / ImageHeight);  		// determine brush region  		var sx1 = x - BrushRadius;  		var sx2 = x + BrushRadius;  		var sy1 = y - BrushRadius;  		var sy2 = y + BrushRadius;  		// clip it to image  		var cx1 = Math.Max (0' sx1);  		var cx2 = Math.Min (_targetWidth - 1' sx2);  		var cy1 = Math.Max (0' sy1);  		var cy2 = Math.Min (_targetHeight - 1' sy2);  		// calculate offsets  		var offsetX = cx1 - sx1;  		var offsetY = cy1 - sy1;  		for (var i = 0; i < cx2 - cx1; ++i) {  			for (var j = 0; j < cy2 - cy1; ++j) {  				var index = i + cx1 + (j + cy1) * _targetWidth;  				if (MaskBuffer [index] != 255)  					SetPixel (i' j' offsetX' offsetY' cx1' cy1);  			}  		}  	}  }  else {  	y1 = Math.Min (origin.Y' origin.Y + delta.Y);  	var y2 = Math.Max (origin.Y' origin.Y + delta.Y);  	for (var y0 = y1; y0 <= y2; ++y0) {  		var x = (int)(x1 * _targetWidth / ImageWidth);  		var y = (int)(y0 * _targetHeight / ImageHeight);  		// determine brush region  		var sx1 = x - BrushRadius;  		var sx2 = x + BrushRadius;  		var sy1 = y - BrushRadius;  		var sy2 = y + BrushRadius;  		// clip it to image  		var cx1 = Math.Max (0' sx1);  		var cx2 = Math.Min (_targetWidth - 1' sx2);  		var cy1 = Math.Max (0' sy1);  		var cy2 = Math.Min (_targetHeight - 1' sy2);  		// calculate offsets  		var offsetX = cx1 - sx1;  		var offsetY = cy1 - sy1;  		for (var i = 0; i < cx2 - cx1; ++i) {  			for (var j = 0; j < cy2 - cy1; ++j) {  				var index = i + cx1 + (j + cy1) * _targetWidth;  				if (MaskBuffer [index] != 255)  					SetPixel (i' j' offsetX' offsetY' cx1' cy1);  			}  		}  	}  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,ApplyBrush,The following statement contains a magic number: if (Math.Abs (dx - 0) > 0.001) {  	for (var x0 = x1; x0 <= x2; ++x0) {  		var y0 = y1 + (x0 - x1) * dy / dx;  		var x = (int)(x0 * _targetWidth / ImageWidth);  		var y = (int)(y0 * _targetHeight / ImageHeight);  		// determine brush region  		var sx1 = x - BrushRadius;  		var sx2 = x + BrushRadius;  		var sy1 = y - BrushRadius;  		var sy2 = y + BrushRadius;  		// clip it to image  		var cx1 = Math.Max (0' sx1);  		var cx2 = Math.Min (_targetWidth - 1' sx2);  		var cy1 = Math.Max (0' sy1);  		var cy2 = Math.Min (_targetHeight - 1' sy2);  		// calculate offsets  		var offsetX = cx1 - sx1;  		var offsetY = cy1 - sy1;  		for (var i = 0; i < cx2 - cx1; ++i) {  			for (var j = 0; j < cy2 - cy1; ++j) {  				var index = i + cx1 + (j + cy1) * _targetWidth;  				if (MaskBuffer [index] != 255)  					SetPixel (i' j' offsetX' offsetY' cx1' cy1);  			}  		}  	}  }  else {  	y1 = Math.Min (origin.Y' origin.Y + delta.Y);  	var y2 = Math.Max (origin.Y' origin.Y + delta.Y);  	for (var y0 = y1; y0 <= y2; ++y0) {  		var x = (int)(x1 * _targetWidth / ImageWidth);  		var y = (int)(y0 * _targetHeight / ImageHeight);  		// determine brush region  		var sx1 = x - BrushRadius;  		var sx2 = x + BrushRadius;  		var sy1 = y - BrushRadius;  		var sy2 = y + BrushRadius;  		// clip it to image  		var cx1 = Math.Max (0' sx1);  		var cx2 = Math.Min (_targetWidth - 1' sx2);  		var cy1 = Math.Max (0' sy1);  		var cy2 = Math.Min (_targetHeight - 1' sy2);  		// calculate offsets  		var offsetX = cx1 - sx1;  		var offsetY = cy1 - sy1;  		for (var i = 0; i < cx2 - cx1; ++i) {  			for (var j = 0; j < cy2 - cy1; ++j) {  				var index = i + cx1 + (j + cy1) * _targetWidth;  				if (MaskBuffer [index] != 255)  					SetPixel (i' j' offsetX' offsetY' cx1' cy1);  			}  		}  	}  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,ApplyBrush,The following statement contains a magic number: if (Math.Abs (dx - 0) > 0.001) {  	for (var x0 = x1; x0 <= x2; ++x0) {  		var y0 = y1 + (x0 - x1) * dy / dx;  		var x = (int)(x0 * _targetWidth / ImageWidth);  		var y = (int)(y0 * _targetHeight / ImageHeight);  		// determine brush region  		var sx1 = x - BrushRadius;  		var sx2 = x + BrushRadius;  		var sy1 = y - BrushRadius;  		var sy2 = y + BrushRadius;  		// clip it to image  		var cx1 = Math.Max (0' sx1);  		var cx2 = Math.Min (_targetWidth - 1' sx2);  		var cy1 = Math.Max (0' sy1);  		var cy2 = Math.Min (_targetHeight - 1' sy2);  		// calculate offsets  		var offsetX = cx1 - sx1;  		var offsetY = cy1 - sy1;  		for (var i = 0; i < cx2 - cx1; ++i) {  			for (var j = 0; j < cy2 - cy1; ++j) {  				var index = i + cx1 + (j + cy1) * _targetWidth;  				if (MaskBuffer [index] != 255)  					SetPixel (i' j' offsetX' offsetY' cx1' cy1);  			}  		}  	}  }  else {  	y1 = Math.Min (origin.Y' origin.Y + delta.Y);  	var y2 = Math.Max (origin.Y' origin.Y + delta.Y);  	for (var y0 = y1; y0 <= y2; ++y0) {  		var x = (int)(x1 * _targetWidth / ImageWidth);  		var y = (int)(y0 * _targetHeight / ImageHeight);  		// determine brush region  		var sx1 = x - BrushRadius;  		var sx2 = x + BrushRadius;  		var sy1 = y - BrushRadius;  		var sy2 = y + BrushRadius;  		// clip it to image  		var cx1 = Math.Max (0' sx1);  		var cx2 = Math.Min (_targetWidth - 1' sx2);  		var cy1 = Math.Max (0' sy1);  		var cy2 = Math.Min (_targetHeight - 1' sy2);  		// calculate offsets  		var offsetX = cx1 - sx1;  		var offsetY = cy1 - sy1;  		for (var i = 0; i < cx2 - cx1; ++i) {  			for (var j = 0; j < cy2 - cy1; ++j) {  				var index = i + cx1 + (j + cy1) * _targetWidth;  				if (MaskBuffer [index] != 255)  					SetPixel (i' j' offsetX' offsetY' cx1' cy1);  			}  		}  	}  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,ApplyBrush,The following statement contains a magic number: for (var x0 = x1; x0 <= x2; ++x0) {  	var y0 = y1 + (x0 - x1) * dy / dx;  	var x = (int)(x0 * _targetWidth / ImageWidth);  	var y = (int)(y0 * _targetHeight / ImageHeight);  	// determine brush region  	var sx1 = x - BrushRadius;  	var sx2 = x + BrushRadius;  	var sy1 = y - BrushRadius;  	var sy2 = y + BrushRadius;  	// clip it to image  	var cx1 = Math.Max (0' sx1);  	var cx2 = Math.Min (_targetWidth - 1' sx2);  	var cy1 = Math.Max (0' sy1);  	var cy2 = Math.Min (_targetHeight - 1' sy2);  	// calculate offsets  	var offsetX = cx1 - sx1;  	var offsetY = cy1 - sy1;  	for (var i = 0; i < cx2 - cx1; ++i) {  		for (var j = 0; j < cy2 - cy1; ++j) {  			var index = i + cx1 + (j + cy1) * _targetWidth;  			if (MaskBuffer [index] != 255)  				SetPixel (i' j' offsetX' offsetY' cx1' cy1);  		}  	}  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,ApplyBrush,The following statement contains a magic number: for (var i = 0; i < cx2 - cx1; ++i) {  	for (var j = 0; j < cy2 - cy1; ++j) {  		var index = i + cx1 + (j + cy1) * _targetWidth;  		if (MaskBuffer [index] != 255)  			SetPixel (i' j' offsetX' offsetY' cx1' cy1);  	}  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,ApplyBrush,The following statement contains a magic number: for (var j = 0; j < cy2 - cy1; ++j) {  	var index = i + cx1 + (j + cy1) * _targetWidth;  	if (MaskBuffer [index] != 255)  		SetPixel (i' j' offsetX' offsetY' cx1' cy1);  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,ApplyBrush,The following statement contains a magic number: if (MaskBuffer [index] != 255)  	SetPixel (i' j' offsetX' offsetY' cx1' cy1);  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,ApplyBrush,The following statement contains a magic number: for (var y0 = y1; y0 <= y2; ++y0) {  	var x = (int)(x1 * _targetWidth / ImageWidth);  	var y = (int)(y0 * _targetHeight / ImageHeight);  	// determine brush region  	var sx1 = x - BrushRadius;  	var sx2 = x + BrushRadius;  	var sy1 = y - BrushRadius;  	var sy2 = y + BrushRadius;  	// clip it to image  	var cx1 = Math.Max (0' sx1);  	var cx2 = Math.Min (_targetWidth - 1' sx2);  	var cy1 = Math.Max (0' sy1);  	var cy2 = Math.Min (_targetHeight - 1' sy2);  	// calculate offsets  	var offsetX = cx1 - sx1;  	var offsetY = cy1 - sy1;  	for (var i = 0; i < cx2 - cx1; ++i) {  		for (var j = 0; j < cy2 - cy1; ++j) {  			var index = i + cx1 + (j + cy1) * _targetWidth;  			if (MaskBuffer [index] != 255)  				SetPixel (i' j' offsetX' offsetY' cx1' cy1);  		}  	}  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,ApplyBrush,The following statement contains a magic number: for (var i = 0; i < cx2 - cx1; ++i) {  	for (var j = 0; j < cy2 - cy1; ++j) {  		var index = i + cx1 + (j + cy1) * _targetWidth;  		if (MaskBuffer [index] != 255)  			SetPixel (i' j' offsetX' offsetY' cx1' cy1);  	}  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,ApplyBrush,The following statement contains a magic number: for (var j = 0; j < cy2 - cy1; ++j) {  	var index = i + cx1 + (j + cy1) * _targetWidth;  	if (MaskBuffer [index] != 255)  		SetPixel (i' j' offsetX' offsetY' cx1' cy1);  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,ApplyBrush,The following statement contains a magic number: if (MaskBuffer [index] != 255)  	SetPixel (i' j' offsetX' offsetY' cx1' cy1);  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: if (alpha == 255) {  	Target [index] = Source [index];  	_targetPixels [index] = brushpixel;  }  else {  	Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  	var pixel = Source [index];  	var r = (pixel >> 16) & 0xFF;  	var g = (pixel >> 8) & 0xFF;  	var b = (pixel) & 0xFF;  	_targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: Target [index] = (Source [index] & 0xFFFFFF) | ((255 - alpha) << 24);  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: _targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: _targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: _targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: _targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: _targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: _targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: _targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: _targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: _targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: _targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: _targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: _targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  
Magic Number,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,SetPixel,The following statement contains a magic number: _targetPixels [index] = ((255 - alpha) << 24) | (MathEx.Clamp (r * (255 - alpha) / 255' 0' 255) << 16) | (MathEx.Clamp (g * (255 - alpha) / 255' 0' 255) << 8) | (MathEx.Clamp (b * (255 - alpha) / 255' 0' 255));  
Magic Number,AdvancedPhotoFilter.SelectionTools,MagicWandTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\MagicWandTool.cs,Apply,The following statement contains a magic number: while (pointsToCheck.Any ()) {  	var pointToCheck = pointsToCheck.Pop ();  	var x = pointToCheck.Item1;  	var y = pointToCheck.Item2;  	var index = x + y * _targetWidth;  	// already processed  	if (MaskBuffer [index] == 255)  		continue;  	// test similarity between colors  	var pixel = _targetPixels [x + y * _targetWidth];  	var uv = MathEx.GetUV (pixel);  	if (MathEx.Distance2 (ouv' uv) > 150)  		continue;  	// apply for this pixel  	MaskBuffer [index] = 255;  	Target [index] = Source [index];  	_targetPixels [index] = (Constants.White & 0xFFFFFF) | (0xFF << 24);  	// push neighbors to the stack (if reachable)  	if (x > 0)  		pointsToCheck.Push (Tuple.Create (x - 1' y));  	if (x < _targetWidth - 1)  		pointsToCheck.Push (Tuple.Create (x + 1' y));  	if (y > 0)  		pointsToCheck.Push (Tuple.Create (x' y - 1));  	if (y < _targetHeight - 1)  		pointsToCheck.Push (Tuple.Create (x' y + 1));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,MagicWandTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\MagicWandTool.cs,Apply,The following statement contains a magic number: while (pointsToCheck.Any ()) {  	var pointToCheck = pointsToCheck.Pop ();  	var x = pointToCheck.Item1;  	var y = pointToCheck.Item2;  	var index = x + y * _targetWidth;  	// already processed  	if (MaskBuffer [index] == 255)  		continue;  	// test similarity between colors  	var pixel = _targetPixels [x + y * _targetWidth];  	var uv = MathEx.GetUV (pixel);  	if (MathEx.Distance2 (ouv' uv) > 150)  		continue;  	// apply for this pixel  	MaskBuffer [index] = 255;  	Target [index] = Source [index];  	_targetPixels [index] = (Constants.White & 0xFFFFFF) | (0xFF << 24);  	// push neighbors to the stack (if reachable)  	if (x > 0)  		pointsToCheck.Push (Tuple.Create (x - 1' y));  	if (x < _targetWidth - 1)  		pointsToCheck.Push (Tuple.Create (x + 1' y));  	if (y > 0)  		pointsToCheck.Push (Tuple.Create (x' y - 1));  	if (y < _targetHeight - 1)  		pointsToCheck.Push (Tuple.Create (x' y + 1));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,MagicWandTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\MagicWandTool.cs,Apply,The following statement contains a magic number: while (pointsToCheck.Any ()) {  	var pointToCheck = pointsToCheck.Pop ();  	var x = pointToCheck.Item1;  	var y = pointToCheck.Item2;  	var index = x + y * _targetWidth;  	// already processed  	if (MaskBuffer [index] == 255)  		continue;  	// test similarity between colors  	var pixel = _targetPixels [x + y * _targetWidth];  	var uv = MathEx.GetUV (pixel);  	if (MathEx.Distance2 (ouv' uv) > 150)  		continue;  	// apply for this pixel  	MaskBuffer [index] = 255;  	Target [index] = Source [index];  	_targetPixels [index] = (Constants.White & 0xFFFFFF) | (0xFF << 24);  	// push neighbors to the stack (if reachable)  	if (x > 0)  		pointsToCheck.Push (Tuple.Create (x - 1' y));  	if (x < _targetWidth - 1)  		pointsToCheck.Push (Tuple.Create (x + 1' y));  	if (y > 0)  		pointsToCheck.Push (Tuple.Create (x' y - 1));  	if (y < _targetHeight - 1)  		pointsToCheck.Push (Tuple.Create (x' y + 1));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,MagicWandTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\MagicWandTool.cs,Apply,The following statement contains a magic number: while (pointsToCheck.Any ()) {  	var pointToCheck = pointsToCheck.Pop ();  	var x = pointToCheck.Item1;  	var y = pointToCheck.Item2;  	var index = x + y * _targetWidth;  	// already processed  	if (MaskBuffer [index] == 255)  		continue;  	// test similarity between colors  	var pixel = _targetPixels [x + y * _targetWidth];  	var uv = MathEx.GetUV (pixel);  	if (MathEx.Distance2 (ouv' uv) > 150)  		continue;  	// apply for this pixel  	MaskBuffer [index] = 255;  	Target [index] = Source [index];  	_targetPixels [index] = (Constants.White & 0xFFFFFF) | (0xFF << 24);  	// push neighbors to the stack (if reachable)  	if (x > 0)  		pointsToCheck.Push (Tuple.Create (x - 1' y));  	if (x < _targetWidth - 1)  		pointsToCheck.Push (Tuple.Create (x + 1' y));  	if (y > 0)  		pointsToCheck.Push (Tuple.Create (x' y - 1));  	if (y < _targetHeight - 1)  		pointsToCheck.Push (Tuple.Create (x' y + 1));  }  
Magic Number,AdvancedPhotoFilter.SelectionTools,MagicWandTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\MagicWandTool.cs,Apply,The following statement contains a magic number: if (MaskBuffer [index] == 255)  	continue;  
Magic Number,AdvancedPhotoFilter.SelectionTools,MagicWandTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\MagicWandTool.cs,Apply,The following statement contains a magic number: if (MathEx.Distance2 (ouv' uv) > 150)  	continue;  
Magic Number,AdvancedPhotoFilter.SelectionTools,MagicWandTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\MagicWandTool.cs,Apply,The following statement contains a magic number: MaskBuffer [index] = 255;  
Magic Number,AdvancedPhotoFilter.SelectionTools,MagicWandTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\MagicWandTool.cs,Apply,The following statement contains a magic number: _targetPixels [index] = (Constants.White & 0xFFFFFF) | (0xFF << 24);  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,MainViewModel,The following statement contains a magic number: SelectedFilter = Filters [3];  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: for (var i = 0; i < PreviewImage.Pixels.Length; ++i) {  	if (_maskBuffer [i] == 0)  		PreviewImage.Pixels [i] = removal;  	if (_maskBuffer [i] != 0)  		MainImage.Pixels [i] = ((Grayscale2 << 16) | (Grayscale2 << 8) | Grayscale2) | ((255 - _maskBuffer [i]) << 24);  	else  		MainImage.Pixels [i] = _backup.Pixels [i];  }  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: for (var i = 0; i < PreviewImage.Pixels.Length; ++i) {  	if (_maskBuffer [i] == 0)  		PreviewImage.Pixels [i] = removal;  	if (_maskBuffer [i] != 0)  		MainImage.Pixels [i] = ((Grayscale2 << 16) | (Grayscale2 << 8) | Grayscale2) | ((255 - _maskBuffer [i]) << 24);  	else  		MainImage.Pixels [i] = _backup.Pixels [i];  }  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: for (var i = 0; i < PreviewImage.Pixels.Length; ++i) {  	if (_maskBuffer [i] == 0)  		PreviewImage.Pixels [i] = removal;  	if (_maskBuffer [i] != 0)  		MainImage.Pixels [i] = ((Grayscale2 << 16) | (Grayscale2 << 8) | Grayscale2) | ((255 - _maskBuffer [i]) << 24);  	else  		MainImage.Pixels [i] = _backup.Pixels [i];  }  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: for (var i = 0; i < PreviewImage.Pixels.Length; ++i) {  	if (_maskBuffer [i] == 0)  		PreviewImage.Pixels [i] = removal;  	if (_maskBuffer [i] != 0)  		MainImage.Pixels [i] = ((Grayscale2 << 16) | (Grayscale2 << 8) | Grayscale2) | ((255 - _maskBuffer [i]) << 24);  	else  		MainImage.Pixels [i] = _backup.Pixels [i];  }  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: if (_maskBuffer [i] != 0)  	MainImage.Pixels [i] = ((Grayscale2 << 16) | (Grayscale2 << 8) | Grayscale2) | ((255 - _maskBuffer [i]) << 24);  else  	MainImage.Pixels [i] = _backup.Pixels [i];  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: if (_maskBuffer [i] != 0)  	MainImage.Pixels [i] = ((Grayscale2 << 16) | (Grayscale2 << 8) | Grayscale2) | ((255 - _maskBuffer [i]) << 24);  else  	MainImage.Pixels [i] = _backup.Pixels [i];  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: if (_maskBuffer [i] != 0)  	MainImage.Pixels [i] = ((Grayscale2 << 16) | (Grayscale2 << 8) | Grayscale2) | ((255 - _maskBuffer [i]) << 24);  else  	MainImage.Pixels [i] = _backup.Pixels [i];  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: if (_maskBuffer [i] != 0)  	MainImage.Pixels [i] = ((Grayscale2 << 16) | (Grayscale2 << 8) | Grayscale2) | ((255 - _maskBuffer [i]) << 24);  else  	MainImage.Pixels [i] = _backup.Pixels [i];  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: MainImage.Pixels [i] = ((Grayscale2 << 16) | (Grayscale2 << 8) | Grayscale2) | ((255 - _maskBuffer [i]) << 24);  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: MainImage.Pixels [i] = ((Grayscale2 << 16) | (Grayscale2 << 8) | Grayscale2) | ((255 - _maskBuffer [i]) << 24);  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: MainImage.Pixels [i] = ((Grayscale2 << 16) | (Grayscale2 << 8) | Grayscale2) | ((255 - _maskBuffer [i]) << 24);  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: MainImage.Pixels [i] = ((Grayscale2 << 16) | (Grayscale2 << 8) | Grayscale2) | ((255 - _maskBuffer [i]) << 24);  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: try {  	using (var fileStream = _isoStore.CreateFile ("MainImage.jpg"))  		MainImage.SaveJpeg (fileStream' ImageWidth' ImageHeight' 0' 100);  	using (var fileStream = _isoStore.CreateFile ("PreviewImage.jpg"))  		PreviewImage.SaveJpeg (fileStream' ImageWidth' ImageHeight' 0' 100);  }  catch (Exception e) {  	App.LogError (e);  }  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: try {  	using (var fileStream = _isoStore.CreateFile ("MainImage.jpg"))  		MainImage.SaveJpeg (fileStream' ImageWidth' ImageHeight' 0' 100);  	using (var fileStream = _isoStore.CreateFile ("PreviewImage.jpg"))  		PreviewImage.SaveJpeg (fileStream' ImageWidth' ImageHeight' 0' 100);  }  catch (Exception e) {  	App.LogError (e);  }  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: using (var fileStream = _isoStore.CreateFile ("MainImage.jpg"))  	MainImage.SaveJpeg (fileStream' ImageWidth' ImageHeight' 0' 100);  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: MainImage.SaveJpeg (fileStream' ImageWidth' ImageHeight' 0' 100);  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: using (var fileStream = _isoStore.CreateFile ("PreviewImage.jpg"))  	PreviewImage.SaveJpeg (fileStream' ImageWidth' ImageHeight' 0' 100);  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ApplyExecute,The following statement contains a magic number: PreviewImage.SaveJpeg (fileStream' ImageWidth' ImageHeight' 0' 100);  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ShareExecute,The following statement contains a magic number: using (var fileStream = _isoStore.CreateFile (SharedFileName)) {  	MainImage.SaveJpeg (fileStream' ImageWidth' ImageHeight' 0' 100);  	var task = new ShareMediaTask {  		FilePath = SharedFileName  	};  	task.Show ();  }  
Magic Number,AdvancedPhotoFilter.ViewModels,MainViewModel,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\ViewModels\MainViewModel.cs,ShareExecute,The following statement contains a magic number: MainImage.SaveJpeg (fileStream' ImageWidth' ImageHeight' 0' 100);  
Duplicate Code,AdvancedPhotoFilter.SelectionTools,BrushSelectionTool,C:\repos\tpetrina_ImagingApps\AdvancedPhotoFilter\SelectionTools\BrushSelectionTool.cs,ApplyBrush,The method contains a code clone-set at the following line numbers (starting from the method definition): ((13' 35)' (41' 63))
