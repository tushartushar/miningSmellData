Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Binarysharp.MemoryManagement.Internals,MarshalType<T>,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Internals\MarshalType.cs,ObjectToByteArray,Cyclomatic complexity of the method is 14
Complex Method,Binarysharp.MemoryManagement.Internals,MarshalType<T>,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Internals\MarshalType.cs,ByteArrayToObject,Cyclomatic complexity of the method is 17
Long Parameter List,Binarysharp.MemoryManagement.Memory,MemoryProtection,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Memory\MemoryProtection.cs,MemoryProtection,The method has 5 parameters. Parameters: memorySharp' baseAddress' size' protection' mustBeDisposed
Long Parameter List,Binarysharp.MemoryManagement.Native,NativeMethods,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Native\NativeMethods.cs,CreateRemoteThread,The method has 7 parameters. Parameters: hProcess' lpThreadAttributes' dwStackSize' lpStartAddress' lpParameter' dwCreationFlags' lpThreadId
Long Parameter List,Binarysharp.MemoryManagement.Native,NativeMethods,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Native\NativeMethods.cs,NtQueryInformationProcess,The method has 5 parameters. Parameters: processHandle' infoclass' processinfo' length' bytesread
Long Parameter List,Binarysharp.MemoryManagement.Native,NativeMethods,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Native\NativeMethods.cs,NtQueryInformationThread,The method has 5 parameters. Parameters: hwnd' infoclass' threadinfo' length' bytesread
Long Parameter List,Binarysharp.MemoryManagement.Native,NativeMethods,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Native\NativeMethods.cs,ReadProcessMemory,The method has 5 parameters. Parameters: hProcess' lpBaseAddress' lpBuffer' dwSize' lpNumberOfBytesRead
Long Parameter List,Binarysharp.MemoryManagement.Native,NativeMethods,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Native\NativeMethods.cs,VirtualAllocEx,The method has 5 parameters. Parameters: hProcess' lpAddress' dwSize' flAllocationType' flProtect
Long Parameter List,Binarysharp.MemoryManagement.Native,NativeMethods,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Native\NativeMethods.cs,VirtualProtectEx,The method has 5 parameters. Parameters: hProcess' lpAddress' dwSize' flNewProtect' lpflOldProtect
Long Parameter List,Binarysharp.MemoryManagement.Native,NativeMethods,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Native\NativeMethods.cs,WriteProcessMemory,The method has 5 parameters. Parameters: hProcess' lpBaseAddress' lpBuffer' nSize' lpNumberOfBytesWritten
Long Parameter List,Binarysharp.MemoryManagement.Windows.Keyboard,MessageKeyboard,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Windows\Keyboard\MessageKeyboard.cs,MakeKeyParameter,The method has 6 parameters. Parameters: key' keyUp' fRepeat' cRepeat' altDown' fExtended
Long Parameter List,Binarysharp.MemoryManagement.Windows,WindowCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Windows\WindowCore.cs,SetWindowPlacement,The method has 5 parameters. Parameters: windowHandle' left' top' height' width
Long Statement,Binarysharp.MemoryManagement.Assembly,AssemblyFactory,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Assembly\AssemblyFactory.cs,Execute,The length of the statement  "            var marshalledParameters = parameters.Select(p => MarshalValue.Marshal(MemorySharp' p)).Cast<IMarshalledValue>().ToArray(); " is 123.
Long Statement,Binarysharp.MemoryManagement.Internals,MarshalType<T>,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Internals\MarshalType.cs,ByteArrayToObject,The length of the statement  "                                return (T)(object)new IntPtr(BitConverter.ToInt32(new byte[] { byteArray[index]' byteArray[index + 1]' 0x0' 0x0 }' index)); " is 123.
Long Statement,Binarysharp.MemoryManagement,MemorySharp,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\MemorySharp.cs,MakeRelative,The length of the statement  "                throw new ArgumentOutOfRangeException("address"' "The absolute address cannot be smaller than the main module base address."); " is 126.
Long Statement,Binarysharp.MemoryManagement,MemorySharp,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\MemorySharp.cs,WriteBytes,The length of the statement  "            using (new MemoryProtection(this' isRelative ? MakeAbsolute(address) : address' MarshalType<byte>.Size * byteArray.Length)) " is 123.
Long Statement,Binarysharp.MemoryManagement.Memory,MemoryCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Memory\MemoryCore.cs,NtQueryInformationProcess,The length of the statement  "            var ret = NativeMethods.NtQueryInformationProcess(processHandle' ProcessInformationClass.ProcessBasicInformation' ref info' info.Size' IntPtr.Zero); " is 148.
Long Statement,Binarysharp.MemoryManagement.Memory,MemoryCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Memory\MemoryCore.cs,ChangeProtection,The length of the statement  "            throw new Win32Exception(string.Format("Couldn't change the protection of the memory at 0x{0} of {1} byte(s) to {2}."' address.ToString("X")' size' protection)); " is 161.
Long Statement,Binarysharp.MemoryManagement.Memory,MemoryCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Memory\MemoryCore.cs,Query,The length of the statement  "            if(NativeMethods.VirtualQueryEx(processHandle' baseAddress' out memoryInfo' MarshalType<MemoryBasicInformation>.Size) != 0) " is 123.
Long Statement,Binarysharp.MemoryManagement.Memory,MemoryCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Memory\MemoryCore.cs,Query,The length of the statement  "            throw new Win32Exception(string.Format("Couldn't query information about the memory region 0x{0}"' baseAddress.ToString("X"))); " is 127.
Long Statement,Binarysharp.MemoryManagement.Memory,MemoryCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Memory\MemoryCore.cs,Query,The length of the statement  "                ret = NativeMethods.VirtualQueryEx(processHandle' new IntPtr(numberFrom)' out memoryInfo' MarshalType<MemoryBasicInformation>.Size); " is 132.
Long Statement,Binarysharp.MemoryManagement.Memory,RemoteRegion,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Memory\RemoteRegion.cs,Equals,The length of the statement  "            return ReferenceEquals(this' other) || (BaseAddress.Equals(other.BaseAddress) && MemorySharp.Equals(other.MemorySharp) && " is 121.
Long Statement,Binarysharp.MemoryManagement.Memory,RemotePointer,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Memory\RemotePointer.cs,Equals,The length of the statement  "            return ReferenceEquals(this' other) || (BaseAddress.Equals(other.BaseAddress) && MemorySharp.Equals(other.MemorySharp)); " is 120.
Long Statement,Binarysharp.MemoryManagement.Modules,InjectedModule,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Modules\InjectedModule.cs,InternalInject,The length of the statement  "                return new InjectedModule(memorySharp' memorySharp.Modules.NativeModules.First(m => m.BaseAddress == thread.GetExitCode<IntPtr>())); " is 132.
Long Statement,Binarysharp.MemoryManagement.Modules,ModuleCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Modules\ModuleCore.cs,GetProcAddress,The length of the statement  "            var module = Process.GetCurrentProcess().Modules.Cast<ProcessModule>().FirstOrDefault(m => m.ModuleName.ToLower() == moduleName.ToLower()); " is 139.
Long Statement,Binarysharp.MemoryManagement.Modules,ModuleCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Modules\ModuleCore.cs,GetProcAddress,The length of the statement  "                throw new ArgumentException(string.Format("Couldn't get the module {0} because it doesn't exist in the current process."' moduleName)); " is 135.
Long Statement,Binarysharp.MemoryManagement.Modules,ModuleCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Modules\ModuleCore.cs,FreeLibrary,The length of the statement  "            var module = Process.GetCurrentProcess().Modules.Cast<ProcessModule>().FirstOrDefault(m => m.ModuleName.ToLower() == libraryName.ToLower()); " is 140.
Long Statement,Binarysharp.MemoryManagement.Modules,ModuleCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Modules\ModuleCore.cs,FreeLibrary,The length of the statement  "                throw new ArgumentException(string.Format("Couldn't free the library {0} because it doesn't exist in the current process."' libraryName)); " is 138.
Long Statement,Binarysharp.MemoryManagement.Modules,ModuleCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Modules\ModuleCore.cs,LoadLibrary,The length of the statement  "                throw new FileNotFoundException(string.Format("Couldn't load the library {0} because the file doesn't exist."' libraryPath)); " is 125.
Long Statement,Binarysharp.MemoryManagement.Modules,RemoteModule,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Modules\RemoteModule.cs,FindFunction,The length of the statement  "            var localModule = Process.GetCurrentProcess().Modules.Cast<ProcessModule>().FirstOrDefault(m => m.FileName.ToLower() == Path.ToLower()); " is 136.
Long Statement,Binarysharp.MemoryManagement.Threading,ThreadCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Threading\ThreadCore.cs,CreateRemoteThread,The length of the statement  "            var ret = NativeMethods.CreateRemoteThread(processHandle' IntPtr.Zero' 0' startAddress' parameter' creationFlags' out threadId); " is 128.
Long Statement,Binarysharp.MemoryManagement.Threading,ThreadCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Threading\ThreadCore.cs,NtQueryInformationThread,The length of the statement  "            var ret = NativeMethods.NtQueryInformationThread(threadHandle' 0' ref info' MarshalType<ThreadBasicInformation>.Size' IntPtr.Zero); " is 131.
Long Statement,Binarysharp.MemoryManagement.Threading,ThreadCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Threading\ThreadCore.cs,WaitForSingleObject,The length of the statement  "            var ret = NativeMethods.WaitForSingleObject(handle' timeout.HasValue ? Convert.ToUInt32(timeout.Value.TotalMilliseconds) : 0); " is 126.
Long Statement,Binarysharp.MemoryManagement.Threading,ThreadFactory,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Threading\ThreadFactory.cs,Create,The length of the statement  "                ThreadCore.CreateRemoteThread(MemorySharp.Handle' address' marshalledParameter.Reference' ThreadCreationFlags.Suspended)); " is 122.
Long Statement,Binarysharp.MemoryManagement.Windows,WindowCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Windows\WindowCore.cs,GetSystemMetrics,The length of the statement  "            throw new Win32Exception("The call of GetSystemMetrics failed. Unfortunately' GetLastError code doesn't provide more information."); " is 132.
Magic Number,Binarysharp.MemoryManagement.Assembly.CallingConvention,CdeclCallingConvention,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Assembly\CallingConvention\CdeclCallingConvention.cs,FormatCleaning,The following statement contains a magic number: return "add esp' " + nbParameters * 4;
Magic Number,Binarysharp.MemoryManagement.Internals,MarshalType<T>,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Internals\MarshalType.cs,ObjectToByteArray,The following statement contains a magic number: switch (TypeCode)              {                  case TypeCode.Object:                      if (IsIntPtr)                      {                          switch (Size)                          {                              case 4:                                  return BitConverter.GetBytes(((IntPtr)(object)obj).ToInt32());                              case 8:                                  return BitConverter.GetBytes(((IntPtr)(object)obj).ToInt64());                          }                      }                      break;                  case TypeCode.Boolean:                      return BitConverter.GetBytes((bool)(object)obj);                  case TypeCode.Char:                      return Encoding.UTF8.GetBytes(new[] {(char)(object)obj});                  case TypeCode.Double:                      return BitConverter.GetBytes((double)(object)obj);                  case TypeCode.Int16:                      return BitConverter.GetBytes((short)(object)obj);                  case TypeCode.Int32:                      return BitConverter.GetBytes((int)(object)obj);                  case TypeCode.Int64:                      return BitConverter.GetBytes((long)(object)obj);                  case TypeCode.Single:                      return BitConverter.GetBytes((float)(object)obj);                  case TypeCode.String:                      throw new InvalidCastException("This method doesn't support string conversion.");                  case TypeCode.UInt16:                      return BitConverter.GetBytes((ushort)(object)obj);                  case TypeCode.UInt32:                      return BitConverter.GetBytes((uint)(object)obj);                  case TypeCode.UInt64:                      return BitConverter.GetBytes((ulong)(object)obj);                }
Magic Number,Binarysharp.MemoryManagement.Internals,MarshalType<T>,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Internals\MarshalType.cs,ObjectToByteArray,The following statement contains a magic number: switch (TypeCode)              {                  case TypeCode.Object:                      if (IsIntPtr)                      {                          switch (Size)                          {                              case 4:                                  return BitConverter.GetBytes(((IntPtr)(object)obj).ToInt32());                              case 8:                                  return BitConverter.GetBytes(((IntPtr)(object)obj).ToInt64());                          }                      }                      break;                  case TypeCode.Boolean:                      return BitConverter.GetBytes((bool)(object)obj);                  case TypeCode.Char:                      return Encoding.UTF8.GetBytes(new[] {(char)(object)obj});                  case TypeCode.Double:                      return BitConverter.GetBytes((double)(object)obj);                  case TypeCode.Int16:                      return BitConverter.GetBytes((short)(object)obj);                  case TypeCode.Int32:                      return BitConverter.GetBytes((int)(object)obj);                  case TypeCode.Int64:                      return BitConverter.GetBytes((long)(object)obj);                  case TypeCode.Single:                      return BitConverter.GetBytes((float)(object)obj);                  case TypeCode.String:                      throw new InvalidCastException("This method doesn't support string conversion.");                  case TypeCode.UInt16:                      return BitConverter.GetBytes((ushort)(object)obj);                  case TypeCode.UInt32:                      return BitConverter.GetBytes((uint)(object)obj);                  case TypeCode.UInt64:                      return BitConverter.GetBytes((ulong)(object)obj);                }
Magic Number,Binarysharp.MemoryManagement.Internals,MarshalType<T>,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Internals\MarshalType.cs,ByteArrayToObject,The following statement contains a magic number: switch (TypeCode)              {                  case TypeCode.Object:                      if (IsIntPtr)                      {                          switch (byteArray.Length)                          {                              case 1:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(new byte[] { byteArray[index]' 0x0' 0x0' 0x0 }' index));                              case 2:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(new byte[] { byteArray[index]' byteArray[index + 1]' 0x0' 0x0 }' index));                              case 4:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(byteArray' index));                              case 8:                                  return (T)(object)new IntPtr(BitConverter.ToInt64(byteArray' index));                          }                      }                      break;                  case TypeCode.Boolean:                      return (T)(object)BitConverter.ToBoolean(byteArray' index);                  case TypeCode.Byte:                      return (T)(object)byteArray[index];                  case TypeCode.Char:                      return (T)(object)Encoding.UTF8.GetChars(byteArray)[index];                  case TypeCode.Double:                      return (T)(object)BitConverter.ToDouble(byteArray' index);                  case TypeCode.Int16:                      return (T)(object)BitConverter.ToInt16(byteArray' index);                  case TypeCode.Int32:                      return (T)(object)BitConverter.ToInt32(byteArray' index);                  case TypeCode.Int64:                      return (T)(object)BitConverter.ToInt64(byteArray' index);                  case TypeCode.Single:                      return (T)(object)BitConverter.ToSingle(byteArray' index);                  case TypeCode.String:                      throw new InvalidCastException("This method doesn't support string conversion.");                  case TypeCode.UInt16:                      return (T)(object)BitConverter.ToUInt16(byteArray' index);                  case TypeCode.UInt32:                      return (T)(object)BitConverter.ToUInt32(byteArray' index);                  case TypeCode.UInt64:                      return (T)(object)BitConverter.ToUInt64(byteArray' index);              }
Magic Number,Binarysharp.MemoryManagement.Internals,MarshalType<T>,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Internals\MarshalType.cs,ByteArrayToObject,The following statement contains a magic number: switch (TypeCode)              {                  case TypeCode.Object:                      if (IsIntPtr)                      {                          switch (byteArray.Length)                          {                              case 1:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(new byte[] { byteArray[index]' 0x0' 0x0' 0x0 }' index));                              case 2:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(new byte[] { byteArray[index]' byteArray[index + 1]' 0x0' 0x0 }' index));                              case 4:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(byteArray' index));                              case 8:                                  return (T)(object)new IntPtr(BitConverter.ToInt64(byteArray' index));                          }                      }                      break;                  case TypeCode.Boolean:                      return (T)(object)BitConverter.ToBoolean(byteArray' index);                  case TypeCode.Byte:                      return (T)(object)byteArray[index];                  case TypeCode.Char:                      return (T)(object)Encoding.UTF8.GetChars(byteArray)[index];                  case TypeCode.Double:                      return (T)(object)BitConverter.ToDouble(byteArray' index);                  case TypeCode.Int16:                      return (T)(object)BitConverter.ToInt16(byteArray' index);                  case TypeCode.Int32:                      return (T)(object)BitConverter.ToInt32(byteArray' index);                  case TypeCode.Int64:                      return (T)(object)BitConverter.ToInt64(byteArray' index);                  case TypeCode.Single:                      return (T)(object)BitConverter.ToSingle(byteArray' index);                  case TypeCode.String:                      throw new InvalidCastException("This method doesn't support string conversion.");                  case TypeCode.UInt16:                      return (T)(object)BitConverter.ToUInt16(byteArray' index);                  case TypeCode.UInt32:                      return (T)(object)BitConverter.ToUInt32(byteArray' index);                  case TypeCode.UInt64:                      return (T)(object)BitConverter.ToUInt64(byteArray' index);              }
Magic Number,Binarysharp.MemoryManagement.Internals,MarshalType<T>,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Internals\MarshalType.cs,ByteArrayToObject,The following statement contains a magic number: switch (TypeCode)              {                  case TypeCode.Object:                      if (IsIntPtr)                      {                          switch (byteArray.Length)                          {                              case 1:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(new byte[] { byteArray[index]' 0x0' 0x0' 0x0 }' index));                              case 2:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(new byte[] { byteArray[index]' byteArray[index + 1]' 0x0' 0x0 }' index));                              case 4:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(byteArray' index));                              case 8:                                  return (T)(object)new IntPtr(BitConverter.ToInt64(byteArray' index));                          }                      }                      break;                  case TypeCode.Boolean:                      return (T)(object)BitConverter.ToBoolean(byteArray' index);                  case TypeCode.Byte:                      return (T)(object)byteArray[index];                  case TypeCode.Char:                      return (T)(object)Encoding.UTF8.GetChars(byteArray)[index];                  case TypeCode.Double:                      return (T)(object)BitConverter.ToDouble(byteArray' index);                  case TypeCode.Int16:                      return (T)(object)BitConverter.ToInt16(byteArray' index);                  case TypeCode.Int32:                      return (T)(object)BitConverter.ToInt32(byteArray' index);                  case TypeCode.Int64:                      return (T)(object)BitConverter.ToInt64(byteArray' index);                  case TypeCode.Single:                      return (T)(object)BitConverter.ToSingle(byteArray' index);                  case TypeCode.String:                      throw new InvalidCastException("This method doesn't support string conversion.");                  case TypeCode.UInt16:                      return (T)(object)BitConverter.ToUInt16(byteArray' index);                  case TypeCode.UInt32:                      return (T)(object)BitConverter.ToUInt32(byteArray' index);                  case TypeCode.UInt64:                      return (T)(object)BitConverter.ToUInt64(byteArray' index);              }
Magic Number,Binarysharp.MemoryManagement.Threading,RemoteThread,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Threading\RemoteThread.cs,GetRealSegmentAddress,The following statement contains a magic number: return new IntPtr(entry.BaseLow | (entry.BaseMid << 16) | (entry.BaseHi << 24));
Magic Number,Binarysharp.MemoryManagement.Threading,RemoteThread,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Threading\RemoteThread.cs,GetRealSegmentAddress,The following statement contains a magic number: return new IntPtr(entry.BaseLow | (entry.BaseMid << 16) | (entry.BaseHi << 24));
Magic Number,Binarysharp.MemoryManagement.Threading,ThreadCore,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Threading\ThreadCore.cs,GetExitCodeThread,The following statement contains a magic number: exitCode == new IntPtr(259)
Magic Number,Binarysharp.MemoryManagement.Windows.Keyboard,BaseKeyboard,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Windows\Keyboard\BaseKeyboard.cs,PressRelease,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Binarysharp.MemoryManagement.Windows.Keyboard,MessageKeyboard,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Windows\Keyboard\MessageKeyboard.cs,MakeKeyParameter,The following statement contains a magic number: result |= WindowCore.MapVirtualKey(key' TranslationTypes.VirtualKeyToScanCode) << 16;
Magic Number,Binarysharp.MemoryManagement.Windows.Mouse,BaseMouse,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Windows\Mouse\BaseMouse.cs,DoubleClickLeft,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Binarysharp.MemoryManagement.Windows.Mouse,SendInputMouse,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Windows\Mouse\SendInputMouse.cs,CalculateAbsoluteCoordinateX,The following statement contains a magic number: return (x * 65536) / NativeMethods.GetSystemMetrics(SystemMetrics.CxScreen);
Magic Number,Binarysharp.MemoryManagement.Windows.Mouse,SendInputMouse,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Windows\Mouse\SendInputMouse.cs,CalculateAbsoluteCoordinateY,The following statement contains a magic number: return (y * 65536) / NativeMethods.GetSystemMetrics(SystemMetrics.CyScreen);
Magic Number,Binarysharp.MemoryManagement.Windows,RemoteWindow,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Windows\RemoteWindow.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Handle.GetHashCode();
Missing Default,Binarysharp.MemoryManagement.Internals,MarshalType<T>,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Internals\MarshalType.cs,ObjectToByteArray,The following switch statement is missing a default case: switch (TypeCode)              {                  case TypeCode.Object:                      if (IsIntPtr)                      {                          switch (Size)                          {                              case 4:                                  return BitConverter.GetBytes(((IntPtr)(object)obj).ToInt32());                              case 8:                                  return BitConverter.GetBytes(((IntPtr)(object)obj).ToInt64());                          }                      }                      break;                  case TypeCode.Boolean:                      return BitConverter.GetBytes((bool)(object)obj);                  case TypeCode.Char:                      return Encoding.UTF8.GetBytes(new[] {(char)(object)obj});                  case TypeCode.Double:                      return BitConverter.GetBytes((double)(object)obj);                  case TypeCode.Int16:                      return BitConverter.GetBytes((short)(object)obj);                  case TypeCode.Int32:                      return BitConverter.GetBytes((int)(object)obj);                  case TypeCode.Int64:                      return BitConverter.GetBytes((long)(object)obj);                  case TypeCode.Single:                      return BitConverter.GetBytes((float)(object)obj);                  case TypeCode.String:                      throw new InvalidCastException("This method doesn't support string conversion.");                  case TypeCode.UInt16:                      return BitConverter.GetBytes((ushort)(object)obj);                  case TypeCode.UInt32:                      return BitConverter.GetBytes((uint)(object)obj);                  case TypeCode.UInt64:                      return BitConverter.GetBytes((ulong)(object)obj);                }
Missing Default,Binarysharp.MemoryManagement.Internals,MarshalType<T>,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Internals\MarshalType.cs,ObjectToByteArray,The following switch statement is missing a default case: switch (Size)                          {                              case 4:                                  return BitConverter.GetBytes(((IntPtr)(object)obj).ToInt32());                              case 8:                                  return BitConverter.GetBytes(((IntPtr)(object)obj).ToInt64());                          }
Missing Default,Binarysharp.MemoryManagement.Internals,MarshalType<T>,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Internals\MarshalType.cs,ByteArrayToObject,The following switch statement is missing a default case: switch (TypeCode)              {                  case TypeCode.Object:                      if (IsIntPtr)                      {                          switch (byteArray.Length)                          {                              case 1:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(new byte[] { byteArray[index]' 0x0' 0x0' 0x0 }' index));                              case 2:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(new byte[] { byteArray[index]' byteArray[index + 1]' 0x0' 0x0 }' index));                              case 4:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(byteArray' index));                              case 8:                                  return (T)(object)new IntPtr(BitConverter.ToInt64(byteArray' index));                          }                      }                      break;                  case TypeCode.Boolean:                      return (T)(object)BitConverter.ToBoolean(byteArray' index);                  case TypeCode.Byte:                      return (T)(object)byteArray[index];                  case TypeCode.Char:                      return (T)(object)Encoding.UTF8.GetChars(byteArray)[index];                  case TypeCode.Double:                      return (T)(object)BitConverter.ToDouble(byteArray' index);                  case TypeCode.Int16:                      return (T)(object)BitConverter.ToInt16(byteArray' index);                  case TypeCode.Int32:                      return (T)(object)BitConverter.ToInt32(byteArray' index);                  case TypeCode.Int64:                      return (T)(object)BitConverter.ToInt64(byteArray' index);                  case TypeCode.Single:                      return (T)(object)BitConverter.ToSingle(byteArray' index);                  case TypeCode.String:                      throw new InvalidCastException("This method doesn't support string conversion.");                  case TypeCode.UInt16:                      return (T)(object)BitConverter.ToUInt16(byteArray' index);                  case TypeCode.UInt32:                      return (T)(object)BitConverter.ToUInt32(byteArray' index);                  case TypeCode.UInt64:                      return (T)(object)BitConverter.ToUInt64(byteArray' index);              }
Missing Default,Binarysharp.MemoryManagement.Internals,MarshalType<T>,D:\research\architectureSmells\repos\ZenLulz_MemorySharp\src\MemorySharp\Internals\MarshalType.cs,ByteArrayToObject,The following switch statement is missing a default case: switch (byteArray.Length)                          {                              case 1:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(new byte[] { byteArray[index]' 0x0' 0x0' 0x0 }' index));                              case 2:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(new byte[] { byteArray[index]' byteArray[index + 1]' 0x0' 0x0 }' index));                              case 4:                                  return (T)(object)new IntPtr(BitConverter.ToInt32(byteArray' index));                              case 8:                                  return (T)(object)new IntPtr(BitConverter.ToInt64(byteArray' index));                          }
