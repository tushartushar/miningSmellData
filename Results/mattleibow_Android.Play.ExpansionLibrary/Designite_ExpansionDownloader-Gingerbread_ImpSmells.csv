Implementation smell,Namespace,Class,File,Method,Description
Long Method,ExpansionDownloader.Service,DownloaderService,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloaderService.cs,OnHandleIntent,The method has 151 lines of code.
Complex Method,ExpansionDownloader,DownloadNotification,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\DownloadNotification.cs,OnDownloadStateChanged,Cyclomatic complexity of the method is 9
Complex Method,ExpansionDownloader.Service,DownloaderService,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloaderService.cs,OnHandleIntent,Cyclomatic complexity of the method is 20
Complex Method,ExpansionDownloader.Service,DownloaderService,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloaderService.cs,UpdateNetworkState,Cyclomatic complexity of the method is 9
Complex Method,ExpansionDownloader.Service,ApkLicenseCheckerCallback,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloaderService.LvlRunner.cs,Allow,Cyclomatic complexity of the method is 9
Complex Method,ExpansionDownloader.Service,DownloadThread,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloadThread.cs,ReadResponseHeaders,Cyclomatic complexity of the method is 8
Complex Method,ExpansionDownloader.Service,DownloadThread,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloadThread.cs,SetupDestinationFile,Cyclomatic complexity of the method is 8
Complex Method,ExpansionDownloader.Service,Helpers,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\Helpers.cs,GetDownloaderStringFromState,Cyclomatic complexity of the method is 18
Long Parameter List,ExpansionDownloader.Service,DownloadThread,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloadThread.cs,NotifyDownloadCompleted,The method has 5 parameters. Parameters: status' countRetry' retryAfter' redirectCount' gotData
Long Parameter List,ExpansionDownloader.Service,DownloadThread,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloadThread.cs,UpdateDownloadDatabase,The method has 5 parameters. Parameters: status' countRetry' retryAfter' redirectCount' gotData
Long Statement,ExpansionDownloader,ExpansionDownloadStatusExtensions,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\ExpansionDownloadStatusExtensions.cs,IsInformational,The length of the statement  "            return status >= ExpansionDownloadStatus.InformationalMinimum && status <= ExpansionDownloadStatus.InformationalMaximum; " is 120.
Long Statement,ExpansionDownloader,V3CustomNotification,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\V3CustomNotification.cs,UpdateNotification,The length of the statement  "            expandedView.SetTextViewText(Resource.Id.progress_text' Helpers.GetDownloadProgressPercent(this.CurrentBytes' this.TotalBytes)); " is 128.
Long Statement,ExpansionDownloader,V3CustomNotification,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\V3CustomNotification.cs,UpdateNotification,The length of the statement  "            expandedView.SetTextViewText(Resource.Id.description' Helpers.GetDownloadProgressString(this.CurrentBytes' this.TotalBytes)); " is 125.
Long Statement,ExpansionDownloader,V3CustomNotification,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\V3CustomNotification.cs,UpdateNotification,The length of the statement  "            expandedView.SetTextViewText(Resource.Id.time_remaining' context.GetString(Resource.String.time_remaining_notification' Helpers.GetTimeRemaining(this.TimeRemaining))); " is 167.
Long Statement,ExpansionDownloader.Service,DownloadThread,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloadThread.cs,Run,The length of the statement  "                    Log.Debug(Tag' "DownloadThread : initiating download for " + this.downloadInfo.FileName + " at " + this.downloadInfo.Uri); " is 122.
Empty Catch Block,ExpansionDownloader.Service,DownloadThread,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloadThread.cs,Run,The method has an empty catch block.
Magic Number,ExpansionDownloader,DownloadProgressInfo,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\DownloadProgressInfo.cs,DownloadProgressInfo,The following statement contains a magic number: this.TimeRemaining = long.Parse(items[2]);
Magic Number,ExpansionDownloader,DownloadProgressInfo,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\DownloadProgressInfo.cs,DownloadProgressInfo,The following statement contains a magic number: this.CurrentSpeed = float.Parse(items[3]);
Magic Number,ExpansionDownloader,V3CustomNotification,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\V3CustomNotification.cs,UpdateNotification,The following statement contains a magic number: expandedView.SetProgressBar(                  Resource.Id.progress_bar'                  (int)(this.TotalBytes >> 8)'                  (int)(this.CurrentBytes >> 8)'                  this.TotalBytes <= 0);
Magic Number,ExpansionDownloader,V3CustomNotification,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\V3CustomNotification.cs,UpdateNotification,The following statement contains a magic number: expandedView.SetProgressBar(                  Resource.Id.progress_bar'                  (int)(this.TotalBytes >> 8)'                  (int)(this.CurrentBytes >> 8)'                  this.TotalBytes <= 0);
Magic Number,ExpansionDownloader.Service,DownloadThread,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloadThread.cs,HandleServiceUnavailable,The following statement contains a magic number: state.RetryAfter *= 1000;
Magic Number,ExpansionDownloader.Service,DownloadThread,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloadThread.cs,HandleRedirect,The following statement contains a magic number: (int)statusCode == 301 || (int)statusCode == 303
Magic Number,ExpansionDownloader.Service,DownloadThread,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloadThread.cs,HandleRedirect,The following statement contains a magic number: (int)statusCode == 301 || (int)statusCode == 303
Magic Number,ExpansionDownloader.Service,Helpers,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\Helpers.cs,Helpers,The following statement contains a magic number: Megabytes = 1024.0F * 1024.0F;
Magic Number,ExpansionDownloader.Service,Helpers,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\Helpers.cs,Helpers,The following statement contains a magic number: Megabytes = 1024.0F * 1024.0F;
Magic Number,ExpansionDownloader.Service,Helpers,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\Helpers.cs,GetAvailableBytes,The following statement contains a magic number: long availableBlocks = (long)stat.AvailableBlocks - 4;
Magic Number,ExpansionDownloader.Service,Helpers,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\Helpers.cs,GetDownloadProgressPercent,The following statement contains a magic number: return string.Format("{0}%"' overallProgress * 100 / overallTotal);
Magic Number,ExpansionDownloader.Service,Helpers,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\Helpers.cs,GetSpeedString,The following statement contains a magic number: return string.Format("{0:0.0}"' bytesPerMillisecond * 1000 / 1024);
Magic Number,ExpansionDownloader.Service,Helpers,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\Helpers.cs,GetSpeedString,The following statement contains a magic number: return string.Format("{0:0.0}"' bytesPerMillisecond * 1000 / 1024);
Missing Default,ExpansionDownloader.Client,DownloaderServiceConnection,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Client\ClientMarshaller.cs,SendMessage,The following switch statement is missing a default case: switch ((ClientMessages)msg.What)                  {                      case ClientMessages.DownloadProgress:  						string progress = msg.Data.GetString(ClientMessageParameters.Progress);                          var info = new DownloadProgressInfo(progress);                          this.clientType.OnDownloadProgress(info);                          break;                      case ClientMessages.DownloadStateChanged:                          var state = (DownloaderState)msg.Data.GetInt(ClientMessageParameters.NewState);                          this.clientType.OnDownloadStateChanged(state);                          break;                      case ClientMessages.ServiceConnected:                          var m = (Messenger)msg.Data.GetParcelable(ClientMessageParameters.Messenger);                          this.clientType.OnServiceConnected(m);                          break;                  }
Missing Default,ExpansionDownloader.Service,DownloaderService,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloaderService.cs,StartDownloadServiceIfRequired,The following switch statement is missing a default case: switch (status)              {                  case DownloadServiceRequirement.DownloadRequired:                  case DownloadServiceRequirement.LvlCheckRequired:                      var fileIntent = new Intent(context.ApplicationContext' serviceType);                      fileIntent.PutExtra(DownloaderServiceExtras.PendingIntent' pendingIntent);                      context.StartService(fileIntent);                      break;              }
Missing Default,ExpansionDownloader.Service,DownloaderService,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloaderService.cs,GetNetworkState,The following switch statement is missing a default case: switch (info.Type)              {                  case ConnectivityType.Wifi:  #if __ANDROID_13__                  case ConnectivityType.Ethernet:                  case ConnectivityType.Bluetooth:  #endif  		            break;                  case ConnectivityType.Wimax:                      state = NetworkState.Is3G | NetworkState.Is4G | NetworkState.IsCellular;                      break;                    case ConnectivityType.Mobile:                      state = NetworkState.IsCellular;                      switch ((NetworkType)info.Subtype)                      {                          case NetworkType.OneXrtt:                          case NetworkType.Cdma:                          case NetworkType.Edge:                          case NetworkType.Gprs:                          case NetworkType.Iden:                              break;                          case NetworkType.Hsdpa:                          case NetworkType.Hsupa:                          case NetworkType.Hspa:                          case NetworkType.Evdo0:                          case NetworkType.EvdoA:                          case NetworkType.Umts:                              state |= NetworkState.Is3G;                              break;  #if __ANDROID_11__                          case NetworkType.Lte:                          case NetworkType.Ehrpd:  							state |= NetworkState.Is3G | NetworkState.Is4G;                              break;  #endif  #if __ANDROID_13__                          case NetworkType.Hspap:  							state |= NetworkState.Is3G | NetworkState.Is4G;                              break;  #endif                      }                        break;              }
Missing Default,ExpansionDownloader.Service,DownloaderService,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloaderService.cs,GetNetworkState,The following switch statement is missing a default case: switch ((NetworkType)info.Subtype)                      {                          case NetworkType.OneXrtt:                          case NetworkType.Cdma:                          case NetworkType.Edge:                          case NetworkType.Gprs:                          case NetworkType.Iden:                              break;                          case NetworkType.Hsdpa:                          case NetworkType.Hsupa:                          case NetworkType.Hspa:                          case NetworkType.Evdo0:                          case NetworkType.EvdoA:                          case NetworkType.Umts:                              state |= NetworkState.Is3G;                              break;  #if __ANDROID_11__                          case NetworkType.Lte:                          case NetworkType.Ehrpd:  							state |= NetworkState.Is3G | NetworkState.Is4G;                              break;  #endif  #if __ANDROID_13__                          case NetworkType.Hspap:  							state |= NetworkState.Is3G | NetworkState.Is4G;                              break;  #endif                      }
Missing Default,ExpansionDownloader.Service,ApkLicenseCheckerCallback,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloaderService.LvlRunner.cs,Allow,The following switch statement is missing a default case: switch (required)                              {                                  case DownloadServiceRequirement.NoDownloadRequired:                                      this.Context.downloadNotification.OnDownloadStateChanged(DownloaderState.Completed);                                      break;                                    case DownloadServiceRequirement.LvlCheckRequired: // DANGER WILL ROBINSON!                                      Debug.WriteLine("In LVL checking loop!");                                      this.Context.downloadNotification.OnDownloadStateChanged(                                          DownloaderState.FailedUnlicensed);                                      throw new RuntimeException("Error with LVL checking and database integrity");                                    case DownloadServiceRequirement.DownloadRequired:                                        // do nothing: the download will notify the application when things are done                                      break;                              }
Missing Default,ExpansionDownloader.Service,ApkLicenseCheckerCallback,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloaderService.LvlRunner.cs,DontAllow,The following switch statement is missing a default case: switch (reason)                          {                              case PolicyServerResponse.NotLicensed:                                  this.Context.downloadNotification.OnDownloadStateChanged(                                      DownloaderState.FailedUnlicensed);                                  break;                              case PolicyServerResponse.Retry:                                  this.Context.downloadNotification.OnDownloadStateChanged(                                      DownloaderState.FailedFetchingUrl);                                  break;                          }
Missing Default,ExpansionDownloader.Service,DownloadThread,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloadThread.cs,CheckConnectivity,The following switch statement is missing a default case: switch (availabilityState)              {                  case NetworkDisabledState.Ok:                      return;                  case NetworkDisabledState.NoConnection:                      throw new StopRequestException(ExpansionDownloadStatus.WaitingForNetwork' "waiting for network to return");                  case NetworkDisabledState.TypeDisallowedByRequestor:                      throw new StopRequestException(                          ExpansionDownloadStatus.QueuedForWifiOrCellularPermission'                           "waiting for wifi or for download over cellular to be authorized");                  case NetworkDisabledState.CannotUseRoaming:                      throw new StopRequestException(ExpansionDownloadStatus.WaitingForNetwork' "roaming is not allowed");                  case NetworkDisabledState.UnusableDueToSize:                      throw new StopRequestException(ExpansionDownloadStatus.QueuedForWifi' "waiting for wifi");              }
Missing Default,ExpansionDownloader.Service,DownloadThread,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\DownloadThread.cs,HandleExceptionalStatus,The following switch statement is missing a default case: switch (statusCode)              {                  case HttpStatusCode.TemporaryRedirect:                  case HttpStatusCode.SeeOther:                  case HttpStatusCode.Found:                  case HttpStatusCode.Moved:                      this.HandleRedirect(state' response' statusCode);                      break;              }
Missing Default,ExpansionDownloader.Service,DownloaderServiceConnection,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\ExpansionDownloader\Service\ServiceMarshaller.cs,SendMessage,The following switch statement is missing a default case: switch ((ServiceMessages)message.What)                  {                      case ServiceMessages.RequestAbortDownload:                          this.downloaderService.RequestAbortDownload();                          break;                      case ServiceMessages.RequestContinueDownload:                          this.downloaderService.RequestContinueDownload();                          break;                      case ServiceMessages.RequestPauseDownload:                          this.downloaderService.RequestPauseDownload();                          break;                      case ServiceMessages.SetDownloadFlags:                          var flags = (ServiceFlags)message.Data.GetInt(ServiceParameters.Flags);                          this.downloaderService.SetDownloadFlags(flags);                          break;                      case ServiceMessages.RequestDownloadState:                          this.downloaderService.RequestDownloadStatus();                          break;                      case ServiceMessages.RequestClientUpdate:                          var m = (Messenger)message.Data.GetParcelable(ServiceParameters.Messenger);                          this.downloaderService.OnClientUpdated(m);                          break;                  }
