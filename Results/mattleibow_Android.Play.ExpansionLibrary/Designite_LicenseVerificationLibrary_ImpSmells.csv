Implementation smell,Namespace,Class,File,Method,Description
Long Method,LicenseVerificationLibrary,LicenseValidator,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\LicenseValidator.cs,Verify,The method has 122 lines of code.
Complex Method,LicenseVerificationLibrary,LicenseValidator,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\LicenseValidator.cs,Verify,Cyclomatic complexity of the method is 16
Long Parameter List,LicenseVerificationLibrary,LicenseValidator,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\LicenseValidator.cs,LicenseValidator,The method has 6 parameters. Parameters: policy' deviceLimiter' callback' nonce' packageName' versionCode
Magic Number,LicenseVerificationLibrary,ResponseData,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\ResponseData.cs,Parse,The following statement contains a magic number: fields.Length < 6
Magic Number,LicenseVerificationLibrary,ResponseData,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\ResponseData.cs,Parse,The following statement contains a magic number: var data = new ResponseData                  {                      Extra = extraData'                       ResponseCode = (ServerResponseCode)Enum.Parse(typeof(ServerResponseCode)' fields[0])'                       NumberUsedOnce = int.Parse(fields[1])'                       PackageName = fields[2]'                       VersionCode = fields[3]'                       // Application-specific user identifier.                      UserId = fields[4]'                       TimeStamp = long.Parse(fields[5])                  };
Magic Number,LicenseVerificationLibrary,ResponseData,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\ResponseData.cs,Parse,The following statement contains a magic number: var data = new ResponseData                  {                      Extra = extraData'                       ResponseCode = (ServerResponseCode)Enum.Parse(typeof(ServerResponseCode)' fields[0])'                       NumberUsedOnce = int.Parse(fields[1])'                       PackageName = fields[2]'                       VersionCode = fields[3]'                       // Application-specific user identifier.                      UserId = fields[4]'                       TimeStamp = long.Parse(fields[5])                  };
Magic Number,LicenseVerificationLibrary,ResponseData,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\ResponseData.cs,Parse,The following statement contains a magic number: var data = new ResponseData                  {                      Extra = extraData'                       ResponseCode = (ServerResponseCode)Enum.Parse(typeof(ServerResponseCode)' fields[0])'                       NumberUsedOnce = int.Parse(fields[1])'                       PackageName = fields[2]'                       VersionCode = fields[3]'                       // Application-specific user identifier.                      UserId = fields[4]'                       TimeStamp = long.Parse(fields[5])                  };
Magic Number,LicenseVerificationLibrary,ResponseData,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\ResponseData.cs,Parse,The following statement contains a magic number: var data = new ResponseData                  {                      Extra = extraData'                       ResponseCode = (ServerResponseCode)Enum.Parse(typeof(ServerResponseCode)' fields[0])'                       NumberUsedOnce = int.Parse(fields[1])'                       PackageName = fields[2]'                       VersionCode = fields[3]'                       // Application-specific user identifier.                      UserId = fields[4]'                       TimeStamp = long.Parse(fields[5])                  };
Magic Number,LicenseVerificationLibrary.Obfuscator,AesObfuscator,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\Obfuscator\AesObfuscator.cs,AesObfuscator,The following statement contains a magic number: IKeySpec keySpec = new PBEKeySpec((applicationId + deviceId).ToCharArray()' salt' 1024' 256);
Magic Number,LicenseVerificationLibrary.Obfuscator,AesObfuscator,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\Obfuscator\AesObfuscator.cs,AesObfuscator,The following statement contains a magic number: IKeySpec keySpec = new PBEKeySpec((applicationId + deviceId).ToCharArray()' salt' 1024' 256);
Magic Number,LicenseVerificationLibrary.Policy,PolicyExtensions,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\Policy\PolicyExtensions.cs,GetParameters,The following statement contains a magic number: nameValue.Length < 1 || nameValue.Length > 2
Magic Number,LicenseVerificationLibrary.Policy,PolicyExtensions,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\Policy\PolicyExtensions.cs,GetParameters,The following statement contains a magic number: string value = nameValue.Length == 2 ? URLDecoder.Decode(nameValue[1]' encoding.WebName) : string.Empty;
Missing Default,LicenseVerificationLibrary,LicenseResultListenerStub,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\LicenseResultListenerStub.cs,OnTransact,The following switch statement is missing a default case: switch (code)              {                  case BinderConsts.InterfaceTransaction:                      reply.WriteString(Descriptor);                      handled = true;                      break;                    case TransactionVerifyLicense:                      data.EnforceInterface(Descriptor);                      var responseCode = data.ReadInt();                      var signedData = data.ReadString();                      var signature = data.ReadString();                      this.VerifyLicense((ServerResponseCode)responseCode' signedData' signature);                      handled = true;                      break;              }
Missing Default,LicenseVerificationLibrary,LicensingServiceStub,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\LicensingServiceStub.cs,OnTransact,The following switch statement is missing a default case: switch (code)              {                  case BinderConsts.InterfaceTransaction:                      reply.WriteString(Descriptor);                      handled = true;                      break;                  case TransactionCheckLicense:                      data.EnforceInterface(Descriptor);                      var nonce = data.ReadLong();                      var packageName = data.ReadString();                      var resultListener = LicenseResultListenerStub.AsInterface(data.ReadStrongBinder());                        this.CheckLicense(nonce' packageName' resultListener);                      handled = true;                      break;              }
Missing Default,LicenseVerificationLibrary.Policy,ServerManagedPolicy,D:\research\architectureSmells\repos\mattleibow_Android.Play.ExpansionLibrary\LicenseVerificationLibrary\Policy\ServerManagedPolicy.cs,ProcessServerResponse,The following switch statement is missing a default case: switch (response)              {                  case PolicyServerResponse.Licensed:                        // Update server policy data                      Dictionary<string' string> extras;                      if (!PolicyExtensions.TryDecodeExtras(rawData.Extra' out extras))                      {                          Debug.WriteLine("Invalid syntax error while decoding extras data from server.");                      }  					  					// If no response or not parseable' expire in one minute.  					this.ValidityTimestamp = PolicyExtensions.GetCurrentMilliseconds() + PolicyExtensions.MillisPerMinute;  					  					foreach (var pair in extras)  					{  						this.ProcessResponseExtra(pair);  					}                        break;                  case PolicyServerResponse.NotLicensed:  					this.ValidityTimestamp = Preferences.DefaultValidityTimestamp;  					this.RetryUntil = Preferences.DefaultRetryUntil;  					this.MaxRetries = Preferences.DefaultMaxRetries;                      break;              }
