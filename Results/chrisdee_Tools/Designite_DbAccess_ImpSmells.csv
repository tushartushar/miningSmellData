Implementation smell,Namespace,Class,File,Method,Description
Long Method,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CreateTableSchema,The method has 148 lines of code.
Complex Method,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,GetDbTypeOfColumn,Cyclomatic complexity of the method is 17
Complex Method,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,BuildCreateTableQuery,Cyclomatic complexity of the method is 11
Complex Method,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,FixDefaultValueString,Cyclomatic complexity of the method is 8
Long Parameter List,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ConvertSqlServerToSQLiteDatabase,The method has 8 parameters. Parameters: sqlServerConnString' sqlitePath' password' handler' selectionHandler' viewFailureHandler' createTriggers' createViews
Long Parameter List,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ConvertSqlServerDatabaseToSQLiteFile,The method has 8 parameters. Parameters: sqlConnString' sqlitePath' password' handler' selectionHandler' viewFailureHandler' createTriggers' createViews
Long Parameter List,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CopySqlServerRowsToSQLiteDB,The method has 5 parameters. Parameters: sqlConnString' sqlitePath' schema' password' handler
Long Parameter List,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CreateSQLiteDatabase,The method has 6 parameters. Parameters: sqlitePath' schema' password' handler' viewFailureHandler' createViews
Long Statement,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ConvertSqlServerToSQLiteDatabase,The length of the statement  "                    ConvertSqlServerDatabaseToSQLiteFile(sqlServerConnString' sqlitePath' password' handler' selectionHandler' viewFailureHandler' createTriggers' createViews); " is 156.
Long Statement,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,GetDbTypeOfColumn,The length of the statement  "            if (cs.ColumnType == "timestamp" || cs.ColumnType == "datetime" || cs.ColumnType == "datetime2" || cs.ColumnType == "date" || cs.ColumnType == "time") " is 150.
Long Statement,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CreateSQLiteDatabase,The length of the statement  "                    handler(false' true' (int)(count * 50.0 / schema.Tables.Count)' "Added table " + dt.TableName + " to the SQLite database"); " is 123.
Long Statement,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CreateSQLiteDatabase,The length of the statement  "                        handler(false' true' 50 + (int)(count * 50.0 / schema.Views.Count)' "Added view " + vs.ViewName + " to the SQLite database"); " is 125.
Long Statement,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,BuildColumnStatement,The length of the statement  "                if (ts.PrimaryKey.Count == 1 && (col.ColumnType == "tinyint" || col.ColumnType == "int" || col.ColumnType == "smallint" || " is 122.
Long Statement,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CreateTableSchema,The length of the statement  "                    else if (dataType == "datetime" || dataType == "smalldatetime" || dataType == "date" || dataType == "datetime2" || dataType == "time") " is 134.
Long Statement,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ValidateDataType,The length of the statement  "                dataType == "xml" || dataType == "sql_variant" || dataType == "datetime2" || dataType == "date" || dataType == "time" || " is 120.
Long Statement,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CreateForeignKeySchema,The length of the statement  "                @"INNER JOIN INFORMATION_SCHEMA.COLUMNS AS COL ON CU.COLUMN_NAME = COL.COLUMN_NAME AND FK.TABLE_NAME = COL.TABLE_NAME " + " is 121.
Complex Conditional,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,GetDbTypeOfColumn,The conditional expression  "cs.ColumnType == "nvarchar" || cs.ColumnType == "varchar" ||                  cs.ColumnType == "text" || cs.ColumnType == "ntext""  is complex.
Complex Conditional,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,GetDbTypeOfColumn,The conditional expression  "cs.ColumnType == "timestamp" || cs.ColumnType == "datetime" || cs.ColumnType == "datetime2" || cs.ColumnType == "date" || cs.ColumnType == "time""  is complex.
Complex Conditional,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,BuildColumnStatement,The conditional expression  "ts.PrimaryKey.Count == 1 && (col.ColumnType == "tinyint" || col.ColumnType == "int" || col.ColumnType == "smallint" ||                      col.ColumnType == "bigint" || col.ColumnType == "integer")"  is complex.
Complex Conditional,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CreateTableSchema,The conditional expression  "dataType == "datetime" || dataType == "smalldatetime" || dataType == "date" || dataType == "datetime2" || dataType == "time""  is complex.
Complex Conditional,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ValidateDataType,The conditional expression  "dataType == "int" || dataType == "smallint" ||                  dataType == "bit" || dataType == "float" ||                  dataType == "real" || dataType == "nvarchar" ||                  dataType == "varchar" || dataType == "timestamp" ||                  dataType == "varbinary" || dataType == "image" ||                  dataType == "text" || dataType == "ntext" ||                  dataType == "bigint" ||                  dataType == "char" || dataType == "numeric" ||                  dataType == "binary" || dataType == "smalldatetime" ||                  dataType == "smallmoney" || dataType == "money" ||                  dataType == "tinyint" || dataType == "uniqueidentifier" ||                  dataType == "xml" || dataType == "sql_variant" || dataType == "datetime2" || dataType == "date" || dataType == "time" ||                  dataType == "decimal" || dataType == "nchar" || dataType == "datetime""  is complex.
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ConvertSqlServerToSQLiteDatabase,The following statement contains a magic number: WaitCallback wc = new WaitCallback(delegate(object state)              {                  try                  {                      _isActive = true;                      ConvertSqlServerDatabaseToSQLiteFile(sqlServerConnString' sqlitePath' password' handler' selectionHandler' viewFailureHandler' createTriggers' createViews);                      _isActive = false;                      handler(true' true' 100' "Finished converting database");                  }                  catch (Exception ex)                  {                      _log.Error("Failed to convert SQL Server database to SQLite database"' ex);                      _isActive = false;                      handler(true' false' 100' ex.Message);                  } // catch              });
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ConvertSqlServerToSQLiteDatabase,The following statement contains a magic number: WaitCallback wc = new WaitCallback(delegate(object state)              {                  try                  {                      _isActive = true;                      ConvertSqlServerDatabaseToSQLiteFile(sqlServerConnString' sqlitePath' password' handler' selectionHandler' viewFailureHandler' createTriggers' createViews);                      _isActive = false;                      handler(true' true' 100' "Finished converting database");                  }                  catch (Exception ex)                  {                      _log.Error("Failed to convert SQL Server database to SQLite database"' ex);                      _isActive = false;                      handler(true' false' 100' ex.Message);                  } // catch              });
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CopySqlServerRowsToSQLiteDB,The following statement contains a magic number: using (SqlConnection ssconn = new SqlConnection(sqlConnString))              {                  ssconn.Open();                    // Connect to the SQLite database next                  string sqliteConnString = CreateSQLiteConnectionString(sqlitePath' password);                  using (SQLiteConnection sqconn = new SQLiteConnection(sqliteConnString))                  {                      sqconn.Open();                        // Go over all tables in the schema and copy their rows                      for (int i = 0; i < schema.Count; i++)                      {                          SQLiteTransaction tx = sqconn.BeginTransaction();                          try                          {                              string tableQuery = BuildSqlServerTableQuery(schema[i]);                              SqlCommand query = new SqlCommand(tableQuery' ssconn);                              using (SqlDataReader reader = query.ExecuteReader())                              {                                  SQLiteCommand insert = BuildSQLiteInsert(schema[i]);                                  int counter = 0;                                  while (reader.Read())                                  {                                      insert.Connection = sqconn;                                      insert.Transaction = tx;                                      List<string> pnames = new List<string>();                                      for (int j = 0; j < schema[i].Columns.Count; j++)                                      {                                          string pname = "@" + GetNormalizedName(schema[i].Columns[j].ColumnName' pnames);                                          insert.Parameters[pname].Value = CastValueForColumn(reader[j]' schema[i].Columns[j]);                                          pnames.Add(pname);                                      }                                      insert.ExecuteNonQuery();                                      counter++;                                      if (counter % 1000 == 0)                                      {                                          CheckCancelled();                                          tx.Commit();                                          handler(false' true' (int)(100.0 * i / schema.Count)'                                              "Added " + counter + " rows to table " + schema[i].TableName + " so far");                                          tx = sqconn.BeginTransaction();                                      }                                  } // while                              } // using                                CheckCancelled();                              tx.Commit();                                handler(false' true' (int)(100.0 * i / schema.Count)' "Finished inserting rows for table " + schema[i].TableName);                              _log.Debug("finished inserting all rows for table [" + schema[i].TableName + "]");                          }                          catch (Exception ex)                          {                              _log.Error("unexpected exception"' ex);                              tx.Rollback();                              throw;                          } // catch                      }                  } // using              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CopySqlServerRowsToSQLiteDB,The following statement contains a magic number: using (SqlConnection ssconn = new SqlConnection(sqlConnString))              {                  ssconn.Open();                    // Connect to the SQLite database next                  string sqliteConnString = CreateSQLiteConnectionString(sqlitePath' password);                  using (SQLiteConnection sqconn = new SQLiteConnection(sqliteConnString))                  {                      sqconn.Open();                        // Go over all tables in the schema and copy their rows                      for (int i = 0; i < schema.Count; i++)                      {                          SQLiteTransaction tx = sqconn.BeginTransaction();                          try                          {                              string tableQuery = BuildSqlServerTableQuery(schema[i]);                              SqlCommand query = new SqlCommand(tableQuery' ssconn);                              using (SqlDataReader reader = query.ExecuteReader())                              {                                  SQLiteCommand insert = BuildSQLiteInsert(schema[i]);                                  int counter = 0;                                  while (reader.Read())                                  {                                      insert.Connection = sqconn;                                      insert.Transaction = tx;                                      List<string> pnames = new List<string>();                                      for (int j = 0; j < schema[i].Columns.Count; j++)                                      {                                          string pname = "@" + GetNormalizedName(schema[i].Columns[j].ColumnName' pnames);                                          insert.Parameters[pname].Value = CastValueForColumn(reader[j]' schema[i].Columns[j]);                                          pnames.Add(pname);                                      }                                      insert.ExecuteNonQuery();                                      counter++;                                      if (counter % 1000 == 0)                                      {                                          CheckCancelled();                                          tx.Commit();                                          handler(false' true' (int)(100.0 * i / schema.Count)'                                              "Added " + counter + " rows to table " + schema[i].TableName + " so far");                                          tx = sqconn.BeginTransaction();                                      }                                  } // while                              } // using                                CheckCancelled();                              tx.Commit();                                handler(false' true' (int)(100.0 * i / schema.Count)' "Finished inserting rows for table " + schema[i].TableName);                              _log.Debug("finished inserting all rows for table [" + schema[i].TableName + "]");                          }                          catch (Exception ex)                          {                              _log.Error("unexpected exception"' ex);                              tx.Rollback();                              throw;                          } // catch                      }                  } // using              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CopySqlServerRowsToSQLiteDB,The following statement contains a magic number: using (SqlConnection ssconn = new SqlConnection(sqlConnString))              {                  ssconn.Open();                    // Connect to the SQLite database next                  string sqliteConnString = CreateSQLiteConnectionString(sqlitePath' password);                  using (SQLiteConnection sqconn = new SQLiteConnection(sqliteConnString))                  {                      sqconn.Open();                        // Go over all tables in the schema and copy their rows                      for (int i = 0; i < schema.Count; i++)                      {                          SQLiteTransaction tx = sqconn.BeginTransaction();                          try                          {                              string tableQuery = BuildSqlServerTableQuery(schema[i]);                              SqlCommand query = new SqlCommand(tableQuery' ssconn);                              using (SqlDataReader reader = query.ExecuteReader())                              {                                  SQLiteCommand insert = BuildSQLiteInsert(schema[i]);                                  int counter = 0;                                  while (reader.Read())                                  {                                      insert.Connection = sqconn;                                      insert.Transaction = tx;                                      List<string> pnames = new List<string>();                                      for (int j = 0; j < schema[i].Columns.Count; j++)                                      {                                          string pname = "@" + GetNormalizedName(schema[i].Columns[j].ColumnName' pnames);                                          insert.Parameters[pname].Value = CastValueForColumn(reader[j]' schema[i].Columns[j]);                                          pnames.Add(pname);                                      }                                      insert.ExecuteNonQuery();                                      counter++;                                      if (counter % 1000 == 0)                                      {                                          CheckCancelled();                                          tx.Commit();                                          handler(false' true' (int)(100.0 * i / schema.Count)'                                              "Added " + counter + " rows to table " + schema[i].TableName + " so far");                                          tx = sqconn.BeginTransaction();                                      }                                  } // while                              } // using                                CheckCancelled();                              tx.Commit();                                handler(false' true' (int)(100.0 * i / schema.Count)' "Finished inserting rows for table " + schema[i].TableName);                              _log.Debug("finished inserting all rows for table [" + schema[i].TableName + "]");                          }                          catch (Exception ex)                          {                              _log.Error("unexpected exception"' ex);                              tx.Rollback();                              throw;                          } // catch                      }                  } // using              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ParseBlobAsGuid,The following statement contains a magic number: if (blob.Length > 16)              {                  data = new byte[16];                  for (int i = 0; i < 16; i++)                      data[i] = blob[i];              }              else if (blob.Length < 16)              {                  data = new byte[16];                  for (int i = 0; i < blob.Length; i++)                      data[i] = blob[i];              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ParseBlobAsGuid,The following statement contains a magic number: if (blob.Length > 16)              {                  data = new byte[16];                  for (int i = 0; i < 16; i++)                      data[i] = blob[i];              }              else if (blob.Length < 16)              {                  data = new byte[16];                  for (int i = 0; i < blob.Length; i++)                      data[i] = blob[i];              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ParseBlobAsGuid,The following statement contains a magic number: if (blob.Length > 16)              {                  data = new byte[16];                  for (int i = 0; i < 16; i++)                      data[i] = blob[i];              }              else if (blob.Length < 16)              {                  data = new byte[16];                  for (int i = 0; i < blob.Length; i++)                      data[i] = blob[i];              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ParseBlobAsGuid,The following statement contains a magic number: if (blob.Length > 16)              {                  data = new byte[16];                  for (int i = 0; i < 16; i++)                      data[i] = blob[i];              }              else if (blob.Length < 16)              {                  data = new byte[16];                  for (int i = 0; i < blob.Length; i++)                      data[i] = blob[i];              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ParseBlobAsGuid,The following statement contains a magic number: if (blob.Length > 16)              {                  data = new byte[16];                  for (int i = 0; i < 16; i++)                      data[i] = blob[i];              }              else if (blob.Length < 16)              {                  data = new byte[16];                  for (int i = 0; i < blob.Length; i++)                      data[i] = blob[i];              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CreateSQLiteDatabase,The following statement contains a magic number: using (SQLiteConnection conn = new SQLiteConnection(sqliteConnString))              {                  conn.Open();                    // Create all tables in the new database                  int count = 0;                  foreach (TableSchema dt in schema.Tables)                  {                      try                      {                          AddSQLiteTable(conn' dt);                      }                      catch (Exception ex)                      {                          _log.Error("AddSQLiteTable failed"' ex);                          throw;                      }                      count++;                      CheckCancelled();                      handler(false' true' (int)(count * 50.0 / schema.Tables.Count)' "Added table " + dt.TableName + " to the SQLite database");                        _log.Debug("added schema for SQLite table [" + dt.TableName + "]");                  } // foreach                    // Create all views in the new database                  count = 0;                  if (createViews)                  {                      foreach (ViewSchema vs in schema.Views)                      {                          try                          {                              AddSQLiteView(conn' vs' viewFailureHandler);                          }                          catch (Exception ex)                          {                              _log.Error("AddSQLiteView failed"' ex);                              throw;                          } // catch                          count++;                          CheckCancelled();                          handler(false' true' 50 + (int)(count * 50.0 / schema.Views.Count)' "Added view " + vs.ViewName + " to the SQLite database");                            _log.Debug("added schema for SQLite view [" + vs.ViewName + "]");                        } // foreach                  } // if              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CreateSQLiteDatabase,The following statement contains a magic number: using (SQLiteConnection conn = new SQLiteConnection(sqliteConnString))              {                  conn.Open();                    // Create all tables in the new database                  int count = 0;                  foreach (TableSchema dt in schema.Tables)                  {                      try                      {                          AddSQLiteTable(conn' dt);                      }                      catch (Exception ex)                      {                          _log.Error("AddSQLiteTable failed"' ex);                          throw;                      }                      count++;                      CheckCancelled();                      handler(false' true' (int)(count * 50.0 / schema.Tables.Count)' "Added table " + dt.TableName + " to the SQLite database");                        _log.Debug("added schema for SQLite table [" + dt.TableName + "]");                  } // foreach                    // Create all views in the new database                  count = 0;                  if (createViews)                  {                      foreach (ViewSchema vs in schema.Views)                      {                          try                          {                              AddSQLiteView(conn' vs' viewFailureHandler);                          }                          catch (Exception ex)                          {                              _log.Error("AddSQLiteView failed"' ex);                              throw;                          } // catch                          count++;                          CheckCancelled();                          handler(false' true' 50 + (int)(count * 50.0 / schema.Views.Count)' "Added view " + vs.ViewName + " to the SQLite database");                            _log.Debug("added schema for SQLite view [" + vs.ViewName + "]");                        } // foreach                  } // if              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CreateSQLiteDatabase,The following statement contains a magic number: using (SQLiteConnection conn = new SQLiteConnection(sqliteConnString))              {                  conn.Open();                    // Create all tables in the new database                  int count = 0;                  foreach (TableSchema dt in schema.Tables)                  {                      try                      {                          AddSQLiteTable(conn' dt);                      }                      catch (Exception ex)                      {                          _log.Error("AddSQLiteTable failed"' ex);                          throw;                      }                      count++;                      CheckCancelled();                      handler(false' true' (int)(count * 50.0 / schema.Tables.Count)' "Added table " + dt.TableName + " to the SQLite database");                        _log.Debug("added schema for SQLite table [" + dt.TableName + "]");                  } // foreach                    // Create all views in the new database                  count = 0;                  if (createViews)                  {                      foreach (ViewSchema vs in schema.Views)                      {                          try                          {                              AddSQLiteView(conn' vs' viewFailureHandler);                          }                          catch (Exception ex)                          {                              _log.Error("AddSQLiteView failed"' ex);                              throw;                          } // catch                          count++;                          CheckCancelled();                          handler(false' true' 50 + (int)(count * 50.0 / schema.Views.Count)' "Added view " + vs.ViewName + " to the SQLite database");                            _log.Debug("added schema for SQLite view [" + vs.ViewName + "]");                        } // foreach                  } // if              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ReadSqlServerSchema,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection(connString))              {                  conn.Open();                    List<string> tableNames = new List<string>();                  List<string> tblschema = new List<string>();                    // This command will read the names of all tables in the database                  SqlCommand cmd = new SqlCommand(@"select * from INFORMATION_SCHEMA.TABLES  where TABLE_TYPE = 'BASE TABLE'"' conn);                  using (SqlDataReader reader = cmd.ExecuteReader())                  {                      while (reader.Read())                      {                          if (reader["TABLE_NAME"] == DBNull.Value)                              continue;                          if (reader["TABLE_SCHEMA"] == DBNull.Value)                              continue;                          tableNames.Add((string)reader["TABLE_NAME"]);                          tblschema.Add((string)reader["TABLE_SCHEMA"]);                      } // while                  } // using                    // Next step is to use ADO APIs to query the schema of each table.                  int count = 0;                  for (int i = 0; i < tableNames.Count; i++)                  {                      string tname = tableNames[i];                      string tschma = tblschema[i];                      TableSchema ts = CreateTableSchema(conn' tname' tschma);                      CreateForeignKeySchema(conn' ts);                      tables.Add(ts);                      count++;                      CheckCancelled();                      handler(false' true' (int)(count * 50.0 / tableNames.Count)' "Parsed table " + tname);                        _log.Debug("parsed table schema for [" + tname + "]");                  } // foreach              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ReadSqlServerSchema,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection(connString))              {                  conn.Open();                    SqlCommand cmd = new SqlCommand(@"SELECT TABLE_NAME' VIEW_DEFINITION  from INFORMATION_SCHEMA.VIEWS"' conn);                  using (SqlDataReader reader = cmd.ExecuteReader())                  {                      int count = 0;                      while (reader.Read())                      {                          ViewSchema vs = new ViewSchema();                            if (reader["TABLE_NAME"] == DBNull.Value)                              continue;                          if (reader["VIEW_DEFINITION"] == DBNull.Value)                              continue;                          vs.ViewName = (string)reader["TABLE_NAME"];                          vs.ViewSQL = (string)reader["VIEW_DEFINITION"];                            // Remove all ".dbo" strings from the view definition                          vs.ViewSQL = removedbo.Replace(vs.ViewSQL' string.Empty);                            views.Add(vs);                            count++;                          CheckCancelled();                          handler(false' true' 50 + (int)(count * 50.0 / views.Count)' "Parsed view " + vs.ViewName);                            _log.Debug("parsed view schema for [" + vs.ViewName + "]");                      } // while                  } // using                }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,ReadSqlServerSchema,The following statement contains a magic number: using (SqlConnection conn = new SqlConnection(connString))              {                  conn.Open();                    SqlCommand cmd = new SqlCommand(@"SELECT TABLE_NAME' VIEW_DEFINITION  from INFORMATION_SCHEMA.VIEWS"' conn);                  using (SqlDataReader reader = cmd.ExecuteReader())                  {                      int count = 0;                      while (reader.Read())                      {                          ViewSchema vs = new ViewSchema();                            if (reader["TABLE_NAME"] == DBNull.Value)                              continue;                          if (reader["VIEW_DEFINITION"] == DBNull.Value)                              continue;                          vs.ViewName = (string)reader["TABLE_NAME"];                          vs.ViewSQL = (string)reader["VIEW_DEFINITION"];                            // Remove all ".dbo" strings from the view definition                          vs.ViewSQL = removedbo.Replace(vs.ViewSQL' string.Empty);                            views.Add(vs);                            count++;                          CheckCancelled();                          handler(false' true' 50 + (int)(count * 50.0 / views.Count)' "Parsed view " + vs.ViewName);                            _log.Debug("parsed view schema for [" + vs.ViewName + "]");                      } // while                  } // using                }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CreateTableSchema,The following statement contains a magic number: using (SqlDataReader reader = cmd4.ExecuteReader())              {                  while (reader.Read())                  {                      bool? isCaseSensitive = null;                      string colName = (string)reader["name"];                      if (reader["tds_collation"] != DBNull.Value)                      {                          byte[] mask = (byte[])reader["tds_collation"];                          if ((mask[2] & 0x10) != 0)                              isCaseSensitive = false;                          else                              isCaseSensitive = true;                      } // if                        if (isCaseSensitive.HasValue)                      {                          // Update the corresponding column schema.                          foreach (ColumnSchema csc in res.Columns)                          {                              if (csc.ColumnName == colName)                              {                                  csc.IsCaseSensitivite = isCaseSensitive;                                  break;                              }                          } // foreach                      } // if                  } // while              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,BuildIndexSchema,The following statement contains a magic number: foreach (string p in keysParts)              {                  Match m = _keyRx.Match(p.Trim());                  if (!m.Success)                  {                      throw new ApplicationException("Illegal key name [" + p + "] in index [" +                          indexName + "]");                  }                    string key = m.Groups[1].Value;                  IndexColumn ic = new IndexColumn();                  ic.ColumnName = key;                  if (m.Groups[2].Success)                      ic.IsAscending = false;                  else                      ic.IsAscending = true;                    res.Columns.Add(ic);              }
Magic Number,DbAccess,SqlServerToSQLite,C:\repos\chrisdee_Tools\SQLServer\ConvertSQLServerDBtoSQLiteDB\SqlConverter_v1_20_source\DbAccess\SqlServerToSQLite.cs,CreateSQLiteConnectionString,The following statement contains a magic number: builder.PageSize = 4096;
