Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,IpWatchDog,IpWatchDogService,C:\repos\chrisdee_Tools\Network\IpWatchdog\IpWatchDog\IpWatchDogService.cs,IpWatchDogService,The method has 5 parameters. Parameters: log' config' persistor' retriever' notifier
Magic Number,IpWatchDog,IpWatchDogService,C:\repos\chrisdee_Tools\Network\IpWatchdog\IpWatchDog\IpWatchDogService.cs,Start,The following statement contains a magic number: _timer = new Timer(CheckIp' null' 0' _config.PollingTimeoutSeconds*1000);
Magic Number,IpWatchDog,IpWatchDogService,C:\repos\chrisdee_Tools\Network\IpWatchdog\IpWatchDog\IpWatchDogService.cs,Stop,The following statement contains a magic number: if (!Monitor.TryEnter(_isBusy' 5000))              {                  _log.Write(LogLevel.Warning' "IP checking process is still running and will be forcefully terminated");              }
Magic Number,IpWatchDog,ServiceController,C:\repos\chrisdee_Tools\Network\IpWatchdog\IpWatchDog\ServiceController.cs,Start,The following statement contains a magic number: try              {                  _log.Write(LogLevel.Info' "Starting service...");                  const int timeout = 10000;                  _controller.Start();                    var targetStatus = ServiceControllerStatus.Running;                  _controller.WaitForStatus(targetStatus' TimeSpan.FromMilliseconds(timeout));                    if (_controller.Status == targetStatus)                  {                      _log.Write(LogLevel.Info' "Started");                  }                  else                  {                      _log.Write(LogLevel.Warning' "Failed' service status is {0}"' _controller.Status);                  }              }              catch (Exception ex)              {                  _log.Write(LogLevel.Error' "Could not start service. {0}"' ex);              }
Magic Number,IpWatchDog,ServiceController,C:\repos\chrisdee_Tools\Network\IpWatchdog\IpWatchDog\ServiceController.cs,Stop,The following statement contains a magic number: try              {                  _log.Write(LogLevel.Info' "Stopping service...");                  const int timeout = 10000;                  _controller.Stop();                    var targetStatus = ServiceControllerStatus.Stopped;                  _controller.WaitForStatus(targetStatus' TimeSpan.FromMilliseconds(timeout));                    if (_controller.Status == targetStatus)                  {                      _log.Write(LogLevel.Info' "Stopped");                  }                  else                  {                      _log.Write(LogLevel.Warning' "Failed' service status is {0}"' _controller.Status);                  }              }              catch (Exception ex)              {                  _log.Write(LogLevel.Error' "Could not stop service. {0}"' ex);              }
