Implementation smell,Namespace,Class,File,Method,Description
Long Method,Xamasoft.JsonClassGenerator,JsonClassGenerator,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonClassGenerator.cs,GenerateClass,The method has 101 lines of code.
Complex Method,Xamasoft.JsonClassGenerator.CodeWriters,CSharpCodeWriter,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\CodeWriters\CSharpCodeWriter.cs,WriteFileStart,Cyclomatic complexity of the method is 8
Complex Method,Xamasoft.JsonClassGenerator.CodeWriters,CSharpCodeWriter,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\CodeWriters\CSharpCodeWriter.cs,WriteClass,Cyclomatic complexity of the method is 13
Complex Method,Xamasoft.JsonClassGenerator,JsonClassGenerator,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonClassGenerator.cs,GenerateClasses,Cyclomatic complexity of the method is 8
Complex Method,Xamasoft.JsonClassGenerator,JsonClassGenerator,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonClassGenerator.cs,GenerateClass,Cyclomatic complexity of the method is 19
Long Parameter List,Xamasoft.JsonClassGenerator,FieldInfo,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\FieldInfo.cs,FieldInfo,The method has 5 parameters. Parameters: generator' jsonMemberName' type' usePascalCase' Examples
Long Statement,Xamasoft.JsonClassGenerator.CodeWriters,TypeScriptCodeWriter,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\CodeWriters\TypeScriptCodeWriter.cs,WriteClass,The length of the statement  "                var shouldDefineNamespace = type.IsRoot && config.SecondaryNamespace != null && config.Namespace != null && (field.Type.Type == JsonTypeEnum.Object || (field.Type.InternalType != null && field.Type.InternalType.Type == JsonTypeEnum.Object)); " is 241.
Long Statement,Xamasoft.JsonClassGenerator.CodeWriters,TypeScriptCodeWriter,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\CodeWriters\TypeScriptCodeWriter.cs,WriteClass,The length of the statement  "                sw.WriteLine(prefix + "    " + field.JsonMemberName + (IsNullable(field.Type.Type) ? "?" : "") + ": " + (shouldDefineNamespace ? config.SecondaryNamespace + "." : string.Empty) + GetTypeName(field.Type' config) + ";"); " is 218.
Long Statement,Xamasoft.JsonClassGenerator.CodeWriters,VisualBasicCodeWriter,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\CodeWriters\VisualBasicCodeWriter.cs,GetTypeName,The length of the statement  "                case JsonTypeEnum.Array: return arraysAsLists ? "IList(Of " + GetTypeName(type.InternalType' config) + ")" : GetTypeName(type.InternalType' config) + "()"; " is 155.
Long Statement,Xamasoft.JsonClassGenerator.CodeWriters,VisualBasicCodeWriter,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\CodeWriters\VisualBasicCodeWriter.cs,WriteNamespaceStart,The length of the statement  "            sw.WriteLine("Namespace Global.{0}"' root && !config.UseNestedClasses ? config.Namespace : (config.SecondaryNamespace ?? config.Namespace)); " is 140.
Long Statement,Xamasoft.JsonClassGenerator.CodeWriters,CSharpCodeWriter,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\CodeWriters\CSharpCodeWriter.cs,GetTypeName,The length of the statement  "                case JsonTypeEnum.Array: return arraysAsLists ? "IList<" + GetTypeName(type.InternalType' config) + ">" : GetTypeName(type.InternalType' config) + "[]"; " is 152.
Long Statement,Xamasoft.JsonClassGenerator.CodeWriters,CSharpCodeWriter,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\CodeWriters\CSharpCodeWriter.cs,WriteNamespaceStart,The length of the statement  "            sw.WriteLine("namespace {0}"' root && !config.UseNestedClasses ? config.Namespace : (config.SecondaryNamespace ?? config.Namespace)); " is 133.
Long Statement,Xamasoft.JsonClassGenerator.CodeWriters,CSharpCodeWriter,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\CodeWriters\CSharpCodeWriter.cs,WriteClass,The length of the statement  "            if (type.IsRoot && config.ExplicitDeserialization) WriteStringConstructorExplicitDeserialization(config' sw' type' prefix); " is 123.
Long Statement,Xamasoft.JsonClassGenerator,FieldInfo,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\FieldInfo.cs,GetGenerationCode,The length of the statement  "                return string.Format("({1})JsonClassHelper.ReadArray<{5}>(JsonClassHelper.GetJToken<JArray>({0}' \"{2}\")' JsonClassHelper.{3}' typeof({6}))"' " is 142.
Long Statement,Xamasoft.JsonClassGenerator,JsonClassGenerator,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonClassGenerator.cs,GenerateClasses,The length of the statement  "            if (ExplicitDeserialization && !(CodeWriter is CSharpCodeWriter)) throw new ArgumentException("Explicit deserialization is obsolete and is only supported by the C# provider."); " is 176.
Long Statement,Xamasoft.JsonClassGenerator,JsonClassGenerator,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonClassGenerator.cs,GenerateClasses,The length of the statement  "            if (used) throw new InvalidOperationException("This instance of JsonClassGenerator has already been used. Please create a new instance."); " is 138.
Long Statement,Xamasoft.JsonClassGenerator,JsonClassGenerator,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonClassGenerator.cs,GenerateClasses,The length of the statement  "                if (writeToDisk && !NoHelperClass && ExplicitDeserialization) File.WriteAllBytes(Path.Combine(TargetFolder' "JsonClassHelper.cs")' Properties.Resources.JsonClassHelper); " is 169.
Long Statement,Xamasoft.JsonClassGenerator,JsonClassGenerator,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonClassGenerator.cs,GenerateClasses,The length of the statement  "                        WriteClassesToFile(Path.Combine(folder' (UseNestedClasses && !type.IsRoot ? MainClass + "." : string.Empty) + type.AssignedName + CodeWriter.FileExtension)' new[] { type }); " is 173.
Long Statement,Xamasoft.JsonClassGenerator,JsonClassGenerator,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonClassGenerator.cs,WriteClassesToFile,The length of the statement  "                if (UseNamespaces && inNamespace && rootNamespace != type.IsRoot && SecondaryNamespace != null) { CodeWriter.WriteNamespaceEnd(this' sw' rootNamespace); inNamespace = false; } " is 175.
Long Statement,Xamasoft.JsonClassGenerator,JsonClassGenerator,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonClassGenerator.cs,WriteClassesToFile,The length of the statement  "                if (UseNamespaces && !inNamespace) { CodeWriter.WriteNamespaceStart(this' sw' type.IsRoot); inNamespace = true; rootNamespace = type.IsRoot; } " is 142.
Long Statement,Xamasoft.JsonClassGenerator,JsonClassGenerator,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonClassGenerator.cs,GenerateClass,The length of the statement  "            type.Fields = jsonFields.Select(x => new FieldInfo(this' x.Key' x.Value' UsePascalCase' fieldExamples[x.Key])).ToArray(); " is 121.
Long Statement,Xamasoft.JsonClassGenerator,JsonType,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonType.cs,GetCommonType,The length of the statement  "                if (commonInternalType != InternalType) return new JsonType(generator' JsonTypeEnum.Array) { InternalType = commonInternalType }; " is 129.
Long Statement,Xamasoft.JsonClassGenerator,JsonType,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonType.cs,GetCommonType,The length of the statement  "            //    if (commonInternalType != InternalType) return new JsonType(JsonTypeEnum.Dictionary) { InternalType = commonInternalType }; " is 129.
Complex Conditional,Xamasoft.JsonClassGenerator,JsonClassGenerator,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonClassGenerator.cs,WriteClassesToFile,The conditional expression  "UseNamespaces && inNamespace && rootNamespace != type.IsRoot && SecondaryNamespace != null"  is complex.
Magic Number,Xamasoft.JsonClassGenerator,FieldInfo,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\FieldInfo.cs,GetExamplesText,The following statement contains a magic number: return string.Join("' "' Examples.Take(5).Select(x => JsonConvert.SerializeObject(x)).ToArray());
Magic Number,Xamasoft.JsonClassGenerator,JsonClassGenerator,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonClassGenerator.cs,CreateUniqueClassName,The following statement contains a magic number: var i = 2;
Missing Default,Xamasoft.JsonClassGenerator,JsonType,C:\repos\prashantvc_SpecialCopy\JsonCSharpClassGeneratorLib\JsonType.cs,GetCommonTypeEnum,The following switch statement is missing a default case: switch (type1)              {                  case JsonTypeEnum.Boolean:                      if (IsNull(type2)) return JsonTypeEnum.NullableBoolean;                      if (type2 == JsonTypeEnum.Boolean) return type1;                      break;                  case JsonTypeEnum.NullableBoolean:                      if (IsNull(type2)) return type1;                      if (type2 == JsonTypeEnum.Boolean) return type1;                      break;                  case JsonTypeEnum.Integer:                      if (IsNull(type2)) return JsonTypeEnum.NullableInteger;                      if (type2 == JsonTypeEnum.Float) return JsonTypeEnum.Float;                      if (type2 == JsonTypeEnum.Long) return JsonTypeEnum.Long;                      if (type2 == JsonTypeEnum.Integer) return type1;                      break;                  case JsonTypeEnum.NullableInteger:                      if (IsNull(type2)) return type1;                      if (type2 == JsonTypeEnum.Float) return JsonTypeEnum.NullableFloat;                      if (type2 == JsonTypeEnum.Long) return JsonTypeEnum.NullableLong;                      if (type2 == JsonTypeEnum.Integer) return type1;                      break;                  case JsonTypeEnum.Float:                      if (IsNull(type2)) return JsonTypeEnum.NullableFloat;                      if (type2 == JsonTypeEnum.Float) return type1;                      if (type2 == JsonTypeEnum.Integer) return type1;                      if (type2 == JsonTypeEnum.Long) return type1;                      break;                  case JsonTypeEnum.NullableFloat:                      if (IsNull(type2)) return type1;                      if (type2 == JsonTypeEnum.Float) return type1;                      if (type2 == JsonTypeEnum.Integer) return type1;                      if (type2 == JsonTypeEnum.Long) return type1;                      break;                  case JsonTypeEnum.Long:                      if (IsNull(type2)) return JsonTypeEnum.NullableLong;                      if (type2 == JsonTypeEnum.Float) return JsonTypeEnum.Float;                      if (type2 == JsonTypeEnum.Integer) return type1;                      break;                  case JsonTypeEnum.NullableLong:                      if (IsNull(type2)) return type1;                      if (type2 == JsonTypeEnum.Float) return JsonTypeEnum.NullableFloat;                      if (type2 == JsonTypeEnum.Integer) return type1;                      if (type2 == JsonTypeEnum.Long) return type1;                      break;                  case JsonTypeEnum.Date:                      if (IsNull(type2)) return JsonTypeEnum.NullableDate;                      if (type2 == JsonTypeEnum.Date) return JsonTypeEnum.Date;                      break;                  case JsonTypeEnum.NullableDate:                      if (IsNull(type2)) return type1;                      if (type2 == JsonTypeEnum.Date) return type1;                      break;                  case JsonTypeEnum.NullableSomething:                      if (IsNull(type2)) return type1;                      if (type2 == JsonTypeEnum.String) return JsonTypeEnum.String;                      if (type2 == JsonTypeEnum.Integer) return JsonTypeEnum.NullableInteger;                      if (type2 == JsonTypeEnum.Float) return JsonTypeEnum.NullableFloat;                      if (type2 == JsonTypeEnum.Long) return JsonTypeEnum.NullableLong;                      if (type2 == JsonTypeEnum.Boolean) return JsonTypeEnum.NullableBoolean;                      if (type2 == JsonTypeEnum.Date) return JsonTypeEnum.NullableDate;                      if (type2 == JsonTypeEnum.Array) return JsonTypeEnum.Array;                      if (type2 == JsonTypeEnum.Object) return JsonTypeEnum.Object;                      break;                  case JsonTypeEnum.Object:                      if (IsNull(type2)) return type1;                      if (type2 == JsonTypeEnum.Object) return type1;                      if (type2 == JsonTypeEnum.Dictionary) throw new ArgumentException();                      break;                  case JsonTypeEnum.Dictionary:                      throw new ArgumentException();                  //if (IsNull(type2)) return type1;                  //if (type2 == JsonTypeEnum.Object) return type1;                  //if (type2 == JsonTypeEnum.Dictionary) return type1;                  //  break;                  case JsonTypeEnum.Array:                      if (IsNull(type2)) return type1;                      if (type2 == JsonTypeEnum.Array) return type1;                      break;                  case JsonTypeEnum.String:                      if (IsNull(type2)) return type1;                      if (type2 == JsonTypeEnum.String) return type1;                      break;              }
