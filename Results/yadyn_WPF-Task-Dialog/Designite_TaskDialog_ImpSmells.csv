Implementation smell,Namespace,Class,File,Method,Description
Long Method,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,ShowTaskDialog,The method has 153 lines of code.
Long Method,TaskDialogInterop,VistaTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialogInterop.cs,PrivateShow,The method has 135 lines of code.
Complex Method,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,ShowMessage,Cyclomatic complexity of the method is 8
Complex Method,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,ShowTaskDialog,Cyclomatic complexity of the method is 9
Complex Method,TaskDialogInterop,VistaTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialogInterop.cs,PrivateShow,Cyclomatic complexity of the method is 16
Long Parameter List,TaskDialogInterop,NativeMethods,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\NativeMethods.cs,SetWindowPos,The method has 7 parameters. Parameters: hwnd' hwndInsertAfter' x' y' width' height' flags
Long Parameter List,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,ShowMessage,The method has 5 parameters. Parameters: owner' messageText' caption' buttons' icon
Long Parameter List,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,ShowMessage,The method has 10 parameters. Parameters: owner' title' mainInstruction' content' expandedInfo' verificationText' footerText' buttons' mainIcon' footerIcon
Long Parameter List,TaskDialogInterop,VistaTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialogInterop.cs,PrivateCallback,The method has 5 parameters. Parameters: hwnd' msg' wparam' lparam' refData
Long Parameter List,TaskDialogInterop,TaskDialogResult,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialogResult.cs,TaskDialogResult,The method has 5 parameters. Parameters: result' verificationChecked' radioButtonResult' commandButtonResult' customButtonResult
Long Parameter List,TaskDialogInterop,TaskDialogButtonData,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialogTypes.cs,TaskDialogButtonData,The method has 5 parameters. Parameters: id' text' command' isDefault' isCancel
Long Statement,TaskDialogInterop,CommandLinkExtraTextVisibilityConverter,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\Converters.cs,Convert,The length of the statement  "			return (String.IsNullOrEmpty(value.ToString()) || !value.ToString().Contains("\n")) ? Visibility.Collapsed : Visibility.Visible; " is 128.
Long Statement,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,ConvertCommonButtons,The length of the statement  "					vtdCommonButtons = VistaTaskDialogCommonButtons.Yes | VistaTaskDialogCommonButtons.No | VistaTaskDialogCommonButtons.Cancel; " is 124.
Long Statement,TaskDialogInterop,VistaTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialogInterop.cs,Show,The length of the statement  "			return this.Show((owner == null ? IntPtr.Zero : new System.Windows.Interop.WindowInteropHelper(owner).Handle)' out verificationFlagChecked' out radioButtonResult); " is 163.
Long Statement,TaskDialogInterop,VistaTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialogInterop.cs,Show,The length of the statement  "			return this.Show((owner == null ? IntPtr.Zero : new System.Windows.Interop.WindowInteropHelper(owner).Handle)' out verificationFlagChecked' out radioButtonResult); " is 163.
Long Statement,TaskDialogInterop,VistaTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialogInterop.cs,Show,The length of the statement  "			return this.Show((owner == null ? IntPtr.Zero : new System.Windows.Interop.WindowInteropHelper(owner).Handle)' out verificationFlagChecked' out radioButtonResult); " is 163.
Long Statement,TaskDialogInterop,VistaTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialogInterop.cs,PrivateShow,The length of the statement  "				VistaUnsafeNativeMethods.TaskDialogIndirect(ref config' out result' out radioButtonResult' out verificationFlagChecked); " is 120.
Long Statement,TaskDialogInterop,TaskDialogViewModel,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialogViewModel.cs,SetMarqueeProgressBar,The length of the statement  "			//options.ShowProgressBar = false; // do we need this? does setting marquee to true override in the native implementation? " is 122.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,SetButtonElevationRequiredState,The length of the statement  "			// TDM_SET_BUTTON_ELEVATION_REQUIRED_STATE = WM_USER+115' // wParam = Button ID' lParam = 0 (elevation not required)' lParam != 0 (elevation required) " is 150.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,SetProgressBarRange,The length of the statement  "			// #define MAKELONG(a' b)      ((LONG)(((WORD)(((DWORD_PTR)(a)) & 0xffff)) | ((DWORD)((WORD)(((DWORD_PTR)(b)) & 0xffff))) << 16)) " is 129.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,SetProgressBarMarquee,The length of the statement  "			// TDM_SET_PROGRESS_BAR_MARQUEE        = WM_USER+107' // wParam = 0 (stop marquee)' wParam != 0 (start marquee)' lparam = speed (milliseconds between repaints) " is 159.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,SetContent,The length of the statement  "			// TDM_SET_ELEMENT_TEXT                = WM_USER+108  // wParam = element (TASKDIALOG_ELEMENTS)' lParam = new element text (LPCWSTR) " is 132.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,SetExpandedInformation,The length of the statement  "			// TDM_SET_ELEMENT_TEXT                = WM_USER+108  // wParam = element (TASKDIALOG_ELEMENTS)' lParam = new element text (LPCWSTR) " is 132.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,SetFooter,The length of the statement  "			// TDM_SET_ELEMENT_TEXT                = WM_USER+108  // wParam = element (TASKDIALOG_ELEMENTS)' lParam = new element text (LPCWSTR) " is 132.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,SetMainInstruction,The length of the statement  "			// TDM_SET_ELEMENT_TEXT                = WM_USER+108  // wParam = element (TASKDIALOG_ELEMENTS)' lParam = new element text (LPCWSTR) " is 132.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,UpdateContent,The length of the statement  "			// TDM_UPDATE_ELEMENT_TEXT             = WM_USER+114' // wParam = element (TASKDIALOG_ELEMENTS)' lParam = new element text (LPCWSTR) " is 132.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,UpdateExpandedInformation,The length of the statement  "			// TDM_UPDATE_ELEMENT_TEXT             = WM_USER+114' // wParam = element (TASKDIALOG_ELEMENTS)' lParam = new element text (LPCWSTR) " is 132.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,UpdateFooter,The length of the statement  "			// TDM_UPDATE_ELEMENT_TEXT             = WM_USER+114' // wParam = element (TASKDIALOG_ELEMENTS)' lParam = new element text (LPCWSTR) " is 132.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,UpdateMainInstruction,The length of the statement  "			// TDM_UPDATE_ELEMENT_TEXT             = WM_USER+114' // wParam = element (TASKDIALOG_ELEMENTS)' lParam = new element text (LPCWSTR) " is 132.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,UpdateMainIcon,The length of the statement  "			// TDM_UPDATE_ICON = WM_USER+116  // wParam = icon element (TASKDIALOG_ICON_ELEMENTS)' lParam = new icon (hIcon if TDF_USE_HICON_* was set' PCWSTR otherwise) " is 157.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,UpdateMainIcon,The length of the statement  "			// TDM_UPDATE_ICON = WM_USER+116  // wParam = icon element (TASKDIALOG_ICON_ELEMENTS)' lParam = new icon (hIcon if TDF_USE_HICON_* was set' PCWSTR otherwise) " is 157.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,UpdateFooterIcon,The length of the statement  "			// TDM_UPDATE_ICON = WM_USER+116  // wParam = icon element (TASKDIALOG_ICON_ELEMENTS)' lParam = new icon (hIcon if TDF_USE_HICON_* was set' PCWSTR otherwise) " is 157.
Long Statement,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,UpdateFooterIcon,The length of the statement  "			// TDM_UPDATE_ICON = WM_USER+116  // wParam = icon element (TASKDIALOG_ICON_ELEMENTS)' lParam = new icon (hIcon if TDF_USE_HICON_* was set' PCWSTR otherwise) " is 157.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Empty Catch Block,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,ShowTaskDialog,The method has an empty catch block.
Empty Catch Block,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,ShowTaskDialog,The method has an empty catch block.
Empty Catch Block,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,ShowTaskDialog,The method has an empty catch block.
Magic Number,TaskDialogInterop,CommandLink,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\CommandLink.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.UserControl = ((TaskDialogInterop.CommandLink)(target));              return;              case 2:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.CommandLinkButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,TaskDialogInterop,CommandLink,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\CommandLink.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.UserControl = ((TaskDialogInterop.CommandLink)(target));              return;              case 2:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.CommandLinkButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,TaskDialogInterop,SafeNativeMethods,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\SafeNativeMethods.cs,SetWindowIconVisibility,The following statement contains a magic number: if (Environment.OSVersion.Version.Major >= 6)  			{  				// Change the extended window style  				if (showIcon)  				{  					int extendedStyle = NativeMethods.GetWindowLong(wih.Handle' NativeMethods.GWL_EXSTYLE);  					NativeMethods.SetWindowLong(wih.Handle' NativeMethods.GWL_EXSTYLE' extendedStyle | ~NativeMethods.WS_EX_DLGMODALFRAME);  				}  				else  				{  					int extendedStyle = NativeMethods.GetWindowLong(wih.Handle' NativeMethods.GWL_EXSTYLE);  					NativeMethods.SetWindowLong(wih.Handle' NativeMethods.GWL_EXSTYLE' extendedStyle | NativeMethods.WS_EX_DLGMODALFRAME);  				}    				// Update the window's non-client area to reflect the changes  				NativeMethods.SetWindowPos(wih.Handle' IntPtr.Zero' 0' 0' 0' 0'  					NativeMethods.SWP_NOMOVE | NativeMethods.SWP_NOSIZE | NativeMethods.SWP_NOZORDER | NativeMethods.SWP_FRAMECHANGED);  			}  			// For XP and older  			// TODO Setting Window Icon visibility doesn't work in XP  			else  			{  				// 0 - ICON_SMALL (caption bar)  				// 1 - ICON_BIG   (alt-tab)    				if (showIcon)  					NativeMethods.SendMessage(wih.Handle' NativeMethods.WM_SETICON' new IntPtr(0)'  						NativeMethods.DefWindowProc(wih.Handle' NativeMethods.WM_SETICON' new IntPtr(0)' IntPtr.Zero));  				else  					NativeMethods.SendMessage(wih.Handle' NativeMethods.WM_SETICON' new IntPtr(0)' IntPtr.Zero);  			}
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,GetButtonIndexForCommonButton,The following statement contains a magic number: switch (commonButtons)  			{  				default:  				case TaskDialogCommonButtons.None:  					index = -1;  					break;  				case TaskDialogCommonButtons.Close:  					index = 0;  					break;  				case TaskDialogCommonButtons.OKCancel:  					if (buttonId == (int)TaskDialogSimpleResult.Ok  						|| buttonId == (int)VistaTaskDialogCommonButtons.OK)  						index = 0;  					else if (buttonId == (int)TaskDialogSimpleResult.Cancel  						|| buttonId == (int)VistaTaskDialogCommonButtons.Cancel)  						index = 1;  					break;  				case TaskDialogCommonButtons.RetryCancel:  					if (buttonId == (int)TaskDialogSimpleResult.Retry  						|| buttonId == (int)VistaTaskDialogCommonButtons.Retry)  						index = 0;  					else if (buttonId == (int)TaskDialogSimpleResult.Cancel  						|| buttonId == (int)VistaTaskDialogCommonButtons.Cancel)  						index = 1;  					break;  				case TaskDialogCommonButtons.YesNo:  					if (buttonId == (int)TaskDialogSimpleResult.Yes  						|| buttonId == (int)VistaTaskDialogCommonButtons.Yes)  						index = 0;  					else if (buttonId == (int)TaskDialogSimpleResult.No  						|| buttonId == (int)VistaTaskDialogCommonButtons.No)  						index = 1;  					break;  				case TaskDialogCommonButtons.YesNoCancel:  					if (buttonId == (int)TaskDialogSimpleResult.Yes  						|| buttonId == (int)VistaTaskDialogCommonButtons.Yes)  						index = 0;  					else if (buttonId == (int)TaskDialogSimpleResult.No  						|| buttonId == (int)VistaTaskDialogCommonButtons.No)  						index = 1;  					else if (buttonId == (int)TaskDialogSimpleResult.Cancel  						|| buttonId == (int)VistaTaskDialogCommonButtons.Cancel)  						index = 2;  					break;  			}
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,GetButtonIdForCommonButton,The following statement contains a magic number: switch (commonButtons)  			{  				default:  				case TaskDialogCommonButtons.None:  				case TaskDialogCommonButtons.Close:  					// We'll set to 0 even for Close' as it doesn't matter that we  					//get the value right since there is only one button anyway  					buttonId = 0;  					break;  				case TaskDialogCommonButtons.OKCancel:  					if (index == 0)  						buttonId = (int)VistaTaskDialogCommonButtons.OK;  					else if (index == 1)  						buttonId = (int)VistaTaskDialogCommonButtons.Cancel;  					else  						buttonId = 0;  					break;  				case TaskDialogCommonButtons.RetryCancel:  					if (index == 0)  						buttonId = (int)VistaTaskDialogCommonButtons.Retry;  					else if (index == 1)  						buttonId = (int)VistaTaskDialogCommonButtons.Cancel;  					else  						buttonId = 0;  					break;  				case TaskDialogCommonButtons.YesNo:  					if (index == 0)  						buttonId = (int)VistaTaskDialogCommonButtons.Yes;  					else if (index == 1)  						buttonId = (int)VistaTaskDialogCommonButtons.No;  					else  						buttonId = 0;  					break;  				case TaskDialogCommonButtons.YesNoCancel:  					if (index == 0)  						buttonId = (int)VistaTaskDialogCommonButtons.Yes;  					else if (index == 1)  						buttonId = (int)VistaTaskDialogCommonButtons.No;  					else if (index == 2)  						buttonId = (int)VistaTaskDialogCommonButtons.Cancel;  					else  						buttonId = 0;  					break;  			}
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,TaskDialog_Loaded,The following statement contains a magic number: if (ViewModel != null)  			{  				ViewModel.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(ViewModel_PropertyChanged);  				ViewModel.RequestClose +=new EventHandler(ViewModel_RequestClose);  				ViewModel.RequestVerificationFocus += new EventHandler(ViewModel_RequestVerificationFocus);    				ConvertToHyperlinkedText(ContentText' ViewModel.Content);  				ConvertToHyperlinkedText(ContentExpandedInfo' ViewModel.ContentExpandedInfo);  				ConvertToHyperlinkedText(FooterExpandedInfo' ViewModel.FooterExpandedInfo);  				ConvertToHyperlinkedText(FooterText' ViewModel.FooterText);    				this.WindowStartupLocation = ViewModel.StartPosition;    				if (ViewModel.NormalButtons.Count == 0)  				{  					this.MaxWidth = 462;  				}  				  				// Footer only shows the secondary white top border when the buttons section is visible  				FooterInner.BorderThickness = new Thickness(  					FooterInner.BorderThickness.Left'  					((ButtonsArea.Visibility == System.Windows.Visibility.Visible) ? 1 : 0)'  					FooterInner.BorderThickness.Right'  					FooterInner.BorderThickness.Bottom);    				// Hide the special button areas if they are empty  				if (ViewModel.CommandLinks.Count == 0)  					CommandLinks.Visibility = System.Windows.Visibility.Collapsed;  				if (ViewModel.RadioButtons.Count == 0)  					RadioButtons.Visibility = System.Windows.Visibility.Collapsed;    				// Play the appropriate sound  				switch (ViewModel.MainIconType)  				{  					default:  					case VistaTaskDialogIcon.None:  					case VistaTaskDialogIcon.Shield:  						// No sound  						break;  					case VistaTaskDialogIcon.Warning:  						System.Media.SystemSounds.Exclamation.Play();  						break;  					case VistaTaskDialogIcon.Error:  						System.Media.SystemSounds.Hand.Play();  						break;  					case VistaTaskDialogIcon.Information:  						System.Media.SystemSounds.Asterisk.Play();  						break;  				}  			}
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 14:                            #line 223 "..\..\TaskDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.NormalButton_Click);                            #line default              #line hidden              break;              }
Magic Number,TaskDialogInterop,VistaTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialogInterop.cs,PrivateCallback,The following statement contains a magic number: if (callback != null)  			{  				// Prepare arguments for the callback to the user we are insulating from Interop casting sillyness.    				// Future: Consider reusing a single ActiveTaskDialog object and mark it as destroyed on the destry notification.  				VistaActiveTaskDialog activeDialog = new VistaActiveTaskDialog(hwnd);  				VistaTaskDialogNotificationArgs args = new VistaTaskDialogNotificationArgs();  				args.Config = this.config;  				args.Notification = (VistaTaskDialogNotification)msg;  				switch (args.Notification)  				{  					case VistaTaskDialogNotification.ButtonClicked:  					case VistaTaskDialogNotification.RadioButtonClicked:  						args.ButtonId = (int)wparam;    						// The index' ideally' should be -1 or something whenever the  						//dialog was closed by non-common-button means such as Alt+F4  						//or using the Close action on the System menu or the red X  						  						// I can' with little trouble' detect this for the emulated dialog'  						//however the native dialog gives me no indication and in fact  						//simply reports a buttonId of 2 (Cancel) regardless of whether  						//the actual Cancel button was used or one of the above alt methods.    						// If I could hook into the native dialogs messages and detect:  						// WM_SYSCOMMAND with WParam of SC_CLOSE  						// ...then I could tell for sure' but I'm not sure how to listen  						//in on its messages. My Win32-fu not good enough.    						// For now' I will have the emulated dialog simply pretend like it  						//cannot tell either until I can figure out a way to determine it  						//with the native dialog' too.    						if (args.ButtonId > 100)  							args.ButtonIndex = args.ButtonId % 500;  						else  							args.ButtonIndex = TaskDialog.GetButtonIndexForCommonButton(args.Config.CommonButtons' args.ButtonId);  						break;  					case VistaTaskDialogNotification.HyperlinkClicked:  						args.Hyperlink = Marshal.PtrToStringUni(lparam);  						break;  					case VistaTaskDialogNotification.Timer:  						args.TimerTickCount = (uint)wparam;  						break;  					case VistaTaskDialogNotification.VerificationClicked:  						args.VerificationFlagChecked = (wparam != UIntPtr.Zero);  						break;  					case VistaTaskDialogNotification.ExpandoButtonClicked:  						args.Expanded = (wparam != UIntPtr.Zero);  						break;  				}    				bool result = callback(activeDialog' args' this.callbackData);    				return (result ? 1 : 0);  			}
Magic Number,TaskDialogInterop,VistaTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialogInterop.cs,PrivateCallback,The following statement contains a magic number: if (callback != null)  			{  				// Prepare arguments for the callback to the user we are insulating from Interop casting sillyness.    				// Future: Consider reusing a single ActiveTaskDialog object and mark it as destroyed on the destry notification.  				VistaActiveTaskDialog activeDialog = new VistaActiveTaskDialog(hwnd);  				VistaTaskDialogNotificationArgs args = new VistaTaskDialogNotificationArgs();  				args.Config = this.config;  				args.Notification = (VistaTaskDialogNotification)msg;  				switch (args.Notification)  				{  					case VistaTaskDialogNotification.ButtonClicked:  					case VistaTaskDialogNotification.RadioButtonClicked:  						args.ButtonId = (int)wparam;    						// The index' ideally' should be -1 or something whenever the  						//dialog was closed by non-common-button means such as Alt+F4  						//or using the Close action on the System menu or the red X  						  						// I can' with little trouble' detect this for the emulated dialog'  						//however the native dialog gives me no indication and in fact  						//simply reports a buttonId of 2 (Cancel) regardless of whether  						//the actual Cancel button was used or one of the above alt methods.    						// If I could hook into the native dialogs messages and detect:  						// WM_SYSCOMMAND with WParam of SC_CLOSE  						// ...then I could tell for sure' but I'm not sure how to listen  						//in on its messages. My Win32-fu not good enough.    						// For now' I will have the emulated dialog simply pretend like it  						//cannot tell either until I can figure out a way to determine it  						//with the native dialog' too.    						if (args.ButtonId > 100)  							args.ButtonIndex = args.ButtonId % 500;  						else  							args.ButtonIndex = TaskDialog.GetButtonIndexForCommonButton(args.Config.CommonButtons' args.ButtonId);  						break;  					case VistaTaskDialogNotification.HyperlinkClicked:  						args.Hyperlink = Marshal.PtrToStringUni(lparam);  						break;  					case VistaTaskDialogNotification.Timer:  						args.TimerTickCount = (uint)wparam;  						break;  					case VistaTaskDialogNotification.VerificationClicked:  						args.VerificationFlagChecked = (wparam != UIntPtr.Zero);  						break;  					case VistaTaskDialogNotification.ExpandoButtonClicked:  						args.Expanded = (wparam != UIntPtr.Zero);  						break;  				}    				bool result = callback(activeDialog' args' this.callbackData);    				return (result ? 1 : 0);  			}
Magic Number,TaskDialogInterop,VistaActiveTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\VistaActiveTaskDialog.cs,SetProgressBarRange,The following statement contains a magic number: IntPtr lparam = (IntPtr)((((Int32)minRange) & 0xffff) | ((((Int32)maxRange) & 0xffff) << 16));
Missing Default,TaskDialogInterop,CommandLink,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\CommandLink.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.UserControl = ((TaskDialogInterop.CommandLink)(target));              return;              case 2:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.CommandLinkButton = ((System.Windows.Controls.Button)(target));              return;              }
Missing Default,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.LayoutRoot = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ContentArea = ((System.Windows.Controls.Border)(target));              return;              case 3:              this.MainIcon = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.MainInstruction = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.ContentText = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.ContentExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.ProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:              this.CommandLinks = ((System.Windows.Controls.ItemsControl)(target));              return;              case 9:              this.RadioButtons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 10:              this.ButtonsArea = ((System.Windows.Controls.Border)(target));              return;              case 11:              this.ShowDetailsButton = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 12:              this.VerificationCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.Buttons = ((System.Windows.Controls.ItemsControl)(target));              return;              case 15:              this.FooterArea = ((System.Windows.Controls.Border)(target));              return;              case 16:              this.FooterInner = ((System.Windows.Controls.Border)(target));              return;              case 17:              this.FooterIcon = ((System.Windows.Controls.Image)(target));              return;              case 18:              this.FooterText = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.FooterExpandedArea = ((System.Windows.Controls.Border)(target));              return;              case 20:              this.FooterExpandedInner = ((System.Windows.Controls.Border)(target));              return;              case 21:              this.FooterExpandedInfo = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,TaskDialogInterop,TaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialog.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 14:                            #line 223 "..\..\TaskDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.NormalButton_Click);                            #line default              #line hidden              break;              }
Missing Default,TaskDialogInterop,VistaTaskDialog,C:\repos\yadyn_WPF-Task-Dialog\TaskDialog\TaskDialogInterop.cs,PrivateCallback,The following switch statement is missing a default case: switch (args.Notification)  				{  					case VistaTaskDialogNotification.ButtonClicked:  					case VistaTaskDialogNotification.RadioButtonClicked:  						args.ButtonId = (int)wparam;    						// The index' ideally' should be -1 or something whenever the  						//dialog was closed by non-common-button means such as Alt+F4  						//or using the Close action on the System menu or the red X  						  						// I can' with little trouble' detect this for the emulated dialog'  						//however the native dialog gives me no indication and in fact  						//simply reports a buttonId of 2 (Cancel) regardless of whether  						//the actual Cancel button was used or one of the above alt methods.    						// If I could hook into the native dialogs messages and detect:  						// WM_SYSCOMMAND with WParam of SC_CLOSE  						// ...then I could tell for sure' but I'm not sure how to listen  						//in on its messages. My Win32-fu not good enough.    						// For now' I will have the emulated dialog simply pretend like it  						//cannot tell either until I can figure out a way to determine it  						//with the native dialog' too.    						if (args.ButtonId > 100)  							args.ButtonIndex = args.ButtonId % 500;  						else  							args.ButtonIndex = TaskDialog.GetButtonIndexForCommonButton(args.Config.CommonButtons' args.ButtonId);  						break;  					case VistaTaskDialogNotification.HyperlinkClicked:  						args.Hyperlink = Marshal.PtrToStringUni(lparam);  						break;  					case VistaTaskDialogNotification.Timer:  						args.TimerTickCount = (uint)wparam;  						break;  					case VistaTaskDialogNotification.VerificationClicked:  						args.VerificationFlagChecked = (wparam != UIntPtr.Zero);  						break;  					case VistaTaskDialogNotification.ExpandoButtonClicked:  						args.Expanded = (wparam != UIntPtr.Zero);  						break;  				}
