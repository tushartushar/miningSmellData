Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Nagios.NSCA.Client,PassiveCheckProtocolWriter,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\PassiveCheckProtocolWriter.cs,EncodeToProtocol,The method has 6 parameters. Parameters: level' timestamp' hostName' serviceName' message' initVector
Long Statement,Nagios.NSCA.Client,NSCAClientSender,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\NSCAClientSender.cs,SendPassiveCheck,The length of the statement  "            if (serviceName == null) throw new ArgumentNullException("serviceName"); //update as per ChrisGeorg issue opened January 05' 2012' https://github.com/robertmircea/nagios-nsca-client/issues/1 " is 190.
Magic Number,Nagios.NSCA.Client,CRC32,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\CRC32.cs,CRC32,The following statement contains a magic number: HashSizeValue = 32;
Magic Number,Nagios.NSCA.Client,CRC32,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\CRC32.cs,HashCore,The following statement contains a magic number: for (int i = offset; i < count; i++)              {                  ulong ptr = (_crc & 0xFF) ^ buffer[i];                  _crc >>= 8;                  _crc ^= _crc32Table[ptr];              }
Magic Number,Nagios.NSCA.Client,CRC32,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\CRC32.cs,HashFinal,The following statement contains a magic number: byte[] finalHash = new byte[4];
Magic Number,Nagios.NSCA.Client,CRC32,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash[1] = (byte)((finalCRC >> 8) & 0xFF);
Magic Number,Nagios.NSCA.Client,CRC32,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash[2] = (byte)((finalCRC >> 16) & 0xFF);
Magic Number,Nagios.NSCA.Client,CRC32,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash[2] = (byte)((finalCRC >> 16) & 0xFF);
Magic Number,Nagios.NSCA.Client,CRC32,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash[3] = (byte)((finalCRC >> 24) & 0xFF);
Magic Number,Nagios.NSCA.Client,CRC32,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash[3] = (byte)((finalCRC >> 24) & 0xFF);
Magic Number,Nagios.NSCA.Client,CRC32,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\CRC32.cs,ComputeHash,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,Nagios.NSCA.Client,CRC32,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\CRC32.cs,ComputeHash,The following statement contains a magic number: while ((bytesRead = inputStream.Read(buffer' 0' 4096)) > 0)              {                  HashCore(buffer' 0' bytesRead);              }
Magic Number,Nagios.NSCA.Client,CRC32,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\CRC32.cs,_buildCRC32Table,The following statement contains a magic number: uint[] table = new uint[256];
Magic Number,Nagios.NSCA.Client,CRC32,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\CRC32.cs,_buildCRC32Table,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  crc = (uint)i;                  for (int j = 8; j > 0; j--)                  {                      if ((crc & 1) == 1)                          crc = (crc >> 1) ^ polynomial;                      else                          crc >>= 1;                  }                  table[i] = crc;              }
Magic Number,Nagios.NSCA.Client,CRC32,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\CRC32.cs,_buildCRC32Table,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  crc = (uint)i;                  for (int j = 8; j > 0; j--)                  {                      if ((crc & 1) == 1)                          crc = (crc >> 1) ^ polynomial;                      else                          crc >>= 1;                  }                  table[i] = crc;              }
Magic Number,Nagios.NSCA.Client,AESEncryption,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\AESEncryption.cs,Encrypt,The following statement contains a magic number: using (RijndaelManaged crypto = new RijndaelManaged())              {                  crypto.BlockSize = keyByteLength * 8;                  crypto.Mode = CipherMode.CFB;                  crypto.FeedbackSize = 8;                  crypto.Padding = PaddingMode.Zeros;                    var cryptoBytes = crypto.CreateEncryptor(keyBytes' iv).TransformFinalBlock(s' 0' s.Length);                  return cryptoBytes;              }
Magic Number,Nagios.NSCA.Client,AESEncryption,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\AESEncryption.cs,Encrypt,The following statement contains a magic number: using (RijndaelManaged crypto = new RijndaelManaged())              {                  crypto.BlockSize = keyByteLength * 8;                  crypto.Mode = CipherMode.CFB;                  crypto.FeedbackSize = 8;                  crypto.Padding = PaddingMode.Zeros;                    var cryptoBytes = crypto.CreateEncryptor(keyBytes' iv).TransformFinalBlock(s' 0' s.Length);                  return cryptoBytes;              }
Magic Number,Nagios.NSCA.Client,EncryptorFactory,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\EncryptorFactory.cs,CreateEncryptor,The following statement contains a magic number: switch (encryptionType)              {                  case NSCAEncryptionType.Xor:                      return new XorEncryption();                  case NSCAEncryptionType.TripleDES:                      return new TripleDESEncryption();                  case NSCAEncryptionType.None:                      return new NoEncryption();                  case NSCAEncryptionType.Rijndael128:                      return new AESEncryption(16);                  case NSCAEncryptionType.Rijndael192:                      return new AESEncryption(24);                  case NSCAEncryptionType.Rijndael256:                      return new AESEncryption(32);                  default:                      throw new ArgumentOutOfRangeException("encryptionType");              }
Magic Number,Nagios.NSCA.Client,EncryptorFactory,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\EncryptorFactory.cs,CreateEncryptor,The following statement contains a magic number: switch (encryptionType)              {                  case NSCAEncryptionType.Xor:                      return new XorEncryption();                  case NSCAEncryptionType.TripleDES:                      return new TripleDESEncryption();                  case NSCAEncryptionType.None:                      return new NoEncryption();                  case NSCAEncryptionType.Rijndael128:                      return new AESEncryption(16);                  case NSCAEncryptionType.Rijndael192:                      return new AESEncryption(24);                  case NSCAEncryptionType.Rijndael256:                      return new AESEncryption(32);                  default:                      throw new ArgumentOutOfRangeException("encryptionType");              }
Magic Number,Nagios.NSCA.Client,EncryptorFactory,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\EncryptorFactory.cs,CreateEncryptor,The following statement contains a magic number: switch (encryptionType)              {                  case NSCAEncryptionType.Xor:                      return new XorEncryption();                  case NSCAEncryptionType.TripleDES:                      return new TripleDESEncryption();                  case NSCAEncryptionType.None:                      return new NoEncryption();                  case NSCAEncryptionType.Rijndael128:                      return new AESEncryption(16);                  case NSCAEncryptionType.Rijndael192:                      return new AESEncryption(24);                  case NSCAEncryptionType.Rijndael256:                      return new AESEncryption(32);                  default:                      throw new ArgumentOutOfRangeException("encryptionType");              }
Magic Number,Nagios.NSCA.Client,NSCAClientSender,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\NSCAClientSender.cs,SendPassiveCheck,The following statement contains a magic number: try              {                  using (TcpClient tcpClient = new TcpClient())                  {                      tcpClient.Connect(settings.NSCAAddress' settings.Port);                      using (var stream = tcpClient.GetStream())                      {                          byte[] initVector = new byte[128];                          stream.Read(initVector' 0' 128);                            byte[] timestamp = new byte[4];                          stream.Read(timestamp' 0' 4);                            var bytesToSend = protocolWriter.EncodeToProtocol(level' timestamp' hostName' serviceName' message' initVector);                          stream.Write(bytesToSend' 0' bytesToSend.Length);                      }                  }                  return true;              }              catch              {                  //intentionally swallow exceptions' maybe some logging is required.                  return false;              }
Magic Number,Nagios.NSCA.Client,NSCAClientSender,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\NSCAClientSender.cs,SendPassiveCheck,The following statement contains a magic number: try              {                  using (TcpClient tcpClient = new TcpClient())                  {                      tcpClient.Connect(settings.NSCAAddress' settings.Port);                      using (var stream = tcpClient.GetStream())                      {                          byte[] initVector = new byte[128];                          stream.Read(initVector' 0' 128);                            byte[] timestamp = new byte[4];                          stream.Read(timestamp' 0' 4);                            var bytesToSend = protocolWriter.EncodeToProtocol(level' timestamp' hostName' serviceName' message' initVector);                          stream.Write(bytesToSend' 0' bytesToSend.Length);                      }                  }                  return true;              }              catch              {                  //intentionally swallow exceptions' maybe some logging is required.                  return false;              }
Magic Number,Nagios.NSCA.Client,NSCAClientSender,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\NSCAClientSender.cs,SendPassiveCheck,The following statement contains a magic number: try              {                  using (TcpClient tcpClient = new TcpClient())                  {                      tcpClient.Connect(settings.NSCAAddress' settings.Port);                      using (var stream = tcpClient.GetStream())                      {                          byte[] initVector = new byte[128];                          stream.Read(initVector' 0' 128);                            byte[] timestamp = new byte[4];                          stream.Read(timestamp' 0' 4);                            var bytesToSend = protocolWriter.EncodeToProtocol(level' timestamp' hostName' serviceName' message' initVector);                          stream.Write(bytesToSend' 0' bytesToSend.Length);                      }                  }                  return true;              }              catch              {                  //intentionally swallow exceptions' maybe some logging is required.                  return false;              }
Magic Number,Nagios.NSCA.Client,NSCAClientSender,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\NSCAClientSender.cs,SendPassiveCheck,The following statement contains a magic number: try              {                  using (TcpClient tcpClient = new TcpClient())                  {                      tcpClient.Connect(settings.NSCAAddress' settings.Port);                      using (var stream = tcpClient.GetStream())                      {                          byte[] initVector = new byte[128];                          stream.Read(initVector' 0' 128);                            byte[] timestamp = new byte[4];                          stream.Read(timestamp' 0' 4);                            var bytesToSend = protocolWriter.EncodeToProtocol(level' timestamp' hostName' serviceName' message' initVector);                          stream.Write(bytesToSend' 0' bytesToSend.Length);                      }                  }                  return true;              }              catch              {                  //intentionally swallow exceptions' maybe some logging is required.                  return false;              }
Magic Number,Nagios.NSCA.Client,PassiveCheckProtocolWriter,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\PassiveCheckProtocolWriter.cs,EncodeToProtocol,The following statement contains a magic number: using (var stream = new MemoryStream(16 + HOST_NAME_SIZE + SERVICE_NAME_SIZE + PLUGIN_OUTPUT_SIZE))              {                  stream.WriteShort(NSCA_VERSION); //bytes 0-1                  stream.WriteShort(0); //bytes 2-3                  stream.WriteInt(0); //bytes 4-8                  stream.Write(timestamp' 0' 4); //bytes 9-13                  stream.WriteShort((short) level); //bytes 14-15                                  stream.WriteFixedString(hostName' HOST_NAME_SIZE);                  stream.WriteFixedString(serviceName' SERVICE_NAME_SIZE);                  stream.WriteFixedString(message' PLUGIN_OUTPUT_SIZE);                  stream.WriteShort(0);                      int hash = CRC32.Compute(stream.ToArray());                  stream.Position = 4;                  stream.WriteInt(hash);                    var encryptor = EncryptorFactory.CreateEncryptor(settings.EncryptionType);                  return encryptor.Encrypt(stream.ToArray()' initVector' settings.Password);              }
Magic Number,Nagios.NSCA.Client,PassiveCheckProtocolWriter,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\PassiveCheckProtocolWriter.cs,EncodeToProtocol,The following statement contains a magic number: using (var stream = new MemoryStream(16 + HOST_NAME_SIZE + SERVICE_NAME_SIZE + PLUGIN_OUTPUT_SIZE))              {                  stream.WriteShort(NSCA_VERSION); //bytes 0-1                  stream.WriteShort(0); //bytes 2-3                  stream.WriteInt(0); //bytes 4-8                  stream.Write(timestamp' 0' 4); //bytes 9-13                  stream.WriteShort((short) level); //bytes 14-15                                  stream.WriteFixedString(hostName' HOST_NAME_SIZE);                  stream.WriteFixedString(serviceName' SERVICE_NAME_SIZE);                  stream.WriteFixedString(message' PLUGIN_OUTPUT_SIZE);                  stream.WriteShort(0);                      int hash = CRC32.Compute(stream.ToArray());                  stream.Position = 4;                  stream.WriteInt(hash);                    var encryptor = EncryptorFactory.CreateEncryptor(settings.EncryptionType);                  return encryptor.Encrypt(stream.ToArray()' initVector' settings.Password);              }
Magic Number,Nagios.NSCA.Client,PassiveCheckProtocolWriter,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\PassiveCheckProtocolWriter.cs,EncodeToProtocol,The following statement contains a magic number: using (var stream = new MemoryStream(16 + HOST_NAME_SIZE + SERVICE_NAME_SIZE + PLUGIN_OUTPUT_SIZE))              {                  stream.WriteShort(NSCA_VERSION); //bytes 0-1                  stream.WriteShort(0); //bytes 2-3                  stream.WriteInt(0); //bytes 4-8                  stream.Write(timestamp' 0' 4); //bytes 9-13                  stream.WriteShort((short) level); //bytes 14-15                                  stream.WriteFixedString(hostName' HOST_NAME_SIZE);                  stream.WriteFixedString(serviceName' SERVICE_NAME_SIZE);                  stream.WriteFixedString(message' PLUGIN_OUTPUT_SIZE);                  stream.WriteShort(0);                      int hash = CRC32.Compute(stream.ToArray());                  stream.Position = 4;                  stream.WriteInt(hash);                    var encryptor = EncryptorFactory.CreateEncryptor(settings.EncryptionType);                  return encryptor.Encrypt(stream.ToArray()' initVector' settings.Password);              }
Magic Number,Nagios.NSCA.Client,MemoryStreamExtensions,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\PassiveCheckProtocolWriter.cs,WriteShort,The following statement contains a magic number: byte[] shortBuf = new byte[2];
Magic Number,Nagios.NSCA.Client,MemoryStreamExtensions,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\PassiveCheckProtocolWriter.cs,WriteShort,The following statement contains a magic number: shortBuf[0] = (byte)((value >> 8) & 0xff);
Magic Number,Nagios.NSCA.Client,MemoryStreamExtensions,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\PassiveCheckProtocolWriter.cs,WriteInt,The following statement contains a magic number: byte[] intBuf = new byte[4];
Magic Number,Nagios.NSCA.Client,MemoryStreamExtensions,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\PassiveCheckProtocolWriter.cs,WriteInt,The following statement contains a magic number: intBuf[3] = (byte)(value & 0xff);
Magic Number,Nagios.NSCA.Client,MemoryStreamExtensions,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\PassiveCheckProtocolWriter.cs,WriteInt,The following statement contains a magic number: intBuf[2] = (byte)((value >> 8) & 0xff);
Magic Number,Nagios.NSCA.Client,MemoryStreamExtensions,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\PassiveCheckProtocolWriter.cs,WriteInt,The following statement contains a magic number: intBuf[2] = (byte)((value >> 8) & 0xff);
Magic Number,Nagios.NSCA.Client,MemoryStreamExtensions,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\PassiveCheckProtocolWriter.cs,WriteInt,The following statement contains a magic number: intBuf[1] = (byte)((value >> 16) & 0xff);
Magic Number,Nagios.NSCA.Client,MemoryStreamExtensions,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\PassiveCheckProtocolWriter.cs,WriteInt,The following statement contains a magic number: intBuf[0] = (byte)((value >> 24) & 0xff);
Magic Number,Nagios.NSCA.Client,TripleDESEncryption,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\TripleDESEncryption.cs,Encrypt,The following statement contains a magic number: byte[] keyBytes = new byte[24];
Magic Number,Nagios.NSCA.Client,TripleDESEncryption,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\TripleDESEncryption.cs,Encrypt,The following statement contains a magic number: Buffer.BlockCopy(passwordBytes' 0' keyBytes' 0' Math.Min(24' passwordBytes.Length));
Magic Number,Nagios.NSCA.Client,TripleDESEncryption,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\TripleDESEncryption.cs,Encrypt,The following statement contains a magic number: byte[] iv = new byte[8];
Magic Number,Nagios.NSCA.Client,TripleDESEncryption,C:\repos\robertmircea_nagios-nsca-client\Nagios.NSCA.Client\TripleDESEncryption.cs,Encrypt,The following statement contains a magic number: Buffer.BlockCopy(initVector' 0' iv' 0' Math.Min(8' iv.Length));
