Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MPExtended.PlugIns.MAS.MyFilms,MyFilms,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MyFilms\MyFilms.cs,NodeToMovie,Cyclomatic complexity of the method is 10
Long Statement,MPExtended.PlugIns.MAS.MyFilms,ArtworkRetriever,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MyFilms\ArtworkRetriever.cs,DownloadFile,The length of the statement  "            string tmpPath = Path.Combine(Path.GetTempPath()' "MPExtended"' "imagecache"' String.Format("myfilms_{0:X8}{1}"' url.ToString().GetHashCode()' extension)); " is 155.
Long Statement,MPExtended.PlugIns.MAS.MyFilms,MyFilms,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MyFilms\MyFilms.cs,NodeToMovie,The length of the statement  "                Path = new List<string>() { sourcePrefix == String.Empty ? item.Attribute("Source").Value : Path.Combine(sourcePrefix' item.Attribute("Source").Value) }' " is 153.
Long Statement,MPExtended.PlugIns.MAS.MyFilms,MyFilms,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MyFilms\MyFilms.cs,NodeToMovie,The length of the statement  "                Rating = item.Attribute("Rating") != null ? Single.Parse(item.Attribute("Rating").Value' CultureInfo.InvariantCulture) : 0' " is 123.
Long Statement,MPExtended.PlugIns.MAS.MyFilms,MyFilms,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MyFilms\MyFilms.cs,NodeToMovie,The length of the statement  "                      DateTime.TryParseExact(item.Attribute("Date").Value' "yyyy-MM-dd"' CultureInfo.InvariantCulture' DateTimeStyles.None' out tmp) || " is 129.
Long Statement,MPExtended.PlugIns.MAS.MyFilms,MyFilms,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MyFilms\MyFilms.cs,NodeToMovie,The length of the statement  "                      DateTime.TryParseExact(item.Attribute("Date").Value' "dd/MM/yyyy"' CultureInfo.InvariantCulture' DateTimeStyles.None' out tmp))) " is 128.
Magic Number,MPExtended.PlugIns.MAS.MyFilms,MyFilms,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MyFilms\MyFilms.cs,Search,The following statement contains a magic number: return XElement.Load(DatabasePath)                  .Element("Catalog").Element("Contents").Elements("Movie")                  .Where(x => x.Attribute("OriginalTitle").Value.Contains(text' false))                  .Select(x => new WebSearchResult()                  {                      Type = WebMediaType.Movie'                      Id = x.Attribute("Number").Value'                      Title = x.Attribute("OriginalTitle").Value'                      Score = (int)Math.Round(40 + (decimal)text.Length / x.Attribute("OriginalTitle").Value.Length * 40)'                      Details = new WebDictionary<string>()                      {                          { "Year"' x.Attribute("Year").Value }'                          { "Genres"' String.Join("' "' x.Attribute("Category").Value.Split('''' '|').Select(g => g.Trim()).Distinct()) }                      }                  });
Magic Number,MPExtended.PlugIns.MAS.MyFilms,MyFilms,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MyFilms\MyFilms.cs,Search,The following statement contains a magic number: return XElement.Load(DatabasePath)                  .Element("Catalog").Element("Contents").Elements("Movie")                  .Where(x => x.Attribute("OriginalTitle").Value.Contains(text' false))                  .Select(x => new WebSearchResult()                  {                      Type = WebMediaType.Movie'                      Id = x.Attribute("Number").Value'                      Title = x.Attribute("OriginalTitle").Value'                      Score = (int)Math.Round(40 + (decimal)text.Length / x.Attribute("OriginalTitle").Value.Length * 40)'                      Details = new WebDictionary<string>()                      {                          { "Year"' x.Attribute("Year").Value }'                          { "Genres"' String.Join("' "' x.Attribute("Category").Value.Split('''' '|').Select(g => g.Trim()).Distinct()) }                      }                  });
