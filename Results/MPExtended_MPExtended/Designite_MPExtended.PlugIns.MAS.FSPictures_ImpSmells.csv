Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MPExtended.PlugIns.MAS.FSPictures,PictureLibraryBase,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.FSPictures\PictureLibraryBase.cs,GetAllPicturesBasic,The length of the statement  "            return GetAllPictureCategories().Select(x => SearchPictures(IdToPath(x.Id)' true' GetWebPictureBasic)).SelectMany(x => x); " is 122.
Long Statement,MPExtended.PlugIns.MAS.FSPictures,PictureLibraryBase,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.FSPictures\PictureLibraryBase.cs,GetAllPicturesDetailed,The length of the statement  "            return GetAllPictureCategories().Select(x => SearchPictures(IdToPath(x.Id)' true' GetWebPictureDetailed)).SelectMany(x => x); " is 125.
Magic Number,MPExtended.PlugIns.MAS.FSPictures,PictureLibraryBase,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.FSPictures\PictureLibraryBase.cs,GetWebPictureDetailed,The following statement contains a magic number: if (!PathUtil.MightBeOnNetworkDrive(path))              {                  try                  {                      BitmapSource img = BitmapFrame.Create(uri);                      pic.Mpixel = (img.PixelHeight * img.PixelWidth * 1.0) / (1000 * 1000);                      pic.Width = Convert.ToString(img.PixelWidth);                      pic.Height = Convert.ToString(img.PixelHeight);                      pic.Dpi = Convert.ToString(img.DpiX * img.DpiY);                        // Image metadata                      BitmapMetadata meta = (BitmapMetadata)img.Metadata;                      if (!String.IsNullOrWhiteSpace(meta.Title))                          pic.Title = meta.Title.Trim();                      if (!String.IsNullOrWhiteSpace(meta.DateTaken))                          pic.DateTaken = DateTime.Parse(meta.DateTaken);                      pic.Comment = meta.Comment;                      pic.CameraManufacturer = meta.CameraManufacturer;                      pic.CameraModel = meta.CameraModel;                      pic.Copyright = meta.Copyright;                      pic.Rating = (float)meta.Rating;                  }                  catch (Exception ex)                  {                      Log.Error(String.Format("Error reading picture (meta-)data for {0}"' path)' ex);                  }              }
Magic Number,MPExtended.PlugIns.MAS.FSPictures,PictureLibraryBase,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.FSPictures\PictureLibraryBase.cs,GetWebPictureDetailed,The following statement contains a magic number: if (!PathUtil.MightBeOnNetworkDrive(path))              {                  try                  {                      BitmapSource img = BitmapFrame.Create(uri);                      pic.Mpixel = (img.PixelHeight * img.PixelWidth * 1.0) / (1000 * 1000);                      pic.Width = Convert.ToString(img.PixelWidth);                      pic.Height = Convert.ToString(img.PixelHeight);                      pic.Dpi = Convert.ToString(img.DpiX * img.DpiY);                        // Image metadata                      BitmapMetadata meta = (BitmapMetadata)img.Metadata;                      if (!String.IsNullOrWhiteSpace(meta.Title))                          pic.Title = meta.Title.Trim();                      if (!String.IsNullOrWhiteSpace(meta.DateTaken))                          pic.DateTaken = DateTime.Parse(meta.DateTaken);                      pic.Comment = meta.Comment;                      pic.CameraManufacturer = meta.CameraManufacturer;                      pic.CameraModel = meta.CameraModel;                      pic.Copyright = meta.Copyright;                      pic.Rating = (float)meta.Rating;                  }                  catch (Exception ex)                  {                      Log.Error(String.Format("Error reading picture (meta-)data for {0}"' path)' ex);                  }              }
