Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,Search,The length of the statement  "                int score = result.Title.Contains(text' false) ? (int)Math.Round(40 + (decimal)text.Length / result.Title.Length * 40) : 0; " is 123.
Long Statement,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,Search,The length of the statement  "                score = Math.Max(score' validAlternate.Count() > 0 ? validAlternate.Max(x => 30 + (int)Math.Round((decimal)text.Length / x.Length * 25)) : 0); " is 142.
Long Statement,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,Search,The length of the statement  "                score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30)) : 0); " is 124.
Long Statement,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,GetAllMovies,The length of the statement  "                                    " WHERE si.providertype LIKE 'MediaPortal.Plugins.MovingPictures.DataProviders.TheMovieDbProvider' MovingPictures' %' " +  " is 121.
Magic Number,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,Search,The following statement contains a magic number: return ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)              {                  var result = new WebSearchResult()                  {                      Type = WebMediaType.Movie'                      Id = reader.ReadIntAsString(0)'                      Title = reader.ReadString(1)'                      Details = new WebDictionary<string>()                      {                          { "Year"' reader.ReadIntAsString(3) }'                          { "Genres"' String.Join("' "' reader.ReadPipeList(4)) }'                      }                  };                    // simple score                  int score = result.Title.Contains(text' false) ? (int)Math.Round(40 + (decimal)text.Length / result.Title.Length * 40) : 0;                  var validAlternate = reader.ReadPipeList(5).Where(x => x.Contains(text' false));                  score = Math.Max(score' validAlternate.Count() > 0 ? validAlternate.Max(x => 30 + (int)Math.Round((decimal)text.Length / x.Length * 25)) : 0);                                    // actors                  var valid = reader.ReadPipeList(2).Where(x => x.Contains(text' false));                  score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30)) : 0);                    // set                  result.Score = score;                  return result;              }' new SQLiteParameter("@search"' "%" + text + "%"));
Magic Number,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,Search,The following statement contains a magic number: return ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)              {                  var result = new WebSearchResult()                  {                      Type = WebMediaType.Movie'                      Id = reader.ReadIntAsString(0)'                      Title = reader.ReadString(1)'                      Details = new WebDictionary<string>()                      {                          { "Year"' reader.ReadIntAsString(3) }'                          { "Genres"' String.Join("' "' reader.ReadPipeList(4)) }'                      }                  };                    // simple score                  int score = result.Title.Contains(text' false) ? (int)Math.Round(40 + (decimal)text.Length / result.Title.Length * 40) : 0;                  var validAlternate = reader.ReadPipeList(5).Where(x => x.Contains(text' false));                  score = Math.Max(score' validAlternate.Count() > 0 ? validAlternate.Max(x => 30 + (int)Math.Round((decimal)text.Length / x.Length * 25)) : 0);                                    // actors                  var valid = reader.ReadPipeList(2).Where(x => x.Contains(text' false));                  score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30)) : 0);                    // set                  result.Score = score;                  return result;              }' new SQLiteParameter("@search"' "%" + text + "%"));
Magic Number,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,Search,The following statement contains a magic number: return ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)              {                  var result = new WebSearchResult()                  {                      Type = WebMediaType.Movie'                      Id = reader.ReadIntAsString(0)'                      Title = reader.ReadString(1)'                      Details = new WebDictionary<string>()                      {                          { "Year"' reader.ReadIntAsString(3) }'                          { "Genres"' String.Join("' "' reader.ReadPipeList(4)) }'                      }                  };                    // simple score                  int score = result.Title.Contains(text' false) ? (int)Math.Round(40 + (decimal)text.Length / result.Title.Length * 40) : 0;                  var validAlternate = reader.ReadPipeList(5).Where(x => x.Contains(text' false));                  score = Math.Max(score' validAlternate.Count() > 0 ? validAlternate.Max(x => 30 + (int)Math.Round((decimal)text.Length / x.Length * 25)) : 0);                                    // actors                  var valid = reader.ReadPipeList(2).Where(x => x.Contains(text' false));                  score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30)) : 0);                    // set                  result.Score = score;                  return result;              }' new SQLiteParameter("@search"' "%" + text + "%"));
Magic Number,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,Search,The following statement contains a magic number: return ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)              {                  var result = new WebSearchResult()                  {                      Type = WebMediaType.Movie'                      Id = reader.ReadIntAsString(0)'                      Title = reader.ReadString(1)'                      Details = new WebDictionary<string>()                      {                          { "Year"' reader.ReadIntAsString(3) }'                          { "Genres"' String.Join("' "' reader.ReadPipeList(4)) }'                      }                  };                    // simple score                  int score = result.Title.Contains(text' false) ? (int)Math.Round(40 + (decimal)text.Length / result.Title.Length * 40) : 0;                  var validAlternate = reader.ReadPipeList(5).Where(x => x.Contains(text' false));                  score = Math.Max(score' validAlternate.Count() > 0 ? validAlternate.Max(x => 30 + (int)Math.Round((decimal)text.Length / x.Length * 25)) : 0);                                    // actors                  var valid = reader.ReadPipeList(2).Where(x => x.Contains(text' false));                  score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30)) : 0);                    // set                  result.Score = score;                  return result;              }' new SQLiteParameter("@search"' "%" + text + "%"));
Magic Number,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,Search,The following statement contains a magic number: return ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)              {                  var result = new WebSearchResult()                  {                      Type = WebMediaType.Movie'                      Id = reader.ReadIntAsString(0)'                      Title = reader.ReadString(1)'                      Details = new WebDictionary<string>()                      {                          { "Year"' reader.ReadIntAsString(3) }'                          { "Genres"' String.Join("' "' reader.ReadPipeList(4)) }'                      }                  };                    // simple score                  int score = result.Title.Contains(text' false) ? (int)Math.Round(40 + (decimal)text.Length / result.Title.Length * 40) : 0;                  var validAlternate = reader.ReadPipeList(5).Where(x => x.Contains(text' false));                  score = Math.Max(score' validAlternate.Count() > 0 ? validAlternate.Max(x => 30 + (int)Math.Round((decimal)text.Length / x.Length * 25)) : 0);                                    // actors                  var valid = reader.ReadPipeList(2).Where(x => x.Contains(text' false));                  score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30)) : 0);                    // set                  result.Score = score;                  return result;              }' new SQLiteParameter("@search"' "%" + text + "%"));
Magic Number,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,Search,The following statement contains a magic number: return ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)              {                  var result = new WebSearchResult()                  {                      Type = WebMediaType.Movie'                      Id = reader.ReadIntAsString(0)'                      Title = reader.ReadString(1)'                      Details = new WebDictionary<string>()                      {                          { "Year"' reader.ReadIntAsString(3) }'                          { "Genres"' String.Join("' "' reader.ReadPipeList(4)) }'                      }                  };                    // simple score                  int score = result.Title.Contains(text' false) ? (int)Math.Round(40 + (decimal)text.Length / result.Title.Length * 40) : 0;                  var validAlternate = reader.ReadPipeList(5).Where(x => x.Contains(text' false));                  score = Math.Max(score' validAlternate.Count() > 0 ? validAlternate.Max(x => 30 + (int)Math.Round((decimal)text.Length / x.Length * 25)) : 0);                                    // actors                  var valid = reader.ReadPipeList(2).Where(x => x.Contains(text' false));                  score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30)) : 0);                    // set                  result.Score = score;                  return result;              }' new SQLiteParameter("@search"' "%" + text + "%"));
Magic Number,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,Search,The following statement contains a magic number: return ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)              {                  var result = new WebSearchResult()                  {                      Type = WebMediaType.Movie'                      Id = reader.ReadIntAsString(0)'                      Title = reader.ReadString(1)'                      Details = new WebDictionary<string>()                      {                          { "Year"' reader.ReadIntAsString(3) }'                          { "Genres"' String.Join("' "' reader.ReadPipeList(4)) }'                      }                  };                    // simple score                  int score = result.Title.Contains(text' false) ? (int)Math.Round(40 + (decimal)text.Length / result.Title.Length * 40) : 0;                  var validAlternate = reader.ReadPipeList(5).Where(x => x.Contains(text' false));                  score = Math.Max(score' validAlternate.Count() > 0 ? validAlternate.Max(x => 30 + (int)Math.Round((decimal)text.Length / x.Length * 25)) : 0);                                    // actors                  var valid = reader.ReadPipeList(2).Where(x => x.Contains(text' false));                  score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30)) : 0);                    // set                  result.Score = score;                  return result;              }' new SQLiteParameter("@search"' "%" + text + "%"));
Magic Number,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,Search,The following statement contains a magic number: return ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)              {                  var result = new WebSearchResult()                  {                      Type = WebMediaType.Movie'                      Id = reader.ReadIntAsString(0)'                      Title = reader.ReadString(1)'                      Details = new WebDictionary<string>()                      {                          { "Year"' reader.ReadIntAsString(3) }'                          { "Genres"' String.Join("' "' reader.ReadPipeList(4)) }'                      }                  };                    // simple score                  int score = result.Title.Contains(text' false) ? (int)Math.Round(40 + (decimal)text.Length / result.Title.Length * 40) : 0;                  var validAlternate = reader.ReadPipeList(5).Where(x => x.Contains(text' false));                  score = Math.Max(score' validAlternate.Count() > 0 ? validAlternate.Max(x => 30 + (int)Math.Round((decimal)text.Length / x.Length * 25)) : 0);                                    // actors                  var valid = reader.ReadPipeList(2).Where(x => x.Contains(text' false));                  score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30)) : 0);                    // set                  result.Score = score;                  return result;              }' new SQLiteParameter("@search"' "%" + text + "%"));
Magic Number,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,Search,The following statement contains a magic number: return ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)              {                  var result = new WebSearchResult()                  {                      Type = WebMediaType.Movie'                      Id = reader.ReadIntAsString(0)'                      Title = reader.ReadString(1)'                      Details = new WebDictionary<string>()                      {                          { "Year"' reader.ReadIntAsString(3) }'                          { "Genres"' String.Join("' "' reader.ReadPipeList(4)) }'                      }                  };                    // simple score                  int score = result.Title.Contains(text' false) ? (int)Math.Round(40 + (decimal)text.Length / result.Title.Length * 40) : 0;                  var validAlternate = reader.ReadPipeList(5).Where(x => x.Contains(text' false));                  score = Math.Max(score' validAlternate.Count() > 0 ? validAlternate.Max(x => 30 + (int)Math.Round((decimal)text.Length / x.Length * 25)) : 0);                                    // actors                  var valid = reader.ReadPipeList(2).Where(x => x.Contains(text' false));                  score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30)) : 0);                    // set                  result.Score = score;                  return result;              }' new SQLiteParameter("@search"' "%" + text + "%"));
Magic Number,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,Search,The following statement contains a magic number: return ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)              {                  var result = new WebSearchResult()                  {                      Type = WebMediaType.Movie'                      Id = reader.ReadIntAsString(0)'                      Title = reader.ReadString(1)'                      Details = new WebDictionary<string>()                      {                          { "Year"' reader.ReadIntAsString(3) }'                          { "Genres"' String.Join("' "' reader.ReadPipeList(4)) }'                      }                  };                    // simple score                  int score = result.Title.Contains(text' false) ? (int)Math.Round(40 + (decimal)text.Length / result.Title.Length * 40) : 0;                  var validAlternate = reader.ReadPipeList(5).Where(x => x.Contains(text' false));                  score = Math.Max(score' validAlternate.Count() > 0 ? validAlternate.Max(x => 30 + (int)Math.Round((decimal)text.Length / x.Length * 25)) : 0);                                    // actors                  var valid = reader.ReadPipeList(2).Where(x => x.Contains(text' false));                  score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30)) : 0);                    // set                  result.Score = score;                  return result;              }' new SQLiteParameter("@search"' "%" + text + "%"));
Magic Number,MPExtended.PlugIns.MAS.MovingPictures,MPMovingPictures,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMovingPictures\Search.cs,CoverReader,The following statement contains a magic number: return (DataReaders.ReadPipeList(reader' idx) as List<string>).Select(x => new WebArtworkDetailed()              {                  Offset = i++'                  Type = WebFileType.Cover'                  Path = x'                  Id = x.GetHashCode().ToString()'                  Filetype = Path.GetExtension(x).Substring(1)'                  Rating = x == preferred ? 2 : 1              }).ToList();
