Implementation smell,Namespace,Class,File,Method,Description
Long Method,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The method has 138 lines of code.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,CustomReaders,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\CustomReaders.cs,FixNameReader,The length of the statement  "            // MPTvSeries does some magic with the name: if it's empty in the online series' use the Parsed_Name from the local series. I prefer " is 132.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "            /* In the beginning' this code was written and it was simple' and everything was good. Then' someone deleted their local files' and the code " is 140.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "             * broke. It was fixed by ignoring all episodes that don't have local files (INNER JOIN local_episodes)' and requiring all shows to have  " is 135.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "             * - The HasLocalFiles flag doesn't work the way we expected it to work. There were episodes for shows with HasLocalFiles = 0 is returned from " is 141.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "             *   the GetAllEpisodes() method below' even though that one still has the INNER JOIN on local_episodes. This caused problems with clients who " is 141.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "             * But it wasn't good enough. People deleted shows from their databases' and people started complaining again: their deleted shows were being " is 140.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "             * shown in WebMediaPortal. The obvious solution would be to require s.HasLocalFiles = 1 again' but the world isn't simple anymore. " is 130.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "             * - We completely ignore all flags we encounter in the online_series table. They may be right' they may be wrong' they may be misnamed or they " is 142.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "             * - For loading the number of (unwatched) episodes' we always use a subquery that queries the online_episodes table with an INNER JOIN on the " is 141.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "             *   local_episodes table. This was actually added somewhere in the middle of the story above' because MP-TVSeries counted episodes without an " is 141.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "             *   entry in local_episodes as an unwatched episode too. That isn't directly problematic' but since we ignore those episodes' the episode count " is 143.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "             *   was bigger than the number of episodes returned from GetAllEpisodes(). That confused some clients' and it didn't make any sense at all. " is 139.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "             * - We don't return any shows or seasons that don't have any episodes using that method. That implies that we don't support seasons or shows  " is 140.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "                    "SELECT DISTINCT s.ID' MIN(l.Parsed_Name) AS parsed_name' s.Pretty_Name' s.Genre' STRFTIME('%Y'' s.FirstAired) AS year' s.Actors' s.Rating' s.ContentRating' " + " is 160.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "                            "SELECT seriesID' GROUP_CONCAT(LocalPath || '?' || Rating || '?' || id' '|') AS fanart_list " + // the question mark is used because it's forbidden in paths " is 156.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "                            "WHERE LocalPath != '' " + // there used to be "AND f.SeriesName = 'false'" appended here' but that doesn't seem to make any sense " is 130.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "                new SQLFieldMapping("s"' "ID"' "ExternalId"' CustomReaders.ExternalIdReader' new ExternalSiteReaderParameters(DataReaders.ReadIntAsString' "TVDB"))' " is 148.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "                new SQLFieldMapping("s"' "IMDB_ID"' "ExternalId"' CustomReaders.ExternalIdReader' new ExternalSiteReaderParameters(DataReaders.ReadString' "IMDB"))' " is 148.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "                new SQLFieldMapping("s"' "BannerFileNames"' "Artwork"' CustomReaders.PreferedArtworkReader' new ArtworkReaderParameters(WebFileType.Banner' configuration["banner"]))' " is 166.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "                new SQLFieldMapping("s"' "PosterFileNames"' "Artwork"' CustomReaders.PreferedArtworkReader' new ArtworkReaderParameters(WebFileType.Poster' configuration["banner"]))' " is 166.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllTVShows,The length of the statement  "                new SQLFieldMapping(""' "fanart_list"' "Artwork"' CustomReaders.FanartArtworkReader' new ArtworkReaderParameters(WebFileType.Backdrop' configuration["fanart"]))' " is 161.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllSeasons,The length of the statement  "                new SQLFieldMapping("s"' "BannerFileNames"' "Artwork"' CustomReaders.PreferedArtworkReader' new ArtworkReaderParameters(WebFileType.Banner' configuration["banner"]))' " is 166.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllEpisodes,The length of the statement  "                    "GROUP BY e.EpisodeID' e.SeriesID' e.EpisodeName' e.EpisodeIndex' e.SeasonIndex' e.Watched' e.Rating' e.thumbFilename' " + " is 122.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllEpisodes,The length of the statement  "                new SQLFieldMapping("e"' "EpisodeID"' "ExternalId"' CustomReaders.ExternalIdReader' new ExternalSiteReaderParameters(DataReaders.ReadIntAsString' "TVDB"))' " is 155.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllEpisodes,The length of the statement  "                new SQLFieldMapping("e"' "thumbFilename"' "Artwork"' CustomReaders.ArtworkReader' new ArtworkReaderParameters(WebFileType.Banner' configuration["banner"]))' " is 156.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,GetAllEpisodes,The length of the statement  "                new SQLFieldMapping("e"' "IMDB_ID"' "ExternalId"' CustomReaders.ExternalIdReader' new ExternalSiteReaderParameters(DataReaders.ReadString' "IMDB"))' " is 148.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The length of the statement  "                    var valid = reader.ReadPipeList(2).Where(x => x.IndexOf(text' StringComparison.CurrentCultureIgnoreCase) >= 0); // contains is case sensitive " is 141.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The length of the statement  "                    episodeRegexWhere = "((os.Pretty_Name LIKE @show OR ls.Parsed_Name LIKE @show) AND e.SeasonIndex = @season AND e.EpisodeIndex = @episode)"; " is 139.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The length of the statement  "                    "SELECT e.CompositeID' e.EpisodeName' e.EpisodeIndex' e.SeasonIndex' e.SeriesID' e.GuestStars' os.Pretty_Name' MIN(ls.Parsed_Name) AS Parsed_Name " + " is 149.
Long Statement,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The length of the statement  "                    score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0); " is 124.
Complex Conditional,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The conditional expression  "episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value)"  is complex.
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,CustomReaders,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\CustomReaders.cs,FanartArtworkReader,The following statement contains a magic number: var list = ((IEnumerable<string>)DataReaders.ReadPipeList(reader' index)).Select(x =>              {                  string[] parts = x.Split('?'); // ? is used as separator between filename and rating                  string path = Path.Combine(args.DirectoryName' parts[0].Replace('/'' '\\'));                  return new WebArtworkDetailed()                  {                      Type = args.FileType'                      Path = path'                      Offset = 0'                      Filetype = Path.GetExtension(path).Substring(1)'                      Rating = String.IsNullOrEmpty(parts[1]) ? 1 :                                  (int)Math.Round(Single.Parse(parts[1].Replace('''' '.')' System.Globalization.CultureInfo.InvariantCulture) * 10)'                      Id = parts[2]                  };              }).ToList();
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,CustomReaders,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\CustomReaders.cs,FanartArtworkReader,The following statement contains a magic number: var list = ((IEnumerable<string>)DataReaders.ReadPipeList(reader' index)).Select(x =>              {                  string[] parts = x.Split('?'); // ? is used as separator between filename and rating                  string path = Path.Combine(args.DirectoryName' parts[0].Replace('/'' '\\'));                  return new WebArtworkDetailed()                  {                      Type = args.FileType'                      Path = path'                      Offset = 0'                      Filetype = Path.GetExtension(path).Substring(1)'                      Rating = String.IsNullOrEmpty(parts[1]) ? 1 :                                  (int)Math.Round(Single.Parse(parts[1].Replace('''' '.')' System.Globalization.CultureInfo.InvariantCulture) * 10)'                      Id = parts[2]                  };              }).ToList();
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,CustomReaders,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\CustomReaders.cs,PreferedArtworkReader,The following statement contains a magic number: return items.Select(filename =>              {                  if (filename.StartsWith("\\"))                      filename = filename.Substring(1);                  string path = Path.Combine(args.DirectoryName' filename.Replace('/'' '\\'));                  return new WebArtworkDetailed()                  {                      Type = args.FileType'                      Path = path'                      Offset = i++'                      Filetype = Path.GetExtension(path).Length > 0 ? Path.GetExtension(path).Substring(1) : String.Empty'                      Rating = filename == preferedItem ? 2 : 1'                      Id = path.GetHashCode().ToString()                  };              }).ToList();
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> shows = ReadList<WebSearchResult>(showSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      return new WebSearchResult()                      {                          Type = WebMediaType.TVShow'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = 40 + (int)Math.Round((decimal)text.Length / title.Length * 40)'                      };                  }' param);
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> shows = ReadList<WebSearchResult>(showSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      return new WebSearchResult()                      {                          Type = WebMediaType.TVShow'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = 40 + (int)Math.Round((decimal)text.Length / title.Length * 40)'                      };                  }' param);
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> actorShows = ReadList<WebSearchResult>(actorShowSql' delegate(SQLiteDataReader reader)                  {                      var valid = reader.ReadPipeList(2).Where(x => x.IndexOf(text' StringComparison.CurrentCultureIgnoreCase) >= 0); // contains is case sensitive                      if (valid.Count() == 0)                          return null;                      return new WebSearchResult()                      {                          Type = WebMediaType.TVShow'                          Id = reader.ReadIntAsString(0)'                          Title = reader.ReadString(1)'                          Score = valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30))                      };                  }' param);
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> actorShows = ReadList<WebSearchResult>(actorShowSql' delegate(SQLiteDataReader reader)                  {                      var valid = reader.ReadPipeList(2).Where(x => x.IndexOf(text' StringComparison.CurrentCultureIgnoreCase) >= 0); // contains is case sensitive                      if (valid.Count() == 0)                          return null;                      return new WebSearchResult()                      {                          Type = WebMediaType.TVShow'                          Id = reader.ReadIntAsString(0)'                          Title = reader.ReadString(1)'                          Score = valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30))                      };                  }' param);
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> actorShows = ReadList<WebSearchResult>(actorShowSql' delegate(SQLiteDataReader reader)                  {                      var valid = reader.ReadPipeList(2).Where(x => x.IndexOf(text' StringComparison.CurrentCultureIgnoreCase) >= 0); // contains is case sensitive                      if (valid.Count() == 0)                          return null;                      return new WebSearchResult()                      {                          Type = WebMediaType.TVShow'                          Id = reader.ReadIntAsString(0)'                          Title = reader.ReadString(1)'                          Score = valid.Max(x => 40 + (int)Math.Round((decimal)text.Length / x.Length * 30))                      };                  }' param);
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: parameters.Add(new SQLiteParameter("@season"' episodeResult.Groups[2].Value));
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: parameters.Add(new SQLiteParameter("@episode"' episodeResult.Groups[3].Value));
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> episodes = ReadList<WebSearchResult>(episodeSql' delegate(SQLiteDataReader reader)                  {                      // read the data                      string title = reader.ReadString(1);                      string showTitle = reader.ReadString(6);                      WebSearchResult result = new WebSearchResult()                      {                          Type = WebMediaType.TVEpisode'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Details = new WebDictionary<string>()                          {                              { "EpisodeNumber"' reader.ReadIntAsString(2) }'                              { "SeasonNumber"' reader.ReadIntAsString(3) }'                              { "ShowId"' reader.ReadIntAsString(4) }'                              { "ShowName"' !String.IsNullOrEmpty(showTitle) ? showTitle : reader.ReadString(7) }                          }                      };                        // title                      int score = title.Contains(text' false) ? 40 + (int)Math.Round((decimal)text.Length / title.Length * 40) : 0;                        // guest stars                      var valid = reader.ReadPipeList(5).Where(x => x.Contains(text' false)); // .Contains() is case sensitive                      score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0);                        // regex match                      if (episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value))                          score = 100;                        // set score and return                      result.Score = score;                      return result;                  }' parameters.ToArray());
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> episodes = ReadList<WebSearchResult>(episodeSql' delegate(SQLiteDataReader reader)                  {                      // read the data                      string title = reader.ReadString(1);                      string showTitle = reader.ReadString(6);                      WebSearchResult result = new WebSearchResult()                      {                          Type = WebMediaType.TVEpisode'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Details = new WebDictionary<string>()                          {                              { "EpisodeNumber"' reader.ReadIntAsString(2) }'                              { "SeasonNumber"' reader.ReadIntAsString(3) }'                              { "ShowId"' reader.ReadIntAsString(4) }'                              { "ShowName"' !String.IsNullOrEmpty(showTitle) ? showTitle : reader.ReadString(7) }                          }                      };                        // title                      int score = title.Contains(text' false) ? 40 + (int)Math.Round((decimal)text.Length / title.Length * 40) : 0;                        // guest stars                      var valid = reader.ReadPipeList(5).Where(x => x.Contains(text' false)); // .Contains() is case sensitive                      score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0);                        // regex match                      if (episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value))                          score = 100;                        // set score and return                      result.Score = score;                      return result;                  }' parameters.ToArray());
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> episodes = ReadList<WebSearchResult>(episodeSql' delegate(SQLiteDataReader reader)                  {                      // read the data                      string title = reader.ReadString(1);                      string showTitle = reader.ReadString(6);                      WebSearchResult result = new WebSearchResult()                      {                          Type = WebMediaType.TVEpisode'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Details = new WebDictionary<string>()                          {                              { "EpisodeNumber"' reader.ReadIntAsString(2) }'                              { "SeasonNumber"' reader.ReadIntAsString(3) }'                              { "ShowId"' reader.ReadIntAsString(4) }'                              { "ShowName"' !String.IsNullOrEmpty(showTitle) ? showTitle : reader.ReadString(7) }                          }                      };                        // title                      int score = title.Contains(text' false) ? 40 + (int)Math.Round((decimal)text.Length / title.Length * 40) : 0;                        // guest stars                      var valid = reader.ReadPipeList(5).Where(x => x.Contains(text' false)); // .Contains() is case sensitive                      score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0);                        // regex match                      if (episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value))                          score = 100;                        // set score and return                      result.Score = score;                      return result;                  }' parameters.ToArray());
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> episodes = ReadList<WebSearchResult>(episodeSql' delegate(SQLiteDataReader reader)                  {                      // read the data                      string title = reader.ReadString(1);                      string showTitle = reader.ReadString(6);                      WebSearchResult result = new WebSearchResult()                      {                          Type = WebMediaType.TVEpisode'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Details = new WebDictionary<string>()                          {                              { "EpisodeNumber"' reader.ReadIntAsString(2) }'                              { "SeasonNumber"' reader.ReadIntAsString(3) }'                              { "ShowId"' reader.ReadIntAsString(4) }'                              { "ShowName"' !String.IsNullOrEmpty(showTitle) ? showTitle : reader.ReadString(7) }                          }                      };                        // title                      int score = title.Contains(text' false) ? 40 + (int)Math.Round((decimal)text.Length / title.Length * 40) : 0;                        // guest stars                      var valid = reader.ReadPipeList(5).Where(x => x.Contains(text' false)); // .Contains() is case sensitive                      score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0);                        // regex match                      if (episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value))                          score = 100;                        // set score and return                      result.Score = score;                      return result;                  }' parameters.ToArray());
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> episodes = ReadList<WebSearchResult>(episodeSql' delegate(SQLiteDataReader reader)                  {                      // read the data                      string title = reader.ReadString(1);                      string showTitle = reader.ReadString(6);                      WebSearchResult result = new WebSearchResult()                      {                          Type = WebMediaType.TVEpisode'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Details = new WebDictionary<string>()                          {                              { "EpisodeNumber"' reader.ReadIntAsString(2) }'                              { "SeasonNumber"' reader.ReadIntAsString(3) }'                              { "ShowId"' reader.ReadIntAsString(4) }'                              { "ShowName"' !String.IsNullOrEmpty(showTitle) ? showTitle : reader.ReadString(7) }                          }                      };                        // title                      int score = title.Contains(text' false) ? 40 + (int)Math.Round((decimal)text.Length / title.Length * 40) : 0;                        // guest stars                      var valid = reader.ReadPipeList(5).Where(x => x.Contains(text' false)); // .Contains() is case sensitive                      score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0);                        // regex match                      if (episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value))                          score = 100;                        // set score and return                      result.Score = score;                      return result;                  }' parameters.ToArray());
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> episodes = ReadList<WebSearchResult>(episodeSql' delegate(SQLiteDataReader reader)                  {                      // read the data                      string title = reader.ReadString(1);                      string showTitle = reader.ReadString(6);                      WebSearchResult result = new WebSearchResult()                      {                          Type = WebMediaType.TVEpisode'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Details = new WebDictionary<string>()                          {                              { "EpisodeNumber"' reader.ReadIntAsString(2) }'                              { "SeasonNumber"' reader.ReadIntAsString(3) }'                              { "ShowId"' reader.ReadIntAsString(4) }'                              { "ShowName"' !String.IsNullOrEmpty(showTitle) ? showTitle : reader.ReadString(7) }                          }                      };                        // title                      int score = title.Contains(text' false) ? 40 + (int)Math.Round((decimal)text.Length / title.Length * 40) : 0;                        // guest stars                      var valid = reader.ReadPipeList(5).Where(x => x.Contains(text' false)); // .Contains() is case sensitive                      score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0);                        // regex match                      if (episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value))                          score = 100;                        // set score and return                      result.Score = score;                      return result;                  }' parameters.ToArray());
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> episodes = ReadList<WebSearchResult>(episodeSql' delegate(SQLiteDataReader reader)                  {                      // read the data                      string title = reader.ReadString(1);                      string showTitle = reader.ReadString(6);                      WebSearchResult result = new WebSearchResult()                      {                          Type = WebMediaType.TVEpisode'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Details = new WebDictionary<string>()                          {                              { "EpisodeNumber"' reader.ReadIntAsString(2) }'                              { "SeasonNumber"' reader.ReadIntAsString(3) }'                              { "ShowId"' reader.ReadIntAsString(4) }'                              { "ShowName"' !String.IsNullOrEmpty(showTitle) ? showTitle : reader.ReadString(7) }                          }                      };                        // title                      int score = title.Contains(text' false) ? 40 + (int)Math.Round((decimal)text.Length / title.Length * 40) : 0;                        // guest stars                      var valid = reader.ReadPipeList(5).Where(x => x.Contains(text' false)); // .Contains() is case sensitive                      score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0);                        // regex match                      if (episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value))                          score = 100;                        // set score and return                      result.Score = score;                      return result;                  }' parameters.ToArray());
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> episodes = ReadList<WebSearchResult>(episodeSql' delegate(SQLiteDataReader reader)                  {                      // read the data                      string title = reader.ReadString(1);                      string showTitle = reader.ReadString(6);                      WebSearchResult result = new WebSearchResult()                      {                          Type = WebMediaType.TVEpisode'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Details = new WebDictionary<string>()                          {                              { "EpisodeNumber"' reader.ReadIntAsString(2) }'                              { "SeasonNumber"' reader.ReadIntAsString(3) }'                              { "ShowId"' reader.ReadIntAsString(4) }'                              { "ShowName"' !String.IsNullOrEmpty(showTitle) ? showTitle : reader.ReadString(7) }                          }                      };                        // title                      int score = title.Contains(text' false) ? 40 + (int)Math.Round((decimal)text.Length / title.Length * 40) : 0;                        // guest stars                      var valid = reader.ReadPipeList(5).Where(x => x.Contains(text' false)); // .Contains() is case sensitive                      score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0);                        // regex match                      if (episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value))                          score = 100;                        // set score and return                      result.Score = score;                      return result;                  }' parameters.ToArray());
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> episodes = ReadList<WebSearchResult>(episodeSql' delegate(SQLiteDataReader reader)                  {                      // read the data                      string title = reader.ReadString(1);                      string showTitle = reader.ReadString(6);                      WebSearchResult result = new WebSearchResult()                      {                          Type = WebMediaType.TVEpisode'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Details = new WebDictionary<string>()                          {                              { "EpisodeNumber"' reader.ReadIntAsString(2) }'                              { "SeasonNumber"' reader.ReadIntAsString(3) }'                              { "ShowId"' reader.ReadIntAsString(4) }'                              { "ShowName"' !String.IsNullOrEmpty(showTitle) ? showTitle : reader.ReadString(7) }                          }                      };                        // title                      int score = title.Contains(text' false) ? 40 + (int)Math.Round((decimal)text.Length / title.Length * 40) : 0;                        // guest stars                      var valid = reader.ReadPipeList(5).Where(x => x.Contains(text' false)); // .Contains() is case sensitive                      score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0);                        // regex match                      if (episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value))                          score = 100;                        // set score and return                      result.Score = score;                      return result;                  }' parameters.ToArray());
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> episodes = ReadList<WebSearchResult>(episodeSql' delegate(SQLiteDataReader reader)                  {                      // read the data                      string title = reader.ReadString(1);                      string showTitle = reader.ReadString(6);                      WebSearchResult result = new WebSearchResult()                      {                          Type = WebMediaType.TVEpisode'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Details = new WebDictionary<string>()                          {                              { "EpisodeNumber"' reader.ReadIntAsString(2) }'                              { "SeasonNumber"' reader.ReadIntAsString(3) }'                              { "ShowId"' reader.ReadIntAsString(4) }'                              { "ShowName"' !String.IsNullOrEmpty(showTitle) ? showTitle : reader.ReadString(7) }                          }                      };                        // title                      int score = title.Contains(text' false) ? 40 + (int)Math.Round((decimal)text.Length / title.Length * 40) : 0;                        // guest stars                      var valid = reader.ReadPipeList(5).Where(x => x.Contains(text' false)); // .Contains() is case sensitive                      score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0);                        // regex match                      if (episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value))                          score = 100;                        // set score and return                      result.Score = score;                      return result;                  }' parameters.ToArray());
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> episodes = ReadList<WebSearchResult>(episodeSql' delegate(SQLiteDataReader reader)                  {                      // read the data                      string title = reader.ReadString(1);                      string showTitle = reader.ReadString(6);                      WebSearchResult result = new WebSearchResult()                      {                          Type = WebMediaType.TVEpisode'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Details = new WebDictionary<string>()                          {                              { "EpisodeNumber"' reader.ReadIntAsString(2) }'                              { "SeasonNumber"' reader.ReadIntAsString(3) }'                              { "ShowId"' reader.ReadIntAsString(4) }'                              { "ShowName"' !String.IsNullOrEmpty(showTitle) ? showTitle : reader.ReadString(7) }                          }                      };                        // title                      int score = title.Contains(text' false) ? 40 + (int)Math.Round((decimal)text.Length / title.Length * 40) : 0;                        // guest stars                      var valid = reader.ReadPipeList(5).Where(x => x.Contains(text' false)); // .Contains() is case sensitive                      score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0);                        // regex match                      if (episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value))                          score = 100;                        // set score and return                      result.Score = score;                      return result;                  }' parameters.ToArray());
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> episodes = ReadList<WebSearchResult>(episodeSql' delegate(SQLiteDataReader reader)                  {                      // read the data                      string title = reader.ReadString(1);                      string showTitle = reader.ReadString(6);                      WebSearchResult result = new WebSearchResult()                      {                          Type = WebMediaType.TVEpisode'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Details = new WebDictionary<string>()                          {                              { "EpisodeNumber"' reader.ReadIntAsString(2) }'                              { "SeasonNumber"' reader.ReadIntAsString(3) }'                              { "ShowId"' reader.ReadIntAsString(4) }'                              { "ShowName"' !String.IsNullOrEmpty(showTitle) ? showTitle : reader.ReadString(7) }                          }                      };                        // title                      int score = title.Contains(text' false) ? 40 + (int)Math.Round((decimal)text.Length / title.Length * 40) : 0;                        // guest stars                      var valid = reader.ReadPipeList(5).Where(x => x.Contains(text' false)); // .Contains() is case sensitive                      score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0);                        // regex match                      if (episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value))                          score = 100;                        // set score and return                      result.Score = score;                      return result;                  }' parameters.ToArray());
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: IEnumerable<WebSearchResult> episodes = ReadList<WebSearchResult>(episodeSql' delegate(SQLiteDataReader reader)                  {                      // read the data                      string title = reader.ReadString(1);                      string showTitle = reader.ReadString(6);                      WebSearchResult result = new WebSearchResult()                      {                          Type = WebMediaType.TVEpisode'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Details = new WebDictionary<string>()                          {                              { "EpisodeNumber"' reader.ReadIntAsString(2) }'                              { "SeasonNumber"' reader.ReadIntAsString(3) }'                              { "ShowId"' reader.ReadIntAsString(4) }'                              { "ShowName"' !String.IsNullOrEmpty(showTitle) ? showTitle : reader.ReadString(7) }                          }                      };                        // title                      int score = title.Contains(text' false) ? 40 + (int)Math.Round((decimal)text.Length / title.Length * 40) : 0;                        // guest stars                      var valid = reader.ReadPipeList(5).Where(x => x.Contains(text' false)); // .Contains() is case sensitive                      score = Math.Max(score' valid.Count() > 0 ? valid.Max(x => 20 + (int)Math.Round((decimal)text.Length / x.Length * 40)) : 0);                        // regex match                      if (episodeResult.Success &&                             (result.Details["ShowName"].Contains(episodeResult.Groups[1].Value.Trim()' false) &&                              result.Details["SeasonNumber"] == episodeResult.Groups[2].Value &&                              result.Details["EpisodeNumber"] == episodeResult.Groups[3].Value))                          score = 100;                        // set score and return                      result.Score = score;                      return result;                  }' parameters.ToArray());
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: episodes = episodes.Select(x =>                      {                          if (x.Score == 100)                              x.Score = 95;                          return x;                      });
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: episodes = episodes.Select(x =>                      {                          if (x.Score == 100)                              x.Score = 95;                          return x;                      });
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: episodes.Count(x => x.Score == 100) > 1
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: results = ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)                      {                          string showTitle = !String.IsNullOrEmpty(reader.ReadString(3)) ? reader.ReadString(3) : reader.ReadString(4);                          return new WebSearchResult()                          {                              Type = WebMediaType.TVSeason'                              Id = reader.ReadString(0)'                              Title = showTitle + " (season " + reader.ReadInt32(1) + ")"'                              Score = 100'                              Details = new WebDictionary<string>()                          {                              { "SeasonNumber"' reader.ReadIntAsString(1) }'                              { "ShowId"' reader.ReadIntAsString(2) }'                              { "ShowName"' showTitle }                          }                          };                      }' new SQLiteParameter("@show"' seasonResult.Groups[1].Value.Trim())'                         new SQLiteParameter("@season"' seasonResult.Groups[2].Value))                           .Concat(results);
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: results = ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)                      {                          string showTitle = !String.IsNullOrEmpty(reader.ReadString(3)) ? reader.ReadString(3) : reader.ReadString(4);                          return new WebSearchResult()                          {                              Type = WebMediaType.TVSeason'                              Id = reader.ReadString(0)'                              Title = showTitle + " (season " + reader.ReadInt32(1) + ")"'                              Score = 100'                              Details = new WebDictionary<string>()                          {                              { "SeasonNumber"' reader.ReadIntAsString(1) }'                              { "ShowId"' reader.ReadIntAsString(2) }'                              { "ShowName"' showTitle }                          }                          };                      }' new SQLiteParameter("@show"' seasonResult.Groups[1].Value.Trim())'                         new SQLiteParameter("@season"' seasonResult.Groups[2].Value))                           .Concat(results);
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: results = ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)                      {                          string showTitle = !String.IsNullOrEmpty(reader.ReadString(3)) ? reader.ReadString(3) : reader.ReadString(4);                          return new WebSearchResult()                          {                              Type = WebMediaType.TVSeason'                              Id = reader.ReadString(0)'                              Title = showTitle + " (season " + reader.ReadInt32(1) + ")"'                              Score = 100'                              Details = new WebDictionary<string>()                          {                              { "SeasonNumber"' reader.ReadIntAsString(1) }'                              { "ShowId"' reader.ReadIntAsString(2) }'                              { "ShowName"' showTitle }                          }                          };                      }' new SQLiteParameter("@show"' seasonResult.Groups[1].Value.Trim())'                         new SQLiteParameter("@season"' seasonResult.Groups[2].Value))                           .Concat(results);
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: results = ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)                      {                          string showTitle = !String.IsNullOrEmpty(reader.ReadString(3)) ? reader.ReadString(3) : reader.ReadString(4);                          return new WebSearchResult()                          {                              Type = WebMediaType.TVSeason'                              Id = reader.ReadString(0)'                              Title = showTitle + " (season " + reader.ReadInt32(1) + ")"'                              Score = 100'                              Details = new WebDictionary<string>()                          {                              { "SeasonNumber"' reader.ReadIntAsString(1) }'                              { "ShowId"' reader.ReadIntAsString(2) }'                              { "ShowName"' showTitle }                          }                          };                      }' new SQLiteParameter("@show"' seasonResult.Groups[1].Value.Trim())'                         new SQLiteParameter("@season"' seasonResult.Groups[2].Value))                           .Concat(results);
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: results = ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)                      {                          string showTitle = !String.IsNullOrEmpty(reader.ReadString(3)) ? reader.ReadString(3) : reader.ReadString(4);                          return new WebSearchResult()                          {                              Type = WebMediaType.TVSeason'                              Id = reader.ReadString(0)'                              Title = showTitle + " (season " + reader.ReadInt32(1) + ")"'                              Score = 100'                              Details = new WebDictionary<string>()                          {                              { "SeasonNumber"' reader.ReadIntAsString(1) }'                              { "ShowId"' reader.ReadIntAsString(2) }'                              { "ShowName"' showTitle }                          }                          };                      }' new SQLiteParameter("@show"' seasonResult.Groups[1].Value.Trim())'                         new SQLiteParameter("@season"' seasonResult.Groups[2].Value))                           .Concat(results);
Magic Number,MPExtended.PlugIns.MAS.MPTVSeries,MPTVSeries,C:\research\architectureSmells\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPTVSeries\MPTVSeries.cs,Search,The following statement contains a magic number: results = ReadList<WebSearchResult>(sql' delegate(SQLiteDataReader reader)                      {                          string showTitle = !String.IsNullOrEmpty(reader.ReadString(3)) ? reader.ReadString(3) : reader.ReadString(4);                          return new WebSearchResult()                          {                              Type = WebMediaType.TVSeason'                              Id = reader.ReadString(0)'                              Title = showTitle + " (season " + reader.ReadInt32(1) + ")"'                              Score = 100'                              Details = new WebDictionary<string>()                          {                              { "SeasonNumber"' reader.ReadIntAsString(1) }'                              { "ShowId"' reader.ReadIntAsString(2) }'                              { "ShowName"' showTitle }                          }                          };                      }' new SQLiteParameter("@show"' seasonResult.Groups[1].Value.Trim())'                         new SQLiteParameter("@season"' seasonResult.Groups[2].Value))                           .Concat(results);
