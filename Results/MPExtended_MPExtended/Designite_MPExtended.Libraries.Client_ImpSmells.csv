Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MPExtended.Libraries.Client,ServiceAddressSet,C:\repos\MPExtended_MPExtended\Libraries\MPExtended.Libraries.Client\ServiceAddressSet.cs,ServiceAddressSet,The method has 5 parameters. Parameters: mas' masstream' tas' tasstream' uss
Long Parameter List,MPExtended.Libraries.Client,ServiceSet,C:\repos\MPExtended_MPExtended\Libraries\MPExtended.Libraries.Client\ServiceSet.cs,CreateConnection,The method has 5 parameters. Parameters: address' service' username' password' streamConnection
Long Statement,MPExtended.Libraries.Client,ConnectionFactory<TService>,C:\repos\MPExtended_MPExtended\Libraries\MPExtended.Libraries.Client\ConnectionFactory.cs,UsePipeBinding,The length of the statement  "            return address == "127.0.0.1" || address == "localhost" || address.StartsWith("127.0.0.1:") || address.StartsWith("localhost:"); " is 128.
Empty Catch Block,MPExtended.Libraries.Client,ConnectionFactory,C:\repos\MPExtended_MPExtended\Libraries\MPExtended.Libraries.Client\ConnectionFactoryStatic.cs,DisposeConnection,The method has an empty catch block.
Magic Number,MPExtended.Libraries.Client,ConnectionFactory,C:\repos\MPExtended_MPExtended\Libraries\MPExtended.Libraries.Client\ConnectionFactoryStatic.cs,DisposeConnection,The following statement contains a magic number: try              {                  if (connection != null && connection is ICommunicationObject)                      (connection as ICommunicationObject).Close(TimeSpan.FromMilliseconds(350));              }              catch (Exception)              {                  // Just ignore it' we're trying to get rid of the connection anyway              }
Magic Number,MPExtended.Libraries.Client,ServiceDiscoverer,C:\repos\MPExtended_MPExtended\Libraries\MPExtended.Libraries.Client\ServiceDiscoverer.cs,CreateMeta,The following statement contains a magic number: try              {                  BasicHttpBinding binding = new BasicHttpBinding()                  {                      MaxReceivedMessageSize = 100000000'                        OpenTimeout = TimeSpan.FromMilliseconds(CONNECT_TIMEOUT)'                      SendTimeout = TimeSpan.FromMilliseconds(READ_TIMEOUT)'                      ReceiveTimeout = TimeSpan.FromMilliseconds(READ_TIMEOUT)'                      CloseTimeout = TimeSpan.FromMilliseconds(CONNECT_TIMEOUT)'                  };                    ChannelFactory<IMetaService> factory = new ChannelFactory<IMetaService>(                      binding'                      new EndpointAddress(rootAddress + "MPExtended/MetaService")                  );                    IMetaService channel = factory.CreateChannel();                  if (!channel.TestConnection())                  {                      return null;                  }                    return channel;              }              catch (Exception)              {                  return null;              }
