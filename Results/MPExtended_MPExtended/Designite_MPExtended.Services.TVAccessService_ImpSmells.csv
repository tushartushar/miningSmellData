Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MPExtended.Services.TVAccessService,LogoDownloader,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\LogoDownloader.cs,PerformCheck,Cyclomatic complexity of the method is 8
Complex Method,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,Search,Cyclomatic complexity of the method is 8
Complex Method,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,EditSchedule,Cyclomatic complexity of the method is 10
Long Parameter List,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,AddSchedule,The method has 5 parameters. Parameters: channelId' title' startTime' endTime' scheduleType
Long Parameter List,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,AddScheduleDetailed,The method has 9 parameters. Parameters: channelId' title' startTime' endTime' scheduleType' preRecordInterval' postRecordInterval' directory' priority
Long Parameter List,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetSchedulesByRange,The method has 5 parameters. Parameters: start' end' filter' sort' order
Long Parameter List,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,EditSchedule,The method has 10 parameters. Parameters: scheduleId' channelId' title' startTime' endTime' scheduleType' preRecordInterval' postRecordInterval' directory' priority
Long Parameter List,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetGroupsByRange,The method has 5 parameters. Parameters: start' end' filter' sort' order
Long Parameter List,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetChannelsBasicByRange,The method has 6 parameters. Parameters: start' end' groupId' filter' sort' order
Long Parameter List,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetChannelsDetailedByRange,The method has 6 parameters. Parameters: start' end' groupId' filter' sort' order
Long Parameter List,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetRadioGroupsByRange,The method has 5 parameters. Parameters: start' end' filter' sort' order
Long Parameter List,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetRadioChannelsBasicByRange,The method has 6 parameters. Parameters: start' end' groupId' filter' sort' order
Long Parameter List,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetRadioChannelsDetailedByRange,The method has 6 parameters. Parameters: start' end' groupId' filter' sort' order
Long Parameter List,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetRecordingsByRange,The method has 5 parameters. Parameters: start' end' filter' sort' order
Long Statement,MPExtended.Services.TVAccessService,IEnumerableExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\EnumerableExtensionMethods.cs,SortChannelList,The length of the statement  "                    // - The order in which the channels are in a group (SortOrder field in GroupMap table). This isn't exposed as a property " is 121.
Long Statement,MPExtended.Services.TVAccessService,WebCardExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebCard,The length of the statement  "            // See TvEngine3/TVLibrary/TvService/Scheduler/Scheduler.cs:1295 (SetupRecordingFolder) for the default fallback paths from MP " is 126.
Long Statement,MPExtended.Services.TVAccessService,WebCardExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebCard,The length of the statement  "                    Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData)' "Team MediaPortal"' "MediaPortal TV Server"' "recordings")' " is 148.
Long Statement,MPExtended.Services.TVAccessService,WebCardExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebCard,The length of the statement  "                    Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData)' "Team MediaPortal"' "MediaPortal TV Server"' "timeshiftbuffer")' " is 153.
Long Statement,MPExtended.Services.TVAccessService,WebChannelExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,GetFreeToAirInformation,The length of the statement  "            // if the channel is available on more than one frequency' check if it is available only free to air' only scrambled or both " is 124.
Long Statement,MPExtended.Services.TVAccessService,WebProgramExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,CacheSchedules,The length of the statement  "            return new CacheLifetimeToken<IEnumerable<Schedule>>(val => AllSchedules = val' () => AllSchedules = Schedule.ListAll()); " is 121.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,Search,The length of the statement  "                        Score = (int)Math.Round(((decimal)text.Length / program.Title.Length * 50) - Math.Abs((decimal)(program.StartTime - DateTime.Now).TotalDays))' " is 142.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,AddScheduleDetailed,The length of the statement  "                Log.Debug("Adding schedule on channel {0} for {1}' {2} till {3}' type {4}"' channelId' title' startTime' endTime' scheduleType); " is 128.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,AddScheduleDetailed,The length of the statement  "                schedule.PreRecordInterval = preRecordInterval >= 0 ? preRecordInterval : Int32.Parse(_tvBusiness.GetSetting("preRecordInterval"' "5").Value); " is 142.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,AddScheduleDetailed,The length of the statement  "                schedule.PostRecordInterval = postRecordInterval >= 0 ? postRecordInterval : Int32.Parse(_tvBusiness.GetSetting("postRecordInterval"' "5").Value); " is 146.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetSchedulesByRange,The length of the statement  "            return Schedule.ListAll().Select(s => s.ToWebSchedule()).Filter(filter).SortScheduleList(sort' order).TakeRange(start' end).ToList(); " is 133.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,EditSchedule,The length of the statement  "                Log.Debug("Editing schedule {0} on channel {1} for {2}' {3} till {4}' type {5}"' scheduleId' channelId' title' startTime' endTime' scheduleType); " is 145.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetScheduledRecording,The length of the statement  "            if ((type == ScheduleRecordingType.Weekends && !(date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)) || " is 128.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetScheduledRecording,The length of the statement  "                (type == ScheduleRecordingType.WorkingDays && (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)) || " is 126.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetScheduledRecording,The length of the statement  "            ScheduleRecordingType[] noEpgTypes = { ScheduleRecordingType.Daily' ScheduleRecordingType.Weekends' ScheduleRecordingType.WorkingDays'  " is 134.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetScheduledRecording,The length of the statement  "            var program = programs.FirstOrDefault(x => x.Title == schedule.ProgramName && (x.StartTime > DateTime.Now || date.Date < DateTime.Today)); " is 138.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetScheduledRecordingsForDate,The length of the statement  "            return Schedule.ListAll().Select(x => GetScheduledRecording(x' date)).Where(x => x != null).Filter(filter).SortScheduledRecordingList(sort' order).ToList(); " is 156.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetGroups,The length of the statement  "            return ChannelGroup.ListAll().Select(chg => chg.ToWebChannelGroup()).Filter(filter).SortGroupList(sort' order).ToList(); " is 120.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetGroupsByRange,The length of the statement  "            return ChannelGroup.ListAll().Select(chg => chg.ToWebChannelGroup()).Filter(filter).SortGroupList(sort' order).TakeRange(start' end).ToList(); " is 142.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetChannels,The length of the statement  "                (IEnumerable<Channel>)Channel.ListAll().Where(ch => ch.IsTv).OrderBy(ch => sort == WebSortField.User ? ch.SortOrder : 1' order) : " is 129.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetChannelsBasic,The length of the statement  "            return GetChannels(groupId' sort' order).Select(ch => ch.ToWebChannelBasic()).Filter(filter).SortChannelList(sort' order).ToList(); " is 131.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetChannelsBasicByRange,The length of the statement  "            return GetChannels(groupId' sort' order).Select(ch => ch.ToWebChannelBasic()).Filter(filter).SortChannelList(sort' order).TakeRange(start' end).ToList(); " is 153.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetChannelsDetailed,The length of the statement  "            return GetChannels(groupId' sort' order).Select(ch => ch.ToWebChannelDetailed()).Filter(filter).SortChannelList(sort' order).ToList(); " is 134.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetChannelsDetailedByRange,The length of the statement  "            return GetChannels(groupId' sort' order).Select(ch => ch.ToWebChannelDetailed()).Filter(filter).SortChannelList(sort' order).TakeRange(start' end).ToList(); " is 156.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetAllChannelStatesForGroup,The length of the statement  "            Dictionary<int' ChannelState> channelStates = _tvControl.GetAllChannelStatesForGroup(groupId' GetUserByUserName(userName' true)); " is 129.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetRadioGroups,The length of the statement  "            return RadioChannelGroup.ListAll().Select(chg => chg.ToWebChannelGroup()).Filter(filter).SortGroupList(sort' order).ToList(); " is 125.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetRadioGroupsByRange,The length of the statement  "            return RadioChannelGroup.ListAll().Select(chg => chg.ToWebChannelGroup()).Filter(filter).SortGroupList(sort' order).TakeRange(start' end).ToList(); " is 147.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetRadioChannels,The length of the statement  "                (IEnumerable<Channel>)Channel.ListAll().Where(ch => ch.IsRadio).OrderBy(ch => sort == WebSortField.User ? ch.SortOrder : 1' order) : " is 132.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetRadioChannelsBasic,The length of the statement  "            return GetRadioChannels(groupId' sort' order).Select(ch => ch.ToWebChannelBasic()).Filter(filter).SortChannelList(sort' order).ToList(); " is 136.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetRadioChannelsBasicByRange,The length of the statement  "            return GetRadioChannels(groupId' sort' order).Select(ch => ch.ToWebChannelBasic()).Filter(filter).SortChannelList(sort' order).TakeRange(start' end).ToList(); " is 158.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetRadioChannelsDetailed,The length of the statement  "            return GetRadioChannels(groupId' sort' order).Select(ch => ch.ToWebChannelDetailed()).Filter(filter).SortChannelList(sort' order).ToList(); " is 139.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetRadioChannelsDetailedByRange,The length of the statement  "            return GetRadioChannels(groupId' sort' order).Select(ch => ch.ToWebChannelDetailed()).Filter(filter).SortChannelList(sort' order).TakeRange(start' end).ToList(); " is 161.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetRecordingsByRange,The length of the statement  "            return Recording.ListAll().Select(rec => rec.ToWebRecording()).Filter(filter).SortRecordingList(sort' order).TakeRange(start' end).ToList(); " is 140.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetProgramsBasicForChannel,The length of the statement  "                return _tvBusiness.GetPrograms(Channel.Retrieve(channelId)' startTime' endTime).Select(p => p.ToWebProgramBasic()).Filter(filter).ToList(); " is 139.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetProgramsDetailedForChannel,The length of the statement  "                return _tvBusiness.GetPrograms(Channel.Retrieve(channelId)' startTime' endTime).Select(p => p.ToWebProgramDetailed()).Filter(filter).ToList(); " is 142.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetProgramsDetailedForGroup,The length of the statement  "                        Programs = _tvBusiness.GetPrograms(ch' startTime' endTime).Select(p => p.ToWebProgramDetailed()).Filter(filter).ToList() " is 120.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,SearchProgramsDetailedByRange,The length of the statement  "            return _tvBusiness.SearchPrograms(searchTerm).Select(p => p.ToWebProgramDetailed()).Filter(filter).TakeRange(start' end).ToList(); " is 130.
Long Statement,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,SearchProgramsBasicByRange,The length of the statement  "            return _tvBusiness.SearchPrograms(searchTerm).Select(p => p.ToWebProgramBasic()).Filter(filter).TakeRange(start' end).ToList(); " is 127.
Complex Conditional,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,GetScheduledRecording,The conditional expression  "(type == ScheduleRecordingType.Weekends && !(date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)) ||                  (type == ScheduleRecordingType.WorkingDays && (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)) ||                  (type == ScheduleRecordingType.Weekly && schedule.StartTime.DayOfWeek != date.DayOfWeek) ||                  (type == ScheduleRecordingType.Once && schedule.StartTime.Date != date.Date) ||                  (type == ScheduleRecordingType.WeeklyEveryTimeOnThisChannel && schedule.StartTime.Date != date.Date)"  is complex.
Complex Conditional,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,ReadRecordingFile,The conditional expression  "info.Exists && info.IsLocalFile && !info.OnNetworkDrive && File.Exists(info.Path)"  is complex.
Magic Number,MPExtended.Services.TVAccessService,LogoDownloader,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\LogoDownloader.cs,Init,The following statement contains a magic number: backgroundTimer = new Timer()              {                  AutoReset = true'                  Interval = 60 * 60 * 1000'              };
Magic Number,MPExtended.Services.TVAccessService,LogoDownloader,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\LogoDownloader.cs,Init,The following statement contains a magic number: backgroundTimer = new Timer()              {                  AutoReset = true'                  Interval = 60 * 60 * 1000'              };
Magic Number,MPExtended.Services.TVAccessService,LogoDownloader,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\LogoDownloader.cs,Init,The following statement contains a magic number: backgroundTimer = new Timer()              {                  AutoReset = true'                  Interval = 60 * 60 * 1000'              };
Magic Number,MPExtended.Services.TVAccessService,LogoDownloader,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\LogoDownloader.cs,PerformCheck,The following statement contains a magic number: discoverer.DiscoverSets(TimeSpan.FromSeconds(15))
Magic Number,MPExtended.Services.TVAccessService,WebCardExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebCard,The following statement contains a magic number: return new WebCard              {                  CAM = card.CAM'                  CamType = card.CamType'                  DecryptLimit = card.DecryptLimit'                  DevicePath = card.DevicePath'                  Enabled = card.Enabled'                  GrabEPG = card.GrabEPG'                  Id = card.IdCard'                  IsChanged = card.IsChanged'                  LastEpgGrab = card.LastEpgGrab != DateTime.MinValue ? card.LastEpgGrab : new DateTime(2000' 1' 1)'                  Name = card.Name'                  NetProvider = card.netProvider'                  PreloadCard = card.PreloadCard'                  Priority = card.Priority'                  RecordingFolder = card.RecordingFolder != String.Empty ? card.RecordingFolder :                       Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData)' "Team MediaPortal"' "MediaPortal TV Server"' "recordings")'                  RecordingFormat = card.RecordingFormat'                  SupportSubChannels = card.supportSubChannels'                  TimeShiftFolder = card.TimeShiftFolder != String.Empty ? card.TimeShiftFolder :                      Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData)' "Team MediaPortal"' "MediaPortal TV Server"' "timeshiftbuffer")'              };
Magic Number,MPExtended.Services.TVAccessService,WebVirtualCardExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebVirtualCard,The following statement contains a magic number: return new WebVirtualCard              {                  BitRateMode = (int)card.BitRateMode'                  ChannelName = card.ChannelName'                  Device = card.Device'                  Enabled = card.Enabled'                  GetTimeshiftStoppedReason = (int)card.GetTimeshiftStoppedReason'                  GrabTeletext = card.GrabTeletext'                  HasTeletext = card.HasTeletext'                  Id = card.Id'                  ChannelId = card.IdChannel'                  IsGrabbingEpg = card.IsGrabbingEpg'                  IsRecording = card.IsRecording'                  IsScanning = card.IsScanning'                  IsScrambled = card.IsScrambled'                  IsTimeShifting = card.IsTimeShifting'                  IsTunerLocked = card.IsTunerLocked'                  MaxChannel = card.MaxChannel'                  MinChannel = card.MinChannel'                  Name = card.Name'                  QualityType = (int)card.QualityType'                  RecordingFileName = card.RecordingFileName'                  RecordingFolder = card.RecordingFolder'                  RecordingFormat = card.RecordingFormat'                  RecordingScheduleId = card.RecordingScheduleId'                  RecordingStarted = card.RecordingStarted != DateTime.MinValue ? card.RecordingStarted : new DateTime(2000' 1' 1)'                  RemoteServer = card.RemoteServer'                  RTSPUrl = card.RTSPUrl'                  SignalLevel = card.SignalLevel'                  SignalQuality = card.SignalQuality'                  TimeShiftFileName = card.TimeShiftFileName'                  TimeShiftFolder = card.TimeshiftFolder'                  TimeShiftStarted = card.TimeShiftStarted != DateTime.MinValue ? card.TimeShiftStarted : new DateTime(2000' 1' 1)'                  Type = (WebCardType)card.Type'                  User = card.User != null ? card.User.ToWebUser() : null              };
Magic Number,MPExtended.Services.TVAccessService,WebVirtualCardExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebVirtualCard,The following statement contains a magic number: return new WebVirtualCard              {                  BitRateMode = (int)card.BitRateMode'                  ChannelName = card.ChannelName'                  Device = card.Device'                  Enabled = card.Enabled'                  GetTimeshiftStoppedReason = (int)card.GetTimeshiftStoppedReason'                  GrabTeletext = card.GrabTeletext'                  HasTeletext = card.HasTeletext'                  Id = card.Id'                  ChannelId = card.IdChannel'                  IsGrabbingEpg = card.IsGrabbingEpg'                  IsRecording = card.IsRecording'                  IsScanning = card.IsScanning'                  IsScrambled = card.IsScrambled'                  IsTimeShifting = card.IsTimeShifting'                  IsTunerLocked = card.IsTunerLocked'                  MaxChannel = card.MaxChannel'                  MinChannel = card.MinChannel'                  Name = card.Name'                  QualityType = (int)card.QualityType'                  RecordingFileName = card.RecordingFileName'                  RecordingFolder = card.RecordingFolder'                  RecordingFormat = card.RecordingFormat'                  RecordingScheduleId = card.RecordingScheduleId'                  RecordingStarted = card.RecordingStarted != DateTime.MinValue ? card.RecordingStarted : new DateTime(2000' 1' 1)'                  RemoteServer = card.RemoteServer'                  RTSPUrl = card.RTSPUrl'                  SignalLevel = card.SignalLevel'                  SignalQuality = card.SignalQuality'                  TimeShiftFileName = card.TimeShiftFileName'                  TimeShiftFolder = card.TimeshiftFolder'                  TimeShiftStarted = card.TimeShiftStarted != DateTime.MinValue ? card.TimeShiftStarted : new DateTime(2000' 1' 1)'                  Type = (WebCardType)card.Type'                  User = card.User != null ? card.User.ToWebUser() : null              };
Magic Number,MPExtended.Services.TVAccessService,WebUserExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebUser,The following statement contains a magic number: return new WebUser              {                  CardId = user.CardId'                  HeartBeat = user.HeartBeat != DateTime.MinValue ? user.HeartBeat : new DateTime(2000' 1' 1)'                  ChannelId = user.IdChannel'                  IsAdmin = user.IsAdmin'                  Name = user.Name'                  SubChannel = user.SubChannel'                  TvStoppedReason = (int)user.TvStoppedReason              };
Magic Number,MPExtended.Services.TVAccessService,WebChannelExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebChannelDetailed,The following statement contains a magic number: return new WebChannelDetailed              {                  CurrentProgram = ch.CurrentProgram != null ? ch.CurrentProgram.ToWebProgramDetailed() : null'                  Title = ch.DisplayName.Trim()'                  EpgHasGaps = ch.EpgHasGaps'                  ExternalId = ch.ExternalId'                  FreeToAir = GetFreeToAirInformation(ch)'                  GrabEpg = ch.GrabEpg'                  GroupNames = ch.GroupNames'                  Id = ch.IdChannel'                  IsChanged = ch.IsChanged'                  IsRadio = ch.IsRadio'                  IsTv = ch.IsTv'                  LastGrabTime = ch.LastGrabTime != DateTime.MinValue ? ch.LastGrabTime : new DateTime(2000' 1' 1)'                  NextProgram = ch.NextProgram != null ? ch.NextProgram.ToWebProgramDetailed() : null'                  TimesWatched = ch.TimesWatched'                  TotalTimeWatched = ch.TotalTimeWatched != DateTime.MinValue ? ch.TotalTimeWatched : new DateTime(2000' 1' 1)'                  VisibleInGuide = ch.VisibleInGuide              };
Magic Number,MPExtended.Services.TVAccessService,WebChannelExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebChannelDetailed,The following statement contains a magic number: return new WebChannelDetailed              {                  CurrentProgram = ch.CurrentProgram != null ? ch.CurrentProgram.ToWebProgramDetailed() : null'                  Title = ch.DisplayName.Trim()'                  EpgHasGaps = ch.EpgHasGaps'                  ExternalId = ch.ExternalId'                  FreeToAir = GetFreeToAirInformation(ch)'                  GrabEpg = ch.GrabEpg'                  GroupNames = ch.GroupNames'                  Id = ch.IdChannel'                  IsChanged = ch.IsChanged'                  IsRadio = ch.IsRadio'                  IsTv = ch.IsTv'                  LastGrabTime = ch.LastGrabTime != DateTime.MinValue ? ch.LastGrabTime : new DateTime(2000' 1' 1)'                  NextProgram = ch.NextProgram != null ? ch.NextProgram.ToWebProgramDetailed() : null'                  TimesWatched = ch.TimesWatched'                  TotalTimeWatched = ch.TotalTimeWatched != DateTime.MinValue ? ch.TotalTimeWatched : new DateTime(2000' 1' 1)'                  VisibleInGuide = ch.VisibleInGuide              };
Magic Number,MPExtended.Services.TVAccessService,WebChannelExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,GetFreeToAirInformation,The following statement contains a magic number: return 2;
Magic Number,MPExtended.Services.TVAccessService,WebProgramExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebProgramDetailed,The following statement contains a magic number: return new WebProgramDetailed              {                  Classification = p.Classification'                  Description = p.Description'                  EndTime = p.EndTime != DateTime.MinValue ? p.EndTime : new DateTime(2000' 1' 1)'                  EpisodeName = p.EpisodeName'                  EpisodeNum = p.EpisodeNum'                  EpisodeNumber = p.EpisodeNumber'                  EpisodePart = p.EpisodePart'                  Genre = p.Genre'                  HasConflict = p.HasConflict'                  ChannelId = p.IdChannel'                  Id = p.IdProgram'                  IsChanged = p.IsChanged'                  IsPartialRecordingSeriesPending = p.IsPartialRecordingSeriesPending'                  IsRecording = p.IsRecording'                  IsRecordingManual = p.IsRecordingManual'                  IsRecordingOnce = p.IsRecordingOnce'                  IsRecordingOncePending = p.IsRecordingOncePending'                  IsRecordingSeries = p.IsRecordingSeries'                  IsRecordingSeriesPending = p.IsRecordingSeriesPending'                  Notify = p.Notify'                  OriginalAirDate = p.OriginalAirDate != DateTime.MinValue ? p.OriginalAirDate : new DateTime(2000' 1' 1)'                  ParentalRating = p.ParentalRating'                  SeriesNum = p.SeriesNum'                  StarRating = p.StarRating'                  StartTime = p.StartTime != DateTime.MinValue ? p.StartTime : new DateTime(2000' 1' 1)'                  Title = p.Title'                  DurationInMinutes = (int)((p.EndTime - p.StartTime).TotalMinutes)'                  IsScheduled = (AllSchedules == null ? Schedule.ListAll() : AllSchedules)                                      .Where(schedule => schedule.IdChannel == p.IdChannel && schedule.IsRecordingProgram(p' true)).Count() > 0              };
Magic Number,MPExtended.Services.TVAccessService,WebProgramExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebProgramDetailed,The following statement contains a magic number: return new WebProgramDetailed              {                  Classification = p.Classification'                  Description = p.Description'                  EndTime = p.EndTime != DateTime.MinValue ? p.EndTime : new DateTime(2000' 1' 1)'                  EpisodeName = p.EpisodeName'                  EpisodeNum = p.EpisodeNum'                  EpisodeNumber = p.EpisodeNumber'                  EpisodePart = p.EpisodePart'                  Genre = p.Genre'                  HasConflict = p.HasConflict'                  ChannelId = p.IdChannel'                  Id = p.IdProgram'                  IsChanged = p.IsChanged'                  IsPartialRecordingSeriesPending = p.IsPartialRecordingSeriesPending'                  IsRecording = p.IsRecording'                  IsRecordingManual = p.IsRecordingManual'                  IsRecordingOnce = p.IsRecordingOnce'                  IsRecordingOncePending = p.IsRecordingOncePending'                  IsRecordingSeries = p.IsRecordingSeries'                  IsRecordingSeriesPending = p.IsRecordingSeriesPending'                  Notify = p.Notify'                  OriginalAirDate = p.OriginalAirDate != DateTime.MinValue ? p.OriginalAirDate : new DateTime(2000' 1' 1)'                  ParentalRating = p.ParentalRating'                  SeriesNum = p.SeriesNum'                  StarRating = p.StarRating'                  StartTime = p.StartTime != DateTime.MinValue ? p.StartTime : new DateTime(2000' 1' 1)'                  Title = p.Title'                  DurationInMinutes = (int)((p.EndTime - p.StartTime).TotalMinutes)'                  IsScheduled = (AllSchedules == null ? Schedule.ListAll() : AllSchedules)                                      .Where(schedule => schedule.IdChannel == p.IdChannel && schedule.IsRecordingProgram(p' true)).Count() > 0              };
Magic Number,MPExtended.Services.TVAccessService,WebProgramExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebProgramDetailed,The following statement contains a magic number: return new WebProgramDetailed              {                  Classification = p.Classification'                  Description = p.Description'                  EndTime = p.EndTime != DateTime.MinValue ? p.EndTime : new DateTime(2000' 1' 1)'                  EpisodeName = p.EpisodeName'                  EpisodeNum = p.EpisodeNum'                  EpisodeNumber = p.EpisodeNumber'                  EpisodePart = p.EpisodePart'                  Genre = p.Genre'                  HasConflict = p.HasConflict'                  ChannelId = p.IdChannel'                  Id = p.IdProgram'                  IsChanged = p.IsChanged'                  IsPartialRecordingSeriesPending = p.IsPartialRecordingSeriesPending'                  IsRecording = p.IsRecording'                  IsRecordingManual = p.IsRecordingManual'                  IsRecordingOnce = p.IsRecordingOnce'                  IsRecordingOncePending = p.IsRecordingOncePending'                  IsRecordingSeries = p.IsRecordingSeries'                  IsRecordingSeriesPending = p.IsRecordingSeriesPending'                  Notify = p.Notify'                  OriginalAirDate = p.OriginalAirDate != DateTime.MinValue ? p.OriginalAirDate : new DateTime(2000' 1' 1)'                  ParentalRating = p.ParentalRating'                  SeriesNum = p.SeriesNum'                  StarRating = p.StarRating'                  StartTime = p.StartTime != DateTime.MinValue ? p.StartTime : new DateTime(2000' 1' 1)'                  Title = p.Title'                  DurationInMinutes = (int)((p.EndTime - p.StartTime).TotalMinutes)'                  IsScheduled = (AllSchedules == null ? Schedule.ListAll() : AllSchedules)                                      .Where(schedule => schedule.IdChannel == p.IdChannel && schedule.IsRecordingProgram(p' true)).Count() > 0              };
Magic Number,MPExtended.Services.TVAccessService,WebProgramExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebProgramBasic,The following statement contains a magic number: return new WebProgramBasic              {                  Description = p.Description'                  EndTime = p.EndTime != DateTime.MinValue ? p.EndTime : new DateTime(2000' 1' 1)'                  ChannelId = p.IdChannel'                  Id = p.IdProgram'                  StartTime = p.StartTime != DateTime.MinValue ? p.StartTime : new DateTime(2000' 1' 1)'                  Title = p.Title'                  DurationInMinutes = (int)((p.EndTime - p.StartTime).TotalMinutes)'                  IsScheduled = (AllSchedules == null ? Schedule.ListAll() : AllSchedules)                                      .Where(schedule => schedule.IdChannel == p.IdChannel && schedule.IsRecordingProgram(p' true)).Count() > 0              };
Magic Number,MPExtended.Services.TVAccessService,WebProgramExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebProgramBasic,The following statement contains a magic number: return new WebProgramBasic              {                  Description = p.Description'                  EndTime = p.EndTime != DateTime.MinValue ? p.EndTime : new DateTime(2000' 1' 1)'                  ChannelId = p.IdChannel'                  Id = p.IdProgram'                  StartTime = p.StartTime != DateTime.MinValue ? p.StartTime : new DateTime(2000' 1' 1)'                  Title = p.Title'                  DurationInMinutes = (int)((p.EndTime - p.StartTime).TotalMinutes)'                  IsScheduled = (AllSchedules == null ? Schedule.ListAll() : AllSchedules)                                      .Where(schedule => schedule.IdChannel == p.IdChannel && schedule.IsRecordingProgram(p' true)).Count() > 0              };
Magic Number,MPExtended.Services.TVAccessService,WebRtspClientExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebRtspClient,The following statement contains a magic number: return new WebRtspClient              {                  DateTimeStarted = rtsp.DateTimeStarted != DateTime.MinValue ? rtsp.DateTimeStarted : new DateTime(2000' 1' 1)'                  Description = rtsp.Description'                  IpAdress = rtsp.IpAdress'                  IsActive = rtsp.IsActive'                  StreamName = rtsp.StreamName              };
Magic Number,MPExtended.Services.TVAccessService,WebScheduleExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebSchedule,The following statement contains a magic number: return new WebScheduleBasic              {                  BitRateMode = (int)sch.BitRateMode'                  Canceled = sch.Canceled != DateTime.MinValue ? sch.Canceled : new DateTime(2000' 1' 1)'                  Directory = sch.Directory'                  DoesUseEpisodeManagement = sch.DoesUseEpisodeManagement'                  EndTime = sch.EndTime != DateTime.MinValue ? sch.EndTime : new DateTime(2000' 1' 1)'                  ChannelId = sch.IdChannel'                  ParentScheduleId = sch.IdParentSchedule'                  Id = sch.IdSchedule'                  IsChanged = sch.IsChanged'                  IsManual = sch.IsManual'                  KeepDate = sch.KeepDate != DateTime.MinValue ? sch.KeepDate : new DateTime(2000' 1' 1)'                  KeepMethod = (WebScheduleKeepMethod)sch.KeepMethod'                  MaxAirings = sch.MaxAirings'                  PostRecordInterval = sch.PostRecordInterval'                  PreRecordInterval = sch.PreRecordInterval'                  Priority = sch.Priority'                  Title = sch.ProgramName'                  Quality = sch.Quality'                  QualityType = (int)sch.QualityType'                  RecommendedCard = sch.RecommendedCard'                  ScheduleType = (WebScheduleType)sch.ScheduleType'                  Series = sch.Series'                  StartTime = sch.StartTime != DateTime.MinValue ? sch.StartTime : new DateTime(2000' 1' 1)              };
Magic Number,MPExtended.Services.TVAccessService,WebScheduleExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebSchedule,The following statement contains a magic number: return new WebScheduleBasic              {                  BitRateMode = (int)sch.BitRateMode'                  Canceled = sch.Canceled != DateTime.MinValue ? sch.Canceled : new DateTime(2000' 1' 1)'                  Directory = sch.Directory'                  DoesUseEpisodeManagement = sch.DoesUseEpisodeManagement'                  EndTime = sch.EndTime != DateTime.MinValue ? sch.EndTime : new DateTime(2000' 1' 1)'                  ChannelId = sch.IdChannel'                  ParentScheduleId = sch.IdParentSchedule'                  Id = sch.IdSchedule'                  IsChanged = sch.IsChanged'                  IsManual = sch.IsManual'                  KeepDate = sch.KeepDate != DateTime.MinValue ? sch.KeepDate : new DateTime(2000' 1' 1)'                  KeepMethod = (WebScheduleKeepMethod)sch.KeepMethod'                  MaxAirings = sch.MaxAirings'                  PostRecordInterval = sch.PostRecordInterval'                  PreRecordInterval = sch.PreRecordInterval'                  Priority = sch.Priority'                  Title = sch.ProgramName'                  Quality = sch.Quality'                  QualityType = (int)sch.QualityType'                  RecommendedCard = sch.RecommendedCard'                  ScheduleType = (WebScheduleType)sch.ScheduleType'                  Series = sch.Series'                  StartTime = sch.StartTime != DateTime.MinValue ? sch.StartTime : new DateTime(2000' 1' 1)              };
Magic Number,MPExtended.Services.TVAccessService,WebScheduleExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebSchedule,The following statement contains a magic number: return new WebScheduleBasic              {                  BitRateMode = (int)sch.BitRateMode'                  Canceled = sch.Canceled != DateTime.MinValue ? sch.Canceled : new DateTime(2000' 1' 1)'                  Directory = sch.Directory'                  DoesUseEpisodeManagement = sch.DoesUseEpisodeManagement'                  EndTime = sch.EndTime != DateTime.MinValue ? sch.EndTime : new DateTime(2000' 1' 1)'                  ChannelId = sch.IdChannel'                  ParentScheduleId = sch.IdParentSchedule'                  Id = sch.IdSchedule'                  IsChanged = sch.IsChanged'                  IsManual = sch.IsManual'                  KeepDate = sch.KeepDate != DateTime.MinValue ? sch.KeepDate : new DateTime(2000' 1' 1)'                  KeepMethod = (WebScheduleKeepMethod)sch.KeepMethod'                  MaxAirings = sch.MaxAirings'                  PostRecordInterval = sch.PostRecordInterval'                  PreRecordInterval = sch.PreRecordInterval'                  Priority = sch.Priority'                  Title = sch.ProgramName'                  Quality = sch.Quality'                  QualityType = (int)sch.QualityType'                  RecommendedCard = sch.RecommendedCard'                  ScheduleType = (WebScheduleType)sch.ScheduleType'                  Series = sch.Series'                  StartTime = sch.StartTime != DateTime.MinValue ? sch.StartTime : new DateTime(2000' 1' 1)              };
Magic Number,MPExtended.Services.TVAccessService,WebScheduleExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebSchedule,The following statement contains a magic number: return new WebScheduleBasic              {                  BitRateMode = (int)sch.BitRateMode'                  Canceled = sch.Canceled != DateTime.MinValue ? sch.Canceled : new DateTime(2000' 1' 1)'                  Directory = sch.Directory'                  DoesUseEpisodeManagement = sch.DoesUseEpisodeManagement'                  EndTime = sch.EndTime != DateTime.MinValue ? sch.EndTime : new DateTime(2000' 1' 1)'                  ChannelId = sch.IdChannel'                  ParentScheduleId = sch.IdParentSchedule'                  Id = sch.IdSchedule'                  IsChanged = sch.IsChanged'                  IsManual = sch.IsManual'                  KeepDate = sch.KeepDate != DateTime.MinValue ? sch.KeepDate : new DateTime(2000' 1' 1)'                  KeepMethod = (WebScheduleKeepMethod)sch.KeepMethod'                  MaxAirings = sch.MaxAirings'                  PostRecordInterval = sch.PostRecordInterval'                  PreRecordInterval = sch.PreRecordInterval'                  Priority = sch.Priority'                  Title = sch.ProgramName'                  Quality = sch.Quality'                  QualityType = (int)sch.QualityType'                  RecommendedCard = sch.RecommendedCard'                  ScheduleType = (WebScheduleType)sch.ScheduleType'                  Series = sch.Series'                  StartTime = sch.StartTime != DateTime.MinValue ? sch.StartTime : new DateTime(2000' 1' 1)              };
Magic Number,MPExtended.Services.TVAccessService,WebRecordingExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebRecording,The following statement contains a magic number: return new WebRecordingBasic              {                  Description = rec.Description'                  EndTime = rec.EndTime != DateTime.MinValue ? rec.EndTime : new DateTime(2000' 1' 1)'                  EpisodeName = rec.EpisodeName'                  EpisodeNum = rec.EpisodeNum'                  EpisodeNumber = rec.EpisodeNumber'                  EpisodePart = rec.EpisodePart'                  FileName = rec.FileName'                  Genre = rec.Genre'                  ChannelId = rec.IdChannel'                  Id = rec.IdRecording'                  ScheduleId = rec.Idschedule'                  IsChanged = rec.IsChanged'                  IsManual = rec.IsManual'                  IsRecording = rec.IsRecording'                  KeepUntil = rec.KeepUntil'                  KeepUntilDate = rec.KeepUntilDate != DateTime.MinValue ? rec.KeepUntilDate : new DateTime(2000' 1' 1)'                  SeriesNum = rec.SeriesNum'                  ShouldBeDeleted = rec.ShouldBeDeleted'                  StartTime = rec.StartTime != DateTime.MinValue ? rec.StartTime : new DateTime(2000' 1' 1)'                  StopTime = rec.StopTime'                  TimesWatched = rec.TimesWatched'                  Title = rec.Title'                  ChannelName = channel == null ? null : channel.DisplayName              };
Magic Number,MPExtended.Services.TVAccessService,WebRecordingExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebRecording,The following statement contains a magic number: return new WebRecordingBasic              {                  Description = rec.Description'                  EndTime = rec.EndTime != DateTime.MinValue ? rec.EndTime : new DateTime(2000' 1' 1)'                  EpisodeName = rec.EpisodeName'                  EpisodeNum = rec.EpisodeNum'                  EpisodeNumber = rec.EpisodeNumber'                  EpisodePart = rec.EpisodePart'                  FileName = rec.FileName'                  Genre = rec.Genre'                  ChannelId = rec.IdChannel'                  Id = rec.IdRecording'                  ScheduleId = rec.Idschedule'                  IsChanged = rec.IsChanged'                  IsManual = rec.IsManual'                  IsRecording = rec.IsRecording'                  KeepUntil = rec.KeepUntil'                  KeepUntilDate = rec.KeepUntilDate != DateTime.MinValue ? rec.KeepUntilDate : new DateTime(2000' 1' 1)'                  SeriesNum = rec.SeriesNum'                  ShouldBeDeleted = rec.ShouldBeDeleted'                  StartTime = rec.StartTime != DateTime.MinValue ? rec.StartTime : new DateTime(2000' 1' 1)'                  StopTime = rec.StopTime'                  TimesWatched = rec.TimesWatched'                  Title = rec.Title'                  ChannelName = channel == null ? null : channel.DisplayName              };
Magic Number,MPExtended.Services.TVAccessService,WebRecordingExtensionMethods,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\ConvertExtensionMethods.cs,ToWebRecording,The following statement contains a magic number: return new WebRecordingBasic              {                  Description = rec.Description'                  EndTime = rec.EndTime != DateTime.MinValue ? rec.EndTime : new DateTime(2000' 1' 1)'                  EpisodeName = rec.EpisodeName'                  EpisodeNum = rec.EpisodeNum'                  EpisodeNumber = rec.EpisodeNumber'                  EpisodePart = rec.EpisodePart'                  FileName = rec.FileName'                  Genre = rec.Genre'                  ChannelId = rec.IdChannel'                  Id = rec.IdRecording'                  ScheduleId = rec.Idschedule'                  IsChanged = rec.IsChanged'                  IsManual = rec.IsManual'                  IsRecording = rec.IsRecording'                  KeepUntil = rec.KeepUntil'                  KeepUntilDate = rec.KeepUntilDate != DateTime.MinValue ? rec.KeepUntilDate : new DateTime(2000' 1' 1)'                  SeriesNum = rec.SeriesNum'                  ShouldBeDeleted = rec.ShouldBeDeleted'                  StartTime = rec.StartTime != DateTime.MinValue ? rec.StartTime : new DateTime(2000' 1' 1)'                  StopTime = rec.StopTime'                  TimesWatched = rec.TimesWatched'                  Title = rec.Title'                  ChannelName = channel == null ? null : channel.DisplayName              };
Magic Number,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,Search,The following statement contains a magic number: result = result.Concat(Channel.ListAll()                      .Where(channel => channel.DisplayName.Contains(text' StringComparison.CurrentCultureIgnoreCase))                      .Select(channel => new WebTVSearchResult()                      {                          Id = channel.IdChannel.ToString()'                          Score = 50 + (int)Math.Round((decimal)text.Length / channel.DisplayName.Length * 50)'                          Title = channel.DisplayName'                          Type = channel.IsTv ? WebTVSearchResultType.TVChannel : WebTVSearchResultType.RadioChannel                      })                      .Where(r => type == null || r.Type == type));
Magic Number,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,Search,The following statement contains a magic number: result = result.Concat(Channel.ListAll()                      .Where(channel => channel.DisplayName.Contains(text' StringComparison.CurrentCultureIgnoreCase))                      .Select(channel => new WebTVSearchResult()                      {                          Id = channel.IdChannel.ToString()'                          Score = 50 + (int)Math.Round((decimal)text.Length / channel.DisplayName.Length * 50)'                          Title = channel.DisplayName'                          Type = channel.IsTv ? WebTVSearchResultType.TVChannel : WebTVSearchResultType.RadioChannel                      })                      .Where(r => type == null || r.Type == type));
Magic Number,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,Search,The following statement contains a magic number: result = result.Concat(ChannelGroup.ListAll()                      .Where(group => group.GroupName.Contains(text' StringComparison.CurrentCultureIgnoreCase))                      .Select(group => new WebTVSearchResult()                      {                          Id = group.IdGroup.ToString()'                          Score = 50 + (int)Math.Round((decimal)text.Length / group.GroupName.Length * 50)'                          Title = group.GroupName'                          Type = WebTVSearchResultType.TVGroup'                      }));
Magic Number,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,Search,The following statement contains a magic number: result = result.Concat(ChannelGroup.ListAll()                      .Where(group => group.GroupName.Contains(text' StringComparison.CurrentCultureIgnoreCase))                      .Select(group => new WebTVSearchResult()                      {                          Id = group.IdGroup.ToString()'                          Score = 50 + (int)Math.Round((decimal)text.Length / group.GroupName.Length * 50)'                          Title = group.GroupName'                          Type = WebTVSearchResultType.TVGroup'                      }));
Magic Number,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,Search,The following statement contains a magic number: result = result.Concat(RadioChannelGroup.ListAll()                      .Where(group => group.GroupName.Contains(text' StringComparison.CurrentCultureIgnoreCase))                      .Select(group => new WebTVSearchResult()                      {                          Id = group.IdGroup.ToString()'                          Score = 50 + (int)Math.Round((decimal)text.Length / group.GroupName.Length * 50)'                          Title = group.GroupName'                          Type = WebTVSearchResultType.RadioGroup                      }));
Magic Number,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,Search,The following statement contains a magic number: result = result.Concat(RadioChannelGroup.ListAll()                      .Where(group => group.GroupName.Contains(text' StringComparison.CurrentCultureIgnoreCase))                      .Select(group => new WebTVSearchResult()                      {                          Id = group.IdGroup.ToString()'                          Score = 50 + (int)Math.Round((decimal)text.Length / group.GroupName.Length * 50)'                          Title = group.GroupName'                          Type = WebTVSearchResultType.RadioGroup                      }));
Magic Number,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,Search,The following statement contains a magic number: result = result.Concat(Recording.ListAll()                      .Where(rec => rec.Title.Contains(text' StringComparison.CurrentCultureIgnoreCase))                      .Select(rec => new WebTVSearchResult()                      {                          Id = rec.IdRecording.ToString()'                          Score = 50 + (int)Math.Round((decimal)text.Length / rec.Title.Length * 50)'                          Title = rec.Title'                          Type = WebTVSearchResultType.Recording'                          StartTime = rec.StartTime'                          EndTime = rec.EndTime'                          ChannelName = GetChannelDisplayName(rec.IdChannel)                      }));
Magic Number,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,Search,The following statement contains a magic number: result = result.Concat(Recording.ListAll()                      .Where(rec => rec.Title.Contains(text' StringComparison.CurrentCultureIgnoreCase))                      .Select(rec => new WebTVSearchResult()                      {                          Id = rec.IdRecording.ToString()'                          Score = 50 + (int)Math.Round((decimal)text.Length / rec.Title.Length * 50)'                          Title = rec.Title'                          Type = WebTVSearchResultType.Recording'                          StartTime = rec.StartTime'                          EndTime = rec.EndTime'                          ChannelName = GetChannelDisplayName(rec.IdChannel)                      }));
Magic Number,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,Search,The following statement contains a magic number: result = result.Concat(Schedule.ListAll()                      .Where(schedule => schedule.ProgramName.Contains(text' StringComparison.CurrentCultureIgnoreCase))                      .Select(schedule => new WebTVSearchResult()                      {                          Id = schedule.IdSchedule.ToString()'                          Score = 50 + (int)Math.Round((decimal)text.Length / schedule.ProgramName.Length * 50)'                          Title = schedule.ProgramName'                          Type = WebTVSearchResultType.Schedule'                          ChannelName = GetChannelDisplayName(schedule.IdChannel)                      }));
Magic Number,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,Search,The following statement contains a magic number: result = result.Concat(Schedule.ListAll()                      .Where(schedule => schedule.ProgramName.Contains(text' StringComparison.CurrentCultureIgnoreCase))                      .Select(schedule => new WebTVSearchResult()                      {                          Id = schedule.IdSchedule.ToString()'                          Score = 50 + (int)Math.Round((decimal)text.Length / schedule.ProgramName.Length * 50)'                          Title = schedule.ProgramName'                          Type = WebTVSearchResultType.Schedule'                          ChannelName = GetChannelDisplayName(schedule.IdChannel)                      }));
Magic Number,MPExtended.Services.TVAccessService,TVAccessService,C:\research\architectureSmells\repos\MPExtended_MPExtended\Services\MPExtended.Services.TVAccessService\TVAccessService.cs,Search,The following statement contains a magic number: result = result.Concat(_tvBusiness.SearchPrograms("%" + text + "%")                      .Select(program => new WebTVSearchResult()                      {                          Id = program.IdProgram.ToString()'                          Score = (int)Math.Round(((decimal)text.Length / program.Title.Length * 50) - Math.Abs((decimal)(program.StartTime - DateTime.Now).TotalDays))'                          Title = program.Title'                          Type = WebTVSearchResultType.Program'                          StartTime = program.StartTime'                          EndTime = program.EndTime'                          ChannelName = GetChannelDisplayName(program.IdChannel)                      }));
