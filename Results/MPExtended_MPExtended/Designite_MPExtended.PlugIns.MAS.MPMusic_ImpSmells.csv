Implementation smell,Namespace,Class,File,Method,Description
Long Method,MediaPortal.Playlists,PlayListPLSIO,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\PlayList\PlayListPLSIO.cs,Load,The method has 157 lines of code.
Complex Method,MediaPortal.Playlists,PlayListPLSIO,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\PlayList\PlayListPLSIO.cs,Load,Cyclomatic complexity of the method is 18
Long Statement,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,LoadAllTracks,The length of the statement  "            Dictionary<Tuple<string' string>' IList<WebArtworkDetailed>> artwork = new Dictionary<Tuple<string' string>' IList<WebArtworkDetailed>>(); " is 138.
Long Statement,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,LoadAllTracks,The length of the statement  "            string sql = "SELECT idTrack' strAlbumArtist' strAlbum' strArtist' iDisc' iTrack' strTitle' strPath' iDuration' iYear' strGenre' iRating " + " is 140.
Long Statement,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,GetAllAlbums,The length of the statement  "                            "GROUP_CONCAT(t.strArtist' '|') AS artists' GROUP_CONCAT(t.strGenre' '|') AS genre' GROUP_CONCAT(t.strComposer' '|') AS composer' " + " is 133.
Long Statement,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The length of the statement  "                IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader) " is 122.
Long Statement,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The length of the statement  "                string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search"; " is 137.
Long Statement,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The length of the statement  "                IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader) " is 121.
Long Statement,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,GetPlaylist,The length of the statement  "                WebPlaylist webPlaylist = new WebPlaylist() { Id = EncodeTo64(Path.GetFileName(path))' Title = mpPlaylist.Name' Path = new List<string>() { path } }; " is 149.
Long Statement,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,GetPlaylistItems,The length of the statement  "                // for newly created playlists' return an empty list' to make sure that a CreatePlaylist call followed by an AddItem works " is 122.
Complex Conditional,MediaPortal.Playlists,PlayListM3uIO,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\PlayList\PlayListM3uIO.cs,AddItem,The conditional expression  "fileName.ToLower().StartsWith("http:") || fileName.ToLower().StartsWith("https:") ||            fileName.ToLower().StartsWith("mms:") || fileName.ToLower().StartsWith("rtp:")"  is complex.
Complex Conditional,MediaPortal.Playlists,PlayListPLSIO,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\PlayList\PlayListPLSIO.cs,Load,The conditional expression  "strLine.StartsWith("http") || strLine.StartsWith("HTTP") ||                          strLine.StartsWith("mms") || strLine.StartsWith("MMS") ||                          strLine.StartsWith("rtp") || strLine.StartsWith("RTP")"  is complex.
Complex Conditional,MediaPortal.Playlists,PlayListPLSIO,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\PlayList\PlayListPLSIO.cs,Load,The conditional expression  "fileName.ToLower().StartsWith("http:") || fileName.ToLower().StartsWith("https:") ||                                  fileName.ToLower().StartsWith("mms:") || fileName.ToLower().StartsWith("rtp:")"  is complex.
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,GetAllArtistsDetailed,The following statement contains a magic number: var detInfo = ReadList<DetailedArtistInfo>(infoSql' delegate(SQLiteDataReader reader)              {                  return new DetailedArtistInfo()                  {                      Name = reader.ReadString(0)'                      Styles = reader.ReadString(1)'                      Tones = reader.ReadString(2)'                      Biography = reader.ReadString(3)'                  };              }).ToDictionary(x => x.Name' x => x);
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,GetAllArtistsDetailed,The following statement contains a magic number: var detInfo = ReadList<DetailedArtistInfo>(infoSql' delegate(SQLiteDataReader reader)              {                  return new DetailedArtistInfo()                  {                      Name = reader.ReadString(0)'                      Styles = reader.ReadString(1)'                      Tones = reader.ReadString(2)'                      Biography = reader.ReadString(3)'                  };              }).ToDictionary(x => x.Name' x => x);
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,GetAllArtistsDetailed,The following statement contains a magic number: return ReadList(sql' delegate(SQLiteDataReader reader)              {                  var hasAlbums = reader.ReadBoolean(1);                  var genres = reader.ReadPipeList(2);                  return reader.ReadPipeList(0).Select(x => new {                       Artist = x'                       HasAlbums = hasAlbums'                      Genres = genres                  });              })                  .SelectMany(x => x)                  .GroupBy(x => x.Artist)                  .Select(x =>                  {                      var artist = new WebMusicArtistDetailed();                      artist.Id = x.Key;                      artist.HasAlbums = x.Any(y => y.HasAlbums);                      artist.Title = x.Key;                        artist.Genres = x.SelectMany(y => y.Genres).ToList();                      artist.Artwork = GetArtworkForArtist(x.Key);                        if (detInfo.ContainsKey(x.Key))                      {                          artist.Styles = detInfo[x.Key].Styles;                          artist.Tones = detInfo[x.Key].Tones;                          artist.Biography = detInfo[x.Key].Biography;                      }                        return artist;                  });
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,Search,The following statement contains a magic number: using (DatabaseConnection connection = OpenConnection())              {                  SQLiteParameter param = new SQLiteParameter("@search"' "%" + text + "%");                    string artistSql = "SELECT DISTINCT strArtist' strAlbumArtist' strAlbum FROM tracks WHERE strArtist LIKE @search";                  IEnumerable<WebSearchResult> artists = ReadList<IEnumerable<WebSearchResult>>(artistSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> albumArtists = reader.ReadPipeList(1);                      return reader.ReadPipeList(0)                          .Where(name => name.Contains(text))                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round(40 + (decimal)text.Length / name.Length * 40)                          })                          .Concat(new[] { new WebSearchResult()                           {                              Type = WebMediaType.MusicAlbum'                              Id = (string)AlbumIdReader(reader' 2)'                              Title = reader.ReadString(2)'                              Score = (int)Math.Round(20 + (decimal)text.Length / reader.ReadString(0).Length * 40)'                              Details = new WebDictionary<string>()                              {                                  { "Artist"' albumArtists.First() }'                                  { "ArtistId"' albumArtists.First() }                              }                          }                      });                  }' param).SelectMany(x => x);                    string songSql = "SELECT DISTINCT idTrack' strTitle' strAlbumArtist' strAlbum' iDuration' iYear FROM tracks WHERE strTitle LIKE @search";                  IEnumerable<WebSearchResult> songs = ReadList<WebSearchResult>(songSql' delegate(SQLiteDataReader reader)                  {                      IEnumerable<string> allArtists = reader.ReadPipeList(2);                      string title = reader.ReadString(1);                      string artist = allArtists.Count() == 0 ? String.Empty : allArtists.First();                      return new WebSearchResult()                      {                          Type = WebMediaType.MusicTrack'                          Id = reader.ReadIntAsString(0)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artist }'                          { "ArtistId"' artist }'                          { "Album"' reader.ReadString(3) }'                          { "AlbumId"' (string)AlbumIdReader(reader' 3) }'                          { "Duration"' reader.ReadIntAsString(4) }'                          { "Year"' reader.ReadIntAsString(5) }                      }                      };                  }' param);                    string albumsSql =                      "SELECT DISTINCT t.strAlbumArtist' t.strAlbum' " +                          "CASE WHEN i.iYear ISNULL THEN MIN(t.iYear) ELSE i.iYear END AS year " +                      "FROM tracks t " +                      "LEFT JOIN albuminfo i ON t.strAlbum = i.strAlbum AND t.strArtist LIKE '%' || i.strArtist || '%' " +                      "WHERE t.strAlbum LIKE @search " +                      "GROUP BY t.strAlbumArtist' t.strAlbum ";                  IEnumerable<WebSearchResult> albums = ReadList<IEnumerable<WebSearchResult>>(albumsSql' delegate(SQLiteDataReader reader)                  {                      string title = reader.ReadString(1);                      IEnumerable<string> artistList = reader.ReadPipeList(0);                      var albumResult = new WebSearchResult()                      {                          Type = WebMediaType.MusicAlbum'                          Id = (string)AlbumIdReader(reader' 1)'                          Title = title'                          Score = (int)Math.Round(40 + (decimal)text.Length / title.Length * 40)'                          Details = new WebDictionary<string>()                      {                          { "Artist"' artistList.First().Trim() }'                          { "ArtistId"' artistList.First().Trim() }'                          { "Year"' reader.ReadIntAsString(2) }                      }                      };                        string allArtists = String.Join(""' artistList);                      return artistList                          .Select(name => new WebSearchResult()                          {                              Type = WebMediaType.MusicArtist'                              Id = name'                              Title = name'                              Score = (int)Math.Round((decimal)name.Length / allArtists.Length * 30)                          }).Concat(new[] { albumResult });                  }' param).SelectMany(x => x);                    return artists.Concat(songs).Concat(albums);              }
Magic Number,MPExtended.PlugIns.MAS.MPMusic,MPMusic,C:\repos\MPExtended_MPExtended\PlugIns\MPExtended.PlugIns.MAS.MPMusic\MPMusic.cs,GetPlaylistItems,The following statement contains a magic number: if (factory.Load(mpPlaylist' path))              {                  var tracks = LoadAllTracks<WebMusicTrackBasic>().ToList();                    return mpPlaylist                      .Select(x =>                           {                              var track = tracks.FirstOrDefault(t => t.Path.Contains(x.FileName));                              return new WebPlaylistItem()                              {                                  Title = x.Description'                                  Duration = x.Duration'                                  Path = new List<string>() { x.FileName }'                                  Type = WebMediaType.MusicTrack'                                  Id = track != null ? track.Id : null'                                  DateAdded = track != null ? track.DateAdded : new DateTime(1970' 1' 1)'                                  Artwork = track != null ? track.Artwork : new List<WebArtwork>()'                              };                          })                      .ToList();              }              else if (new FileInfo(path).Length == 0)              {                  // for newly created playlists' return an empty list' to make sure that a CreatePlaylist call followed by an AddItem works                  return new List<WebPlaylistItem>();              }              else              {                  Log.Warn("Couldn't load playlist {0}"' playlistId);                  return null;              }
