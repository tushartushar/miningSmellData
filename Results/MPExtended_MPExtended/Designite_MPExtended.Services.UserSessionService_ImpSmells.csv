Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MPExtended.Services.UserSessionService,WindowsController,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.UserSessionService\WindowsController.cs,AdjustTokenPrivileges,The method has 6 parameters. Parameters: TokenHandle' DisableAllPrivileges' NewState' BufferLength' PreviousState' ReturnLength
Long Parameter List,MPExtended.Services.UserSessionService,WindowsController,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.UserSessionService\WindowsController.cs,FormatMessage,The method has 7 parameters. Parameters: dwFlags' lpSource' dwMessageId' dwLanguageId' lpBuffer' nSize' Arguments
Magic Number,MPExtended.Services.UserSessionService,UserSessionService,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.UserSessionService\UserSessionService.cs,StartMediaPortalBlocking,The following statement contains a magic number: while (!IsMediaPortalRunning().Result)              {                  System.Threading.Thread.Sleep(500);              }
Magic Number,MPExtended.Services.UserSessionService,UserSessionService,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.UserSessionService\UserSessionService.cs,SetPowerMode,The following statement contains a magic number: try              {                  if (powerMode == WebPowerMode.Screensaver)                  {                      ScreenSaver.StartScreenSaver();                  }                  else if (powerMode == WebPowerMode.Lock)                  {                      LockWorkStation();                  }                  else if (powerMode == WebPowerMode.ScreenOff)                  {                      SendMessage(HWND_BROADCAST' WM_SYSCOMMAND' SC_MONITORPOWER' 2);                  }                  else if (powerMode == WebPowerMode.ScreenOn)                  {                    }                  else                  {                      RestartOptions option = MapPowerMode(powerMode);                      WindowsController.ExitWindows(option' false);                  }              }              catch (InvalidCastException)              {                  Log.Warn("The powerMode " + powerMode + " is not valid");              }
Magic Number,MPExtended.Services.UserSessionService,WindowsController,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.UserSessionService\WindowsController.cs,EnableToken,The following statement contains a magic number: int size = 4;
Magic Number,MPExtended.Services.UserSessionService,WindowsController,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.UserSessionService\WindowsController.cs,EnableToken,The following statement contains a magic number: if (          AdjustTokenPrivileges(tokenHandle' 0' ref tokenPrivileges' 4 + (12 * tokenPrivileges.PrivilegeCount)'                                ref newPrivileges' ref size) == 0)          throw new PrivilegeException(FormatError(Marshal.GetLastWin32Error()));
Magic Number,MPExtended.Services.UserSessionService,WindowsController,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.UserSessionService\WindowsController.cs,EnableToken,The following statement contains a magic number: if (          AdjustTokenPrivileges(tokenHandle' 0' ref tokenPrivileges' 4 + (12 * tokenPrivileges.PrivilegeCount)'                                ref newPrivileges' ref size) == 0)          throw new PrivilegeException(FormatError(Marshal.GetLastWin32Error()));
Magic Number,MPExtended.Services.UserSessionService,WindowsController,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.UserSessionService\WindowsController.cs,FormatError,The following statement contains a magic number: try        {          StringBuilder buffer = new StringBuilder(255);          FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM' IntPtr.Zero' number' 0' buffer' buffer.Capacity' 0);          return buffer.ToString();        }        catch (Exception)        {          return "Unspecified error [" + number.ToString() + "]";        }
