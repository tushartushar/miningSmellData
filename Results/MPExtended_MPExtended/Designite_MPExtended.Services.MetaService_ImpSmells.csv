Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MPExtended.Services.MetaService,AccessRequests,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\AccessRequests.cs,RequestAccessThroughWifiRemote,Cyclomatic complexity of the method is 8
Complex Method,MPExtended.Services.MetaService,ServiceSetComposer,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\ServiceSetComposer.cs,ComposeAll,Cyclomatic complexity of the method is 9
Long Parameter List,MPExtended.Services.MetaService,ServiceSetComposer,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\ServiceSetComposer.cs,CreateServiceSet,The method has 5 parameters. Parameters: mas' masstream' tas' tasstream' ui
Long Statement,MPExtended.Services.MetaService,AccessRequests,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\AccessRequests.cs,CreateAccessRequest,The length of the statement  "                Log.Info("User access request from {0} (claims to be client {1}) denied because user access requests are disabled on this system (check configuration)"' ip' clientName); " is 169.
Long Statement,MPExtended.Services.MetaService,AccessRequests,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\AccessRequests.cs,RequestAccessThroughWifiRemote,The length of the statement  "                    Log.Error("Connected to WifiRemote API {0}' but API {1} is required. Please update your WifiRemote."' client.ServerVersion' REQUIRED_WIFIREMOTE); " is 145.
Long Statement,MPExtended.Services.MetaService,AccessRequests,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\AccessRequests.cs,RequestAccessThroughPrivateUSS,The length of the statement  "                bool result = channel.RequestAccess(token' client' ip' Configuration.Authentication.Users.Select(x => x.Username).ToList()); " is 124.
Long Statement,MPExtended.Services.MetaService,ServiceClientFactory,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\ServiceClientFactory.cs,CreateMeta,The length of the statement  "                var channel = new ClientFactory<IMetaService>().CreateConnection(String.Format("{0}:{1}"' ip' port)' "MPExtended/MetaService"); " is 127.
Long Statement,MPExtended.Services.MetaService,ZeroconfPublisher,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\ZeroconfPublisher.cs,Publish,The length of the statement  "                NetService net = new NetService(ZeroconfDiscoverer.DOMAIN' ZeroconfDiscoverer.serviceTypes[srv.ToWebService().Value]' Configuration.Services.GetServiceName()' srv.Port); " is 169.
Long Statement,MPExtended.Services.MetaService,ZeroconfPublisher,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\ZeroconfPublisher.cs,Publish,The length of the statement  "                NetService net = new NetService(ZeroconfDiscoverer.DOMAIN' SET_SERVICE_TYPE' Configuration.Services.GetServiceName()' Configuration.Services.Port); " is 147.
Complex Conditional,MPExtended.Services.MetaService,ServiceSetComposer,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\ServiceSetComposer.cs,ComposeAll,The conditional expression  "HasActiveMAS && HasActiveWSS && !HasActiveTAS && tveMeta != null"  is complex.
Complex Conditional,MPExtended.Services.MetaService,ServiceSetComposer,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\ServiceSetComposer.cs,ComposeAll,The conditional expression  "HasActiveUI && !HasActiveMAS && !HasActiveTAS && !HasActiveWSS && tveMeta != null"  is complex.
Magic Number,MPExtended.Services.MetaService,AccessRequests,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\AccessRequests.cs,CreateAccessRequest,The following statement contains a magic number: string token = RandomGenerator.GetRandomString(40);
Magic Number,MPExtended.Services.MetaService,AccessRequests,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\AccessRequests.cs,RequestAccessThroughWifiRemote,The following statement contains a magic number: while (!client.ConnectionFailed)              {                  if (client.AuthenticationFailed)                  {                      Log.Error("Failed to authorize with WifiRemote");                      break;                  }                    if (client.Authenticated && client.ServerVersion < REQUIRED_WIFIREMOTE)                  {                      Log.Error("Connected to WifiRemote API {0}' but API {1} is required. Please update your WifiRemote."' client.ServerVersion' REQUIRED_WIFIREMOTE);                      break;                  }                    if (cancelToken.IsCancellationRequested)                  {                      if (sentDialog)                          client.CancelRequestAccessDialog();                      break;                  }                    if (!sentDialog && client.Authenticated)                  {                      client.SendRequestAccessDialog(clientName' ip' Configuration.Authentication.Users.Select(x => x.Username).ToList());                      sentDialog = true;                  }                    if (client.LatestDialogResult != null)                  {                      // User accepted or denied the request                      client.Disconnect();                      return client.LatestDialogResult.SelectedOption;                  }                    Thread.Sleep(500);              }
Magic Number,MPExtended.Services.MetaService,AccessRequests,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\AccessRequests.cs,RequestAccessThroughPrivateUSS,The following statement contains a magic number: try              {                  var factory = new ClientFactory<IPrivateUserSessionService>();                  channel = factory.CreateLocalTcpConnection(9751' "MPExtended/UserSessionServicePrivate");                    // request access                  bool result = channel.RequestAccess(token' client' ip' Configuration.Authentication.Users.Select(x => x.Username).ToList());                  String selectedUser = null;                    if (result)                  {                      while (!cancelToken.IsCancellationRequested)                      {                          WebAccessRequestResponse response = channel.GetAccessRequestStatus(token);                          if (response.UserHasResponded)                          {                              selectedUser = response.IsAllowed ? response.Username : null;                              break;                          }                          Thread.Sleep(500);                      }                  }                    if (cancelToken.IsCancellationRequested)                  {                      channel.CancelAccessRequest(token);                  }                    // close channel                  (channel as ICommunicationObject).Close();                  return selectedUser;              }              catch (Exception ex)              {                  Log.Error(String.Format("Failed to request access for client {0} at {1} through USS"' client' ip)' ex);                  return ERROR;              }
Magic Number,MPExtended.Services.MetaService,AccessRequests,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\AccessRequests.cs,RequestAccessThroughPrivateUSS,The following statement contains a magic number: try              {                  var factory = new ClientFactory<IPrivateUserSessionService>();                  channel = factory.CreateLocalTcpConnection(9751' "MPExtended/UserSessionServicePrivate");                    // request access                  bool result = channel.RequestAccess(token' client' ip' Configuration.Authentication.Users.Select(x => x.Username).ToList());                  String selectedUser = null;                    if (result)                  {                      while (!cancelToken.IsCancellationRequested)                      {                          WebAccessRequestResponse response = channel.GetAccessRequestStatus(token);                          if (response.UserHasResponded)                          {                              selectedUser = response.IsAllowed ? response.Username : null;                              break;                          }                          Thread.Sleep(500);                      }                  }                    if (cancelToken.IsCancellationRequested)                  {                      channel.CancelAccessRequest(token);                  }                    // close channel                  (channel as ICommunicationObject).Close();                  return selectedUser;              }              catch (Exception ex)              {                  Log.Error(String.Format("Failed to request access for client {0} at {1} through USS"' client' ip)' ex);                  return ERROR;              }
Magic Number,MPExtended.Services.MetaService,MetaService,C:\repos\MPExtended_MPExtended\Services\MPExtended.Services.MetaService\MetaService.cs,MetaService,The following statement contains a magic number: Task.Factory.StartNew(delegate()              {                  // give it some time to detect all service sets                  Thread.Sleep(5000);                  foreach (var publisher in publishers)                  {                      publisher.Detector = detector;                      publisher.PublishAsync();                  }                  ServiceState.StartupConditionCompleted(STARTUP_CONDITION);              });
