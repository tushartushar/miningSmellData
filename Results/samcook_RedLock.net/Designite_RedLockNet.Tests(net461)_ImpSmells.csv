Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,,The length of the parameter NonDefaultRedisKeyFormatServer is 30.
Long Identifier,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,,The length of the parameter SomeActiveEndPointsWithNoQuorum is 31.
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,OneTimeSetUp,The following statement contains a magic number: ThreadPool.SetMinThreads(100' 100);
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,OneTimeSetUp,The following statement contains a magic number: ThreadPool.SetMinThreads(100' 100);
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestBlockingConcurrentLocks,The following statement contains a magic number: var thread = new Thread(() =>  					{  						// ReSharper disable once AccessToDisposedClosure (we join on threads before disposing)  						using (var redisLock = redisLockFactory.CreateLock(  							resource'  							TimeSpan.FromSeconds(2)'  							TimeSpan.FromSeconds(10)'  							TimeSpan.FromSeconds(0.5)))  						{  							logger.LogInformation("Entering lock");  							if (redisLock.IsAcquired)  							{  								Interlocked.Increment(ref locksAcquired);  							}  							Thread.Sleep(4000);  							logger.LogInformation("Leaving lock");  						}  					});
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestBlockingConcurrentLocks,The following statement contains a magic number: var thread = new Thread(() =>  					{  						// ReSharper disable once AccessToDisposedClosure (we join on threads before disposing)  						using (var redisLock = redisLockFactory.CreateLock(  							resource'  							TimeSpan.FromSeconds(2)'  							TimeSpan.FromSeconds(10)'  							TimeSpan.FromSeconds(0.5)))  						{  							logger.LogInformation("Entering lock");  							if (redisLock.IsAcquired)  							{  								Interlocked.Increment(ref locksAcquired);  							}  							Thread.Sleep(4000);  							logger.LogInformation("Leaving lock");  						}  					});
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestBlockingConcurrentLocks,The following statement contains a magic number: var thread = new Thread(() =>  					{  						// ReSharper disable once AccessToDisposedClosure (we join on threads before disposing)  						using (var redisLock = redisLockFactory.CreateLock(  							resource'  							TimeSpan.FromSeconds(2)'  							TimeSpan.FromSeconds(10)'  							TimeSpan.FromSeconds(0.5)))  						{  							logger.LogInformation("Entering lock");  							if (redisLock.IsAcquired)  							{  								Interlocked.Increment(ref locksAcquired);  							}  							Thread.Sleep(4000);  							logger.LogInformation("Leaving lock");  						}  					});
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestBlockingConcurrentLocks,The following statement contains a magic number: var thread = new Thread(() =>  					{  						// ReSharper disable once AccessToDisposedClosure (we join on threads before disposing)  						using (var redisLock = redisLockFactory.CreateLock(  							resource'  							TimeSpan.FromSeconds(2)'  							TimeSpan.FromSeconds(10)'  							TimeSpan.FromSeconds(0.5)))  						{  							logger.LogInformation("Entering lock");  							if (redisLock.IsAcquired)  							{  								Interlocked.Increment(ref locksAcquired);  							}  							Thread.Sleep(4000);  							logger.LogInformation("Leaving lock");  						}  					});
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestBlockingConcurrentLocks,The following statement contains a magic number: i < 2
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestBlockingConcurrentLocks,The following statement contains a magic number: Assert.That(locksAcquired' Is.EqualTo(2));
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestRenewing,The following statement contains a magic number: Thread.Sleep(4000);
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestRenewing,The following statement contains a magic number: Assert.That(extendCount' Is.GreaterThan(2));
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestLockReleasedAfterTimeout,The following statement contains a magic number: Thread.Sleep(550);
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestLockReleasedAfterTimeout,The following statement contains a magic number: Thread.Sleep(1200);
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestRaceForQuorumMultiple,The following statement contains a magic number: i < 2
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestRaceForQuorum,The following statement contains a magic number: var lockKey = $"testredislock:{ThreadSafeRandom.Next(10000)}";
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestRaceForQuorum,The following statement contains a magic number: var task = new Task(() =>  				{  					logger.LogDebug("Starting task");    					using (var redisLockFactory = RedLockFactory.Create(AllActiveEndPoints' loggerFactory))  					{  						var sw = Stopwatch.StartNew();    						using (var redisLock = redisLockFactory.CreateLock(lockKey' TimeSpan.FromSeconds(30)))  						{  							sw.Stop();    							logger.LogDebug($"Lock method took {sw.ElapsedMilliseconds}ms to return' IsAcquired = {redisLock.IsAcquired}");    							if (redisLock.IsAcquired)  							{  								logger.LogDebug($"Got lock with id {redisLock.LockId}' sleeping for a bit");    								Interlocked.Increment(ref locksAcquired);    								// Sleep for long enough for the other threads to give up  								//Thread.Sleep(TimeSpan.FromSeconds(2));  								Task.Delay(TimeSpan.FromSeconds(2)).Wait();    								logger.LogDebug($"Lock with id {redisLock.LockId} done sleeping");  							}  							else  							{  								logger.LogDebug("Couldn't get lock' giving up");  							}  						}  					}  				}' TaskCreationOptions.LongRunning);
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestRaceForQuorum,The following statement contains a magic number: var task = new Task(() =>  				{  					logger.LogDebug("Starting task");    					using (var redisLockFactory = RedLockFactory.Create(AllActiveEndPoints' loggerFactory))  					{  						var sw = Stopwatch.StartNew();    						using (var redisLock = redisLockFactory.CreateLock(lockKey' TimeSpan.FromSeconds(30)))  						{  							sw.Stop();    							logger.LogDebug($"Lock method took {sw.ElapsedMilliseconds}ms to return' IsAcquired = {redisLock.IsAcquired}");    							if (redisLock.IsAcquired)  							{  								logger.LogDebug($"Got lock with id {redisLock.LockId}' sleeping for a bit");    								Interlocked.Increment(ref locksAcquired);    								// Sleep for long enough for the other threads to give up  								//Thread.Sleep(TimeSpan.FromSeconds(2));  								Task.Delay(TimeSpan.FromSeconds(2)).Wait();    								logger.LogDebug($"Lock with id {redisLock.LockId} done sleeping");  							}  							else  							{  								logger.LogDebug("Couldn't get lock' giving up");  							}  						}  					}  				}' TaskCreationOptions.LongRunning);
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestRaceForQuorum,The following statement contains a magic number: i < 3
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestSslConnection,The following statement contains a magic number: var endPoint = new RedLockEndPoint  			{  				EndPoint = new DnsEndPoint("localhost"' 6383)'  				Ssl = true  			};
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestCancelBlockingLock,The following statement contains a magic number: cts.CancelAfter(TimeSpan.FromSeconds(2));
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestCancelBlockingLock,The following statement contains a magic number: Assert.Throws<OperationCanceledException>(() =>  					{  						using (var secondLock = redisLockFactory.CreateLock(  							resource'  							TimeSpan.FromSeconds(30)'  							TimeSpan.FromSeconds(10)'  							TimeSpan.FromSeconds(1)'  							cts.Token))  						{  							// should never get here  							Assert.Fail();  						}  					});
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TestCancelBlockingLock,The following statement contains a magic number: Assert.Throws<OperationCanceledException>(() =>  					{  						using (var secondLock = redisLockFactory.CreateLock(  							resource'  							TimeSpan.FromSeconds(30)'  							TimeSpan.FromSeconds(10)'  							TimeSpan.FromSeconds(1)'  							cts.Token))  						{  							// should never get here  							Assert.Fail();  						}  					});
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TimeLock,The following statement contains a magic number: i < 10
Magic Number,RedLockNet.Tests,RedLockTests,D:\research\architectureSmells\repos1\samcook_RedLock.net\RedLockNet.Tests\RedLockTests.cs,TimeLock,The following statement contains a magic number: var iterations = 10000;
