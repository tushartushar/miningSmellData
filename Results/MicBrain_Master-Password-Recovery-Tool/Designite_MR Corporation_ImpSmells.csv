Implementation smell,Namespace,Class,File,Method,Description
Long Method,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The method has 117 lines of code.
Long Method,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The method has 104 lines of code.
Complex Method,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,Cyclomatic complexity of the method is 84
Complex Method,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,Cyclomatic complexity of the method is 74
Long Statement,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Form1)); " is 125.
Long Statement,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Form2)); " is 125.
Long Statement,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,InitializeComponent,The length of the statement  "            this.textBox1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 156.
Long Statement,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,InitializeComponent,The length of the statement  "            this.textBox2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 156.
Long Statement,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Form3)); " is 125.
Long Statement,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The length of the statement  "            this.textBox1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 156.
Long Statement,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The length of the statement  "            this.textBox2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 156.
Long Statement,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Form4)); " is 125.
Long Statement,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The length of the statement  "            this.textBox2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 156.
Long Statement,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The length of the statement  "            this.textBox1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 156.
Empty Catch Block,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,DeleteFile,The method has an empty catch block.
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(12' 84);
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(12' 84);
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(297' 28);
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(297' 28);
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(12' 127);
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(12' 127);
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(297' 28);
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(297' 28);
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point(12' 170);
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point(12' 170);
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size(297' 28);
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size(297' 28);
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.button3.TabIndex = 2;
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(321' 318);
Magic Number,MR_Corporation,Form1,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form1.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(321' 318);
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                                      if (key.Length != 8)                  {                      MessageBox.Show( "Error. The number of digits must be 8. Please try again!");                      return;                  }                  int[] tver=new int[8];                  for(int i=0;i<8;i++)                      try                      {                          tver[i]=int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                  string s = "";                      /* The instruction of bites' description*/                    {                      /*The first bite*/                      if (tver[0] == 0) s+= 1;                      if (tver[0] == 1) s+= 0;                      if (tver[0] == 2) s+= 3;                      if (tver[0] == 3) s+= 2;                      if (tver[0] == 4) s+= 5;                      if (tver[0] == 5) s+= 4;                      if (tver[0] == 6) s+= 7;                      if (tver[0] == 7) s+= 6;                      if (tver[0] == 8) s+= 3;                      if (tver[0] == 9) s+= 2;                        /*The second bite*/                      if (tver[1] == 0) s+= 5;                      if (tver[1] == 1) s+= 4;                      if (tver[1] == 2) s+= 3;                      if (tver[1] == 3) s+= 2;                      if (tver[1] == 4) s+= 1;                      if (tver[1] == 5) s+= 0;                      if (tver[1] == 6) s+= 9;                      if (tver[1] == 7) s+= 8;                      if (tver[1] == 8) s+= 7;                      if (tver[1] == 9) s+= 6;                        /*The third bite*/                      if (tver[2] == 0) s+= 9;                      if (tver[2] == 1) s+= 8;                      if (tver[2] == 2) s+= 1;                      if (tver[2] == 3) s+= 0;                      if (tver[2] == 4) s+= 5;                      if (tver[2] == 5) s+= 4;                      if (tver[2] == 6) s+= 7;                      if (tver[2] == 7) s+= 6;                      if (tver[2] == 8) s+= 7;                      if (tver[2] == 9) s+= 6;                        /*The forth bite*/                      if (tver[3] == 0) s+= 6;                      if (tver[3] == 1) s+= 7;                      if (tver[3] == 2) s+= 8;                      if (tver[3] == 3) s+= 9;                      if (tver[3] == 4) s+= 2;                      if (tver[3] == 5) s+= 3;                      if (tver[3] == 6) s+= 4;                      if (tver[3] == 7) s+= 5;                      if (tver[3] == 8) s+= 8;                      if (tver[3] == 9) s+= 9;                        /*The fifth bite*/                      if (tver[4] == 0) s+= 8;                      if (tver[4] == 1) s+= 9;                      if (tver[4] == 2) s+= 0;                      if (tver[4] == 3) s+= 1;                      if (tver[4] == 4) s+= 2;                      if (tver[4] == 5) s+= 3;                      if (tver[4] == 6) s+= 4;                      if (tver[4] == 7) s+= 5;                      if (tver[4] == 8) s+= 0;                      if (tver[4] == 9) s+= 1;                        /*The sixth bite*/                      if (tver[5] == 0) s+= 0;                      if (tver[5] == 1) s+= 1;                      if (tver[5] == 2) s+= 8;                      if (tver[5] == 3) s+= 9;                      if (tver[5] == 4) s+= 4;                      if (tver[5] == 5) s+= 5;                      if (tver[5] == 6) s+= 2;                      if (tver[5] == 7) s+= 3;                      if (tver[5] == 8) s+= 2;                      if (tver[5] == 9) s+= 3;                        /*The seventh bite*/                      if (tver[6] == 0) s+= 2;                      if (tver[6] == 1) s+= 3;                      if (tver[6] == 2) s+= 0;                      if (tver[6] == 3) s+= 1;                      if (tver[6] == 4) s+= 8;                      if (tver[6] == 5) s+= 9;                      if (tver[6] == 6) s+= 6;                      if (tver[6] == 7) s+= 7;                      if (tver[6] == 8) s+= 0;                      if (tver[6] == 9) s+= 1;                        /*The eighth bite*/                      if (tver[7] == 0) s+= 6 ;                      if (tver[7] == 1) s+= 7 ;                      if (tver[7] == 2) s+= 4 ;                      if (tver[7] == 3) s+= 5 ;                      if (tver[7] == 4) s+= 0 ;                      if (tver[7] == 5) s+= 1 ;                      if (tver[7] == 6) s+= 8 ;                      if (tver[7] == 7) s+= 9 ;                      if (tver[7] == 8) s+= 8 ;                      if (tver[7] == 9) s+= 9 ;                  }                    textBox2.Text = s;                }
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(29' 88);
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(29' 88);
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(256' 26);
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(256' 26);
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point(29' 142);
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point(29' 142);
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size(256' 26);
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size(256' 26);
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(311' 310);
Magic Number,MR_Corporation,Form2,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form2.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(311' 310);
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 7)                  {                      MessageBox.Show("Error. The number of digits must be 7. Please try again!");                      return;                  }                  int[] tver = new int[7];                  for (int i = 0; i < 7; i++)                      try                      {                          tver[i] = int.Parse(key[i].ToString());                      }                      catch                      {                          MessageBox.Show("Error. All digits must be only numbers. Please try again.");                          return;                      }                      string s = "";                        if (tver[0] == 0) s += 0;                  if (tver[0] == 1) s += 9;                  if (tver[0] == 2) s += 8;                  if (tver[0] == 3) s += 7;                  if (tver[0] == 4) s += 6;                  if (tver[0] == 5) s += 5;                  if (tver[0] == 6) s += 4;                  if (tver[0] == 7) s += 3;                  if (tver[0] == 8) s += 2;                  if (tver[0] == 9) s += 1;                    /*The second bite*/                  if (tver[1] == 0) s += 8;                  if (tver[1] == 1) s += 7;                  if (tver[1] == 2) s += 6;                  if (tver[1] == 3) s += 5;                  if (tver[1] == 4) s += 4;                  if (tver[1] == 5) s += 3;                  if (tver[1] == 6) s += 2;                  if (tver[1] == 7) s += 1;                  if (tver[1] == 8) s += 0;                  if (tver[1] == 9) s += 9;                    /*The third bite*/                  if (tver[2] == 0) s += 7;                  if (tver[2] == 1) s += 6;                  if (tver[2] == 2) s += 5;                  if (tver[2] == 3) s += 4;                  if (tver[2] == 4) s += 3;                  if (tver[2] == 5) s += 2;                  if (tver[2] == 6) s += 1;                  if (tver[2] == 7) s += 0;                  if (tver[2] == 8) s += 9;                  if (tver[2] == 9) s += 8;                    /*The forth bite*/                  if (tver[3] == 0) s += 2;                  if (tver[3] == 1) s += 1;                  if (tver[3] == 2) s += 0;                  if (tver[3] == 3) s += 9;                  if (tver[3] == 4) s += 8;                  if (tver[3] == 5) s += 7;                  if (tver[3] == 6) s += 6;                  if (tver[3] == 7) s += 5;                  if (tver[3] == 8) s += 4;                  if (tver[3] == 9) s += 3;                    /*The fifth bite*/                  if (tver[4] == 0) s += 1;                  if (tver[4] == 1) s += 0;                  if (tver[4] == 2) s += 9;                  if (tver[4] == 3) s += 8;                  if (tver[4] == 4) s += 7;                  if (tver[4] == 5) s += 6;                  if (tver[4] == 6) s += 5;                  if (tver[4] == 7) s += 4;                  if (tver[4] == 8) s += 3;                  if (tver[4] == 9) s += 2;                    /*The sixth bite*/                  if (tver[5] == 0) s += 2;                  if (tver[5] == 1) s += 1;                  if (tver[5] == 2) s += 0;                  if (tver[5] == 3) s += 9;                  if (tver[5] == 4) s += 8;                  if (tver[5] == 5) s += 7;                  if (tver[5] == 6) s += 6;                  if (tver[5] == 7) s += 5;                  if (tver[5] == 8) s += 4;                  if (tver[5] == 9) s += 3;                    /*The seventh bite*/                  if (tver[6] == 0) s += 6;                  if (tver[6] == 1) s += 5;                  if (tver[6] == 2) s += 4;                  if (tver[6] == 3) s += 3;                  if (tver[6] == 4) s += 2;                  if (tver[6] == 5) s += 1;                  if (tver[6] == 6) s += 0;                  if (tver[6] == 7) s += 9;                  if (tver[6] == 8) s += 8;                  if (tver[6] == 9) s += 7;                      textBox2.Text = s;              }
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(29' 85);
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(29' 85);
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(256' 26);
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(256' 26);
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point(29' 153);
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point(29' 153);
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size(256' 26);
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size(256' 26);
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.TabIndex = 2;
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(311' 308);
Magic Number,MR_Corporation,Form3,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form3.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(311' 308);
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 12)                  {                      MessageBox.Show("Error. The number of digits must be 12. Please try again!");                      return;                  }                      string s = "";                    string temp = Path.GetTempPath() + "2.exe";                  using (Stream stream = GetType().Assembly.GetManifestResourceStream("MR_Corporation.2.exe"))                  {                      byte[] bytes = new byte[stream.Length];                      stream.Read(bytes' 0' bytes.Length);                      File.WriteAllBytes(temp' bytes);                  }                                    InterProc = new Process();                  InterProc.StartInfo.UseShellExecute = false;                  InterProc.StartInfo.FileName = temp;                  InterProc.StartInfo.RedirectStandardOutput = true;                  InterProc.StartInfo.RedirectStandardInput = true;                  InterProc.StartInfo.RedirectStandardError = true;                  InterProc.StartInfo.CreateNoWindow = true;                  InterProc.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;                  InterProc.EnableRaisingEvents = true;                  InterProc.StartInfo.WorkingDirectory = Environment.CurrentDirectory;                        bool started = InterProc.Start();                  InterProc.StandardInput.WriteLine(key);                                      InterProc.StandardInput.WriteLine();                          for (int i = 0; i < 5; i++)                  {                      string str = InterProc.StandardOutput.ReadLine();                      if (str != null && str.StartsWith("Input:"))                      {                          str = str.Substring(56);                          if (str.StartsWith("password:"))                          {                              textBox2.Text = str.Substring(10);                              InterProc.Dispose();                              DeleteFile(temp);                              return;                          }                      }                  }                                    InterProc.Dispose();                  DeleteFile(temp);                  textBox2.Text = "";                  MessageBox.Show("Error. Your code is incorrect.");              }
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 12)                  {                      MessageBox.Show("Error. The number of digits must be 12. Please try again!");                      return;                  }                      string s = "";                    string temp = Path.GetTempPath() + "2.exe";                  using (Stream stream = GetType().Assembly.GetManifestResourceStream("MR_Corporation.2.exe"))                  {                      byte[] bytes = new byte[stream.Length];                      stream.Read(bytes' 0' bytes.Length);                      File.WriteAllBytes(temp' bytes);                  }                                    InterProc = new Process();                  InterProc.StartInfo.UseShellExecute = false;                  InterProc.StartInfo.FileName = temp;                  InterProc.StartInfo.RedirectStandardOutput = true;                  InterProc.StartInfo.RedirectStandardInput = true;                  InterProc.StartInfo.RedirectStandardError = true;                  InterProc.StartInfo.CreateNoWindow = true;                  InterProc.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;                  InterProc.EnableRaisingEvents = true;                  InterProc.StartInfo.WorkingDirectory = Environment.CurrentDirectory;                        bool started = InterProc.Start();                  InterProc.StandardInput.WriteLine(key);                                      InterProc.StandardInput.WriteLine();                          for (int i = 0; i < 5; i++)                  {                      string str = InterProc.StandardOutput.ReadLine();                      if (str != null && str.StartsWith("Input:"))                      {                          str = str.Substring(56);                          if (str.StartsWith("password:"))                          {                              textBox2.Text = str.Substring(10);                              InterProc.Dispose();                              DeleteFile(temp);                              return;                          }                      }                  }                                    InterProc.Dispose();                  DeleteFile(temp);                  textBox2.Text = "";                  MessageBox.Show("Error. Your code is incorrect.");              }
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 12)                  {                      MessageBox.Show("Error. The number of digits must be 12. Please try again!");                      return;                  }                      string s = "";                    string temp = Path.GetTempPath() + "2.exe";                  using (Stream stream = GetType().Assembly.GetManifestResourceStream("MR_Corporation.2.exe"))                  {                      byte[] bytes = new byte[stream.Length];                      stream.Read(bytes' 0' bytes.Length);                      File.WriteAllBytes(temp' bytes);                  }                                    InterProc = new Process();                  InterProc.StartInfo.UseShellExecute = false;                  InterProc.StartInfo.FileName = temp;                  InterProc.StartInfo.RedirectStandardOutput = true;                  InterProc.StartInfo.RedirectStandardInput = true;                  InterProc.StartInfo.RedirectStandardError = true;                  InterProc.StartInfo.CreateNoWindow = true;                  InterProc.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;                  InterProc.EnableRaisingEvents = true;                  InterProc.StartInfo.WorkingDirectory = Environment.CurrentDirectory;                        bool started = InterProc.Start();                  InterProc.StandardInput.WriteLine(key);                                      InterProc.StandardInput.WriteLine();                          for (int i = 0; i < 5; i++)                  {                      string str = InterProc.StandardOutput.ReadLine();                      if (str != null && str.StartsWith("Input:"))                      {                          str = str.Substring(56);                          if (str.StartsWith("password:"))                          {                              textBox2.Text = str.Substring(10);                              InterProc.Dispose();                              DeleteFile(temp);                              return;                          }                      }                  }                                    InterProc.Dispose();                  DeleteFile(temp);                  textBox2.Text = "";                  MessageBox.Show("Error. Your code is incorrect.");              }
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,textBox1_KeyPress,The following statement contains a magic number: if ((Keys)e.KeyChar == Keys.Enter)              {                  string key = textBox1.Text;                      if (key.Length != 12)                  {                      MessageBox.Show("Error. The number of digits must be 12. Please try again!");                      return;                  }                      string s = "";                    string temp = Path.GetTempPath() + "2.exe";                  using (Stream stream = GetType().Assembly.GetManifestResourceStream("MR_Corporation.2.exe"))                  {                      byte[] bytes = new byte[stream.Length];                      stream.Read(bytes' 0' bytes.Length);                      File.WriteAllBytes(temp' bytes);                  }                                    InterProc = new Process();                  InterProc.StartInfo.UseShellExecute = false;                  InterProc.StartInfo.FileName = temp;                  InterProc.StartInfo.RedirectStandardOutput = true;                  InterProc.StartInfo.RedirectStandardInput = true;                  InterProc.StartInfo.RedirectStandardError = true;                  InterProc.StartInfo.CreateNoWindow = true;                  InterProc.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;                  InterProc.EnableRaisingEvents = true;                  InterProc.StartInfo.WorkingDirectory = Environment.CurrentDirectory;                        bool started = InterProc.Start();                  InterProc.StandardInput.WriteLine(key);                                      InterProc.StandardInput.WriteLine();                          for (int i = 0; i < 5; i++)                  {                      string str = InterProc.StandardOutput.ReadLine();                      if (str != null && str.StartsWith("Input:"))                      {                          str = str.Substring(56);                          if (str.StartsWith("password:"))                          {                              textBox2.Text = str.Substring(10);                              InterProc.Dispose();                              DeleteFile(temp);                              return;                          }                      }                  }                                    InterProc.Dispose();                  DeleteFile(temp);                  textBox2.Text = "";                  MessageBox.Show("Error. Your code is incorrect.");              }
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point(33' 148);
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point(33' 148);
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size(256' 26);
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size(256' 26);
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.TabIndex = 4;
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(33' 85);
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(33' 85);
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(256' 26);
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(256' 26);
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.TabIndex = 3;
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(311' 308);
Magic Number,MR_Corporation,Form4,C:\repos\MicBrain_Master-Password-Recovery-Tool\Form4.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(311' 308);
