Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EinarEgilsson.Utilities.InjectModuleInitializer,Injector,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Injector.cs,GetCalleeMethod,Cyclomatic complexity of the method is 10
Complex Method,EinarEgilsson.Utilities.InjectModuleInitializer,Program,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Program.cs,Main,Cyclomatic complexity of the method is 8
Long Parameter List,EinarEgilsson.Utilities.InjectModuleInitializer.Test,InjectModuleInitializerTest,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Test\UnitTests.cs,BuildAndFailInject,The method has 5 parameters.
Long Statement,EinarEgilsson.Utilities.InjectModuleInitializer,Injector,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Injector.cs,InjectInitializer,The length of the statement  "	const MethodAttributes attributes = MethodAttributes.Static | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName; " is 124.
Long Statement,EinarEgilsson.Utilities.InjectModuleInitializer,Injector,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Injector.cs,GetCalleeMethod,The length of the statement  "	if (!callee.ReturnType.FullName.Equals (typeof(void).FullName))//Don't compare the types themselves' they might be from different CLR versions. " is 143.
Long Statement,EinarEgilsson.Utilities.InjectModuleInitializer.Test,InjectModuleInitializerTest,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Test\UnitTests.cs,NoModuleInitializerTypeFound,The length of the statement  "	BuildAndFailInject (Errors.NoModuleInitializerTypeFound ()' "NoModuleInitializerTypeFound"' codefile: "NoModuleInitializerTypeFound.cs"); " is 137.
Long Statement,EinarEgilsson.Utilities.InjectModuleInitializer.Test,InjectModuleInitializerTest,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Test\UnitTests.cs,InvalidFormatForModuleInitializer,The length of the statement  "	BuildAndFailInject (Errors.InvalidFormatForModuleInitializer ()' "InvalidFormatForModuleInitializer"' "foo.foo.no.method"); " is 123.
Long Statement,EinarEgilsson.Utilities.InjectModuleInitializer.Test,InjectModuleInitializerTest,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Test\UnitTests.cs,InitializerMethodMayNotBePrivate,The length of the statement  "	BuildAndFailInject (Errors.ModuleInitializerMayNotBePrivate ()' "InitializerMethodMayNotBePrivate"' "ModuleInitializer::Private"); " is 130.
Long Statement,EinarEgilsson.Utilities.InjectModuleInitializer.Test,InjectModuleInitializerTest,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Test\UnitTests.cs,InitializerMethodMayNotBeProtected,The length of the statement  "	BuildAndFailInject (Errors.ModuleInitializerMayNotBePrivate ()' "InitializerMethodMayNotBeProtected"' "ModuleInitializer::Protected"); " is 134.
Long Statement,EinarEgilsson.Utilities.InjectModuleInitializer.Test,InjectModuleInitializerTest,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Test\UnitTests.cs,InitializerMethodMustBeStatic,The length of the statement  "	BuildAndFailInject (Errors.ModuleInitializerMustBeStatic ()' "InitializerMethodMustBeStatic"' "ModuleInitializer::NotStatic"); " is 126.
Long Statement,EinarEgilsson.Utilities.InjectModuleInitializer.Test,InjectModuleInitializerTest,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Test\UnitTests.cs,InitializerMethodMustBeVoid,The length of the statement  "	BuildAndFailInject (Errors.ModuleInitializerMustBeVoid ()' "InitializerMethodMustBeVoid"' "ModuleInitializer::NotVoid"); " is 120.
Long Statement,EinarEgilsson.Utilities.InjectModuleInitializer.Test,InjectModuleInitializerTest,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Test\UnitTests.cs,InitializerMethodMayNotHaveParameters,The length of the statement  "	BuildAndFailInject (Errors.ModuleInitializerMayNotHaveParameters ()' "InitializerMethodMayNotHaveParameters"' "ModuleInitializer::Parameters"); " is 143.
Magic Number,EinarEgilsson.Utilities.InjectModuleInitializer,Injector,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Injector.cs,GetCalleeMethod,The following statement contains a magic number: if (string.IsNullOrEmpty (moduleInitializer)) {  	methodName = DefaultInitializerMethodName;  	moduleInitializerClass = Find (module.Types' t => t.Name == DefaultInitializerClassName);  	if (moduleInitializerClass == null) {  		throw new InjectionException (Errors.NoModuleInitializerTypeFound ());  	}  } else {  	if (!moduleInitializer.Contains ("::")) {  		throw new InjectionException (Errors.InvalidFormatForModuleInitializer ());  	}  	string typeName = moduleInitializer.Substring (0' moduleInitializer.IndexOf ("::"));  	methodName = moduleInitializer.Substring (typeName.Length + 2);  	moduleInitializerClass = Find (module.Types' t => t.FullName == typeName);  	if (moduleInitializerClass == null) {  		throw new InjectionException (Errors.TypeNameDoesNotExist (typeName));  	}  }  
Magic Number,EinarEgilsson.Utilities.InjectModuleInitializer,Injector,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Injector.cs,GetCalleeMethod,The following statement contains a magic number: methodName = moduleInitializer.Substring (typeName.Length + 2);  
Magic Number,EinarEgilsson.Utilities.InjectModuleInitializer,Program,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Program.cs,Main,The following statement contains a magic number: if (args.Length == 0 || args.Length > 3 || Regex.IsMatch (args [0]' @"^((/|--?)(\?|h|help))$")) {  	PrintHelp ();  	return 1;  }  
Magic Number,EinarEgilsson.Utilities.InjectModuleInitializer,Program,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < args.Length - 1; i++) {  	var initMatch = Regex.Match (args [i]' "^/m(oduleinitializer)?:(.+)"' RegexOptions.IgnoreCase);  	if (initMatch.Success) {  		moduleInitializer = initMatch.Groups [2].Value;  	}  	var keyMatch = Regex.Match (args [i]' "^/k(eyfile)?:(.+)"' RegexOptions.IgnoreCase);  	if (keyMatch.Success) {  		keyfile = keyMatch.Groups [2].Value;  	}  	if (!initMatch.Success && !keyMatch.Success) {  		Console.Error.WriteLine ("error: Invalid argument '{0}'' type InjectModuleInitializer /? for help"' args [0]);  		return 1;  	}  }  
Magic Number,EinarEgilsson.Utilities.InjectModuleInitializer,Program,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < args.Length - 1; i++) {  	var initMatch = Regex.Match (args [i]' "^/m(oduleinitializer)?:(.+)"' RegexOptions.IgnoreCase);  	if (initMatch.Success) {  		moduleInitializer = initMatch.Groups [2].Value;  	}  	var keyMatch = Regex.Match (args [i]' "^/k(eyfile)?:(.+)"' RegexOptions.IgnoreCase);  	if (keyMatch.Success) {  		keyfile = keyMatch.Groups [2].Value;  	}  	if (!initMatch.Success && !keyMatch.Success) {  		Console.Error.WriteLine ("error: Invalid argument '{0}'' type InjectModuleInitializer /? for help"' args [0]);  		return 1;  	}  }  
Magic Number,EinarEgilsson.Utilities.InjectModuleInitializer,Program,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Program.cs,Main,The following statement contains a magic number: if (initMatch.Success) {  	moduleInitializer = initMatch.Groups [2].Value;  }  
Magic Number,EinarEgilsson.Utilities.InjectModuleInitializer,Program,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Program.cs,Main,The following statement contains a magic number: moduleInitializer = initMatch.Groups [2].Value;  
Magic Number,EinarEgilsson.Utilities.InjectModuleInitializer,Program,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Program.cs,Main,The following statement contains a magic number: if (keyMatch.Success) {  	keyfile = keyMatch.Groups [2].Value;  }  
Magic Number,EinarEgilsson.Utilities.InjectModuleInitializer,Program,F:\newReposMay17\einaregilsson_InjectModuleInitializer\Program.cs,Main,The following statement contains a magic number: keyfile = keyMatch.Groups [2].Value;  
