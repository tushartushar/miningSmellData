Implementation smell,Namespace,Class,File,Method,Description
Long Statement,caas,oauth_req,D:\SecondaryReposToAnalyze\Anonsubmission_DSV\FacebookWrapper\caas\oauth_req.aspx.cs,Button1_Click,The length of the statement  "	Response.Redirect ("/pay.aspx?orderID=1&gross=1&returnURL=http://isrc99b080:7000/finishOrder.aspx&symVal=TStore[[eeca0149e5fc0ef4cfc679951c072c0949fd1a1e()]]&signature=TStore-CD-ED-7E-14-C9-F7-D5-86-09-3A-75-1F-B0-83-9A-F5-38-35-EC-4B-15-DF-DF-9E-99-88-44-D5-7A-41-37-3E-A0-4C-E5-3A-16-7D-9C-D1-2E-3B-57-21-5D-7D-61-89"); " is 321.
Long Statement,caas,Global,D:\SecondaryReposToAnalyze\Anonsubmission_DSV\FacebookWrapper\caas\Global.asax.cs,verifySignature,The length of the statement  "		bool result = rsaProvider.VerifyData (Encoding.Unicode.GetBytes (plainText)' new SHA1CryptoServiceProvider ()' signatureBytes); " is 127.
Magic Number,caas,Global,D:\SecondaryReposToAnalyze\Anonsubmission_DSV\FacebookWrapper\caas\Global.asax.cs,convertFromStringToBytes,The following statement contains a magic number: for (int i = 0; i < arr.Length; i++)  	array [i] = Convert.ToByte (arr [i]' 16);  
Magic Number,caas,Global,D:\SecondaryReposToAnalyze\Anonsubmission_DSV\FacebookWrapper\caas\Global.asax.cs,convertFromStringToBytes,The following statement contains a magic number: array [i] = Convert.ToByte (arr [i]' 16);  
Magic Number,caas,Global,D:\SecondaryReposToAnalyze\Anonsubmission_DSV\FacebookWrapper\caas\Global.asax.cs,verifySignature,The following statement contains a magic number: try {  	cspParams = new CspParameters ();  	cspParams.ProviderType = 1;  	// PROV_RSA_FULL;  	rsaProvider = new RSACryptoServiceProvider (384' cspParams);  	// Read public key from file  	publicKeyFile = File.OpenText (root + "\\RSAKeys\\pubkey_" + signer + ".xml");  	publicKeyText = publicKeyFile.ReadToEnd ();  	// Import public key  	rsaProvider.FromXmlString (publicKeyText);  	signatureBytes = convertFromStringToBytes (signature);  	bool result = rsaProvider.VerifyData (Encoding.Unicode.GetBytes (plainText)' new SHA1CryptoServiceProvider ()' signatureBytes);  	return result;  }  catch (Exception ex) {  	Console.Write ("Fail to initialize RSA provider.");  }  
Magic Number,caas,Global,D:\SecondaryReposToAnalyze\Anonsubmission_DSV\FacebookWrapper\caas\Global.asax.cs,verifySignature,The following statement contains a magic number: rsaProvider = new RSACryptoServiceProvider (384' cspParams);  
Magic Number,caas,keygen,D:\SecondaryReposToAnalyze\Anonsubmission_DSV\FacebookWrapper\caas\keygen.aspx.cs,Button1_Click,The following statement contains a magic number: try {  	// Create a new key pair on target CSP  	cspParams = new CspParameters ();  	cspParams.ProviderType = 1;  	// PROV_RSA_FULL  	//cspParams.ProviderName; // CSP name  	cspParams.Flags = CspProviderFlags.UseArchivableKey;  	cspParams.KeyNumber = (int)KeyNumber.Exchange;  	rsaProvider = new RSACryptoServiceProvider (384' cspParams);  	// Export public key  	publicKey = rsaProvider.ToXmlString (false);  	// Write public key to file  	publicKeyFile = File.CreateText ("c:\\CCP\\RSAKeys\\pubkey.xml");  	publicKeyFile.Write (publicKey);  	// Export private/public key pair   	privateKey = rsaProvider.ToXmlString (true);  	// Write private/public key pair to file  	privateKeyFile = File.CreateText ("c:\\CCP\\RSAKeys\\prikey.xml");  	privateKeyFile.Write (privateKey);  }  catch (Exception ex) {  	// Any errors? Show them  	Console.WriteLine ("Exception generating a new key pair! More info:");  	Console.WriteLine (ex.Message);  }  finally {  	// Do some clean up if needed  	if (publicKeyFile != null) {  		publicKeyFile.Close ();  	}  	if (privateKeyFile != null) {  		privateKeyFile.Close ();  	}  }  
Magic Number,caas,keygen,D:\SecondaryReposToAnalyze\Anonsubmission_DSV\FacebookWrapper\caas\keygen.aspx.cs,Button1_Click,The following statement contains a magic number: rsaProvider = new RSACryptoServiceProvider (384' cspParams);  
