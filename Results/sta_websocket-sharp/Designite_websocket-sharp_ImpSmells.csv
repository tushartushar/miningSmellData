Implementation smell,Namespace,Class,File,Method,Description
Long Method,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,initEntities,The method has 257 lines of code.
Long Method,WebSocketSharp.Net,WebHeaderCollection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\WebHeaderCollection.cs,WebHeaderCollection,The method has 377 lines of code.
Complex Method,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,IsText,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,IsLocal,Cyclomatic complexity of the method is 9
Complex Method,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,IsPredefinedScheme,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,checkHandshakeRequest,Cyclomatic complexity of the method is 10
Complex Method,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,checkHandshakeResponse,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,send,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,sendHandshakeRequest,Cyclomatic complexity of the method is 10
Complex Method,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,sendProxyConnectRequest,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,validateSecWebSocketExtensionsServerHeader,Cyclomatic complexity of the method is 9
Complex Method,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,Close,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,CloseAsync,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,SetProxy,Cyclomatic complexity of the method is 11
Complex Method,WebSocketSharp.Server,WebSocketSessionManager,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketSessionManager.cs,Broadcast,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp.Server,WebSocketSessionManager,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketSessionManager.cs,BroadcastAsync,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp.Server,WebSocketServiceManager,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServiceManager.cs,BroadcastAsync,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setChunkSize,Cyclomatic complexity of the method is 11
Complex Method,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setTrailer,Cyclomatic complexity of the method is 11
Complex Method,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,write,Cyclomatic complexity of the method is 11
Complex Method,WebSocketSharp.Net,Cookie,C:\repos\sta_websocket-sharp\websocket-sharp\Net\Cookie.cs,toResponseStringVersion1,Cyclomatic complexity of the method is 10
Complex Method,WebSocketSharp.Net,EndPointListener,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointListener.cs,TrySearchHttpListener,Cyclomatic complexity of the method is 13
Complex Method,WebSocketSharp.Net,EndPointManager,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointManager.cs,addPrefix,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp.Net,EndPointManager,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointManager.cs,removePrefix,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,processInput,Cyclomatic complexity of the method is 9
Complex Method,WebSocketSharp.Net,HttpListenerRequest,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerRequest.cs,AddHeader,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp.Net,HttpListenerRequest,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerRequest.cs,FinishInitialization,Cyclomatic complexity of the method is 9
Complex Method,WebSocketSharp.Net,HttpListenerResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerResponse.cs,WriteHeadersTo,Cyclomatic complexity of the method is 10
Complex Method,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,CreateUser,Cyclomatic complexity of the method is 13
Complex Method,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,HtmlDecode,Cyclomatic complexity of the method is 10
Complex Method,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp.Net,RequestStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\RequestStream.cs,fillFromBuffer,Cyclomatic complexity of the method is 10
Complex Method,WebSocketSharp.Net,ChunkedRequestStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkedRequestStream.cs,BeginRead,Cyclomatic complexity of the method is 9
Complex Method,WebSocketSharp.Net,HttpListenerPrefix,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerPrefix.cs,CheckPrefix,Cyclomatic complexity of the method is 10
Long Parameter List,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,CopyToAsync,The method has 5 parameters. Parameters: source' destination' bufferLength' completed' error
Long Parameter List,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,ReadBytesAsync,The method has 5 parameters. Parameters: stream' length' bufferLength' completed' error
Long Parameter List,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,WriteBytesAsync,The method has 5 parameters. Parameters: stream' bytes' bufferLength' completed' error
Long Parameter List,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,WebSocketFrame,The method has 5 parameters. Parameters: fin' opcode' data' compressed' mask
Long Parameter List,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,WebSocketFrame,The method has 5 parameters. Parameters: fin' opcode' payloadData' compressed' mask
Long Parameter List,WebSocketSharp.Net,Cookie,C:\repos\sta_websocket-sharp\websocket-sharp\Net\Cookie.cs,hash,The method has 5 parameters. Parameters: i' j' k' l' m
Long Parameter List,WebSocketSharp.Net,EndPointListener,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointListener.cs,EndPointListener,The method has 5 parameters. Parameters: endpoint' secure' certificateFolderPath' sslConfig' reuseAddress
Long Parameter List,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,CreateUser,The method has 5 parameters. Parameters: response' scheme' realm' method' credentialsFinder
Long Parameter List,WebSocketSharp.Net,RequestStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\RequestStream.cs,RequestStream,The method has 5 parameters. Parameters: stream' buffer' offset' count' contentLength
Long Parameter List,WebSocketSharp.Net,RequestStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\RequestStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,WebSocketSharp.Net,RequestStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\RequestStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,WebSocketSharp.Net,ResponseStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ResponseStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,WebSocketSharp.Net,ResponseStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ResponseStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,WebSocketSharp.Net,WebHeaderCollection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\WebHeaderCollection.cs,doWithCheckingState,The method has 5 parameters. Parameters: action' name' value' response' setState
Long Parameter List,WebSocketSharp.Net,ChunkedRequestStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkedRequestStream.cs,ChunkedRequestStream,The method has 5 parameters. Parameters: stream' buffer' offset' count' context
Long Parameter List,WebSocketSharp.Net,ChunkedRequestStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkedRequestStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,WebSocketSharp.Net,AuthenticationResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\AuthenticationResponse.cs,createA1,The method has 5 parameters. Parameters: username' password' realm' nonce' cnonce
Long Parameter List,WebSocketSharp.Net,ClientSslConfiguration,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ClientSslConfiguration.cs,defaultSelectClientCertificate,The method has 5 parameters. Parameters: sender' targetHost' clientCertificates' serverCertificate' acceptableIssuers
Long Parameter List,WebSocketSharp.Net.WebSockets,TcpListenerWebSocketContext,C:\repos\sta_websocket-sharp\websocket-sharp\Net\WebSockets\TcpListenerWebSocketContext.cs,TcpListenerWebSocketContext,The method has 5 parameters. Parameters: tcpClient' protocol' secure' sslConfig' logger
Complex Conditional,WebSocketSharp,HttpBase,C:\repos\sta_websocket-sharp\websocket-sharp\HttpBase.cs,readHeaders,The conditional expression  "stream.ReadByte ().EqualsWith ('\r'' add) &&              stream.ReadByte ().EqualsWith ('\n'' add) &&              stream.ReadByte ().EqualsWith ('\r'' add) &&              stream.ReadByte ().EqualsWith ('\n'' add)"  is complex.
Complex Conditional,WebSocketSharp.Net,CookieCollection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\CookieCollection.cs,searchCookie,The conditional expression  "c.Name.Equals (name' StringComparison.InvariantCultureIgnoreCase) &&              c.Path.Equals (path' StringComparison.InvariantCulture) &&              c.Domain.Equals (domain' StringComparison.InvariantCultureIgnoreCase) &&              c.Version == ver"  is complex.
Complex Conditional,WebSocketSharp.Net,HttpListenerRequest,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerRequest.cs,SetRequestLine,The conditional expression  "ver.Length != 8 ||            !ver.StartsWith ("HTTP/") ||            !tryCreateVersion (ver.Substring (5)' out _version) ||            _version.Major < 1"  is complex.
Complex Conditional,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,urlEncode,The conditional expression  "(c < '0') ||            (c < 'A' && c > '9') ||            (c > 'Z' && c < 'a') ||            (c > 'z')"  is complex.
Complex Conditional,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,CreateRequestUrl,The conditional expression  "requestUri == null || requestUri.Length == 0 || host == null || host.Length == 0"  is complex.
Complex Conditional,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,InternalParseQueryString,The conditional expression  "query == null || (len = query.Length) == 0 || (len == 1 && query[0] == '?')"  is complex.
Complex Conditional,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,HtmlEncode,The conditional expression  "c == '&' || c == '"' || c == '<' || c == '>' || c > 159"  is complex.
Complex Conditional,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,UrlEncode,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Empty Catch Block,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,ReadBytes,The method has an empty catch block.
Empty Catch Block,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,ReadBytes,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Server,WebSocketServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServer.cs,abort,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Server,HttpServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\HttpServer.cs,abort,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,EndPointListener,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointListener.cs,getCertificate,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,EndPointListener,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointListener.cs,onAccept,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,closeSocket,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,disposeTimer,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,CreateUser,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,ResponseStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ResponseStream.cs,writeChunkedWithoutThrowingException,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,ResponseStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ResponseStream.cs,writeWithoutThrowingException,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,AuthenticationResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\AuthenticationResponse.cs,Parse,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,HttpListenerAsyncResult,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerAsyncResult.cs,complete,The method has an empty catch block.
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,compress,The following statement contains a magic number: using (var ds = new DeflateStream (output' CompressionMode.Compress' true)) {          stream.CopyTo (ds' 1024);          ds.Close (); // BFINAL set to 1.          output.Write (_last' 0' 1);          output.Position = 0;            return output;        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,decompress,The following statement contains a magic number: using (var ds = new DeflateStream (stream' CompressionMode.Decompress' true)) {          ds.CopyTo (output' 1024);          output.Position = 0;            return output;        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,IsPortNumber,The following statement contains a magic number: return value > 0 && value < 65536;
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,IsReserved,The following statement contains a magic number: return code == 1004               || code == 1005               || code == 1006               || code == 1015;
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,IsReserved,The following statement contains a magic number: return code == 1004               || code == 1005               || code == 1006               || code == 1015;
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,IsReserved,The following statement contains a magic number: return code == 1004               || code == 1005               || code == 1006               || code == 1015;
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,IsReserved,The following statement contains a magic number: return code == 1004               || code == 1005               || code == 1006               || code == 1015;
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,SplitHeaderValue,The following statement contains a magic number: var buff = new StringBuilder (32);
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,ToByteArray,The following statement contains a magic number: using (var output = new MemoryStream ()) {          stream.Position = 0;          stream.CopyTo (output' 1024);          output.Close ();            return output.ToArray ();        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,TryCreateWebSocketUri,The following statement contains a magic number: result = port != -1                 ? uri                 : new Uri (                     String.Format (                       "{0}://{1}:{2}{3}"'                       schm'                       uri.Host'                       schm == "ws" ? 80 : 443'                       uri.PathAndQuery                     )                   );
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,TryCreateWebSocketUri,The following statement contains a magic number: result = port != -1                 ? uri                 : new Uri (                     String.Format (                       "{0}://{1}:{2}{3}"'                       schm'                       uri.Host'                       schm == "ws" ? 80 : 443'                       uri.PathAndQuery                     )                   );
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,IsCloseStatusCode,The following statement contains a magic number: return value > 999 && value < 5000;
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,IsCloseStatusCode,The following statement contains a magic number: return value > 999 && value < 5000;
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,IsPredefinedScheme,The following statement contains a magic number: if (value == null || value.Length < 2)          return false;
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,MaybeUri,The following statement contains a magic number: if (idx >= 10)          return false;
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,ToString,The following statement contains a magic number: var buff = new StringBuilder (64);
Magic Number,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,WriteContent,The following statement contains a magic number: if (len <= Int32.MaxValue)          output.Write (content' 0' (int) len);        else          output.WriteBytes (content' 1024);
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,WebSocket,The following statement contains a magic number: _maxRetryCountForConnect = 10;
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,WebSocket,The following statement contains a magic number: FragmentLength = 1016;
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,WebSocket,The following statement contains a magic number: _waitTime = TimeSpan.FromSeconds (5);
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,close,The following statement contains a magic number: if (code == 1005) { // == no status          close (PayloadData.Empty' true' true' false);          return;        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,closeAsync,The following statement contains a magic number: if (code == 1005) { // == no status          closeAsync (PayloadData.Empty' true' true' false);          return;        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,createExtensions,The following statement contains a magic number: var buff = new StringBuilder (80);
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,createExtensions,The following statement contains a magic number: if (len > 2) {          buff.Length = len - 2;          return buff.ToString ();        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,createExtensions,The following statement contains a magic number: if (len > 2) {          buff.Length = len - 2;          return buff.ToString ();        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,processFragmentFrame,The following statement contains a magic number: _fragmentsBuffer.WriteBytes (frame.PayloadData.ApplicationData' 1024);
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,processSecWebSocketExtensionsClientHeader,The following statement contains a magic number: var buff = new StringBuilder (80);
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,processSecWebSocketExtensionsClientHeader,The following statement contains a magic number: if (len > 2) {          buff.Length = len - 2;          _extensions = buff.ToString ();        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,processSecWebSocketExtensionsClientHeader,The following statement contains a magic number: if (len > 2) {          buff.Length = len - 2;          _extensions = buff.ToString ();        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,send,The following statement contains a magic number: var n = rem == 0 ? quo - 2 : quo - 1;
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,sendHandshakeRequest,The following statement contains a magic number: var res = sendHttpRequest (req' 90000);
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,sendHandshakeRequest,The following statement contains a magic number: if (res.IsUnauthorized) {          var chal = res.Headers["WWW-Authenticate"];          _logger.Warn (String.Format ("Received an authentication requirement for '{0}'."' chal));          if (chal.IsNullOrEmpty ()) {            _logger.Error ("No authentication challenge is specified.");            return res;          }            _authChallenge = AuthenticationChallenge.Parse (chal);          if (_authChallenge == null) {            _logger.Error ("An invalid authentication challenge is specified.");            return res;          }            if (_credentials != null &&              (!_preAuth || _authChallenge.Scheme == AuthenticationSchemes.Digest)) {            if (res.HasConnectionClose) {              releaseClientResources ();              setClientStream ();            }              var authRes = new AuthenticationResponse (_authChallenge' _credentials' _nonceCount);            _nonceCount = authRes.NonceCount;            req.Headers["Authorization"] = authRes.ToString ();            res = sendHttpRequest (req' 15000);          }        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,sendProxyConnectRequest,The following statement contains a magic number: var res = sendHttpRequest (req' 90000);
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,sendProxyConnectRequest,The following statement contains a magic number: if (res.IsProxyAuthenticationRequired) {          var chal = res.Headers["Proxy-Authenticate"];          _logger.Warn (            String.Format ("Received a proxy authentication requirement for '{0}'."' chal));            if (chal.IsNullOrEmpty ())            throw new WebSocketException ("No proxy authentication challenge is specified.");            var authChal = AuthenticationChallenge.Parse (chal);          if (authChal == null)            throw new WebSocketException ("An invalid proxy authentication challenge is specified.");            if (_proxyCredentials != null) {            if (res.HasConnectionClose) {              releaseClientResources ();              _tcpClient = new TcpClient (_proxyUri.DnsSafeHost' _proxyUri.Port);              _stream = _tcpClient.GetStream ();            }              var authRes = new AuthenticationResponse (authChal' _proxyCredentials' 0);            req.Headers["Proxy-Authorization"] = authRes.ToString ();            res = sendHttpRequest (req' 15000);          }            if (res.IsProxyAuthenticationRequired)            throw new WebSocketException ("A proxy authentication is required.");        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,CreateBase64Key,The following statement contains a magic number: var src = new byte[16];
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,CreateResponseKey,The following statement contains a magic number: var buff = new StringBuilder (base64Key' 64);
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,Close,The following statement contains a magic number: close (1005' String.Empty);
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,Close,The following statement contains a magic number: if (_client && code == 1011) {          var msg = "1011 cannot be used.";          throw new ArgumentException (msg' "code");        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,Close,The following statement contains a magic number: if (!_client && code == 1010) {          var msg = "1010 cannot be used.";          throw new ArgumentException (msg' "code");        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,Close,The following statement contains a magic number: if (_client && code == 1011) {          var msg = "1011 cannot be used.";          throw new ArgumentException (msg' "code");        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,Close,The following statement contains a magic number: if (!_client && code == 1010) {          var msg = "1010 cannot be used.";          throw new ArgumentException (msg' "code");        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,Close,The following statement contains a magic number: if (code == 1005) {          var msg = "1005 cannot be used.";          throw new ArgumentException (msg' "code");        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,Close,The following statement contains a magic number: if (bytes.Length > 123) {          var msg = "Its size is greater than 123 bytes.";          throw new ArgumentOutOfRangeException ("reason"' msg);        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,Close,The following statement contains a magic number: if (bytes.Length > 123) {          var msg = "Its size is greater than 123 bytes.";          throw new ArgumentOutOfRangeException ("reason"' msg);        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,CloseAsync,The following statement contains a magic number: closeAsync (1005' String.Empty);
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,CloseAsync,The following statement contains a magic number: if (_client && code == 1011) {          var msg = "1011 cannot be used.";          throw new ArgumentException (msg' "code");        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,CloseAsync,The following statement contains a magic number: if (!_client && code == 1010) {          var msg = "1010 cannot be used.";          throw new ArgumentException (msg' "code");        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,CloseAsync,The following statement contains a magic number: if (_client && code == 1011) {          var msg = "1011 cannot be used.";          throw new ArgumentException (msg' "code");        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,CloseAsync,The following statement contains a magic number: if (!_client && code == 1010) {          var msg = "1010 cannot be used.";          throw new ArgumentException (msg' "code");        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,CloseAsync,The following statement contains a magic number: if (code == 1005) {          var msg = "1005 cannot be used.";          throw new ArgumentException (msg' "code");        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,CloseAsync,The following statement contains a magic number: if (bytes.Length > 123) {          var msg = "Its size is greater than 123 bytes.";          throw new ArgumentOutOfRangeException ("reason"' msg);        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,CloseAsync,The following statement contains a magic number: if (bytes.Length > 123) {          var msg = "Its size is greater than 123 bytes.";          throw new ArgumentOutOfRangeException ("reason"' msg);        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,Ping,The following statement contains a magic number: if (bytes.Length > 125) {          var msg = "Its size is greater than 125 bytes.";          throw new ArgumentOutOfRangeException ("message"' msg);        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocket.cs,Dispose,The following statement contains a magic number: close (1001' String.Empty);
Magic Number,WebSocketSharp,PayloadData,C:\repos\sta_websocket-sharp\websocket-sharp\PayloadData.cs,PayloadData,The following statement contains a magic number: _code = 1005;
Magic Number,WebSocketSharp,PayloadData,C:\repos\sta_websocket-sharp\websocket-sharp\PayloadData.cs,Mask,The following statement contains a magic number: for (long i = 0; i < _length; i++)          _data[i] = (byte) (_data[i] ^ key[i % 4]);
Magic Number,WebSocketSharp,LogData,C:\repos\sta_websocket-sharp\websocket-sharp\LogData.cs,ToString,The following statement contains a magic number: var buff = new StringBuilder (String.Format ("{0}{1}\n"' headerAndCaller' msgs[0])' 64);
Magic Number,WebSocketSharp,Logger,C:\repos\sta_websocket-sharp\websocket-sharp\Logger.cs,output,The following statement contains a magic number: lock (_sync) {          if (_level > level)            return;            LogData data = null;          try {            data = new LogData (level' new StackFrame (2' true)' message);            _output (data' _file);          }          catch (Exception ex) {            data = new LogData (LogLevel.Fatal' new StackFrame (0' true)' ex.Message);            Console.WriteLine (data.ToString ());          }        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,WebSocketFrame,The following statement contains a magic number: if (len < 126) {          _payloadLength = (byte) len;          _extPayloadLength = WebSocket.EmptyBytes;        }        else if (len < 0x010000) {          _payloadLength = (byte) 126;          _extPayloadLength = ((ushort) len).InternalToByteArray (ByteOrder.Big);        }        else {          _payloadLength = (byte) 127;          _extPayloadLength = len.InternalToByteArray (ByteOrder.Big);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,WebSocketFrame,The following statement contains a magic number: if (len < 126) {          _payloadLength = (byte) len;          _extPayloadLength = WebSocket.EmptyBytes;        }        else if (len < 0x010000) {          _payloadLength = (byte) 126;          _extPayloadLength = ((ushort) len).InternalToByteArray (ByteOrder.Big);        }        else {          _payloadLength = (byte) 127;          _extPayloadLength = len.InternalToByteArray (ByteOrder.Big);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,WebSocketFrame,The following statement contains a magic number: if (len < 126) {          _payloadLength = (byte) len;          _extPayloadLength = WebSocket.EmptyBytes;        }        else if (len < 0x010000) {          _payloadLength = (byte) 126;          _extPayloadLength = ((ushort) len).InternalToByteArray (ByteOrder.Big);        }        else {          _payloadLength = (byte) 127;          _extPayloadLength = len.InternalToByteArray (ByteOrder.Big);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,createMaskingKey,The following statement contains a magic number: var key = new byte[4];
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: var cnt = (long) (len / 4);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: var rem = (int) (len % 4);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: if (cnt < 10000) {          cntDigit = 4;          cntFmt = "{0'4}";        }        else if (cnt < 0x010000) {          cntDigit = 4;          cntFmt = "{0'4:X}";        }        else if (cnt < 0x0100000000) {          cntDigit = 8;          cntFmt = "{0'8:X}";        }        else {          cntDigit = 16;          cntFmt = "{0'16:X}";        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: if (cnt < 10000) {          cntDigit = 4;          cntFmt = "{0'4}";        }        else if (cnt < 0x010000) {          cntDigit = 4;          cntFmt = "{0'4:X}";        }        else if (cnt < 0x0100000000) {          cntDigit = 8;          cntFmt = "{0'8:X}";        }        else {          cntDigit = 16;          cntFmt = "{0'16:X}";        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: if (cnt < 10000) {          cntDigit = 4;          cntFmt = "{0'4}";        }        else if (cnt < 0x010000) {          cntDigit = 4;          cntFmt = "{0'4:X}";        }        else if (cnt < 0x0100000000) {          cntDigit = 8;          cntFmt = "{0'8:X}";        }        else {          cntDigit = 16;          cntFmt = "{0'16:X}";        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: if (cnt < 10000) {          cntDigit = 4;          cntFmt = "{0'4}";        }        else if (cnt < 0x010000) {          cntDigit = 4;          cntFmt = "{0'4:X}";        }        else if (cnt < 0x0100000000) {          cntDigit = 8;          cntFmt = "{0'8:X}";        }        else {          cntDigit = 16;          cntFmt = "{0'16:X}";        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: if (cnt < 10000) {          cntDigit = 4;          cntFmt = "{0'4}";        }        else if (cnt < 0x010000) {          cntDigit = 4;          cntFmt = "{0'4:X}";        }        else if (cnt < 0x0100000000) {          cntDigit = 8;          cntFmt = "{0'8:X}";        }        else {          cntDigit = 16;          cntFmt = "{0'16:X}";        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: var output = new StringBuilder (64);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt) {            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (bytes[j + 3]' 2).PadLeft (8' '0'));              continue;          }            if (rem > 0)            printLine (              Convert.ToString (bytes[j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (bytes[j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (bytes[j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,print,The following statement contains a magic number: var extPayloadLen = payloadLen > 125 ? frame.FullPayloadLength.ToString () : String.Empty;
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,print,The following statement contains a magic number: var payload = payloadLen == 0                      ? String.Empty                      : payloadLen > 125                        ? "---"                        : frame.IsText && !(frame.IsFragment || frame.IsMasked || frame.IsCompressed)                          ? frame._payloadData.ApplicationData.UTF8Decode ()                          : frame._payloadData.ToString ();
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,processHeader,The following statement contains a magic number: if (header.Length != 2)          throw new WebSocketException ("The header of a frame cannot be read from the stream.");
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,processHeader,The following statement contains a magic number: var err = !opcode.IsSupported ()                  ? "An unsupported opcode."                  : !opcode.IsData () && rsv1 == Rsv.On                    ? "A non data frame is compressed."                    : opcode.IsControl () && fin == Fin.More                      ? "A control frame is fragmented."                      : opcode.IsControl () && payloadLen > 125                        ? "A control frame has a long payload length."                        : null;
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,readHeader,The following statement contains a magic number: return processHeader (stream.ReadBytes (2));
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,readHeaderAsync,The following statement contains a magic number: stream.ReadBytesAsync (2' bytes => completed (processHeader (bytes))' error);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,readMaskingKey,The following statement contains a magic number: var len = frame.IsMasked ? 4 : 0;
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,readMaskingKeyAsync,The following statement contains a magic number: var len = frame.IsMasked ? 4 : 0;
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,readPayloadData,The following statement contains a magic number: var bytes = frame._payloadLength < 127                    ? stream.ReadBytes ((int) len)                    : stream.ReadBytes (llen' 1024);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,readPayloadData,The following statement contains a magic number: var bytes = frame._payloadLength < 127                    ? stream.ReadBytes ((int) len)                    : stream.ReadBytes (llen' 1024);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,readPayloadDataAsync,The following statement contains a magic number: if (frame._payloadLength < 127) {          stream.ReadBytesAsync ((int) len' compl' error);          return;        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,readPayloadDataAsync,The following statement contains a magic number: stream.ReadBytesAsync (llen' 1024' compl' error);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,ToArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).InternalToByteArray (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _payloadLength == 126 ? 2 : 8);            if (_mask == Mask.On)            buff.Write (_maskingKey' 0' 4);            if (_payloadLength > 0) {            var bytes = _payloadData.ToArray ();            if (_payloadLength < 127)              buff.Write (bytes' 0' bytes.Length);            else              buff.WriteBytes (bytes' 1024);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,ToArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).InternalToByteArray (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _payloadLength == 126 ? 2 : 8);            if (_mask == Mask.On)            buff.Write (_maskingKey' 0' 4);            if (_payloadLength > 0) {            var bytes = _payloadData.ToArray ();            if (_payloadLength < 127)              buff.Write (bytes' 0' bytes.Length);            else              buff.WriteBytes (bytes' 1024);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,ToArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).InternalToByteArray (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _payloadLength == 126 ? 2 : 8);            if (_mask == Mask.On)            buff.Write (_maskingKey' 0' 4);            if (_payloadLength > 0) {            var bytes = _payloadData.ToArray ();            if (_payloadLength < 127)              buff.Write (bytes' 0' bytes.Length);            else              buff.WriteBytes (bytes' 1024);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,ToArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).InternalToByteArray (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _payloadLength == 126 ? 2 : 8);            if (_mask == Mask.On)            buff.Write (_maskingKey' 0' 4);            if (_payloadLength > 0) {            var bytes = _payloadData.ToArray ();            if (_payloadLength < 127)              buff.Write (bytes' 0' bytes.Length);            else              buff.WriteBytes (bytes' 1024);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,ToArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).InternalToByteArray (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _payloadLength == 126 ? 2 : 8);            if (_mask == Mask.On)            buff.Write (_maskingKey' 0' 4);            if (_payloadLength > 0) {            var bytes = _payloadData.ToArray ();            if (_payloadLength < 127)              buff.Write (bytes' 0' bytes.Length);            else              buff.WriteBytes (bytes' 1024);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,ToArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).InternalToByteArray (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _payloadLength == 126 ? 2 : 8);            if (_mask == Mask.On)            buff.Write (_maskingKey' 0' 4);            if (_payloadLength > 0) {            var bytes = _payloadData.ToArray ();            if (_payloadLength < 127)              buff.Write (bytes' 0' bytes.Length);            else              buff.WriteBytes (bytes' 1024);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,ToArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).InternalToByteArray (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _payloadLength == 126 ? 2 : 8);            if (_mask == Mask.On)            buff.Write (_maskingKey' 0' 4);            if (_payloadLength > 0) {            var bytes = _payloadData.ToArray ();            if (_payloadLength < 127)              buff.Write (bytes' 0' bytes.Length);            else              buff.WriteBytes (bytes' 1024);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,ToArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).InternalToByteArray (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _payloadLength == 126 ? 2 : 8);            if (_mask == Mask.On)            buff.Write (_maskingKey' 0' 4);            if (_payloadLength > 0) {            var bytes = _payloadData.ToArray ();            if (_payloadLength < 127)              buff.Write (bytes' 0' bytes.Length);            else              buff.WriteBytes (bytes' 1024);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,ToArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).InternalToByteArray (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _payloadLength == 126 ? 2 : 8);            if (_mask == Mask.On)            buff.Write (_maskingKey' 0' 4);            if (_payloadLength > 0) {            var bytes = _payloadData.ToArray ();            if (_payloadLength < 127)              buff.Write (bytes' 0' bytes.Length);            else              buff.WriteBytes (bytes' 1024);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\sta_websocket-sharp\websocket-sharp\WebSocketFrame.cs,ToArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).InternalToByteArray (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _payloadLength == 126 ? 2 : 8);            if (_mask == Mask.On)            buff.Write (_maskingKey' 0' 4);            if (_payloadLength > 0) {            var bytes = _payloadData.ToArray ();            if (_payloadLength < 127)              buff.Write (bytes' 0' bytes.Length);            else              buff.WriteBytes (bytes' 1024);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,HttpBase,C:\repos\sta_websocket-sharp\websocket-sharp\HttpBase.cs,readEntityBody,The following statement contains a magic number: return len > 1024               ? stream.ReadBytes (len' 1024)               : len > 0                 ? stream.ReadBytes ((int) len)                 : null;
Magic Number,WebSocketSharp,HttpBase,C:\repos\sta_websocket-sharp\websocket-sharp\HttpBase.cs,readEntityBody,The following statement contains a magic number: return len > 1024               ? stream.ReadBytes (len' 1024)               : len > 0                 ? stream.ReadBytes ((int) len)                 : null;
Magic Number,WebSocketSharp,HttpRequest,C:\repos\sta_websocket-sharp\websocket-sharp\HttpRequest.cs,CreateConnectRequest,The following statement contains a magic number: req.Headers["Host"] = port == 80 ? host : authority;
Magic Number,WebSocketSharp,HttpRequest,C:\repos\sta_websocket-sharp\websocket-sharp\HttpRequest.cs,CreateWebSocketRequest,The following statement contains a magic number: headers["Host"] = (port == 80 && schm == "ws") || (port == 443 && schm == "wss")                          ? uri.DnsSafeHost                          : uri.Authority;
Magic Number,WebSocketSharp,HttpRequest,C:\repos\sta_websocket-sharp\websocket-sharp\HttpRequest.cs,CreateWebSocketRequest,The following statement contains a magic number: headers["Host"] = (port == 80 && schm == "ws") || (port == 443 && schm == "wss")                          ? uri.DnsSafeHost                          : uri.Authority;
Magic Number,WebSocketSharp,HttpRequest,C:\repos\sta_websocket-sharp\websocket-sharp\HttpRequest.cs,Parse,The following statement contains a magic number: var requestLine = headerParts[0].Split (new[] { ' ' }' 3);
Magic Number,WebSocketSharp,HttpRequest,C:\repos\sta_websocket-sharp\websocket-sharp\HttpRequest.cs,Parse,The following statement contains a magic number: if (requestLine.Length != 3)          throw new ArgumentException ("Invalid request line: " + headerParts[0]);
Magic Number,WebSocketSharp,HttpRequest,C:\repos\sta_websocket-sharp\websocket-sharp\HttpRequest.cs,Parse,The following statement contains a magic number: return new HttpRequest (          requestLine[0]' requestLine[1]' new Version (requestLine[2].Substring (5))' headers);
Magic Number,WebSocketSharp,HttpRequest,C:\repos\sta_websocket-sharp\websocket-sharp\HttpRequest.cs,Parse,The following statement contains a magic number: return new HttpRequest (          requestLine[0]' requestLine[1]' new Version (requestLine[2].Substring (5))' headers);
Magic Number,WebSocketSharp,HttpRequest,C:\repos\sta_websocket-sharp\websocket-sharp\HttpRequest.cs,SetCookies,The following statement contains a magic number: var buff = new StringBuilder (64);
Magic Number,WebSocketSharp,HttpRequest,C:\repos\sta_websocket-sharp\websocket-sharp\HttpRequest.cs,SetCookies,The following statement contains a magic number: if (len > 2) {          buff.Length = len - 2;          Headers["Cookie"] = buff.ToString ();        }
Magic Number,WebSocketSharp,HttpRequest,C:\repos\sta_websocket-sharp\websocket-sharp\HttpRequest.cs,SetCookies,The following statement contains a magic number: if (len > 2) {          buff.Length = len - 2;          Headers["Cookie"] = buff.ToString ();        }
Magic Number,WebSocketSharp,HttpRequest,C:\repos\sta_websocket-sharp\websocket-sharp\HttpRequest.cs,ToString,The following statement contains a magic number: var output = new StringBuilder (64);
Magic Number,WebSocketSharp,HttpResponse,C:\repos\sta_websocket-sharp\websocket-sharp\HttpResponse.cs,Parse,The following statement contains a magic number: var statusLine = headerParts[0].Split (new[] { ' ' }' 3);
Magic Number,WebSocketSharp,HttpResponse,C:\repos\sta_websocket-sharp\websocket-sharp\HttpResponse.cs,Parse,The following statement contains a magic number: if (statusLine.Length != 3)          throw new ArgumentException ("Invalid status line: " + headerParts[0]);
Magic Number,WebSocketSharp,HttpResponse,C:\repos\sta_websocket-sharp\websocket-sharp\HttpResponse.cs,Parse,The following statement contains a magic number: return new HttpResponse (          statusLine[1]' statusLine[2]' new Version (statusLine[0].Substring (5))' headers);
Magic Number,WebSocketSharp,HttpResponse,C:\repos\sta_websocket-sharp\websocket-sharp\HttpResponse.cs,Parse,The following statement contains a magic number: return new HttpResponse (          statusLine[1]' statusLine[2]' new Version (statusLine[0].Substring (5))' headers);
Magic Number,WebSocketSharp,HttpResponse,C:\repos\sta_websocket-sharp\websocket-sharp\HttpResponse.cs,ToString,The following statement contains a magic number: var output = new StringBuilder (64);
Magic Number,WebSocketSharp.Server,WebSocketServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServer.cs,WebSocketServer,The following statement contains a magic number: init (addr.ToString ()' addr' 80' false);
Magic Number,WebSocketSharp.Server,WebSocketServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServer.cs,abort,The following statement contains a magic number: try {          try {            _listener.Stop ();          }          finally {            _services.Stop (1006' String.Empty);          }        }        catch {        }
Magic Number,WebSocketSharp.Server,WebSocketServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServer.cs,start,The following statement contains a magic number: lock (_sync) {          if (_state == ServerState.Start) {            _log.Info ("The server has already started.");            return;          }            if (_state == ServerState.ShuttingDown) {            _log.Warn ("The server is shutting down.");            return;          }            _sslConfigInUse = sslConfig;          _realmInUse = getRealm ();            _services.Start ();          try {            startReceiving ();          }          catch {            _services.Stop (1011' String.Empty);            throw;          }            _state = ServerState.Start;        }
Magic Number,WebSocketSharp.Server,WebSocketServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServer.cs,stop,The following statement contains a magic number: try {          var threw = false;          try {            stopReceiving (5000);          }          catch {            threw = true;            throw;          }          finally {            try {              _services.Stop (code' reason);            }            catch {              if (!threw)                throw;            }          }        }        finally {          _state = ServerState.Stop;        }
Magic Number,WebSocketSharp.Server,WebSocketServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServer.cs,Stop,The following statement contains a magic number: stop (1005' String.Empty);
Magic Number,WebSocketSharp.Server,WebSocketServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServer.cs,Stop,The following statement contains a magic number: if (code == 1010) {          var msg = "1010 cannot be used.";          throw new ArgumentException (msg' "code");        }
Magic Number,WebSocketSharp.Server,WebSocketServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServer.cs,Stop,The following statement contains a magic number: if (!reason.IsNullOrEmpty ()) {          if (code == 1005) {            var msg = "1005 cannot be used.";            throw new ArgumentException (msg' "code");          }            byte[] bytes;          if (!reason.TryGetUTF8EncodedBytes (out bytes)) {            var msg = "It could not be UTF-8-encoded.";            throw new ArgumentException (msg' "reason");          }            if (bytes.Length > 123) {            var msg = "Its size is greater than 123 bytes.";            throw new ArgumentOutOfRangeException ("reason"' msg);          }        }
Magic Number,WebSocketSharp.Server,WebSocketServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServer.cs,Stop,The following statement contains a magic number: if (!reason.IsNullOrEmpty ()) {          if (code == 1005) {            var msg = "1005 cannot be used.";            throw new ArgumentException (msg' "code");          }            byte[] bytes;          if (!reason.TryGetUTF8EncodedBytes (out bytes)) {            var msg = "It could not be UTF-8-encoded.";            throw new ArgumentException (msg' "reason");          }            if (bytes.Length > 123) {            var msg = "Its size is greater than 123 bytes.";            throw new ArgumentOutOfRangeException ("reason"' msg);          }        }
Magic Number,WebSocketSharp.Server,WebSocketServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServer.cs,Stop,The following statement contains a magic number: if (!reason.IsNullOrEmpty ()) {          if (code == CloseStatusCode.NoStatus) {            var msg = "NoStatus cannot be used.";            throw new ArgumentException (msg' "code");          }            byte[] bytes;          if (!reason.TryGetUTF8EncodedBytes (out bytes)) {            var msg = "It could not be UTF-8-encoded.";            throw new ArgumentException (msg' "reason");          }            if (bytes.Length > 123) {            var msg = "Its size is greater than 123 bytes.";            throw new ArgumentOutOfRangeException ("reason"' msg);          }        }
Magic Number,WebSocketSharp.Server,HttpServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\HttpServer.cs,HttpServer,The following statement contains a magic number: init ("*"' System.Net.IPAddress.Any' 80' false);
Magic Number,WebSocketSharp.Server,HttpServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\HttpServer.cs,abort,The following statement contains a magic number: try {          try {            _services.Stop (1006' String.Empty);          }          finally {            _listener.Abort ();          }        }        catch {        }
Magic Number,WebSocketSharp.Server,HttpServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\HttpServer.cs,createFilePath,The following statement contains a magic number: return new StringBuilder (_docRootPath' 32)               .AppendFormat ("/{0}"' childPath)               .ToString ()               .Replace ('\\'' '/');
Magic Number,WebSocketSharp.Server,HttpServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\HttpServer.cs,processRequest,The following statement contains a magic number: if (evt != null)          evt (this' new HttpRequestEventArgs (context' _docRootPath));        else          context.Response.StatusCode = 501;
Magic Number,WebSocketSharp.Server,HttpServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\HttpServer.cs,start,The following statement contains a magic number: lock (_sync) {          if (_state == ServerState.Start) {            _log.Info ("The server has already started.");            return;          }            if (_state == ServerState.ShuttingDown) {            _log.Warn ("The server is shutting down.");            return;          }            _services.Start ();            try {            startReceiving ();          }          catch {            _services.Stop (1011' String.Empty);            throw;          }            _state = ServerState.Start;        }
Magic Number,WebSocketSharp.Server,HttpServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\HttpServer.cs,stop,The following statement contains a magic number: try {          var threw = false;          try {            _services.Stop (code' reason);          }          catch {            threw = true;            throw;          }          finally {            try {              stopReceiving (5000);            }            catch {              if (!threw)                throw;            }          }        }        finally {          _state = ServerState.Stop;        }
Magic Number,WebSocketSharp.Server,HttpServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\HttpServer.cs,Stop,The following statement contains a magic number: stop (1005' String.Empty);
Magic Number,WebSocketSharp.Server,HttpServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\HttpServer.cs,Stop,The following statement contains a magic number: if (code == 1010) {          var msg = "1010 cannot be used.";          throw new ArgumentException (msg' "code");        }
Magic Number,WebSocketSharp.Server,HttpServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\HttpServer.cs,Stop,The following statement contains a magic number: if (!reason.IsNullOrEmpty ()) {          if (code == 1005) {            var msg = "1005 cannot be used.";            throw new ArgumentException (msg' "code");          }            byte[] bytes;          if (!reason.TryGetUTF8EncodedBytes (out bytes)) {            var msg = "It could not be UTF-8-encoded.";            throw new ArgumentException (msg' "reason");          }            if (bytes.Length > 123) {            var msg = "Its size is greater than 123 bytes.";            throw new ArgumentOutOfRangeException ("reason"' msg);          }        }
Magic Number,WebSocketSharp.Server,HttpServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\HttpServer.cs,Stop,The following statement contains a magic number: if (!reason.IsNullOrEmpty ()) {          if (code == 1005) {            var msg = "1005 cannot be used.";            throw new ArgumentException (msg' "code");          }            byte[] bytes;          if (!reason.TryGetUTF8EncodedBytes (out bytes)) {            var msg = "It could not be UTF-8-encoded.";            throw new ArgumentException (msg' "reason");          }            if (bytes.Length > 123) {            var msg = "Its size is greater than 123 bytes.";            throw new ArgumentOutOfRangeException ("reason"' msg);          }        }
Magic Number,WebSocketSharp.Server,HttpServer,C:\repos\sta_websocket-sharp\websocket-sharp\Server\HttpServer.cs,Stop,The following statement contains a magic number: if (!reason.IsNullOrEmpty ()) {          if (code == CloseStatusCode.NoStatus) {            var msg = "NoStatus cannot be used.";            throw new ArgumentException (msg' "code");          }            byte[] bytes;          if (!reason.TryGetUTF8EncodedBytes (out bytes)) {            var msg = "It could not be UTF-8-encoded.";            throw new ArgumentException (msg' "reason");          }            if (bytes.Length > 123) {            var msg = "Its size is greater than 123 bytes.";            throw new ArgumentOutOfRangeException ("reason"' msg);          }        }
Magic Number,WebSocketSharp.Server,HttpRequestEventArgs,C:\repos\sta_websocket-sharp\websocket-sharp\Server\HttpRequestEventArgs.cs,createFilePath,The following statement contains a magic number: return new StringBuilder (_docRootPath' 32)               .AppendFormat ("/{0}"' childPath)               .ToString ()               .Replace ('\\'' '/');
Magic Number,WebSocketSharp.Server,WebSocketSessionManager,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketSessionManager.cs,WebSocketSessionManager,The following statement contains a magic number: setSweepTimer (60000);
Magic Number,WebSocketSharp.Server,WebSocketSessionManager,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketSessionManager.cs,Stop,The following statement contains a magic number: if (code == 1005) { // == no status          stop (PayloadData.Empty' true);          return;        }
Magic Number,WebSocketSharp.Server,WebSocketSessionManager,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketSessionManager.cs,Broadping,The following statement contains a magic number: if (bytes.Length > 125) {          var msg = "Its size is greater than 125 bytes.";          throw new ArgumentOutOfRangeException ("message"' msg);        }
Magic Number,WebSocketSharp.Server,WebSocketServiceManager,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServiceManager.cs,Broadping,The following statement contains a magic number: if (bytes.Length > 125) {          var msg = "Its size is greater than 125 bytes.";          throw new ArgumentOutOfRangeException ("message"' msg);        }
Magic Number,WebSocketSharp.Server,WebSocketServiceManager,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServiceManager.cs,Clear,The following statement contains a magic number: foreach (var host in hosts) {          if (host.State == ServerState.Start)            host.Stop (1001' String.Empty);        }
Magic Number,WebSocketSharp.Server,WebSocketServiceManager,C:\repos\sta_websocket-sharp\websocket-sharp\Server\WebSocketServiceManager.cs,RemoveService,The following statement contains a magic number: if (host.State == ServerState.Start)          host.Stop (1001' String.Empty);
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,seekCrLf,The following statement contains a magic number: if (!_sawCr) {          if (buffer[offset++] != 13)            throwProtocolViolation ("CR is expected.");            _sawCr = true;          if (offset == length)            return InputChunkState.DataEnded;        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,seekCrLf,The following statement contains a magic number: if (buffer[offset++] != 10)          throwProtocolViolation ("LF is expected.");
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setChunkSize,The following statement contains a magic number: while (offset < length) {          b = buffer[offset++];          if (_sawCr) {            if (b != 10)              throwProtocolViolation ("LF is expected.");              break;          }            if (b == 13) {            _sawCr = true;            continue;          }            if (b == 10)            throwProtocolViolation ("LF is unexpected.");            if (b == 32) // SP            _gotIt = true;            if (!_gotIt)            _saved.Append ((char) b);            if (_saved.Length > 20)            throwProtocolViolation ("The chunk size is too long.");        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setChunkSize,The following statement contains a magic number: while (offset < length) {          b = buffer[offset++];          if (_sawCr) {            if (b != 10)              throwProtocolViolation ("LF is expected.");              break;          }            if (b == 13) {            _sawCr = true;            continue;          }            if (b == 10)            throwProtocolViolation ("LF is unexpected.");            if (b == 32) // SP            _gotIt = true;            if (!_gotIt)            _saved.Append ((char) b);            if (_saved.Length > 20)            throwProtocolViolation ("The chunk size is too long.");        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setChunkSize,The following statement contains a magic number: while (offset < length) {          b = buffer[offset++];          if (_sawCr) {            if (b != 10)              throwProtocolViolation ("LF is expected.");              break;          }            if (b == 13) {            _sawCr = true;            continue;          }            if (b == 10)            throwProtocolViolation ("LF is unexpected.");            if (b == 32) // SP            _gotIt = true;            if (!_gotIt)            _saved.Append ((char) b);            if (_saved.Length > 20)            throwProtocolViolation ("The chunk size is too long.");        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setChunkSize,The following statement contains a magic number: while (offset < length) {          b = buffer[offset++];          if (_sawCr) {            if (b != 10)              throwProtocolViolation ("LF is expected.");              break;          }            if (b == 13) {            _sawCr = true;            continue;          }            if (b == 10)            throwProtocolViolation ("LF is unexpected.");            if (b == 32) // SP            _gotIt = true;            if (!_gotIt)            _saved.Append ((char) b);            if (_saved.Length > 20)            throwProtocolViolation ("The chunk size is too long.");        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setChunkSize,The following statement contains a magic number: while (offset < length) {          b = buffer[offset++];          if (_sawCr) {            if (b != 10)              throwProtocolViolation ("LF is expected.");              break;          }            if (b == 13) {            _sawCr = true;            continue;          }            if (b == 10)            throwProtocolViolation ("LF is unexpected.");            if (b == 32) // SP            _gotIt = true;            if (!_gotIt)            _saved.Append ((char) b);            if (_saved.Length > 20)            throwProtocolViolation ("The chunk size is too long.");        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setChunkSize,The following statement contains a magic number: if (!_sawCr || b != 10)          return InputChunkState.None;
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setChunkSize,The following statement contains a magic number: if (_chunkSize == 0) {          _trailerState = 2;          return InputChunkState.Trailer;        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setTrailer,The following statement contains a magic number: if (_trailerState == 2 && buffer[offset] == 13 && _saved.Length == 0) {          offset++;          if (offset < length && buffer[offset] == 10) {            offset++;            return InputChunkState.End;          }            offset--;        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setTrailer,The following statement contains a magic number: if (_trailerState == 2 && buffer[offset] == 13 && _saved.Length == 0) {          offset++;          if (offset < length && buffer[offset] == 10) {            offset++;            return InputChunkState.End;          }            offset--;        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setTrailer,The following statement contains a magic number: if (_trailerState == 2 && buffer[offset] == 13 && _saved.Length == 0) {          offset++;          if (offset < length && buffer[offset] == 10) {            offset++;            return InputChunkState.End;          }            offset--;        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setTrailer,The following statement contains a magic number: while (offset < length && _trailerState < 4) {          var b = buffer[offset++];          _saved.Append ((char) b);          if (_saved.Length > 4196)            throwProtocolViolation ("The trailer is too long.");            if (_trailerState == 1 || _trailerState == 3) {            if (b != 10)              throwProtocolViolation ("LF is expected.");              _trailerState++;            continue;          }            if (b == 13) {            _trailerState++;            continue;          }            if (b == 10)            throwProtocolViolation ("LF is unexpected.");            _trailerState = 0;        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setTrailer,The following statement contains a magic number: while (offset < length && _trailerState < 4) {          var b = buffer[offset++];          _saved.Append ((char) b);          if (_saved.Length > 4196)            throwProtocolViolation ("The trailer is too long.");            if (_trailerState == 1 || _trailerState == 3) {            if (b != 10)              throwProtocolViolation ("LF is expected.");              _trailerState++;            continue;          }            if (b == 13) {            _trailerState++;            continue;          }            if (b == 10)            throwProtocolViolation ("LF is unexpected.");            _trailerState = 0;        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setTrailer,The following statement contains a magic number: while (offset < length && _trailerState < 4) {          var b = buffer[offset++];          _saved.Append ((char) b);          if (_saved.Length > 4196)            throwProtocolViolation ("The trailer is too long.");            if (_trailerState == 1 || _trailerState == 3) {            if (b != 10)              throwProtocolViolation ("LF is expected.");              _trailerState++;            continue;          }            if (b == 13) {            _trailerState++;            continue;          }            if (b == 10)            throwProtocolViolation ("LF is unexpected.");            _trailerState = 0;        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setTrailer,The following statement contains a magic number: while (offset < length && _trailerState < 4) {          var b = buffer[offset++];          _saved.Append ((char) b);          if (_saved.Length > 4196)            throwProtocolViolation ("The trailer is too long.");            if (_trailerState == 1 || _trailerState == 3) {            if (b != 10)              throwProtocolViolation ("LF is expected.");              _trailerState++;            continue;          }            if (b == 13) {            _trailerState++;            continue;          }            if (b == 10)            throwProtocolViolation ("LF is unexpected.");            _trailerState = 0;        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setTrailer,The following statement contains a magic number: while (offset < length && _trailerState < 4) {          var b = buffer[offset++];          _saved.Append ((char) b);          if (_saved.Length > 4196)            throwProtocolViolation ("The trailer is too long.");            if (_trailerState == 1 || _trailerState == 3) {            if (b != 10)              throwProtocolViolation ("LF is expected.");              _trailerState++;            continue;          }            if (b == 13) {            _trailerState++;            continue;          }            if (b == 10)            throwProtocolViolation ("LF is unexpected.");            _trailerState = 0;        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setTrailer,The following statement contains a magic number: while (offset < length && _trailerState < 4) {          var b = buffer[offset++];          _saved.Append ((char) b);          if (_saved.Length > 4196)            throwProtocolViolation ("The trailer is too long.");            if (_trailerState == 1 || _trailerState == 3) {            if (b != 10)              throwProtocolViolation ("LF is expected.");              _trailerState++;            continue;          }            if (b == 13) {            _trailerState++;            continue;          }            if (b == 10)            throwProtocolViolation ("LF is unexpected.");            _trailerState = 0;        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setTrailer,The following statement contains a magic number: if (_trailerState < 4)          return InputChunkState.Trailer;
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkStream.cs,setTrailer,The following statement contains a magic number: _saved.Length -= 2;
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\sta_websocket-sharp\websocket-sharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\sta_websocket-sharp\websocket-sharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\sta_websocket-sharp\websocket-sharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\sta_websocket-sharp\websocket-sharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\sta_websocket-sharp\websocket-sharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\sta_websocket-sharp\websocket-sharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\sta_websocket-sharp\websocket-sharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\sta_websocket-sharp\websocket-sharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\sta_websocket-sharp\websocket-sharp\Net\Cookie.cs,toResponseStringVersion0,The following statement contains a magic number: var output = new StringBuilder (64);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\sta_websocket-sharp\websocket-sharp\Net\Cookie.cs,toResponseStringVersion1,The following statement contains a magic number: var output = new StringBuilder (64);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\sta_websocket-sharp\websocket-sharp\Net\Cookie.cs,ToRequestString,The following statement contains a magic number: var output = new StringBuilder (64);
Magic Number,WebSocketSharp.Net,CookieCollection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\CookieCollection.cs,parseResponse,The following statement contains a magic number: for (var i = 0; i < pairs.Length; i++) {          var pair = pairs[i].Trim ();          if (pair.Length == 0)            continue;            if (pair.StartsWith ("version"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.Version = Int32.Parse (pair.GetValue ('='' true));          }          else if (pair.StartsWith ("expires"' StringComparison.InvariantCultureIgnoreCase)) {            var buff = new StringBuilder (pair.GetValue ('=')' 32);            if (i < pairs.Length - 1)              buff.AppendFormat ("' {0}"' pairs[++i].Trim ());              DateTime expires;            if (!DateTime.TryParseExact (              buff.ToString ()'              new[] { "ddd' dd'-'MMM'-'yyyy HH':'mm':'ss 'GMT'"' "r" }'              CultureInfo.CreateSpecificCulture ("en-US")'              DateTimeStyles.AdjustToUniversal | DateTimeStyles.AssumeUniversal'              out expires))              expires = DateTime.Now;              if (cookie != null && cookie.Expires == DateTime.MinValue)              cookie.Expires = expires.ToLocalTime ();          }          else if (pair.StartsWith ("max-age"' StringComparison.InvariantCultureIgnoreCase)) {            var max = Int32.Parse (pair.GetValue ('='' true));            var expires = DateTime.Now.AddSeconds ((double) max);            if (cookie != null)              cookie.Expires = expires;          }          else if (pair.StartsWith ("path"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.Path = pair.GetValue ('=');          }          else if (pair.StartsWith ("domain"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.Domain = pair.GetValue ('=');          }          else if (pair.StartsWith ("port"' StringComparison.InvariantCultureIgnoreCase)) {            var port = pair.Equals ("port"' StringComparison.InvariantCultureIgnoreCase)                       ? "\"\""                       : pair.GetValue ('=');              if (cookie != null)              cookie.Port = port;          }          else if (pair.StartsWith ("comment"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.Comment = pair.GetValue ('=').UrlDecode ();          }          else if (pair.StartsWith ("commenturl"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.CommentUri = pair.GetValue ('='' true).ToUri ();          }          else if (pair.StartsWith ("discard"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.Discard = true;          }          else if (pair.StartsWith ("secure"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.Secure = true;          }          else if (pair.StartsWith ("httponly"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.HttpOnly = true;          }          else {            if (cookie != null)              cookies.Add (cookie);              string name;            string val = String.Empty;              var pos = pair.IndexOf ('=');            if (pos == -1) {              name = pair;            }            else if (pos == pair.Length - 1) {              name = pair.Substring (0' pos).TrimEnd (' ');            }            else {              name = pair.Substring (0' pos).TrimEnd (' ');              val = pair.Substring (pos + 1).TrimStart (' ');            }              cookie = new Cookie (name' val);          }        }
Magic Number,WebSocketSharp.Net,EndPointListener,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointListener.cs,EndPointListener,The following statement contains a magic number: _socket.Listen (500);
Magic Number,WebSocketSharp.Net,EndPointListener,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointListener.cs,addSpecial,The following statement contains a magic number: foreach (var pref in prefixes) {          if (pref.Path == path)            throw new HttpListenerException (87' "The prefix is already in use.");        }
Magic Number,WebSocketSharp.Net,EndPointListener,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointListener.cs,AddPrefix,The following statement contains a magic number: do {          prefs = _prefixes;          if (prefs.ContainsKey (prefix)) {            if (prefs[prefix] != listener) {              throw new HttpListenerException (                87' String.Format ("There's another listener for {0}."' prefix)              );            }              return;          }            prefs2 = new Dictionary<HttpListenerPrefix' HttpListener> (prefs);          prefs2[prefix] = listener;        }        while (Interlocked.CompareExchange (ref _prefixes' prefs2' prefs) != prefs);
Magic Number,WebSocketSharp.Net,EndPointManager,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointManager.cs,addPrefix,The following statement contains a magic number: if (!addr.IsLocal ())          throw new HttpListenerException (87' "Includes an invalid host.");
Magic Number,WebSocketSharp.Net,EndPointManager,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointManager.cs,addPrefix,The following statement contains a magic number: if (!Int32.TryParse (pref.Port' out port))          throw new HttpListenerException (87' "Includes an invalid port.");
Magic Number,WebSocketSharp.Net,EndPointManager,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointManager.cs,addPrefix,The following statement contains a magic number: if (!port.IsPortNumber ())          throw new HttpListenerException (87' "Includes an invalid port.");
Magic Number,WebSocketSharp.Net,EndPointManager,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointManager.cs,addPrefix,The following statement contains a magic number: if (path.IndexOf ('%') != -1)          throw new HttpListenerException (87' "Includes an invalid path.");
Magic Number,WebSocketSharp.Net,EndPointManager,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointManager.cs,addPrefix,The following statement contains a magic number: if (path.IndexOf ("//"' StringComparison.Ordinal) != -1)          throw new HttpListenerException (87' "Includes an invalid path.");
Magic Number,WebSocketSharp.Net,EndPointManager,C:\repos\sta_websocket-sharp\websocket-sharp\Net\EndPointManager.cs,addPrefix,The following statement contains a magic number: if (_endpoints.TryGetValue (endpoint' out lsnr)) {          if (lsnr.IsSecure ^ pref.IsSecure)            throw new HttpListenerException (87' "Includes an invalid scheme.");        }        else {          lsnr =            new EndPointListener (              endpoint'              pref.IsSecure'              listener.CertificateFolderPath'              listener.SslConfiguration'              listener.ReuseAddress            );            _endpoints.Add (endpoint' lsnr);        }
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,HttpConnection,The following statement contains a magic number: _timeout = 90000;
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,onRead,The following statement contains a magic number: lock (conn._sync) {          if (conn._socket == null)            return;            var nread = -1;          var len = 0;          try {            var current = conn._reuses;            if (!conn._timeoutCanceled[current]) {              conn._timer.Change (Timeout.Infinite' Timeout.Infinite);              conn._timeoutCanceled[current] = true;            }              nread = conn._stream.EndRead (asyncResult);            conn._requestBuffer.Write (conn._buffer' 0' nread);            len = (int) conn._requestBuffer.Length;          }          catch (Exception ex) {            if (conn._requestBuffer != null && conn._requestBuffer.Length > 0) {              conn.SendError (ex.Message' 400);              return;            }              conn.close ();            return;          }            if (nread <= 0) {            conn.close ();            return;          }            if (conn.processInput (conn._requestBuffer.GetBuffer ()' len)) {            if (!conn._context.HasError)              conn._context.Request.FinishInitialization ();              if (conn._context.HasError) {              conn.SendError ();              return;            }              HttpListener lsnr;            if (!conn._listener.TrySearchHttpListener (conn._context.Request.Url' out lsnr)) {              conn.SendError (null' 404);              return;            }              if (conn._lastListener != lsnr) {              conn.removeConnection ();              if (!lsnr.AddConnection (conn)) {                conn.close ();                return;              }                conn._lastListener = lsnr;            }              conn._context.Listener = lsnr;            if (!conn._context.Authenticate ())              return;              if (conn._context.Register ())              conn._contextRegistered = true;              return;          }            conn._stream.BeginRead (conn._buffer' 0' _bufferLength' onRead' conn);        }
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,onRead,The following statement contains a magic number: lock (conn._sync) {          if (conn._socket == null)            return;            var nread = -1;          var len = 0;          try {            var current = conn._reuses;            if (!conn._timeoutCanceled[current]) {              conn._timer.Change (Timeout.Infinite' Timeout.Infinite);              conn._timeoutCanceled[current] = true;            }              nread = conn._stream.EndRead (asyncResult);            conn._requestBuffer.Write (conn._buffer' 0' nread);            len = (int) conn._requestBuffer.Length;          }          catch (Exception ex) {            if (conn._requestBuffer != null && conn._requestBuffer.Length > 0) {              conn.SendError (ex.Message' 400);              return;            }              conn.close ();            return;          }            if (nread <= 0) {            conn.close ();            return;          }            if (conn.processInput (conn._requestBuffer.GetBuffer ()' len)) {            if (!conn._context.HasError)              conn._context.Request.FinishInitialization ();              if (conn._context.HasError) {              conn.SendError ();              return;            }              HttpListener lsnr;            if (!conn._listener.TrySearchHttpListener (conn._context.Request.Url' out lsnr)) {              conn.SendError (null' 404);              return;            }              if (conn._lastListener != lsnr) {              conn.removeConnection ();              if (!lsnr.AddConnection (conn)) {                conn.close ();                return;              }                conn._lastListener = lsnr;            }              conn._context.Listener = lsnr;            if (!conn._context.Authenticate ())              return;              if (conn._context.Register ())              conn._contextRegistered = true;              return;          }            conn._stream.BeginRead (conn._buffer' 0' _bufferLength' onRead' conn);        }
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,onTimeout,The following statement contains a magic number: lock (conn._sync) {          if (conn._socket == null)            return;            if (conn._timeoutCanceled[current])            return;            conn.SendError (null' 408);        }
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,processInput,The following statement contains a magic number: if (_currentLine == null)          _currentLine = new StringBuilder (64);
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,processInput,The following statement contains a magic number: try {          string line;          while ((line = readLineFrom (data' _position' length' out nread)) != null) {            _position += nread;            if (line.Length == 0) {              if (_inputState == InputState.RequestLine)                continue;                if (_position > 32768)                _context.ErrorMessage = "Headers too long";                _currentLine = null;              return true;            }              if (_inputState == InputState.RequestLine) {              _context.Request.SetRequestLine (line);              _inputState = InputState.Headers;            }            else {              _context.Request.AddHeader (line);            }              if (_context.HasError)              return true;          }        }        catch (Exception ex) {          _context.ErrorMessage = ex.Message;          return true;        }
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,processInput,The following statement contains a magic number: if (_position >= 32768) {          _context.ErrorMessage = "Headers too long";          return true;        }
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,readLineFrom,The following statement contains a magic number: for (var i = offset; i < length && _lineState != LineState.Lf; i++) {          read++;            var b = buffer[i];          if (b == 13)            _lineState = LineState.Cr;          else if (b == 10)            _lineState = LineState.Lf;          else            _currentLine.Append ((char) b);        }
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,readLineFrom,The following statement contains a magic number: for (var i = offset; i < length && _lineState != LineState.Lf; i++) {          read++;            var b = buffer[i];          if (b == 13)            _lineState = LineState.Cr;          else if (b == 10)            _lineState = LineState.Lf;          else            _currentLine.Append ((char) b);        }
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,BeginReadRequest,The following statement contains a magic number: if (_reuses == 1)          _timeout = 15000;
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpConnection.cs,SendError,The following statement contains a magic number: lock (_sync) {          if (_socket == null)            return;            try {            var res = _context.Response;            res.StatusCode = status;            res.ContentType = "text/html";              var content = new StringBuilder (64);            content.AppendFormat ("<html><body><h1>{0} {1}"' status' res.StatusDescription);            if (message != null && message.Length > 0)              content.AppendFormat (" ({0})</h1></body></html>"' message);            else              content.Append ("</h1></body></html>");              var enc = Encoding.UTF8;            var entity = enc.GetBytes (content.ToString ());            res.ContentEncoding = enc;            res.ContentLength64 = entity.LongLength;              res.Close (entity' true);          }          catch {            Close (true);          }        }
Magic Number,WebSocketSharp.Net,HttpListener,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListener.cs,BeginGetContext,The following statement contains a magic number: lock (_ctxRegistrySync) {          if (!_listening)            throw new HttpListenerException (995);            var ctx = getContextFromQueue ();          if (ctx == null)            _waitQueue.Add (asyncResult);          else            asyncResult.Complete (ctx' true);            return asyncResult;        }
Magic Number,WebSocketSharp.Net,HttpListener,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListener.cs,Stop,The following statement contains a magic number: cleanupWaitQueue (new HttpListenerException (995' "The listener is stopped."));
Magic Number,WebSocketSharp.Net,HttpListenerContext,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerContext.cs,HttpListenerContext,The following statement contains a magic number: _errorStatus = 400;
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerRequest.cs,FinishInitialization,The following statement contains a magic number: if (_version > HttpVersion.Version10 && enc != null && enc.Length > 0) {          _chunked = enc.ToLower () == "chunked";          if (!_chunked) {            _context.ErrorMessage = String.Empty;            _context.ErrorStatus = 501;              return;          }        }
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerRequest.cs,FinishInitialization,The following statement contains a magic number: if (!_chunked && !_contentLengthSet) {          var method = _method.ToLower ();          if (method == "post" || method == "put") {            _context.ErrorMessage = String.Empty;            _context.ErrorStatus = 411;              return;          }        }
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerRequest.cs,FlushInput,The following statement contains a magic number: var len = 2048;
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerRequest.cs,FlushInput,The following statement contains a magic number: while (true) {          // TODO: Test if MS has a timeout when doing this.          try {            var ares = InputStream.BeginRead (buff' 0' len' null' null);            if (!ares.IsCompleted && !ares.AsyncWaitHandle.WaitOne (100))              return false;              if (InputStream.EndRead (ares) <= 0)              return true;          }          catch {            return false;          }        }
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: var parts = requestLine.Split (new[] { ' ' }' 3);
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts.Length != 3) {          _context.ErrorMessage = "Invalid request line (parts)";          return;        }
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: var ver = parts[2];
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (ver.Length != 8 ||            !ver.StartsWith ("HTTP/") ||            !tryCreateVersion (ver.Substring (5)' out _version) ||            _version.Major < 1)          _context.ErrorMessage = "Invalid request line (version)";
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (ver.Length != 8 ||            !ver.StartsWith ("HTTP/") ||            !tryCreateVersion (ver.Substring (5)' out _version) ||            _version.Major < 1)          _context.ErrorMessage = "Invalid request line (version)";
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerRequest.cs,ToString,The following statement contains a magic number: var buff = new StringBuilder (64);
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerResponse.cs,HttpListenerResponse,The following statement contains a magic number: _statusCode = 200;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerResponse.cs,WriteHeadersTo,The following statement contains a magic number: var closeConn = !_context.Request.KeepAlive ||                        !_keepAlive ||                        _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerResponse.cs,WriteHeadersTo,The following statement contains a magic number: var closeConn = !_context.Request.KeepAlive ||                        !_keepAlive ||                        _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerResponse.cs,WriteHeadersTo,The following statement contains a magic number: var closeConn = !_context.Request.KeepAlive ||                        !_keepAlive ||                        _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerResponse.cs,WriteHeadersTo,The following statement contains a magic number: var closeConn = !_context.Request.KeepAlive ||                        !_keepAlive ||                        _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerResponse.cs,WriteHeadersTo,The following statement contains a magic number: var closeConn = !_context.Request.KeepAlive ||                        !_keepAlive ||                        _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerResponse.cs,WriteHeadersTo,The following statement contains a magic number: var closeConn = !_context.Request.KeepAlive ||                        !_keepAlive ||                        _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerResponse.cs,WriteHeadersTo,The following statement contains a magic number: var closeConn = !_context.Request.KeepAlive ||                        !_keepAlive ||                        _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerResponse.cs,WriteHeadersTo,The following statement contains a magic number: if (closeConn || reuses >= 100) {          headers.InternalSet ("Connection"' "close"' true);        }        else {          headers.InternalSet (            "Keep-Alive"' String.Format ("timeout=15'max={0}"' 100 - reuses)' true);            if (_context.Request.ProtocolVersion < HttpVersion.Version11)            headers.InternalSet ("Connection"' "keep-alive"' true);        }
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerResponse.cs,WriteHeadersTo,The following statement contains a magic number: if (closeConn || reuses >= 100) {          headers.InternalSet ("Connection"' "close"' true);        }        else {          headers.InternalSet (            "Keep-Alive"' String.Format ("timeout=15'max={0}"' 100 - reuses)' true);            if (_context.Request.ProtocolVersion < HttpVersion.Version11)            headers.InternalSet ("Connection"' "keep-alive"' true);        }
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerResponse.cs,WriteHeadersTo,The following statement contains a magic number: var writer = new StreamWriter (destination' enc' 256);
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerResponse.cs,Redirect,The following statement contains a magic number: _statusCode = 302;
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,getChar,The following statement contains a magic number: for (var i = offset; i < end; i++) {          var current = getInt (bytes[i]);          if (current == -1)            return -1;            val = (val << 4) + current;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,getChar,The following statement contains a magic number: for (var i = offset; i < end; i++) {          var c = s[i];          if (c > 127)            return -1;            var current = getInt ((byte) c);          if (current == -1)            return -1;            val = (val << 4) + current;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,getChar,The following statement contains a magic number: for (var i = offset; i < end; i++) {          var c = s[i];          if (c > 127)            return -1;            var current = getInt ((byte) c);          if (current == -1)            return -1;            val = (val << 4) + current;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,getInt,The following statement contains a magic number: return c >= '0' && c <= '9'               ? c - '0'               : c >= 'a' && c <= 'f'                 ? c - 'a' + 10                 : c >= 'A' && c <= 'F'                   ? c - 'A' + 10                   : -1;
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,getInt,The following statement contains a magic number: return c >= '0' && c <= '9'               ? c - '0'               : c >= 'a' && c <= 'f'                 ? c - 'a' + 10                 : c >= 'A' && c <= 'F'                   ? c - 'A' + 10                   : -1;
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,urlEncode,The following statement contains a magic number: if (c > 255) {          // FIXME: What happens when there is an internal error?          //if (!unicode)          //  throw new ArgumentOutOfRangeException ("c"' c' "Greater than 255.");            result.WriteByte ((byte) '%');          result.WriteByte ((byte) 'u');            var i = (int) c;          var idx = i >> 12;          result.WriteByte ((byte) _hexChars[idx]);            idx = (i >> 8) & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            idx = (i >> 4) & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            idx = i & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,urlEncode,The following statement contains a magic number: if (c > 255) {          // FIXME: What happens when there is an internal error?          //if (!unicode)          //  throw new ArgumentOutOfRangeException ("c"' c' "Greater than 255.");            result.WriteByte ((byte) '%');          result.WriteByte ((byte) 'u');            var i = (int) c;          var idx = i >> 12;          result.WriteByte ((byte) _hexChars[idx]);            idx = (i >> 8) & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            idx = (i >> 4) & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            idx = i & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,urlEncode,The following statement contains a magic number: if (c > 255) {          // FIXME: What happens when there is an internal error?          //if (!unicode)          //  throw new ArgumentOutOfRangeException ("c"' c' "Greater than 255.");            result.WriteByte ((byte) '%');          result.WriteByte ((byte) 'u');            var i = (int) c;          var idx = i >> 12;          result.WriteByte ((byte) _hexChars[idx]);            idx = (i >> 8) & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            idx = (i >> 4) & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            idx = i & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,urlEncode,The following statement contains a magic number: if (c > 255) {          // FIXME: What happens when there is an internal error?          //if (!unicode)          //  throw new ArgumentOutOfRangeException ("c"' c' "Greater than 255.");            result.WriteByte ((byte) '%');          result.WriteByte ((byte) 'u');            var i = (int) c;          var idx = i >> 12;          result.WriteByte ((byte) _hexChars[idx]);            idx = (i >> 8) & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            idx = (i >> 4) & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            idx = i & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,urlEncode,The following statement contains a magic number: if ((c < '0') ||            (c < 'A' && c > '9') ||            (c > 'Z' && c < 'a') ||            (c > 'z')) {          if (unicode && c > 127) {            result.WriteByte ((byte) '%');            result.WriteByte ((byte) 'u');            result.WriteByte ((byte) '0');            result.WriteByte ((byte) '0');          }          else {            result.WriteByte ((byte) '%');          }            var i = (int) c;          var idx = i >> 4;          result.WriteByte ((byte) _hexChars[idx]);            idx = i & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,urlEncode,The following statement contains a magic number: if ((c < '0') ||            (c < 'A' && c > '9') ||            (c > 'Z' && c < 'a') ||            (c > 'z')) {          if (unicode && c > 127) {            result.WriteByte ((byte) '%');            result.WriteByte ((byte) 'u');            result.WriteByte ((byte) '0');            result.WriteByte ((byte) '0');          }          else {            result.WriteByte ((byte) '%');          }            var i = (int) c;          var idx = i >> 4;          result.WriteByte ((byte) _hexChars[idx]);            idx = i & 0x0F;          result.WriteByte ((byte) _hexChars[idx]);            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,urlPathEncode,The following statement contains a magic number: if (c < 33 || c > 126) {          var bytes = Encoding.UTF8.GetBytes (c.ToString ());          foreach (var b in bytes) {            result.WriteByte ((byte) '%');              var i = (int) b;            var idx = i >> 4;            result.WriteByte ((byte) _hexChars[idx]);              idx = i & 0x0F;            result.WriteByte ((byte) _hexChars[idx]);          }            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,urlPathEncode,The following statement contains a magic number: if (c < 33 || c > 126) {          var bytes = Encoding.UTF8.GetBytes (c.ToString ());          foreach (var b in bytes) {            result.WriteByte ((byte) '%');              var i = (int) b;            var idx = i >> 4;            result.WriteByte ((byte) _hexChars[idx]);              idx = i & 0x0F;            result.WriteByte ((byte) _hexChars[idx]);          }            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,urlPathEncode,The following statement contains a magic number: if (c < 33 || c > 126) {          var bytes = Encoding.UTF8.GetBytes (c.ToString ());          foreach (var b in bytes) {            result.WriteByte ((byte) '%');              var i = (int) b;            var idx = i >> 4;            result.WriteByte ((byte) _hexChars[idx]);              idx = i & 0x0F;            result.WriteByte ((byte) _hexChars[idx]);          }            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,writeCharBytes,The following statement contains a magic number: if (c > 255) {          foreach (var b in encoding.GetBytes (new[] { c }))            buffer.Add (b);            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,CreateRequestUrl,The following statement contains a magic number: if (colon == -1)          host = String.Format ("{0}:{1}"' host' schm == "http" || schm == "ws" ? 80 : 443);
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,CreateRequestUrl,The following statement contains a magic number: if (colon == -1)          host = String.Format ("{0}:{1}"' host' schm == "http" || schm == "ws" ? 80 : 443);
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,InternalUrlDecode,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;          for (var i = offset; i < end; i++) {            if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%') {              int xchar;              if (bytes[i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes[i] == '+') {              output.Append (' ');              continue;            }              output.Append ((char) bytes[i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,InternalUrlDecode,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;          for (var i = offset; i < end; i++) {            if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%') {              int xchar;              if (bytes[i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes[i] == '+') {              output.Append (' ');              continue;            }              output.Append ((char) bytes[i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,InternalUrlDecode,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;          for (var i = offset; i < end; i++) {            if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%') {              int xchar;              if (bytes[i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes[i] == '+') {              output.Append (' ');              continue;            }              output.Append ((char) bytes[i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,InternalUrlDecode,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;          for (var i = offset; i < end; i++) {            if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%') {              int xchar;              if (bytes[i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes[i] == '+') {              output.Append (' ');              continue;            }              output.Append ((char) bytes[i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,InternalUrlDecode,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;          for (var i = offset; i < end; i++) {            if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%') {              int xchar;              if (bytes[i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes[i] == '+') {              output.Append (' ');              continue;            }              output.Append ((char) bytes[i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,InternalUrlDecode,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;          for (var i = offset; i < end; i++) {            if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%') {              int xchar;              if (bytes[i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes[i] == '+') {              output.Append (' ');              continue;            }              output.Append ((char) bytes[i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,InternalUrlDecode,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;          for (var i = offset; i < end; i++) {            if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%') {              int xchar;              if (bytes[i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes[i] == '+') {              output.Append (' ');              continue;            }              output.Append ((char) bytes[i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,InternalUrlDecodeToBytes,The following statement contains a magic number: using (var res = new MemoryStream ()) {          var end = offset + count;          for (var i = offset; i < end; i++) {            var c = (char) bytes[i];            if (c == '+') {              c = ' ';            }            else if (c == '%' && i < end - 2) {              var xchar = getChar (bytes' i + 1' 2);              if (xchar != -1) {                c = (char) xchar;                i += 2;              }            }              res.WriteByte ((byte) c);          }            res.Close ();          return res.ToArray ();        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,InternalUrlDecodeToBytes,The following statement contains a magic number: using (var res = new MemoryStream ()) {          var end = offset + count;          for (var i = offset; i < end; i++) {            var c = (char) bytes[i];            if (c == '+') {              c = ' ';            }            else if (c == '%' && i < end - 2) {              var xchar = getChar (bytes' i + 1' 2);              if (xchar != -1) {                c = (char) xchar;                i += 2;              }            }              res.WriteByte ((byte) c);          }            res.Close ();          return res.ToArray ();        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,InternalUrlDecodeToBytes,The following statement contains a magic number: using (var res = new MemoryStream ()) {          var end = offset + count;          for (var i = offset; i < end; i++) {            var c = (char) bytes[i];            if (c == '+') {              c = ' ';            }            else if (c == '%' && i < end - 2) {              var xchar = getChar (bytes' i + 1' 2);              if (xchar != -1) {                c = (char) xchar;                i += 2;              }            }              res.WriteByte ((byte) c);          }            res.Close ();          return res.ToArray ();        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              var entities = getEntities ();              if (key.Length > 1 && entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = entities[key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              var entities = getEntities ();              if (key.Length > 1 && entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = entities[key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              var entities = getEntities ();              if (key.Length > 1 && entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = entities[key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              var entities = getEntities ();              if (key.Length > 1 && entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = entities[key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              var entities = getEntities ();              if (key.Length > 1 && entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = entities[key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              var entities = getEntities ();              if (key.Length > 1 && entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = entities[key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              var entities = getEntities ();              if (key.Length > 1 && entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = entities[key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              var entities = getEntities ();              if (key.Length > 1 && entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = entities[key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              var entities = getEntities ();              if (key.Length > 1 && entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = entities[key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: foreach (var c in s) {          if (c == '&' || c == '"' || c == '<' || c == '>' || c > 159) {            needEncode = true;            break;          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: foreach (var c in s) {          if (c == '&') {            output.Append ("&amp;");          }          else if (c == '"') {            output.Append ("&quot;");          }          else if (c == '<') {            output.Append ("&lt;");          }          else if (c == '>') {            output.Append ("&gt;");          }          else if (c > 159) {            // MS starts encoding with &# from 160 and stops at 255.            // We don't do that. One reason is the 65308/65310 unicode            // characters that look like '<' and '>'.            output.Append ("&#");            output.Append (((int) c).ToString (CultureInfo.InvariantCulture));            output.Append (";");          }          else {            output.Append (c);          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {          var c = s[i];          if (c == '%' && i + 2 < len && s[i + 1] != '%') {            int xchar;            if (s[i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes ((char) xchar' buff' encoding);                i += 5;              }              else {                writeCharBytes ('%'' buff' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes ((char) xchar' buff' encoding);              i += 2;            }            else {              writeCharBytes ('%'' buff' encoding);            }              continue;          }            if (c == '+') {            writeCharBytes (' '' buff' encoding);            continue;          }            writeCharBytes (c' buff' encoding);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {          var c = s[i];          if (c == '%' && i + 2 < len && s[i + 1] != '%') {            int xchar;            if (s[i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes ((char) xchar' buff' encoding);                i += 5;              }              else {                writeCharBytes ('%'' buff' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes ((char) xchar' buff' encoding);              i += 2;            }            else {              writeCharBytes ('%'' buff' encoding);            }              continue;          }            if (c == '+') {            writeCharBytes (' '' buff' encoding);            continue;          }            writeCharBytes (c' buff' encoding);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {          var c = s[i];          if (c == '%' && i + 2 < len && s[i + 1] != '%') {            int xchar;            if (s[i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes ((char) xchar' buff' encoding);                i += 5;              }              else {                writeCharBytes ('%'' buff' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes ((char) xchar' buff' encoding);              i += 2;            }            else {              writeCharBytes ('%'' buff' encoding);            }              continue;          }            if (c == '+') {            writeCharBytes (' '' buff' encoding);            continue;          }            writeCharBytes (c' buff' encoding);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {          var c = s[i];          if (c == '%' && i + 2 < len && s[i + 1] != '%') {            int xchar;            if (s[i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes ((char) xchar' buff' encoding);                i += 5;              }              else {                writeCharBytes ('%'' buff' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes ((char) xchar' buff' encoding);              i += 2;            }            else {              writeCharBytes ('%'' buff' encoding);            }              continue;          }            if (c == '+') {            writeCharBytes (' '' buff' encoding);            continue;          }            writeCharBytes (c' buff' encoding);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {          var c = s[i];          if (c == '%' && i + 2 < len && s[i + 1] != '%') {            int xchar;            if (s[i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes ((char) xchar' buff' encoding);                i += 5;              }              else {                writeCharBytes ('%'' buff' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes ((char) xchar' buff' encoding);              i += 2;            }            else {              writeCharBytes ('%'' buff' encoding);            }              continue;          }            if (c == '+') {            writeCharBytes (' '' buff' encoding);            continue;          }            writeCharBytes (c' buff' encoding);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {          var c = s[i];          if (c == '%' && i + 2 < len && s[i + 1] != '%') {            int xchar;            if (s[i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes ((char) xchar' buff' encoding);                i += 5;              }              else {                writeCharBytes ('%'' buff' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes ((char) xchar' buff' encoding);              i += 2;            }            else {              writeCharBytes ('%'' buff' encoding);            }              continue;          }            if (c == '+') {            writeCharBytes (' '' buff' encoding);            continue;          }            writeCharBytes (c' buff' encoding);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {          var c = s[i];          if (c == '%' && i + 2 < len && s[i + 1] != '%') {            int xchar;            if (s[i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes ((char) xchar' buff' encoding);                i += 5;              }              else {                writeCharBytes ('%'' buff' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes ((char) xchar' buff' encoding);              i += 2;            }            else {              writeCharBytes ('%'' buff' encoding);            }              continue;          }            if (c == '+') {            writeCharBytes (' '' buff' encoding);            continue;          }            writeCharBytes (c' buff' encoding);        }
Magic Number,WebSocketSharp.Net,ResponseStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ResponseStream.cs,flushBody,The following statement contains a magic number: using (_body) {          var len = _body.Length;          if (len > Int32.MaxValue) {            _body.Position = 0;            var buffLen = 1024;            var buff = new byte[buffLen];            var nread = 0;            while ((nread = _body.Read (buff' 0' buffLen)) > 0)              _writeBody (buff' 0' nread);          }          else if (len > 0) {            _writeBody (_body.GetBuffer ()' 0' (int) len);          }        }
Magic Number,WebSocketSharp.Net,ResponseStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ResponseStream.cs,flushHeaders,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var headers = _response.WriteHeadersTo (buff);          var start = buff.Position;          var len = buff.Length - start;          if (len > 32768)            return false;            if (!_response.SendChunked && _response.ContentLength64 != _body.Length)            return false;            _write (buff.GetBuffer ()' (int) start' (int) len);          _response.CloseConnection = headers["Connection"] == "close";          _response.HeadersSent = true;        }
Magic Number,WebSocketSharp.Net,ResponseStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ResponseStream.cs,writeChunked,The following statement contains a magic number: _stream.Write (_crlf' 0' 2);
Magic Number,WebSocketSharp.Net,WebHeaderCollection,C:\repos\sta_websocket-sharp\websocket-sharp\Net\WebHeaderCollection.cs,checkValue,The following statement contains a magic number: if (value.Length > 65535)          throw new ArgumentOutOfRangeException ("value"' "Greater than 65'535 characters.");
Magic Number,WebSocketSharp.Net,ChunkedRequestStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkedRequestStream.cs,onRead,The following statement contains a magic number: try {          var nread = base.EndRead (asyncResult);          _decoder.Write (ares.Buffer' ares.Offset' nread);          nread = _decoder.Read (rstate.Buffer' rstate.Offset' rstate.Count);          rstate.Offset += nread;          rstate.Count -= nread;          if (rstate.Count == 0 || !_decoder.WantMore || nread == 0) {            _noMoreData = !_decoder.WantMore && nread == 0;            ares.Count = rstate.InitialCount - rstate.Count;            ares.Complete ();              return;          }            ares.Offset = 0;          ares.Count = Math.Min (_bufferLength' _decoder.ChunkLeft + 6);          base.BeginRead (ares.Buffer' ares.Offset' ares.Count' onRead' rstate);        }        catch (Exception ex) {          _context.Connection.SendError (ex.Message' 400);          ares.Complete (ex);        }
Magic Number,WebSocketSharp.Net,ChunkedRequestStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkedRequestStream.cs,onRead,The following statement contains a magic number: try {          var nread = base.EndRead (asyncResult);          _decoder.Write (ares.Buffer' ares.Offset' nread);          nread = _decoder.Read (rstate.Buffer' rstate.Offset' rstate.Count);          rstate.Offset += nread;          rstate.Count -= nread;          if (rstate.Count == 0 || !_decoder.WantMore || nread == 0) {            _noMoreData = !_decoder.WantMore && nread == 0;            ares.Count = rstate.InitialCount - rstate.Count;            ares.Complete ();              return;          }            ares.Offset = 0;          ares.Count = Math.Min (_bufferLength' _decoder.ChunkLeft + 6);          base.BeginRead (ares.Buffer' ares.Offset' ares.Count' onRead' rstate);        }        catch (Exception ex) {          _context.Connection.SendError (ex.Message' 400);          ares.Complete (ex);        }
Magic Number,WebSocketSharp.Net,ChunkedRequestStream,C:\repos\sta_websocket-sharp\websocket-sharp\Net\ChunkedRequestStream.cs,EndRead,The following statement contains a magic number: if (ares.HasException)          throw new HttpListenerException (400' "I/O operation aborted.");
Magic Number,WebSocketSharp.Net,AuthenticationChallenge,C:\repos\sta_websocket-sharp\websocket-sharp\Net\AuthenticationChallenge.cs,Parse,The following statement contains a magic number: var chal = value.Split (new[] { ' ' }' 2);
Magic Number,WebSocketSharp.Net,AuthenticationChallenge,C:\repos\sta_websocket-sharp\websocket-sharp\Net\AuthenticationChallenge.cs,Parse,The following statement contains a magic number: if (chal.Length != 2)          return null;
Magic Number,WebSocketSharp.Net,AuthenticationChallenge,C:\repos\sta_websocket-sharp\websocket-sharp\Net\AuthenticationChallenge.cs,ToDigestString,The following statement contains a magic number: var output = new StringBuilder (128);
Magic Number,WebSocketSharp.Net,AuthenticationResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\AuthenticationResponse.cs,hash,The following statement contains a magic number: var res = new StringBuilder (64);
Magic Number,WebSocketSharp.Net,AuthenticationResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\AuthenticationResponse.cs,Parse,The following statement contains a magic number: try {          var cred = value.Split (new[] { ' ' }' 2);          if (cred.Length != 2)            return null;            var schm = cred[0].ToLower ();          return schm == "basic"                 ? new AuthenticationResponse (                     AuthenticationSchemes.Basic' ParseBasicCredentials (cred[1]))                 : schm == "digest"                   ? new AuthenticationResponse (                       AuthenticationSchemes.Digest' ParseParameters (cred[1]))                   : null;        }        catch {        }
Magic Number,WebSocketSharp.Net,AuthenticationResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\AuthenticationResponse.cs,Parse,The following statement contains a magic number: try {          var cred = value.Split (new[] { ' ' }' 2);          if (cred.Length != 2)            return null;            var schm = cred[0].ToLower ();          return schm == "basic"                 ? new AuthenticationResponse (                     AuthenticationSchemes.Basic' ParseBasicCredentials (cred[1]))                 : schm == "digest"                   ? new AuthenticationResponse (                       AuthenticationSchemes.Digest' ParseParameters (cred[1]))                   : null;        }        catch {        }
Magic Number,WebSocketSharp.Net,AuthenticationResponse,C:\repos\sta_websocket-sharp\websocket-sharp\Net\AuthenticationResponse.cs,ToDigestString,The following statement contains a magic number: var output = new StringBuilder (256);
Magic Number,WebSocketSharp.Net,AuthenticationBase,C:\repos\sta_websocket-sharp\websocket-sharp\Net\AuthenticationBase.cs,CreateNonceValue,The following statement contains a magic number: var src = new byte[16];
Magic Number,WebSocketSharp.Net,AuthenticationBase,C:\repos\sta_websocket-sharp\websocket-sharp\Net\AuthenticationBase.cs,CreateNonceValue,The following statement contains a magic number: var res = new StringBuilder (32);
Magic Number,WebSocketSharp.Net,HttpListenerPrefix,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerPrefix.cs,parse,The following statement contains a magic number: var startHost = uriPrefix.IndexOf (':') + 3;
Magic Number,WebSocketSharp.Net,HttpListenerPrefix,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerPrefix.cs,CheckPrefix,The following statement contains a magic number: var startHost = uriPrefix.IndexOf (':') + 3;
Magic Number,WebSocketSharp.Net,HttpListenerPrefix,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerPrefix.cs,CheckPrefix,The following statement contains a magic number: if (root == len - 2)          throw new ArgumentException ("No path is specified."' "uriPrefix");
Magic Number,WebSocketSharp.Net,HttpListenerAsyncResult,C:\repos\sta_websocket-sharp\websocket-sharp\Net\HttpListenerAsyncResult.cs,Complete,The following statement contains a magic number: _exception = _inGet && (exception is ObjectDisposedException)                     ? new HttpListenerException (995' "The listener is closed.")                     : exception;
Magic Number,WebSocketSharp.Net.WebSockets,TcpListenerWebSocketContext,C:\repos\sta_websocket-sharp\websocket-sharp\Net\WebSockets\TcpListenerWebSocketContext.cs,TcpListenerWebSocketContext,The following statement contains a magic number: _request = HttpRequest.Read (_stream' 90000);
Magic Number,WebSocketSharp.Net.WebSockets,TcpListenerWebSocketContext,C:\repos\sta_websocket-sharp\websocket-sharp\Net\WebSockets\TcpListenerWebSocketContext.cs,Authenticate,The following statement contains a magic number: auth =          () => {            retry++;            if (retry > 99) {              Close (HttpStatusCode.Forbidden);              return false;            }              var user =              HttpUtility.CreateUser (                _request.Headers["Authorization"]'                scheme'                realm'                _request.HttpMethod'                credentialsFinder              );              if (user == null || !user.Identity.IsAuthenticated) {              SendAuthenticationChallenge (chal);              return auth ();            }              _user = user;            return true;          };
Magic Number,WebSocketSharp.Net.WebSockets,TcpListenerWebSocketContext,C:\repos\sta_websocket-sharp\websocket-sharp\Net\WebSockets\TcpListenerWebSocketContext.cs,SendAuthenticationChallenge,The following statement contains a magic number: _request = HttpRequest.Read (_stream' 15000);
Missing Default,WebSocketSharp,Ext,C:\repos\sta_websocket-sharp\websocket-sharp\Ext.cs,GetStatusDescription,The following switch statement is missing a default case: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
