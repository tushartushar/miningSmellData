Implementation smell,Namespace,Class,File,Method,Description
Long Method,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,The method has 202 lines of code.
Long Method,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetTypeDeserializer,The method has 286 lines of code.
Long Method,MvcMusicStore.Models,SampleData,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Models\SampleData.cs,Seed,The method has 2207 lines of code.
Complex Method,Mvc3ToolsUpdateWeb_Default.Controllers,AccountController,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Controllers\AccountController.cs,ErrorCodeToString,Cyclomatic complexity of the method is 10
Complex Method,MvcMusicStore.Controllers,HomeController,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Controllers\HomeController.cs,GetTotalAlbumns,Cyclomatic complexity of the method is 31
Complex Method,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,Cyclomatic complexity of the method is 8
Complex Method,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,Cyclomatic complexity of the method is 21
Complex Method,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetTypeDeserializer,Cyclomatic complexity of the method is 64
Complex Method,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,LoadLocal,Cyclomatic complexity of the method is 17
Complex Method,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,StoreLocal,Cyclomatic complexity of the method is 17
Complex Method,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,EmitInt32,Cyclomatic complexity of the method is 34
Complex Method,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddDynamicParams,Cyclomatic complexity of the method is 9
Complex Method,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,Cyclomatic complexity of the method is 12
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Execute,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Query,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Query,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,QueryMultiple,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,QueryInternal,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,MultiMap,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,MultiMapImpl,The method has 10 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetDeserializer,The method has 5 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,SetupCommand,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,ExecuteCommand,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetTypeDeserializer,The method has 5 parameters.
Long Parameter List,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Add,The method has 5 parameters.
Long Statement,Mvc3ToolsUpdateWeb_Default.Controllers,AccountController,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Controllers\AccountController.cs,LogOn,The length of the statement  "			if (Url.IsLocalUrl (returnUrl) && returnUrl.Length > 1 && returnUrl.StartsWith ("/") && !returnUrl.StartsWith ("//") && !returnUrl.StartsWith ("/\\")) { " is 152.
Long Statement,Mvc3ToolsUpdateWeb_Default.Controllers,AccountController,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Controllers\AccountController.cs,Register,The length of the statement  "		Membership.CreateUser (model.UserName' model.Password' model.Email' "question"' "answer"' true' null' out createStatus); " is 120.
Long Statement,Mvc3ToolsUpdateWeb_Default.Controllers,AccountController,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Controllers\AccountController.cs,ErrorCodeToString,The length of the statement  "		return "The authentication provider returned an error. Please verify your entry and try again. If the problem persists' please contact your system administrator."; " is 163.
Long Statement,Mvc3ToolsUpdateWeb_Default.Controllers,AccountController,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Controllers\AccountController.cs,ErrorCodeToString,The length of the statement  "		return "The user creation request has been canceled. Please verify your entry and try again. If the problem persists' please contact your system administrator."; " is 161.
Long Statement,Mvc3ToolsUpdateWeb_Default.Controllers,AccountController,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Controllers\AccountController.cs,ErrorCodeToString,The length of the statement  "		return "An unknown error occurred. Please verify your entry and try again. If the problem persists' please contact your system administrator."; " is 143.
Long Statement,MvcMusicStore.Controllers,HomeController,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Controllers\HomeController.cs,Index,The length of the statement  "	Trace.Write (string.Format ("Total number of Albums = {0} and Albums with 'The' = {1}"' albumCount.Item1' albumCount.Item2)); " is 125.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetBindByName,The length of the statement  "	if (prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null) { " is 193.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetCachedSQL,The length of the statement  "	var data = _queryCache.Select (pair => Tuple.Create (pair.Key.connectionString' pair.Key.sql' pair.Value.GetHitCount ())); " is 122.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,LookupDbType,The length of the statement  "	throw new NotSupportedException (string.Format ("The member {0} of type {1} cannot be used as a parameter value"' name' type)); " is 127.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Execute,The length of the statement  "	return ExecuteCommand (cnn' transaction' sql' (object)param == null ? null : info.ParamReader' (object)param' commandTimeout' commandType); " is 139.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,QueryMultiple,The length of the statement  "	Identity identity = new Identity (sql' commandType' cnn' typeof(GridReader)' (object)param == null ? null : ((object)param).GetType ()' null); " is 142.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 163.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 162.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 162.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 161.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,MultiMap,The length of the statement  "	var results = MultiMapImpl<TFirst' TSecond' TThird' TFourth' TFifth' TReturn> (cnn' sql' map' param' transaction' splitOn' commandTimeout' commandType' null' null); " is 164.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,MultiMapImpl,The length of the statement  "	identity = identity ?? new Identity (sql' commandType' cnn' typeof(TFirst)' (object)param == null ? null : ((object)param).GetType ()' new[] { " is 142.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,MultiMapImpl,The length of the statement  "		if ((deserializer = cinfo.Deserializer).Func == null || (otherDeserializers = cinfo.OtherDeserializers) == null || hash != deserializer.Hash) { " is 143.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,MultiMapImpl,The length of the statement  "		Func<IDataReader' TReturn> mapIt = GenerateMapper<TFirst' TSecond' TThird' TFourth' TFifth' TReturn> (deserializer.Func' otherDeserializers' map); " is 146.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)); " is 158.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)); " is 204.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)); " is 248.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetCacheInfo,The length of the statement  "			else if (typeof(IEnumerable<KeyValuePair<string' object>>).IsAssignableFrom (identity.parametersType) && typeof(System.Dynamic.IDynamicMetaObjectProvider).IsAssignableFrom (identity.parametersType)) { " is 200.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetDeserializer,The length of the statement  "	if (!(typeMap.ContainsKey (type) || type.IsEnum || type.FullName == LinqBinary || (type.IsValueType && (underlyingType = Nullable.GetUnderlyingType (type)) != null && underlyingType.IsEnum))) { " is 193.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetDapperRowDeserializer,The length of the statement  "		throw new ArgumentException ("When using the multi-mapping APIs ensure you set the splitOn param if you have keys other than Id"' "splitOn"); " is 141.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The length of the statement  "				command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)"); " is 125.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,FilterParameters,The length of the statement  "	return parameters.Where (p => Regex.IsMatch (sql' "[@:]" + p.Name + "([^a-zA-Z0-9_]+|$)"' RegexOptions.IgnoreCase | RegexOptions.Multiline)); " is 141.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "	IEnumerable<PropertyInfo> props = type.GetProperties ().Where (p => p.GetIndexParameters ().Length == 0).OrderBy (p => p.Name); " is 127.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "			if (identity.sql.IndexOf ("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf (":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0) { " is 185.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "		if (dbType != DbType.Time)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time " is 194.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "				il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null); " is 123.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetStructDeserializer,The length of the statement  "	// no point using special per-type handling here; it boils down to the same' plus not all are supported anyway (see: SqlDataReader.GetChar - not supported!) " is 156.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "		throw new ArgumentException ("When using the multi-mapping APIs ensure you set the splitOn param if you have keys other than Id"' "splitOn"); " is 141.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "				string proposedTypes = "(" + String.Join ("' "' types.Select ((t' i) => t.FullName + " " + names [i]).ToArray ()) + ")"; " is 120.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "				throw new InvalidOperationException (String.Format ("A parameterless default constructor or one matching signature {0} is required for {1} materialization"' proposedTypes' type.FullName)); " is 188.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "	var members = (specializedConstructor != null ? names.Select (n => typeMap.GetConstructorParameter (specializedConstructor' n)) : names.Select (n => typeMap.GetMember (n))).ToList (); " is 183.
Long Statement,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "				il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null); " is 168.
Long Statement,Dapper,DbString,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameter,The length of the statement  "	param.DbType = IsAnsi ? (IsFixedLength ? DbType.AnsiStringFixedLength : DbType.AnsiString) : (IsFixedLength ? DbType.StringFixedLength : DbType.String); " is 152.
Long Statement,Dapper,DefaultTypeMap,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetPropertySetter,The length of the statement  "	return propertyInfo.DeclaringType == type ? propertyInfo.GetSetMethod (true) : propertyInfo.DeclaringType.GetProperty (propertyInfo.Name' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).GetSetMethod (true); " is 228.
Long Statement,Dapper,DefaultTypeMap,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetSettableProps,The length of the statement  "	return t.GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).Where (p => GetPropertySetter (p' t) != null).ToList (); " is 150.
Long Statement,Dapper,DefaultTypeMap,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,FindConstructor,The length of the statement  "	foreach (ConstructorInfo ctor in constructors.OrderBy (c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy (c => c.GetParameters ().Length)) { " is 142.
Long Statement,Dapper,DefaultTypeMap,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,FindConstructor,The length of the statement  "			if (unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string))) " is 172.
Long Statement,Dapper,DefaultTypeMap,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetConstructorParameter,The length of the statement  "	return new SimpleMemberMap (columnName' parameters.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase))); " is 145.
Long Statement,Dapper,DefaultTypeMap,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetMember,The length of the statement  "	var property = _properties.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.Ordinal)) ?? _properties.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase)); " is 218.
Long Statement,Dapper,DefaultTypeMap,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetMember,The length of the statement  "	var field = _fields.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.Ordinal)) ?? _fields.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase)); " is 207.
Long Statement,MvcMusicStore,MvcApplication,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Global.asax.cs,LoadConfiguration,The length of the statement  "		MvcMusicStore.Framework.Configuration.Current = connection.Query<ConfigurationModel> ("SELECT * FROM Configuration").First (); " is 126.
Long Statement,MvcMusicStore,MvcApplication,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Global.asax.cs,Application_Start,The length of the statement  "	HttpRuntime.Cache.Add ("test TimeSpan"' "Very important"' null' System.Web.Caching.Cache.NoAbsoluteExpiration' new TimeSpan (1' 1' 1' 1)' System.Web.Caching.CacheItemPriority.High' null); " is 187.
Long Statement,MvcMusicStore,MvcApplication,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Global.asax.cs,Application_Start,The length of the statement  "	HttpRuntime.Cache.Add ("test DateTime"' "Very important"' null' DateTime.Now.AddDays (1)' System.Web.Caching.Cache.NoSlidingExpiration' System.Web.Caching.CacheItemPriority.High' null); " is 185.
Long Statement,MvcMusicStore,MvcApplication,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Global.asax.cs,Application_Start,The length of the statement  "	//HttpRuntime.Cache.Add("Info_" + id.ToString() + "_" + quantity.ToString()' info' null' System.Web.Caching.Cache.NoAbsoluteExpiration' System.Web.Caching.Cache.NoSlidingExpiration' System.Web.Caching.CacheItemPriority.High' null); " is 231.
Long Statement,MvcMusicStore.Models,ShoppingCart,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Models\ShoppingCart.cs,GetCartDetials,The length of the statement  "		return connection.Query<CartItem> (string.Format ("SELECT C.RecordId' C.CartId' C.AlbumId' C.Count' C.DateCreated' A.Title AS AlbumTitle' A.Price AS AlbumPrice' AR.Name AS ArtistName' G.Name AS GenreName FROM Carts C LEFT JOIN Albums A ON C.AlbumId = A.AlbumId LEFT JOIN Artists AR ON A.ArtistId = AR.ArtistId LEFT JOIN Genres G ON A.GenreId = G.GenreId WHERE CartId = '{0}'"' ShoppingCartId)).ToList (); " is 404.
Complex Conditional,Mvc3ToolsUpdateWeb_Default.Controllers,AccountController,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Controllers\AccountController.cs,LogOn,The conditional expression  "Url.IsLocalUrl (returnUrl) && returnUrl.Length > 1 && returnUrl.StartsWith ("/") && !returnUrl.StartsWith ("//") && !returnUrl.StartsWith ("/\\")"  is complex.
Complex Conditional,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetBindByName,The conditional expression  "prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null"  is complex.
Complex Conditional,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetDeserializer,The conditional expression  "!(typeMap.ContainsKey (type) || type.IsEnum || type.FullName == LinqBinary || (type.IsValueType && (underlyingType = Nullable.GetUnderlyingType (type)) != null && underlyingType.IsEnum))"  is complex.
Complex Conditional,Dapper,DefaultTypeMap,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,FindConstructor,The conditional expression  "unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string))"  is complex.
Empty Catch Block,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,QueryMultiple,The method has an empty catch block.
Empty Catch Block,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,QueryInternal,The method has an empty catch block.
Magic Number,MvcMusicStore.Controllers,HomeController,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Controllers\HomeController.cs,Index,The following statement contains a magic number: HttpContext.Session ["TestObject"] = new Artist {  	ArtistId = 123'  	Name = "Test Artist"  };  
Magic Number,MvcMusicStore.Controllers,StoreController,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Controllers\StoreController.cs,TriggerDuplicateQuery,The following statement contains a magic number: using (var connection = factory.CreateConnection ()) {  	connection.ConnectionString = connectionString.ConnectionString;  	connection.Open ();  	for (int i = 0; i < 10; i++) {  		using (var command = connection.CreateCommand ()) {  			command.CommandText = "SELECT COUNT(*) FROM Albums WHERE Title LIKE 'A%'";  			command.CommandType = CommandType.Text;  			var result = (int)command.ExecuteScalar ();  		}  	}  }  
Magic Number,MvcMusicStore.Controllers,StoreController,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Controllers\StoreController.cs,TriggerDuplicateQuery,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	using (var command = connection.CreateCommand ()) {  		command.CommandText = "SELECT COUNT(*) FROM Albums WHERE Title LIKE 'A%'";  		command.CommandType = CommandType.Text;  		var result = (int)command.ExecuteScalar ();  	}  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: unchecked {  	int colCount = reader.FieldCount' hash = colCount;  	for (int i = 0; i < colCount; i++) {  		// binding code is only interested in names - not types  		object tmp = reader.GetName (i);  		hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  	}  	return hash;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: for (int i = 0; i < colCount; i++) {  	// binding code is only interested in names - not types  	object tmp = reader.GetName (i);  	hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	} else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			} else {  				command.Parameters.Add (listParam);  			}  		}  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  		} else {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match => {  				var grp = match.Value;  				var sb = new StringBuilder ("(").Append (grp).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (grp).Append (i);  				}  				return sb.Append (')').ToString ();  			});  		}  	}  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	} else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			} else {  				command.Parameters.Add (listParam);  			}  		}  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  		} else {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match => {  				var grp = match.Value;  				var sb = new StringBuilder ("(").Append (grp).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (grp).Append (i);  				}  				return sb.Append (')').ToString ();  			});  		}  	}  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	} else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			} else {  				command.Parameters.Add (listParam);  			}  		}  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  		} else {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match => {  				var grp = match.Value;  				var sb = new StringBuilder ("(").Append (grp).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (grp).Append (i);  				}  				return sb.Append (')').ToString ();  			});  		}  	}  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  } else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		} else {  			command.Parameters.Add (listParam);  		}  	}  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  	} else {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match => {  			var grp = match.Value;  			var sb = new StringBuilder ("(").Append (grp).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (grp).Append (i);  			}  			return sb.Append (')').ToString ();  		});  	}  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  } else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		} else {  			command.Parameters.Add (listParam);  		}  	}  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  	} else {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match => {  			var grp = match.Value;  			var sb = new StringBuilder ("(").Append (grp).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (grp).Append (i);  			}  			return sb.Append (')').ToString ();  		});  	}  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  } else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		} else {  			command.Parameters.Add (listParam);  		}  	}  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  	} else {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match => {  			var grp = match.Value;  			var sb = new StringBuilder ("(").Append (grp).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (grp).Append (i);  			}  			return sb.Append (')').ToString ();  		});  	}  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: foreach (var item in list) {  	count++;  	var listParam = command.CreateParameter ();  	listParam.ParameterName = namePrefix + count;  	listParam.Value = item ?? DBNull.Value;  	if (isString) {  		listParam.Size = 4000;  		if (item != null && ((string)item).Length > 4000) {  			listParam.Size = -1;  		}  	}  	if (isDbString && item as DbString != null) {  		var str = item as DbString;  		str.AddParameter (command' listParam.ParameterName);  	} else {  		command.Parameters.Add (listParam);  	}  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: foreach (var item in list) {  	count++;  	var listParam = command.CreateParameter ();  	listParam.ParameterName = namePrefix + count;  	listParam.Value = item ?? DBNull.Value;  	if (isString) {  		listParam.Size = 4000;  		if (item != null && ((string)item).Length > 4000) {  			listParam.Size = -1;  		}  	}  	if (isDbString && item as DbString != null) {  		var str = item as DbString;  		str.AddParameter (command' listParam.ParameterName);  	} else {  		command.Parameters.Add (listParam);  	}  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (isString) {  	listParam.Size = 4000;  	if (item != null && ((string)item).Length > 4000) {  		listParam.Size = -1;  	}  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (isString) {  	listParam.Size = 4000;  	if (item != null && ((string)item).Length > 4000) {  		listParam.Size = -1;  	}  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: listParam.Size = 4000;  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (item != null && ((string)item).Length > 4000) {  	listParam.Size = -1;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  } else {  	command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match => {  		var grp = match.Value;  		var sb = new StringBuilder ("(").Append (grp).Append (1);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (grp).Append (i);  		}  		return sb.Append (')').ToString ();  	});  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match => {  	var grp = match.Value;  	var sb = new StringBuilder ("(").Append (grp).Append (1);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (grp).Append (i);  	}  	return sb.Append (')').ToString ();  });  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,PackListParameters,The following statement contains a magic number: for (int i = 2; i <= count; i++) {  	sb.Append (''').Append (grp).Append (i);  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (filterParams) {  		if (identity.sql.IndexOf ("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf (":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0) {  			// can't see the parameter in the text (even in a comment' etc) - burn it with fire  			continue;  		}  	}  	if (prop.PropertyType == typeof(DbString)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [dbstring]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [dbstring] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [dbstring] [command] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(DbString).GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	if (checkForDuplicates) {  		// need to be a little careful about adding; use a utility method  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [command] [name]  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("FindOrAddParameter")' null);  		// stack is [parameters] [parameter]  	} else {  		// no risk of duplicates; just blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  		// stack is now [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [parameter] [parameter] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  	}  	if (dbType != DbType.Time)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time  	 {  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		EmitInt32 (il' (int)dbType);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  	il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  	// stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if (dbType == DbType.String && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' 4000);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' 4000);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]   		}  		if (prop.PropertyType.FullName == LinqBinary) {  			il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [[parameters]] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [[parameters]] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  		il.MarkLabel (endOfSize);  	}  	if (checkForDuplicates) {  		// stack is now [parameters] [parameter]  		il.Emit (OpCodes.Pop);  		// don't need parameter any more  	} else {  		// stack is now [parameters] [parameters] [parameter]  		// blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  		// stack is now [parameters]  		il.Emit (OpCodes.Pop);  		// IList.Add returns the new index (int); we don't care  	}  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (filterParams) {  		if (identity.sql.IndexOf ("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf (":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0) {  			// can't see the parameter in the text (even in a comment' etc) - burn it with fire  			continue;  		}  	}  	if (prop.PropertyType == typeof(DbString)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [dbstring]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [dbstring] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [dbstring] [command] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(DbString).GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	if (checkForDuplicates) {  		// need to be a little careful about adding; use a utility method  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [command] [name]  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("FindOrAddParameter")' null);  		// stack is [parameters] [parameter]  	} else {  		// no risk of duplicates; just blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  		// stack is now [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [parameter] [parameter] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  	}  	if (dbType != DbType.Time)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time  	 {  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		EmitInt32 (il' (int)dbType);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  	il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  	// stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if (dbType == DbType.String && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' 4000);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' 4000);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]   		}  		if (prop.PropertyType.FullName == LinqBinary) {  			il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [[parameters]] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [[parameters]] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  		il.MarkLabel (endOfSize);  	}  	if (checkForDuplicates) {  		// stack is now [parameters] [parameter]  		il.Emit (OpCodes.Pop);  		// don't need parameter any more  	} else {  		// stack is now [parameters] [parameters] [parameter]  		// blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  		// stack is now [parameters]  		il.Emit (OpCodes.Pop);  		// IList.Add returns the new index (int); we don't care  	}  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (checkForNull) {  	if (dbType == DbType.String && !haveInt32Arg1) {  		il.DeclareLocal (typeof(int));  		haveInt32Arg1 = true;  	}  	// relative stack: [boxed value]  	il.Emit (OpCodes.Dup);  	// relative stack: [boxed value] [boxed value]  	Label notNull = il.DefineLabel ();  	Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  	il.Emit (OpCodes.Brtrue_S' notNull);  	// relative stack [boxed value = null]  	il.Emit (OpCodes.Pop);  	// relative stack empty  	il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  	// relative stack [DBNull]  	if (dbType == DbType.String) {  		EmitInt32 (il' 0);  		il.Emit (OpCodes.Stloc_1);  	}  	if (allDone != null)  		il.Emit (OpCodes.Br_S' allDone.Value);  	il.MarkLabel (notNull);  	if (prop.PropertyType == typeof(string)) {  		il.Emit (OpCodes.Dup);  		// [string] [string]  		il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  		// [string] [length]  		EmitInt32 (il' 4000);  		// [string] [length] [4000]  		il.Emit (OpCodes.Cgt);  		// [string] [0 or 1]  		Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  		il.Emit (OpCodes.Brtrue_S' isLong);  		EmitInt32 (il' 4000);  		// [string] [4000]  		il.Emit (OpCodes.Br_S' lenDone);  		il.MarkLabel (isLong);  		EmitInt32 (il' -1);  		// [string] [-1]  		il.MarkLabel (lenDone);  		il.Emit (OpCodes.Stloc_1);  		// [string]   	}  	if (prop.PropertyType.FullName == LinqBinary) {  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  	}  	if (allDone != null)  		il.MarkLabel (allDone.Value);  	// relative stack [boxed value or DBNull]  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (checkForNull) {  	if (dbType == DbType.String && !haveInt32Arg1) {  		il.DeclareLocal (typeof(int));  		haveInt32Arg1 = true;  	}  	// relative stack: [boxed value]  	il.Emit (OpCodes.Dup);  	// relative stack: [boxed value] [boxed value]  	Label notNull = il.DefineLabel ();  	Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  	il.Emit (OpCodes.Brtrue_S' notNull);  	// relative stack [boxed value = null]  	il.Emit (OpCodes.Pop);  	// relative stack empty  	il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  	// relative stack [DBNull]  	if (dbType == DbType.String) {  		EmitInt32 (il' 0);  		il.Emit (OpCodes.Stloc_1);  	}  	if (allDone != null)  		il.Emit (OpCodes.Br_S' allDone.Value);  	il.MarkLabel (notNull);  	if (prop.PropertyType == typeof(string)) {  		il.Emit (OpCodes.Dup);  		// [string] [string]  		il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  		// [string] [length]  		EmitInt32 (il' 4000);  		// [string] [length] [4000]  		il.Emit (OpCodes.Cgt);  		// [string] [0 or 1]  		Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  		il.Emit (OpCodes.Brtrue_S' isLong);  		EmitInt32 (il' 4000);  		// [string] [4000]  		il.Emit (OpCodes.Br_S' lenDone);  		il.MarkLabel (isLong);  		EmitInt32 (il' -1);  		// [string] [-1]  		il.MarkLabel (lenDone);  		il.Emit (OpCodes.Stloc_1);  		// [string]   	}  	if (prop.PropertyType.FullName == LinqBinary) {  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  	}  	if (allDone != null)  		il.MarkLabel (allDone.Value);  	// relative stack [boxed value or DBNull]  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (prop.PropertyType == typeof(string)) {  	il.Emit (OpCodes.Dup);  	// [string] [string]  	il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  	// [string] [length]  	EmitInt32 (il' 4000);  	// [string] [length] [4000]  	il.Emit (OpCodes.Cgt);  	// [string] [0 or 1]  	Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  	il.Emit (OpCodes.Brtrue_S' isLong);  	EmitInt32 (il' 4000);  	// [string] [4000]  	il.Emit (OpCodes.Br_S' lenDone);  	il.MarkLabel (isLong);  	EmitInt32 (il' -1);  	// [string] [-1]  	il.MarkLabel (lenDone);  	il.Emit (OpCodes.Stloc_1);  	// [string]   }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (prop.PropertyType == typeof(string)) {  	il.Emit (OpCodes.Dup);  	// [string] [string]  	il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  	// [string] [length]  	EmitInt32 (il' 4000);  	// [string] [length] [4000]  	il.Emit (OpCodes.Cgt);  	// [string] [0 or 1]  	Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  	il.Emit (OpCodes.Brtrue_S' isLong);  	EmitInt32 (il' 4000);  	// [string] [4000]  	il.Emit (OpCodes.Br_S' lenDone);  	il.MarkLabel (isLong);  	EmitInt32 (il' -1);  	// [string] [-1]  	il.MarkLabel (lenDone);  	il.Emit (OpCodes.Stloc_1);  	// [string]   }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: EmitInt32 (il' 4000);  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: EmitInt32 (il' 4000);  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	} else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	} else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	} else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,LoadLocal,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Ldloc_S' (byte)index);  } else {  	il.Emit (OpCodes.Ldloc' (short)index);  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	} else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	} else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	} else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,StoreLocal,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Stloc_S' (byte)index);  } else {  	il.Emit (OpCodes.Stloc' (short)index);  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,LoadLocalAddress,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Ldloca_S' (byte)index);  } else {  	il.Emit (OpCodes.Ldloca' (short)index);  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,EmitInt32,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  } else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Dapper,SqlMapper,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,EmitInt32,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  } else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	} else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		} else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	} else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		} else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	} else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		} else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	} else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		} else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	} else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		} else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	} else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		} else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  } else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	} else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  } else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	} else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  } else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	} else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  } else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	} else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  } else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	} else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  } else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	} else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s != null) {  	if (s.Length <= 4000) {  		p.Size = 4000;  	}  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s != null) {  	if (s.Length <= 4000) {  		p.Size = 4000;  	}  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s.Length <= 4000) {  	p.Size = 4000;  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s.Length <= 4000) {  	p.Size = 4000;  }  
Magic Number,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameters,The following statement contains a magic number: p.Size = 4000;  
Magic Number,Dapper,DbString,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000) {  	param.Size = 4000;  } else {  	param.Size = Length;  }  
Magic Number,Dapper,DbString,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000) {  	param.Size = 4000;  } else {  	param.Size = Length;  }  
Magic Number,Dapper,DbString,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,AddParameter,The following statement contains a magic number: param.Size = 4000;  
Magic Number,Dapper,DefaultTypeMap,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,FindConstructor,The following statement contains a magic number: foreach (ConstructorInfo ctor in constructors.OrderBy (c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy (c => c.GetParameters ().Length)) {  	ParameterInfo[] ctorParameters = ctor.GetParameters ();  	if (ctorParameters.Length == 0)  		return ctor;  	if (ctorParameters.Length != types.Length)  		continue;  	int i = 0;  	for (; i < ctorParameters.Length; i++) {  		if (!String.Equals (ctorParameters [i].Name' names [i]' StringComparison.OrdinalIgnoreCase))  			break;  		if (types [i] == typeof(byte[]) && ctorParameters [i].ParameterType.FullName == SqlMapper.LinqBinary)  			continue;  		var unboxedType = Nullable.GetUnderlyingType (ctorParameters [i].ParameterType) ?? ctorParameters [i].ParameterType;  		if (unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string)))  			break;  	}  	if (i == ctorParameters.Length)  		return ctor;  }  
Magic Number,MvcMusicStore.Models,InventoryManager,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Models\InventoryManager.cs,GenerateInventory,The following statement contains a magic number: if (album != null) {  	//Detials  	inventory.Details.Id = albumId;  	inventory.Details.Name = album.Title;  	//Warehouse  	for (var i = 0; i <= Random.Next (Warehouses.Count - 1); i++) {  		inventory.Warehouse.Add (new InventoryLocations {  			Name = Warehouses [i]'  			Available = Random.Next (50)'  			Backorder = Random.Next (30)'  			Sold = Random.Next (40)  		});  	}  }  
Magic Number,MvcMusicStore.Models,InventoryManager,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Models\InventoryManager.cs,GenerateInventory,The following statement contains a magic number: if (album != null) {  	//Detials  	inventory.Details.Id = albumId;  	inventory.Details.Name = album.Title;  	//Warehouse  	for (var i = 0; i <= Random.Next (Warehouses.Count - 1); i++) {  		inventory.Warehouse.Add (new InventoryLocations {  			Name = Warehouses [i]'  			Available = Random.Next (50)'  			Backorder = Random.Next (30)'  			Sold = Random.Next (40)  		});  	}  }  
Magic Number,MvcMusicStore.Models,InventoryManager,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Models\InventoryManager.cs,GenerateInventory,The following statement contains a magic number: if (album != null) {  	//Detials  	inventory.Details.Id = albumId;  	inventory.Details.Name = album.Title;  	//Warehouse  	for (var i = 0; i <= Random.Next (Warehouses.Count - 1); i++) {  		inventory.Warehouse.Add (new InventoryLocations {  			Name = Warehouses [i]'  			Available = Random.Next (50)'  			Backorder = Random.Next (30)'  			Sold = Random.Next (40)  		});  	}  }  
Magic Number,MvcMusicStore.Models,InventoryManager,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Models\InventoryManager.cs,GenerateInventory,The following statement contains a magic number: for (var i = 0; i <= Random.Next (Warehouses.Count - 1); i++) {  	inventory.Warehouse.Add (new InventoryLocations {  		Name = Warehouses [i]'  		Available = Random.Next (50)'  		Backorder = Random.Next (30)'  		Sold = Random.Next (40)  	});  }  
Magic Number,MvcMusicStore.Models,InventoryManager,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Models\InventoryManager.cs,GenerateInventory,The following statement contains a magic number: for (var i = 0; i <= Random.Next (Warehouses.Count - 1); i++) {  	inventory.Warehouse.Add (new InventoryLocations {  		Name = Warehouses [i]'  		Available = Random.Next (50)'  		Backorder = Random.Next (30)'  		Sold = Random.Next (40)  	});  }  
Magic Number,MvcMusicStore.Models,InventoryManager,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Models\InventoryManager.cs,GenerateInventory,The following statement contains a magic number: for (var i = 0; i <= Random.Next (Warehouses.Count - 1); i++) {  	inventory.Warehouse.Add (new InventoryLocations {  		Name = Warehouses [i]'  		Available = Random.Next (50)'  		Backorder = Random.Next (30)'  		Sold = Random.Next (40)  	});  }  
Magic Number,MvcMusicStore.Models,InventoryManager,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Models\InventoryManager.cs,GenerateInventory,The following statement contains a magic number: inventory.Warehouse.Add (new InventoryLocations {  	Name = Warehouses [i]'  	Available = Random.Next (50)'  	Backorder = Random.Next (30)'  	Sold = Random.Next (40)  });  
Magic Number,MvcMusicStore.Models,InventoryManager,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Models\InventoryManager.cs,GenerateInventory,The following statement contains a magic number: inventory.Warehouse.Add (new InventoryLocations {  	Name = Warehouses [i]'  	Available = Random.Next (50)'  	Backorder = Random.Next (30)'  	Sold = Random.Next (40)  });  
Magic Number,MvcMusicStore.Models,InventoryManager,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Models\InventoryManager.cs,GenerateInventory,The following statement contains a magic number: inventory.Warehouse.Add (new InventoryLocations {  	Name = Warehouses [i]'  	Available = Random.Next (50)'  	Backorder = Random.Next (30)'  	Sold = Random.Next (40)  });  
Missing Default,Dapper,DynamicParameters,F:\newReposMay17\Glimpse_Glimpse\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs,Clean,The following switch statement is missing a default case: switch (name [0]) {  case '@':  case ':':  case '?':  	return name.Substring (1);  }  
