Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Glimpse.WindowsAzure.Storage.Infrastructure,WindowsAzureStorageTimelineMessage,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\WindowsAzureStorageTimelineMessage.cs,WindowsAzureStorageTimelineMessage,The method has 8 parameters. Parameters: serviceName' serviceOperation' resourceUri' responseCode' startTime' endTime' offset' requestEventArgs
Long Statement,Glimpse.WindowsAzure.Storage.Infrastructure,GlimpseOperationContextFactory,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\GlimpseOperationContextFactory.cs,Create,The length of the statement  "                    MessageBroker.Publish(new WindowsAzureStorageTimelineMessage(serviceType' args.Request.Method' args.Request.RequestUri.ToString()' (int)args.Response.StatusCode' args.RequestInformation.StartTime.ToLocalTime()' point.StartTime' point.Offset' args)); " is 249.
Long Statement,Glimpse.WindowsAzure.Storage.Infrastructure,OperationContextFactoryInitializer,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\OperationContextFactoryInitializer.cs,Setup,The length of the statement  "            OperationContextFactory.SetOperationContextFactory(new GlimpseOperationContextFactory(context.MessageBroker' context.TimerStrategy)); " is 133.
Long Statement,Glimpse.WindowsAzure.Storage.Infrastructure.Inspections,GeneralBestPracticesInspector,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\Inspections\GeneralBestPracticesInspector.cs,Inspect,The length of the statement  "                yield return "For optimal Windows Azure Storage throughput' it is best to set ServicePointManager.UseNagleAlgorithm = false"; " is 125.
Long Statement,Glimpse.WindowsAzure.Storage.Infrastructure.Inspections,GeneralBestPracticesInspector,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\Inspections\GeneralBestPracticesInspector.cs,Inspect,The length of the statement  "                yield return "For optimal Windows Azure Storage throughput' it is best to set ServicePointManager.Expect100Continue = false"; " is 125.
Long Statement,Glimpse.WindowsAzure.Storage.Infrastructure.Inspections,GeneralBestPracticesInspector,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\Inspections\GeneralBestPracticesInspector.cs,Inspect,The length of the statement  "                yield return "For optimal Windows Azure Storage throughput' it is best to set ServicePointManager.DefaultConnectionLimit = 100 (or more)"; " is 138.
Long Statement,Glimpse.WindowsAzure.Storage.Infrastructure.Inspections,TableStorageEchoContentInspector,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\Inspections\TableStorageEchoContentInspector.cs,Inspect,The length of the statement  "                (message.ServiceOperation == "PUT" || message.ServiceOperation == "POST" || message.ServiceOperation == "MERGE" || message.ServiceOperation == "PATCH")) " is 152.
Long Statement,Glimpse.WindowsAzure.Storage.Infrastructure.Inspections,TableStorageEchoContentInspector,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\Inspections\TableStorageEchoContentInspector.cs,Inspect,The length of the statement  "                if (preferHeader != null && dataServiceVersionHeader != null && dataServiceVersionHeader.Contains("3.0") && preferHeader.ToLowerInvariant() != "return-no-content") " is 163.
Long Statement,Glimpse.WindowsAzure.Storage.Infrastructure.Inspections,TableStorageEchoContentInspector,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\Inspections\TableStorageEchoContentInspector.cs,Inspect,The length of the statement  "                    return new[] { "Disable the echocontent feature on the TableOperation instance or set the HTTP header Prefer:return-no-content. This will ensure the message payload isn't unnecessarily being returned in the operation response." }; " is 230.
Long Statement,Glimpse.WindowsAzure.Storage.Infrastructure.Inspections,TableStorageQueryIndexInspector,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\Inspections\TableStorageQueryIndexInspector.cs,Inspect,The length of the statement  "                    return new[] { "This query may not perform as intended. Consider optimizing the entity structure so that a PartitionKey/RowKey query can be executed instead." }; " is 161.
Long Statement,Glimpse.WindowsAzure.Storage.Tab,Storage,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Tab\Storage.cs,GetData,The length of the statement  "                model.Statistics.PricePerTenThousandPageViews = string.Format("${0}"' model.Statistics.TotalStorageTx * 1000 * 0.0000001 + timelineMessages.Sum(m => m.ResponseSize) * 10000 * (0.12 / 1024 / 1024 / 1024)); " is 204.
Complex Conditional,Glimpse.WindowsAzure.Storage.Infrastructure.Inspections,TableStorageEchoContentInspector,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\Inspections\TableStorageEchoContentInspector.cs,Inspect,The conditional expression  "message.ServiceName == "Table" &&                  (message.ServiceOperation == "PUT" || message.ServiceOperation == "POST" || message.ServiceOperation == "MERGE" || message.ServiceOperation == "PATCH")"  is complex.
Complex Conditional,Glimpse.WindowsAzure.Storage.Infrastructure.Inspections,TableStorageEchoContentInspector,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\Inspections\TableStorageEchoContentInspector.cs,Inspect,The conditional expression  "preferHeader != null && dataServiceVersionHeader != null && dataServiceVersionHeader.Contains("3.0") && preferHeader.ToLowerInvariant() != "return-no-content""  is complex.
Magic Number,Glimpse.WindowsAzure.Storage.Infrastructure,GlimpseOperationContextFactory,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\GlimpseOperationContextFactory.cs,DetermineServiceTypeFromUri,The following statement contains a magic number: if (requestUri.Host.Contains("blob") || requestUri.Port == 10000)              {                  return "Blob";              }
Magic Number,Glimpse.WindowsAzure.Storage.Infrastructure,GlimpseOperationContextFactory,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\GlimpseOperationContextFactory.cs,DetermineServiceTypeFromUri,The following statement contains a magic number: if (requestUri.Host.Contains("queue") || requestUri.Port == 10001)              {                  return "Queue";              }
Magic Number,Glimpse.WindowsAzure.Storage.Infrastructure,GlimpseOperationContextFactory,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\GlimpseOperationContextFactory.cs,DetermineServiceTypeFromUri,The following statement contains a magic number: if (requestUri.Host.Contains("table") || requestUri.Port == 10002)              {                  return "Table";              }
Magic Number,Glimpse.WindowsAzure.Storage.Infrastructure,LongExtensions,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\LongExtensions.cs,ToBytesHuman,The following statement contains a magic number: const int scale = 1024;
Magic Number,Glimpse.WindowsAzure.Storage.Infrastructure,WindowsAzureStorageTimelineMessage,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\WindowsAzureStorageTimelineMessage.cs,WindowsAzureStorageTimelineMessage,The following statement contains a magic number: foreach (var header in requestEventArgs.Request.Headers.AllKeys)              {                  RequestSize += header.Length + 2 + string.Join(";"' requestEventArgs.Request.Headers.GetValues(header)).Length;              }
Magic Number,Glimpse.WindowsAzure.Storage.Infrastructure,WindowsAzureStorageTimelineMessage,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\WindowsAzureStorageTimelineMessage.cs,WindowsAzureStorageTimelineMessage,The following statement contains a magic number: foreach (var header in requestEventArgs.Response.Headers.AllKeys)              {                  ResponseSize += header.Length + 2 + string.Join(";"' requestEventArgs.Response.Headers.GetValues(header)).Length;              }
Magic Number,Glimpse.WindowsAzure.Storage.Infrastructure.Inspections,GeneralBestPracticesInspector,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Infrastructure\Inspections\GeneralBestPracticesInspector.cs,Inspect,The following statement contains a magic number: if (ServicePointManager.DefaultConnectionLimit < 100)              {                  yield return "For optimal Windows Azure Storage throughput' it is best to set ServicePointManager.DefaultConnectionLimit = 100 (or more)";              }
Magic Number,Glimpse.WindowsAzure.Storage.Tab,Storage,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Tab\Storage.cs,GetData,The following statement contains a magic number: if (timelineMessages != null)              {                  model.Statistics.TotalStorageTx = timelineMessages.Count();                  model.Statistics.TotalBlobTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Blob"));                  model.Statistics.TotalTableTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Table"));                  model.Statistics.TotalQueueTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Queue"));                  model.Statistics.TotalTrafficToStorage = timelineMessages.Sum(m => m.RequestSize).ToBytesHuman();                  model.Statistics.TotalTrafficFromStorage = timelineMessages.Sum(m => m.ResponseSize).ToBytesHuman();                  model.Statistics.PricePerTenThousandPageViews = string.Format("${0}"' model.Statistics.TotalStorageTx * 1000 * 0.0000001 + timelineMessages.Sum(m => m.ResponseSize) * 10000 * (0.12 / 1024 / 1024 / 1024));                    model.Requests = FlattenRequests(timelineMessages);                  model.Warnings = AnalyzeMessagesForWarnings(timelineMessages);                    return model;              }
Magic Number,Glimpse.WindowsAzure.Storage.Tab,Storage,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Tab\Storage.cs,GetData,The following statement contains a magic number: if (timelineMessages != null)              {                  model.Statistics.TotalStorageTx = timelineMessages.Count();                  model.Statistics.TotalBlobTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Blob"));                  model.Statistics.TotalTableTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Table"));                  model.Statistics.TotalQueueTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Queue"));                  model.Statistics.TotalTrafficToStorage = timelineMessages.Sum(m => m.RequestSize).ToBytesHuman();                  model.Statistics.TotalTrafficFromStorage = timelineMessages.Sum(m => m.ResponseSize).ToBytesHuman();                  model.Statistics.PricePerTenThousandPageViews = string.Format("${0}"' model.Statistics.TotalStorageTx * 1000 * 0.0000001 + timelineMessages.Sum(m => m.ResponseSize) * 10000 * (0.12 / 1024 / 1024 / 1024));                    model.Requests = FlattenRequests(timelineMessages);                  model.Warnings = AnalyzeMessagesForWarnings(timelineMessages);                    return model;              }
Magic Number,Glimpse.WindowsAzure.Storage.Tab,Storage,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Tab\Storage.cs,GetData,The following statement contains a magic number: if (timelineMessages != null)              {                  model.Statistics.TotalStorageTx = timelineMessages.Count();                  model.Statistics.TotalBlobTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Blob"));                  model.Statistics.TotalTableTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Table"));                  model.Statistics.TotalQueueTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Queue"));                  model.Statistics.TotalTrafficToStorage = timelineMessages.Sum(m => m.RequestSize).ToBytesHuman();                  model.Statistics.TotalTrafficFromStorage = timelineMessages.Sum(m => m.ResponseSize).ToBytesHuman();                  model.Statistics.PricePerTenThousandPageViews = string.Format("${0}"' model.Statistics.TotalStorageTx * 1000 * 0.0000001 + timelineMessages.Sum(m => m.ResponseSize) * 10000 * (0.12 / 1024 / 1024 / 1024));                    model.Requests = FlattenRequests(timelineMessages);                  model.Warnings = AnalyzeMessagesForWarnings(timelineMessages);                    return model;              }
Magic Number,Glimpse.WindowsAzure.Storage.Tab,Storage,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Tab\Storage.cs,GetData,The following statement contains a magic number: if (timelineMessages != null)              {                  model.Statistics.TotalStorageTx = timelineMessages.Count();                  model.Statistics.TotalBlobTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Blob"));                  model.Statistics.TotalTableTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Table"));                  model.Statistics.TotalQueueTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Queue"));                  model.Statistics.TotalTrafficToStorage = timelineMessages.Sum(m => m.RequestSize).ToBytesHuman();                  model.Statistics.TotalTrafficFromStorage = timelineMessages.Sum(m => m.ResponseSize).ToBytesHuman();                  model.Statistics.PricePerTenThousandPageViews = string.Format("${0}"' model.Statistics.TotalStorageTx * 1000 * 0.0000001 + timelineMessages.Sum(m => m.ResponseSize) * 10000 * (0.12 / 1024 / 1024 / 1024));                    model.Requests = FlattenRequests(timelineMessages);                  model.Warnings = AnalyzeMessagesForWarnings(timelineMessages);                    return model;              }
Magic Number,Glimpse.WindowsAzure.Storage.Tab,Storage,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Tab\Storage.cs,GetData,The following statement contains a magic number: if (timelineMessages != null)              {                  model.Statistics.TotalStorageTx = timelineMessages.Count();                  model.Statistics.TotalBlobTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Blob"));                  model.Statistics.TotalTableTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Table"));                  model.Statistics.TotalQueueTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Queue"));                  model.Statistics.TotalTrafficToStorage = timelineMessages.Sum(m => m.RequestSize).ToBytesHuman();                  model.Statistics.TotalTrafficFromStorage = timelineMessages.Sum(m => m.ResponseSize).ToBytesHuman();                  model.Statistics.PricePerTenThousandPageViews = string.Format("${0}"' model.Statistics.TotalStorageTx * 1000 * 0.0000001 + timelineMessages.Sum(m => m.ResponseSize) * 10000 * (0.12 / 1024 / 1024 / 1024));                    model.Requests = FlattenRequests(timelineMessages);                  model.Warnings = AnalyzeMessagesForWarnings(timelineMessages);                    return model;              }
Magic Number,Glimpse.WindowsAzure.Storage.Tab,Storage,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Tab\Storage.cs,GetData,The following statement contains a magic number: if (timelineMessages != null)              {                  model.Statistics.TotalStorageTx = timelineMessages.Count();                  model.Statistics.TotalBlobTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Blob"));                  model.Statistics.TotalTableTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Table"));                  model.Statistics.TotalQueueTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Queue"));                  model.Statistics.TotalTrafficToStorage = timelineMessages.Sum(m => m.RequestSize).ToBytesHuman();                  model.Statistics.TotalTrafficFromStorage = timelineMessages.Sum(m => m.ResponseSize).ToBytesHuman();                  model.Statistics.PricePerTenThousandPageViews = string.Format("${0}"' model.Statistics.TotalStorageTx * 1000 * 0.0000001 + timelineMessages.Sum(m => m.ResponseSize) * 10000 * (0.12 / 1024 / 1024 / 1024));                    model.Requests = FlattenRequests(timelineMessages);                  model.Warnings = AnalyzeMessagesForWarnings(timelineMessages);                    return model;              }
Magic Number,Glimpse.WindowsAzure.Storage.Tab,Storage,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Tab\Storage.cs,GetData,The following statement contains a magic number: if (timelineMessages != null)              {                  model.Statistics.TotalStorageTx = timelineMessages.Count();                  model.Statistics.TotalBlobTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Blob"));                  model.Statistics.TotalTableTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Table"));                  model.Statistics.TotalQueueTx = timelineMessages.Count(m => m.EventName.StartsWith("WAZStorage:Queue"));                  model.Statistics.TotalTrafficToStorage = timelineMessages.Sum(m => m.RequestSize).ToBytesHuman();                  model.Statistics.TotalTrafficFromStorage = timelineMessages.Sum(m => m.ResponseSize).ToBytesHuman();                  model.Statistics.PricePerTenThousandPageViews = string.Format("${0}"' model.Statistics.TotalStorageTx * 1000 * 0.0000001 + timelineMessages.Sum(m => m.ResponseSize) * 10000 * (0.12 / 1024 / 1024 / 1024));                    model.Requests = FlattenRequests(timelineMessages);                  model.Warnings = AnalyzeMessagesForWarnings(timelineMessages);                    return model;              }
Magic Number,Glimpse.WindowsAzure.Storage.Tab,Storage,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Tab\Storage.cs,FlattenRequests,The following statement contains a magic number: return timelineMessages.Select(m => new StorageRequestModel              {                  Service = m.ServiceName'                  Operation = m.ServiceOperation'                  Url = m.Url'                  ResponseCode = m.ResponseCode'                  ResponseSize = m.ResponseSize'                  Duration = m.Duration'                  Offset = m.Offset'                  _metadata = m.ResponseCode >= 400 && m.ResponseCode < 600 ? new { Style = "error" } : null              }).ToList();
Magic Number,Glimpse.WindowsAzure.Storage.Tab,Storage,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure.Storage\Tab\Storage.cs,FlattenRequests,The following statement contains a magic number: return timelineMessages.Select(m => new StorageRequestModel              {                  Service = m.ServiceName'                  Operation = m.ServiceOperation'                  Url = m.Url'                  ResponseCode = m.ResponseCode'                  ResponseSize = m.ResponseSize'                  Duration = m.Duration'                  Offset = m.Offset'                  _metadata = m.ResponseCode >= 400 && m.ResponseCode < 600 ? new { Style = "error" } : null              }).ToList();
