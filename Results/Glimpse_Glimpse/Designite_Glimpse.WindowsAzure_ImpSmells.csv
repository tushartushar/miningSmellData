Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Glimpse.WindowsAzure.Infrastructure,WindowsAzureCloudServicesEnvironment,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure\Infrastructure\WindowsAzureCloudServicesEnvironment.cs,WrappedIsAvailable,The length of the statement  "                if (innerException2 != null && innerException2 is FileNotFoundException && innerException2.Message.Contains("msshrtmi")) " is 120.
Long Statement,Glimpse.WindowsAzure.Infrastructure,WindowsAzureCloudServicesEnvironment,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure\Infrastructure\WindowsAzureCloudServicesEnvironment.cs,TryLoadServiceRuntimeAssembly,The length of the statement  "                var serviceRuntimeAssembly = Assembly.LoadWithPartialName("Microsoft.WindowsAzure.ServiceRuntime' Culture=neutral' PublicKeyToken=31bf3856ad364e35' ProcessorArchitecture=MSIL"); " is 177.
Empty Catch Block,Glimpse.WindowsAzure.Infrastructure,WindowsAzureCloudServicesEnvironment,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure\Infrastructure\WindowsAzureCloudServicesEnvironment.cs,TryLoadServiceRuntimeTypes,The method has an empty catch block.
Magic Number,Glimpse.WindowsAzure.Infrastructure,WindowsAzureCloudServicesEnvironment,C:\repos\Glimpse_Glimpse\source\Glimpse.WindowsAzure\Infrastructure\WindowsAzureCloudServicesEnvironment.cs,WrappedIsAvailable,The following statement contains a magic number: try              {                  return (bool)RoleEnvironmentType.GetProperty("IsAvailable").GetValue(null' null);              }                catch (TargetInvocationException ex)              {                  Exception innerException1 = ex;                  for (int i = 0; i < 3; i++)                  {                      if (innerException1.InnerException != null)                      {                          innerException1 = innerException1.InnerException;                      }                  }                    if (innerException1 != null && innerException1.Message.Contains("C++ module failed to load"))                  {                      return false;                  }                    throw;              }              catch (TypeInitializationException ex)              {                  var innerException2 = ex.InnerException;                  if (innerException2 != null && innerException2 is FileNotFoundException && innerException2.Message.Contains("msshrtmi"))                  {                      return false;                  }                    throw;              }
