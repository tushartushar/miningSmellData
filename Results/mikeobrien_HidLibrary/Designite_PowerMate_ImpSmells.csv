Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,GriffinPowerMate,PowerMateState,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateState.cs,PowerMateState,The method has 6 parameters. Parameters: buttonState' knobDisplacement' ledBrightness' ledPulseEnabled' ledPulseDuringSleepEnabled' ledPulseSpeed
Long Statement,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,ParseState,The length of the statement  "                return new PowerMateState(buttonState' knobDisplacement' ledBrightness' ledPulseEnabled' ledPulseDuringSleepEnabled' ledPulseSpeed); " is 132.
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte [] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x03; // command                  data[4] = 0x00;                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte [] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x03; // command                  data[4] = 0x00;                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte [] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x03; // command                  data[4] = 0x00;                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte [] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x03; // command                  data[4] = 0x00;                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte [] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x03; // command                  data[4] = 0x00;                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte [] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x03; // command                  data[4] = 0x00;                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte [] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x03; // command                  data[4] = 0x00;                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte [] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x03; // command                  data[4] = 0x00;                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte [] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x03; // command                  data[4] = 0x00;                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseDuringSleepEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                   data[3] = 0x02;                  data[4] = 0x00; // command                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseDuringSleepEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                   data[3] = 0x02;                  data[4] = 0x00; // command                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseDuringSleepEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                   data[3] = 0x02;                  data[4] = 0x00; // command                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseDuringSleepEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                   data[3] = 0x02;                  data[4] = 0x00; // command                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseDuringSleepEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                   data[3] = 0x02;                  data[4] = 0x00; // command                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseDuringSleepEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                   data[3] = 0x02;                  data[4] = 0x00; // command                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseDuringSleepEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                   data[3] = 0x02;                  data[4] = 0x00; // command                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseDuringSleepEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                   data[3] = 0x02;                  data[4] = 0x00; // command                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseDuringSleepEnabled,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                   data[3] = 0x02;                  data[4] = 0x00; // command                  data[5] = enable ? (byte)0x01 : (byte)0x00;                  data[6] = 0x00;                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedPulseSpeed,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[9];                  data[0] = 0x00;                  data[1] = 0x41;                  data[2] = 0x01;                  data[3] = 0x04; // command                  data[4] = 0x00; // Table 0                  if (speed < 0)                  {                      data[5] = 0;                      data[6] = (byte)(-speed);                  }                   else if (speed == 0)                  {                      data[5] = 1;                      data[6] = 0;                  }                  else // speed > 0                  {                      data[5] = 2;                      data[6] = (byte)(speed);                  }                  data[7] = 0x00;                  data[8] = 0x00;                  HidReport report = new HidReport(9' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteFeatureData(data);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedBrightness,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[2];                  data[0] = 0;                  data[1] = (byte)brightness;                  HidReport report = new HidReport(2' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteReport(report);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,SetLedBrightness,The following statement contains a magic number: if (connectedToDriver)              {                  byte[] data = new byte[2];                  data[0] = 0;                  data[1] = (byte)brightness;                  HidReport report = new HidReport(2' new HidDeviceData(data' HidDeviceData.ReadStatus.Success));                  device.WriteReport(report);              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,OnReport,The following statement contains a magic number: if (report.Data.Length >= 6)              {                  PowerMateState state = ParseState(report.Data);                  if (!state.IsValid)                  {                      System.Diagnostics.Debug.WriteLine("Invalid PowerMate state");                  }                  else                  {                      GenerateEvents(state);                        if (debugPrintRawMessages)                      {                          System.Diagnostics.Debug.Write("PowerMate raw data: ");                          for (int i = 0; i < report.Data.Length; i++)                          {                              System.Diagnostics.Debug.Write(String.Format("{0:000} "' report.Data[i]));                          }                          System.Diagnostics.Debug.WriteLine("");                      }                  }              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,ParseState,The following statement contains a magic number: if (data.Length >= 6)              {                  PowerMateButtonState buttonState = data[0] == 0 ? PowerMateButtonState.Up : PowerMateButtonState.Down;                  int knobDisplacement = data[1] < 128 ? data[1] : -256 + data[1];                  int ledBrightness = data[2];                  bool ledPulseEnabled = (data[4] & 0x01) == 0x01;                  bool ledPulseDuringSleepEnabled = (data[4] & 0x04) == 0x04;                  int ledPulseSpeedFlags = (data[4] & 0x30) >> 4;                  int ledPulseSpeed = 0;                  switch (ledPulseSpeedFlags) {                      case 0: ledPulseSpeed = -data[5]; break;                      case 1: ledPulseSpeed = 0; break;                      case 2: ledPulseSpeed = data[5]; break;                  }                    return new PowerMateState(buttonState' knobDisplacement' ledBrightness' ledPulseEnabled' ledPulseDuringSleepEnabled' ledPulseSpeed);              }              else              {                  return new PowerMateState(); // PowerMateState.Invalid() will return false              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,ParseState,The following statement contains a magic number: if (data.Length >= 6)              {                  PowerMateButtonState buttonState = data[0] == 0 ? PowerMateButtonState.Up : PowerMateButtonState.Down;                  int knobDisplacement = data[1] < 128 ? data[1] : -256 + data[1];                  int ledBrightness = data[2];                  bool ledPulseEnabled = (data[4] & 0x01) == 0x01;                  bool ledPulseDuringSleepEnabled = (data[4] & 0x04) == 0x04;                  int ledPulseSpeedFlags = (data[4] & 0x30) >> 4;                  int ledPulseSpeed = 0;                  switch (ledPulseSpeedFlags) {                      case 0: ledPulseSpeed = -data[5]; break;                      case 1: ledPulseSpeed = 0; break;                      case 2: ledPulseSpeed = data[5]; break;                  }                    return new PowerMateState(buttonState' knobDisplacement' ledBrightness' ledPulseEnabled' ledPulseDuringSleepEnabled' ledPulseSpeed);              }              else              {                  return new PowerMateState(); // PowerMateState.Invalid() will return false              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,ParseState,The following statement contains a magic number: if (data.Length >= 6)              {                  PowerMateButtonState buttonState = data[0] == 0 ? PowerMateButtonState.Up : PowerMateButtonState.Down;                  int knobDisplacement = data[1] < 128 ? data[1] : -256 + data[1];                  int ledBrightness = data[2];                  bool ledPulseEnabled = (data[4] & 0x01) == 0x01;                  bool ledPulseDuringSleepEnabled = (data[4] & 0x04) == 0x04;                  int ledPulseSpeedFlags = (data[4] & 0x30) >> 4;                  int ledPulseSpeed = 0;                  switch (ledPulseSpeedFlags) {                      case 0: ledPulseSpeed = -data[5]; break;                      case 1: ledPulseSpeed = 0; break;                      case 2: ledPulseSpeed = data[5]; break;                  }                    return new PowerMateState(buttonState' knobDisplacement' ledBrightness' ledPulseEnabled' ledPulseDuringSleepEnabled' ledPulseSpeed);              }              else              {                  return new PowerMateState(); // PowerMateState.Invalid() will return false              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,ParseState,The following statement contains a magic number: if (data.Length >= 6)              {                  PowerMateButtonState buttonState = data[0] == 0 ? PowerMateButtonState.Up : PowerMateButtonState.Down;                  int knobDisplacement = data[1] < 128 ? data[1] : -256 + data[1];                  int ledBrightness = data[2];                  bool ledPulseEnabled = (data[4] & 0x01) == 0x01;                  bool ledPulseDuringSleepEnabled = (data[4] & 0x04) == 0x04;                  int ledPulseSpeedFlags = (data[4] & 0x30) >> 4;                  int ledPulseSpeed = 0;                  switch (ledPulseSpeedFlags) {                      case 0: ledPulseSpeed = -data[5]; break;                      case 1: ledPulseSpeed = 0; break;                      case 2: ledPulseSpeed = data[5]; break;                  }                    return new PowerMateState(buttonState' knobDisplacement' ledBrightness' ledPulseEnabled' ledPulseDuringSleepEnabled' ledPulseSpeed);              }              else              {                  return new PowerMateState(); // PowerMateState.Invalid() will return false              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,ParseState,The following statement contains a magic number: if (data.Length >= 6)              {                  PowerMateButtonState buttonState = data[0] == 0 ? PowerMateButtonState.Up : PowerMateButtonState.Down;                  int knobDisplacement = data[1] < 128 ? data[1] : -256 + data[1];                  int ledBrightness = data[2];                  bool ledPulseEnabled = (data[4] & 0x01) == 0x01;                  bool ledPulseDuringSleepEnabled = (data[4] & 0x04) == 0x04;                  int ledPulseSpeedFlags = (data[4] & 0x30) >> 4;                  int ledPulseSpeed = 0;                  switch (ledPulseSpeedFlags) {                      case 0: ledPulseSpeed = -data[5]; break;                      case 1: ledPulseSpeed = 0; break;                      case 2: ledPulseSpeed = data[5]; break;                  }                    return new PowerMateState(buttonState' knobDisplacement' ledBrightness' ledPulseEnabled' ledPulseDuringSleepEnabled' ledPulseSpeed);              }              else              {                  return new PowerMateState(); // PowerMateState.Invalid() will return false              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,ParseState,The following statement contains a magic number: if (data.Length >= 6)              {                  PowerMateButtonState buttonState = data[0] == 0 ? PowerMateButtonState.Up : PowerMateButtonState.Down;                  int knobDisplacement = data[1] < 128 ? data[1] : -256 + data[1];                  int ledBrightness = data[2];                  bool ledPulseEnabled = (data[4] & 0x01) == 0x01;                  bool ledPulseDuringSleepEnabled = (data[4] & 0x04) == 0x04;                  int ledPulseSpeedFlags = (data[4] & 0x30) >> 4;                  int ledPulseSpeed = 0;                  switch (ledPulseSpeedFlags) {                      case 0: ledPulseSpeed = -data[5]; break;                      case 1: ledPulseSpeed = 0; break;                      case 2: ledPulseSpeed = data[5]; break;                  }                    return new PowerMateState(buttonState' knobDisplacement' ledBrightness' ledPulseEnabled' ledPulseDuringSleepEnabled' ledPulseSpeed);              }              else              {                  return new PowerMateState(); // PowerMateState.Invalid() will return false              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,ParseState,The following statement contains a magic number: if (data.Length >= 6)              {                  PowerMateButtonState buttonState = data[0] == 0 ? PowerMateButtonState.Up : PowerMateButtonState.Down;                  int knobDisplacement = data[1] < 128 ? data[1] : -256 + data[1];                  int ledBrightness = data[2];                  bool ledPulseEnabled = (data[4] & 0x01) == 0x01;                  bool ledPulseDuringSleepEnabled = (data[4] & 0x04) == 0x04;                  int ledPulseSpeedFlags = (data[4] & 0x30) >> 4;                  int ledPulseSpeed = 0;                  switch (ledPulseSpeedFlags) {                      case 0: ledPulseSpeed = -data[5]; break;                      case 1: ledPulseSpeed = 0; break;                      case 2: ledPulseSpeed = data[5]; break;                  }                    return new PowerMateState(buttonState' knobDisplacement' ledBrightness' ledPulseEnabled' ledPulseDuringSleepEnabled' ledPulseSpeed);              }              else              {                  return new PowerMateState(); // PowerMateState.Invalid() will return false              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,ParseState,The following statement contains a magic number: if (data.Length >= 6)              {                  PowerMateButtonState buttonState = data[0] == 0 ? PowerMateButtonState.Up : PowerMateButtonState.Down;                  int knobDisplacement = data[1] < 128 ? data[1] : -256 + data[1];                  int ledBrightness = data[2];                  bool ledPulseEnabled = (data[4] & 0x01) == 0x01;                  bool ledPulseDuringSleepEnabled = (data[4] & 0x04) == 0x04;                  int ledPulseSpeedFlags = (data[4] & 0x30) >> 4;                  int ledPulseSpeed = 0;                  switch (ledPulseSpeedFlags) {                      case 0: ledPulseSpeed = -data[5]; break;                      case 1: ledPulseSpeed = 0; break;                      case 2: ledPulseSpeed = data[5]; break;                  }                    return new PowerMateState(buttonState' knobDisplacement' ledBrightness' ledPulseEnabled' ledPulseDuringSleepEnabled' ledPulseSpeed);              }              else              {                  return new PowerMateState(); // PowerMateState.Invalid() will return false              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,ParseState,The following statement contains a magic number: if (data.Length >= 6)              {                  PowerMateButtonState buttonState = data[0] == 0 ? PowerMateButtonState.Up : PowerMateButtonState.Down;                  int knobDisplacement = data[1] < 128 ? data[1] : -256 + data[1];                  int ledBrightness = data[2];                  bool ledPulseEnabled = (data[4] & 0x01) == 0x01;                  bool ledPulseDuringSleepEnabled = (data[4] & 0x04) == 0x04;                  int ledPulseSpeedFlags = (data[4] & 0x30) >> 4;                  int ledPulseSpeed = 0;                  switch (ledPulseSpeedFlags) {                      case 0: ledPulseSpeed = -data[5]; break;                      case 1: ledPulseSpeed = 0; break;                      case 2: ledPulseSpeed = data[5]; break;                  }                    return new PowerMateState(buttonState' knobDisplacement' ledBrightness' ledPulseEnabled' ledPulseDuringSleepEnabled' ledPulseSpeed);              }              else              {                  return new PowerMateState(); // PowerMateState.Invalid() will return false              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,ParseState,The following statement contains a magic number: if (data.Length >= 6)              {                  PowerMateButtonState buttonState = data[0] == 0 ? PowerMateButtonState.Up : PowerMateButtonState.Down;                  int knobDisplacement = data[1] < 128 ? data[1] : -256 + data[1];                  int ledBrightness = data[2];                  bool ledPulseEnabled = (data[4] & 0x01) == 0x01;                  bool ledPulseDuringSleepEnabled = (data[4] & 0x04) == 0x04;                  int ledPulseSpeedFlags = (data[4] & 0x30) >> 4;                  int ledPulseSpeed = 0;                  switch (ledPulseSpeedFlags) {                      case 0: ledPulseSpeed = -data[5]; break;                      case 1: ledPulseSpeed = 0; break;                      case 2: ledPulseSpeed = data[5]; break;                  }                    return new PowerMateState(buttonState' knobDisplacement' ledBrightness' ledPulseEnabled' ledPulseDuringSleepEnabled' ledPulseSpeed);              }              else              {                  return new PowerMateState(); // PowerMateState.Invalid() will return false              }
Magic Number,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,ParseState,The following statement contains a magic number: if (data.Length >= 6)              {                  PowerMateButtonState buttonState = data[0] == 0 ? PowerMateButtonState.Up : PowerMateButtonState.Down;                  int knobDisplacement = data[1] < 128 ? data[1] : -256 + data[1];                  int ledBrightness = data[2];                  bool ledPulseEnabled = (data[4] & 0x01) == 0x01;                  bool ledPulseDuringSleepEnabled = (data[4] & 0x04) == 0x04;                  int ledPulseSpeedFlags = (data[4] & 0x30) >> 4;                  int ledPulseSpeed = 0;                  switch (ledPulseSpeedFlags) {                      case 0: ledPulseSpeed = -data[5]; break;                      case 1: ledPulseSpeed = 0; break;                      case 2: ledPulseSpeed = data[5]; break;                  }                    return new PowerMateState(buttonState' knobDisplacement' ledBrightness' ledPulseEnabled' ledPulseDuringSleepEnabled' ledPulseSpeed);              }              else              {                  return new PowerMateState(); // PowerMateState.Invalid() will return false              }
Missing Default,GriffinPowerMate,PowerMateManager,C:\repos\mikeobrien_HidLibrary\examples\GriffinPowerMate\PowerMate\PowerMateManager.cs,ParseState,The following switch statement is missing a default case: switch (ledPulseSpeedFlags) {                      case 0: ledPulseSpeed = -data[5]; break;                      case 1: ledPulseSpeed = 0; break;                      case 2: ledPulseSpeed = data[5]; break;                  }
